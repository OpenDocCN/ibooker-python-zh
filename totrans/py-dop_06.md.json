["```py\nbrew install hugo\n```", "```py\nError: hugo 0.40.3 is already installed\nTo upgrade to 0.57.2, run brew upgrade hugo.\n```", "```py\n(.python-devops) ➜  ~ hugo version\nHugo Static Site Generator v0.57.2/extended darwin/amd64 BuildDate: unknown\n```", "```py\nhugo new site quickstart\n```", "```py\n\"\"\"Conversion code of old database fields into markdown example.\n\nIf you did a database dump of WordPress and then converted it to JSON, you could\ntweak this.\"\"\"\n\nimport os\nimport shutil\nfrom category import CAT\nfrom new_picture_products import PICTURES\n\ndef check_all_category():\n  ares = {}\n  REC = []\n  for pic in PICTURES:\n    res  = check_category(pic)\n    if not res:\n      pic[\"categories\"] = \"Other\"\n      REC.append(pic)\n      continue\n\n    title,key = res\n    if key:\n      print(\"FOUND MATCH: TITLE--[%s], CATEGORY--[%s]\" %\\\n        (title, key))\n      ares[title]= key\n      pic[\"categories\"] = key\n      REC.append(pic)\n  return ares, REC\n\ndef check_category(rec):\n\n  title = str(rec['title'])\n  for key, values in CAT.items():\n    print(\"KEY: %s, VALUE: %s\" % (key, values))\n    if title in key:\n      return title,key\n    for val in values:\n      if title in val:\n        return title,key\n\ndef move_image(val):\n  \"\"\"Creates a new copy of the uploaded images to img dir\"\"\"\n\n  source_picture = \"static/uploads/%s\" % val[\"picture\"]\n  destination_dir = \"static/img/\"\n  shutil.copy(source_picture, destination_dir)\n\ndef new_image_metadata(vals):\n  new_paths = []\n  for val in vals:\n    pic = val['picture'].split(\"/\")[-1:].pop()\n    destination_dir = \"static/img/%s\" % pic\n    val['picture'] = destination_dir\n    new_paths.append(val)\n  return new_paths\n\nCAT_LOOKUP = {'2100': 'Foo',\n 'a': 'Biz',\n 'b': 'Bam',\n 'c': 'Bar',\n '1': 'Foobar',\n '2': 'bizbar',\n '3': 'bam'}\n\ndef write_post(val):\n\n    tags = val[\"tags\"]\n    date = val[\"date\"]\n    title = val[\"title\"]\n    picture = val[\"picture\"]\n    categories = val[\"categories\"]\n    out = \"\"\"\n+++\ntags = [\"%s\"]\ncategories = [\"%s\"]\ndate = \"%s\"\ntitle = \"%s\"\nbanner = \"%s\"\n+++\n[![%s](%s)](%s)\n **Product Name**: %s\"\"\" %\\\n (tags, categories, date, title, picture.lstrip(\"/\"),\n   title, picture, picture, title)\n\n    filename = \"../content/blog/%s.md\" % title\n    if os.path.exists(filename):\n        print(\"Removing: %s\" % filename)\n        os.unlink(filename)\n\n    with open(filename, 'a') as the_file:\n        the_file.write(out)\n\nif __name__ == '__main__':\n    from new_pic_category import PRODUCT\n    for product in PRODUCT:\n        write_post(product)\n```", "```py\n\"\"\"\nCreates a very simple JSON index for Hugo to import into Algolia. Easy to extend.\n\n#might be useful to run this on content directory to remove spaces\nfor f in *\\ *; do mv \"$f\" \"${f// /_}\"; done\n\n\"\"\"\nimport os\nimport json\n\nCONTENT_ROOT = \"../content/products\"\nCONFIG = \"../config.toml\"\nINDEX_PATH = \"../index.json\"\n\ndef get_base_url():\n    for line in open(CONFIG):\n        if line.startswith(\"baseurl\"):\n            url = line.split(\"=\")[-1].strip().strip('\"\"')\n            return url\n\ndef build_url(base_url, title):\n\n    url = \"<a href='%sproducts/%s'>%s</a>\" %\\\n         (base_url.strip(), title.lower(), title)\n    return url\n\ndef clean_title(title):\n    title_one = title.replace(\"_\", \" \")\n    title_two = title_one.replace(\"-\", \" \")\n    title_three = title_two.capitalize()\n    return title_three\n\ndef build_index():\n    baseurl = get_base_url()\n    index =[]\n    posts = os.listdir(CONTENT_ROOT)\n    for line in posts:\n        print(\"FILE NAME: %s\" % line)\n        record = {}\n        title = line.strip(\".md\")\n        record['url'] = build_url(baseurl, title)\n        record['title'] = clean_title(title)\n        print(\"INDEX RECORD: %s\" % record)\n        index.append(record)\n    return index\n\ndef write_index():\n    index = build_index()\n    with open(INDEX_PATH, 'w') as outfile:\n        json.dump(index,outfile)\n\nif __name__ == '__main__':\n    write_index()\n```", "```py\nimport json\nfrom algoliasearch import algoliasearch\n\ndef update_index():\n    \"\"\"Deletes index, then updates it\"\"\"\n    print(\"Starting Updating Index\")\n    client = algoliasearch.Client(\"YOUR_KEY\", \"YOUR_VALUE\")\n    index = client.init_index(\"your_INDEX\")\n    print(\"Clearing index\")\n    index.clear_index()\n    print(\"Loading index\")\n    batch = json.load(open('../index.json'))\n    index.add_objects(batch)\n\nif __name__ == '__main__':\n    update_index()\n```", "```py\nbuild:\n  rm -rf public\n  hugo\n\nwatch: clean\n  hugo server -w\n\ncreate-index:\n  cd algolia;python make_algolia_index.py;cd ..\n\nupdate-index:\n  cd algolia;python sync_algolia_index.py;cd ..\n\nmake-index: create-index update-index\n\nclean:\n  -rm -rf public\n\nsync:\n  aws s3 --profile <yourawsprofile> sync --acl \\\n    \"public-read\" public/ s3://example.com\n\nbuild-deploy-local: build sync\n\nall: build-deploy-local\n```", "```py\nversion: 0.1\n\nenvironment_variables:\n  plaintext:\n    HUGO_VERSION: \"0.42\"\n\nphases:\n  install:\n    commands:\n      - cd /tmp\n      - wget https://github.com/gohugoio/hugo/releases/\\\n      download/v${HUGO_VERSION}/hugo_${HUGO_VERSION}_Linux-64bit.tar.gz\n      - tar -xzf hugo_${HUGO_VERSION}_Linux-64bit.tar.gz\n      - mv hugo /usr/bin/hugo\n      - cd -\n      - rm -rf /tmp/*\n  build:\n    commands:\n      - rm -rf public\n      - hugo\n  post_build:\n    commands:\n      - aws s3 sync public/ s3://<yourwebsite>.com/ --region us-west-2 --delete\n      - aws s3 cp s3://<yourwebsite>.com/\\\n      s3://<yourwebsite>.com/ --metadata-directive REPLACE \\\n        --cache-control 'max-age=604800' --recursive\n      - aws cloudfront create-invalidation --distribution-id=<YOURID> --paths '/*'\n      - echo Build completed on `date`\n```", "```py\nsteps:\n- name: python:3.7\n  id: INSTALL\n  entrypoint: python3\n  args:\n  - '-m'\n  - 'pip'\n  - 'install'\n  - '-t'\n  - '.'\n  - '-r'\n  - 'requirements.txt'\n- name: python:3.7\n  entrypoint: ./pylint_runner\n  id: LINT\n  waitFor:\n  - INSTALL\n- name: \"gcr.io/cloud-builders/gcloud\"\n  args: [\"app\", \"deploy\"]\ntimeout: \"1600s\"\nimages: ['gcr.io/$PROJECT_ID/pylint']\n```", "```py\nFlask==1.0.2\ngunicorn==19.9.0\npylint==2.3.1\n```", "```py\n    verify project is working\n    ```", "```py\n    output of command:\n    ```", "```py\n    ```", "```py\n    gcloud config set project $GOOGLE_CLOUD_PROJECT\n    ```", "```py\n    gcloud app create\n    ```", "```py\n    Creating App Engine application in project [helloml-xxx]\n    and region [us-central]....done.\n    Success! The app is now created.\n    Please use `gcloud app deploy` to deploy your first app.\n    ```", "```py\n    git clone https://github.com/GoogleCloudPlatform/python-docs-samples\n    ```", "```py\n    cd python-docs-samples/appengine/standard_python37/hello_world\n    ```", "```py\n    git clone https://github.com/noahgift/gcp-hello-ml.git\n    # Update .cloudshellcustomimagerepo.json with project and image name\n    # TIP: enable \"Boost Mode\" in in Cloudshell\n    cloudshell env build-local\n    cloudshell env push\n    cloudshell env update-default-image\n    # Restart Cloudshell VM\n    ```", "```py\n    virtualenv --python $(which python) venv\n    source venv/bin/activate\n    ```", "```py\n    which python\n    /home/noah_gift/python-docs-samples/appengine/\\\n      standard_python37/hello_world/venv/bin/python\n    ```", "```py\n    pip install -r requirements.txt\n    ```", "```py\n    Flask==1.0.2\n    ```", "```py\n    python main.py\n    ```", "```py\n    from flask import Flask\n    from flask import jsonify\n\n    app = Flask(__name__)\n\n    @app.route('/')\n    def hello():\n        \"\"\"Return a friendly HTTP greeting.\"\"\"\n        return 'Hello I like to make AI Apps'\n\n    @app.route('/name/<value>')\n    def name(value):\n        val = {\"value\": value}\n        return jsonify(val)\n\n    if __name__ == '__main__':\n        app.run(host='127.0.0.1', port=8080, debug=True)\n    ```", "```py\n    @app.route('/name/<value>')\n    def name(value):\n        val = {\"value\": value}\n        return jsonify(val)\n    ```", "```py\n    https://8080-dot-3104625-dot-devshell.appspot.com/name/lion\n    ```", "```py\n    {\n    value: \"lion\"\n    }\n    ```", "```py\n    gcloud app deploy\n    ```", "```py\n    Do you want to continue (Y/n)?  y\n    Beginning deployment of service [default]...\n    ╔════════════════════════════════════════════════════════════╗\n    ╠═ Uploading 934 files to Google Cloud Storage              ═╣\n    ```", "```py\n    gcloud app logs tail -s default\n    ```", "```py\n    Setting traffic split for service [default]...done.\n    Deployed service [default] to [https://helloml-xxx.appspot.com]\n    You can stream logs from the command line by running:\n      $ gcloud app logs tail -s default\n\n      $ gcloud app browse\n    (venv) noah_gift@cloudshell:~/python-docs-samples/appengine/\\\n      standard_python37/hello_world (helloml-242121)$ gcloud app\n     logs tail -s default\n    Waiting for new log entries...\n    2019-05-29 22:45:02 default[2019]  [2019-05-29 22:45:02 +0000] [8]\n    2019-05-29 22:45:02 default[2019]  [2019-05-29 22:45:02 +0000] [8]\n     (8)\n    2019-05-29 22:45:02 default[2019]  [2019-05-29 22:45:02 +0000] [8]\n    2019-05-29 22:45:02 default[2019]  [2019-05-29 22:45:02 +0000] [25]\n    2019-05-29 22:45:02 default[2019]  [2019-05-29 22:45:02 +0000] [27]\n    2019-05-29 22:45:04 default[2019]  \"GET /favicon.ico HTTP/1.1\" 404\n    2019-05-29 22:46:25 default[2019]  \"GET /name/usf HTTP/1.1\" 200\n    ```", "```py\n    @app.route('/html')\n    def html():\n        \"\"\"Returns some custom HTML\"\"\"\n        return \"\"\"\n     <title>This is a Hello World World Page</title>\n     <p>Hello</p>\n     <p><b>World</b></p>\n     \"\"\"\n    ```", "```py\n    touch Makefile\n    #this goes inside that file\n    install:\n      pip install -r requirements.txt\n    ```", "```py\n    pylint --disable=R,C main.py\n    ------------------------------------\n    Your code has been rated at 10.00/10\n    ```", "```py\n    import pandas as pd\n\n    @app.route('/pandas')\n    def pandas_sugar():\n        df = pd.read_csv(\n          \"https://raw.githubusercontent.com/noahgift/sugar/\\\n     master/data/education_sugar_cdc_2003.csv\")\n        return jsonify(df.to_dict())\n    ```", "```py\n    import wikipedia\n    @app.route('/wikipedia/<company>')\n    def wikipedia_route(company):\n        result = wikipedia.summary(company, sentences=10)\n        return result\n    ```", "```py\n        In [1]: from google.cloud import language\n           ...: from google.cloud.language import enums\n           ...:\n           ...: from google.cloud.language import types\n        In [2]:\n        In [2]: text = \"LeBron James plays for the Cleveland Cavaliers.\"\n           ...: client = language.LanguageServiceClient()\n           ...: document = types.Document(\n           ...:         content=text,\n           ...:         type=enums.Document.Type.PLAIN_TEXT)\n           ...: entities = client.analyze_entities(document).entities\n        In [3]: entities\n        ```", "```py\n    from flask import Flask\n    from flask import jsonify\n    import pandas as pd\n    import wikipedia\n\n    app = Flask(__name__)\n\n    @app.route('/')\n    def hello():\n        \"\"\"Return a friendly HTTP greeting.\"\"\"\n        return 'Hello I like to make AI Apps'\n\n    @app.route('/name/<value>')\n    def name(value):\n        val = {\"value\": value}\n        return jsonify(val)\n\n    @app.route('/html')\n    def html():\n        \"\"\"Returns some custom HTML\"\"\"\n        return \"\"\"\n     <title>This is a Hello World World Page</title>\n     <p>Hello</p>\n     <p><b>World</b></p>\n     \"\"\"\n    @app.route('/pandas')\n    def pandas_sugar():\n        df = pd.read_csv(\n          \"https://raw.githubusercontent.com/noahgift/sugar/\\\n     master/data/education_sugar_cdc_2003.csv\")\n        return jsonify(df.to_dict())\n\n    @app.route('/wikipedia/<company>')\n    def wikipedia_route(company):\n\n        # Imports the Google Cloud client library\n        from google.cloud import language\n        from google.cloud.language import enums\n        from google.cloud.language import types\n        result = wikipedia.summary(company, sentences=10)\n\n        client = language.LanguageServiceClient()\n        document = types.Document(\n            content=result,\n            type=enums.Document.Type.PLAIN_TEXT)\n        entities = client.analyze_entities(document).entities\n        return str(entities)\n\n    if __name__ == '__main__':\n        app.run(host='127.0.0.1', port=8080, debug=True)\n    ```", "```py\n#Jenkins deploy build step\nrsync -az --delete * /dev-efs/code/\n```"]