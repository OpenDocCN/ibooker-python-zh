["```py\nfrom PIL import Image, ImageFilter\n\nkitten = Image.open('kitten.jpg')\nblurryKitten = kitten.filter(ImageFilter.GaussianBlur)\nblurryKitten.save('kitten_blurred.jpg')\nblurryKitten.show()\n```", "```py\n$ sudo apt-get tesseract-ocr\n```", "```py\n$ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/\\\nHEAD/install.sh)\"\n$ brew install tesseract\n```", "```py\n$ tesseract --list-langs\n\n```", "```py\n$ pip install pytesseract\n\n```", "```py\nfrom PIL import Image\nimport pytesseract\n\nprint(pytesseract.image_to_string(Image.open('files/test.png')))\n\n```", "```py\n$ which tesseract\n```", "```py\npytesseract.pytesseract.tesseract_cmd = '/path/to/tesseract'\n\n```", "```py\nprint(pytesseract.image_to_boxes(Image.open('files/test.png')))\n\n```", "```py\nprint(pytesseract.image_to_data(Image.open('files/test.png')))\n\n```", "```py\nfrom PIL import Image\nimport pytesseract\nfrom pytesseract import Output\n\nprint(pytesseract.image_to_data(Image.open('files/test.png'),\n    output_type=Output.DICT))\nprint(pytesseract.image_to_string(Image.open('files/test.png'),\n    output_type=Output.BYTES))\n\n```", "```py\nimport numpy as np\n\nnumbers = [100, 102, 98, 97, 103]\nprint(np.std(numbers))\nprint(np.mean(numbers))\n\n```", "```py\n$ tesseract text.png textoutput\n$ cat textoutput.txt\n```", "```py\nThis is some text, written in Arial, that will be read by\nTesseract. Here are some symbols: !|@#$%&*()\n\n```", "```py\n$ tesseract text_bad.png -\n```", "```py\nThis is some text, written In Arlal, that\"\nTesseract. Here are some symbols: _\n```", "```py\nfrom PIL import Image\nimport pytesseract\n\ndef cleanFile(filePath, newFilePath):\n    image = Image.open(filePath)\n\n    #Set a threshold value for the image, and save\n    image = image.point(lambda x: 0 if x < 143 else 255)\n    image.save(newFilePath)\n    return image\n\nimage = cleanFile('files/textBad.png', 'files/textCleaned.png')\n\n#call tesseract to do OCR on the newly created image\nprint(pytesseract.image_to_string(image))\n\n```", "```py\nThis is some text, written In Anal, that will be read by \nTesseract Here are some symbols: !@#$%\"&'()\n```", "```py\nimport pytesseract\nfrom pytesseract import Output\nfrom PIL import Image\nimport numpy as np\n\ndef cleanFile(filePath, threshold):\n    image = Image.open(filePath)\n    #Set a threshold value for the image, and save\n    image = image.point(lambda x: 0 if x < threshold else 255)\n    return image\n\ndef getConfidence(image):\n    data = pytesseract.image_to_data(image, output_type=Output.DICT)\n    text = data['text']\n    confidences = []\n    numChars = []\n\n    for i in range(len(text)):\n        if data['conf'][i] > -1:\n            confidences.append(data['conf'][i])\n            numChars.append(len(text[i]))\n\n    return np.average(confidences, weights=numChars), sum(numChars)\n\nfilePath = 'files/textBad.png'\n\nstart = 80\nstep = 5\nend = 200\n\nfor threshold in range(start, end, step):\n    image = cleanFile(filePath, threshold)\n    scores = getConfidence(image)\n    print(\"threshold: \" + str(threshold) + \", confidence: \"\n        + str(scores[0]) + \" numChars \" + str(scores[1]))\n\n```", "```py\nthreshold: 80, confidence: 61.8333333333 numChars 18\nthreshold: 85, confidence: 64.9130434783 numChars 23\nthreshold: 90, confidence: 62.2564102564 numChars 39\nthreshold: 95, confidence: 64.5135135135 numChars 37\nthreshold: 100, confidence: 60.7878787879 numChars 66\nthreshold: 105, confidence: 61.9078947368 numChars 76\nthreshold: 110, confidence: 64.6329113924 numChars 79\nthreshold: 115, confidence: 69.7397260274 numChars 73\nthreshold: 120, confidence: 72.9078947368 numChars 76\nthreshold: 125, confidence: 73.582278481 numChars 79\nthreshold: 130, confidence: 75.6708860759 numChars 79\nthreshold: 135, confidence: 76.8292682927 numChars 82\nthreshold: 140, confidence: 72.1686746988 numChars 83\nthreshold: 145, confidence: 75.5662650602 numChars 83\nthreshold: 150, confidence: 77.5443037975 numChars 79\nthreshold: 155, confidence: 79.1066666667 numChars 75\nthreshold: 160, confidence: 78.4666666667 numChars 75\nthreshold: 165, confidence: 80.1428571429 numChars 70\nthreshold: 170, confidence: 78.4285714286 numChars 70\nthreshold: 175, confidence: 76.3731343284 numChars 67\nthreshold: 180, confidence: 76.7575757576 numChars 66\nthreshold: 185, confidence: 79.4920634921 numChars 63\nthreshold: 190, confidence: 76.0793650794 numChars 63\nthreshold: 195, confidence: 70.6153846154 numChars 65\n\n```", "```py\nthreshold: 145, confidence: 75.5662650602 numChars 83\nthreshold: 150, confidence: 97.1234567890 numChars 82\n\n```", "```py\n# Retrieve and image URL and read the image as text\ndef image_to_text(image):\n    urlretrieve(image, 'page.jpg')\n    imageList.append(image)\n    print(pytesseract.image_to_string(Image.open('page.jpg')))\n\n# Create new Selenium driver\ndriver = webdriver.Chrome(service=Service(CHROMEDRIVER_PATH))\n\ndriver.get(\n    'https://www.amazon.com/Death-Ivan-Ilyich-Nikolayevich-Tolstoy/\\\ndp/1427027277')\n\n# Click on the book preview button\ndriver.find_element(By.ID, 'litb-canvas-click-wrapper').click()\ntry:\n    # Wait for iframe to load\n    WebDriverWait(driver, 600).until(\n        EC.presence_of_element_located((By.ID, 'litb-read-frame'))\n    )\nexcept TimeoutException:\n    print('Did not find the iframe')\n\n# Switch to iframe\nframe = driver.find_element(By.ID, 'litb-read-frame')\ndriver.switch_to.frame(frame)\n\ntry:\n    Wait for preview reader to load\n    WebDriverWait(driver, 600).until(\n        EC.presence_of_element_located((By.ID, 'kr-renderer'))\n    )\nexcept TimeoutException:\n    print('Did not find the images')\n\n# Collect all images inside divs with the \"data-page\" attribute\nimages = driver.find_elements(By.XPATH, '//div[@data-page]/img')\nfor image in images:\n    image_url = image.get_attribute('src')\n    image_to_text(image_url)\n\ndriver.quit()\n\n```", "```py\nChapter I\n\nDuring an interval in the Melvinski trial in the large\nbuilding of the Law Courts the members and public\nprosecutor met in Ivan Egorovich Shebek's private\nroom, where the conversation turned on the celebrated\nKrasovski case. Fedor Vasilievich warmly maintained\nthat it was not subject to their jurisdiction, Ivan\nEgorovich maintained the contrary, while Peter\nIvanovich, not having entered into the discussion at\nthe start, took no part in it but looked through the\nGazette which had just been handed in.\n\n“Gentlemen,” he said, “Ivan Ilych has died!”\n\n```", "```py\nit is he who is dead and not 1.\n\n```", "```py\n$ tesseract U8DG.png -\n\nu& DS\n\n```", "```py\nfrom bs4 import BeautifulSoup\nfrom urllib.request import urlopen, urlretrieve\nimport os \n\nif not os.path.exists('captchas'):\n    os.mkdir('captchas')\n\nfor i in range(0, 100):\n    bs = BeautifulSoup(urlopen('https://pythonscraping.com/humans-only/'))\n    imgUrl = bs.find('img', {'class': 'wpcf7-captchac'})['src']\n    urlretrieve(imgUrl, f'captchas/{imgUrl.split(\"/\")[-1]}')    \n\n```", "```py\ndef cleanImage(imagePath):\n    image = Image.open(imagePath)\n    image = image.point(lambda x: 255 if x<143 else 0)\n    image = ImageOps.expand(image,border=20,fill='white')\n    image.save(imagePath)\n\nfor filename in os.listdir('captchas'):\n    if '.png' in filename:\n        cleanImage(f'captchas/{filename}')\n```", "```py\nA 32 34 54 58\nK 66 32 91 56\n6 101 34 117 57\nF 135 32 156 57\n\n```", "```py\nCLEANED_DIR = 'cleaned'\nBOX_DIR = 'box'\nEXP_DIR = 'exp'\nclass TesseractTrainer():\n    def __init__(self, languageName, fontName, directory='data'):\n        self.languageName = languageName\n        self.fontName = fontName\n        self.directory = directory\n\n    def runAll(self):\n        os.chdir(self.directory)\n        self.createDirectories()\n        self.createFontProperties()\n        prefixes = self.renameFiles()\n        self.createTrainingFiles(prefixes)\n        self.extractUnicode()\n        self.runShapeClustering()\n        self.runMfTraining()\n        self.runCnTraining()\n        self.createTessData()\n\n```", "```py\ntrainer = TesseractTrainer('captcha', 'captchaFont')\ntrainer.runAll()\n\n```", "```py\ncaptchaFont 0 0 0 0 0\n```", "```py\n$ tesseract --list-langs\n```", "```py\nList of available languages in \"/opt/homebrew/share/tessdata/\" (3):\neng\nosd\nsnum\n\n```", "```py\n$ export TESSDATA_PREFIX=/opt/homebrew/share/tessdata/\n```", "```py\n$ cp data/exp/cap.traineddata $TESSDATA_PREFIX/cap.traineddata\n\n```", "```py\n$ tesseract -l captcha U8DG.png -\n\nU8DG\n```", "```py\nhtml = urlopen('https://www.pythonscraping.com/humans-only')\nbs = BeautifulSoup(html, 'html.parser')\n#Gather prepopulated form values\nhiddenToken = bs.find(\n    'input',\n    {'name':'_wpcf7_captcha_challenge_captcha-170'}\n)['value']\n```", "```py\ndef getCaptchaSolution(hiddenToken):\n    imageLocation = f'https://pythonscraping.com/wp-content/\\\nuploads/wpcf7_captcha/{hiddenToken}.png'\n    urlretrieve(imageLocation, 'captcha.png')\n    cleanImage('captcha.png')\n    p = subprocess.Popen(\n        ['tesseract','-l', 'captcha', 'captcha.png', 'output'],\n        stdout=subprocess.PIPE,stderr=subprocess.PIPE\n    )\n    p.wait()\n    f = open('output.txt', 'r')\n\n    #Clean any whitespace characters\n    captchaResponse = f.read().replace(' ', '').replace('\\n', '')\n    print('Captcha solution attempt: '+captchaResponse)\n    return captchaResponse\n\n```", "```py\nif len(captcha_solution) == 4:\n    formSubmissionUrl = 'https://pythonscraping.com/wp-json/contact-form-7/v1/\\\ncontact-forms/93/feedback'\n    headers = {'Content-Type': 'multipart/form-data;boundary=----WebKitFormBou\\\nndaryBFvsPGsghJe0Esco'}\n    r = requests.post(formSubmissionUrl, data=form_data, headers=headers)\n    print(r.text)\nelse:\n    print('There was a problem reading the CAPTCHA correctly!')\n```", "```py\nCaptcha solution attempt: X9SU\n{\"contact_form_id\":93,\"status\":\"mail_sent\",\"message\":\n\"Thank you for your message. It has been sent.\",\n\"posted_data_hash\":\"2bc8d1e0345bbfc281eac0410fc7b80d\",\n\"into\":\"#wpcf7-f93-o1\",\"invalid_fields\":[],\"captcha\":\n{\"captcha-170\":\n\"https:\\/\\/pythonscraping.com\\/wp-content\\/uploads\n\\/wpcf7_captcha\\/3551342528.png\"}}\n```"]