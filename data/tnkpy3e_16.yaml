- en: 14\. Classes and Functions#
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14\. 类和函数#
- en: 原文：[https://allendowney.github.io/ThinkPython/chap14.html](https://allendowney.github.io/ThinkPython/chap14.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://allendowney.github.io/ThinkPython/chap14.html](https://allendowney.github.io/ThinkPython/chap14.html)
- en: At this point you know how to use functions to organize code and how to use
    built-in types to organize data. The next step is **object-oriented programming**,
    which uses programmer-defined types to organize both code and data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经学会了如何使用函数组织代码，以及如何使用内置类型组织数据。下一步是**面向对象编程**，它使用程序员定义的类型来组织代码和数据。
- en: Object-oriented programming is a big topic, so we will proceed gradually. In
    this chapter, we’ll start with code that is not idiomatic – that is, it is not
    the kind of code experienced programmers write – but it is a good place to start.
    In the next two chapters, we will use additional features to write more idiomatic
    code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程是一个庞大的话题，因此我们将逐步进行。在本章中，我们将从不规范的代码开始——也就是说，它不是经验丰富的程序员所写的那种代码——但这是一个不错的起点。在接下来的两章中，我们将使用更多的特性来编写更规范的代码。
- en: 14.1\. Programmer-defined types[#](#programmer-defined-types "Link to this heading")
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 14.1\. 程序员定义的类型[#](#programmer-defined-types "跳转到此标题")
- en: 'We have used many of Python’s built-in types – now we will define a new type.
    As a first example, we’ll create a type called `Time` that represents a time of
    day. A programmer-defined type is also called a **class**. A class definition
    looks like this:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用了许多Python的内置类型——现在我们将定义一个新类型。作为第一个例子，我们将创建一个名为`Time`的类型，表示一天中的时间。程序员定义的类型也叫做**类**。一个类的定义如下：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The header indicates that the new class is called `Time`. The body is a docstring
    that explains what the class is for. Defining a class creates a **class object**.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 头部表示新类的名称是`Time`。主体部分是一个文档字符串，用来说明这个类的用途。定义一个类会创建一个**类对象**。
- en: The class object is like a factory for creating objects. To create a `Time`
    object, you call `Time` as if it were a function.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 类对象就像是一个创建对象的工厂。要创建一个`Time`对象，你可以像调用函数一样调用`Time`。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The result is a new object whose type is `__main__.Time`, where `__main__` is
    the name of the module where `Time` is defined.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个新对象，它的类型是`__main__.Time`，其中`__main__`是定义`Time`的模块的名称。
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When you print an object, Python tells you what type it is and where it is stored
    in memory (the prefix `0x` means that the following number is in hexadecimal).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打印一个对象时，Python会告诉你它的类型以及它在内存中的存储位置（前缀`0x`表示后面的数字是十六进制的）。
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Creating a new object is called **instantiation**, and the object is an **instance**
    of the class.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新对象称为**实例化**，该对象是类的**实例**。
- en: 14.2\. Attributes[#](#attributes "Link to this heading")
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 14.2\. 属性[#](#attributes "跳转到此标题")
- en: An object can contain variables, which are called **attributes** and pronounced
    with the emphasis on the first syllable, like “AT-trib-ute”, rather than the second
    syllable, like “a-TRIB-ute”. We can create attributes using dot notation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个对象可以包含变量，这些变量被称为**属性**，重音在第一个音节上，发音为“AT-trib-ute”，而不是重音在第二个音节上，发音为“a-TRIB-ute”。我们可以使用点符号来创建属性。
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This example creates attributes called `hour`, `minute`, and `second`, which
    contain the hours, minutes, and seconds of the time `11:59:01`, which is lunch
    time as far as I am concerned.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子创建了名为`hour`、`minute`和`second`的属性，它们分别表示时间`11:59:01`的小时、分钟和秒，按我个人的理解，这是午餐时间。
- en: The following diagram shows the state of `lunch` and its attributes after these
    assignments.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了在这些赋值之后，`lunch`及其属性的状态。
- en: '![_images/79b2dbc2a66bedacd471711c8756ef7145d45b5c0d6850b443c583976fa3b41f.png](../Images/77ecdbb368a95f38f325abb612a85465.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![_images/79b2dbc2a66bedacd471711c8756ef7145d45b5c0d6850b443c583976fa3b41f.png](../Images/77ecdbb368a95f38f325abb612a85465.png)'
- en: The variable `lunch` refers to a `Time` object, which contains three attributes.
    Each attribute refers to an integer. A state diagram like this – which shows an
    object and its attributes – is called an **object diagram**.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 变量`lunch`引用一个`Time`对象，该对象包含三个属性。每个属性都引用一个整数。像这样的状态图——展示了对象及其属性——被称为**对象图**。
- en: You can read the value of an attribute using the dot operator.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用点操作符来读取属性的值。
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You can use an attribute as part of any expression.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将一个属性作为任何表达式的一部分。
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: And you can use the dot operator in an expression in an f-string.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在f-string表达式中使用点操作符。
- en: '[PRE11]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: But notice that the previous example is not in the standard format. To fix it,
    we have to print the `minute` and `second` attributes with a leading zero. We
    can do that by extending the expressions in curly braces with a **format specifier**.
    In the following example, the format specifiers indicate that `minute` and `second`
    should be displayed with at least two digits and a leading zero if needed.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 但请注意，之前的例子并不符合标准格式。为了解决这个问题，我们需要在打印 `minute` 和 `second` 属性时加上前导零。我们可以通过在大括号中的表达式后面添加
    **格式说明符** 来实现。以下示例中的格式说明符表示 `minute` 和 `second` 应该至少显示两位数字，并在需要时加上前导零。
- en: '[PRE13]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We’ll use this f-string to write a function that displays the value of a `Time`object.
    You can pass an object as an argument in the usual way. For example, the following
    function takes a `Time` object as an argument.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个 f-string 来编写一个函数，显示 `Time` 对象的值。你可以像往常一样将一个对象作为参数传递。例如，下面的函数将 `Time`
    对象作为参数。
- en: '[PRE15]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When we call it, we can pass `lunch` as an argument.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用它时，我们可以将 `lunch` 作为参数传递。
- en: '[PRE16]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 14.3\. Objects as return values[#](#objects-as-return-values "Link to this heading")
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 14.3\. 对象作为返回值[#](#objects-as-return-values "Link to this heading")
- en: Functions can return objects. For example, `make_time` takes parameters called
    `hour`, `minute`, and `second`, stores them as attributes in a `Time` object,
    and returns the new object.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以返回对象。例如，`make_time` 接受名为 `hour`、`minute` 和 `second` 的参数，将它们作为属性存储在 `Time`
    对象中，并返回新对象。
- en: '[PRE18]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: It might be surprising that the parameters have the same names as the attributes,
    but that’s a common way to write a function like this. Here’s how we use `make_time`
    to create a `Time` object.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会让人惊讶的是，参数和属性的名称相同，但这是编写此类函数的常见方式。下面是我们如何使用 `make_time` 来创建一个 `Time` 对象。
- en: '[PRE19]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 14.4\. Objects are mutable[#](#objects-are-mutable "Link to this heading")
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 14.4\. 对象是可变的[#](#objects-are-mutable "Link to this heading")
- en: Suppose you are going to a screening of a movie, like *Monty Python and the
    Holy Grail*, which starts at `9:20 PM` and runs for `92` minutes, which is one
    hour `32` minutes. What time will the movie end?
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你去看一场电影，比如 *Monty Python and the Holy Grail*，它从 `9:20 PM` 开始，持续 `92` 分钟，也就是
    `1` 小时 `32` 分钟。电影什么时候结束？
- en: First, we’ll create a `Time` object that represents the start time.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个表示开始时间的 `Time` 对象。
- en: '[PRE21]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: To find the end time, we can modify the attributes of the `Time` object, adding
    the duration of the movie.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找到结束时间，我们可以修改 `Time` 对象的属性，加入电影的时长。
- en: '[PRE23]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The movie will be over at 10:52 PM.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 电影将在 `10:52 PM` 结束。
- en: 'Let’s encapsulate this computation in a function and generalize it to take
    the duration of the movie in three parameters: `hours`, `minutes`, and `seconds`.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这个计算封装成一个函数，并将其通用化，以接受电影时长的三个参数：`hours`、`minutes` 和 `seconds`。
- en: '[PRE25]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here is an example that demonstrates the effect.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个演示效果的示例。
- en: '[PRE26]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The following stack diagram shows the state of the program just before `increment_time`
    modifies the object.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下堆栈图显示了在 `increment_time` 修改对象之前，程序的状态。
- en: '![_images/ec55f16021188c53e3422f59671281ee881bbcc825c63d318957ce747f8e27e1.png](../Images/9d23255e2fd43eab2ce7769453b1414b.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![_images/ec55f16021188c53e3422f59671281ee881bbcc825c63d318957ce747f8e27e1.png](../Images/9d23255e2fd43eab2ce7769453b1414b.png)'
- en: Inside the function, `time` is an alias for `start`, so when `time` is modified,
    `start` changes.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数内部，`time` 是 `start` 的别名，因此当 `time` 被修改时，`start` 也会改变。
- en: This function works, but after it runs, we’re left with a variable named `start`
    that refers to an object that represents the *end* time, and we no longer have
    an object that represents the start time. It would be better to leave `start`
    unchanged and make a new object to represent the end time. We can do that by copying
    `start` and modifying the copy.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数是有效的，但运行后，我们会留下一个名为 `start` 的变量，它指向表示 *结束* 时间的对象，而我们不再拥有表示开始时间的对象。最好不要改变
    `start`，而是创建一个新的对象来表示结束时间。我们可以通过复制 `start` 并修改副本来实现。
- en: 14.5\. Copying[#](#copying "Link to this heading")
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 14.5\. 复制[#](#copying "Link to this heading")
- en: The `copy` module provides a function called `copy` that can duplicate any object.
    We can import it like this.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`copy` 模块提供了一个名为 `copy` 的函数，可以复制任何对象。我们可以像这样导入它。'
- en: '[PRE28]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: To see how it works, let’s start with a new `Time` object that represents the
    start time of the movie.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查看它是如何工作的，我们从一个新的 `Time` 对象开始，表示电影的开始时间。
- en: '[PRE29]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: And make a copy.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 并且制作一个副本。
- en: '[PRE30]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Now `start` and `end` contain the same data.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 `start` 和 `end` 包含相同的数据。
- en: '[PRE31]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: But the `is` operator confirms that they are not the same object.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 但 `is` 运算符确认它们不是同一个对象。
- en: '[PRE33]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Let’s see what the `==` operator does.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 `==` 运算符的作用。
- en: '[PRE35]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: You might expect `==` to yield `True` because the objects contain the same data.
    But for programmer-defined classes, the default behavior of the `==` operator
    is the same as the `is` operator – it checks identity, not equivalence.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会期望`==`返回`True`，因为这些对象包含相同的数据。但对于程序员自定义的类，`==`运算符的默认行为与`is`运算符相同——它检查的是身份，而不是等价性。
- en: 14.6\. Pure functions[#](#pure-functions "Link to this heading")
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 14.6\. 纯函数[#](#pure-functions "跳转到该标题")
- en: We can use `copy` to write pure functions that don’t modify their parameters.
    For example, here’s a function that takes a `Time` object and a duration in hours,
    minutes and seconds. It makes a copy of the original object, uses `increment_time`
    to modify the copy, and returns it.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`copy`来编写不修改其参数的纯函数。例如，下面是一个函数，它接受一个`Time`对象和一个持续时间（小时、分钟和秒）。它复制原始对象，使用`increment_time`来修改副本，并返回它。
- en: '[PRE37]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Here’s how we use it.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们如何使用它。
- en: '[PRE38]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The return value is a new object representing the end time of the movie. And
    we can confirm that `start` is unchanged.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是一个表示电影结束时间的新对象。我们可以确认`start`没有改变。
- en: '[PRE40]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '`add_time` is a **pure function** because it does not modify any of the objects
    passed to it as arguments and its only effect is to return a value.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`add_time`是一个**纯函数**，因为它不会修改任何传入的对象，其唯一的作用是返回一个值。'
- en: Anything that can be done with impure functions can also be done with pure functions.
    In fact, some programming languages only allow pure functions. Programs that use
    pure functions might be less error-prone, but impure functions are sometimes convenient
    and can be more efficient.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 任何可以通过不纯函数完成的事情，也可以通过纯函数完成。事实上，一些编程语言只允许使用纯函数。使用纯函数的程序可能更不容易出错，但不纯函数有时也很方便，并且可能更高效。
- en: In general, I suggest you write pure functions whenever it is reasonable and
    resort to impure functions only if there is a compelling advantage. This approach
    might be called a **functional programming style**.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，我建议你在合理的情况下编写纯函数，并且只有在有充分的优势时才使用不纯函数。这种方法可能被称为**函数式编程风格**。
- en: 14.7\. Prototype and patch[#](#prototype-and-patch "Link to this heading")
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 14.7\. 原型和修补[#](#prototype-and-patch "跳转到该标题")
- en: In the previous example, `increment_time` and `add_time` seem to work, but if
    we try another example, we’ll see that they are not quite correct.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`increment_time`和`add_time`似乎可以工作，但如果我们尝试另一个例子，就会发现它们并不完全正确。
- en: Suppose you arrive at the theater and discover that the movie starts at `9:40`,
    not `9:20`. Here’s what happens when we compute the updated end time.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你到达电影院，发现电影的开始时间是`9:40`，而不是`9:20`。当我们计算更新后的结束时间时，情况如下。
- en: '[PRE42]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The result is not a valid time. The problem is that `increment_time` does not
    deal with cases where the number of seconds or minutes adds up to more than `60`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 结果不是一个有效的时间。问题在于`increment_time`没有处理秒数或分钟数加到超过`60`的情况。
- en: Here’s an improved version that checks whether `second` exceeds or equals `60`
    – if so, it increments `minute` – then checks whether `minute` exceeds or equals
    `60` – if so, it increments `hour`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个改进版本，检查`second`是否大于或等于`60`——如果是，它会增加`minute`——然后检查`minute`是否大于或等于`60`——如果是，它会增加`hour`。
- en: '[PRE44]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Fixing `increment_time` also fixes `add_time`, which uses it. So now the previous
    example works correctly.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 修复`increment_time`也修复了使用它的`add_time`。所以现在之前的示例可以正确运行。
- en: '[PRE45]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: But this function is still not correct, because the arguments might be bigger
    than `60`. For example, suppose we are given the run time as `92` minutes, rather
    than `1` hours and `32` minutes. We might call `add_time` like this.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这个函数仍然不正确，因为参数可能大于`60`。例如，假设我们给出的运行时间是`92`分钟，而不是`1`小时`32`分钟。我们可能像这样调用`add_time`。
- en: '[PRE47]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The result is not a valid time. So let’s try a different approach, using the
    `divmod` function. We’ll make a copy of `start` and modify it by incrementing
    the `minute` attribute.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 结果不是一个有效的时间。所以我们尝试不同的方法，使用`divmod`函数。我们将复制`start`并通过增加`minute`属性来修改它。
- en: '[PRE49]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Now `minute` is `132`, which is `2` hours and `12` minutes. We can use `divmod`
    to divide by `60` and return the number of whole hours and the number of minutes
    left over.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`minute`是`132`，相当于`2`小时`12`分钟。我们可以使用`divmod`除以`60`，返回整数小时数和剩余的分钟数。
- en: '[PRE51]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Now `minute` is correct, and we can add the hours to `hour`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`minute`是正确的，我们可以将小时数加到`hour`中。
- en: '[PRE53]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The result is a valid time. We can do the same thing with `hour` and `second`,
    and encapsulate the whole process in a function.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个有效的时间。我们可以对`hour`和`second`做同样的事情，并将整个过程封装成一个函数。
- en: '[PRE55]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: With this version of `increment_time`, `add_time` works correctly, even if the
    arguments exceed `60`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本的`increment_time`中，即使参数超过`60`，`add_time`也能正常工作。
- en: '[PRE56]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: This section demonstrates a program development plan I call **prototype and
    patch**. We started with a simple prototype that worked correctly for the first
    example. Then we tested it with more difficult examples – when we found an error,
    we modified the program to fix it, like putting a patch on tire with a puncture.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本节展示了一种我称之为**原型与修补**的程序开发计划。我们从一个简单的原型开始，它在第一个例子中工作正常。然后我们用更复杂的例子进行了测试——当发现错误时，我们修改程序来修复它，就像给有破洞的轮胎打补丁一样。
- en: This approach can be effective, especially if you don’t yet have a deep understanding
    of the problem. But incremental corrections can generate code that is unnecessarily
    complicated – since it deals with many special cases – and unreliable – since
    it is hard to know if you have found all the errors.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法可能有效，特别是当你对问题的理解还不够深入时。但增量修正可能会产生不必要复杂的代码——因为它处理了许多特殊情况——而且不可靠——因为很难确定你是否已经找到了所有错误。
- en: 14.8\. Design-first development[#](#design-first-development "Link to this heading")
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 14.8\. 设计优先开发[#](#design-first-development "Link to this heading")
- en: An alternative plan is **design-first development**, which involves more planning
    before prototyping. In a design-first process, sometimes a high-level insight
    into the problem makes the programming much easier.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方案是**设计优先开发**，这种方法在原型设计之前涉及更多的规划。在设计优先的过程中，有时对问题的高层次洞察能让编程变得更加容易。
- en: In this case, the insight is that we can think of a `Time` object as a three-digit
    number in base 60 – also known as sexagesimal. The `second` attribute is the “ones
    column”, the `minute` attribute is the “sixties column”, and the `hour` attribute
    is the “thirty-six hundreds column”. When we wrote `increment_time`, we were effectively
    doing addition in base 60, which is why we had to carry from one column to the
    next.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，洞察力在于我们可以将`Time`对象视为一个60进制的三位数——也叫做性数字。`second`属性是“个位数”列，`minute`属性是“六十位数”列，`hour`属性是“三千六百位数”列。当我们编写`increment_time`时，我们实际上是在进行60进制的加法，这就是为什么我们必须从一个列进位到另一个列的原因。
- en: This observation suggests another approach to the whole problem – we can convert
    `Time` objects to integers and take advantage of the fact that Python knows how
    to do integer arithmetic.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这个观察结果暗示了另一种解决问题的方法——我们可以将`Time`对象转换为整数，利用Python处理整数运算的特性。
- en: Here is a function that converts from a `Time` to an integer.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个将`Time`转换为整数的函数。
- en: '[PRE58]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The result is the number of seconds since the beginning of the day. For example,
    `01:01:01` is `1` hour, `1` minute and `1` second from the beginning of the day,
    which is the sum of `3600` seconds, `60` seconds, and `1` second.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是自一天开始以来的秒数。例如，`01:01:01`是从一天开始算起的`1`小时、`1`分钟和`1`秒，这个值是`3600`秒、`60`秒和`1`秒的总和。
- en: '[PRE59]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: And here’s a function that goes in the other direction – converting an integer
    to a `Time` object – using the `divmod` function.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个将整数转换为`Time`对象的函数——它使用了`divmod`函数。
- en: '[PRE62]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: We can test it by converting the previous example back to a `Time`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将前面的例子转换回`Time`对象来进行测试。
- en: '[PRE63]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Using these functions, we can write a more concise version of `add_time`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些函数，我们可以编写一个更加简洁版的`add_time`。
- en: '[PRE65]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The first line converts the arguments to a `Time` object called `duration`.
    The second line converts `time` and `duration` to seconds and adds them. The third
    line converts the sum to a `Time` object and returns it.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行将参数转换为名为`duration`的`Time`对象。第二行将`time`和`duration`转换为秒并相加。第三行将结果转换为一个`Time`对象并返回。
- en: Here’s how it works.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它的工作原理。
- en: '[PRE66]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: In some ways, converting from base 60 to base 10 and back is harder than just
    dealing with times. Base conversion is more abstract; our intuition for dealing
    with time values is better.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些方面，从60进制转换到10进制再转换回来，比直接处理时间值要难一些。进制转换更为抽象，而我们对时间值的直觉理解要更强。
- en: But if we have the insight to treat times as base 60 numbers – and invest the
    effort to write the conversion functions `time_to_int` and `int_to_time` – we
    get a program that is shorter, easier to read and debug, and more reliable.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们有足够的洞察力，将时间视为以60为基数的数字——并投入精力编写转换函数`time_to_int`和`int_to_time`——我们就能得到一个更简洁、更易于阅读和调试、更可靠的程序。
- en: It is also easier to add features later. For example, imagine subtracting two
    `Time` objects to find the duration between them. The naive approach is to implement
    subtraction with borrowing. Using the conversion functions is easier and more
    likely to be correct.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 它也更容易在之后添加新特性。例如，假设你要对两个`Time`对象进行相减，以求得它们之间的持续时间。直接实现减法操作需要借位处理，使用转换函数更简单，也更可能正确。
- en: Ironically, sometimes making a problem harder – or more general – makes it easier,
    because there are fewer special cases and fewer opportunities for error.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 具有讽刺意味的是，有时将问题做得更复杂——或者更通用——反而能使问题更容易，因为特例更少，出错的机会也更少。
- en: '## 14.9\. Debugging[#](#debugging "Link to this heading")'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '## 14.9\. 调试[#](#debugging "Link to this heading")'
- en: Python provides several built-in functions that are useful for testing and debugging
    programs that work with objects. For example, if you are not sure what type an
    object is, you can ask.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Python提供了多个内置函数，可以帮助测试和调试与对象相关的程序。例如，如果你不确定一个对象的类型，可以直接询问。
- en: '[PRE68]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: You can also use `isinstance` to check whether an object is an instance of a
    particular class.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`isinstance`来检查一个对象是否是某个特定类的实例。
- en: '[PRE70]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: If you are not sure whether an object has a particular attribute, you can use
    the built-in function `hasattr`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不确定一个对象是否具有某个特定属性，你可以使用内置函数`hasattr`。
- en: '[PRE72]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: To get all of the attributes, and their values, in a dictionary, you can use
    `vars`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取字典中所有属性及其值，可以使用`vars`。
- en: '[PRE74]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: The `structshape` module, which we saw in [Chapter 11](chap11.html#section-debugging-11),
    also works with programmer-defined types.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`structshape`模块，我们在[第11章](chap11.html#section-debugging-11)中看到的，它也适用于程序员定义的类型。'
- en: '[PRE76]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 14.10\. Glossary[#](#glossary "Link to this heading")
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 14.10\. 术语表[#](#glossary "Link to this heading")
- en: '**object-oriented programming:** A style of programming that uses objects to
    organize code and data.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**面向对象编程：** 一种使用对象来组织代码和数据的编程风格。'
- en: '**class:** A programmer-defined type. A class definition creates a new class
    object.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**类：** 程序员定义的类型。类定义会创建一个新的类对象。'
- en: '**class object:** An object that represents a class – it is the result of a
    class definition.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**类对象：** 表示一个类的对象——它是类定义的结果。'
- en: '**instantiation:** The process of creating an object that belongs to a class.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**实例化：** 创建属于某个类的对象的过程。'
- en: '**instance:** An object that belongs to a class.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**实例：** 属于某个类的对象。'
- en: '**attribute:** A variable associated with an object, also called an instance
    variable.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性：** 与对象相关联的变量，也叫实例变量。'
- en: '**object diagram:** A graphical representation of an object, its attributes,
    and their values.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**对象图：** 对象、其属性及其值的图形表示。'
- en: '**format specifier:** In an f-string, a format specifier determines how a value
    is converted to a string.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**格式化说明符：** 在f-string中，格式化说明符决定了值如何被转换为字符串。'
- en: '**pure function:** A function that does not modify its parameters or have any
    effect other than returning a value.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**纯函数：** 一种不会修改其参数，也没有其他副作用的函数，唯一的作用是返回一个值。'
- en: '**functional programming style:** A way of programming that uses pure functions
    whenever possible.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**函数式编程风格：** 一种编程方式，尽可能使用纯函数。'
- en: '**prototype and patch:** A way of developing programs by starting with a rough
    draft and gradually adding features and fixing bugs.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**原型与修补：** 一种开发程序的方式，通过从粗略草图开始，逐步添加功能和修复错误。'
- en: '**design-first development:** A way of developing programs with more careful
    planning that prototype and patch.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**设计优先开发：** 一种开发程序的方式，通过更细致的规划，而不是原型开发和修补。'
- en: 14.11\. Exercises[#](#exercises "Link to this heading")
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 14.11\. 练习[#](#exercises "Link to this heading")
- en: '[PRE78]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 14.11.1\. Ask a virtual assistant[#](#ask-a-virtual-assistant "Link to this
    heading")
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 14.11.1\. 向虚拟助手提问[#](#ask-a-virtual-assistant "Link to this heading")
- en: 'There is a lot of new vocabulary in this chapter. A conversation with a virtual
    assistant can help solidify your understanding. Consider asking:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含了很多新的词汇。与虚拟助手的对话有助于加深理解。可以考虑询问：
- en: “What is the difference between a class and a type?”
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “类和类型有什么区别？”
- en: “What is the difference between an object and an instance?”
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “对象和实例有什么区别？”
- en: “What is the difference between a variable and an attribute?”
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “变量和属性有什么区别？”
- en: “What are the pros and cons of pure functions compared to impure functions?”
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “纯函数与非纯函数相比有哪些优缺点？”
- en: Because we are just getting started with object oriented programming, the code
    in this chapter is not idiomatic – it is not the kind of code experienced programmers
    write. If you ask a virtual assistant for help with the exercises, you will probably
    see features we have not covered yet. In particular, you are likely to see a method
    called `__init__` used to initialize the attributes of an instance.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们刚刚开始学习面向对象编程，本章中的代码并不符合惯用法——这不是经验丰富的程序员所写的代码。如果你向虚拟助手求助于这些练习，你可能会看到我们还没有介绍的特性。特别是，你可能会看到一个名为`__init__`的方法，用于初始化实例的属性。
- en: If these features make sense to you, go ahead and use them. But if not, be patient
    – we will get there soon. In the meantime, see if you can solve the following
    exercises using only the features we have covered so far.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些特性对你来说有意义，尽管使用它们。但如果没有，耐心点——我们很快就会讲到。在此期间，试着仅用我们已学习过的特性来解决以下练习。
- en: Also, in this chapter we saw one example of a format specifier. For more information,
    ask “What format specifiers can be used in a Python f-string?”
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在本章中我们看到一个格式说明符的例子。如需更多信息，请问：“Python f-string中可以使用哪些格式说明符？”
- en: 14.11.2\. Exercise[#](#exercise "Link to this heading")
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 14.11.2\. 练习[#](#exercise "跳转到此标题")
- en: Write a function called `subtract_time` that takes two `Time` objects and returns
    the interval between them in seconds – assuming that they are two times during
    the same day.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`subtract_time`的函数，该函数接受两个`Time`对象，并返回它们之间的间隔（秒数）——假设它们是同一天的两个时间点。
- en: 14.11.3\. Exercise[#](#id1 "Link to this heading")
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 14.11.3\. 练习[#](#id1 "跳转到此标题")
- en: Write a function called `is_after` that takes two `Time` objects and returns
    `True` if the first time is later in the day than the second, and `False` otherwise.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`is_after`的函数，该函数接受两个`Time`对象，并返回`True`如果第一个时间点比第二个时间点晚，反之返回`False`。
- en: '[PRE80]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 14.11.4\. Exercise[#](#id2 "Link to this heading")
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 14.11.4\. 练习[#](#id2 "跳转到此标题")
- en: Here’s a definition for a `Date` class that represents a date – that is, a year,
    month, and day of the month.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个`Date`类的定义，它表示一个日期——即年份、月份和日期。
- en: '[PRE81]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Write a function called `make_date` that takes `year`, `month`, and `day` as
    parameters, makes a `Date` object, assigns the parameters to attributes, and returns
    the result the new object. Create an object that represents June 22, 1933.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个名为`make_date`的函数，该函数接受`year`、`month`和`day`作为参数，创建一个`Date`对象，将这些参数赋值给属性，并返回新对象。创建一个表示1933年6月22日的对象。
- en: Write a function called `print_date` that takes a `Date` object, uses an f-string
    to format the attributes, and prints the result. If you test it with the `Date`
    you created, the result should be `1933-06-22`.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个名为`print_date`的函数，该函数接受一个`Date`对象，使用f-string格式化属性并打印结果。如果你用你创建的`Date`对象进行测试，结果应为`1933-06-22`。
- en: Write a function called `is_after` that takes two `Date` objects as parameters
    and returns `True` if the first comes after the second. Create a second object
    that represents September 17, 1933, and check whether it comes after the first
    object.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个名为`is_after`的函数，该函数接受两个`Date`对象作为参数，并返回`True`如果第一个对象在第二个对象之后。创建一个表示1933年9月17日的第二个对象，并检查它是否在第一个对象之后。
- en: 'Hint: You might find it useful to write a function called `date_to_tuple` that
    takes a `Date` object and returns a tuple that contains its attributes in year,
    month, day order.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：你可能会发现编写一个名为`date_to_tuple`的函数很有用，该函数接受一个`Date`对象并返回一个元组，包含按年份、月份、日期顺序排列的属性。
- en: '[Think Python: 3rd Edition](https://allendowney.github.io/ThinkPython/index.html)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '[Think Python: 第3版](https://allendowney.github.io/ThinkPython/index.html)'
- en: Copyright 2024 [Allen B. Downey](https://allendowney.com)
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 版权所有 2024 [Allen B. Downey](https://allendowney.com)
- en: 'Code license: [MIT License](https://mit-license.org/)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 代码许可：[MIT许可证](https://mit-license.org/)
- en: 'Text license: [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 文字许可：[知识共享署名-非商业性使用-相同方式共享 4.0 国际版](https://creativecommons.org/licenses/by-nc-sa/4.0/)
