["```py\ndef complete_order(order: Order):\n    package_order(order)\n    notify_customer_that_order_is_done(order)\n    notify_restaurant_that_order_is_done(order)\n```", "```py\npip install pypubsub\n```", "```py\nfrom pubsub import pub\n\ndef notify_customer_that_meal_is_done(order: Order):\n    # ... snip ...\n\npub.subscribe(notify_customer_that_meal_is_done, \"meal-done\")\n```", "```py\nfrom pubsub import pub\n\ndef complete_order(order: Order):\n    packge_order(order)\n    pub.publish(\"meal-done\", order)\n```", "```py\nfrom pubsub import pub\n\ndef schedule_pick_up_for_meal(order: Order):\n    '''Schedule a drone pick-up'''\n    # ... snip ...\n\npub.subscribe(schedule_pick_up_for_meal, \"meal-done\")\n```", "```py\ndef complete_order(order: Order, observers: list[Callable[Order]]):\n    package_order(order)\n    for observer_func in observers:\n        observer(order)\n```", "```py\npip install rx\n```", "```py\nimport rx\n# Each one of these is simulating an independent real-world event streaming in\nobservable = rx.of(\n    LocationData(x=3, y=12, z=40),\n    BatteryLevel(percent=95),\n    BatteryLevel(percent=94),\n    WindData(speed=15, direction=Direction.NORTH),\n    # ... snip 100s of events\n    BatteryLevel(percent=72),\n    CurrentWeight(grams=300)\n)\n```", "```py\ndef handle_drone_data(value):\n    # ... snip handle drone data ...\n\nobservable.subscribe(handle_drone_data)\n```", "```py\nimport rx.operators\n\nget_average_weight = observable.pipe(\n    rx.operators.filter(lambda data: isinstance(data, CurrentWeight)),\n    rx.operators.map(lambda cw: cw.grams),\n    rx.operators.average()\n)\n\n# save_average_weight does something with the final data\n# (e.g. save to database, print to screen, etc.)\nget_average_weight.subscribe(save_average_weight)\n```", "```py\nget_max_altitude = observable.pipe(\n    rx.operators.skip_while(is_close_to_restaurant),\n    rx.operators.filter(lambda data: isinstance(data, LocationData)),\n    rx.operators.map(lambda loc: loc.z),\n    rx.operators.max()\n)\n\n# save max altitude does something with the final data\n# (e.g. save to database, print to screen, etc)\nget_max_altitude.subscribe(save_max_altitude)\n```"]