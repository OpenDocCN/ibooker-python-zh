["```py\ndef count_words(words):\n    count = 0\n    for word in words:\n        if \"dan\" in word.lower():    #1\n            count += 1\n    return count\n```", "```py\n>>> words = [\"Dan\", \"danger\", \"Leo\"]   \n>>> count_words(words)\n2\n```", "```py\ndef count_words(words):\n    count = 0\n    for word in words:\n        if \"dan\" in word.lower():\n            print(word,\"is being counted\")    #1\n            count += 1\n    return count\n```", "```py\n>>> words = [\"Dan\", \"danger\", \"Leo\"]   \n>>> count_words(words) \nDan is being counted\ndanger is being counted\n2\n```", "```py\ndef count_words(words):\n    count = 0\n    for word in words:\n        # only count words that are exactly \"Dan\"    #1\n        if word == \"Dan\":    #2\n            count += 1       #2\n    return count             #2\n```", "```py\ndef count_words(words): \n    count = 0 \n    for word in words: \n        if \"dan\" in word.lower(): \n            count += 1 \n    return count \n\nwords = [\"Dan\", \"danger\", \"Leo\"]     #1\nprint(count_words(words))            #1\n```", "```py\ncount = 0\n```", "```py\nfor word in words:\n```", "```py\nif \"dan\" in word.lower():\n```", "```py\ncount += 1\n```", "```py\n*`*def count_words(words):*`* \n *`*count = 0*`* \n *`*for word in words:*`* \n *`*if \"dan\" in word.lower():*`* \n *`*count += 1*`* \n *`*return count*`*\n```", "```py\n*`*def count_words(words):*`* \n *`*count = 0*`* \n *`*for word in words:*`* \n *`*if word.lower() == \"dan\":*`* \n *`*count += 1*`* \n *`*return count*`*\n```", "```py\nif \"dan\" in word.lower():\n```", "```py\nif word.lower() == \"dan\":\n```", "```py\n*`*def count_words(words):*`* \n *`*count = 0*`* \n *`*for word in words:*`* \n *`*if word == \"Dan\":*`* \n *`*count += 1*`* \n *`*return count*`* \n```", "```py\ndef count_words(words):\n    count = 0\n    for word in words:\n        # only count words that are exactly \"Dan\"     #1\n        if word == \"Dan\":\n            count += 1\n    return count\n```", "```py\nif \"dan\" in word.lower():\n```", "```py\ndef count_between(numbers, x, y):\n    count = 0\n    for number in numbers:\n        if number >= x and number <= y:\n            count += 1\n    return count\n```", "```py\n>>> numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> print(count_between(numbers, 3, 7))\n5\n```", "```py\nif number >= x and number <= y:\n```", "```py\nif number >= x and number <= y:\n```", "```py\nif number > x and number < y:\n```", "```py\ndef count_between(numbers, x, y):\n    count = 0\n    for number in numbers:\n        if number > x and number < y:    #1\n            count += 1\n    return count\n```", "```py\ndef most_students(classroom):                                 #1\n **'''** \n **classroom is a list of lists** \n **Each ' ' is an empty seat** \n **Each 'S' is a student** \n\n **Find the most students seated consecutively in a row** \n\n **>>> most_students([['S', ' ', 'S', ' ', 'S', 'S'],\\** #2\n **['S', ' ', 'S', 'S', 'S', ' '],\\** #2\n **[' ', 'S', ' ', 'S', ' ', ' ']])** #2\n **3** #2\n **'''**\n    max_count = 0                          #3\n    for row in classroom:                  #3\n        count = 0                          #3\n        for seat in row:                   #3\n            if seat == 'S':                #3\n                count += 1                 #3\n            else:                          #3\n                if count > max_count:      #3\n                    max_count = count      #3\n                count = 0                  #3\n    return max_count                       #3\n\nimport doctest                     #4\ndoctest.testmod(verbose=True)      #4\n```", "```py\n>>> most_students([['S', ' ', 'S', 'S', 'S', 'S'],\\    #1\n                  ['S', ' ', 'S', 'S', 'S', ' '],\\\n                  [' ', 'S', ' ', 'S', ' ', ' ']])\n4\n```", "```py\nTrying:\n    most_students([['S', ' ', 'S', 'S', 'S', 'S'],\n                   ['S', ' ', 'S', 'S', 'S', ' '],                \n                   [' ', 'Sâ€™, ' ', 'Sâ€™, ' ', ' ']])\nExpecting:\n    4\n**********************************************************************\nFile \"c:\\Copilot\\max_consecutive.py\", \nline 12, in __main__.most_students\n\nFailed example:\n    most_students([['S', ' ', 'S', 'S', 'S', 'S'],\n                   ['S', ' ', 'S', 'S', 'S', ' '],                \n                   [' ', 'S', ' ', 'S', ' ', ' ']])\nExpected:\n    4\nGot:\n    3\n```", "```py\ndef most_students(classroom): \n '''\n classroom is a list of lists\n Each ' ' is an empty seat\n Each 'S' is a student\n\n Find the most students seated consecutively in a row\n\n >>> most_students([['S', ' ', 'S', 'S', 'S', 'S'],\\ #1\n **['S', ' ', 'S', 'S', 'S', ' '],\\** #1\n **[' ', 'S', ' ', 'S', ' ', ' ']])** #1\n **4**\n **'''**\n    max_count = 0\n    for row in classroom:\n        count = 0\n        for seat in row:\n            if seat == 'S':\n                count += 1\n            else:\n                if count > max_count:\n                    max_count = count\n                count = 0\n    return max_count\n\nimport doctest\ndoctest.testmod(verbose=True)\n```", "```py\ndef most_students(classroom):\n    max_count = 0\n    for row in classroom:\n        count = 0\n        for seat in row:\n            if seat == 'S':\n                count += 1\n                if count > max_count:    #1\n                    max_count = count    #1\n            else:\n                count = 0\n    return max_count\n```", "```py\ndef sum_even_numbers(numbers):\n    total = 0\n    for number in numbers:\n        if number % 2 == 0:\n            total += number\n        else:\n            total = 0\n    return total\n```", "```py\ndef find_max(numbers): \n    max_number = 0 \n    for i in range(0, len(numbers)): \n        if numbers[i] > max_number: \n            max_number = numbers[i] \n   return max_number\n```", "```py\ndef is_valid_password(password):\n    if len(password) <= 8:\n        if any(char.isupper() for char in password):\n            if any(char.islower() for char in password):\n                if any(char.isdigit() for char in password):\n                    return True\n            return False\n        return False\n    return False\n```", "```py\ndef greet_user(hour):\n  # This code has an error!\n  if hour < 12:\n    greeting = \"Good morning\"\n  else:\n    greeting = \"Good evening\"\n  return greeting\n```"]