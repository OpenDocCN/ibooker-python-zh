- en: Chapter 18\. Testing Your Website with Scrapers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 18 章。使用抓取器测试您的网站
- en: When working with web projects that have a large development stack, it’s often
    only the “back” of the stack that ever gets tested regularly. Most programming
    languages today (including Python) have some type of test framework, but website
    frontends are often left out of these automated tests, although they might be
    the only customer-facing part of the project.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用具有大型开发堆栈的 Web 项目时，通常只有“堆栈”的“后端”部分会定期进行测试。今天大多数编程语言（包括 Python）都有某种类型的测试框架，但网站前端通常被排除在这些自动化测试之外，尽管它们可能是项目中唯一面向客户的部分。
- en: Part of the problem is that websites are often a mishmash of many markup languages
    and programming languages. You can write unit tests for sections of your JavaScript,
    but it’s useless if the HTML it’s interacting with has changed in such a way that
    the JavaScript doesn’t have the intended action on the page, even if it’s working
    correctly.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 问题的一部分是，网站经常是许多标记语言和编程语言的混合物。您可以为 JavaScript 的某些部分编写单元测试，但如果它与其交互的 HTML 已更改以使
    JavaScript 在页面上没有预期的操作，则此单元测试是无用的，即使它正常工作。
- en: The problem of frontend website testing has often been left as an afterthought
    or delegated to lower-level programmers armed with, at most, a checklist and a
    bug tracker. However, with just a little more up-front effort, you can replace
    this checklist with a series of unit tests and replace human eyes with a web scraper.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 前端网站测试的问题经常被放在后面或者委托给只有最多一个清单和一个 bug 跟踪器的低级程序员。然而，只需稍微付出更多的努力，你就可以用一系列单元测试替换这个清单，并用网页抓取器代替人眼。
- en: 'Imagine: test-driven development for web development. Daily tests to make sure
    all parts of the web interface are functioning as expected. A suite of tests run
    every time someone adds a new website feature or changes the position of an element.
    This chapter covers the basics of testing and how to test all sorts of websites,
    from simple to complicated, with Python-based web scrapers.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下：为 Web 开发进行测试驱动开发。每天测试以确保 Web 界面的所有部分都正常运行。一套测试在有人添加新的网站功能或更改元素位置时运行。本章介绍了测试的基础知识以及如何使用基于
    Python 的 Web 抓取器测试各种网站，从简单到复杂。
- en: An Introduction to Testing
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试简介
- en: If you’ve never written tests for your code before, there’s no better time to
    start than now. Having a suite of tests that can be run to ensure that your code
    performs as expected (at least, as far as you’ve written tests for) saves you
    time and worry and makes releasing new updates easy.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您以前从未为代码编写过测试，那么现在没有比现在更好的时间开始了。拥有一套可以运行以确保代码按预期执行（至少是您为其编写了测试的范围）的测试集合会节省您时间和担忧，并使发布新更新变得容易。
- en: What Are Unit Tests?
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是单元测试？
- en: The words *test* and *unit test* are often used interchangeably. Often, when
    programmers refer to “writing tests,” what they really mean is “writing unit tests.”
    On the other hand, when some programmers refer to writing unit tests, they’re
    really writing some other kind of test.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*测试* 和 *单元测试* 这两个词通常可以互换使用。通常，当程序员提到“编写测试”时，他们真正的意思是“编写单元测试”。另一方面，当一些程序员提到编写单元测试时，他们实际上在编写其他类型的测试。'
- en: 'Although definitions and practices tend to vary from company to company, a
    unit test generally has the following characteristics:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管定义和实践往往因公司而异，但一个单元测试通常具有以下特征：
- en: Each unit test tests one aspect of the functionality of a component. For example,
    it might ensure that the appropriate error message is thrown if a negative number
    of dollars is withdrawn from a bank account.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个单元测试测试组件功能的一个方面。例如，它可能确保从银行账户中提取负数美元时会抛出适当的错误消息。
- en: Often, unit tests are grouped together in the same class, based on the component
    they are testing. You might have the test for a negative dollar value being withdrawn
    from a bank account, followed by a unit test for the behavior of an overdrawn
    bank account.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单元测试通常根据它们所测试的组件分组在同一个类中。你可能会有一个测试，测试从银行账户中提取负美元值，然后是一个测试过度支出的银行账户行为的单元测试。
- en: Each unit test can be run completely independently, and any setup or teardown
    required for the unit test must be handled by the unit test itself. Similarly,
    unit tests must not interfere with the success or failure of other tests, and
    they must be able to run successfully in any order.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个单元测试可以完全独立运行，单元测试所需的任何设置或拆卸必须由单元测试本身处理。同样，单元测试不得干扰其他测试的成功或失败，并且它们必须能够以任何顺序成功运行。
- en: Each unit test usually contains at least one *assertion.* For example, a unit
    test might assert that the answer to 2 + 2 is 4\. Occasionally, a unit test might
    contain only a failure state. For example, it might fail if an exception is thrown
    but pass by default if everything goes smoothly.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个单元测试通常至少包含一个*断言*。例如，一个单元测试可能会断言 2 + 2 的答案是 4。偶尔，一个单元测试可能只包含一个失败状态。例如，如果抛出异常，则可能失败，但如果一切顺利，则默认通过。
- en: Unit tests are separated from the bulk of the code. Although they necessarily
    need to import and use the code they are testing, they are generally kept in separate
    classes and directories.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试与大部分代码分离。虽然它们必须导入和使用它们正在测试的代码，但它们通常保存在单独的类和目录中。
- en: Although many other types of tests can be written—integration tests and validation
    tests, for example—this chapter primarily focuses on unit testing. Not only have
    unit tests become extremely popular with recent pushes toward test-driven development,
    but their length and flexibility make them easy to work with as examples, and
    Python has some built-in unit testing capabilities, as you’ll see in the next
    section.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可以编写许多其他类型的测试—例如集成测试和验证测试—但本章主要关注单元测试。不仅单元测试在最近推动的面向测试驱动开发中变得极为流行，而且它们的长度和灵活性使它们易于作为示例进行操作，并且
    Python 具有一些内置的单元测试功能，你将在下一节中看到。
- en: Python unittest
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 单元测试
- en: 'Python’s unit-testing module, `unittest`, comes packaged with all standard
    Python installations. Just import and extend `unittest.TestCase`, and it will:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的单元测试模块`unittest`已包含在所有标准 Python 安装中。只需导入并扩展`unittest.TestCase`，它将：
- en: Provide `setUp` and `tearDown` functions that run before and after each unit
    test
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供`setUp`和`tearDown`函数，分别在每个单元测试之前和之后运行
- en: Provide several types of “assert” statements to allow tests to pass or fail
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供几种类型的“assert”语句，以允许测试通过或失败
- en: Run all functions that begin with `test_` as unit tests and ignore functions
    that are not prepended as tests
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行所有以`test_`开头的函数作为单元测试，并忽略未以测试形式开头的函数
- en: 'The following provides a simple unit test for ensuring that 2 + 2 = 4, according
    to Python:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下面提供了一个简单的单元测试，用于确保 2 + 2 = 4，根据 Python 的定义：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Although `setUp` and `tearDown` don’t provide any useful functionality here,
    they are included for illustration purposes. Note that these functions are run
    before and after each individual test, not before and after all the tests in the
    class.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在这里`setUp`和`tearDown`不提供任何有用的功能，但它们被包含在内以进行说明。请注意，这些函数在每个单独的测试之前和之后运行，而不是在类的所有测试之前和之后运行。
- en: 'The output of the test function, when run from the command line, should look
    like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当从命令行运行测试函数的输出应如下所示：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This indicates that the test ran successfully, and 2 + 2 does indeed equal 4.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明测试已成功运行，2 + 2确实等于 4。
- en: Testing Wikipedia
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试维基百科
- en: 'Testing the frontend of your website (excluding JavaScript, which we’ll cover
    next) is as simple as combining the Python `unittest` library with a web scraper:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 测试网站的前端（不包括我们将在下一节中介绍的 JavaScript）只需将 Python`unittest`库与 Web 爬虫结合使用即可：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There are two tests this time: the first tests whether the title of the page
    is the expected “Monty Python,” and the second makes sure that the page has a
    content `div`.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这次有两个测试：第一个测试页面的标题是否是预期的“Monty Python”，第二个确保页面具有内容`div`。
- en: Note that the content of the page is loaded only once, and that the global object
    `bs` is shared between tests. This is accomplished by using the `unittest`-specified
    function `setUpClass`, which is run only once at the start of the class (unlike
    `setUp`, which is run before every individual test). Using `setUpClass` instead
    of `setUp` saves unnecessary page loads; you can grab the content once and run
    multiple tests on it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，页面内容仅加载一次，并且全局对象`bs`在测试之间共享。这是通过使用`unittest`指定的`setUpClass`函数实现的，该函数在类开始时只运行一次（不像`setUp`，它在每个单独的测试之前运行）。使用`setUpClass`而不是`setUp`可以节省不必要的页面加载；您可以一次获取内容并对其运行多个测试。
- en: One major architectural difference between `setUpClass` and `setUp`, besides
    just when and how often they’re run, is that `setUpClass` is a static method that
    “belongs” to the class itself and has global class variables, whereas `setUp`
    is an instance function that belongs to a particular instance of the class. This
    is why `setUp` can set attributes on `self`—the particular instance of that class—while
    `setUpClass` can access only static class attributes on the class `TestWikipedia`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`setUpClass`和`setUp`之间的一个主要架构差异，除了它们何时以及多频繁地运行之外，是`setUpClass`是一个静态方法，它“属于”类本身并具有全局类变量，而`setUp`是一个属于类的特定实例的实例函数。这就是为什么`setUp`可以在`self`上设置属性——该类的特定实例——而`setUpClass`只能访问类`TestWikipedia`上的静态类属性。'
- en: Although testing a single page at a time might not seem all that powerful or
    interesting, as you may recall from [Chapter 6](ch06.html#c-6), it is relatively
    easy to build web crawlers that can iteratively move through all pages of a website.
    What happens when you combine a web crawler with a unit test that makes an assertion
    about each page?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然一次只测试一个页面可能看起来并不那么强大或有趣，正如您可能从[第6章](ch06.html#c-6)中记得的那样，构建可以迭代地移动通过网站所有页面的网络爬虫相对容易。当您将一个网络爬虫与对每个页面进行断言的单元测试结合在一起时会发生什么？
- en: 'There are many ways to run a test repeatedly, but you must be careful to load
    each page only once for each set of tests you want to run on the page, and you
    must also avoid holding large amounts of information in memory at once. The following
    setup does just that:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以重复运行测试，但是你必须小心地每次加载每个页面，以及你还必须避免一次在内存中持有大量信息。以下设置正好做到了这一点：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There are a few things to notice. First, there is only one actual test in this
    class. The other functions are technically only helper functions, even though
    they’re doing the bulk of the computational work to determine whether a test passes.
    Because the test function performs the assertion statements, the results of the
    test are passed back to the test function where the assertions happen.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有几件事情要注意。首先，这个类中只有一个实际的测试。其他函数技术上只是辅助函数，尽管它们完成了大部分计算工作来确定测试是否通过。因为测试函数执行断言语句，测试结果被传回测试函数，在那里断言发生。
- en: 'Also, while `contentExists` returns a boolean, `titleMatchesURL` returns the
    values themselves for evaluation. To see why you would want to pass values back
    rather than just a boolean, compare the results of a boolean assertion:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，虽然`contentExists`返回一个布尔值，但`titleMatchesURL`返回用于评估的值本身。要了解为什么你希望传递值而不仅仅是布尔值，请比较布尔断言的结果：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'with the results of an `assertEquals` statement:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 与`assertEquals`语句的结果一样：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Which one is easier to debug? (In this case, the error is occurring because
    of a redirect, when the article *http://wikipedia.org/wiki/u-2%20spy%20plane*
    redirects to an article titled “Lockheed U-2.”)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 哪一个更容易调试？（在这种情况下，错误是由于重定向导致的，当文章 *http://wikipedia.org/wiki/u-2%20spy%20plane*
    重定向到一个名为“Lockheed U-2”的文章时。）
- en: Testing with Selenium
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Selenium进行测试
- en: As with Ajax scraping in [Chapter 14](ch14.html#c-14), JavaScript presents particular
    challenges when doing website testing. Fortunately, Selenium has an excellent
    framework in place for handling particularly complicated websites; in fact, the
    library was originally designed for website testing!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在[第14章](ch14.html#c-14)中的Ajax抓取一样，当进行网站测试时，JavaScript在处理特定的网站时会出现特殊的挑战。幸运的是，Selenium已经有了一个处理特别复杂网站的优秀框架；事实上，这个库最初就是为网站测试而设计的！
- en: 'Although obviously written in the same language, the syntaxes of Python unit
    tests and Selenium unit tests have surprisingly little in common. Selenium does
    not require that its unit tests be contained as functions within classes; its
    `assert` statements do not require parentheses; and tests pass silently, producing
    some kind of message only on a failure:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管显然使用相同的语言编写，Python单元测试和Selenium单元测试的语法却惊人地不相似。Selenium不要求其单元测试被包含在类中的函数中；它的`assert`语句不需要括号；测试在通过时静默通过，仅在失败时产生某种消息：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When run, this test should produce no output.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行时，这个测试应该不会产生任何输出。
- en: In this way, Selenium tests can be written more casually than Python unit tests,
    and `assert` statements can even be integrated into regular code, where it is
    desirable for code execution to terminate if some condition is not met.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式，Selenium 测试可以比 Python 单元测试更加随意地编写，并且`assert`语句甚至可以集成到常规代码中，当代码执行希望在未满足某些条件时终止时。
- en: Interacting with the Site
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与站点互动
- en: Recently, I wanted to contact a local small business through its website’s contact
    form but found that the HTML form was broken; nothing happened when I clicked
    the Submit button. After a little investigation, I saw they were using a simple
    mailto form that was designed to send them an email with the form’s contents.
    Fortunately, I was able to use this information to send them an email, explain
    the problem with their form, and hire them, despite the technical issue.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，我想通过一个本地小企业的网站联系他们的联系表单，但发现 HTML 表单已损坏；当我点击提交按钮时什么也没有发生。经过一番调查，我发现他们使用了一个简单的
    mailto 表单，旨在用表单内容发送电子邮件给他们。幸运的是，我能够利用这些信息发送电子邮件给他们，解释表单的问题，并雇佣他们，尽管有技术问题。
- en: If I were to write a traditional scraper that used or tested this form, my scraper
    would likely just copy the layout of the form and send an email directly—bypassing
    the form altogether. How could I test the functionality of the form and ensure
    that it was working perfectly through a browser?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我要编写一个传统的爬虫来使用或测试这个表单，我的爬虫很可能只会复制表单的布局并直接发送电子邮件，完全绕过表单。我该如何测试表单的功能性，并确保它通过浏览器正常工作？
- en: Although previous chapters have discussed navigating links, submitting forms,
    and other types of interaction-like activity, at its core everything we’ve done
    is designed to *bypass* the browser interface, not use it. Selenium, on the other
    hand, can literally enter text, click buttons, and do everything through the browser
    (in this case, the headless Chrome browser), and detect things like broken forms,
    badly coded JavaScript, HTML typos, and other issues that might stymie actual
    customers.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前几章已经讨论了导航链接、提交表单和其他类型的交互活动，但我们所做的一切本质上是为了 *绕过* 浏览器界面，而不是使用它。另一方面，Selenium
    可以通过浏览器（在这种情况下是无头 Chrome 浏览器）直接输入文本、点击按钮以及执行所有操作，并检测到诸如损坏的表单、糟糕编码的 JavaScript、HTML
    拼写错误以及其他可能困扰实际客户的问题。
- en: 'Key to this sort of testing is the concept of Selenium elements. This object
    was briefly encountered in [Chapter 14](ch14.html#c-14), and is returned by calls
    like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这种测试的关键在于 Selenium 元素的概念。这个对象在 [第14章](ch14.html#c-14) 简要提到，并且可以通过如下调用返回：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Just as there are numerous actions you can take on various elements of a website
    in your browser, there are many actions Selenium can perform on any given element.
    Among these are:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可以在浏览器中对网站的各个元素执行多种操作一样，Selenium 可以对任何给定元素执行许多操作。其中包括：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In addition to performing a one-time action on an element, strings of actions
    can be combined into *action chains*, which can be stored and executed once or
    multiple times in a program. Action chains are useful in that they can be a convenient
    way to string long sets of multiple actions, but they are functionally identical
    to calling the action explicitly on the element, as in the preceding examples.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 除了对元素执行一次性操作外，动作串也可以组合成 *动作链*，可以在程序中存储并执行一次或多次。动作链之所以有用，是因为它们可以方便地串接多个动作，但在功能上与显式调用元素上的动作完全相同，就像前面的例子一样。
- en: 'To see this difference, take a look at the form page at [*http://pythonscraping.com/pages/files/form.html*](http://pythonscraping.com/pages/files/form.html)
    (which was previously used as an example in [Chapter 13](ch13.html#c-13)). We
    can fill out the form and submit it in this way:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解这种差异，请查看 [*http://pythonscraping.com/pages/files/form.html*](http://pythonscraping.com/pages/files/form.html)
    上的表单页面（这在 [第13章](ch13.html#c-13) 中曾作为示例使用）。我们可以以这种方式填写表单并提交：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Method 1 calls `send_keys` on the two fields and then clicks the Submit button.
    Method 2 uses a single action chain to click and enter text in each field, which
    happens in a sequence after the `perform` method is called. This script operates
    in the same way, whether the first method or the second method is used, and prints
    this line:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 方法1 在两个字段上调用 `send_keys`，然后点击提交按钮。方法2 使用单个动作链在调用 `perform` 方法后依次点击和输入每个字段的文本。无论使用第一种方法还是第二种方法，此脚本的操作方式都相同，并打印此行：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'There is another variation in the two methods, in addition to the objects they
    use to handle the commands: notice that the first method clicks the Submit button,
    while the second uses the Return keystroke to submit the form while the text box
    is submitted. Because there are many ways to think about the sequence of events
    that complete the same action, there are many ways to complete the same action
    using Selenium.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 两种方法之间还有另一种变化，除了它们用于处理命令的对象之外：请注意，第一种方法点击“提交”按钮，而第二种方法在提交表单时使用回车键。因为完成相同动作的事件序列有很多思考方式，使用Selenium可以完成相同的动作的方法也有很多。
- en: Drag and drop
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 拖放
- en: Clicking buttons and entering text is one thing, but where Selenium really shines
    is in its ability to deal with relatively novel forms of web interaction. Selenium
    allows for the manipulation of drag-and-drop interfaces with ease. Using its drag-and-drop
    function requires you to specify a *source* element (the element to be dragged)
    and either an offset to drag it across, or a target element to drag it to.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 点击按钮和输入文本是一回事，但是Selenium真正发光的地方在于它处理相对新颖的Web交互形式的能力。Selenium允许轻松操作拖放接口。使用其拖放功能需要指定一个*源*元素（要拖动的元素）和要拖动到的目标元素或偏移量。
- en: 'The demo page located at [*http://pythonscraping.com/pages/javascript/draggableDemo.html*](http://pythonscraping.com/pages/javascript/draggableDemo.html)
    presents an example of this type of interface:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 该演示页面位于[*http://pythonscraping.com/pages/javascript/draggableDemo.html*](http://pythonscraping.com/pages/javascript/draggableDemo.html)，展示了这种类型界面的一个示例：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Two messages are printed out from the `message div` on the demo page. The first
    says:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从演示页面的`message div`中打印出两条消息。第一条消息是：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, quickly, after the task is completed, the content is printed out again,
    which now reads:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在任务完成后，内容再次打印出来，现在读取：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As the demo page suggests, dragging elements to prove you’re not a bot is a
    common theme in many CAPTCHAs. Although bots have been able to drag objects around
    for a long time (it’s just a matter of clicking, holding, and moving), somehow
    the idea of using “drag this” as a verification of humanity just won’t die.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如演示页面所示，将元素拖动以证明你不是机器人是许多验证码的共同主题。尽管机器人早就能够拖动物体（只需点击、按住和移动），但“拖动此物”作为验证人类的想法似乎无法消亡。
- en: In addition, these draggable CAPTCHA libraries rarely use any difficult-for-bots
    tasks, like “drag the picture of the kitten onto the picture of the cow” (which
    requires you to identify the pictures as “a kitten” and “a cow,” while parsing
    instructions); instead, they often involve number ordering or some other fairly
    trivial task like the one in the preceding example.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这些可拖动的验证码库很少使用任何对机器人困难的任务，例如“将小猫的图片拖到牛的图片上”（这需要你识别图片为“小猫”和“牛”，并解析指令）；相反，它们通常涉及数字排序或类似前面示例中的其他相当琐碎的任务。
- en: Of course, their strength lies in the fact that there are so many variations,
    and they are so infrequently used; no one will likely bother making a bot that
    can defeat all of them. At any rate, this example should be enough to illustrate
    why you should never use this technique for large-scale websites.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，它们的强大之处在于其变化如此之多，而且使用频率如此之低；可能没有人会费力去制作一个能够击败所有验证码的机器人。无论如何，这个例子足以说明为什么你不应该在大型网站上使用这种技术。
- en: Taking screenshots
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 拍摄截图
- en: 'In addition to the usual testing capabilities, Selenium has an interesting
    trick up its sleeve that might make your testing (or impressing your boss) a little
    easier: screenshots. Yes, photographic evidence can be created from unit tests
    run without the need for actually pressing the PrtScn key:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 除了通常的测试功能外，Selenium还有一个有趣的技巧，可能会使你的测试（或者让你的老板印象深刻）更加轻松：截图。是的，可以从运行的单元测试中创建照片证据，而无需实际按下PrtScn键：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This script navigates to [*http://pythonscraping.com*](http://pythonscraping.com)
    and then stores a screenshot of the home page in the local *tmp* folder (the folder
    must already exist for this to store correctly). Screenshots can be saved as a
    variety of image formats.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本导航到[*http://pythonscraping.com*](http://pythonscraping.com)，然后将首页的截图存储在本地的*tmp*文件夹中（此文件夹必须已经存在才能正确存储）。截图可以保存为多种图像格式。
