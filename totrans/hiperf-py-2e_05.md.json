["```py\n*`#` `Other languages`*\nfor (i=0; i<N; i++) {\n    do_work(i);\n}\n```", "```py\n*`# Python`*\nfor i in range(N):\n    do_work(i)\n```", "```py\ndef fibonacci_list(num_items):\n    numbers = []\n    a, b = 0, 1\n    while len(numbers) < num_items:\n        numbers.append(a)\n        a, b = b, a+b\n    return numbers\n\ndef fibonacci_gen(num_items):\n    a, b = 0, 1\n    while num_items:\n        yield a  ![1](Images/1.png)\n        a, b = b, a+b\n        num_items -= 1\n```", "```py\n# The Python loop\nfor i in object:\n    do_work(i)\n\n# Is equivalent to\nobject_iterator = iter(object)\nwhile True:\n    try:\n        i = next(object_iterator)\n    except StopIteration:\n        break\n    else:\n        do_work(i)\n```", "```py\ndef test_fibonacci_list():\n    \"\"\"\n >>> %timeit test_fibonacci_list()\n 332 ms ± 13.1 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n\n >>> %memit test_fibonacci_list()\n peak memory: 492.82 MiB, increment: 441.75 MiB\n \"\"\"\n    for i in fibonacci_list(100_000):\n        pass\n\ndef test_fibonacci_gen():\n    \"\"\"\n >>> %timeit test_fibonacci_gen()\n 126 ms ± 905 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\n >>> %memit test_fibonacci_gen()\n peak memory: 51.13 MiB, increment: 0.00 MiB\n \"\"\"\n    for i in fibonacci_gen(100_000):\n        pass\n```", "```py\ndivisible_by_three = len([n for n in fibonacci_gen(100_000) if n % 3 == 0])\n```", "```py\ndivisible_by_three = sum(1 for n in fibonacci_gen(100_000) if n % 3 == 0)\n```", "```py\ndef fibonacci():\n    i, j = 0, 1\n    while True:\n        yield j\n        i, j = j, i + j\n```", "```py\ndef fibonacci_naive():\n    i, j = 0, 1\n    count = 0\n    while j <= 5000:\n        if j % 2:\n            count += 1\n        i, j = j, i + j\n    return count\n\ndef fibonacci_transform():\n    count = 0\n    for f in fibonacci():\n        if f > 5000:\n            break\n        if f % 2:\n            count += 1\n    return count\n\nfrom itertools import takewhile\ndef fibonacci_succinct():\n    first_5000 = takewhile(lambda x: x <= 5000,\n                           fibonacci())\n    return sum(1 for x in first_5000\n               if x % 2)\n```", "```py\nfrom random import normalvariate, randint\nfrom itertools import count\nfrom datetime import datetime\n\ndef read_data(filename):\n    with open(filename) as fd:\n        for line in fd:\n            data = line.strip().split(',')\n            timestamp, value = map(int, data)\n            yield datetime.fromtimestamp(timestamp), value\n\ndef read_fake_data(filename):\n    for timestamp in count():\n        #  We insert an anomalous data point approximately once a week\n        if randint(0, 7 * 60 * 60 * 24 - 1) == 1:\n            value = normalvariate(0, 1)\n        else:\n            value = 100\n        yield datetime.fromtimestamp(timestamp), value\n```", "```py\nfrom itertools import groupby\n\ndef groupby_day(iterable):\n    key = lambda row: row[0].day\n    for day, data_group in groupby(iterable, key):\n        yield list(data_group)\n```", "```py\nfrom scipy.stats import normaltest\nfrom itertools import filterfalse\n\ndef is_normal(data, threshold=1e-3):\n    _, values = zip(*data)\n    k2, p_value = normaltest(values)\n    if p_value < threshold:\n        return False\n    return True\n\ndef filter_anomalous_groups(data):\n    yield from filterfalse(is_normal, data)\n```", "```py\nfrom itertools import islice\n\ndef filter_anomalous_data(data):\n    data_group = groupby_day(data)\n    yield from filter_anomalous_groups(data_group)\n\ndata = read_data(filename)\nanomaly_generator = filter_anomalous_data(data)\nfirst_five_anomalies = islice(anomaly_generator, 5)\n\nfor data_anomaly in first_five_anomalies:\n    start_date = data_anomaly[0][0]\n    end_date = data_anomaly[-1][0]\n    print(f\"Anomaly from {start_date} - {end_date}\")\n```", "```py\n# Output of above code using \"read_fake_data\"\nAnomaly from 1970-01-10 00:00:00 - 1970-01-10 23:59:59\nAnomaly from 1970-01-17 00:00:00 - 1970-01-17 23:59:59\nAnomaly from 1970-01-18 00:00:00 - 1970-01-18 23:59:59\nAnomaly from 1970-01-23 00:00:00 - 1970-01-23 23:59:59\nAnomaly from 1970-01-29 00:00:00 - 1970-01-29 23:59:59\n```", "```py\nfrom datetime import datetime\n\ndef groupby_window(data, window_size=3600):\n    window = tuple(islice(data, window_size))\n    for item in data:\n        yield window\n        window = window[1:] + (item,)\n```"]