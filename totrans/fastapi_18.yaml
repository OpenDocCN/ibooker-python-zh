- en: Chapter 14\. Databases, Data Science, and a Little AI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 14 章\. 数据库、数据科学和少量 AI
- en: Preview
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预览
- en: 'This chapter discusses how to use FastAPI to store and retrieve data. It expands
    on the simple SQLite examples of [Chapter 10](ch10.html#ch10) with the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论如何使用 FastAPI 存储和检索数据。它扩展了第 10 章中简单的 SQLite 示例，包括以下内容：
- en: Other open source databases (relational and not)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他开源数据库（关系型和非关系型）
- en: Higher-level uses of SQLAlchemy
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLAlchemy 的更高级用法
- en: Better error checking
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好的错误检查
- en: Data Storage Alternatives
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据存储替代方案
- en: Note
  id: totrans-7
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'The term *database* is unfortunately used to refer to three things:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸地，“database”这个术语被用来指代三件事：
- en: The server *type*, like PostgreSQL, SQLite, or MySQL
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器 *type*，如 PostgreSQL、SQLite 或 MySQL
- en: A running instance of that *server*
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行中的 *server* 实例
- en: A *collection of tables* on that server
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在该服务器上的 *collection of tables*
- en: To avoid confusion—referring to an instance of the last bulleted item above
    as a “PostgreSQL database database database”—I’ll attach other terms to indicate
    which one I mean.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免混淆——将上述最后一个项目的实例称为“PostgreSQL 数据库数据库数据库”，我会附加其他术语以表明我的意思。
- en: The usual backend for a website is a database. Websites and databases are like
    peanut butter and jelly, and although you could conceivably store your data in
    other ways (or pair peanut butter with pickles), for this book we’ll stick with
    databases.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 网站的典型后端是数据库。网站和数据库如花生酱和果冻一般搭配，尽管你可能会考虑其他存储数据的方式（或者把花生酱配上泡菜），但在本书中我们将专注于数据库。
- en: 'Databases handle many problems that you would otherwise have to solve yourself
    with code, such as these:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库处理了许多问题，否则您将不得不用代码自行解决，例如以下问题：
- en: Multiple access
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多重访问
- en: Indexing
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引
- en: Data consistency
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据一致性
- en: 'The general choices for databases are as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库的一般选择如下：
- en: Relational databases, with the SQL query language
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关系数据库，带有 SQL 查询语言
- en: Nonrelational databases, with various query languages
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非关系型数据库，具有各种查询语言
- en: Relational Databases and SQL
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关系数据库和 SQL
- en: Python has a standard relational API definition called [DB-API](https://oreil.ly/StbE4),
    and it’s supported by Python driver packages for all the major databases. [Table 14-1](#table1401)
    lists some prominent relational databases and their main Python driver packages.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Python 有一个名为 [DB-API](https://oreil.ly/StbE4) 的标准关系 API 定义，由所有主要数据库的 Python
    驱动程序包支持。[表 14-1](#table1401) 列出了一些显著的关系数据库及其主要的 Python 驱动程序包。
- en: Table 14-1\. Relational databases and Python drivers
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 表 14-1\. 关系数据库和 Python 驱动程序
- en: '| Database | Python drivers |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 数据库 | Python 驱动程序 |'
- en: '| --- | --- |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Open source |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 开源 |'
- en: '| [SQLite](https://www.sqlite.org) | [sqlite3](https://oreil.ly/TNNaA) |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [SQLite](https://www.sqlite.org) | [sqlite3](https://oreil.ly/TNNaA) |'
- en: '| [PostgreSQL](https://www.postgresql.org) | [psycopg2](https://oreil.ly/nLn5x)
    and [asyncpg](https://oreil.ly/90pvK) |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [PostgreSQL](https://www.postgresql.org) | [psycopg2](https://oreil.ly/nLn5x)
    和 [asyncpg](https://oreil.ly/90pvK) |'
- en: '| [MySQL](https://www.mysql.com) | [MySQLdb](https://oreil.ly/yn1fn) and [PyMySQL](https://oreil.ly/Cmup-)
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [MySQL](https://www.mysql.com) | [MySQLdb](https://oreil.ly/yn1fn) 和 [PyMySQL](https://oreil.ly/Cmup-)
    |'
- en: '| Commercial |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 商业 |'
- en: '| [Oracle](https://www.oracle.com) | [python-oracledb](https://oreil.ly/gynvX)
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| [Oracle](https://www.oracle.com) | [python-oracledb](https://oreil.ly/gynvX)
    |'
- en: '| [SQL Server](https://www.microsoft.com/en-us/sql-server) | [pyodbc](https://oreil.ly/_UEYq)
    and [pymssql](https://oreil.ly/FkKUn) |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [SQL Server](https://www.microsoft.com/en-us/sql-server) | [pyodbc](https://oreil.ly/_UEYq)
    和 [pymssql](https://oreil.ly/FkKUn) |'
- en: '| [IBM Db2](https://www.ibm.com/products/db2) | [ibm_db](https://oreil.ly/3uwpD)
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| [IBM Db2](https://www.ibm.com/products/db2) | [ibm_db](https://oreil.ly/3uwpD)
    |'
- en: 'The main Python packages for relational databases and SQL are as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Python 主要用于关系数据库和 SQL 的软件包如下：
- en: '[SQLAlchemy](https://www.sqlalchemy.org)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQLAlchemy](https://www.sqlalchemy.org)'
- en: A full-featured library that can be used at many levels
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在多个层次上使用的功能齐全的库
- en: '[SQLModel](https://sqlmodel.tiangolo.com)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQLModel](https://sqlmodel.tiangolo.com)'
- en: A combination of SQLAlchemy and Pydantic, by the author of FastAPI
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 的作者结合了 SQLAlchemy 和 Pydantic 的组合
- en: '[Records](https://github.com/kennethreitz/records)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[Records](https://github.com/kennethreitz/records)'
- en: From the author of the Requests package, a simple query API
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 Requests 包的作者，一个简单的查询 API
- en: SQLAlchemy
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQLAlchemy
- en: The most popular Python SQL package is SQLAlchemy. Although many explanations
    of SQLAlchemy discuss only its ORM, it has multiple layers, and I’ll discuss these
    bottom-up.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最流行的 Python SQL 包是 SQLAlchemy。尽管许多关于 SQLAlchemy 的解释只讨论其 ORM，但它有多个层次，我将从底层向上讨论这些。
- en: Core
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Core
- en: 'The base of SQLAlchemy, called *Core*, comprises the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 的基础，称为 *Core*，包括以下内容：
- en: An `Engine` object that implements the DB-API standard
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现了DB-API标准的`Engine`对象
- en: URLs that express the SQL server type and driver, and the specific database
    collection on that server
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表达SQL服务器类型、驱动程序以及该服务器上特定数据库集合的URL
- en: Client-server connection pools
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端-服务器连接池
- en: Transactions (`COMMIT` and `ROLLBACK`)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务（`COMMIT`和`ROLLBACK`）
- en: SQL *dialect* differences among various database types
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种数据库类型之间的SQL *方言* 差异
- en: Direct SQL (text string) queries
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接SQL（文本字符串）查询
- en: Queries in the SQLAlchemy Expression Language
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在SQLAlchemy表达语言中进行查询
- en: Some of these features, like the dialect handling, make SQLAlchemy the package
    of choice for working with various server types. You can use it to execute plain
    DB-API SQL statements or use the SQLAlchemy Expression Language.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些功能，如方言处理，使SQLAlchemy成为处理各种服务器类型的首选包。你可以用它来执行纯粹的DB-API SQL语句或使用SQLAlchemy表达语言。
- en: I’ve been using the raw DB-API SQLite driver so far and will continue. But for
    larger sites or those that might need to take advantage of a special server feature,
    SQLAlchemy (using basic DB-API, SQLAlchemy Expression Language, or the full ORM)
    is well worth using.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止我一直在使用原始的DB-API SQLite驱动程序，并将继续使用。但对于更大的站点或可能需要利用特殊服务器功能的站点，SQLAlchemy（使用基本的DB-API、SQLAlchemy表达语言或完整的ORM）是非常值得使用的。
- en: SQLAlchemy Expression Language
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQLAlchemy表达语言
- en: The SQLAlchemy Expression Language is *not* the ORM, but another way of expressing
    queries against relational tables. It maps the underlying storage structures to
    Python classes like `Table` and `Column`, and operations to Python methods like
    `select()` and `insert()`. These functions translate to plain SQL strings, and
    you can access them to see what happened. The language is independent of SQL server
    types. If you find SQL difficult, this may be worth trying.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy表达语言*不是*ORM，而是另一种表达对关系表查询的方式。它将底层存储结构映射到像`Table`和`Column`这样的Python类，并将操作映射到像`select()`和`insert()`这样的Python方法。这些函数转换为普通的SQL字符串，你可以访问它们来查看发生了什么。该语言与SQL服务器类型无关。如果你觉得SQL困难，这可能值得一试。
- en: Let’s compare a few examples. [Example 14-1](#ex-14-1) shows the plain SQL version.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较几个例子。[示例 14-1](#ex-14-1) 显示了纯SQL版本。
- en: Example 14-1\. Straight SQL code for `get_one()` in data/explorer.py
  id: totrans-57
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例14-1\. 数据/explorer.py 中`get_one()`的直接SQL代码
- en: '[PRE0]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[Example 14-2](#ex-14-2) shows a partial SQLAlchemy Expression Language equivalent
    to set up the database, build the table, and perform the insertion.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 14-2](#ex-14-2) 显示了部分SQLAlchemy表达语言的等效内容，用于设置数据库、构建表并执行插入。'
- en: Example 14-2\. SQLAlchemy Expression Language for `get_one()`
  id: totrans-60
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例14-2\. SQLAlchemy表达语言用于`get_one()`功能
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For more examples, some alternative [documentation](https://oreil.ly/ZGCHv)
    is a bit more readable than the official pages.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取更多示例，一些备选[文档](https://oreil.ly/ZGCHv)比官方页面更易读。
- en: ORM
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: An ORM expresses queries in terms of domain data models, not the relational
    tables and SQL logic at the base of the database machinery. The official [documentation](https://oreil.ly/x4DCi)
    goes into all the details. The ORM is much more complex than the SQL expression
    language. Developers who prefer fully *object-oriented* patterns usually prefer
    ORMs.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: ORM将查询表达为领域数据模型的术语，而不是数据库机器底层的关系表和SQL逻辑。官方[文档](https://oreil.ly/x4DCi)详细介绍了所有细节。ORM比SQL表达语言复杂得多。偏爱完全*面向对象*模式的开发人员通常更喜欢ORM。
- en: Many books and articles on FastAPI jump right into SQLAlchemy’s ORM when they
    come to the database section. I understand the appeal but also know that it requires
    you to learn another abstraction. SQLAlchemy is an excellent package, but if its
    abstractions don’t always hold, then you have two problems. The simplest solution
    may be to just use SQL, and move to the Expression Language or ORM if the SQL
    gets too hairy.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 许多关于FastAPI的书籍和文章在数据库部分直接跳到SQLAlchemy的ORM。我理解其吸引力，但也知道这要求你学习另一种抽象。SQLAlchemy是一个优秀的库，但如果其抽象不总是适用，那么你就会遇到两个问题。最简单的解决方案可能是直接使用SQL，如果SQL变得过于复杂再转向表达语言或ORM。
- en: SQLModel
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQLModel
- en: The author of FastAPI combined aspects of FastAPI, Pydantic, and SQLAlchemy
    to make [SQLModel](https://sqlmodel.tiangolo.com). It repurposes some development
    techniques from the web world to relational databases. SQLModel matches SQLAlchemy’s
    ORM with Pydantic’s data definition and validation.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI的作者结合了FastAPI、Pydantic和SQLAlchemy的各个方面，创建了[SQLModel](https://sqlmodel.tiangolo.com)。它重新利用了一些来自网络世界的开发技术到关系数据库中。SQLModel将SQLAlchemy的ORM与Pydantic的数据定义和验证结合起来。
- en: SQLite
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQLite
- en: I introduced SQLite in [Chapter 10](ch10.html#ch10), using it for the Data layer
    examples. It’s public domain—you can’t get more open sourcey than that. SQLite
    is used in every browser and every smartphone, making it one of the most widely
    deployed software packages in the world. It’s often overlooked when choosing a
    relational database, but it’s possible that multiple SQLite “servers” could support
    some large services as well as a beefy server like PostgreSQL.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我在 [第10章](ch10.html#ch10) 中介绍了 SQLite，将其用于数据层示例。它是公有领域的——你不能找到比这更开源的了。SQLite
    在每个浏览器和每个智能手机中都被使用，使其成为世界上部署最广泛的软件包之一。在选择关系数据库时，它经常被忽视，但是有可能多个 SQLite “服务器” 也可以支持一些大型服务，就像一个强大的服务器一样，例如
    PostgreSQL。
- en: PostgreSQL
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PostgreSQL
- en: In the early days of relational databases, IBM’s System R was the pioneer, and
    offshoots battled for the new market—mainly open source Ingres versus commercial
    Oracle. Ingres featured a query language named QUEL, and System R had SQL. Although
    QUEL was considered better than SQL by some, Oracle’s adoption of SQL as a standard,
    plus IBM’s influence, helped push Oracle and SQL to success.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在关系数据库的早期，IBM 的 System R 是先驱，而分支为新市场而战——主要是开源的 Ingres 对商业的 Oracle。Ingres 采用了名为
    QUEL 的查询语言，而 System R 采用了 SQL。尽管 QUEL 被一些人认为比 SQL 更好，但是 Oracle 将 SQL 作为标准，再加上
    IBM 的影响力，帮助推动了 Oracle 和 SQL 的成功。
- en: Years later, Michael Stonebraker returned to migrate Ingres to [PostgreSQL](https://www.postgresql.org).
    Nowadays, open source developers tend to choose PostgreSQL, although MySQL was
    popular a few years ago and is still around.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 几年后，Michael Stonebraker 回归，将 Ingres 迁移到 [PostgreSQL](https://www.postgresql.org)。如今，开源开发者倾向于选择
    PostgreSQL，尽管几年前 MySQL 很受欢迎，现在仍然存在。
- en: EdgeDB
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EdgeDB
- en: Despite the success of SQL over the years, it does have some design flaws that
    make queries awkward. Unlike the mathematical theory that SQL is based on (*relational
    calculus* by E. F. Codd), the SQL language design itself is not *composable*.
    Mainly, this means that it’s hard to nest queries within larger ones, leading
    to more complex and verbose code.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 SQL 多年来取得了成功，但它确实存在一些设计缺陷，使得查询变得笨拙。与 SQL 基于的数学理论（由 E. F. Codd 提出的 *关系演算*）不同，SQL
    语言设计本身不具有 *可组合性*。主要是这意味着很难在较大的查询中嵌套查询，导致代码更加复杂和冗长。
- en: 'So, just for fun, I’m throwing in a new relational database here. [EdgeDB](https://www.edgedb.com)
    was written (in Python!) by the author of Python’s asyncio. It’s described as
    *Post-SQL* or *graph-relational*. Under the hood, it uses PostgreSQL to handle
    the tough system stuff. Edge’s contribution is [EdgeQL](https://oreil.ly/sdK4J):
    a new query language that aims to avoid those sharp SQL edges; it’s actually translated
    to SQL for PostgreSQL to execute. [“My Experience with EdgeDB” by Ivan Daniluk](https://oreil.ly/ciNfg)
    handily compares EdgeQL and SQL. The readable illustrated [official documentation](https://oreil.ly/ce6y3)
    parallels the book *Dracula*.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，就只是为了好玩，我在这里加入了一个新的关系数据库。[EdgeDB](https://www.edgedb.com)（用 Python 写的！）是由
    Python 的 asyncio 的作者编写的。它被描述为 *Post-SQL* 或 *graph-relational*。在内部，它使用 PostgreSQL
    处理繁重的系统任务。Edge 的贡献是 [EdgeQL](https://oreil.ly/sdK4J)：一种旨在避免 SQL 中那些棘手的边缘的新查询语言；它实际上被转换为
    SQL 以供 PostgreSQL 执行。[“我对 EdgeDB 的体验” by Ivan Daniluk](https://oreil.ly/ciNfg)
    方便地比较了 EdgeQL 和 SQL。可读的图解[官方文档](https://oreil.ly/ce6y3)与书籍 *Dracula* 相呼应。
- en: Could EdgeQL spread beyond EdgeDB and become an alternative to SQL? Time will
    tell.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: EdgeQL 是否会超越 EdgeDB 并成为 SQL 的替代品？时间会告诉我们。
- en: Nonrelational (NoSQL) Databases
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非关系（NoSQL）数据库
- en: Biggies in the open source NoSQL or NewSQL world are listed in [Table 14-2](#table1402).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在开源 NoSQL 或 NewSQL 领域的主要人物在 [表14-2](#table1402) 中列出。
- en: Table 14-2\. NoSQL databases and Python drivers
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 表14-2\. NoSQL 数据库和 Python 驱动程序
- en: '| Database | Python drivers |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 数据库 | Python 驱动程序 |'
- en: '| --- | --- |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Redis](https://redis.io) | [redis-py](https://github.com/redis/redis-py)
    |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| [Redis](https://redis.io) | [redis-py](https://github.com/redis/redis-py)
    |'
- en: '| [MongoDB](https://www.mongodb.com) | [PyMongo](https://pymongo.readthedocs.io),
    [Motor](https://oreil.ly/Cmgtl) |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| [MongoDB](https://www.mongodb.com) | [PyMongo](https://pymongo.readthedocs.io),
    [Motor](https://oreil.ly/Cmgtl) |'
- en: '| [Apache Cassandra](https://cassandra.apache.org) | [DataStax Driver for Apache
    Cassandra](https://github.com/datastax/python-driver) |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| [Apache Cassandra](https://cassandra.apache.org) | [DataStax Apache Cassandra
    驱动](https://github.com/datastax/python-driver) |'
- en: '| [Elasticsearch](https://www.elastic.co/elasticsearch) | [Python Elasticsearch
    Client](https://oreil.ly/e_bDI) |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| [Elasticsearch](https://www.elastic.co/elasticsearch) | [Python Elasticsearch
    Client](https://oreil.ly/e_bDI) |'
- en: Sometimes *NoSQL* means literally *no SQL*, but sometimes *not only SQL*. Relational
    databases enforce structures on data, often visualized as rectangular tables with
    column fields and data rows, similar to spreadsheets. To reduce redundancy and
    improve performance, relational databases are *normalized* with *normal forms*
    (rules for data and structures), such as allowing only a single value per cell
    (row/column intersection).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有时 *NoSQL* 的意思是字面上的 *no SQL*，但有时是 *not only SQL*。关系型数据库对数据强制实施结构，通常可视化为带有列字段和数据行的矩形表，类似于电子表格。为了减少冗余并提高性能，关系型数据库使用
    *normal forms*（数据和结构的规则）进行 *normalized*，例如只允许每个单元格（行/列交叉点）有一个值。
- en: NoSQL databases relax these rules, sometimes allowing varying column/field types
    across individual data rows. Often the *schemas* (database designs) can be ragged
    structures, as you could express in JSON or Python, rather than relational boxes.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL 数据库放宽了这些规则，有时允许在单个数据行中跨列/字段使用不同类型。通常，*schemas*（数据库设计）可以是杂乱的结构，就像您可以在 JSON
    或 Python 中表示的那样，而不是关系型的盒子。
- en: Redis
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Redis
- en: '*Redis* is a data structure server that runs completely in memory, although
    it can save to and restore from disk. It closely matches Python’s own data structures
    and has become extremely popular.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*Redis* 是一个完全运行在内存中的数据结构服务器，虽然它可以保存到磁盘并从磁盘恢复。它与 Python 自身的数据结构非常匹配，因此变得非常流行。'
- en: MongoDB
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MongoDB
- en: '*MongoDB* is sort of the PostgreSQL of NoSQL servers. A *collection* is the
    equivalent of a SQL table, and a *document* is the equivalent of a SQL table row.
    Another difference, and the main reason for a NoSQL database in the first place,
    is that you don’t need to define what a document looks like. In other words, there’s
    no fixed *schema*. A document is like a Python dictionary, with any string as
    a key.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*MongoDB* 类似于 NoSQL 服务器中的 PostgreSQL。*Collection* 相当于 SQL 表，*document* 相当于
    SQL 表中的一行。另一个区别，也是使用 NoSQL 数据库的主要原因，是您不需要定义文档的结构。换句话说，没有固定的 *schema*。文档类似于 Python
    字典，任何字符串都可以作为键。'
- en: Cassandra
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cassandra
- en: Cassandra is a large-scale database that can be distributed across hundreds
    of nodes. It’s written in Java.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Cassandra 是一个可以分布在数百个节点上的大规模数据库。它是用 Java 编写的。
- en: An alternative database called [ScyllaDB](https://www.scylladb.com) is written
    in C++ and claims to be compatible with Cassandra but more performant.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一种名为 [ScyllaDB](https://www.scylladb.com) 的替代数据库是用 C++ 编写的，声称与 Cassandra 兼容但性能更好。
- en: Elasticsearch
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Elasticsearch
- en: '[Elasticsearch](https://www.elastic.co/elasticsearch) is more like a database
    index than a database itself. It’s often used for full-text search.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[Elasticsearch](https://www.elastic.co/elasticsearch) 更像是数据库索引，而不是数据库本身。它通常用于全文搜索。'
- en: NoSQL Features in SQL Databases
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL 数据库中的 NoSQL 特性
- en: As noted previously, relational databases were traditionally normalized—constrained
    to follow different levels of rules called *normal forms*. One basic rule was
    that the value in each cell (row-column intersection) had to be a *scalar* (no
    arrays or other structures).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面所述，关系型数据库传统上是规范化的——受到称为 *normal forms* 的不同级别规则的约束。一个基本规则是每个单元格中的值（行列交叉点）必须是
    *scalar*（无数组或其他结构）。
- en: 'NoSQL (or *document*) databases supported JSON directly and were usually your
    only choice if you had “uneven” or “ragged” data structures. They were often *denormalized*:
    all the data needed for a document was included with that document. In SQL, you
    often needed to *join* across tables to build a full document.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL（或 *document*）数据库直接支持 JSON，并且通常是如果您有“不均匀”或“杂乱”数据结构的唯一选择。它们通常是 *denormalized*：所有需要的文档数据都包含在该文档中。在
    SQL 中，您经常需要跨表进行 *join* 来构建完整的文档。
- en: However, recent revisions of the SQL standard have allowed JSON data to be stored
    in relational databases also. Some relational databases now let you store complex
    (nonscalar) data in table cells, and even search and index within them. JSON functions
    are supported in various ways for [SQLite](https://oreil.ly/h_FNn), [PostgreSQL](https://oreil.ly/awYrc),
    [MySQL](https://oreil.ly/OA_sT), [Oracle](https://oreil.ly/osOYk), and others.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，SQL 标准的最近修订允许在关系型数据库中存储 JSON 数据。一些关系型数据库现在允许您在表单元格中存储复杂（非标量）数据，并在其中进行搜索和索引。JSON
    函数以各种方式得到支持，包括 [SQLite](https://oreil.ly/h_FNn)、[PostgreSQL](https://oreil.ly/awYrc)、[MySQL](https://oreil.ly/OA_sT)、[Oracle](https://oreil.ly/osOYk)
    等等。
- en: SQL with JSON can be the best of both worlds. SQL databases have been around
    much longer and have really useful features such as foreign keys and secondary
    indexes. Also, SQL is fairly standardized up to a point, and NoSQL query languages
    are all different.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 具有JSON的SQL可能是两者兼得的最佳选择。SQL数据库存在已经很长时间了，并且具有非常有用的功能，如外键和二级索引。此外，SQL在某种程度上相当标准化，而NoSQL查询语言则各不相同。
- en: Finally, new data design and query languages are trying to combine SQL and NoSQL
    advantages, like EdgeQL that I mentioned earlier.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，新的数据设计和查询语言正在尝试结合SQL和NoSQL的优势，就像我之前提到的EdgeQL一样。
- en: So, if you can’t fit your data into the rectangular relational box, look at
    a NoSQL database, a relational database with JSON support, or a “Post-SQL” database.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您的数据无法适应矩形关系框，请考虑NoSQL数据库，支持JSON的关系数据库，或者“Post-SQL”数据库。
- en: Database Load Testing
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库负载测试
- en: This book is mainly about FastAPI, but websites are so frequently tied to databases.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 本书主要讲述的是FastAPI，但网站经常与数据库相关联。
- en: The data examples in this book have been tiny. To really stress-test a database,
    millions of items would be great. Rather than think of things to add, it’s easier
    use a Python package like [Faker](https://faker.readthedocs.io). Faker can generate
    many kinds of data quickly—names, places, or special types that you define.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的数据示例都很小。要真正对数据库进行压力测试，数百万条数据将是很好的选择。与其考虑要添加的内容，不如使用像[Faker](https://faker.readthedocs.io)这样的Python包更容易。Faker可以快速生成许多类型的数据—名称、地点或您定义的特殊类型。
- en: In [Example 14-3](#ex-14-3), Faker pumps out names and countries, which are
    then loaded by `load()` into SQLite.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例 14-3](#ex-14-3)中，Faker生成名称和国家，然后由`load()`加载到SQLite中。
- en: Example 14-3\. Load fake explorers in test_load.py
  id: totrans-108
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例14-3\. 在test_load.py中加载虚拟探险家
- en: '[PRE2]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You’re catching the `Duplicate` exception in `load()` and ignoring it, because
    Faker generates names from a limited list and is likely to repeat one now and
    then. So the result may be less than 100,000 explorers loaded.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在`load()`中捕获`Duplicate`异常并忽略它，因为Faker从一个有限的列表中生成名称，偶尔可能会重复。所以结果可能少于加载的10万个探险家。
- en: Also, you’re calling `read_db()` twice, to remove any startup time as SQLite
    does the query. Then `read_api()` timing should be fair. [Example 14-4](#ex-14-4)
    fires it up.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您两次调用了`read_db()`，以便在SQLite执行查询时消除任何启动时间。然后`read_api()`的时间应该是公平的。[示例 14-4](#ex-14-4)启动它。
- en: Example 14-4\. Test database query performance
  id: totrans-112
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例14-4\. 测试数据库查询性能
- en: '[PRE3]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The API read time for all explorers was much slower than the Data layer’s read
    time. Some of this is probably overhead from FastAPI’s conversion of the response
    to JSON. Also, the initial write time to the database wasn’t very zippy. It wrote
    one explorer at a time, because the Data layer API has a single `create()` function,
    but not a `create_many()`; on the read side, the API can return one (`get_one()`)
    or all (`get_all()`). So, if you ever want to do bulk loading, it might be good
    to add a new Data load function and a new Web endpoint (with restricted authorization).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 所有探险家的API读取时间比数据层的读取时间慢得多。其中一些可能是由于FastAPI将响应转换为JSON的开销。此外，写入数据库的初始时间并不是很快。它一次写入一个探险家，因为数据层API有一个单独的`create()`函数，但没有`create_many()`函数；在读取方面，API可以返回一个(`get_one()`)或所有(`get_all()`)。因此，如果您想要进行批量加载，可能最好添加一个新的数据加载函数和一个新的Web端点（带有受限制的授权）。
- en: Also, if you expect any table in your database to grow to 100,000 rows, maybe
    you shouldn’t allow random users to get all of them in one API call. Pagination
    would be useful, or a way to download a single CSV file from the table.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您期望数据库中的任何表增长到10万行，也许您不应该允许随机用户在一个API调用中获取所有这些行。分页会很有用，或者一种从表中下载单个CSV文件的方法。
- en: Data Science and AI
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学与人工智能
- en: Python has become the most prominent language in data science in general, and
    machine learning in particular. So much data massaging is needed, and Python is
    good at that.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Python已经成为数据科学总体上以及机器学习特别是最突出的语言。因此需要大量的数据处理工作，而Python擅长于此。
- en: Sometimes developers have used [external tools](https://oreil.ly/WFHo9) like
    pandas to do the data manipulation that’s too tricky in SQL.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 有时开发人员会使用[外部工具](https://oreil.ly/WFHo9)如pandas来进行在SQL中过于棘手的数据操作。
- en: '[PyTorch](https://pytorch.org) is one of the most popular ML tools, because
    it leverages Python’s strengths in data manipulation. The underlying computations
    may be in C or C++ for speed, but Python or Go are well-suited for the “higher”
    data-integration tasks. (The [Mojo](https://www.modular.com/mojo) language, a
    superset of Python, may handle both the high and low ends if it succeeds as planned.
    Although a general-purpose language, it specifically addresses some of the current
    complexity in AI development.)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[PyTorch](https://pytorch.org) 是最流行的 ML 工具之一，因为它充分利用了 Python 在数据处理方面的优势。底层计算可能使用
    C 或 C++ 来提高速度，但 Python 或 Go 更适合“更高级”的数据集成任务。（The [Mojo](https://www.modular.com/mojo)
    语言，Python 的超集，如果计划成功，可能会处理高低端任务。虽然它是一种通用语言，但专门解决了 AI 开发中的某些当前复杂性。）'
- en: A new Python tool called [Chroma](https://www.trychroma.com) is a database,
    similar to SQLite, but tailored to machine learning, specifically large language
    models (LLMs). Read the [Getting Started page](https://oreil.ly/W59nn) to, you
    know, get started.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为 [Chroma](https://www.trychroma.com) 的新 Python 工具是一个数据库，类似于 SQLite，但专门针对机器学习，特别是大型语言模型（LLMs）。阅读
    [Getting Started page](https://oreil.ly/W59nn) 来，你懂的，开始使用。
- en: Although AI development is complex and moving fast, you can try out some AI
    with Python on your own machine without spending the megabucks that were behind
    GPT-4 and ChatGPT. Let’s build a small FastAPI web interface to a small AI model.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 AI 开发复杂且发展迅速，但你可以在自己的机器上使用 Python 尝试一些 AI，而不需要像 GPT-4 和 ChatGPT 那样花费巨额资金。让我们构建一个小型
    FastAPI 网页接口到一个小型 AI 模型。
- en: Note
  id: totrans-122
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '*Model* has different meanings in AI and Pydantic/FastAPI. In Pydantic, a model
    is a Python class that bundles related data fields. AI models cover a broad range
    of techniques for determining patterns in data.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '*Model* 在 AI 和 Pydantic/FastAPI 中有不同的含义。在 Pydantic 中，一个 model 是一个捆绑相关数据字段的
    Python 类。AI models 则涵盖了广泛的技术，用于确定数据中的模式。'
- en: '[Hugging Face](https://huggingface.co) provides free AI models, datasets, and
    Python code to use them. First, install PyTorch and Hugging Face code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[Hugging Face](https://huggingface.co) 提供免费的 AI models、数据集和 Python 代码供使用。首先，安装
    PyTorch 和 Hugging Face 代码：'
- en: '[PRE4]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[Example 14-5](#ex-14-5) shows a FastAPI application that uses Hugging Face’s
    transformers module to access a pretrained mid-sized open source machine language
    model and try to answer your prompts. (This was adapted from a command-line example
    on the YouTube channel CodeToTheMoon.)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[Example 14-5](#ex-14-5) 展示了一个 FastAPI 应用程序，它使用 Hugging Face 的 transformers
    模块访问预训练的中型开源机器语言模型，并尝试回答你的提示。（这是从 YouTube 频道 CodeToTheMoon 的命令行示例中改编的。）'
- en: Example 14-5\. Top-level LLM test (ai.py)
  id: totrans-127
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 14-5\. 顶层 LLM 测试（ai.py）
- en: '[PRE5]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run this with `uvicorn ai:app` (as always, first make sure you don’t have another
    web server still running on `localhost`, port `8000`). Feed the */ai* endpoint
    questions and get answers, like this (note the double `==` for an HTTPie query
    parameter):'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `uvicorn ai:app` 运行此程序（像往常一样，首先确保你没有另一个仍在 `localhost` 端口 `8000` 上运行的网络服务器）。在
    */ai* 端点输入问题并获得答案，如此（注意 HTTPie 查询参数的双 `==`）：
- en: '[PRE6]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is a fairly small model, and as you can see, it doesn’t answer questions
    especially well. I tried other prompts (`line` arguments) and got equally noteworthy
    answers:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当小的模型，正如你所见，它并不能特别好地回答问题。我尝试了其他提示（`line` 参数）并得到了同样值得注意的答案：
- en: 'Q: Are cats better than dogs?'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Q: 猫比狗更好吗？'
- en: 'A: No'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'A: 不'
- en: 'Q: What does bigfoot eat for breakfast?'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Q: 大脚怪早餐吃什么？'
- en: 'A: A squid'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'A: 一只鱿鱼'
- en: 'Q: Who comes down the chimney?'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Q: 谁会从烟囱里下来？'
- en: 'A: A squealing pig'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'A: 一只尖叫的猪'
- en: 'Q: What group was John Cleese in?'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Q: 约翰·克利斯在什么组里？'
- en: 'A: The Beatles'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'A: 披头士乐队'
- en: 'Q: What has nasty pointy teeth?'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Q: 什么有尖尖的牙齿？'
- en: 'A: A teddy bear'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'A: 一个泰迪熊'
- en: These questions may get different answers at different times! Once the same
    endpoint said that Bigfoot eats sand for breakfast. In AI-speak, answers like
    this are called *hallucinations*. You can get better answers by using a larger
    model, like `google/flan-75-xl`, but it will take longer to download model data
    and respond on a personal computer. And of course, models like ChatGPT were trained
    on all the data they could find (using every CPU, GPU, TPU, and any other kind
    of PU), and will give excellent answers.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题在不同时间可能会有不同的答案！有一次同一端点说大脚怪早餐吃沙子。在 AI 术语中，像这样的答案被称为 *幻觉*。你可以通过使用像 `google/flan-75-xl`
    这样的更大模型来获得更好的答案，但在个人电脑上下载模型数据和响应会花费更长时间。当然，像 ChatGPT 这样的模型是使用它们能找到的所有数据训练的（使用每个
    CPU、GPU、TPU 和任何其他类型的 PU），并且会给出优秀的答案。
- en: Review
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾
- en: This chapter expanded on the use of SQLite we went over in [Chapter 10](ch10.html#ch10)
    to other SQL databases, and even NoSQL ones. It also showed how some SQL databases
    can do NoSQL tricks with JSON support. Finally, it talked about the uses of database
    and special data tools that have become more important as machine learning continues
    its explosive growth.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 本章扩展了我们在[第10章](ch10.html#ch10)中介绍的SQLite的用法，涵盖了其他SQL数据库，甚至NoSQL数据库。它还展示了一些SQL数据库如何通过JSON支持实现NoSQL技巧。最后，它讨论了随着机器学习持续爆炸性增长，数据库和特殊数据工具的用途变得更加重要。
