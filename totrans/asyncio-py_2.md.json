["```py\nfrom concurrent.futures import ThreadPoolExecutor as Executor\n\ndef worker(data):\n    <process the data>\nwith Executor(max_workers=10) as exe:\n    future = exe.submit(worker, data)\n```", "```py\n# threadmem.py\nimport os\nfrom time import sleep\nfrom threading import Thread\nthreads = [\n  Thread(target=lambda: sleep(60)) for i in range(10000)\n]\n[t.start() for t in threads]\nprint(f'PID = {os.getpid()}')\n[t.join() for t in threads]\n```", "```py\nMiB Mem : 7858.199 total, 1063.844 free, 4900.477 used\nMiB Swap: 7935.996 total, 4780.934 free, 3155.062 used\n\n  PID USER      PR  NI    VIRT    RES    SHR COMMAND\n15166 caleb     20   0 80.291g 131.1m   4.8m python3\n```", "```py\nimport threading\nfrom queue import Queue\n\nclass ThreadBot(threading.Thread):  ![1](assets/1.png)\n  def __init__(self):\n    super().__init__(target=self.manage_table)  ![2](assets/2.png)\n    self.cutlery = Cutlery(knives=0, forks=0)  ![3](assets/3.png)\n    self.tasks = Queue()  ![4](assets/4.png)\n\n  def manage_table(self):\n    while True:  ![5](assets/5.png)\n      task = self.tasks.get()\n      if task == 'prepare table':\n        kitchen.give(to=self.cutlery, knives=4, forks=4) ![6](assets/6.png)\n      elif task == 'clear table':\n        self.cutlery.give(to=kitchen, knives=4, forks=4)\n      elif task == 'shutdown':\n        return\n```", "```py\nfrom attr import attrs, attrib\n\n@attrs  ![1](assets/1.png)\nclass Cutlery:\n    knives = attrib(default=0)  ![2](assets/2.png)\n    forks = attrib(default=0)\n\n    def give(self, to: 'Cutlery', knives=0, forks=0):  ![3](assets/3.png)\n        self.change(-knives, -forks)\n        to.change(knives, forks)\n\n    def change(self, knives, forks):  ![4](assets/4.png)\n            self.knives += knives\n            self.forks += forks\n\nkitchen = Cutlery(knives=100, forks=100)  ![5](assets/5.png)\nbots = [ThreadBot() for i in range(10)]  ![6](assets/6.png)\n\nimport sys\nfor bot in bots:\n    for i in range(int(sys.argv[1])):  ![7](assets/7.png)\n        bot.tasks.put('prepare table')\n        bot.tasks.put('clear table')\n    bot.tasks.put('shutdown')  ![8](assets/8.png)\n\nprint('Kitchen inventory before service:', kitchen)\nfor bot in bots:\n    bot.start()\n\nfor bot in bots:\n    bot.join()\nprint('Kitchen inventory after service:', kitchen)\n```", "```py\n$ python cutlery_test.py 100\nKitchen inventory before service: Cutlery(knives=100, forks=100)\nKitchen inventory after service: Cutlery(knives=100, forks=100)\n\n```", "```py\n$ python cutlery_test.py 10000\nKitchen inventory before service: Cutlery(knives=100, forks=100)\nKitchen inventory after service: Cutlery(knives=96, forks=108)\n\n```", "```py\n$ python cutlery_test.py 10000\nKitchen inventory before service: Cutlery(knives=100, forks=100)\nKitchen inventory after service: Cutlery(knives=112, forks=96)\n\n```", "```py\ndef change(self, knives, forks):\n    self.knives += knives\n    self.forks += forks\n```", "```py\ndef change(self, knives, forks):\n    with self.lock:\n      self.knives += knives\n      self.forks += forks\n```"]