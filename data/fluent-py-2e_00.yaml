- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: 'Here’s the plan: when someone uses a feature you don’t understand, simply shoot
    them. This is easier than learning something new, and before too long the only
    living coders will be writing in an easily understood, tiny subset of Python 0.9.6
    <wink>.^([1](preface01.html#idm46582510969104))'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 计划是这样的：当有人使用你不理解的特性时，直接开枪打死他们。这比学习新东西要容易得多，不久之后，活下来的程序员只会用一个容易理解的、微小的 Python
    0.9.6 子集来编写代码 <wink>。^([1](preface01.html#idm46582510969104))
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Tim Peters, legendary core developer and author of *The Zen of Python*
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Tim Peters，传奇的核心开发者，*Python之禅*的作者
- en: '“Python is an easy to learn, powerful programming language.” Those are the
    first words of the [official Python 3.10 tutorial](https://fpy.li/p-2). That is
    true, but there is a catch: because the language is easy to learn and put to use,
    many practicing Python programmers leverage only a fraction of its powerful features.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '"Python 是一种易于学习、功能强大的编程语言。"这是[官方 Python 3.10 教程](https://fpy.li/p-2)的开篇词。这是真的，但有一个问题：因为这门语言易学易用，许多实践中的
    Python 程序员只利用了它强大特性的一小部分。'
- en: An experienced programmer may start writing useful Python code in a matter of
    hours. As the first productive hours become weeks and months, a lot of developers
    go on writing Python code with a very strong accent carried from languages learned
    before. Even if Python is your first language, often in academia and in introductory
    books it is presented while carefully avoiding language-specific features.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有经验的程序员可能在几个小时内就开始编写有用的 Python 代码。当最初富有成效的几个小时变成几周和几个月时，许多开发人员会继续用之前学过的语言的强烈口音编写
    Python 代码。即使 Python 是你的第一门语言，在学术界和入门书籍中，它通常被小心地避开语言特定的特性来呈现。
- en: 'As a teacher introducing Python to programmers experienced in other languages,
    I see another problem that this book tries to address: we only miss stuff we know
    about. Coming from another language, anyone may guess that Python supports regular
    expressions, and look that up in the docs. But if you’ve never seen tuple unpacking
    or descriptors before, you will probably not search for them, and you may end
    up not using those features just because they are specific to Python.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名向有其他语言经验的程序员介绍 Python 的老师，我看到了这本书试图解决的另一个问题：我们只会错过我们知道的东西。来自另一种语言，任何人都可能猜测
    Python 支持正则表达式，并在文档中查找。但是，如果你以前从未见过元组解包或描述符，你可能不会搜索它们，最终可能不会使用这些特性，只是因为它们是 Python
    特有的。
- en: This book is not an A-to-Z exhaustive reference of Python. Its emphasis is on
    the language features that are either unique to Python or not found in many other
    popular languages. This is also mostly a book about the core language and some
    of its libraries. I will rarely talk about packages that are not in the standard
    library, even though the Python package index now lists more than 60,000 libraries,
    and many of them are incredibly useful.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不是 Python 的 A 到 Z 详尽参考。它强调 Python 独有的或在许多其他流行语言中找不到的语言特性。这也主要是一本关于核心语言及其一些库的书。我很少会谈论不在标准库中的包，尽管
    Python 包索引现在列出了超过 60,000 个库，其中许多非常有用。
- en: Who This Book Is For
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书适合的读者
- en: This book was written for practicing Python programmers who want to become proficient
    in Python 3. I tested the examples in Python 3.10—most of them also in Python
    3.9 and 3.8. When an example requires Python 3.10, it should be clearly marked.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是为想要精通 Python 3 的在职 Python 程序员编写的。我在 Python 3.10 中测试了这些示例，大部分也在 Python 3.9
    和 3.8 中测试过。如果某个示例需要 Python 3.10，会有明确标注。
- en: If you are not sure whether you know enough Python to follow along, review the
    topics of the official [Python tutorial](https://fpy.li/p-3). Topics covered in
    the tutorial will not be explained here, except for some features that are new.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不确定自己是否有足够的 Python 知识来跟上，请复习官方 [Python 教程](https://fpy.li/p-3)的主题。除了一些新特性外，本书不会解释教程中涉及的主题。
- en: Who This Book Is Not For
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书不适合的读者
- en: If you are just learning Python, this book is going to be hard to follow. Not
    only that, if you read it too early in your Python journey, it may give you the
    impression that every Python script should leverage special methods and metaprogramming
    tricks. Premature abstraction is as bad as premature optimization.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你刚开始学习 Python，这本书可能很难理解。不仅如此，如果你在 Python 学习之旅的早期阶段阅读它，可能会给你一种印象，认为每个 Python
    脚本都应该利用特殊方法和元编程技巧。过早的抽象和过早的优化一样糟糕。
- en: Five Books in One
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 五合一的书
- en: I recommend that everyone read [Chapter 1, “The Python Data Model”](ch01.html#data_model).
    The core audience for this book should not have trouble jumping directly to any
    part in this book after [Chapter 1](ch01.html#data_model), but often I assume
    you’ve read preceding chapters in each specific part. Think of Parts [I](part01.html#data_structures_part)
    through [V](part05.html#metaprog_part) as books within the book.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议每个人都阅读[第1章，"Python 数据模型"](ch01.html#data_model)。本书的核心读者在阅读完[第1章](ch01.html#data_model)后，应该不会有什么困难直接跳到本书的任何部分，但我经常假设你已经阅读了每个特定部分的前面章节。可以把[第一部分](part01.html#data_structures_part)到[第五部分](part05.html#metaprog_part)看作是书中之书。
- en: I tried to emphasize using what is available before discussing how to build
    your own. For example, in [Part I](part01.html#data_structures_part), [Chapter 2](ch02.html#sequences)
    covers sequence types that are ready to use, including some that don’t get a lot
    of attention, like `collections.deque`. Building user-defined sequences is only
    addressed in [Part III](part03.html#classes_protocols_part), where we also see
    how to leverage the abstract base classes (ABCs) from `collections.abc`. Creating
    your own ABCs is discussed even later in [Part III](part03.html#classes_protocols_part),
    because I believe it’s important to be comfortable using an ABC before writing
    your own.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我试图强调在讨论如何构建自己的东西之前先使用现有的东西。例如，在[第一部分](part01.html#data_structures_part)中，[第2章](ch02.html#sequences)涵盖了现成可用的序列类型，包括一些不太受关注的类型，如`collections.deque`。用户自定义序列直到[第三部分](part03.html#classes_protocols_part)才会讲到，在那里我们还会看到如何利用`collections.abc`中的抽象基类（ABC）。创建自己的
    ABC 要更晚在[第三部分](part03.html#classes_protocols_part)中讨论，因为我认为在编写自己的 ABC 之前，熟悉使用现有的
    ABC 很重要。
- en: This approach has a few advantages. First, knowing what is ready to use can
    save you from reinventing the wheel. We use existing collection classes more often
    than we implement our own, and we can give more attention to the advanced usage
    of available tools by deferring the discussion on how to create new ones. We are
    also more likely to inherit from existing ABCs than to create a new ABC from scratch.
    And finally, I believe it is easier to understand the abstractions after you’ve
    seen them in action.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有几个优点。首先，知道什么是现成可用的，可以避免你重新发明轮子。我们使用现有的集合类比实现自己的集合类更频繁，并且我们可以通过推迟讨论如何创建新类，而将更多注意力放在可用工具的高级用法上。我们也更有可能从现有的
    ABC 继承，而不是从头开始创建新的 ABC。最后，我认为在你看到这些抽象的实际应用之后，更容易理解它们。
- en: The downside of this strategy is the forward references scattered throughout
    the chapters. I hope these will be easier to tolerate now that you know why I
    chose this path.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这种策略的缺点是章节中散布着前向引用。我希望现在你知道我为什么选择这条路，这些引用会更容易容忍。
- en: How the Book Is Organized
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本书的组织方式
- en: 'Here are the main topics in each part of the book:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本书各部分的主要主题：
- en: '[Part I, “Data Structures”](part01.html#data_structures_part)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 I 部分，"数据结构"](part01.html#data_structures_part)'
- en: '[Chapter 1](ch01.html#data_model) introduces the Python Data Model and explains
    why the special methods (e.g., `__repr__`) are the key to the consistent behavior
    of objects of all types. Special methods are covered in more detail throughout
    the book. The remaining chapters in this part cover the use of collection types:
    sequences, mappings, and sets, as well as the `str` versus `bytes` split—the cause
    of much celebration among Python 3 users and much pain for Python 2 users migrating
    their codebases. Also covered are the high-level class builders in the standard
    library: named tuple factories and the `@dataclass` decorator. Pattern matching—new
    in Python 3.10—is covered in sections in Chapters [2](ch02.html#sequences), [3](ch03.html#dicts-a-to-z),
    and [5](ch05.html#data_class_ch), which discuss sequence patterns, mapping patterns,
    and class patterns. The last chapter in [Part I](part01.html#data_structures_part)
    is about the life cycle of objects: references, mutability, and garbage collection.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 1 章](ch01.html#data_model)介绍了 Python 数据模型，并解释了为什么特殊方法（例如，`__repr__`）是所有类型的对象行为一致的关键。本书将更详细地介绍特殊方法。本部分的其余章节涵盖了集合类型的使用：序列、映射和集合，以及`str`与`bytes`的分离——这给
    Python 3 用户带来了许多欢呼，而让迁移代码库的 Python 2 用户感到痛苦。还介绍了标准库中的高级类构建器：命名元组工厂和`@dataclass`装饰器。[第
    2 章](ch02.html#sequences)、[第 3 章](ch03.html#dicts-a-to-z)和[第 5 章](ch05.html#data_class_ch)中的部分介绍了
    Python 3.10 中新增的模式匹配，分别讨论了序列模式、映射模式和类模式。[第 I 部分](part01.html#data_structures_part)的最后一章是关于对象的生命周期：引用、可变性和垃圾回收。'
- en: '[Part II, “Functions as Objects”](part02.html#function_objects_part)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 II 部分，"作为对象的函数"](part02.html#function_objects_part)'
- en: 'Here we talk about functions as first-class objects in the language: what that
    means, how it affects some popular design patterns, and how to implement function
    decorators by leveraging closures. Also covered here is the general concept of
    callables in Python, function attributes, introspection, parameter annotations,
    and the new `nonlocal` declaration in Python 3\. [Chapter 8](ch08.html#type_hints_in_def_ch)
    introduces the major new topic of type hints in function signatures.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们讨论作为语言中一等对象的函数：这意味着什么，它如何影响一些流行的设计模式，以及如何通过利用闭包来实现函数装饰器。还涵盖了 Python 中可调用对象的一般概念、函数属性、内省、参数注解以及
    Python 3 中新的`nonlocal`声明。[第 8 章](ch08.html#type_hints_in_def_ch)介绍了函数签名中类型提示的主要新主题。
- en: '[Part III, “Classes and Protocols”](part03.html#classes_protocols_part)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 III 部分，"类和协议"](part03.html#classes_protocols_part)'
- en: Now the focus is on building classes “by hand”—as opposed to using the class
    builders covered in [Chapter 5](ch05.html#data_class_ch). Like any Object-Oriented
    (OO) language, Python has its particular set of features that may or may not be
    present in the language in which you and I learned class-based programming. The
    chapters explain how to build your own collections, abstract base classes (ABCs),
    and protocols, as well as how to cope with multiple inheritance, and how to implement
    operator overloading—when that makes sense. [Chapter 15](ch15.html#more_types_ch)
    continues the coverage of type hints.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的重点是"手动"构建类——而不是使用[第 5 章](ch05.html#data_class_ch)中介绍的类构建器。与任何面向对象（OO）语言一样，Python
    有其特定的功能集，这些功能可能存在也可能不存在于你和我学习基于类的编程的语言中。这些章节解释了如何构建自己的集合、抽象基类（ABC）和协议，以及如何处理多重继承，以及如何在有意义时实现运算符重载。[第
    15 章](ch15.html#more_types_ch)继续介绍类型提示。
- en: '[Part IV, “Control Flow”](part04.html#control_flow_part)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 IV 部分，"控制流"](part04.html#control_flow_part)'
- en: Covered in this part are the language constructs and libraries that go beyond
    traditional control flow with conditionals, loops, and subroutines. We start with
    generators, then visit context managers and coroutines, including the challenging
    but powerful new `yield from` syntax. [Chapter 18](ch18.html#with_match_ch) includes
    a significant example using pattern matching in a simple but functional language
    interpreter. [Chapter 19, “Concurrency Models in Python”](ch19.html#concurrency_models_ch)
    is a new chapter presenting an overview of alternatives for concurrent and parallel
    processing in Python, their limitations, and how software architecture allows
    Python to operate at web scale. I rewrote the chapter about *asynchronous programming*
    to emphasize core language features—e.g., `await`, `async dev`, `async for`, and
    `async with`, and show how they are used with *asyncio* and other frameworks.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分涵盖了超越传统的使用条件、循环和子程序的控制流的语言构造和库。我们从生成器开始，然后访问上下文管理器和协程，包括具有挑战性但功能强大的新 `yield
    from` 语法。[第18章](ch18.html#with_match_ch)包含一个重要的示例，在一个简单但功能齐全的语言解释器中使用模式匹配。[第19章，"Python中的并发模型"](ch19.html#concurrency_models_ch)是一个新章节，概述了Python中并发和并行处理的替代方案、它们的局限性以及软件架构如何允许Python在网络规模下运行。我重写了关于*异步编程*的章节，强调核心语言特性，例如
    `await`、`async dev`、`async for` 和 `async with`，并展示了它们如何与 *asyncio* 和其他框架一起使用。
- en: '[Part V, “Metaprogramming”](part05.html#metaprog_part)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[第五部分，"元编程"](part05.html#metaprog_part)'
- en: 'This part starts with a review of techniques for building classes with attributes
    created dynamically to handle semi-structured data, such as JSON datasets. Next,
    we cover the familiar properties mechanism, before diving into how object attribute
    access works at a lower level in Python using descriptors. The relationship among
    functions, methods, and descriptors is explained. Throughout [Part V](part05.html#metaprog_part),
    the step-by-step implementation of a field validation library uncovers subtle
    issues that lead to the advanced tools of the final chapter: class decorators
    and metaclasses.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分从回顾用于构建具有动态创建属性以处理半结构化数据（如JSON数据集）的类的技术开始。接下来，我们介绍熟悉的属性机制，然后深入探讨Python中对象属性访问如何在较低级别使用描述符工作。解释了函数、方法和描述符之间的关系。在[第五部分](part05.html#metaprog_part)中，逐步实现字段验证库，揭示了微妙的问题，这些问题导致了最后一章中的高级工具：类装饰器和元类。
- en: Hands-On Approach
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手实践的方法
- en: Often we’ll use the interactive Python console to explore the language and libraries.
    I feel it is important to emphasize the power of this learning tool, particularly
    for those readers who’ve had more experience with static, compiled languages that
    don’t provide a read-eval-print loop (REPL).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常会使用交互式 Python 控制台来探索语言和库。我觉得强调这种学习工具的力量很重要，尤其是对那些有更多使用静态编译语言经验而没有提供读取-求值-打印循环（REPL）的读者而言。
- en: 'One of the standard Python testing packages, [`doctest`](https://fpy.li/doctest),
    works by simulating console sessions and verifying that the expressions evaluate
    to the responses shown. I used `doctest` to check most of the code in this book,
    including the console listings. You don’t need to use or even know about `doctest`
    to follow along: the key feature of doctests is that they look like transcripts
    of interactive Python console sessions, so you can easily try out the demonstrations
    yourself.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 标准 Python 测试包之一 [`doctest`](https://fpy.li/doctest)，通过模拟控制台会话并验证表达式是否得出所示的响应来工作。我用
    `doctest` 检查了本书中的大部分代码，包括控制台列表。你不需要使用甚至了解 `doctest` 就可以跟随：doctests 的关键特性是它们看起来像是交互式
    Python 控制台会话的记录，所以你可以轻松地自己尝试这些演示。
- en: Sometimes I will explain what we want to accomplish by showing a doctest before
    the code that makes it pass. Firmly establishing what is to be done before thinking
    about how to do it helps focus our coding effort. Writing tests first is the basis
    of test-driven development (TDD), and I’ve also found it helpful when teaching.
    If you are unfamiliar with `doctest`, take a look at its [documentation](https://fpy.li/doctest)
    and this book’s [example code repository](https://fpy.li/code).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我会在编写使其通过的代码之前，通过展示 doctest 来解释我们想要完成的任务。在考虑如何做之前牢固地确立要做什么，有助于集中我们的编码工作。先编写测试是测试驱动开发（TDD）的基础，我发现它在教学时也很有帮助。如果你不熟悉
    `doctest`，请查看其[文档](https://fpy.li/doctest)和本书的[示例代码仓库](https://fpy.li/code)。
- en: I also wrote unit tests for some of the larger examples using *pytest*—which
    I find easier to use and more powerful than the *unittest* module in the standard
    library. You’ll find that you can verify the correctness of most of the code in
    the book by typing `python3 -m doctest example_script.py` or `pytest` in the command
    shell of your OS. The *pytest.ini* configuration at the root of the [example code
    repository](https://fpy.li/code) ensures that doctests are collected and executed
    by the `pytest` command.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我还使用 *pytest* 为一些较大的示例编写了单元测试——我发现它比标准库中的 *unittest* 模块更易于使用且功能更强大。你会发现，通过在操作系统的命令行
    shell 中键入 `python3 -m doctest example_script.py` 或 `pytest`，可以验证本书中大多数代码的正确性。[示例代码仓库](https://fpy.li/code)根目录下的
    *pytest.ini* 配置确保 doctests 被 `pytest` 命令收集和执行。
- en: 'Soapbox: My Personal Perspective'
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 皂盒：我的个人观点
- en: I have been using, teaching, and debating Python since 1998, and I enjoy studying
    and comparing programming languages, their design, and the theory behind them.
    At the end of some chapters, I have added “Soapbox” sidebars with my own perspective
    about Python and other languages. Feel free to skip these if you are not into
    such discussions. Their content is completely optional.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从1998年开始，我一直在使用、教授和探讨 Python，我喜欢研究和比较编程语言、它们的设计以及背后的理论。在一些章节的末尾，我添加了"皂盒"侧边栏，其中包含我自己对
    Python 和其他语言的看法。如果你不喜欢这样的讨论，请随意跳过。它们的内容完全是可选的。
- en: 'Companion Website: fluentpython.com'
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配套网站：fluentpython.com
- en: Covering new features—like type hints, data classes, and pattern matching—made
    this second edition almost 30% larger than the first. To keep the book luggable,
    I moved some content to [*fluentpython.com*](http://fluentpython.com). You will
    find links to articles I published there in several chapters. Some sample chapters
    are also in the companion website. The full text is [available online](https://fpy.li/p-4)
    at the [O’Reilly Learning](https://fpy.li/p-5) subscription service. The example
    code repository is on [GitHub](https://fpy.li/code).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了涵盖新特性（如类型提示、数据类和模式匹配），第二版的内容比第一版增加了近30%。为了保持书本的便携性，我将一些内容移至 [*fluentpython.com*](http://fluentpython.com)。你会在几个章节中找到我在那里发表的文章的链接。配套网站上也有一些示例章节。完整文本可在
    [O'Reilly Learning](https://fpy.li/p-5) 订阅服务的[在线版本](https://fpy.li/p-4)中获得。示例代码仓库在
    [GitHub](https://fpy.li/code) 上。
- en: Conventions Used in This Book
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书中使用的约定
- en: 'The following typographical conventions are used in this book:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用以下排版惯例：
- en: '*Italic*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*Italic*'
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 表示新术语、URL、电子邮件地址、文件名和文件扩展名。
- en: '`Constant width`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`Constant width`'
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 用于程序清单，以及在段落内引用程序元素，如变量或函数名、数据库、数据类型、环境变量、语句和关键字。
- en: Note that when a line break falls within a `constant_width` term, a hyphen is
    not added—it could be misunderstood as part of the term.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当换行符出现在 `constant_width` 术语中时，不会添加连字符，因为它可能被误解为术语的一部分。
- en: '**`Constant width bold`**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Constant width bold`**'
- en: Shows commands or other text that should be typed literally by the user.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 显示用户应按字面意思键入的命令或其他文本。
- en: '*`Constant width italic`*'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*`Constant width italic`*'
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 显示应由用户提供的值或由上下文确定的值替换的文本。
- en: Tip
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: This element signifies a tip or suggestion.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示提示或建议。
- en: Note
  id: totrans-52
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This element signifies a general note.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示一般注释。
- en: Warning
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: This element indicates a warning or caution.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示警告或注意事项。
- en: Using Code Examples
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用代码示例
- en: Every script and most code snippets that appear in the book are available in
    the Fluent Python code repository on GitHub at [*https://fpy.li/code*](https://fpy.li/code).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 书中出现的每个脚本和大多数代码片段都可在GitHub上的Fluent Python代码仓库中找到，网址为 [*https://fpy.li/code*](https://fpy.li/code)。
- en: If you have a technical question or a problem using the code examples, please
    send email to [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有技术问题或使用代码示例的问题，请发送电子邮件至 [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com)。
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing examples
    from O’Reilly books does require permission. Answering a question by citing this
    book and quoting example code does not require permission. Incorporating a significant
    amount of example code from this book into your product’s documentation does require
    permission.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书旨在帮助你完成工作。一般来说，如果本书提供了示例代码，你可以在程序和文档中使用它。除非你要复制大量代码，否则无需联系我们征得许可。例如，编写一个使用本书多个代码片段的程序不需要许可。出售或分发O'Reilly图书中的示例需要获得许可。通过引用本书和引用示例代码来回答问题不需要许可。将本书中大量示例代码合并到你的产品文档中确实需要许可。
- en: We appreciate, but generally do not require, attribution. An attribution usually
    includes the title, author, publisher, and ISBN, e.g., “*Fluent Python*, 2nd ed.,
    by Luciano Ramalho (O’Reilly). Copyright 2022 Luciano Ramalho, 978-1-492-05635-5.”
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感谢但通常不要求注明出处。出处通常包括标题、作者、出版商和ISBN，例如："*Fluent Python*，第2版，Luciano Ramalho
    著（O'Reilly）。2022 Luciano Ramalho 版权所有，978-1-492-05635-5。"
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*permissions@oreilly.com*](mailto:permissions@oreilly.com).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为你对代码示例的使用超出了合理使用范围或上述许可范围，请随时通过 [*permissions@oreilly.com*](mailto:permissions@oreilly.com)
    与我们联系。
- en: O’Reilly Online Learning
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: O'Reilly在线学习
- en: Note
  id: totrans-63
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: '注意 '
- en: For more than 40 years, [*O’Reilly Media*](http://oreilly.com) has provided
    technology and business training, knowledge, and insight to help companies succeed.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 40多年来，[*O'Reilly Media*](http://oreilly.com) 一直在提供技术和商业培训、知识和见解，帮助企业取得成功。
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, and our online learning platform. O’Reilly’s online learning
    platform gives you on-demand access to live training courses, in-depth learning
    paths, interactive coding environments, and a vast collection of text and video
    from O’Reilly and 200+ other publishers. For more information, visit [*http://oreilly.com*](http://oreilly.com).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们独特的专家和创新者网络通过书籍、文章和我们的在线学习平台分享他们的知识和专业技能。O'Reilly的在线学习平台让你可以按需访问现场培训课程、深入学习路径、交互式编码环境，以及来自O'Reilly和其他200多家出版商的大量文本和视频。有关更多信息，请访问
    [*http://oreilly.com*](http://oreilly.com)。
- en: How to Contact Us
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何联系我们
- en: 'Please address comments and questions concerning this book to the publisher:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请将有关本书的评论和问题发送给出版商：
- en: O’Reilly Media, Inc.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: O'Reilly Media, Inc.
- en: 1005 Gravenstein Highway North
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1005 Gravenstein Highway North
- en: Sebastopol, CA 95472
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sebastopol, CA 95472
- en: 800-998-9938 (in the United States or Canada)
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 800-998-9938（美国或加拿大）
- en: 707-829-0515 (international or local)
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0515（国际或本地）
- en: 707-829-0104 (fax)
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0104（传真）
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://fpy.li/p-4*](https://fpy.li/p-4).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书有一个网页，我们在其中列出勘误表、示例和任何额外的信息。你可以通过 [*https://fpy.li/p-4*](https://fpy.li/p-4)
    访问此页面。
- en: Email [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com) to comment
    or ask technical questions about this book.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 发送电子邮件至 [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com) 以评论或询问有关本书的技术问题。
- en: For news and information about our books and courses, visit [*http://oreilly.com*](http://oreilly.com).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解我们的书籍和课程的新闻和信息，请访问 [*http://oreilly.com*](http://oreilly.com)。
- en: 'Find us on Facebook: [*http://facebook.com/oreilly*](http://facebook.com/oreilly).'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Facebook 上找到我们：[*http://facebook.com/oreilly*](http://facebook.com/oreilly)。
- en: 'Follow us on Twitter: [*https://twitter.com/oreillymedia*](https://twitter.com/oreillymedia).'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Twitter 上关注我们：[*https://twitter.com/oreillymedia*](https://twitter.com/oreillymedia)。
- en: 'Watch us on YouTube: [*http://www.youtube.com/oreillymedia*](http://www.youtube.com/oreillymedia).'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在 YouTube 上观看我们的视频：[*http://www.youtube.com/oreillymedia*](http://www.youtube.com/oreillymedia)。
- en: Acknowledgments
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 致谢
- en: I did not expect updating a Python book five years later to be such a major
    undertaking, but it was. Marta Mello, my beloved wife, was always there when I
    needed her. My dear friend Leonardo Rochael helped me from the earliest writing
    to the final technical review, including consolidating and double-checking the
    feedback from the other tech reviewers, readers, and editors. I honestly don’t
    know if I’d have made it without your support, Marta and Leo. Thank you so much!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我没想到五年后更新一本 Python 书会是如此重大的任务，但事实如此。我挚爱的妻子 Marta Mello 总是在我需要她的时候出现。我亲爱的朋友 Leonardo
    Rochael 从最早的写作到最后的技术审核都一直帮助我，包括整合和复核其他技术审核人员、读者和编辑的反馈。说实话，如果没有你们的支持，Marta 和 Leo，我不知道自己是否能做到。非常感谢你们！
- en: Jürgen Gmach, Caleb Hattingh, Jess Males, Leonardo Rochael, and Miroslav Šedivý
    were the outstanding technical review team for the second edition. They reviewed
    the whole book. Bill Behrman, Bruce Eckel, Renato Oliveira, and Rodrigo Bernardo
    Pimentel reviewed specific chapters. Their many suggestions from different perspectives
    made the book much better.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Jürgen Gmach、Caleb Hattingh、Jess Males、Leonardo Rochael 和 Miroslav Šedivý 是第二版的杰出技术审查团队。他们审阅了整本书。Bill
    Behrman、Bruce Eckel、Renato Oliveira 和 Rodrigo Bernardo Pimentel 审阅了特定章节。他们从不同角度提出的许多建议使本书变得更好。
- en: 'Many readers sent corrections or made other contributions during the early
    release phase, including: Guilherme Alves, Christiano Anderson, Konstantin Baikov,
    K. Alex Birch, Michael Boesl, Lucas Brunialti, Sergio Cortez, Gino Crecco, Chukwuerika
    Dike, Juan Esteras, Federico Fissore, Will Frey, Tim Gates, Alexander Hagerman,
    Chen Hanxiao, Sam Hyeong, Simon Ilincev, Parag Kalra, Tim King, David Kwast, Tina
    Lapine, Wanpeng Li, Guto Maia, Scott Martindale, Mark Meyer, Andy McFarland, Chad
    McIntire, Diego Rabatone Oliveira, Francesco Piccoli, Meredith Rawls, Michael
    Robinson, Federico Tula Rovaletti, Tushar Sadhwani, Arthur Constantino Scardua,
    Randal L. Schwartz, Avichai Sefati, Guannan Shen, William Simpson, Vivek Vashist,
    Jerry Zhang, Paul Zuradzki—and others who did not want to be named, sent corrections
    after I delivered the draft, or are omitted because I failed to record their names—sorry.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期发布阶段，许多读者发送了更正或做出了其他贡献，包括：Guilherme Alves、Christiano Anderson、Konstantin
    Baikov、K. Alex Birch、Michael Boesl、Lucas Brunialti、Sergio Cortez、Gino Crecco、Chukwuerika
    Dike、Juan Esteras、Federico Fissore、Will Frey、Tim Gates、Alexander Hagerman、Chen
    Hanxiao、Sam Hyeong、Simon Ilincev、Parag Kalra、Tim King、David Kwast、Tina Lapine、Wanpeng
    Li、Guto Maia、Scott Martindale、Mark Meyer、Andy McFarland、Chad McIntire、Diego Rabatone
    Oliveira、Francesco Piccoli、Meredith Rawls、Michael Robinson、Federico Tula Rovaletti、Tushar
    Sadhwani、Arthur Constantino Scardua、Randal L. Schwartz、Avichai Sefati、Guannan
    Shen、William Simpson、Vivek Vashist、Jerry Zhang、Paul Zuradzki 以及其他不愿透露姓名的人，在我交稿后发送了更正，或者因为我没有记录他们的名字而被遗漏——抱歉。
- en: During my research, I learned about typing, concurrency, pattern matching, and
    metaprogramming while interacting with Michael Albert, Pablo Aguilar, Kaleb Barrett,
    David Beazley, J. S. O. Bueno, Bruce Eckel, Martin Fowler, Ivan Levkivskyi, Alex
    Martelli, Peter Norvig, Sebastian Rittau, Guido van Rossum, Carol Willing, and
    Jelle Zijlstra.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在研究过程中，我在与 Michael Albert、Pablo Aguilar、Kaleb Barrett、David Beazley、J.S.O. Bueno、Bruce
    Eckel、Martin Fowler、Ivan Levkivskyi、Alex Martelli、Peter Norvig、Sebastian Rittau、Guido
    van Rossum、Carol Willing 和 Jelle Zijlstra 的互动中了解了类型、并发、模式匹配和元编程。
- en: O’Reilly editors Jeff Bleiel, Jill Leonard, and Amelia Blevins made suggestions
    that improved the flow of the book in many places. Jeff Bleiel and production
    editor Danny Elfanbaum supported me throughout this long marathon.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: O'Reilly 编辑 Jeff Bleiel、Jill Leonard 和 Amelia Blevins 提出的建议在许多地方改善了本书的流畅度。Jeff
    Bleiel 和制作编辑 Danny Elfanbaum 在整个漫长的马拉松中都一直支持我。
- en: The insights and suggestions of every one of them made the book better and more
    accurate. Inevitably, there will still be bugs of my own creation in the final
    product. I apologize in advance.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 他们每个人的见解和建议都让这本书变得更好、更准确。不可避免地，最终产品中仍然会有我自己制造的错误。我提前表示歉意。
- en: Finally, I want to extend my heartfelt thanks to my colleagues at Thoughtworks
    Brazil—and especially to my sponsor, Alexey Bôas—who supported this project in
    many ways, all the way.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我要向我在 Thoughtworks 巴西的同事们表示衷心的感谢，尤其是我的赞助人 Alexey Bôas，他们一直以多种方式支持这个项目。
- en: Of course, everyone who helped me understand Python and write the first edition
    now deserves double thanks. There would be no second edition without a successful
    first.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，每一个帮助我理解 Python 并编写第一版的人现在都应该得到双倍的感谢。没有成功的第一版就不会有第二版。
- en: Acknowledgments for the First Edition
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一版致谢
- en: 'The Bauhaus chess set by Josef Hartwig is an example of excellent design: beautiful,
    simple, and clear. Guido van Rossum, son of an architect and brother of a master
    font designer, created a masterpiece of language design. I love teaching Python
    because it is beautiful, simple, and clear.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Josef Hartwig 设计的包豪斯国际象棋是优秀设计的典范：美观、简洁、清晰。建筑师之子、字体设计大师之弟 Guido van Rossum 创造了一部语言设计的杰作。我喜欢教授
    Python，因为它美观、简洁、清晰。
- en: Alex Martelli and Anna Ravenscroft were the first people to see the outline
    of this book and encouraged me to submit it to O’Reilly for publication. Their
    books taught me idiomatic Python and are models of clarity, accuracy, and depth
    in technical writing. [Alex’s 6,200+ Stack Overflow posts](https://fpy.li/p-7)
    are a fountain of insights about the language and its proper use.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Alex Martelli 和 Anna Ravenscroft 是最早看到本书大纲并鼓励我将其提交给 O'Reilly 出版的人。他们的书教会了我地道的
    Python，是技术写作在清晰、准确和深度方面的典范。[Alex 在 Stack Overflow 上的 6,200 多个帖子](https://fpy.li/p-7)是语言及其正确使用方面的见解源泉。
- en: Martelli and Ravenscroft were also technical reviewers of this book, along with
    Lennart Regebro and Leonardo Rochael. Everyone in this outstanding technical review
    team has at least 15 years of Python experience, with many contributions to high-impact
    Python projects in close contact with other developers in the community. Together
    they sent me hundreds of corrections, suggestions, questions, and opinions, adding
    tremendous value to the book. Victor Stinner kindly reviewed [Chapter 21](ch21.html#async_ch),
    bringing his expertise as an `asyncio` maintainer to the technical review team.
    It was a great privilege and a pleasure to collaborate with them over these past
    several months.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Martelli 和 Ravenscroft 也是本书的技术评审，还有 Lennart Regebro 和 Leonardo Rochael。这个杰出的技术评审团队中的每个人都有至少
    15 年的 Python 经验，对与社区中其他开发人员密切联系的高影响力 Python 项目做出了许多贡献。他们一起给我发来了数百条修正、建议、问题和意见，为本书增添了巨大的价值。Victor
    Stinner 友好地审阅了[第 21 章](ch21.html#async_ch)，将他作为 `asyncio` 维护者的专业知识带到了技术评审团队中。能在过去的几个月里与他们合作，我感到非常荣幸和愉快。
- en: Editor Meghan Blanchette was an outstanding mentor, helping me improve the organization
    and flow of the book, letting me know when it was boring, and keeping me from
    delaying even more. Brian MacDonald edited chapters in [Part II](part02.html#function_objects_part)
    while Meghan was away. I enjoyed working with them, and with everyone I’ve contacted
    at O’Reilly, including the Atlas development and support team (Atlas is the O’Reilly
    book publishing platform, which I was fortunate to use to write this book).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '编辑 Meghan Blanchette 是一位杰出的导师，帮助我改进了本书的组织和流程，让我知道什么时候它变得无聊，并阻止我进一步拖延。Brian
    MacDonald 在 Meghan 不在时编辑了[第二部分](part02.html#function_objects_part)的章节。我很高兴与他们以及我在
    O''Reilly 联系过的每个人合作，包括 Atlas 开发和支持团队（Atlas 是 O''Reilly 的图书出版平台，我很幸运能使用它来写这本书）。  '
- en: Mario Domenech Goulart provided numerous, detailed suggestions starting with
    the first early release. I also received valuable feedback from Dave Pawson, Elias
    Dorneles, Leonardo Alexandre Ferreira Leite, Bruce Eckel, J. S. Bueno, Rafael
    Gonçalves, Alex Chiaranda, Guto Maia, Lucas Vido, and Lucas Brunialti.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Mario Domenech Goulart 从第一个早期版本开始就提供了大量详细的建议。我还收到了 Dave Pawson、Elias Dorneles、Leonardo
    Alexandre Ferreira Leite、Bruce Eckel、J.S. Bueno、Rafael Gonçalves、Alex Chiaranda、Guto
    Maia、Lucas Vido 和 Lucas Brunialti 的宝贵反馈。
- en: Over the years, a number of people urged me to become an author, but the most
    persuasive were Rubens Prates, Aurelio Jargas, Rudá Moura, and Rubens Altimari.
    Mauricio Bussab opened many doors for me, including my first real shot at writing
    a book. Renzo Nuccitelli supported this writing project all the way, even if that
    meant a slow start for our partnership at [*python.pro.br*](https://fpy.li/p-8).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，许多人敦促我成为一名作家，但最有说服力的是 Rubens Prates、Aurelio Jargas、Rudá Moura 和 Rubens Altimari。Mauricio
    Bussab 为我打开了许多大门，包括我第一次真正尝试写书。Renzo Nuccitelli 一路支持这个写作项目，即使这意味着我们在 [*python.pro.br*](https://fpy.li/p-8)
    的合作起步缓慢。
- en: The wonderful Brazilian Python community is knowledgeable, generous, and fun.
    [The Python Brasil group](https://fpy.li/p-9) has thousands of people, and our
    national conferences bring together hundreds, but the most influential in my journey
    as a Pythonista were Leonardo Rochael, Adriano Petrich, Daniel Vainsencher, Rodrigo
    RBP Pimentel, Bruno Gola, Leonardo Santagada, Jean Ferri, Rodrigo Senra, J. S.
    Bueno, David Kwast, Luiz Irber, Osvaldo Santana, Fernando Masanori, Henrique Bastos,
    Gustavo Niemayer, Pedro Werneck, Gustavo Barbieri, Lalo Martins, Danilo Bellini,
    and Pedro Kroger.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 美妙的巴西 Python 社区知识渊博、慷慨大方、充满乐趣。[Python Brasil 小组](https://fpy.li/p-9)有数千人，我们的全国会议汇聚了数百人，但在我的
    Pythonista 旅程中最具影响力的是 Leonardo Rochael、Adriano Petrich、Daniel Vainsencher、Rodrigo
    RBP Pimentel、Bruno Gola、Leonardo Santagada、Jean Ferri、Rodrigo Senra、 J.S. Bueno、David
    Kwast、Luiz Irber、Osvaldo Santana、Fernando Masanori、Henrique Bastos、Gustavo Niemayer、Pedro
    Werneck、Gustavo Barbieri、Lalo Martins、Danilo Bellini 和 Pedro Kroger。
- en: Dorneles Tremea was a great friend (incredibly generous with his time and knowledge),
    an amazing hacker, and the most inspiring leader of the Brazilian Python Association.
    He left us too early.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Dorneles Tremea 是一位伟大的朋友（他慷慨地奉献时间和知识），一位了不起的黑客，也是巴西 Python 协会最鼓舞人心的领导者。他离开得太早了。
- en: My students over the years taught me a lot through their questions, insights,
    feedback, and creative solutions to problems. Érico Andrei and Simples Consultoria
    made it possible for me to focus on being a Python teacher for the first time.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，我的学生通过他们的提问、见解、反馈和创造性的问题解决方案教会了我很多东西。Érico Andrei 和 Simples Consultoria
    让我第一次能够专注于当一名 Python 老师。
- en: Martijn Faassen was my Grok mentor and shared invaluable insights with me about
    Python and Neanderthals. His work and that of Paul Everitt, Chris McDonough, Tres
    Seaver, Jim Fulton, Shane Hathaway, Lennart Regebro, Alan Runyan, Alexander Limi,
    Martijn Pieters, Godefroid Chapelle, and others from the Zope, Plone, and Pyramid
    planets have been decisive in my career. Thanks to Zope and surfing the first
    web wave, I was able to start making a living with Python in 1998\. José Octavio
    Castro Neves was my partner in the first Python-centric software house in Brazil.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Martijn Faassen 是我的 Grok 导师，与我分享了关于 Python 和尼安德特人的宝贵见解。他以及 Paul Everitt、Chris
    McDonough、Tres Seaver、Jim Fulton、Shane Hathaway、Lennart Regebro、Alan Runyan、Alexander
    Limi、Martijn Pieters、Godefroid Chapelle 等来自 Zope、Plone 和 Pyramid 星球的人的工作对我的职业生涯起到了决定性作用。多亏了
    Zope 和冲浪第一波网络浪潮，我能够从 1998 年开始以 Python 谋生。José Octavio Castro Neves 是我在巴西第一家以 Python
    为中心的软件公司的合伙人。
- en: I have too many gurus in the wider Python community to list them all, but besides
    those already mentioned, I am indebted to Steve Holden, Raymond Hettinger, A.M.
    Kuchling, David Beazley, Fredrik Lundh, Doug Hellmann, Nick Coghlan, Mark Pilgrim,
    Martijn Pieters, Bruce Eckel, Michele Simionato, Wesley Chun, Brandon Craig Rhodes,
    Philip Guo, Daniel Greenfeld, Audrey Roy, and Brett Slatkin for teaching me new
    and better ways to teach Python.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在更广泛的 Python 社区中，我有太多的大师无法一一列举，但除了已经提到的那些，我还要感谢 Steve Holden、Raymond Hettinger、A.M.
    Kuchling、David Beazley、Fredrik Lundh、Doug Hellmann、Nick Coghlan、Mark Pilgrim、Martijn
    Pieters、Bruce Eckel、Michele Simionato、Wesley Chun、Brandon Craig Rhodes、Philip
    Guo、Daniel Greenfeld、Audrey Roy 和 Brett Slatkin，感谢他们教会我新的更好的 Python 教学方式。
- en: 'Most of these pages were written in my home office and in two labs: CoffeeLab
    and Garoa Hacker Clube. [CoffeeLab](https://fpy.li/p-10) is the caffeine-geek
    headquarters in Vila Madalena, São Paulo, Brazil. [Garoa Hacker Clube](https://fpy.li/p-11)
    is a hackerspace open to all: a community lab where anyone can freely try out
    new ideas.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这些页面大部分是在我的家庭办公室和两个实验室写的：CoffeeLab 和 Garoa Hacker Clube。[CoffeeLab](https://fpy.li/p-10)
    是位于巴西圣保罗 Vila Madalena 的咖啡因极客总部。[Garoa Hacker Clube](https://fpy.li/p-11) 是一个向所有人开放的黑客空间：一个社区实验室，任何人都可以自由尝试新想法。
- en: The Garoa community provided inspiration, infrastructure, and slack. I think
    Aleph would enjoy this book.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Garoa 社区提供了灵感、基础设施和宽松的环境。我想 Aleph 会喜欢这本书。
- en: My mother, Maria Lucia, and my father, Jairo, always supported me in every way.
    I wish he was here to see the book; I am glad I can share it with her.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我的母亲 Maria Lucia 和父亲 Jairo 总是全力支持我。我希望他能在这里看到这本书，我很高兴能与她分享。
- en: My wife, Marta Mello, endured 15 months of a husband who was always working,
    but remained supportive and coached me through some critical moments in the project
    when I feared I might drop out of the marathon.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我的妻子 Marta Mello 忍受了 15 个月总是在工作的丈夫，但她仍然保持支持，并在我担心可能会退出这个马拉松项目的一些关键时刻给予我指导。
- en: Thank you all, for everything.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 谢谢你们，感谢一切。
- en: '^([1](preface01.html#idm46582510969104-marker)) Message to the comp.lang.python
    Usenet group, Dec. 23, 2002: [“Acrimony in c.l.p”](https://fpy.li/p-1).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](preface01.html#idm46582510969104-marker)) 2002年12月23日在 comp.lang.python
    Usenet 小组的留言："[Acrimony in c.l.p](https://fpy.li/p-1)"。
