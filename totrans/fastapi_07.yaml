- en: Chapter 5\. Pydantic, Type Hints, and Models Tour
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章. Pydantic、类型提示和模型之旅
- en: Data validation and settings management using Python type hints.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用 Python 类型提示进行数据验证和设置管理。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Fast and extensible, Pydantic plays nicely with your linters/IDE/brain. Define
    how data should be in pure, canonical Python 3.6+; validate it with Pydantic.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 快速且可扩展，Pydantic 与您的 linters/IDE/大脑完美配合。使用纯粹、规范的 Python 3.6+ 定义数据，然后用 Pydantic
    进行验证。
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Samuel Colvin, developer of Pydantic
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Samuel Colvin，Pydantic 的开发者
- en: Preview
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预览
- en: FastAPI stands largely on a Python package called Pydantic. This uses *models*
    (Python object classes) to define data structures. These are heavily used in FastAPI
    applications and are a real advantage when writing larger applications.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 主要依赖于一个名为 Pydantic 的 Python 包。它使用*模型*（Python 对象类）来定义数据结构。在编写更大型应用程序时，这些在
    FastAPI 应用中广泛使用，并且是一个真正的优势。
- en: Type Hinting
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型提示
- en: It’s time to learn a little more about Python *type hints*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候了解更多关于 Python *类型提示* 的内容了。
- en: '[Chapter 2](ch02.html#ch02) mentioned that, in many computer languages, a variable
    points directly to a value in memory. This requires the programmer to declare
    its type, so the size and bits of the value can be determined. In Python, variables
    are just names associated with objects, and it’s the objects that have types.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 2 章](ch02.html#ch02) 提到，在许多计算机语言中，变量直接指向内存中的值。这要求程序员声明其类型，以确定值的大小和位数。在 Python
    中，变量只是与对象相关联的名称，而对象才有类型。'
- en: In standard programming, a variable is usually associated with the same object.
    If we associate a type hint with that variable, we can avoid some programming
    mistakes. So Python added type hinting to the language, in the standard typing
    module. The Python interpreter ignores the type hint syntax and runs the program
    as though it isn’t there. Then what’s the point?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在标准编程中，变量通常与相同的对象相关联。如果我们为该变量关联一个类型提示，我们可以避免一些编程错误。因此，Python 在语言中添加了类型提示，位于标准
    typing 模块中。Python 解释器会忽略类型提示语法，并将程序运行为若不存在一样。那么，它的意义何在？
- en: You might treat a variable as a string in one line, and forget later and assign
    it an object of a different type. Although compilers for other languages would
    complain, Python won’t. The standard Python interpreter will catch normal syntax
    errors and runtime exceptions, but not mixing types for a variable. Helper tools
    like mypy pay attention to type hints and warn you about any mismatches.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能在一行中将变量视为字符串，但后来忘记了，并将其分配给不同类型的对象。虽然其他语言的编译器会抱怨，但 Python 不会。标准 Python 解释器将捕获常规语法错误和运行时异常，但不会检查变量类型的混合。像
    mypy 这样的辅助工具会关注类型提示，并警告您任何不匹配的情况。
- en: Also, the hints are available to Python developers, who can write tools that
    do more than type error checking. The following sections describe how the Pydantic
    package was developed to address needs that weren’t obvious. Later, you’ll see
    how its integration with FastAPI makes a lot of web development issues much easier
    to handle.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Python 开发者可以利用提示，编写超越类型错误检查的工具。接下来的部分将描述 Pydantic 包的开发过程，以解决一些不太明显的需求。稍后，您将看到它与
    FastAPI 的集成，大大简化了许多 Web 开发问题的处理。
- en: By the way, what do type hints look like? There’s one syntax for variables and
    another for function return values.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，类型提示是什么样的？变量有一种语法，函数返回值有另一种语法。
- en: 'Variable type hints may include only the type:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 变量类型提示可能仅包括类型：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'or also initialize the variable with a value:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 或者初始化变量并赋予一个值：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The *type* can be one of the standard Python simple types like `int` or `str`,
    or collection types like `tuple`, `list`, or `dict`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*类型* 可以是标准的 Python 简单类型，如 `int` 或 `str`，也可以是集合类型，如 `tuple`、`list` 或 `dict`：'
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Before Python 3.9, you need to import capitalized versions of these standard
    type names from the typing module:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 3.9 之前，您需要从 typing 模块导入这些标准类型名称的大写版本：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here are some examples with initializations:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些初始化的示例：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can also include subtypes of collections:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以包含集合的子类型：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The typing module has useful extras for subtypes; the most common are as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: typing 模块对子类型有有用的额外功能；最常见的如下：
- en: '`Any`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`Any`'
- en: Any type
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 任何类型
- en: '`Union`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`Union`'
- en: Any type of those specified, such as `Union[str, int]`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 任何指定的类型，比如 `Union[str, int]`。
- en: Note
  id: totrans-33
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In Python 3.10 and up, you can say `*type1* | *type2*` instead of `Union[*type1*,
    *type2*]`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 3.10 及以上版本中，您可以使用 `*type1* | *type2*` 而不是 `Union[*type1*, *type2*]`。
- en: 'Examples of Pydantic definitions for a Python `dict` include the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Python `dict` 的 Pydantic 定义示例如下：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Or, a little more specific:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，稍微具体一点：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'or (Python 3.10 and up):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 或（Python 3.10 及以上版本）：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Notice that a type-hinted variable line is legal Python, but a bare variable
    line is not:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，类型提示的变量行是合法的 Python 语法，但裸变量行不是：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Also, incorrect type uses are not caught by the regular Python interpreter:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，正常的 Python 解释器无法捕捉到错误的类型使用：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'But they will be caught by mypy. If you don’t already have it, run `pip install
    mypy`. Save those two preceding lines to a file called *stuff.py*,^([1](ch05.html#id541))
    and then try this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 但它们将被 mypy 捕获。如果您尚未安装它，请运行 `pip install mypy`。将这两行保存到一个名为 *stuff.py* 的文件中，^([1](ch05.html#id541))，然后尝试这样做：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'A function return type hint uses an arrow instead of a colon:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 函数返回类型提示使用箭头而不是冒号：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here’s a Pydantic example of a function return:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个 Pydantic 函数返回的示例：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can use any type, including classes that you’ve defined or combinations
    of them. You’ll see that in a few pages.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用任何类型，包括您定义的类或它们的组合。您将在几页中看到这一点。
- en: Data Grouping
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据分组
- en: Often we need to keep a related group of variables together rather than passing
    around lots of individual variables. How do we integrate multiple variables as
    a group and keep the type hints?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们需要将一组相关的变量放在一起，而不是传递许多单独的变量。我们如何将多个变量作为一组集成，并保留类型提示？
- en: 'Let’s leave behind our tepid greeting example from previous chapters and start
    using richer data from now on. As in the rest of this book, we’ll use examples
    of *cryptids* (imaginary creatures) and the (also imaginary) explorers who seek
    them. Our initial cryptid definitions will include only string variables for the
    following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们抛开前几章中单调的问候例子，从现在开始使用更丰富的数据。就像本书的其余部分一样，我们将使用*神秘动物*（虚构的生物）的例子，以及（同样虚构的）探险家。我们的初始神秘动物定义仅包含以下字符串变量：
- en: '`name`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`'
- en: Key
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 键
- en: '`country`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`country`'
- en: Two-character ISO country code (3166-1 alpha 2) or `*` = all
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 两个字符的 ISO 国家代码（3166-1 alpha 2）或 `*` = all
- en: '`area`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`area`'
- en: Optional; United States state or other country subdivision
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 可选；美国州或其他国家的分区
- en: '`description`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`description`'
- en: Free-form
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 自由格式
- en: '`aka`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`aka`'
- en: Also known as…​
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 也称为…​
- en: 'And explorers will have the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 探险家将拥有以下内容：
- en: '`name`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`'
- en: Key
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 键
- en: '`country`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`country`'
- en: Two-character ISO country code
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 两个字符的 ISO 国家代码
- en: '`description`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`description`'
- en: Free-form
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 自由格式
- en: 'Python’s historic data grouping structures (beyond the basic `int`, `string`,
    and such) are listed here:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的历史数据分组结构（超出基本的 `int`、`string` 等）在这里列出：
- en: '`tuple`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`tuple`'
- en: An immutable sequence of objects
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一个不可变的对象序列
- en: '`list`'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`list`'
- en: A mutable sequence of objects
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可变的对象序列
- en: '`set`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`set`'
- en: Mutable distinct objects
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 可变的不同对象
- en: '`dict`'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`dict`'
- en: Mutable key-value object pairs (the key needs to be of an immutable type)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 可变的键-值对象对（键必须是不可变类型）
- en: Tuples ([Example 5-1](#ex-5-1)) and lists ([Example 5-2](#ex-5-2)) let you access
    a member variable only by its offset, so you have to remember what went where.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 元组（[示例 5-1](#ex-5-1)）和列表（[示例 5-2](#ex-5-2)）仅允许您通过其偏移访问成员变量，因此您必须记住每个位置的内容。
- en: Example 5-1\. Using a tuple
  id: totrans-82
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-1\. 使用元组
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Example 5-2\. Using a list
  id: totrans-84
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-2\. 使用列表
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[Example 5-3](#ex-5-3) shows that you can get a little more explanatory by
    defining names for the integer offsets.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 5-3](#ex-5-3) 表明，通过为整数偏移定义名称，您可以得到更详细的解释。'
- en: Example 5-3\. Using tuples and named offsets
  id: totrans-87
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-3\. 使用元组和命名偏移
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Dictionaries are a little better in [Example 5-4](#ex-5-4), giving you access
    by descriptive keys.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [示例 5-4](#ex-5-4) 中，字典更好一些，可以通过描述性键访问。
- en: Example 5-4\. Using a dictionary
  id: totrans-90
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-4\. 使用字典
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Sets contain only unique values, so they’re not very helpful for clustering
    various variables.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 集合仅包含唯一值，因此对于聚类不是非常有用。
- en: In [Example 5-5](#ex-5-5), a *named tuple* is a tuple that gives you access
    by integer offset *or* name.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [示例 5-5](#ex-5-5) 中，*命名元组* 是一个可以通过整数偏移或名称访问的元组。
- en: Example 5-5\. Using a named tuple
  id: totrans-94
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-5\. 使用命名元组
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-96
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You can’t say `namedtuple_thing["name"]`. It’s a `tuple`, not a `dict`, so the
    index needs to be an integer.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您不能说 `namedtuple_thing["name"]`。它是一个 `tuple`，而不是一个 `dict`，所以索引需要是一个整数。
- en: '[Example 5-6](#ex-5-6) defines a new Python `class` and adds all the attributes
    with `self`. But you’ll need to do a lot of typing just to define them.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 5-6](#ex-5-6) 定义了一个新的 Python `class`，并添加了所有属性与 `self`。但您需要大量键入才能定义它们。'
- en: Example 5-6\. Using a standard class
  id: totrans-99
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-6\. 使用标准类
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-101
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You might think, what’s so bad about that? With a regular class, you can add
    more data (attributes), but especially behavior (methods). You might decide, one
    madcap day, to add a method that looks up an explorer’s favorite songs. (This
    wouldn’t apply to a creature.^([2](ch05.html#id551))) But the use case here is
    just to move a clump of data undisturbed among the layers, and to validate on
    the way in and out. Also, methods are square pegs that would struggle to fit in
    the round holes of a database.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，没什么大不了的？使用常规类，你可以添加更多数据（属性），但特别是行为（方法）。你可能会在一个疯狂的日子里决定添加一个查找探险者最爱歌曲的方法。（这不适用于某些生物。^([2](ch05.html#id551)))但这里的用例只是为了在各层之间无干扰地移动一堆数据，并在进出时进行验证。同时，方法是方形的钉子，会在数据库的圆孔中挣扎着不合适。
- en: Does Python have anything similar to what other computer languages call a *record*
    or a *struct* (a group of names and values)? A recent addition to Python is the
    *dataclass*. [Example 5-7](#ex-5-7) shows how all that `self` stuff disappears
    with dataclasses.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Python有没有类似于其他计算机语言所说的*记录*或*结构体*（一组名称和值）？Python的一个新特性是*数据类*。[示例5-7](#ex-5-7)展示了在数据类中，所有的`self`内容如何消失。
- en: Example 5-7\. Using a dataclass
  id: totrans-104
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例5-7\. 使用数据类
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This is pretty good for the keeping-variables-together part. But we want more,
    so let’s ask Santa for these:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于保持变量在一起的部分相当不错。但我们想要更多，所以让我们向圣诞老人要这些：
- en: A *union* of possible alternative types
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可能的替代类型的*联合*
- en: Missing/optional values
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺失/可选值
- en: Default values
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认值
- en: Data validation
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据验证
- en: Serialization to and from formats like JSON
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 序列化为和从JSON等格式
- en: Alternatives
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替代方案
- en: 'It’s tempting to use Python’s built-in data structures, especially dictionaries.
    But you’ll inevitably find that dictionaries are a bit too “loose.” Freedom comes
    at a price. You need to check *everything*:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python的内置数据结构，特别是字典，是很有吸引力的。但你最终会发现字典有点太“松散”。自由是有代价的。你需要检查*所有的*：
- en: Is the key optional?
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键是可选的吗？
- en: If the key is missing, is there a default value?
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果键缺失，是否有默认值？
- en: Does the key exist?
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键是否存在？
- en: If so, is the key’s value of the right type?
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是，键的值是正确的类型吗？
- en: If so, is the value in the right range or matching a pattern?
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是，值是否在正确的范围内或匹配某个模式？
- en: 'At least three solutions address at least some of these requirements:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 至少有三个解决方案至少解决了一些这些要求：
- en: '[Dataclasses](https://oreil.ly/mxANA)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据类](https://oreil.ly/mxANA)'
- en: Part of standard Python.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Python的标准部分。
- en: '[attrs](https://www.attrs.org)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[attrs](https://www.attrs.org)'
- en: Third party, but a superset of dataclasses.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 第   第三方，但比数据类更加完善。
- en: '[Pydantic](https://docs.pydantic.dev)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[Pydantic](https://docs.pydantic.dev)'
- en: Also third party, but integrated into FastAPI, so an easy choice if you’re already
    using FastAPI. And if you’re reading this book, that’s likely.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 也是第三方，但已集成到FastAPI中，如果你已经在使用FastAPI，这是一个容易的选择。如果你正在阅读这本书，那很可能是这样。
- en: A handy comparison of the three is on [YouTube](https://oreil.ly/pkQD3). One
    takeaway is that Pydantic stands out for validation, and its integration with
    FastAPI catches many potential data errors. Another is that Pydantic relies on
    inheritance (from the `BaseModel` class), and the other two use Python decorators
    to define their objects. This is more a matter of style.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 三者的一个方便比较在[YouTube](https://oreil.ly/pkQD3)上。一个结论是Pydantic在验证方面脱颖而出，并且与FastAPI的集成捕捉了许多潜在的数据错误。另一个是Pydantic依赖于继承（从`BaseModel`类），而其他两个使用Python装饰器来定义它们的对象。这更像是风格问题。
- en: In [another comparison](https://oreil.ly/gU28a), Pydantic outperformed older
    validation packages like [marshmallow](https://marshmallow.readthedocs.io) and
    the intriguingly named [Voluptuous](https://github.com/alecthomas/voluptuous).
    Another big plus for Pydantic is that it uses standard Python type hint syntax;
    older libraries pre-dated type hints and rolled their own.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在[另一项比较](https://oreil.ly/gU28a)中，Pydantic在[marshmallow](https://marshmallow.readthedocs.io)和令人着迷的[Voluptuous](https://github.com/alecthomas/voluptuous)这样的旧验证包上表现更优。Pydantic的另一个大优点是它使用标准的Python类型提示语法；旧的库在类型提示出现之前就已经存在，并自己开发了类型提示。
- en: So I’m going with Pydantic in this book, but you may find uses for either of
    the alternatives if you’re not using FastAPI.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我在这本书中选择使用Pydantic，但如果你没有使用FastAPI，你可能会找到这两个替代方案的用法。
- en: 'Pydantic provides ways to specify any combination of these checks:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Pydantic提供了指定任何组合这些检查的方法：
- en: Required versus optional
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必需与可选
- en: Default value if unspecified but required
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未指定但必需的默认值
- en: The data type or types expected
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预期的数据类型或类型
- en: Value range restrictions
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值范围限制
- en: Other function-based checks if needed
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他基于函数的检查（如有需要）。
- en: Serialization and deserialization
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 序列化和反序列化
- en: A Simple Example
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个简单的示例
- en: You’ve seen how to feed a simple string to a web endpoint via the URL, a query
    parameter, or the HTTP body. The problem is that you usually request and receive
    groups of data, of many types. That’s where Pydantic models first appear in FastAPI.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到如何通过 URL、查询参数或 HTTP 主体向 Web 端点提供简单的字符串。问题在于，通常请求和接收多种类型的数据组。这就是 Pydantic
    模型首次出现在 FastAPI 中的地方。
- en: 'This initial example will use three files:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 此初始示例将使用三个文件：
- en: '*model.py* defines a Pydantic model.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*model.py* 定义了一个 Pydantic 模型。'
- en: '*data.py* is a fake data source, defining an instance of a model.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*data.py* 是一个虚假数据源，定义了一个模型实例。'
- en: '*web.py* defines a FastAPI web endpoint that returns the fake data.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*web.py* 定义了一个 FastAPI Web 端点，返回虚假数据。'
- en: For simplicity in this chapter, let’s keep all the files in the same directory.
    In later chapters that discuss larger websites, we’ll separate them into their
    respective layers. First, define the *model* for a creature in [Example 5-8](#ex-5-8).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，在本章中，让我们将所有文件放在同一个目录中。在讨论更大网站的后续章节中，我们将把它们分开放置到各自的层中。首先，在 [Example 5-8](#ex-5-8)
    中定义一个 *model* 用于一个生物。
- en: 'Example 5-8\. Define a creature model: model.py'
  id: totrans-143
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 5-8\. 定义一个生物模型：model.py
- en: '[PRE21]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `Creature` class inherits from Pydantic’s `BaseModel`. That `: str` part
    after `name`, `country`, `area`, `description`, and `aka` is a type hint that
    each is a Python string.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`Creature` 类继承自 Pydantic 的 `BaseModel`。`: str` 在 `name`、`country`、`area`、`description`
    和 `aka` 后面是类型提示，表示每个都是 Python 字符串。'
- en: Note
  id: totrans-146
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In this example, all fields are required. In Pydantic, if `Optional` is not
    in the type description, the field must have a value.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，所有字段都是必需的。在 Pydantic 中，如果类型描述中没有 `Optional`，则字段必须具有值。
- en: In [Example 5-9](#ex-5-9), pass the arguments in any order if you include their
    names.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [Example 5-9](#ex-5-9) 中，如果包括它们的名称，则参数可以按任意顺序传递。
- en: Example 5-9\. Create a creature
  id: totrans-149
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 5-9\. 创建一个生物
- en: '[PRE22]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: For now, [Example 5-10](#ex-5-10) defines a teeny source of data; in later chapters,
    databases will do this. The type hint `list[Creature]` tells Python that this
    is a list of `Creature` objects only.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，[Example 5-10](#ex-5-10) 定义了一个数据的小来源；在后续章节中，数据库将执行此操作。类型提示 `list[Creature]`
    告诉 Python 这是一个 `Creature` 对象列表。
- en: Example 5-10\. Define fake data in data.py
  id: totrans-152
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 5-10\. 在 data.py 中定义虚假数据
- en: '[PRE23]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: (We’re using `"*"` for Bigfoot’s `area` because he’s almost everywhere.)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: （因为大脚几乎无处不在，我们在 `"*"` 处使用 Bigfoot 的 `area`。）
- en: This code imports the *model.py* that we just wrote. It does a little data hiding
    by calling its list of `Creature` objects `_creatures`, and providing the `get_creatures()`
    function to return them.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码导入了我们刚刚编写的 *model.py*。它通过调用 `_creatures` 的 `Creature` 对象列表来进行一些数据隐藏，并提供 `get_creatures()`
    函数来返回它们。
- en: '[Example 5-11](#ex-5-11) lists *web.py*, a file that defines a FastAPI web
    endpoint.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[Example 5-11](#ex-5-11) 列出了 *web.py*，一个定义 FastAPI Web 端点的文件。'
- en: 'Example 5-11\. Define a FastAPI web endpoint: web.py'
  id: totrans-157
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 5-11\. 定义一个 FastAPI Web 端点：web.py
- en: '[PRE24]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now fire up this one-endpoint server in [Example 5-12](#ex-5-12).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 [Example 5-12](#ex-5-12) 中启动此单端点服务器。
- en: Example 5-12\. Start Uvicorn
  id: totrans-160
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 5-12\. 启动 Uvicorn
- en: '[PRE25]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In another window, [Example 5-13](#ex-5-13) accesses the web application with
    the HTTPie web client (try your browser or the Requests module if you like too).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个窗口中，[Example 5-13](#ex-5-13) 使用 HTTPie Web 客户端访问 Web 应用程序（如果喜欢也可以尝试浏览器或
    Requests 模块）。
- en: Example 5-13\. Test with HTTPie
  id: totrans-163
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 5-13\. 使用 HTTPie 进行测试
- en: '[PRE26]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: FastAPI and Starlette automatically convert the original `Creature` model object
    list into a JSON string. This is the default output format in FastAPI, so we don’t
    need to specify it.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 和 Starlette 自动将原始 `Creature` 模型对象列表转换为 JSON 字符串。这是 FastAPI 中的默认输出格式，因此我们无需指定它。
- en: 'Also, the window in which you originally started the Uvicorn web server should
    have printed a log line:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你最初启动 Uvicorn Web 服务器的窗口应该打印了一行日志：
- en: '[PRE27]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Validate Types
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证类型
- en: 'The previous section showed how to do the following:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 前一节展示了如何执行以下操作：
- en: Apply type hints to variables and functions
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将类型提示应用于变量和函数
- en: Define and use a Pydantic model
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义和使用 Pydantic 模型
- en: Return a list of models from a data source
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据源返回模型列表
- en: Return the model list to a web client, automatically converting the model list
    to JSON
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将模型列表返回给 Web 客户端，自动将模型列表转换为 JSON
- en: Now, let’s really put it to work validating data.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们真正开始验证数据工作。
- en: Try assigning a value of the wrong type to one or more of the `Creature` fields.
    Let’s use a standalone test for this (Pydantic doesn’t apply on any web code;
    it’s a data thing).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试将错误类型的值分配给一个或多个 `Creature` 字段。让我们使用一个独立的测试来进行测试（Pydantic 不适用于任何 Web 代码；它是一个数据处理工具）。
- en: '[Example 5-14](#ex-5-14) lists *test1.py*.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '[Example 5-14](#ex-5-14) 列出了 *test1.py*。'
- en: Example 5-14\. Test the Creature model
  id: totrans-177
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-14\. 测试 Creature 模型
- en: '[PRE28]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now try the test in [Example 5-15](#ex-5-15).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在 [示例 5-15](#ex-5-15) 中尝试测试。
- en: Example 5-15\. Run the test
  id: totrans-180
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-15\. 运行测试
- en: '[PRE29]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This finds that we’ve assigned a list of strings to the `description` field,
    and it wants a plain old string.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 发现我们已经将字符串列表分配给 `description` 字段，但它希望是一个普通的字符串。
- en: Validate Values
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证值
- en: 'Even if the value’s type matches its specification in the `Creature` class,
    more checks may need to pass. Some restrictions can be placed on the value itself:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 即使值的类型与其在 `Creature` 类中的规格相匹配，可能仍需要通过更多检查。一些限制可以放置在值本身上：
- en: 'Integer (`conint`) or float:'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数（`conint`）或浮点数：
- en: '`gt`'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`gt`'
- en: Greater than
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大于
- en: '`lt`'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`lt`'
- en: Less than
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小于
- en: '`ge`'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ge`'
- en: Greater than or equal to
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大于或等于
- en: '`le`'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`le`'
- en: Less than or equal to
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小于或等于
- en: '`multiple_of`'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`multiple_of`'
- en: An integer multiple of a value
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值的整数倍
- en: 'String (`constr`):'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串（`constr`）：
- en: '`min_length`'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`min_length`'
- en: Minimum character (not byte) length
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最小字符（非字节）长度
- en: '`max_length`'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`max_length`'
- en: Maximum character length
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最大字符长度
- en: '`to_upper`'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`to_upper`'
- en: Convert to uppercase
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 转换为大写
- en: '`to_lower`'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`to_lower`'
- en: Convert to lowercase
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 转换为小写
- en: '`regex`'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`regex`'
- en: Match a Python regular expression
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匹配 Python 正则表达式
- en: 'Tuple, list, or set:'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元组、列表或集合：
- en: '`min_items`'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`min_items`'
- en: Minimum number of elements
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最小元素数量
- en: '`max_items`'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`max_items`'
- en: Maximum number of elements
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最大元素数量
- en: These are specified in the type parts of the model.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这些在模型的类型部分指定。
- en: '[Example 5-16](#ex-5-16) ensures that the `name` field is always at least two
    characters long. Otherwise, `""` (an empty string) is a valid string.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 5-16](#ex-5-16) 确保 `name` 字段始终至少为两个字符长。否则，`""`（空字符串）是有效的字符串。'
- en: Example 5-16\. See a validation failure
  id: totrans-214
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-16\. 查看验证失败
- en: '[PRE30]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: That `constr` means a *constrained string*. [Example 5-17](#ex-5-17) uses an
    alternative, the Pydantic `Field` specification.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`constr` 意味着*受限字符串*。 [示例 5-17](#ex-5-17) 使用另一种方式，即 Pydantic 的 `Field` 规范。'
- en: Example 5-17\. Another validation failure, using `Field`
  id: totrans-217
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-17\. 另一个验证失败，使用 `Field`
- en: '[PRE31]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: That `...` argument to `Field()` means that a value is required, and that there’s
    no default value.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`...` 参数传递给 `Field()` 意味着需要一个值，并且没有默认值。'
- en: This is a minimal introduction to Pydantic. The main takeaway is that it lets
    you automate the validation of your data. You’ll see how useful this is when getting
    data from either the Web or Data layers.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Pydantic 的简要介绍。主要的收获是它允许您自动验证数据。当从 Web 或数据层获取数据时，您将看到这是多么有用。
- en: Review
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾
- en: 'Models are the best way to define data that will be passed around in your web
    application. Pydantic leverages Python’s *type hints* to define data models to
    pass around in your application. Coming next: defining *dependencies* to separate
    specific details from your general code.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 Web 应用程序中传递的最佳数据定义方式是模型。Pydantic 利用 Python 的*类型提示*来定义在应用程序中传递的数据模型。接下来是：定义*依赖项*以将特定细节与通用代码分离。
- en: ^([1](ch05.html#id541-marker)) Do I have any detectable imagination? Hmm…​no.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch05.html#id541-marker)) 我有任何可察觉的想象力吗？嗯……没有。
- en: ^([2](ch05.html#id551-marker)) Except that small group of yodeling yetis (a
    good name for a band).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch05.html#id551-marker)) 除了那些尖叫的雪人小团体（一个乐队的好名字）。
