["```py\n>>> import math\n>>> math.pi\n>>> 3.141592653589793\n>>> math.e\n2.718281828459045\n```", "```py\n>>> math.fabs(98.6)\n98.6\n>>> math.fabs(-271.1)\n271.1\n```", "```py\n>>> math.floor(98.6)\n98\n>>> math.floor(-271.1)\n-272\n>>> math.ceil(98.6)\n99\n>>> math.ceil(-271.1)\n-271\n```", "```py\n>>> math.factorial(0)\n1\n>>> math.factorial(1)\n1\n>>> math.factorial(2)\n2\n>>> math.factorial(3)\n6\n>>> math.factorial(10)\n3628800\n```", "```py\n>>> math.log(1.0)\n0.0\n>>> math.log(math.e)\n1.0\n```", "```py\n>>> math.log(8, 2)\n3.0\n```", "```py\n>>> math.pow(2, 3)\n8.0\n```", "```py\n>>> 2**3\n8\n>>> 2.0**3\n8.0\n```", "```py\n>>> math.sqrt(100.0)\n10.0\n```", "```py\n>>> math.sqrt(-100.0)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: math domain error\n```", "```py\n>>> x = 3.0\n>>> y = 4.0\n>>> math.hypot(x, y)\n5.0\n```", "```py\n>>> math.sqrt(x*x + y*y)\n5.0\n>>> math.sqrt(x**2 + y**2)\n5.0\n```", "```py\n>>> math.radians(180.0)\n3.141592653589793\n>>> math.degrees(math.pi)\n180.0\n```", "```py\n>>> # a real number\n... 5\n5\n>>> # an imaginary number\n... 8j\n8j\n>>> # an imaginary number\n... 3 + 2j\n(3+2j)\n```", "```py\n>>> 1j * 1j\n(-1+0j)\n>>> (7 + 1j) * 1j\n(-1+7j)\n```", "```py\n>>> x = 10.0 / 3.0\n>>> x\n3.3333333333333335\n```", "```py\n>>> from decimal import Decimal\n>>> price = Decimal('19.99')\n>>> tax = Decimal('0.06')\n>>> total = price + (price * tax)\n>>> total\nDecimal('21.1894')\n```", "```py\n>>> penny = Decimal('0.01')\n>>> total.quantize(penny)\nDecimal('21.19')\n```", "```py\n>>> from fractions import Fraction\n>>> Fraction(1,  3) * Fraction(2, 3)\nFraction(2, 9)\n```", "```py\n>>> Fraction(1.0/3.0)\nFraction(6004799503160661, 18014398509481984)\n>>> Fraction(Decimal('1.0')/Decimal('3.0'))\nFraction(3333333333333333333333333333, 10000000000000000000000000000)\n```", "```py\n>>> import fractions\n>>> fractions.gcd(24, 16)\n8\n```", "```py\n>>> b = np.array( [2, 4, 6, 8] )\n>>> b\narray([2, 4, 6, 8])\n```", "```py\n>>> b.ndim\n1\n```", "```py\n>>> b.size\n4\n```", "```py\n>>> b.shape\n(4,)\n```", "```py\n>>> import numpy as np\n>>> a = np.arange(10)\n>>> a\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> a.ndim\n1\n>>> a.shape\n(10,)\n>>> a.size\n10\n```", "```py\n>>> a = np.arange(7, 11)\n>>> a\narray([ 7,  8,  9, 10])\n```", "```py\n>>> a = np.arange(7, 11, 2)\n>>> a\narray([7, 9])\n```", "```py\n>>> f = np.arange(2.0, 9.8, 0.3)\n>>> f\narray([ 2\\. ,  2.3,  2.6,  2.9,  3.2,  3.5,  3.8,  4.1,  4.4,  4.7,  5\\. ,\n 5.3,  5.6,  5.9,  6.2,  6.5,  6.8,  7.1,  7.4,  7.7,  8\\. ,  8.3,\n 8.6,  8.9,  9.2,  9.5,  9.8])\n```", "```py\n>>> g = np.arange(10, 4, -1.5, dtype=np.float)\n>>> g\narray([ 10\\. ,   8.5,   7\\. ,   5.5])\n```", "```py\n>>> a = np.zeros((3,))\n>>> a\narray([ 0.,  0.,  0.])\n>>> a.ndim\n1\n>>> a.shape\n(3,)\n>>> a.size\n3\n```", "```py\n>>> b = np.zeros((2, 4))\n>>> b\narray([[ 0.,  0.,  0.,  0.],\n [ 0.,  0.,  0.,  0.]])\n>>> b.ndim\n2\n>>> b.shape\n(2, 4)\n>>> b.size\n8\n```", "```py\n>>> import numpy as np\n>>> k = np.ones((3, 5))\n>>> k\narray([[ 1.,  1.,  1.,  1.,  1.],\n [ 1.,  1.,  1.,  1.,  1.],\n [ 1.,  1.,  1.,  1.,  1.]])\n```", "```py\n>>> m = np.random.random((3, 5))\n>>> m\narray([[  1.92415699e-01,   4.43131404e-01,   7.99226773e-01,\n 1.14301942e-01,   2.85383430e-04],\n [  6.53705749e-01,   7.48034559e-01,   4.49463241e-01,\n 4.87906915e-01,   9.34341118e-01],\n [  9.47575562e-01,   2.21152583e-01,   2.49031209e-01,\n 3.46190961e-01,   8.94842676e-01]])\n```", "```py\n>>> a = np.arange(10)\n>>> a\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> a = a.reshape(2, 5)\n>>> a\narray([[0, 1, 2, 3, 4],\n [5, 6, 7, 8, 9]])\n>>> a.ndim\n2\n>>> a.shape\n(2, 5)\n>>> a.size\n10\n```", "```py\n>>> a = a.reshape(5, 2)\n>>> a\narray([[0, 1],\n [2, 3],\n [4, 5],\n [6, 7],\n [8, 9]])\n>>> a.ndim\n2\n>>> a.shape\n(5, 2)\n>>> a.size\n10\n```", "```py\n>>> a.shape = (2, 5)\n>>> a\narray([[0, 1, 2, 3, 4],\n [5, 6, 7, 8, 9]])\n```", "```py\n>>> a = a.reshape(3, 4)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: total size of new array must be unchanged\n```", "```py\n>>> a = np.arange(10)\n>>> a[7]\n7\n>>> a[-1]\n9\n```", "```py\n>>> a.shape = (2, 5)\n>>> a\narray([[0, 1, 2, 3, 4],\n [5, 6, 7, 8, 9]])\n>>> a[1,2]\n7\n```", "```py\n>>> l = [ [0, 1, 2, 3, 4], [5, 6, 7, 8, 9] ]\n>>> l\n[[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]\n>>> l[1,2]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: list indices must be integers, not tuple\n>>> l[1][2]\n7\n```", "```py\n>>> a = np.arange(10)\n>>> a = a.reshape(2, 5)\n>>> a\narray([[0, 1, 2, 3, 4],\n       [5, 6, 7, 8, 9]])\n```", "```py\n>>> a[0, 2:]\narray([2, 3, 4])\n```", "```py\n>>> a[-1, :3]\narray([5, 6, 7])\n```", "```py\n>>> a[:, 2:4] = 1000\n>>> a\narray([[   0,    1, 1000, 1000,    4],\n [   5,    6, 1000, 1000,    9]])\n```", "```py\n>>> from numpy import *\n>>> a = arange(4)\n>>> a\narray([0, 1, 2, 3])\n>>> a *= 3\n>>> a\narray([0, 3, 6, 9])\n```", "```py\n>>> plain_list = list(range(4))\n>>> plain_list\n[0, 1, 2, 3]\n>>> plain_list = [num * 3 for num in plain_list]\n>>> plain_list\n[0, 3, 6, 9]\n```", "```py\n>>> from numpy import *\n>>> a = zeros((2, 5)) + 17.0\n>>> a\narray([[ 17.,  17.,  17.,  17.,  17.],\n [ 17.,  17.,  17.,  17.,  17.]])\n```", "```py\n4x + 5y = 20\n x + 2y = 13\n```", "```py\n>>> import numpy as np\n>>> coefficients = np.array([ [4, 5], [1, 2] ])\n>>> dependents = np.array( [20, 13] )\n```", "```py\n>>> answers = np.linalg.solve(coefficients, dependents)\n>>> answers\narray([ -8.33333333,  10.66666667])\n```", "```py\n>>> 4 * answers[0] + 5 * answers[1]\n20.0\n>>> 1 * answers[0] + 2 * answers[1]\n13.0\n```", "```py\n>>> product = np.dot(coefficients, answers)\n>>> product\narray([ 20.,  13.])\n```", "```py\n>>> np.allclose(product, dependents)\nTrue\n```"]