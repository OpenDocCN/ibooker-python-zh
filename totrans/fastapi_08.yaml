- en: Chapter 6\. Dependencies
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章\. 依赖项
- en: Preview
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预览
- en: One of the very nice design features of FastAPI is a technique called *dependency
    injection*. This term sounds technical and esoteric, but it’s a key aspect of
    FastAPI and is surprisingly useful at many levels. This chapter looks at FastAPI’s
    built-in capabilities as well as how to write your own.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 的一个非常好的设计特性之一是一种称为 *依赖注入* 的技术。这个术语听起来技术性和神秘，但它是 FastAPI 的一个关键方面，并在多个层面上都非常有用。本章将介绍
    FastAPI 的内置能力以及如何编写您自己的能力。
- en: What’s a Dependency?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是依赖项？
- en: A *dependency* is specific information that you need at some point. The usual
    way to get this information is to write code that gets it, right when you need
    it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*依赖* 是您在某些时候需要的特定信息。获取此信息的通常方法是编写代码以获取它，就在您需要它的时候。'
- en: 'When you’re writing a web service, at some time you may need to do the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当您编写 Web 服务时，某时您可能需要执行以下操作：
- en: Gather input parameters from the HTTP request
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 HTTP 请求中收集输入参数
- en: Validate inputs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证输入
- en: Check user authentication and authorization for some endpoints
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查某些端点的用户认证和授权
- en: Look up data from a data source, often a database
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据源（通常是数据库）查找数据
- en: Emit metrics, logs, or tracking information
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发出度量、日志或跟踪信息
- en: Web frameworks convert the HTTP request bytes to data structures, and you pluck
    what you need from them inside your Web layer functions as you go.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Web 框架将 HTTP 请求字节转换为数据结构，并且在您的 Web 层函数内部逐步从中获取您需要的内容。
- en: Problems with Dependencies
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖项的问题
- en: 'Getting what you want, right when you need it, and without external code needing
    to know how you got it, seems pretty reasonable. But it turns out that consequences
    exist:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在你需要的时候获取你想要的内容，并且不需要外部代码知道你是如何获取它的，似乎是相当合理的。但事实证明，这样做会带来一些后果：
- en: Testing
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 测试
- en: You can’t test variations of your function that could look up the dependency
    differently.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您无法测试可能以不同方式查找依赖项的函数变体。
- en: Hidden dependencies
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏的依赖项
- en: Hiding the details means that code your function needs could break when external
    code changes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏细节意味着你的函数所需的代码可能会在外部代码更改时中断。
- en: Code duplication
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 代码重复
- en: If your dependency is a common one (like looking up a user in a database or
    combining values from an HTTP request), you might duplicate the lookup code in
    multiple functions.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的依赖是常见的（比如在数据库中查找用户或者组合来自 HTTP 请求的值），你可能会在多个函数中重复查找代码。
- en: OpenAPI visibility
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: OpenAPI 可见性
- en: The automatic test page that FastAPI makes for you needs information from the
    dependency injection mechanism.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 为您生成的自动测试页面需要依赖注入机制提供的信息。
- en: Dependency Injection
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖注入
- en: 'The term *dependency injection* is simpler than it sounds: pass any *specific*
    information that a function needs *into* the function. A traditional way to do
    this is to pass in a helper function, which you then call to get the specific
    data.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*依赖注入* 这个术语比听起来简单：将函数所需的任何 *特定* 信息 *传递* 到函数中。传统的方法是传递一个辅助函数，然后您调用它以获取特定的数据。'
- en: FastAPI Dependencies
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FastAPI 依赖项
- en: 'FastAPI goes one step more: you can define dependencies as arguments to your
    function, and they are *automatically* called by FastAPI and pass in the *values*
    that they return. For example, a `user_dep` dependency could get the user’s name
    and password from HTTP arguments, look them up in a database, and return a token
    that you use to track that user afterward. Your web-handling function doesn’t
    ever call this directly; it’s handled at function call time.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 更进一步：您可以将依赖项定义为函数的参数，并由 FastAPI *自动* 调用并传递它们返回的 *值*。例如，`user_dep` 依赖项可以从
    HTTP 参数获取用户的用户名和密码，查找它们在数据库中，并返回一个标记，您可以用它来跟踪该用户之后的活动。您的 Web 处理函数永远不会直接调用这个函数；这是在函数调用时处理的。
- en: 'You’ve already seen some dependencies but didn’t see them referred to as such:
    HTTP data sources like `Path`, `Query`, `Body`, and `Header`. These are functions
    or Python classes that dig the requested data from various areas in the HTTP request.
    They hide the details, like validity checks and data formats.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到了一些依赖项，但并没有看到它们被称为这样：像 `Path`、`Query`、`Body` 和 `Header` 这样的 HTTP 数据源。这些是从
    HTTP 请求中的各个区域获取请求数据的函数或 Python 类。它们隐藏了细节，如有效性检查和数据格式。
- en: 'Why not write your own functions to do this? You could, but you would not have
    these:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么不编写您自己的函数来执行此操作？您可以这样做，但您将不会有这些功能：
- en: Data validity checks
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据有效性检查
- en: Format conversions
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格式转换
- en: Automatic documentation
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动文档
- en: In many other web frameworks, you would do these checks inside your own functions.
    You’ll see examples of this in [Chapter 7](ch07.html#ch07), which compares FastAPI
    with Python web frameworks like Flask and Django. But in FastAPI, you can handle
    your own dependencies, much as the built-in ones do.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多其他 Web 框架中，你会在自己的函数内部进行这些检查。你将在 [第 7 章](ch07.html#ch07) 中看到这方面的例子，该章节将 FastAPI
    与 Flask 和 Django 等 Python Web 框架进行了比较。但在 FastAPI 中，你可以处理自己的依赖项，就像内置的依赖项一样。
- en: Writing a Dependency
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写一个依赖项
- en: In FastAPI, a dependency is something that’s executed, so a dependency object
    needs to be of the type `Callable`, which includes functions and classes—things
    that you *call*, with parentheses and optional arguments.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 FastAPI 中，一个依赖项是一个被执行的东西，所以一个依赖项对象需要是 `Callable` 类型，其中包括函数和类——你会用到括号和可选参数。
- en: '[Example 6-1](#ex-6-1) shows a `user_dep()` dependency function that takes
    name and password string arguments, and just returns `True` if the user is valid.
    For this first version, let’s have the function return `True` for anything.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 6-1](#ex-6-1) 展示了一个 `user_dep()` 依赖函数，它接受名称和密码字符串参数，并且如果用户有效则返回 `True`。对于这个第一个版本，让我们让函数对任何情况都返回
    `True`。'
- en: Example 6-1\. A dependency function
  id: totrans-35
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-1\. 一个依赖函数
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, `user_dep()` is a dependency function. It acts like a FastAPI path function
    (it knows about things like `Params`, etc.), but doesn’t have a path decorator
    above it. It’s a helper, not a web endpoint itself.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`user_dep()` 是一个依赖函数。它的作用类似于一个 FastAPI 路径函数（它知道诸如 `Params` 等的内容），但它上面没有路径装饰器。它是一个辅助函数，而不是一个
    Web 端点本身。
- en: The path function `get_user()` says that it expects an argument variable called
    `user`, and that variable will get its value from the dependency function `user_dep()`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 路径函数 `get_user()` 表明它期望一个名为 `user` 的参数变量，并且该变量将从依赖函数 `user_dep()` 中获取其值。
- en: Note
  id: totrans-39
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In the arguments to `get_user()`, we could not have said `user = user_dep`,
    because `user_dep` is a Python function object. And we could not say `user = user_dep()`,
    because that would have called the `user_dep()` function when `get_user()` was
    *defined*, not when it’s used. So we need that extra helper FastAPI `Depends()`
    function to call `user_dep()` just when it’s wanted.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `get_user()` 的参数中，我们不能说 `user = user_dep`，因为 `user_dep` 是一个 Python 函数对象。我们也不能说
    `user = user_dep()`，因为那样会在定义 `get_user()` 时调用 `user_dep()` 函数，而不是在使用时调用。所以我们需要额外的帮助
    FastAPI `Depends()` 函数来在需要时调用 `user_dep()`。
- en: You can have multiple dependencies in your path function argument list.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在路径函数的参数列表中定义多个依赖项。
- en: Dependency Scope
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖范围
- en: You can define dependencies to cover a single path function, a group of them,
    or the whole web application.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以定义依赖项来覆盖单个路径函数、一组路径函数或整个 Web 应用程序。
- en: Single Path
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单一路径
- en: 'In your *path function*, include an argument like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 *路径函数* 中，包含一个像这样的参数：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'or just this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 或者只是这样：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*`name`* is whatever you want to call the value(s) returned by *`depfunc`*.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*`name`* 是你想要称呼由 *`depfunc`* 返回的值的任何名称。'
- en: 'From the earlier example:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 来自先前示例：
- en: '*`pathfunc`* is `get_user()`.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`pathfunc`* 是 `get_user()`。'
- en: '*`depfunc`* is `user_dep()`.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`depfunc`* 是 `user_dep()`。'
- en: '*`name`* is `user`.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`name`* 是 `user`。'
- en: '[Example 6-2](#ex-6-2) uses this path and dependency to return a fixed user
    `name` and a `valid` Boolean.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 6-2](#ex-6-2) 使用这个路径和依赖项来返回一个固定的用户 `name` 和一个 `valid` 布尔值。'
- en: Example 6-2\. Return a user dependency
  id: totrans-55
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-2\. 返回一个用户依赖项
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If your dependency function just checks something and doesn’t return any values,
    you can also define the dependency in your path *decorator* (the preceding line,
    starting with a `@`):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的依赖函数只是检查一些东西而不返回任何值，你也可以在你的路径 *装饰器* 中定义这个依赖项（前一行，以 `@` 开头）：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let’s try that in [Example 6-3](#ex-6-3).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 [示例 6-3](#ex-6-3) 中试试看。
- en: Example 6-3\. Define a user check dependency
  id: totrans-60
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-3\. 定义一个用户检查依赖项
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Multiple Paths
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多条路径
- en: '[Chapter 9](ch09.html#ch09) gives more details on how to structure a larger
    FastAPI application, including defining more than one *router* object under a
    top-level application, instead of attaching every endpoint to the top-level application.
    [Example 6-4](#ex-6-4) sketches the idea.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 9 章](ch09.html#ch09) 提供了有关如何构建更大的 FastAPI 应用程序的详细信息，包括在顶级应用程序下定义多个 *路由器*
    对象，而不是将每个端点附加到顶级应用程序。[示例 6-4](#ex-6-4) 勾勒了这个想法。'
- en: Example 6-4\. Define a subrouter dependency
  id: totrans-64
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-4\. 定义一个子路由器依赖项
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will cause *`depfunc()`* to be called for all path functions under `router`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致 *`depfunc()`* 在 `router` 下的所有路径函数中被调用。
- en: Global
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全局
- en: When you define your top-level FastAPI application object, you can add dependencies
    to it that will apply to all its path functions, as shown in [Example 6-5](#ex-6-5).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义你的顶级 FastAPI 应用对象时，你可以向其添加依赖项，这些依赖项将应用于其所有路径函数，如[示例 6-5](#ex-6-5)所示。
- en: Example 6-5\. Define app-level dependencies
  id: totrans-69
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-5\. 定义应用级别依赖
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this case, you’re using `pass` to ignore the other details to show how to
    attach the dependencies.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你正在使用 `pass` 来忽略其他细节，以展示如何附加依赖项。
- en: Review
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾
- en: 'This chapter discussed dependencies and dependency injection—ways of getting
    the data you need when you need it, in a straightforward way. Coming up in the
    next chapter: Flask, Django, and FastAPI walk into a bar…​'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了依赖项和依赖注入——在需要时以直接的方式获取所需数据的方法。下一章内容预告：Flask、Django 和 FastAPI 走进酒吧……
