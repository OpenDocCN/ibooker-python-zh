- en: Chapter 17\. Data Discovery and Visualization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第17章 数据发现与可视化
- en: Preview
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预览
- en: Although FastAPI does have *API* in its name, it can serve more things than
    APIs. This chapter shows you how to generate tables, plots, graphs, and maps from
    data, using a small database of imaginary creatures from around the world.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然FastAPI的名称中确实有*API*，但它可以提供的不仅限于API。本章将向您展示如何使用世界各地想象中生物的小型数据库从数据生成表格、图表、图形和地图。
- en: Python and Data
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python和数据
- en: 'Python has become very popular in the last few years for many reasons:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 几年来，Python因为许多原因变得非常流行：
- en: Ease of learning
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习的容易程度
- en: Clean syntax
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 干净的语法
- en: Rich standard library
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 丰富的标准库
- en: Huge number of high-quality third-party packages
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大量高质量的第三方包
- en: Special emphasis on data manipulation, conversion, and introspection
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特别强调数据操作、转换和内省
- en: The last point has always been relevant for traditional ETL tasks for database
    creation. A nonprofit group called [PyData](https://pydata.org) even organizes
    conferences and develops tools for open source data analysis with Python. The
    popularity of Python also reflects the recent surge in AI and the need for tools
    to prepare the data that feeds AI models.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点一直与传统的ETL任务和数据库创建相关。一个名为[PyData](https://pydata.org)的非营利组织甚至组织会议并开发用于Python开源数据分析的工具。Python的流行也反映了近年来AI的激增以及准备供应AI模型的数据所需工具的需求。
- en: In this chapter, we’ll try some Python data packages and see how they relate
    to modern Python web development and FastAPI.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将尝试一些Python数据包，并了解它们与现代Python Web开发和FastAPI的关系。
- en: PSV Text Output
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PSV文本输出
- en: In this section, we’ll use the creatures listed in [Appendix B](app02.html#app02).
    The data is in this book’s GitHub repo, in the pipe-separated file *cryptid.psv*
    and the SQLite database *cryptid.db*. Comma-separated (*.csv*) and tab-separated
    (*.tsv*) files are common, but commas are used within the data cells themselves,
    and tabs are sometimes hard to distinguish from other whitespace. The pipe character
    (`|`) is distinct, and rare enough in standard text to serve as a good separator.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用附录 B 中列出的生物。数据位于本书的GitHub存储库中，以管道分隔的文件 *cryptid.psv* 和 SQLite数据库 *cryptid.db*
    中。逗号分隔（*.csv*）和制表符分隔（*.tsv*）文件很常见，但数据单元格内部使用逗号，并且有时很难将制表符与其他空白字符区分开。管道字符（`|`）是独特的，在标准文本中很少见，因此可用作良好的分隔符。
- en: Let’s try the *.psv* text file first, using just text output examples for simplicity,
    and then go on to full web examples using the SQLite database.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先尝试*.psv*文本文件，只使用文本输出示例以简化操作，然后继续使用SQLite数据库进行完整的Web示例。
- en: 'The initial header line of the *.psv* file contains the names of the fields:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*.psv* 文件的初始标题行包含字段的名称：'
- en: '`name`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`'
- en: '`country` (`*` means many countries)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`country`（`*`表示多个国家）'
- en: '`area` (optional, US state or other country area)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`area`（可选，美国州或其他国家地区）'
- en: '`description`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`'
- en: '`aka` (also known as)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aka`（也称为）'
- en: The rest of the lines in the file describe one creature at a time, with the
    fields in that order, separated by a `|` character.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 文件中的其余行描述了每次一个生物，按照指定顺序的字段，由`|`字符分隔。
- en: csv
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: csv
- en: '[Example 17-1](#ex-17-1) reads the creature data into Python data structures.
    First, the pipe-separated file *cryptids.psv* can be read with the standard Python
    csv package, yielding a list of tuples, where each tuple represents a line of
    data from the file. (The csv package also includes a `DictReader` that returns
    a list of dicts instead.) The first line of this file is a header with the names
    of the columns; without this, we could still supply the headers through arguments
    to csv functions.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17-1](#ex-17-1)将生物数据读入Python数据结构中。首先，管道分隔的文件 *cryptids.psv* 可以使用标准Python
    csv包读取，生成一个元组列表，其中每个元组表示文件中的一行数据。（csv包还包括一个`DictReader`，返回一个字典列表。）此文件的第一行是带有列名的标题；即使没有这个，我们仍然可以通过csv函数的参数提供标题。'
- en: I’m including type hints in the examples, but you can drop these if you have
    an older version of Python, and the code will still work. Let’s print only the
    header and first five lines, to save a few trees.^([1](ch17.html#id976))
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中包含类型提示，但如果您使用的是旧版本的Python，可以将其省略，代码仍然可以正常工作。我们只打印标题和前五行，以节省一些树木。^([1](ch17.html#id976))
- en: Example 17-1\. Read PSV file with csv (load_csv.py)
  id: totrans-25
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例17-1 用csv读取PSV文件（load_csv.py）
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now run the test in [Example 17-2](#ex-17-2).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行[示例 17-2](#ex-17-2)中的测试。
- en: Example 17-2\. Test CSV database loading
  id: totrans-28
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例17-2 测试CSV数据库加载
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: python-tabulate
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: python-tabulate
- en: Let’s try one more open source tool, [python-tabulate](https://oreil.ly/L0f6k),
    that is specifically designed for tabular output. You’ll need to run `pip install
    tabulate` first. [Example 17-3](#ex-17-3) shows the code.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再尝试一个开源工具，[python-tabulate](https://oreil.ly/L0f6k)，专门用于表格输出。您需要先运行`pip install
    tabulate`。[示例17-3](#ex-17-3)展示了代码。
- en: Example 17-3\. Read PSV file with python-tabulate (load_tabulate.py)
  id: totrans-32
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例17-3。用python-tabulate（load_tabulate.py）读取PSV文件
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Run [Example 17-3](#ex-17-3) in [Example 17-4](#ex-17-4).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例17-4](#ex-17-4)中运行[示例17-3](#ex-17-3)。
- en: Example 17-4\. Run the tabulate load script
  id: totrans-35
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例17-4。运行表格加载脚本
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: pandas
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pandas
- en: 'The two previous examples were mostly output formatters. [Pandas](https://pandas.pydata.org)
    is an excellent tool for slicing and dicing data. It goes beyond the standard
    Python data structures with advanced constructs like the [DataFrame](https://oreil.ly/j-8eh):
    a combination of a table, dictionary, and series. It can also read *.csv* and
    other character-separated files. [Example 17-5](#ex-17-5) is like the previous
    examples, but pandas returns a DataFrame instead of a list of tuples.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个示例大部分是输出格式化程序。[Pandas](https://pandas.pydata.org)是一个非常好的工具，用于切片和切块数据。它超越了标准的Python数据结构，具有像[DataFrame](https://oreil.ly/j-8eh)这样的高级结构：表格、字典和系列的组合。它还可以读取*.csv*和其他字符分隔文件。[示例17-5](#ex-17-5)与前面的示例类似，但Pandas返回的是DataFrame而不是元组列表。
- en: Example 17-5\. Read PSV file with pandas (load_pandas.py)
  id: totrans-39
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例17-5。用pandas（load_pandas.py）读取PSV文件
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Run [Example 17-5](#ex-17-5) in [Example 17-6](#ex-17-6).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例17-6](#ex-17-6)中运行[示例17-5](#ex-17-5)。
- en: Example 17-6\. Run the pandas load script
  id: totrans-42
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例17-6。运行pandas加载脚本
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Pandas has a metric boatload of interesting functions, so take a look.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas有很多有趣的功能，所以可以看一看。
- en: SQLite Data Source and Web Output
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLite数据源和Web输出
- en: For the rest of the examples in this chapter, you’ll read creature data from
    the SQLite database, using some of the website code from earlier chapters. Then
    you’ll slice, dice, and marinate the data with different recipes. Instead of simple
    text output, you’ll install each example into our ever-growing cryptid website.
    You’ll need a few additions to our existing Web, Service, and Data levels.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的其余示例中，您将从SQLite数据库中读取生物数据，使用前几章的一些网站代码。然后，您将用不同的方法切割、切块和腌制数据。而不是简单的文本输出，您将把每个示例安装到我们不断增长的神秘生物网站中。您需要对现有的Web、服务和数据级别进行一些补充。
- en: First, you need a Web-level function and an associated HTTP `GET` route to return
    all the creature data. And you already have one! Let’s make a web call to get
    everything, but again show only the first few lines (trees, you know). That’s
    [Example 17-7](#ex-17-7), right here.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要一个Web级别的函数和一个相关的HTTP `GET`路由来返回所有生物数据。而且您已经有了！让我们做一个网络调用获取所有内容，但再次仅显示前几行（树，你知道的）。这就是[示例17-7](#ex-17-7)，就在这里。
- en: Example 17-7\. Run the creature download test (truncated; trees are watching)
  id: totrans-48
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例17-7。运行生物下载测试（截断；树正在观察）
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Chart/Graph Packages
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图表/图形包
- en: 'Now we can go beyond text to GUIs. Some of the most useful and popular Python
    packages for graphical data displays include the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以超越文本进入GUI。一些用于图形数据显示的最有用和最流行的Python包包括以下几个：
- en: '[Matplotlib](https://matplotlib.org)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[Matplotlib](https://matplotlib.org)'
- en: Extensive, but needs some fiddling to get the prettiest results
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 非常广泛，但需要一些调整才能获得最漂亮的结果
- en: '[Plotly](https://plotly.com/python)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[Plotly](https://plotly.com/python)'
- en: Similar to Matplotlib and Seaborn, with an emphasis on interactive graphs
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于Matplotlib和Seaborn，侧重于交互式图形
- en: '[Dash](https://dash.plotly.com)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[Dash](https://dash.plotly.com)'
- en: Built on Plotly as a sort of data dashboard
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Plotly构建的一种数据仪表盘
- en: '[Seaborn](https://seaborn.pydata.org)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[Seaborn](https://seaborn.pydata.org)'
- en: Built on Matplotlib and offers a higher-level interface, but with less graph
    types
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Matplotlib构建，并提供一个更高级的接口，但支持的图形类型较少
- en: '[Bokeh](http://bokeh.org)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[Bokeh](http://bokeh.org)'
- en: Integrates with JavaScript to provide dashboard views of very large datasets
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 与JavaScript集成，以提供对非常大型数据集的仪表板视图
- en: 'How can you decide? You can consider the following criteria:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如何做出决策？您可以考虑以下几个标准：
- en: Graph types (e.g., scatter, bar, line)
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表类型（例如散点图、条形图、折线图）
- en: Styling
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 样式
- en: Ease of use
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用便捷
- en: Performance
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能
- en: Data limits
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据限制
- en: 'Comparisons like [“Top 6 Python Libraries for Visualization: Which One to Use?”](https://oreil.ly/10Nsw)
    by khuyentran1476 can help you choose. In the end, the choice often comes down
    to the one that you figure out enough about first. For this chapter, I chose Plotly,
    which can create attractive plots without too much coding.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '像 [“Top 6 Python Libraries for Visualization: Which One to Use?”](https://oreil.ly/10Nsw)
    这样的比较，可以帮助您做出选择。最终，选择往往取决于您首先掌握的内容。在本章中，我选择了 Plotly，它可以在不需要太多编码的情况下创建吸引人的图表。'
- en: 'Chart Example 1: Test'
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图表示例 1：测试
- en: 'Plotly is an open source (free) Python library with multiple levels of control
    and detail:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly 是一个具有多层控制和详细信息的开源（免费）Python 库：
- en: '[Plotly Express](https://plotly.com/python/plotly-express)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[Plotly Express](https://plotly.com/python/plotly-express)'
- en: A minimal Plotly library
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的 Plotly 库
- en: '[Plotly](https://plotly.com/python)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[Plotly](https://plotly.com/python)'
- en: The main library
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 主要库
- en: '[Dash](https://dash.plotly.com)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[Dash](https://dash.plotly.com)'
- en: Data application tools
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 数据应用工具
- en: There is also [Dash Enterprise](https://dash.plotly.com/dash-enterprise), which,
    like almost anything with *Enterprise* in its name (including spaceship models)
    costs money.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 还有 [Dash Enterprise](https://dash.plotly.com/dash-enterprise)，它像几乎所有带有 *Enterprise*
    的名字（包括宇宙飞船模型）一样需要花钱。
- en: 'What can we actually show from the creature data? Charts and graphs have some
    common forms:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上可以从生物数据中展示什么？图表和图形有一些常见的形式：
- en: Scatter
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 散点图
- en: Line
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 折线图
- en: Bar
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 柱状图
- en: Histogram
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直方图
- en: Box (statistical)
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 箱线图（统计学）
- en: Our data fields are all strings, intentionally minimal to keep the examples
    from overwhelming the logic and integration steps. For each example, we’ll read
    all the creature data from the SQLite database using code from previous chapters,
    and adding Web and Service functions to select particular data to feed to the
    plot library functions.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据字段都是字符串，有意保持简单，以避免示例过于复杂。对于每个示例，我们将使用前几章的代码从 SQLite 数据库中读取所有生物数据，并添加 Web
    和 Service 函数以选择要提供给绘图库函数的特定数据。
- en: 'First, install Plotly, and a library needed by Plotly to export images:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 首先安装 Plotly，以及 Plotly 导出图像所需的库：
- en: '`pip install plotly`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pip install plotly`'
- en: '`pip install kaleido`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pip install kaleido`'
- en: Then, in [Example 17-8](#ex-17-8), add a test function to *web/creature.py*
    to see if we have the right pieces, in the right places.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 [示例 17-8](#ex-17-8) 中，添加一个测试函数到 *web/creature.py*，以查看我们是否将正确的部件放在了正确的位置。
- en: Example 17-8\. Add a test plot endpoint (edit web/creature.py)
  id: totrans-89
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 17-8\. 添加一个测试绘图端点（编辑 web/creature.py）
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The documentation routinely recommends calling `fig.show()` to show the image
    that you just created, but we’re trying to fit in with how FastAPI and Starlette
    do things.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 文档通常建议调用 `fig.show()` 来显示您刚刚创建的图像，但我们试图与 FastAPI 和 Starlette 的工作方式保持一致。
- en: So first you get `fig_bytes` (the actual `bytes` content of the image); then
    you return a custom `Response` object.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先获取 `fig_bytes`（图像的实际 `bytes` 内容）；然后返回一个自定义的 `Response` 对象。
- en: After you’ve added this endpoint to *web/creature.py* and restarted the web
    server (automatically if you ran Uvicorn with `--reload`), try accessing this
    new endpoint by typing **`localhost:8000/creature/test`** into your browser’s
    location bar. You should see [Figure 17-1](#fig-test-plotly).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在将此端点添加到 *web/creature.py* 并重新启动 Web 服务器（如果您使用 `--reload` 运行 Uvicorn，则会自动重启）后，尝试在浏览器的地址栏中输入
    **`localhost:8000/creature/test`** 来访问此新端点。您应该会看到 [图 17-1](#fig-test-plotly)。
- en: '![fapi 1701](assets/fapi_1701.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![fapi 1701](assets/fapi_1701.png)'
- en: Figure 17-1\. Test Plotly image
  id: totrans-95
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 17-1\. 测试 Plotly 图像
- en: 'If you got a weird error from Uvicorn like `ValueError: ''not'' is not a valid
    parameter name`, then update Pydantic to fix a bug: `pip install -U pydantic`.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您从 Uvicorn 得到一个奇怪的错误，如 `ValueError: ''not'' is not a valid parameter name`，则更新
    Pydantic 以修复错误：`pip install -U pydantic`。'
- en: 'Chart Example 2: Histogram'
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图表示例 2：直方图
- en: If all is well, let’s start playing with our creature data. We’ll add a `plot()`
    function to *web/creature.py*. We’ll get all the creature data from the database
    via the `get_all()` functions in *service/creature.py* and *data/creature.py*.
    Then we’ll extract what we want and use Plotly to display various images of the
    results.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，让我们开始使用我们的生物数据。我们将在 *web/creature.py* 中添加一个 `plot()` 函数。我们将通过 *service/creature.py*
    和 *data/creature.py* 中的 `get_all()` 函数从数据库中获取所有生物数据。然后，我们将提取所需数据，并使用 Plotly 显示各种结果的图像。
- en: For our first trick ([Example 17-9](#ex-17-9)), we’ll just use the `name` field
    and make a bar chart indicating the number of creatures’ names that start with
    each letter.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个技巧（[示例 17-9](#ex-17-9)），我们将只使用 `name` 字段，并制作一个柱状图，显示以每个字母开头的生物名称的数量。
- en: Example 17-9\. Bar chart of creature name initials
  id: totrans-100
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 17-9\. 生物名称首字母的柱状图
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Type `**localhost:8000/creature/plot**` into your browser’s location bar. You
    should see [Figure 17-2](#fig-histogram).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器的地址栏中输入`**localhost:8000/creature/plot**`。你应该会看到[图 17-2](#fig-histogram)。
- en: '![fapi 1702](assets/fapi_1702.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![fapi 1702](assets/fapi_1702.png)'
- en: Figure 17-2\. Creature name initial histogram
  id: totrans-104
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 17-2\. 生物名称首字母柱状图
- en: Map Packages
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地图包
- en: 'If you try to Google `**Python**` and `**maps**`, you’ll get many links about
    Python dictionaries, which are a built-in *mapping type* in the language, and
    not the same thing. So you may need to try synonyms like *GIS*, *geo*, *cartography*,
    *spatial*, and so on. Popular packages, some of them built atop others in the
    list, include the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试在Google中搜索`**Python**`和`**maps**`，你会得到许多关于Python字典的链接，这在语言中是一种内置的*映射类型*，并不是同一回事。因此，你可能需要尝试一些同义词，如*GIS*、*地理*、*制图学*、*空间*等。一些流行的包建立在列表中的其他包之上，包括以下内容：
- en: '[PyGIS](https://oreil.ly/3QvCz)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[PyGIS](https://oreil.ly/3QvCz)'
- en: References for spatial data processing in Python
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Python空间数据处理参考
- en: '[PySAL](https://pysal.org)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[PySAL](https://pysal.org)'
- en: Python Spatial Analysis Library
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Python空间分析库
- en: '[Cartopy](https://oreil.ly/YnUow)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[Cartopy](https://oreil.ly/YnUow)'
- en: Analyzes and maps geospatial data
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 分析和绘制地理空间数据
- en: '[Folium](https://oreil.ly/72luj)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[Folium](https://oreil.ly/72luj)'
- en: Integrated with JavaScript
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 与JavaScript集成
- en: '[Python Client for Google Maps Services](https://oreil.ly/LWfS5)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[Python客户端用于Google地图服务](https://oreil.ly/LWfS5)'
- en: API access to Google Maps
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: API访问Google地图
- en: '[Geemap](https://geemap.org)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[Geemap](https://geemap.org)'
- en: Google Earth support
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Google Earth支持
- en: '[Geoplot](https://oreil.ly/Slfvc)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[Geoplot](https://oreil.ly/Slfvc)'
- en: Extends Cartopy and Matplotlib
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展了Cartopy和Matplotlib
- en: '[GeoPandas](https://geopandas.org)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[GeoPandas](https://geopandas.org)'
- en: An extension of our friend pandas
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们朋友pandas的扩展
- en: '[ArcGIS and ArcPy](https://oreil.ly/l7M5C)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[ArcGIS和ArcPy](https://oreil.ly/l7M5C)'
- en: Esri’s open source interface
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Esri的开源接口
- en: 'Similar to the criteria for plot/graph packages, choices may depend on the
    following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于绘图包的选择标准，地图的选择也可能取决于以下几点：
- en: Map types (e.g., choropleth, vector, raster)
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地图类型（例如，等值线图、矢量、栅格）
- en: Styling
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 样式
- en: Ease of use
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用便捷性
- en: Performance
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能
- en: Data limits
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据限制
- en: Like charts and graphs, maps come in many types and can be used for various
    purposes.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 与图表和图形一样，地图有多种类型，可用于各种目的。
- en: Map Example
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地图示例
- en: I’ll use Plotly again for these mapping examples; it’s neither too basic nor
    too complex, and this helps show how to integrate a small web-based map with FastAPI.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我将再次使用Plotly来展示这些地图示例；它既不过于基础也不过于复杂，这有助于展示如何将一个小型基于Web的地图与FastAPI集成。
- en: '[Example 17-10](#ex17-10) gets the two-letter ISO country codes of our creatures.
    But it turns out that the function that draws Plotly maps (a *choropleth*, which
    sounds like a shape-changing cryptid itself) wants to use another *three*-letter
    ISO country code standard instead. Grrr. So we could redo all the codes in the
    database and PSV file, but it’s easier to run `pip install country_converter`
    and map one set of country codes to another.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17-10](#ex17-10) 获取我们生物的两个字母ISO国家代码。但事实证明，绘制Plotly地图的功能（*choropleth*，听起来像是一个能改变形状的神秘生物）希望使用另一种三个字母的ISO国家代码标准。所以我们可以重新处理数据库和PSV文件中的所有代码，或者更简单地运行`pip
    install country_converter`，将一组国家代码映射到另一组上。'
- en: Example 17-10\. Map countries with cryptids (edit web/creature.py)
  id: totrans-135
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 17-10\. 映射带有神秘生物的国家（编辑web/creature.py）
- en: '[PRE9]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Ask your browser to pretty please get `**localhost:8000/creature/map**`, and
    with any luck you’ll see a map in which cryptid-bearing countries stick out ([Figure 17-3](#fig-map-cryptid-countries)).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 请求你的浏览器前往`**localhost:8000/creature/map**`，然后你有可能会看到一个突显神秘生物国家的地图（[图 17-3](#fig-map-cryptid-countries)）。
- en: '![fapi 1703](assets/fapi_1703.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![fapi 1703](assets/fapi_1703.png)'
- en: Figure 17-3\. Map of cryptid countries
  id: totrans-139
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 17-3\. 神秘生物国家地图
- en: You could expand this map to focus on the US by using the `area` field, which
    is a two-character state code if `country` is `US`. Use `locationmode="USA-states"`,
    and assign those `area` values to the `locations` parameter of `px.choropleth()`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`country`为`US`，你可以通过使用`area`字段扩展地图并关注美国。使用`locationmode="USA-states"`，并将这些`area`值分配给`px.choropleth()`的`locations`参数。
- en: Review
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习
- en: Have any cryptids been snuffling around near your house? You found out in this
    chapter, where various plotting, graphing, and mapping tools poked at a database
    of worrisome creatures.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节将探讨各种绘图、图表和地图工具如何查询令人担忧生物数据库，从而查明是否有神秘生物在你家附近活动。
- en: ^([1](ch17.html#id976-marker)) If there are any trees like Tolkien’s Ents, we
    don’t want them lumbering up to our doors some night to have a word.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch17.html#id976-marker)) 如果有任何类似托尔金的树人（Ents），我们不希望它们在某个夜晚漫步到我们家门口来交谈。
