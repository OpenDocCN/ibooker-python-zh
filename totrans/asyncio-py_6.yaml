- en: Appendix A. A Short History of Async Support in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A. Python异步支持的简史
- en: Despite having been part of the Python standard library for a long time, the
    asyncore module suffers from fundamental flaws following from an inflexible API
    that does not stand up to the expectations of a modern asynchronous networking
    module.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 尽管很长一段时间以来一直是Python标准库的一部分，但asyncore模块由于其不灵活的API而存在根本性缺陷，无法满足现代异步网络模块的期望。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Moreover, its approach is too simplistic to provide developers with all the
    tools they need in order to fully exploit the potential of asynchronous networking.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此外，其方法过于简单，无法为开发人员提供充分利用异步网络潜力所需的所有工具。
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The most popular solution right now used in production involves the use of third-party
    libraries. These often provide satisfactory solutions, but there is a lack of
    compatibility between these libraries, which tends to make codebases very tightly
    coupled to the library they use.
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 目前在生产中使用的最流行的解决方案涉及使用第三方库。这些通常提供令人满意的解决方案，但这些库之间缺乏兼容性，这往往使得代码库与它们使用的库非常紧密地耦合在一起。
- en: ''
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Laurens van Houtven, [PEP 3153 (May 2011): Asynchronous IO Support](https://oreil.ly/pNyro)'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Laurens van Houtven，[PEP 3153 (2011年5月)：异步IO支持](https://oreil.ly/pNyro)
- en: The goal of this appendix is to describe a little of the history behind async
    programming in Python, and the point I want to make—which still amazes me when
    I think about it—is that the key innovation that we’ve been awaiting for 20 years
    was *language syntax*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录的目标是描述Python中异步编程背后的一些历史，我想要表达的观点是，我们已经等待了20年的关键创新是*语言语法*。
- en: Many people will be surprised by this, but Asyncio is *not* the first attempt
    that has been made to add support for asynchronous network programming to Python,
    as is discussed next.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人会对此感到惊讶，但是Asyncio并*不*是Python尝试添加异步网络编程支持的第一个尝试，如下所述。
- en: In the Beginning, There Was asyncore
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在开始之初，有asyncore
- en: '[Compared to asyncore,] Twisted is better in pretty much every possible way.
    It’s more portable, more featureful, simpler, more scalable, better maintained,
    better documented, and it can make a delicious omelette. Asyncore is, for all
    intents and purposes, obsolete.'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[与asyncore相比，] Twisted在几乎所有可能的方面都更好。它更具可移植性，更丰富功能，更简单，更可扩展，维护更好，文档更好，并且可以做出美味的煎蛋卷。对于所有目的而言，Asyncore基本上已经过时了。'
- en: ''
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Glyph ca. 2010 on [Stack Overflow](https://oreil.ly/4pEeJ)
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Glyph，约2010年在[Stack Overflow](https://oreil.ly/4pEeJ)
- en: asyncore should really be considered a historical artifact and never actually
    used.
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: asyncore应该真正被视为历史遗物，不应实际使用。
- en: ''
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Jean-Paul Calderone ca. 2013 on [Stack Overflow](https://oreil.ly/oWGEZ)
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Jean-Paul Calderone，约2013年在[Stack Overflow](https://oreil.ly/oWGEZ)
- en: 'Support for so-called *asynchronous features* was added to Python a long time
    ago, in the `asyncore` module. As you can tell from the preceding quotes, reception
    of `asyncore` was lukewarm, and usage low. What is jaw-dropping, to this author
    at least, is *when* this module was added: in Python 1.5.2! This is what it says
    at the top of *Lib/asyncore.py* in the CPython source:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 支持所谓*异步特性*的功能在很久以前就添加到了Python中的`asyncore`模块。正如您可以从前面的引述中看到的那样，`asyncore`的接受度不高，使用率也很低。这位作者感到惊讶的是*这个模块被添加的时间*：在Python
    1.5.2中！这是在CPython源代码的*Lib/asyncore.py*顶部写的：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Furthermore, the first paragraph of the Python [documentation for `asyncore`](https://oreil.ly/tPp8_)
    says the following, which could easily appear in *today’s* documentation for `asyncio`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Python [`asyncore`文档的第一段](https://oreil.ly/tPp8_)与今天的`asyncio`文档几乎相同：
- en: This module provides the basic infrastructure for writing asynchronous socket
    service clients and servers.
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此模块为编写异步套接字服务客户端和服务器提供了基本的基础设施。
- en: ''
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There are only two ways to have a program on a single processor do “more than
    one thing at a time.” Multithreaded programming is the simplest and most popular
    way to do it, but there is another very different technique, that lets you have
    nearly all the advantages of multithreading, without actually using multiple threads.
    It’s really only practical if your program is largely I/O bound. If your program
    is processor bound, then preemptive scheduled threads are probably what you really
    need. Network servers are rarely processor bound, however.
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在单个处理器上使程序“同时做多件事情”有两种方法。多线程编程是最简单和最流行的方法，但还有另一种非常不同的技术，可以让你几乎享有多线程的所有优势，而不实际使用多个线程。如果你的程序主要是I/O绑定，这种方法确实很实用。如果你的程序是处理器绑定的，那么预先调度的线程可能是你真正需要的。然而，网络服务器很少是处理器绑定的。
- en: 1996, huh? Clearly it was already possible to manage multiple socket events
    in a single thread in Python back then (and, in fact, much earlier than this in
    other languages). So what has changed in the past quarter-century that makes Asyncio
    special now?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 1996年，啊？显然，早在当时，Python已经可以在单个线程中管理多个套接字事件了（事实上，在其他语言中比这个时间更早）。那么，在过去的四分之一个世纪里，是什么改变了Asyncio变得特别？
- en: 'The answer is language syntax. We’re going to be looking at this more closely
    in the next section, but before closing out this window into the past, it’s worth
    noting a small detail that appeared in the Python 3.6 docs for `asyncore` (ca.
    December 2016):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是语言语法。我们将在下一节更仔细地研究这个问题，但在结束这个回顾过去窗口之前，值得注意的是，Python 3.6文档中关于`asyncore`（大约在2016年12月）的一个小细节：
- en: 'Source code: Lib/asyncore.py'
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 源代码：Lib/asyncore.py
- en: ''
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Deprecated since version 3.6*: Please use `asyncio` instead.'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*自3.6版起已弃用*：请改用`asyncio`。'
- en: The Path to Native Coroutines
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原生协程之路
- en: Recall that I’m using the term *Asyncio* to refer to both the Python language
    syntax changes, and the new `asyncio` module in the standard library.^([1](app01.html#idm46363039318328))
    Let’s dig into that distinction a little more.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我使用术语*Asyncio*来指代Python语言语法的变化，以及标准库中的新`asyncio`模块。^([1](app01.html#idm46363039318328))
    让我们更深入地探讨这种区别。
- en: 'Today, support for asynchronous programming in Python has three distinct components,
    and it’s interesting to consider when they were added:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，Python中异步编程的支持有三个明显的组成部分，考虑它们何时被添加是很有趣的：
- en: 'Language syntax: generators'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 语言语法：生成器
- en: Keyword `yield`, added in Python 2.2 (2001) in [PEP 255](https://oreil.ly/35Czp)
    and enhanced in Python 2.5 (2005) in [PEP 342](https://oreil.ly/UDWl_) with the
    `send()` and `throw()` methods on generator objects, which allowed generators
    to be used as coroutines for the first time.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字`yield`，在Python 2.2（2001年）中在[PEP 255](https://oreil.ly/35Czp)中添加，并在Python
    2.5（2005年）中在[PEP 342](https://oreil.ly/UDWl_)中通过生成器对象的`send()`和`throw()`方法增强，这使得生成器首次可以用作协程。
- en: Keyword `yield from`, added in Python 3.3 (2009) in [PEP 380](https://oreil.ly/38jVG)
    to make it much easier to work with *nested* yields of generators, particularly
    in the case where generators are being used as makeshift (i.e., temporary) coroutines.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字`yield from`，在Python 3.3（2009年）中在[PEP 380](https://oreil.ly/38jVG)中添加，使得在处理生成器的*嵌套*yield时更加容易，特别是在生成器被用作临时协程的情况下。
- en: 'Language syntax: coroutines'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 语言语法：协程
- en: Keywords `async` and `await`, added in Python 3.5 (2015) in [PEP 492](https://oreil.ly/XJUmS),
    which gave first-class support to coroutines as a language feature in their own
    right. This also means that generators can again be used as generators, even inside
    coroutine functions.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字`async`和`await`，在Python 3.5（2015年）中在[PEP 492](https://oreil.ly/XJUmS)中添加，为协程作为一种独立语言特性提供了全面支持。这也意味着生成器可以再次被用作生成器，即使在协程函数内部也可以。
- en: 'Library module: `asyncio`'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 库模块：`asyncio`
- en: Added in Python 3.4 (2012) in [PEP 3156](https://oreil.ly/QKG4m), providing
    batteries-included support for both framework designers and end-user developers
    to work with coroutines and perform network I/O. Crucially, the design of the
    event loop in `asyncio` was intended to provide a common base upon which other
    existing third-party frameworks like Tornado and Twisted could standardize.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3.4（2012年）中在[PEP 3156](https://oreil.ly/QKG4m)中添加，为框架设计者和最终用户开发者提供了“电池包含”支持，以处理协程和执行网络I/O。`asyncio`中事件循环的设计旨在为其他现有的第三方框架（如Tornado和Twisted）提供一个标准化的共同基础。
- en: These three are quite distinct from each other, although you could be forgiven
    confusion since the history of the development of these features in Python has
    been difficult to follow.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这三者彼此非常不同，尽管你可能会因为 Python 中这些特性的发展历史难以追踪而感到困惑，这也可以理解。
- en: The impact of new syntax for `async` and `await` is significant, and it’s having
    an effect on other programming languages too, like JavaScript, C#, Scala, Kotlin,
    and Dart.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `async` 和 `await` 语法对其他编程语言也产生了重大影响，比如 JavaScript、C#、Scala、Kotlin 和 Dart。
- en: It took a long time and a lot of thinking by the thousands of programmers involved
    in the Python project to get us to this point.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 达到这一点花费了大量时间和成千上万参与 Python 项目的程序员的思考。
- en: ^([1](app01.html#idm46363039318328-marker)) `asyncio` was added in Python 3.4.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](app01.html#idm46363039318328-marker)) `asyncio` 是在 Python 3.4 中添加的。
