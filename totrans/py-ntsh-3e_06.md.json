["```py\n`try`:\n    *`statement``(``s``)`*\n`except` [*`expression`* [`as` *`target`*]]:\n    *`statement``(``s``)`*\n[`else`:\n    *`statement``(``s``)`*]\n[`finally`:\n    *`statement``(``s``)`*]\n```", "```py\n`try`:\n    1/0\n    print('not executed')\n`except` ZeroDivisionError:\n    print('caught divide-by-0 attempt')\n```", "```py\n`try``:`\n    *`# ...code that has a problem...`*\n`except``:`\n    `pass`\n```", "```py\n`try`:\n    `try`:\n        1/0\n    `except`:\n        print('caught an exception')\n`except` `ZeroDivisionError`:\n    print('caught divide-by-0 attempt')\n*`# prints:`* *`caught an exception`*\n```", "```py\nprint(repr(value), 'is ', end=' ')\n`try`:\n    value + 0\n`except` TypeError:\n    *`# not a number, maybe a string...?`*\n    `try`:\n        value + ''\n    `except` TypeError:\n        print('neither a number nor a string')\n    `else`:\n        print('some kind of string')\n`else`:\n    print('some kind of number')\n```", "```py\n`try`:\n    *`statement``(``s``)`*\n`finally`:\n    *`statement``(``s``)`*\n```", "```py\nf = open(some_file, 'w')\n`try`:\n    do_something_with_file(f)\n`finally`:\n    f.close()\n```", "```py\n`with` open(some_file, 'w') `as` f:\n    do_something_with_file(f)\n```", "```py\n`try`:\n    ...*`guarded` `clause`*...\n`except` ...*`expression`*...:\n    ...*`exception` `handler` `code`*...\n`finally`:\n    ...*`cleanup` `code`*...\n```", "```py\n`try`:\n    `try`:\n        ...*`guarded` `clause`*...\n    `except` ...*`expression`*...:\n        ...*`exception` `handler` `code`*...\n`finally`:\n    ...*`cleanup` `code`*...\n```", "```py\n`raise` [*`expression`* [`from` *`exception`*]]\n```", "```py\n`def` cross_product(seq1, seq2):\n    `if` `not` seq1 `or` `not` seq2:\n        `raise` ValueError('Sequence arguments must be non-empty') ![1](assets/1.png)\n    `return` [(x1, x2) `for` x1 `in` seq1 `for` x2 `in` seq2]\n```", "```py\nwith *expression* [as *varname*] [, ...]:\n    *statement(s)*\n\n*# 3.10+ multiple context managers for a with statement* \n*# can be enclosed in parentheses*\nwith (*expression* [as *varname*], ...):\n    *statement(s)*\n```", "```py\n_normal_exit = `True`\n_manager = *`expression`*\n*`varname`* = _manager.__enter__()\n`try`:\n    *`statement``(``s``)`*\n`except`:\n    _normal_exit = `False`\n    `if` `not` _manager.__exit_(*sys.exc_info()):\n        `raise`\n    *`# note that exception does not propagate if __exit__ returns`* \n    *`# a true value`*\n`finally`:\n    `if` _normal_exit:\n        _manager.__exit__(`None``,` `None``,` `None`)\n```", "```py\n`class` enclosing_tag:\n    `def` __init__(self, tagname):\n        self.tagname = tagname\n    `def` __enter__(self):\n        print(f'<{self.tagname}>', end='')\n    `def` __exit__(self, etyp, einst, etb):\n        print(f'</{self.tagname}>')\n\n*`# to be used as:`*\n`with` enclosing_tag('sometag'):\n    *`# ...statements printing output to be enclosed in`*\n    *``# a matched open/close `sometag` pair...``*\n```", "```py\n@contextlib.contextmanager\n`def` enclosing_tag(tagname):\n    print(f'<{tagname}>', end='')\n    `try`:\n        `yield`\n    `finally`:\n        print(f'</{tagname}>')\n*`# to be used the same way as before`*\n```", "```py\n`def` delete_file(filename):\n    `with` contextlib.suppress(FileNotFoundError):\n        os.remove(filename)\n```", "```py\ng.throw(*`exc_value`*)\n```", "```py\n`def` f():\n    print('in f, before 1/0')\n    1/0    *`# raises a ZeroDivisionError exception`*\n    print('in f, after 1/0')\n`def` g():\n    print('in g, before f()')\n    f()\n    print('in g, after f()')\n`def` h():\n    print('in h, before g()')\n    `try`:\n        g()\n        print('in h, after g()')\n    `except` ZeroDivisionError:\n        print('ZD exception caught')\n    print('function h ends')\n```", "```py\nin h, before g()\nin g, before f()\nin f, before 1/0\nZD exception caught\nfunction h ends\n```", "```py\nBaseException\n  Exception\n    AssertionError, AttributeError, BufferError, EOFError,\n    MemoryError, ReferenceError, OsError, StopAsyncIteration,\n    StopIteration, SystemError, TypeError\n    ArithmeticError (abstract)\n      OverflowError, ZeroDivisionError\n    ImportError\n      ModuleNotFoundError, ZipImportError\n    LookupError (abstract)\n      IndexError, KeyError\n    NameError\n      UnboundLocalError\n    OSError\n      ...\n    RuntimeError\n      RecursionError\n      NotImplementedError\n    SyntaxError\n      IndentationError\n        TabError\n    ValueError\n      UnsupportedOperation\n      UnicodeError\n        UnicodeDecodeError, UnicodeEncodeError,\n        UnicodeTranslateError\n    Warning\n      ...\n  GeneratorExit\n  KeyboardInterrupt\n  SystemExit\n```", "```py\n`def` read_or_default(filepath, default):\n    `try`:\n        `with` open(filepath) `as` f:\n            `return` f.read()\n    `except` FileNotFoundError:\n        `return` default\n```", "```py\n`try`:\n    1/0\n`except` ZeroDivisionError:\n    1+'x'\n```", "```py\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nZeroDivisionError: division by zero\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n File \"<stdin>\", line 3, in <module>\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n```", "```py\n`class` FileSystemDirectory:\n    `def` __init__(self):\n        self._files = {}\n\n    `def` write_file(self, filename, contents):\n        self._files[filename] = contents\n\n    `def` read_file(self, filename):\n        `try`:\n            return self._files[filename]\n        `except` KeyError:\n            `raise` FileNotFoundError(filename)\n```", "```py\nTraceback (most recent call last):\n File \"C:\\dev\\python\\faux_fs.py\", line 11, in read_file\n return self._files[filename]\nKeyError: 'data.txt'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n File \"C:\\dev\\python\\faux_fs.py\", line 20, in <module>\n print(fs.read_file(\"data.txt\"))\n File \"C:\\dev\\python\\faux_fs.py\", line 13, in read_file\n raise FileNotFoundError(filename)\nFileNotFoundError: data.txt\n```", "```py\n `raise` FileNotFoundError(filename) `from` `None`\n```", "```py\nTraceback (most recent call last):\n File \"C:\\dev\\python\\faux_fs.py\", line 20, in <module>\n print(fs.read_file(\"data.txt\"))\n File \"C:\\dev\\python\\faux_fs.py\", line 13, in read_file\n raise FileNotFoundError(filename) from None\nFileNotFoundError: data.txt\n```", "```py\n`class` InvalidAttributeError(AttributeError):\n    *`\"\"\"Used to indicate attributes that could never be valid.\"\"\"`*\n```", "```py\n`class` SomeFunkyClass:\n    *`\"\"\"much hypothetical functionality snipped\"\"\"`*\n    `def` __getattr__(self, name):\n        *`\"\"\"only clarifies the kind of attribute error\"\"\"`*\n        `if` name.startswith('_'):\n            `raise` InvalidAttributeError(\n                f'Unknown private attribute {name!r}'\n            )\n        `else`:\n            `raise` AttributeError(f'Unknown attribute {name!r}')\n```", "```py\ns = SomeFunkyClass()\n`try`:\n    value = getattr(s, thename)\n`except` InvalidAttributeError as err:\n    warnings.warn(str(err), stacklevel=2)\n    value = `None`\n*`# other cases of AttributeError just propagate, as they're unexpected`*\n```", "```py\n`class` CustomAttributeError(CustomException, AttributeError):\n    *`\"\"\"An AttributeError which is ALSO a CustomException.\"\"\"`*\n```", "```py\n`class` GrammarError(Exception):\n *`\"\"\"Base exception for grammar checking\"\"\"`*\n `def` __init__(self, found, suggestion):\n        self.found = found\n        self.suggestion = suggestion\n\n`class` InvalidWordError(GrammarError):\n  *`\"\"\"Misused or nonexistent word\"\"\"`*\n\n`class` MisspelledWordError(GrammarError):\n *`\"\"\"Spelling error\"\"\"`*\n\ninvalid_words = {\n    'irregardless': 'regardless',\n    \"ain't\": \"isn't\",\n} \nmisspelled_words = {\n    'tacco': 'taco',\n}\n\n`def` check_grammar(s):\n    exceptions = []\n `for` word `in` s.lower().split():\n `if` (suggestion := invalid_words.get(word)) `is` `not` `None`:\n exceptions.append(InvalidWordError(word, suggestion))\n `elif` (suggestion := misspelled_words.get(word)) `is` `not` `None``:`\n exceptions.append(MisspelledWordError(word, suggestion))\n `if` exceptions:\n `raise` ExceptionGroup('Found grammar errors', exceptions)\n```", "```py\ntext = \"Irregardless a hot dog ain't a tacco\"\n`try``:`\n check_grammar(text)\nexcept* InvalidWordError `as` iwe`:`\n print('\\n'.join(f'{e.found!r} is not a word, use {e.suggestion!r}'\n `for` e `in` iwe`.`exceptions))\nexcept* MisspelledWordError `as` mwe:\n  print('\\n'.join(f'Found {e.found!r}, perhaps you meant'\n                    f' {e.suggestion!r}?'\n `for` e `in` mwe`.`exceptions))\n`else``:`\n  print('No errors!')\n```", "```py\n'irregardless' is not a word, use 'regardless'\n\"ain't\" is not a word, use \"isn't\"\nFound 'tacco', perhaps you meant 'taco'?\n```", "```py\n`def` safe_divide_1(x, y):\n    `if` y==0:\n        print('Divide-by-0 attempt detected')\n `return` `None`\n    `else`:\n        `return` x/y\n```", "```py\n`def` safe_divide_2(x, y):\n    `try`:\n        `return` x/y\n    `except` ZeroDivisionError:\n        print('Divide-by-0 attempt detected')\n `return` `None`\n```", "```py\n`def` trycalling(obj, attrib, default, *args, **kwds):\n    `try`:\n        `return` getattr(obj, attrib)(*args, **kwds)\n    `except` AttributeError:\n        `return` default\n```", "```py\n`def` trycalling(obj, attrib, default, *args, **kwds):\n    `try`:\n        method = getattr(obj, attrib)\n    `except` AttributeError:\n        `return` default\n    `else`:\n        `return` method(*args, **kwds)\n```", "```py\nlogging.debug('foo is %r' % foo)\n```", "```py\nlogging.debug('foo is %r', foo)\n```", "```py\n`if` logging.getLogger().isEnabledFor(logging.DEBUG):\n    foo = cpu_intensive_function()\n    logging.debug('foo is %r', foo)\n```", "```py\nlogging.getLogger().setLevel(logging.DEBUG)\n```", "```py\nlogging.getLogger().setLevel(logging.ERROR)\n```", "```py\n`import` logging\nlogging.basicConfig(\n    format='%(asctime)s %(levelname)8s %(message)s',\n    filename='/tmp/logfile.txt', filemode='w')\n```", "```py\n`assert` *`condition`*[, *`expression`*]\n```"]