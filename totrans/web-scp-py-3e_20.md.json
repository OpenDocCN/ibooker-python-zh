["```py\nimport unittest\n\nclass TestAddition(unittest.TestCase):\n    def setUp(self):\n        print('Setting up the test')\n\n    def tearDown(self):\n        print('Tearing down the test')\n\n    def test_twoPlusTwo(self):\n        total = 2+2\n        self.assertEqual(4, total);\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\nSetting up the test\nTearing down the test\n.\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK\n\n```", "```py\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\nimport unittest\n\nclass TestWikipedia(unittest.TestCase):\n    bs = None\n    def setUpClass():\n        url = 'http://en.wikipedia.org/wiki/Monty_Python'\n        TestWikipedia.bs = BeautifulSoup(urlopen(url), 'html.parser')\n\n    def test_titleText(self):\n        pageTitle = TestWikipedia.bs.find('h1').get_text()\n        self.assertEqual('Monty Python', pageTitle);\n\n    def test_contentExists(self):\n        content = TestWikipedia.bs.find('div',{'id':'mw-content-text'})\n        self.assertIsNotNone(content)\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\nimport unittest\nimport re\nimport random\nfrom urllib.parse import unquote\n\nclass TestWikipedia(unittest.TestCase):\n\n    def test_PageProperties(self):\n        self.url = 'http://en.wikipedia.org/wiki/Monty_Python'\n        #Test the first 10 pages we encounter\n        for i in range(1, 10):\n            self.bs = BeautifulSoup(urlopen(self.url), 'html.parser')\n            titles = self.titleMatchesURL()\n            self.assertEquals(titles[0], titles[1])\n            self.assertTrue(self.contentExists())\n            self.url = self.getNextLink()\n        print('Done!')\n\n    def titleMatchesURL(self):\n        pageTitle = self.bs.find('h1').get_text()\n        urlTitle = self.url[(self.url.index('/wiki/')+6):]\n        urlTitle = urlTitle.replace('_', ' ')\n        urlTitle = unquote(urlTitle)\n        return [pageTitle.lower(), urlTitle.lower()]\n\n    def contentExists(self):\n        content = self.bs.find('div',{'id':'mw-content-text'})\n        if content is not None:\n            return True\n        return False\n\n    def getNextLink(self):\n        #Returns random link on page, using technique from Chapter 3\n        links = self.bs.find('div', {'id':'bodyContent'}).find_all(\n            'a', href=re.compile('^(/wiki/)((?!:).)*$'))\n        randomLink = random.SystemRandom().choice(links)\n        return 'https://wikipedia.org{}'.format(randomLink.attrs['href'])\n\nif __name__ == '__main__':\n    unittest.main()\n\n```", "```py\n======================================================================\nFAIL: test_PageProperties (__main__.TestWikipedia)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"15-3.py\", line 22, in test_PageProperties\n    self.assertTrue(self.titleMatchesURL())\nAssertionError: False is not true\n\n```", "```py\n======================================================================\nFAIL: test_PageProperties (__main__.TestWikipedia)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"15-3.py\", line 23, in test_PageProperties\n    self.assertEquals(titles[0], titles[1])\nAssertionError: 'lockheed u-2' != 'u-2 spy plane'\n```", "```py\ndriver = webdriver.Chrome()\ndriver.get('http://en.wikipedia.org/wiki/Monty_Python')\nassert 'Monty Python' in driver.title\ndriver.close()\n```", "```py\nusernameField = driver.find_element_by_name('username')\n```", "```py\nmyElement.click()\nmyElement.click_and_hold()\nmyElement.release()\nmyElement.double_click()\nmyElement.send_keys_to_element('content to enter')\n```", "```py\nfrom selenium import webdriver\nfrom selenium.webdriver.remote.webelement import WebElement\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver import ActionChains\nfrom selenium.webdriver.chrome.options import Options\n\nchrome_options = Options()\nchrome_options.add_argument('--headless')\n\ndriver = webdriver.Chrome(\n    executable_path='drivers/chromedriver', options=chrome_options)\ndriver.get('http://pythonscraping.com/pages/files/form.html')\n\nfirstnameField = driver.find_element_by_name('firstname')\nlastnameField = driver.find_element_by_name('lastname')\nsubmitButton = driver.find_element_by_id('submit')\n\n### METHOD 1 ###\n#firstnameField.send_keys('Ryan')\nlastnameField.send_keys('Mitchell')\nsubmitButton.click()\n################\n\n### METHOD 2 ###\nactions = ActionChains(driver).click(firstnameField)\n    .send_keys('Ryan')\n    .click(lastnameField)\n    .send_keys('Mitchell')\n    .send_keys(Keys.RETURN)\nactions.perform()\n################\n\nprint(driver.find_element_by_tag_name('body').text)\n\ndriver.close()\n\n```", "```py\nHello there, Ryan Mitchell!\n```", "```py\nfrom selenium import webdriver\nfrom selenium.webdriver.remote.webelement import WebElement\nfrom selenium.webdriver import ActionChains\nfrom selenium.webdriver.chrome.options import Options\nimport unittest\n\nclass TestDragAndDrop(unittest.TestCase):\n    driver = None\n\n    def setUp(self):\n        chrome_options = Options()\n        chrome_options.add_argument('--headless')\n        self.driver = webdriver.Chrome(\n            executable_path='drivers/chromedriver', options=chrome_options)\n        url = 'http://pythonscraping.com/pages/javascript/draggableDemo.html'\n        self.driver.get(url)\n\n    def tearDown(self):\n        driver.close()\n\n    def test_drag(self):\n        element = self.driver.find_element_by_id('draggable')\n        target = self.driver.find_element_by_id('div2')\n        actions = ActionChains(self.driver)\n        actions.drag_and_drop(element, target).perform()\n        self.assertEqual('You are definitely not a bot!',\n                         self.driver.find_element_by_id('message').text)\n\n```", "```py\nProve you are not a bot, by dragging the square from the blue area to the red \narea!\n```", "```py\nYou are definitely not a bot!\n```", "```py\ndriver = webdriver.Chrome()\ndriver.get('http://www.pythonscraping.com/')\ndriver.get_screenshot_as_file('tmp/pythonscraping.png')\n```"]