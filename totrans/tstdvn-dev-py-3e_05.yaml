- en: Chapter 1\. Getting Django Set Up Using a Functional Test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TDD isn’t something that comes naturally. It’s a discipline, like a martial
    art, and just like in a Kung Fu movie, you need a bad-tempered and unreasonable
    master to force you to learn the discipline. Ours is the Testing Goat.
  prefs: []
  type: TYPE_NORMAL
- en: Obey the Testing Goat! Do Nothing Until You Have a Test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Testing Goat is the unofficial mascot^([1](ch01.xhtml#id203)) of TDD in
    the Python testing community. It probably means different things to different
    people, but, to me, the Testing Goat is a voice inside my head that keeps me on
    the True Path of Testing—​like one of those little angels or demons that pop up
    above your shoulder in the cartoons, but with a very niche set of concerns. I
    hope, with this book, to install the Testing Goat inside your head too.
  prefs: []
  type: TYPE_NORMAL
- en: So we’ve decided to build a web app, even if we’re not quite sure what it’s
    going to do yet. Normally the first step in web development is getting your web
    framework installed and configured. *Download this, install that, configure the
    other, run the script*…​ but TDD requires a different mindset. When you’re doing
    TDD, you always have the Testing Goat inside your head—​single-minded as goats
    are—​bleating “Test first, test first!”
  prefs: []
  type: TYPE_NORMAL
- en: 'In TDD the first step is always the same: *write a test*.'
  prefs: []
  type: TYPE_NORMAL
- en: '*First* we write the test; *then* we run it and check that it fails as expected.
    *Only then* do we go ahead and build some of our app. Repeat that to yourself
    in a goat-like voice. I know I do.'
  prefs: []
  type: TYPE_NORMAL
- en: Another thing about goats is that they take one step at a time. That’s why they
    seldom fall off things, see, no matter how steep they are. As you can see in [Figure 1-1](#tree_goat).
  prefs: []
  type: TYPE_NORMAL
- en: '![A picture of a goat up a tree](assets/twp2_0101.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-1\. Goats are more agile than you think (source: [Caitlin Stewart,
    on Flickr](http://www.flickr.com/photos/caitlinstewart/2846642630/))'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We’ll proceed with nice small steps; we’re going to use *Django*, which is a
    popular Python web framework, to build our app.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we want to do is check that we’ve got Django installed and that
    it’s ready for us to work with. The *way* we’ll check is by confirming that we
    can spin up Django’s development server and actually see it serving up a web page,
    in our web browser, on our local computer. We’ll use the *Selenium* browser automation
    tool for this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Python file called *functional_tests.py*, wherever you want to
    keep the code for your project, and enter the following code. If you feel like
    making a few little goat noises as you do it, it may help:'
  prefs: []
  type: TYPE_NORMAL
- en: functional_tests.py
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'That’s our first *functional test* (FT); I’ll talk more about what I mean by
    functional tests, and how they contrast with unit tests, in a bit. For now, it’s
    enough to assure ourselves that we understand what it’s doing:'
  prefs: []
  type: TYPE_NORMAL
- en: Starting a Selenium “webdriver” to pop up a real Firefox browser window.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using it to open up a web page which we’re expecting to be served from the local
    computer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking (making a test assertion) that the page has the word “Congratulations!”
    in its title.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If all goes well we print OK.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s try running it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You should see a browser window pop up and try to open *localhost:8000*, and
    show the “Unable to connect” error page. If you switch back to your console, you’ll
    see the big ugly error message, telling us that Selenium hit an error page. And
    then, you will probably be irritated at the fact that it left the Firefox window
    lying around your desktop for you to tidy up. We’ll fix that later!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If, instead, you see an error trying to import Selenium, or an error trying
    to find something called “geckodriver”, you might need to go back and have another
    look at the "[Prerequisites and Assumptions](preface02.xhtml#pre-requisites)"
    section.
  prefs: []
  type: TYPE_NORMAL
- en: For now though, we have a *failing test*, so that means we’re allowed to start
    building our app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Django Up and Running
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since you’ve definitely read “[Prerequisites and Assumptions](preface02.xhtml#pre-requisites)”
    by now, you’ve already got Django installed (right?). The first step in getting
    Django up and running is to create a *project*, which will be the main container
    for our site. Django provides a little command-line tool for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Don’t forget that “.” at the end; it’s important!
  prefs: []
  type: TYPE_NORMAL
- en: 'That will create a file called *manage.py* in your current folder, and a subfolder
    called *superlists*, with more stuff inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Make sure your project folder looks exactly like this! If you see two nested
    folders called superlists, it’s because you forgot the “.” above. Delete them
    and try again, or there will be lots of confusion with paths and working directories.
  prefs: []
  type: TYPE_NORMAL
- en: The *superlists* folder is intended for stuff that applies to the whole project—​like
    *settings.py*, for example, which is used to store global configuration information
    for the site.
  prefs: []
  type: TYPE_NORMAL
- en: 'But the main thing to notice is *manage.py*. That’s Django’s Swiss Army knife,
    and one of the things it can do is run a development server. Let’s try that now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: That’s Django’s development server now up and running on our machine.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: It’s safe to ignore that message about “unapplied migrations” for now. We’ll
    look at migrations in [Chapter 5](ch05.xhtml#chapter_post_and_database).
  prefs: []
  type: TYPE_NORMAL
- en: 'Leave it there and open another command shell. Navigate to your project folder,
    activate your virtualenv, and then try running our test again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Not much action on the command line, but you should notice two things: firstly,
    there was no ugly `AssertionError` and secondly, the Firefox window that Selenium
    popped up had a different-looking page on it.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you see an error saying “no module named selenium”, you’ve forgotten to activate
    your virtualenv. Check the [Prerequisites and Assumptions](preface02.xhtml#pre-requisites)
    section again if you need to.
  prefs: []
  type: TYPE_NORMAL
- en: Well, it may not look like much, but that was our first ever passing test! Hooray!
  prefs: []
  type: TYPE_NORMAL
- en: If it all feels a bit too much like magic, like it wasn’t quite real, why not
    go and take a look at the dev server manually, by opening a web browser yourself
    and visiting *http://localhost:8000*? You should see something like [Figure 1-2](#installed_successfully_screenshot).
  prefs: []
  type: TYPE_NORMAL
- en: You can quit the development server now if you like, back in the original shell,
    using Ctrl-C.
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of Django Installed Successfully Screen](assets/twp2_0102.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-2\. It worked!
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Starting a Git Repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There’s one last thing to do before we finish the chapter: start to commit
    our work to a *version control system* (VCS). If you’re an experienced programmer
    you don’t need to hear me preaching about version control, but if you’re new to
    it please believe me when I say that VCS is a must-have. As soon as your project
    gets to be more than a few weeks old and a few lines of code, having a tool available
    to look back over old versions of code, revert changes, explore new ideas safely,
    even just as a backup…​ It’s hard to overstate how useful that is. TDD goes hand
    in hand with version control, so I want to make sure I impart how it fits into
    the workflow.'
  prefs: []
  type: TYPE_NORMAL
- en: So, our first commit! If anything it’s a bit late; shame on us. We’re using
    *Git* as our VCS, ’cos it’s the best.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by doing the `git init` to start the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s take a look and see what files we want to commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a few things in here that we *don’t* want under version control:
    *db.sqlite3* is the database file, *geckodriver.log* contains Selenium debug output,
    and finally our virtualenv shouldn’t be in git either. We’ll add all of them to
    a special file called *.gitignore* which, um, tells Git what to ignore:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we can add the rest of the contents of the current folder, “.”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Oops! We’ve got a bunch of *.pyc* files in there; it’s pointless to commit
    those. Let’s remove them from Git and add them to *.gitignore* too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now let’s see where we are…​
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You’ll see I’m using `git status` a lot—​so much so that I often alias it to
    `git st`…​I’m not telling you how to do that though; I leave you to discover the
    secrets of Git aliases on your own!
  prefs: []
  type: TYPE_NORMAL
- en: Looking good—​we’re ready to do our first commit!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: When you type `git commit`, it will pop up an editor window for you to write
    your commit message in. Mine looked like [Figure 1-3](#first_git_commit).^([2](ch01.xhtml#id212))
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of git commit vi window](assets/twp2_0103.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-3\. First Git commit
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you want to really go to town on Git, this is the time to also learn about
    how to push your work to a cloud-based VCS hosting service like GitHub or GitLab.
    They’ll be useful if you think you want to follow along with this book on different
    computers. I leave it to you to find out how they work; they have excellent documentation.
    Alternatively, you can wait until [Link to Come] when we’ll be using one for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: That’s it for the VCS lecture. Congratulations! You’ve written a functional
    test using Selenium, and you’ve gotten Django installed and running, in a certifiable,
    test-first, goat-approved TDD way. Give yourself a well-deserved pat on the back
    before moving on to [Chapter 2](ch02.xhtml#chapter_02_unittest).
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch01.xhtml#id203-marker)) OK more of a minor running joke from Pycon in
    the mid ’10s, which I am single-handedly trying to make into a Thing.
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch01.xhtml#id212-marker)) Did a strange terminal-based editor (the dreaded
    vim) pop up and you had no idea what to do? Or did you see a message about account
    identity and `git config --global user.username`? Check out the Git manual and
    its [basic configuration section.](http://git-scm.com/book/en/Customizing-Git-Git-Configuration)
    PS - to quit vim, it’s Esc, then `:q!`
  prefs: []
  type: TYPE_NORMAL
