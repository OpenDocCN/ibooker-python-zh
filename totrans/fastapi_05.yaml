- en: Chapter 3\. FastAPI Tour
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FastAPI is a modern, fast (high-performance) web framework for building APIs
    with Python 3.6+ based on standard Python type hints.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Sebastián Ramírez, creator of FastAPI
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Preview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[FastAPI](https://fastapi.tiangolo.com) was announced in 2018 by [Sebastián
    Ramírez](https://tiangolo.com). It’s more modern in many senses than most Python
    web frameworks—taking advantage of features that have been added to Python 3 in
    the last few years. This chapter is a quick overview of FastAPI’s main features,
    with emphasis on the first things that you’ll want to know: how to handle web
    requests and responses.'
  prefs: []
  type: TYPE_NORMAL
- en: What Is FastAPI?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like any web framework, FastAPI helps you build web applications. Every framework
    is designed to make some operations easier—by features, omissions, and defaults.
    As the name implies, FastAPI targets development of web APIs, although you can
    use it for traditional web content applications as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'The FastAPI website claims these advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: Performance
  prefs: []
  type: TYPE_NORMAL
- en: As fast as Node.js and Go in some cases, unusual for Python frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Faster development
  prefs: []
  type: TYPE_NORMAL
- en: No sharp edges or oddities.
  prefs: []
  type: TYPE_NORMAL
- en: Better code quality
  prefs: []
  type: TYPE_NORMAL
- en: Type hinting and models help reduce bugs.
  prefs: []
  type: TYPE_NORMAL
- en: Autogenerated documentation and test pages
  prefs: []
  type: TYPE_NORMAL
- en: Much easier than hand-editing OpenAPI descriptions.
  prefs: []
  type: TYPE_NORMAL
- en: 'FastAPI uses the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Python type hints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starlette for the web machinery, including async support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pydantic for data definitions and validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Special integration to leverage and extend the others
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This combination makes a pleasing development environment for web applications,
    especially RESTful web services.
  prefs: []
  type: TYPE_NORMAL
- en: A FastAPI Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s write a teeny FastAPI application—a web service with a single endpoint.
    For now, we’re in what I’ve called the Web layer, handling only web requests and
    responses. First, install the basic Python packages that we’ll be using:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [FastAPI](https://fastapi.tiangolo.com) framework: `pip install fastapi`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The [Uvicorn](https://www.uvicorn.org) web server: `pip install uvicorn`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The [HTTPie](https://httpie.io) text web client: `pip install httpie`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The [Requests](https://requests.readthedocs.io) synchronous web client package:
    `pip install requests`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The [HTTPX](https://www.python-httpx.org) synchronous/asynchronous web client
    package: `pip install httpx`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although [curl](https://curl.se) is the best known text web client, I think
    HTTPie is easier to use. Also, it defaults to JSON encoding and decoding, which
    is a better match for FastAPI. Later in this chapter, you’ll see a screenshot
    that includes the syntax of the curl command line needed to access a particular
    endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s shadow an introverted web developer in [Example 3-1](#ex-3-1) and save
    this code as the file *hello.py*.
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-1\. A shy endpoint (hello.py)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are some points to notice:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app` is the top-level FastAPI object that represents the whole web application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@app.get("/hi")` is a *path decorator*. It tells FastAPI the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A request for the URL `"/hi"` on this server should be directed to the following
    function.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This decorator applies only to the HTTP `GET` verb. You can also respond to
    a `"/hi"` URL sent with the other HTTP verbs (`PUT`, `POST`, etc.), each with
    a separate function.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`def greet()` is a *path function*—the main point of contact with HTTP requests
    and responses. In this example, it has no arguments, but the following sections
    show that there’s much more under the FastAPI hood.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next step is to run this web application in a web server. FastAPI itself
    does not include a web server but recommends Uvicorn. You can start Uvicorn and
    the FastAPI web application in two ways: externally or internally.'
  prefs: []
  type: TYPE_NORMAL
- en: To start Uvicorn externally, via the command line, see [Example 3-2](#ex-3-2).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-2\. Start Uvicorn with the command line
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `hello` refers to the *hello.py* file, and `app` is the FastAPI variable
    name within it.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can start Uvicorn internally in the application itself, as
    in [Example 3-3](#ex-3-3).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-3\. Start Uvicorn internally
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In either case, that `reload` tells Uvicorn to restart the web server if *hello.py*
    changes. In this chapter, we’re going to use this automatic reloading a lot.
  prefs: []
  type: TYPE_NORMAL
- en: Either case will use port 8000 on your machine (named `localhost`) by default.
    Both the external and internal methods have `host` and `port` arguments if you’d
    prefer something else.
  prefs: []
  type: TYPE_NORMAL
- en: Now the server has a single endpoint (*/hi*) and is ready for requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s test with multiple web clients:'
  prefs: []
  type: TYPE_NORMAL
- en: For the browser, type the URL in the top location bar.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For HTTPie, type the command shown (the `$` stands for whatever command prompt
    you have for your system shell).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For Requests or HTTPX, use Python in interactive mode, and type after the `>>>`
    prompt.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As mentioned in the Preface, what you type is in a
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: and the output is in a
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Examples [3-4](#ex-3-4) through [3-7](#ex-3-7) show different ways to test the
    web server’s brand-new */hi* endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-4\. Test /hi in the browser
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Example 3-5\. Test /hi with Requests
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Example 3-6\. Test /hi with HTTPX, which is almost identical to Requests
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: It doesn’t matter if you use Requests or HTTPX to test FastAPI routes. But [Chapter 13](ch13.html#ch13)
    shows cases where HTTPX is useful when making other asynchronous calls. So the
    rest of the examples in this chapter use Requests.
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-7\. Test /hi with HTTPie
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Use the `-b` argument in [Example 3-8](#ex-3-8) to skip the response headers
    and print only the body.
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-8\. Test /hi with HTTPie, printing only the response body
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 3-9](#ex-3-9) gets the full request headers as well as the response
    with `-v`.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-9\. Test /hi with HTTPie and get everything
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Some examples in this book show the default HTTPie output (response headers
    and body), and others show just the body.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP Requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Example 3-9](#ex-3-9) included only one specific request: a `GET` request
    for the */hi* URL on the server `localhost`, port `8000`.'
  prefs: []
  type: TYPE_NORMAL
- en: Web requests squirrel data in different parts of an HTTP request, and FastAPI
    lets you access them smoothly. From the sample request in [Example 3-9](#ex-3-9),
    [Example 3-10](#ex-3-10) shows the HTTP request that the `http` command sent to
    the web server.
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-10\. An HTTP request
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This request contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The verb (`GET`) and path (`/hi`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any *query parameters* (text after any `?` in this case, none)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other HTTP headers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No request body content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'FastAPI unsquirrels these into handy definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Header`'
  prefs: []
  type: TYPE_NORMAL
- en: The HTTP headers
  prefs: []
  type: TYPE_NORMAL
- en: '`Path`'
  prefs: []
  type: TYPE_NORMAL
- en: The URL
  prefs: []
  type: TYPE_NORMAL
- en: '`Query`'
  prefs: []
  type: TYPE_NORMAL
- en: The query parameters (after the `?` at the end of the URL)
  prefs: []
  type: TYPE_NORMAL
- en: '`Body`'
  prefs: []
  type: TYPE_NORMAL
- en: The HTTP body
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The way that FastAPI provides data from various parts of the HTTP requests is
    one of its best features and an improvement on how most Python web frameworks
    do it. All the arguments that you need can be declared and provided directly inside
    the path function, using the definitions in the preceding list (`Path`, `Query`,
    etc.), and by functions that you write. This uses a technique called *dependency
    injection*, which will be discussed as we go along and expanded on in [Chapter 6](ch06.html#ch06).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s make our earlier application a little more personal by adding a parameter
    called `who` that addresses that plaintive `Hello?` to someone. We’ll try different
    ways to pass this new parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: In the URL *path*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a *query* parameter, after the `?` in the URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the HTTP *body*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As an HTTP *header*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL Path
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Edit *hello.py* in [Example 3-11](#ex-3-11).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-11\. Return the greeting path
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Once you save this change from your editor, Uvicorn should restart. (Otherwise,
    we’d create *hello2.py*, etc. and rerun Uvicorn each time.) If you have a typo,
    keep trying until you fix it, and Uvicorn won’t give you a hard time.
  prefs: []
  type: TYPE_NORMAL
- en: Adding that `{who}` in the URL (after `@app.get`) tells FastAPI to expect a
    variable named `who` at that position in the URL. FastAPI then assigns it to the
    `who` argument in the following `greet()` function. This shows coordination between
    the path decorator and the path function.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Do not use a Python f-string for the amended URL string (`"/hi/{who}"`) here.
    The curly brackets are used by FastAPI itself to match URL pieces as path parameters.
  prefs: []
  type: TYPE_NORMAL
- en: In Examples [3-12](#ex-3-12) through [3-14](#ex-3-14), test this modified endpoint
    with the various methods discussed earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-12\. Test /hi/Mom in the browser
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Example 3-13\. Test /hi/Mom with HTTPie
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Example 3-14\. Test /hi/Mom with Requests
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In each case, the string `"Mom"` is passed as part of the URL, passed to the
    `greet()` path function as the `who` variable, and returned as part of the response.
  prefs: []
  type: TYPE_NORMAL
- en: The response in each case is the JSON string (with single or double quotes,
    depending on which test client you used) `"Hello? Mom?"`.
  prefs: []
  type: TYPE_NORMAL
- en: Query Parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Query parameters* are the `*name=value*` strings after the `?` in a URL, separated
    by `&` characters. Edit *hello.py* again in [Example 3-15](#ex-3-15).'
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-15\. Return the greeting query parameter
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The endpoint function is defined as `greet(who)` again, but `{who}` isn’t in
    the URL on the previous decorator line this time, so FastAPI now assumes that
    `who` is a query parameter. Test with Examples [3-16](#ex-3-16) and [3-17](#ex-3-17).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-16\. Test [Example 3-15](#ex-3-15) with your browser
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Example 3-17\. Test [Example 3-15](#ex-3-15) with HTTPie
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In [Example 3-18](#ex-3-18), you can call HTTPie with a query parameter argument
    (note the `==`).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-18\. Test [Example 3-15](#ex-3-15) with HTTPie and params
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You can have more than one of these arguments for HTTPie, and it’s easier to
    type these as space-separated arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Examples [3-19](#ex-3-19) and [3-20](#ex-3-20) show the same alternatives for
    Requests.
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-19\. Test [Example 3-15](#ex-3-15) with Requests
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Example 3-20\. Test [Example 3-15](#ex-3-15) with Requests and params
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In each case, you provide the `"Mom"` string in a new way, and get it to the
    path function and through to the eventual response.
  prefs: []
  type: TYPE_NORMAL
- en: Body
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can provide path or query parameters to a `GET` endpoint, but not values
    from the request body. In HTTP, `GET` is supposed to be *idempotent*—a computery
    term for *ask the same question, get the same answer*. HTTP `GET` is supposed
    to only return stuff. The request body is used to send stuff to the server when
    creating (`POST`) or updating (`PUT` or `PATCH`). [Chapter 9](ch09.html#ch09)
    shows a way around this.
  prefs: []
  type: TYPE_NORMAL
- en: So, in [Example 3-21](#ex-3-21), let’s change the endpoint from a `GET` to a
    `POST`. (Technically, we’re not creating anything, so a `POST` isn’t kosher, but
    if the RESTful Overlords sue us, then hey, check out the cool courthouse.)
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-21\. Return the greeting body
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'That `Body(embed=True)` is needed to tell FastAPI that, this time, we get the
    value of `who` from the JSON-formatted request body. The `embed` part means that
    it should look like `{"who": "Mom"}` rather than just `"Mom"`.'
  prefs: []
  type: TYPE_NORMAL
- en: Try testing with HTTPie in [Example 3-22](#ex-3-22), using `-v` to show the
    generated request body (and note the single `=` parameter to indicate JSON body
    data).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-22\. Test [Example 3-21](#ex-3-21) with HTTPie
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: And finally, test with Requests in [Example 3-23](#ex-3-23), which uses its
    `json` argument to pass JSON-encoded data in the request body.
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-23\. Test [Example 3-21](#ex-3-21) with Requests
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: HTTP Header
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, let’s try passing the greeting argument as an HTTP header in [Example 3-24](#ex-3-24).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-24\. Return the greeting header
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Let’s test this one just with HTTPie in [Example 3-25](#ex-3-25). It uses `*name:value*`
    to specify an HTTP header.
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-25\. Test [Example 3-24](#ex-3-24) with HTTPie
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: FastAPI converts HTTP header keys to lowercase, and converts a hyphen (`-`)
    to an underscore (`_`). So you could print the value of the HTTP `User-Agent`
    header like this in Examples [3-26](#ex-3-26) and [3-27](#ex-3-27).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-26\. Return the `User-Agent` header (hello.py)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Example 3-27\. Test the `User-Agent` header with HTTPie
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Multiple Request Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use more than one of these methods in the same path function. That is,
    you can get data from the URL, query parameters, the HTTP body, HTTP headers,
    cookies, and so on. And you can write your own dependency functions that process
    and combine them in special ways, such as for pagination or authentication. You’ll
    see some of these in [Chapter 6](ch06.html#ch06) and in various chapters in [Part III](part03.html#part3).
  prefs: []
  type: TYPE_NORMAL
- en: Which Method Is Best?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are a few recommendations:'
  prefs: []
  type: TYPE_NORMAL
- en: When passing arguments in the URL, following RESTful guidelines is standard
    practice.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query strings are usually used to provide optional arguments, like pagination.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The body is usually used for larger inputs, like whole or partial models.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In each case, if you provide type hints in your data definitions, your arguments
    will be automatically type-checked by Pydantic. This ensures that they’re both
    present and correct.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP Responses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, FastAPI converts whatever you return from your endpoint function
    to JSON; the HTTP response has a header line `Content-type: application/json`.
    So, although the `greet()` function initially returns the string `"Hello? World?"`,
    FastAPI converts it to JSON. This is one of the defaults chosen by FastAPI to
    streamline API development.'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the Python string `"Hello? World?"` is converted to its equivalent
    JSON string `"Hello? World?"`, which is the same darn string. But anything that
    you return is converted to JSON, whether built-in Python types or Pydantic models.
  prefs: []
  type: TYPE_NORMAL
- en: Status Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, FastAPI returns a `200` status code; exceptions raise `4*xx*` codes.
  prefs: []
  type: TYPE_NORMAL
- en: In the path decorator, specify the HTTP status code that should be returned
    if all goes well (exceptions will generate their own codes and override it). Add
    the code from [Example 3-28](#ex-3-28) somewhere in your *hello.py* (just to avoid
    showing the whole file again and again), and test it with [Example 3-29](#ex-3-29).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-28\. Specify the HTTP status code (add to hello.py)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Example 3-29\. Test the HTTP status code
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Headers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can inject HTTP response headers, as in [Example 3-30](#ex-3-30) (you don’t
    need to return `response`).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-30\. Set the HTTP headers (add to hello.py)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Let’s see if it worked ([Example 3-31](#ex-3-31)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-31\. Test the response HTTP headers
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Response Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Response types (import these classes from `fastapi.responses`) include the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`JSONResponse` (the default)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTMLResponse`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PlainTextResponse`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RedirectResponse`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileResponse`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StreamingResponse`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I’ll say more about the last two in [Chapter 15](ch15.html#ch15).
  prefs: []
  type: TYPE_NORMAL
- en: 'For other output formats (also known as *MIME types*), you can use a generic
    `Response` class, which needs the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`content`'
  prefs: []
  type: TYPE_NORMAL
- en: String or bytes
  prefs: []
  type: TYPE_NORMAL
- en: '`media_type`'
  prefs: []
  type: TYPE_NORMAL
- en: The string MIME type
  prefs: []
  type: TYPE_NORMAL
- en: '`status_code`'
  prefs: []
  type: TYPE_NORMAL
- en: HTTP integer status code
  prefs: []
  type: TYPE_NORMAL
- en: '`headers`'
  prefs: []
  type: TYPE_NORMAL
- en: A `dict` of strings
  prefs: []
  type: TYPE_NORMAL
- en: Type Conversion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The path function can return anything, and by default (using `JSONResponse`),
    FastAPI will convert it to a JSON string and return it, with the matching HTTP
    response headers `Content-Length` and `Content-Type`. This includes any Pydantic
    model class.
  prefs: []
  type: TYPE_NORMAL
- en: But how does it do this? If you’ve used the Python json library, you’ve probably
    seen that it raises an exception when given some data types, such as `datetime`.
    FastAPI uses an internal function called `jsonable_encoder()` to convert any data
    structure to a “JSONable” Python data structure, then calls the usual `json.dumps()`
    to turn that into a JSON string. [Example 3-32](#ex-3-32) shows a test that you
    can run with pytest.
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-32\. Use `jsonable_encoder()` to avoid JSON kabooms
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Model Types and response_model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It’s possible to have different classes with many of the same fields, except
    one is specialized for user input, one for output, and one for internal use. Some
    reasons for these variants could include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove some sensitive information from the output—like *deidentifying* personal
    medical data, if you’ve encountered Health Insurance Portability and Accountability
    Act (HIPAA) requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add fields to the user input (like a creation date and time).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Example 3-33](#ex-3-33) shows three related classes for a contrived case:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TagIn` is the class that defines what the user needs to provide (in this case,
    just a string called `tag`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Tag` is made from a `TagIn` and adds two fields: `created` (when this `Tag`
    was created) and `secret` (an internal string, maybe stored in a database, but
    never supposed to be exposed to the world).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TagOut` is the class that defines what can be returned to a user (by a lookup
    or search endpoint). It contains the `tag` field from the original `TagIn` object
    and its derived `Tag` object, plus the `created` field generated for `Tag`, but
    not `secret`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example 3-33\. Model variations (model/tag.py)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: You can return data types other than the default JSON from a FastAPI path function
    in different ways. One method is to use the `response_model` argument in the path
    decorator to goose FastAPI to return something else. FastAPI will drop any fields
    that were in the object that you returned but are not in the object specified
    by `response_model`.
  prefs: []
  type: TYPE_NORMAL
- en: In [Example 3-34](#ex-3-34), pretend that you wrote a new service module called
    *service/tag.py* with the `create()` and `get()` functions that give this web
    module something to call. Those lower-stack details don’t matter here. The important
    point is the `get_one()` path function at the bottom, and the `response_model=TagOut`
    in its path decorator. That automatically changes an internal `Tag` object to
    a sanitized `TagOut` object.
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-34\. Return a different response type with `response_model` (web/tag.py)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Even though we returned a `Tag`, `response_model` will convert it to a `TagOut`.
  prefs: []
  type: TYPE_NORMAL
- en: Automated Documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section assumes that you’re running the web application from [Example 3-21](#ex-3-21),
    the version that sends the `who` parameter in the HTTP body via a POST request
    to *http://localhost:8000/hi*.
  prefs: []
  type: TYPE_NORMAL
- en: Convince your browser to visit the URL **`http://localhost:8000/docs`**.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll see something that starts like [Figure 3-1](#fig-03-1) (I’ve cropped
    the following screenshots to emphasize particular areas).
  prefs: []
  type: TYPE_NORMAL
- en: '![Docs Page](assets/fapi_0301.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-1\. Generated documentation page
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Where did that come from?
  prefs: []
  type: TYPE_NORMAL
- en: FastAPI generates an OpenAPI specification from your code, and includes this
    page to display *and test* all your endpoints. This is just one ingredient of
    its secret sauce.
  prefs: []
  type: TYPE_NORMAL
- en: Click the down arrow on the right side of the green box to open it for testing
    ([Figure 3-2](#fig-03-2)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Docs Page](assets/fapi_0302.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-2\. Open documentation page
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Click that “Try it out” button on the right. Now you’ll see an area that will
    let you enter a value in the body section ([Figure 3-3](#fig-03-3)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Docs Page](assets/fapi_0303.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-3\. Data entry page
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Click that `"string"`. Change it to `**"Cousin Eddie"**` (keep the double quotes
    around it). Then click the bottom blue Execute button.
  prefs: []
  type: TYPE_NORMAL
- en: Now look at the Responses section below the Execute button ([Figure 3-4](#fig-03-4)).
  prefs: []
  type: TYPE_NORMAL
- en: The “Response body” box shows that Cousin Eddie turned up.
  prefs: []
  type: TYPE_NORMAL
- en: So, this is yet another way to test the site (besides the earlier examples using
    the browser, HTTPie, and Requests).
  prefs: []
  type: TYPE_NORMAL
- en: '![Docs Page](assets/fapi_0304.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-4\. Response page
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: By the way, as you can see in the Curl box of the Responses display, using curl
    for command-line testing instead of HTTPie would have required more typing. HTTPie’s
    automatic JSON encoding helps here.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This automated documentation is actually a big, furry deal. As your web service
    grows to hundreds of endpoints, a documentation and testing page that’s always
    up-to-date is helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Complex Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These examples showed only how to pass a single string to an endpoint. Many
    endpoints, especially `GET` or `DELETE` ones, may need no arguments at all, or
    only a few simple ones, like strings and numbers. But when creating (`POST`) or
    modifying (`PUT` or `PATCH`) a resource, we usually need more complex data structures.
    [Chapter 5](ch05.html#ch05) shows how FastAPI uses Pydantic and data models to
    implement these cleanly.
  prefs: []
  type: TYPE_NORMAL
- en: Review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we used FastAPI to create a website with a single endpoint.
    Multiple web clients tested it: a web browser, the HTTPie text program, the Requests
    Python package, and the HTTPX Python package. Starting with a simple `GET` call,
    request arguments went to the server via the URL path, a query parameter, and
    an HTTP header. Then, the HTTP body was used to send data to a `POST` endpoint.
    Later, the chapter showed how to return various HTTP response types. Finally,
    an automatically generated form page provided both documentation and live forms
    for a fourth test client.'
  prefs: []
  type: TYPE_NORMAL
- en: This FastAPI overview will be expanded in [Chapter 8](ch08.html#ch08).
  prefs: []
  type: TYPE_NORMAL
