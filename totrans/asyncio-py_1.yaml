- en: Chapter 1\. Introducing Asyncio
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章。介绍 Asyncio
- en: My story is a lot like yours, only more interesting ’cause it involves robots.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我的故事和你的很相似，只是更有趣，因为它涉及到了机器人。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Bender, *Futurama* episode “30% Iron Chef”
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Bender，《飞出个未来》第三季第十集“30% 铁匠”
- en: 'The most common question I receive about Asyncio in Python 3 is this: “What
    is it, and what do I do with it?” The answer you’ll hear most frequently is likely
    something about being able to execute multiple concurrent HTTP requests in a single
    program. But there is more to it than that—much more. Asyncio requires changing
    how you think about structuring programs.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3 中关于 Asyncio 的最常见问题是：“它是什么，我该怎么用？”你最常听到的答案可能是关于能够在单个程序中执行多个并发的 HTTP
    请求。但事实上它不仅仅是这样—远不止如此。Asyncio 要求改变你思考程序结构的方式。
- en: The following story provides a backdrop for gaining this understanding. The
    central focus of Asyncio is on how best to best perform multiple tasks at the
    same time—and not just any tasks, but specifically tasks that involve waiting
    periods. The key insight required with this style of programming is that while
    you wait for *this* task to complete, work on *other* tasks can be performed.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以下故事提供了获得这种理解的背景。Asyncio 的核心焦点是如何最好地同时执行多个任务—不仅仅是任何任务，而是特别涉及等待周期的任务。这种编程风格所需的关键见解是，当你等待
    *这个* 任务完成时，可以执行 *其他* 任务。
- en: The Restaurant of ThreadBots
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ThreadBots 餐厅
- en: The year is 2051, and you find yourself in the restaurant business. Automation,
    largely by robot workers, powers most of the economy, but it turns out that humans
    still enjoy going out to eat once in a while. In your restaurant, all the employees
    are robots—humanoid, of course, but unmistakably robots. The most successful manufacturer
    of robots is Threading Inc., and robot workers from this company have come to
    be called “ThreadBots.”
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是 2051 年，你发现自己在餐饮业务中。大部分经济都是由机器人工人主导的自动化推动的，但事实证明，人类偶尔还是喜欢出去吃饭。在你的餐厅里，所有的员工都是机器人—当然是
    humanoid 的，但毫无疑问是机器人。最成功的机器人制造商是 Threading Inc.，这家公司的机器人工人被称为“ThreadBots”。
- en: Except for this small robotic detail, your restaurant looks and operates like
    one of those old-time establishments from, say, 2020\. Your guests will be looking
    for that vintage experience. They want fresh food prepared from scratch. They
    want to sit at tables. They want to wait for their meals—but only a little. They
    want to pay at the end, and they sometimes even want to leave a tip, for old times’
    sake.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这个小小的机器人细节，你的餐厅看起来和运作起来就像是从 2020 年左右的那些古老的餐厅一样。你的客人会寻找那种老式的体验。他们想要新鲜的食物，从头开始准备。他们想要坐在桌子旁。他们愿意等待他们的餐点——但只是一点点。他们想要在最后付款，有时甚至想要留小费，怀旧一下。
- en: 'Being new to the robotic restaurant business, you do what every other restaurateur
    does and hire a small fleet of robots: one to greet diners at the front desk (GreetBot),
    one to wait tables and take orders (WaitBot), one to do the cooking (ChefBot),
    and one to manage the bar (WineBot).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作为机器人餐厅业务的新手，你像其他所有餐饮业者一样，雇佣了一小群机器人：一个在前台迎接客人（GreetBot），一个招待客人和接受订单（WaitBot），一个负责烹饪（ChefBot），一个管理酒吧（WineBot）。
- en: Hungry diners arrive at the front desk and are welcomed by GreetBot, your front-of-house
    ThreadBot. They are then directed to a table, and once they are seated, WaitBot
    takes their order. Then WaitBot brings that order to the kitchen on a slip of
    paper (because you want to preserve that old-time experience, remember?). ChefBot
    looks at the order on the slip and begins preparing the food. WaitBot will periodically
    check whether the food is ready, and when it is, will immediately take the dishes
    to the customers’ table. When the guests are ready to leave, they return to GreetBot,
    who calculates the bill, takes their payment, and graciously wishes them a pleasant
    evening.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 饥饿的客人来到前台，被前台 ThreadBot 的 GreetBot 欢迎。然后他们被引导到一张桌子旁坐下，一旦坐定，WaitBot 接受他们的订单。然后
    WaitBot 将订单用一张纸条带到厨房（因为你想保留那种古老的体验，记得吗？）。ChefBot 看着纸条上的订单开始准备食物。WaitBot 将定期检查食物是否准备好，一旦准备好，将立即把菜品送到客人的桌子上。当客人准备离开时，他们回到
    GreetBot 那里，GreetBot 计算账单，收取款项，并亲切地祝他们晚上愉快。
- en: Your restaurant is a hit, and you soon grow to have a large customer base. Your
    robot employees do exactly what they’re told, and they are perfectly good at the
    tasks you assign them. Everything is going really well, and you couldn’t be happier.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你的餐厅很受欢迎，很快就有了大量的客户群。你的机器人员工完全按照你的要求做事，他们在分配给他们的任务上非常出色。一切都进展得很顺利，你再开心不过了。
- en: Over time, however, you do begin to notice some problems. Oh, it’s nothing truly
    serious; just a few things that seem to go wrong. Every other robotic restaurant
    owner seems to have similar niggling glitches. It is a little worrying that these
    problems seem to get worse the more successful you become.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，您开始注意到一些问题。哦，这并不是真的很严重；只是有些事情似乎出了些问题。每个其他机器人餐厅老板似乎都遇到类似的小故障。让人有点担心的是，这些问题似乎随着您的成功而变得更糟。
- en: 'Though rare, there are the occasional collisions that are very unsettling:
    sometimes, when a plate of food is ready in the kitchen, WaitBot will grab it
    *before* ChefBot has even let go of the plate. This usually ends up with the plate
    shattering and leaves a big mess. ChefBot cleans it up, of course, but still,
    you’d think that these top-notch robots would know how to be a bit more synchronized
    with each other. This happens at the bar too: sometimes WineBot will place a drink
    order on the bar, and WaitBot will grab it before WineBot has let go, resulting
    in broken glass and spilled Nederburg Cabernet Sauvignon.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管罕见，偶尔会发生非常令人不安的碰撞：有时候，食物盘在厨房准备好之前，WaitBot甚至在ChefBot放开盘子之前就抓住了它。这通常导致盘子碎裂，留下一团糟。当然，ChefBot会清理干净，但仍然，您会认为这些一流的机器人应该知道如何更加协调一些。这也会发生在酒吧：有时候WineBot会在酒吧上放置一个饮料订单，WaitBot在WineBot松手之前就抓住了它，导致玻璃碎裂和Nederburg
    Cabernet Sauvignon洒落一地。
- en: Also, sometimes GreetBot will seat new diners at exactly the same moment that
    WaitBot has decided to clean what it thought was an empty table. It’s pretty awkward
    for the diners. You’ve tried adding delay logic to WaitBot’s cleaning function,
    or delays to GreetBot’s seating function, but these don’t really help, and the
    collisions still occur. But at least these events are rare.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，有时候GreetBot会在WaitBot决定清理它认为是空桌子的同时正好安排新的用餐者。这对用餐者来说相当尴尬。您尝试为WaitBot的清洁功能添加延迟逻辑，或者为GreetBot的入座功能添加延迟，但这些并没有真正帮助，碰撞仍然发生。不过至少这些事件很少见。
- en: Well, they used to be. Your restaurant has become so popular that you’ve had
    to hire a few more ThreadBots. For very busy Friday and Saturday evenings, you’ve
    had to add a second GreetBot and two extra WaitBots. Unfortunately, the hiring
    contracts for ThreadBots mean that you have to hire them for the whole week, so
    this effectively means that for most of the quiet part of the week, you’re carrying
    three extra ThreadBots that you don’t really need.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，它们曾经是。您的餐厅变得如此受欢迎，以至于您不得不雇用更多的ThreadBots。在非常忙碌的星期五和星期六晚上，您不得不再增加一个GreetBot和两个额外的WaitBot。不幸的是，ThreadBots的雇佣合同意味着您必须全周都雇佣它们，这实际上意味着在大部分安静的周日，您会多余三个您实际上不需要的ThreadBots。
- en: 'The other resource problem, in addition to the extra cost, is that it’s more
    work for you to deal with these extra ThreadBots. It was fine to keep tabs on
    just four bots, but now you’re up to seven. Keeping track of seven ThreadBots
    is a lot more work, and because your restaurant keeps getting more and more famous,
    you become worried about taking on even more ThreadBots. It’s going to become
    a full-time job just to keep track of what each ThreadBot is doing. And another
    thing: these extra ThreadBots are using up a lot more space inside your restaurant.
    It’s becoming a tight squeeze for your customers, what with all these robots zipping
    around. You’re worried that if you need to add even more bots, this space problem
    is going to get even worse. You want to use the space in your restaurant for customers,
    not ThreadBots.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 除了额外的成本，另一个资源问题是，您需要处理这些额外的ThreadBots会增加您的工作量。跟踪只有四个机器人的情况是可以的，但现在您增加到了七个。跟踪七个ThreadBots会增加很多工作量，并且因为您的餐厅越来越有名，您开始担心再雇佣更多ThreadBots。要花费全职工作时间来追踪每个ThreadBot在做什么。还有一件事：这些额外的ThreadBots正在占用您餐厅内的大量空间。随着这些机器人在四处快速移动，顾客们开始感到挤。您担心如果需要再增加更多机器人，空间问题会变得更加严重。您想要将餐厅的空间留给顾客，而不是ThreadBots。
- en: The collisions have also become worse since you added more ThreadBots. Now,
    sometimes two WaitBots take the exact same order from the same table at the same
    time. It’s as if they both noticed that the table was ready to order and moved
    in to take it, without noticing that the other WaitBot was doing the exact same
    thing. As you can imagine, this results in duplicated food orders, which causes
    extra load on the kitchen and increases the chance of collisions when picking
    up the ready plates. You’re concerned that if you add more WaitBots, this problem
    might get worse.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 自从你增加了更多的ThreadBots之后，碰撞问题也变得更加严重。现在，有时两个WaitBot会同时从同一张桌子上接受完全相同的订单。就好像它们都注意到桌子准备好点菜了，然后同时前去接单，却没有注意到另一个WaitBot也在做同样的事情。可以想象，这会导致重复的食品订单，增加厨房的负担，并在取走准备好的盘子时增加碰撞的机会。你担心如果再增加更多WaitBots，这个问题可能会变得更糟。
- en: Time passes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 时间流逝。
- en: 'Then, during one very, very busy Friday night service, you have a singular
    moment of clarity: time slows, lucidity overwhelms you, and you see a snapshot
    of your restaurant frozen in time. *My ThreadBots are doing nothing!* Not really
    nothing, to be fair, but they’re just…waiting.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在一个非常非常繁忙的星期五晚上的服务中，你有了一个独特的清晰时刻：时间仿佛放慢了，清晰感淹没了你，你看到你的餐厅在时间中被冻结的一个快照。“我的ThreadBots什么也没做！”
    事实上，并不是什么都没做，公平地说，但它们只是在等待。
- en: Each of your three WaitBots at different tables is waiting for one of the diners
    at their table to give their order. The WineBot has already prepared 17 drinks,
    which are now waiting to be collected (it took only a few seconds), and is waiting
    for a new drink order. One of the GreetBots has greeted a new party of guests
    and told them they need to wait a minute to be seated, and is waiting for the
    guests to respond. The other GreetBot, now processing a credit card payment for
    another guest that is leaving, is waiting for confirmation on the payment gateway
    device. Even the ChefBot, who is currently cooking 35 meals, is not actually doing
    anything at this moment, but is simply waiting for one of the meals to complete
    cooking so that it can be plated up and handed over to a WaitBot.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你的三个WaitBot各在不同的桌子旁等待他们的一位顾客点餐。WineBot已经准备了17杯饮料，现在它们等待被取走（只花了几秒钟），并等待新的饮料订单。一个GreetBot已经迎接了一组新的客人，并告诉他们需要等一分钟才能入座，现在它在等待客人的回应。另一个GreetBot正在处理一位即将离开的客人的信用卡支付，它在等待支付网关设备的确认。即使是ChefBot，它现在正在烹饪35道菜，但在这个时刻实际上什么也没做，只是在等待其中一道菜完成烹饪，以便能够装盘并交给WaitBot。
- en: You realize that even though your restaurant is now full of ThreadBots, and
    you’re even considering getting more (with all the problems that entails), the
    ones that you currently have are not being fully utilized.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你意识到，尽管你的餐厅现在到处都是ThreadBots，甚至考虑再增加更多（带来所有相关问题），但你现在拥有的ThreadBots并没有得到充分利用。
- en: The moment passes, but not the realization. On Sunday, you add a data collection
    module to your ThreadBots. For each ThreadBot, you’re measuring how much time
    is spent waiting and how much is spent actively doing work. Over the course of
    the following week, the data is collected. Then on Sunday evening, you analyze
    the results. It turns out that even when your restaurant is at full capacity,
    the most hardworking ThreadBot is idle about 98% of the time. The ThreadBots are
    so enormously efficient that they can perform any task in fractions of a second.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 时间流逝，但认知不会消失。在星期天，你为你的ThreadBots添加了一个数据收集模块。对于每个ThreadBot，你都在测量等待时间和实际工作时间的比例。在接下来的一周里，数据被收集起来。然后在星期天晚上，你开始分析结果。结果显示，即使你的餐厅客流量达到最大值，最勤奋的ThreadBot也有约98%的时间处于空闲状态。这些ThreadBots效率极高，能在几秒钟内完成任何任务。
- en: As an entrepreneur, this inefficiency really bugs you. You know that every other
    robotic restaurant owner is running their business the same as you, with many
    of the same problems. But, you think, slamming your fist on your desk, “There
    must be a better way!”
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名企业家，这种低效真的让你很烦恼。你知道，每个其他的机器人餐厅所有者都和你一样经营着他们的生意，面对着许多相同的问题。但是，你想着，砰地一声捶了一下桌子，“一定有更好的方法！”
- en: 'So the very next day, which is a quiet Monday, you try something bold: you
    program a single ThreadBot to do all the tasks. Every time it begins to wait,
    even for a second, the ThreadBot switches to the next task to be done in the restaurant,
    whatever it may be, instead of waiting. It sounds incredible—only one ThreadBot
    doing the work of all the others—but you’re confident that your calculations are
    correct. And besides, Monday is a quiet day; even if something goes wrong, the
    impact will be small. For this new project, you call the bot “LoopBot” because
    it will loop over all the jobs in the restaurant.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，接下来的一天，也就是安静的星期一，你尝试了一些大胆的事情：你编程一个单个ThreadBot来完成所有任务。每当它开始等待，即使只有一秒钟，ThreadBot也会切换到餐厅中下一个要做的任务，无论是什么。听起来不可思议——只有一个ThreadBot完成所有其他人的工作——但你对自己的计算有信心。而且，星期一是一个安静的日子；即使出现问题，影响也将很小。对于这个新项目，你称其为“LoopBot”，因为它将循环执行餐厅中的所有工作。
- en: The programming was more difficult than usual. It isn’t just that you had to
    program one ThreadBot with all the different tasks; you also had to program some
    of the logic of when to switch between tasks. But by this stage, you’ve had a
    lot of experience with programming these ThreadBots, so you manage to get it done.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 编程比平常更加困难。问题不仅在于你必须为一个ThreadBot编程完成所有不同的任务；你还必须编写一些逻辑，告诉它何时切换任务。但到了这个阶段，你已经有了很多ThreadBot编程的经验，所以你设法完成了。
- en: You watch your LoopBot like a hawk. It moves between stations in fractions of
    a second, checking whether there is work to be done. Not long after opening, the
    first guest arrives at the front desk. The LoopBot shows up almost immediately,
    and asks whether the guest would like a table near the window or near the bar.
    But then, as the LoopBot begins to wait, its programming tells it to switch to
    the next task, and it whizzes off. This seems like a dreadful error, but then
    you see that as the guest begins to say “Window please,” the LoopBot is back.
    It receives the answer and directs the guest to table 42\. And off it goes again,
    checking for drink orders, food orders, table cleanup, and arriving guests, over
    and over again.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你像鹰一样盯着你的**LoopBot**。它在几秒钟内在各个站点之间移动，检查是否有工作要做。开业不久后，第一位客人到达前台。LoopBot几乎立即出现，并询问客人是否想要靠近窗户或靠近酒吧的桌子。但是，随着LoopBot开始等待，它的编程告诉它切换到下一个任务，然后它飞奔而去。这似乎是一个可怕的错误，但随后你看到，当客人开始说“请靠窗户”的时候，LoopBot又回来了。它接收到答案并引导客人到42号桌。然后它再次忙碌起来，一遍又一遍地检查饮料订单、食物订单、桌子清理以及到达的客人。
- en: Late Monday evening, you congratulate yourself on a remarkable success. You
    check the data collection module on the LoopBot, and it confirms that even with
    a single ThreadBot doing the work of seven, the idle time was still around 97%.
    This result gives you the confidence to continue the experiment all through the
    rest of the week.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 晚些时候的星期一晚上，你为自己取得了显著的成功而感到自豪。你检查了**LoopBot**上的数据收集模块，它证实即使只有一个ThreadBot完成七个人的工作，空闲时间仍然达到了97%。这个结果让你有信心继续进行整个星期的实验。
- en: 'As the busy Friday service approaches, you reflect on the great success of
    your experiment. For service during a normal working week, you can easily manage
    the workload with a single LoopBot. And you’ve noticed another thing: you don’t
    see any more collisions. This makes sense; since there is only one LoopBot, it
    cannot get confused with itself. No more duplicate orders going to the kitchen,
    and no more confusion about when to grab a plate or drink.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 随着繁忙的星期五服务的临近，你回顾了你的实验取得的巨大成功。在正常工作周的服务中，你可以轻松地管理只有一个LoopBot的工作负载。你还注意到了另一件事：再也没有看到碰撞了。这很合理；因为只有一个LoopBot，它不会和自己混淆。不再有重复订单进入厨房，也不再困惑何时拿盘子或饮料了。
- en: Friday evening service begins, and as you had hoped, the single ThreadBot keeps
    up with all the customers and tasks, and service is proceeding even better than
    before. You imagine that you can take on even more customers now, and you don’t
    have to worry about having to bring on more ThreadBots. You think of all the money
    you’re going to save.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 周五晚上的服务开始了，正如你所希望的那样，单个**ThreadBot**可以跟上所有顾客和任务，服务甚至比以前进行得更顺利。你可以想象现在可以接待更多顾客，而不必担心需要增加更多ThreadBot。你想到了你将要省下的所有钱。
- en: 'Then, unfortunately, something goes wrong: one of the meals, an intricate soufflé,
    has flopped. This has never happened before in your restaurant. You begin to study
    the LoopBot more closely. It turns out that at one of your tables, there is a
    very chatty guest. This guest has come to your restaurant alone and keeps trying
    to make conversation with the LoopBot, even sometimes holding your LoopBot by
    the hand. When this happens, your LoopBot is unable to dash off and attend to
    the ever-growing list of tasks elsewhere in your restaurant. This is why the kitchen
    produced its first flopped soufflé: your LoopBot was unable to make it back to
    the kitchen to remove the dish from the oven because it was held up by a guest.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，事情出了问题：其中一份餐点，一道复杂的舒芙蕾，失败了。在你的餐厅从未发生过这种情况。你开始更仔细地研究LoopBot。原来，在你的一张桌子上，有一位非常健谈的客人。这位客人独自来到你的餐厅，并不时试图与LoopBot交谈，甚至有时拉着你的LoopBot的手。每当这种情况发生时，你的LoopBot无法快速跑开去处理餐厅其他地方不断增长的任务列表。这就是为什么厨房第一次做出失败的舒芙蕾：你的LoopBot被客人耽搁了。
- en: Friday service finishes, and you head home to reflect on what you have learned.
    It’s true that the LoopBot was able to do all the work that was required in the
    busy Friday service; but on the other hand, your kitchen produced its very first
    spoiled meal, something that has never happened before. Chatty guests used to
    keep WaitBots busy all the time, but that never affected the kitchen service at
    all.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 周五的服务结束了，你回家反思所学到的东西。LoopBot确实能够在繁忙的周五服务中完成所有必要的工作；但另一方面，你的厨房却做出了它从未发生过的第一份糟糕的餐点。健谈的客人过去一直让WaitBots忙碌，但这从未对厨房服务产生影响。
- en: 'All things considered, you decide it is still better to continue using a single
    LoopBot. Those worrying collisions no longer occur, and there is much more space
    in your restaurant—space that you can use for more customers. But you realize
    something profound about the LoopBot: it can be effective only if every task is
    short, or at least can be performed in a short period of time. If any activity
    keeps the LoopBot busy for too long, other tasks will begin to suffer neglect.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 综上所述，你决定继续使用单个LoopBot仍然是更好的选择。那些令人担忧的冲突不再发生，而且你的餐厅里有更多的空间——可以为更多的客人使用。但是你意识到关于LoopBot的一些深刻的东西：只有每个任务都很短暂，或者至少可以在短时间内完成，它才能有效。如果任何活动让LoopBot忙碌了太久，其他任务将开始受到忽视。
- en: It is difficult to know in advance which tasks may take too much time. What
    if a guest orders a cocktail that requires intricate preparation, taking much
    more time than usual? What if a guest wants to complain about a meal at the front
    desk, refuses to pay, and grabs the LoopBot by the arm, preventing it from task
    switching? You decide that instead of figuring out all of these issues up front,
    it is better to continue with the LoopBot, record as much information as possible,
    and deal with any problems later as they arise.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 预先知道哪些任务可能花费太多时间是困难的。如果客人点了一种需要精细制作的鸡尾酒，比通常需要更多时间呢？如果客人想在前台投诉餐点，拒绝付款，并抓住LoopBot的手臂，阻止其进行任务切换呢？你决定，与其提前弄清所有这些问题，不如继续使用LoopBot，尽可能记录更多信息，并在问题出现时及时处理。
- en: More time passes.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 时间过去了更多。
- en: Gradually, other restaurant owners notice your operation, and eventually they
    figure out that they too can get by, and even thrive, with only a single ThreadBot.
    Word spreads. Soon every single restaurant operates in this way, and it becomes
    difficult to remember that robotic restaurants ever operated with multiple ThreadBots
    at all.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 渐渐地，其他餐厅老板们注意到了你的运作方式，最终他们也发现他们也可以仅靠一个ThreadBot就能够生存甚至繁荣。消息传播开来。很快，每家餐厅都以这种方式运作，让人几乎难以记得，机器人餐厅曾经使用多个ThreadBot。
- en: Epilogue
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结语
- en: In our story, each robot worker in the restaurant is a single thread. The key
    observation in the story is that the nature of the work in the restaurant involves
    a great deal of waiting, just as `requests.get()` is waiting for a response from
    a server.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的故事中，餐厅里的每个机器人工作员工都是一个单独的线程。故事的关键观察是，餐厅工作的性质涉及大量的等待，就像`requests.get()`在等待服务器响应一样。
- en: In a restaurant, the worker time spent waiting isn’t huge when slow humans are
    doing manual work, but when super-efficient and quick robots are doing the work,
    nearly all their time is spent waiting. In computer programming, the same is true
    when network programming is involved. CPUs do work and wait on network I/O. CPUs
    in modern computers are extremely fast—hundreds of thousands of times faster than
    network traffic. Thus, CPUs running networking programs spend a great deal of
    time waiting.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在餐厅中，工人等待的时间并不是很长，当慢人在做手工工作时，但当超高效和快速的机器人在工作时，几乎所有的时间都花在等待上。在计算机编程中，当涉及网络编程时也是如此。CPU
    进行工作并等待网络 I/O。现代计算机中的 CPU 速度非常快——比网络流量快几十万倍。因此，运行网络程序的 CPU 花费了大量的时间在等待上。
- en: The insight in the story is that programs can be written to explicitly direct
    the CPU to move between work tasks as necessary. Although there is an improvement
    in economy (using fewer CPUs for the same work), the real advantage, compared
    to a threading (multi-CPU) approach, is the elimination of race conditions.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 故事中的洞察力在于可以编写程序来明确地指示 CPU 根据需要在工作任务之间移动。虽然在经济上有所改善（使用较少的 CPU 完成相同的工作），但与线程（多
    CPU）方法相比的真正优势在于消除了竞态条件。
- en: 'It’s not all roses, however: as we found in the story, there are benefits and
    drawbacks to most technology solutions. The introduction of the LoopBot solved
    a certain class of problems but also introduced new problems—not the least of
    which is that the restaurant owner had to learn a slightly different way of programming.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并非一切都是完美的：正如我们在故事中发现的那样，大多数技术解决方案都有利有弊。引入 LoopBot 解决了某一类问题，但也引入了新问题——其中最重要的问题之一是餐厅老板必须学会一种略有不同的编程方式。
- en: What Problem Is Asyncio Trying to Solve?
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Asyncio 试图解决什么问题？
- en: 'For I/O-bound workloads, there are exactly (only!) two reasons to use async-based
    concurrency over thread-based concurrency:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 I/O 密集型工作负载，只有（仅仅！）两个原因可以使用基于异步的并发而不是基于线程的并发：
- en: Asyncio offers a safer alternative to preemptive multitasking (i.e., using threads),
    thereby avoiding the bugs, race conditions, and other nondeterministic dangers
    that frequently occur in nontrivial threaded applications.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Asyncio 提供了一种更安全的替代方案，用于抢占式多任务（即使用线程），从而避免了在非平凡的线程应用程序中经常发生的错误、竞态条件和其他非确定性危险。
- en: Asyncio offers a simple way to support many thousands of *simultaneous* socket
    connections, including being able to handle many long-lived connections for newer
    technologies like WebSockets, or MQTT for Internet of Things (IoT) applications.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Asyncio 提供了一种简单的方式来支持成千上万个*同时的*套接字连接，包括能够处理许多长期存在的连接，用于较新的技术，如 WebSockets，或用于物联网（IoT）应用的
    MQTT。
- en: That’s it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。
- en: Threading—as a programming model—is best suited to certain kinds of computational
    tasks that are best executed with multiple CPUs and shared memory for efficient
    communication between the threads. In such tasks, the use of multicore processing
    with shared memory is a necessary evil because the problem domain requires it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种编程模型，线程最适合于某些最佳使用多个 CPU 和共享内存进行线程之间高效通信的计算任务。在这种任务中，使用具有共享内存的多核处理是一种必要的恶因为问题领域要求这样做。
- en: Network programming is *not* one of those domains. The key insight is that network
    programming involves a great deal of “waiting for things to happen,” and because
    of this, we don’t need the operating system to efficiently distribute our tasks
    over multiple CPUs. Furthermore, we don’t need the risks that preemptive multitasking
    brings, such as race conditions when working with shared memory.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 网络编程*不*是那些领域之一。关键的洞察力在于网络编程涉及大量的“等待事情发生”，正因为如此，我们不需要操作系统有效地在多个 CPU 上分发我们的任务。此外，我们也不需要抢占式多任务带来的风险，比如在使用共享内存时出现竞态条件。
- en: 'However, there is a great deal of misinformation about other supposed benefits
    of event-based programming models. Here are a few of the things that just ain’t
    so:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，关于基于事件的编程模型的其他所谓好处有许多错误信息。以下是一些并非事实的事情：
- en: '*Asyncio will make my code blazing fast*.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*Asyncio 将使我的代码运行速度飞快*。'
- en: Unfortunately, no. In fact, most benchmarks seem to show that threading solutions
    are slightly faster than their comparable Asyncio solutions. If the extent of
    concurrency itself is considered a performance metric, Asyncio *does* make it
    a bit easier to create very large numbers of concurrent socket connections, though.
    Operating systems often have limits on how many threads can be created, and this
    number is significantly lower than the number of socket connections that can be
    made. The OS limits can be changed, but it is certainly easier to do with Asyncio.
    And while we expect that having many thousands of threads should incur extra *context-switching*
    costs that coroutines avoid, it turns out to be difficult to benchmark this in
    practice.^([1](ch01.html#idm46363041204904)) No, speed is not the benefit of Asyncio
    in Python; if that’s what you’re after, try *Cython* instead!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，不是这样。事实上，大多数基准测试似乎显示，线程解决方案比其相应的Asyncio解决方案稍快。如果将并发程度本身视为性能指标，Asyncio确实使得创建非常大量的并发套接字连接变得更加容易。操作系统通常对可以创建的线程数量有限制，这个数量显著低于可以建立的套接字连接数量。操作系统的限制可以更改，但使用Asyncio则更容易实现。而且虽然我们期望拥有许多数千个线程应该会产生额外的*上下文切换*成本，但事实证明在实践中很难对此进行基准测试。^([1](ch01.html#idm46363041204904))
    不，速度不是Python中Asyncio的好处；如果你追求的是这个，那么试试*Cython*吧！
- en: '*Asyncio makes threading redundant*.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*Asyncio使得线程变得多余*。'
- en: Definitely not! The true value of threading lies in being able to write multi-CPU
    programs, in which different computational tasks can share memory. The numerical
    library `numpy`, for instance, already makes use of this by speeding up certain
    matrix calculations through the use of multiple CPUs, even though all the memory
    is shared. For sheer performance, there is no competitor to this programming model
    for CPU-bound computation.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对不是！线程的真正价值在于能够编写多CPU程序，其中不同的计算任务可以共享内存。例如，数值库`numpy`已经利用这一点，通过使用多个CPU加速某些矩阵计算，即使所有内存都是共享的。就性能而言，对于CPU密集型计算，这种编程模型无与伦比。
- en: '*Asyncio removes the problems with the GIL*.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*Asyncio消除了GIL带来的问题*。'
- en: 'Again, no. It is true that Asyncio is not *affected* by the GIL,^([2](ch01.html#idm46363040713000))
    but this is only because the GIL affects multithreaded programs. The “problems”
    with the GIL that people refer to occur because it prevents true multicore parallelism
    when using threads. Since Asyncio is single-threaded (almost by definition), it
    is unaffected by the GIL, but it cannot benefit from multiple CPU cores either.^([3](ch01.html#idm46363040708792))
    It is also worth pointing out that in multithreaded code, the Python GIL can cause
    additional performance problems beyond what has already been mentioned in other
    points: Dave Beazley presented a talk on this called [“Understanding the Python
    GIL”](https://oreil.ly/n_D3N) at PyCon 2010, and much of what is discussed in
    that talk remains true today.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，不是这样。确实，Asyncio不受GIL的影响，^([2](ch01.html#idm46363040713000)) 但这仅因为GIL影响多线程程序。人们所指的GIL“问题”之所以发生，是因为它在使用线程时阻止了真正的多核并行性。由于Asyncio几乎是单线程的（几乎可以说是这样），它不受GIL的影响，但也不能从多CPU核心中受益。^([3](ch01.html#idm46363040708792))
    还值得指出的是，在多线程代码中，Python的GIL可能会引起其他性能问题，超出了在其他点已经提到的范围：Dave Beazley在PyCon 2010上做了一次关于此的演讲，标题为[“理解Python
    GIL”](https://oreil.ly/n_D3N)，其中讨论的大部分内容今天仍然适用。
- en: '*Asyncio prevents all race conditions*.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*Asyncio可以防止所有竞态条件*。'
- en: False. The possibility of race conditions is always present with any concurrent
    programming, regardless of whether threading or event-based programming is used.
    It is true that Asyncio can virtually eliminate a certain *class* of race conditions
    common in multithreaded programs, such as intra-process shared memory access.
    However, it doesn’t eliminate the possibility of other kinds of race conditions,
    such as the interprocess races with shared resources common in distributed microservices
    architectures. You must still pay attention to how shared resources are being
    used. The main advantage of Asyncio over threaded code is that the points at which
    control of execution is transferred between coroutines are *visible* (because
    of the presence of `await` keywords), and thus it is much easier to reason about
    how shared resources are being accessed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 错误。竞争条件的可能性始终存在于任何并发编程中，无论是使用线程还是基于事件的编程。确实，Asyncio 可以几乎消除某些多线程程序中常见的竞争条件类别，例如进程内共享内存访问。然而，它并没有消除其他类型的竞争条件的可能性，例如在分布式微服务架构中常见的共享资源之间的进程间竞争。您仍然需要注意共享资源的使用方式。与线程化代码相比，Asyncio
    的主要优势在于协程之间的执行控制点是*可见的*（因为存在`await`关键字），因此更容易推理共享资源的访问方式。
- en: '*Asyncio makes concurrent programming easy*.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*Asyncio makes concurrent programming easy*.'
- en: Ahem, where do I even begin?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀，我该从哪里开始呢？
- en: The last myth is the most dangerous one. Dealing with concurrency is *always*
    complex, regardless of whether you’re using threading or Asyncio. When experts
    say “Asyncio makes concurrency easier,” what they really mean is that Asyncio
    makes it a little easier to avoid certain kinds of truly nightmarish race condition
    bugs—the kind that keep you up at night and that you tell other programmers about
    in hushed tones over campfires, wolves howling in the distance.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个神话是最危险的一个。处理并发总是*非常*复杂的，无论您是使用线程还是 Asyncio。当专家们说“Asyncio 使并发编程更容易”时，他们真正的意思是，Asyncio
    使得避免某些真正令人噩梦般的竞争条件 bug 更加容易——那种让您彻夜难眠的 bug，在篝火旁，狼嚎声中，您会轻声告诉其他程序员。
- en: Even with Asyncio, there is still a great deal of complexity to deal with. How
    will your application support health checks? How will you communicate with a database
    that may allow only a few connections—much fewer than your five thousand socket
    connections to clients? How will your program terminate connections gracefully
    when you receive a signal to shut down? How will you handle (blocking!) disk access
    and logging? These are just a few of the many complex design decisions that you
    will have to answer.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 即使使用 Asyncio，仍然存在大量复杂性需要处理。您的应用程序将如何支持健康检查？您如何与只允许少数连接的数据库进行通信——比您的五千个客户端套接字连接少得多？当接收到关闭信号时，您的程序如何优雅地终止连接？您将如何处理（阻塞！）磁盘访问和日志记录？这些只是您必须回答的许多复杂设计决策中的一小部分。
- en: Application design will still be difficult, but the hope is that you will have
    an easier time reasoning about your application logic when you have only one thread
    to deal with.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，应用程序设计依然很困难，但希望在处理仅有一个线程时，您会在推理应用逻辑方面更加轻松。
- en: '^([1](ch01.html#idm46363041204904-marker)) Research in this area seems hard
    to find, but the numbers seem to be around 50 microseconds per threaded context
    switch on Linux on modern hardware. To give a (very) rough idea: one thousand
    threads implies 50 ms total cost just for the context switching. It does add up,
    but it isn’t going to wreck your application either.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.html#idm46363041204904-marker)) 在这个领域的研究似乎难以找到，但数字看起来大约是在现代硬件上 Linux
    上每个线程上下文切换约为 50 微秒。大致来说：一千个线程意味着总成本为 50 毫秒，仅仅用于上下文切换。虽然这些会累积，但它不会毁掉您的应用程序。
- en: ^([2](ch01.html#idm46363040713000-marker)) The *global interpreter lock* (GIL)
    makes the Python interpreter code (not *your* code!) thread-safe by locking the
    processing of each opcode; it has the unfortunate side effect of effectively pinning
    the execution of the interpreter to a single CPU, and thus preventing multicore
    parallelism.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch01.html#idm46363040713000-marker)) *全局解释器锁*（GIL）通过锁定每个操作码的处理来保证 Python
    解释器代码（而不是*您的*代码！）的线程安全性；它不幸地产生了将解释器执行有效地限制在单个 CPU 上的副作用，并因此阻止了多核并行处理。
- en: '^([3](ch01.html#idm46363040708792-marker)) This is similar to why JavaScript
    lacks a GIL “problem”: there is only one thread.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch01.html#idm46363040708792-marker)) 这与 JavaScript 为何缺乏 GIL “问题”类似：因为它只有一个线程。
