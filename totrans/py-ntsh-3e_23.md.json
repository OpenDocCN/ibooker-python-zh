["```py\n`from` xml.etree `import` ElementTree `as` et\n```", "```py\n`try`:\n    `from` lxml `import` etree `as` et\n`except` ImportError:\n    `from` xml.etree `import` ElementTree `as` et\n```", "```py\n`<breakfast_menu``>`\n `<food``>`\n    `<name``>`Belgian Waffles`</name>`\n    `<calories``>`650`</calories>`\n `</food>`\n `<food``>`\n    `<name``>`Strawberry Belgian Waffles`</name>`\n    `<calories``>`900`</calories>`\n `</food>`\n `<food``>`\n    `<name``>`Berry-Berry Belgian Waffles`</name>`\n    `<calories``>`900`</calories>`\n `</food>`\n `<food``>`\n    `<name``>`French Toast`</name>`\n    `<calories``>`600`</calories>`\n `</food>`\n `<food``>`\n    `<name``>`Homestyle Breakfast`</name>`\n    `<calories``>`950`</calories>`\n `</food>`\n`</breakfast_menu>`\n```", "```py\n`from` `urllib` `import` request\n`from` `xml``.``etree` `import` ElementTree `as` et\ncontent = request.urlopen('http://www.w3schools.com/xml/simple.xml')\ntree = et.parse(content)\n```", "```py\n`def` bycal_and_name(e):\n    `return` int(e.find('calories').text), e.find('name').text\n\n`for` `e` `in` sorted(tree.findall('food'), key=bycal_and_name):\n    print(f\"{e.find('calories').text} {e.find('name').text}\")\n```", "```py\n600 French Toast\n650 Belgian Waffles\n900 Berry-Berry Belgian Waffles\n900 Strawberry Belgian Waffles\n950 Homestyle Breakfast\n```", "```py\n*`# add Buttered Toast to the menu`*\nmenu = tree.getroot()\ntoast = et.SubElement(menu, 'food')\ntcals = et.SubElement(toast, 'calories')\ntcals.text = '180'\ntname = et.SubElement(toast, 'name')\ntname.text = 'Buttered Toast'\n*`# remove anything related to 'berry' from the menu`*\n`for` `e` `in` menu.findall('food'):\n    name = e.find('name').text\n    `if` 'berry' `in` name.lower():\n        menu.remove(e)\n```", "```py\n180 Buttered Toast\n600 French Toast\n650 Belgian Waffles\n950 Homestyle Breakfast\n```", "```py\nimport csv\n`from` `xml``.``etree` `import` ElementTree `as` et\n\nmenu = et.Element('menu')\ntree = et.ElementTree(menu)\n`with` open('menu.csv') `as` f:\n    r = csv.reader(f)\n    `for` calories, namestr `in` r:\n        food = et.SubElement(menu, 'food')\n        cals = et.SubElement(food, 'calories')\n        cals.text = calories\n        name = et.SubElement(food, 'name')\n        name.text = namestr\n\ntree.write('menu.xml')\n```", "```py\nimport heapq\n`from` `xml``.``etree` `import` ElementTree `as` et\n\ndef cals_and_name():\n *`# generator for (calories, name) pairs`*\n `for` _, elem `in` et.iterparse('menu.xml'):\n        `if` elem.tag != 'food':\n            `continue`\n     *`# just finished parsing a food, get calories and name`*\n     cals = int(elem.find('calories').text)\n    name = elem.find('name').text\n        `yield` (cals, name)\n\nlowest10 = heapq.nsmallest(10, cals_and_name())\n\n`for` cals, name `in` lowest10:\n    print(cals, name)\n```", "```py\ndef cals_and_name():\n *`# memory-thrifty generator for (calories, name) pairs`*\n    root = `None`\n    `for` event, elem `in` et.iterparse('menu.xml', ['start', 'end']):\n        `if` event == 'start':\n            `if` root `is` `None`:\n                root = elem\n    `continue`\n        `if` elem.tag != 'food':\n            `continue`\n        *`# just finished parsing a food, get calories and name`*\n        cals = int(elem.find('calories').text)\n        name = elem.find('name').text\n        `yield` (cals, name)\n        root.remove(elem)\n```"]