- en: Chapter 18\. Games
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第18章。游戏
- en: Preview
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预览
- en: Games cover a lot of ground, from simple text to multiplayer 3D extravaganzas.
    This chapter will demonstrate a simple game and how the web endpoint can interact
    with the user across multiple steps. This process is different from the familiar
    one-shot request-response web endpoints that you’ve seen so far.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏涵盖了很多领域，从简单的文本到多人3D盛宴。本章将演示一个简单的游戏，以及Web端点如何在多个步骤中与用户交互。这个过程与你迄今所见的传统的一次性请求-响应Web端点有所不同。
- en: Python Game Packages
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python游戏包
- en: 'If you really want to get into Python for games, here are some useful tools:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真的想深入研究Python游戏，这里有一些有用的工具：
- en: 'Text:'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本：
- en: '[Adventurelib](https://adventurelib.readthedocs.io)'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Adventurelib](https://adventurelib.readthedocs.io)'
- en: 'Graphic:'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形：
- en: '[PyGame](https://www.pygame.org), [primer](https://realpython.com/pygame-a-primer)'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyGame](https://www.pygame.org)，[入门](https://realpython.com/pygame-a-primer)'
- en: '[pyglet](https://pyglet.org)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pyglet](https://pyglet.org)'
- en: '[Python Arcade](https://api.arcade.academy)'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python Arcade](https://api.arcade.academy)'
- en: '[HARFANG](https://www.harfang3d.com)'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[HARFANG](https://www.harfang3d.com)'
- en: '[Panda3D](https://docs.panda3d.org)'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Panda3D](https://docs.panda3d.org)'
- en: 'But I’m not going to use any of these in this chapter. The example code can
    get so large and complex that it overshadows the goal of this book: creating websites—APIs
    and traditional content—with FastAPI, as simply as possible.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但在本章中我不会使用这些。示例代码可能变得非常庞大和复杂，而这超出了本书的目标：尽可能简单地创建网站——使用FastAPI，包括API和传统内容。
- en: Splitting Game Logic
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分离游戏逻辑
- en: 'There are so many ways to write a game. Who does what, and who keeps what where—the
    client or the server? The web is stateless, so each time the client calls the
    server, the server is a total amnesiac and swears it’s never seen this client
    before. So we need to keep *state* somewhere: data retained across game steps
    to thread them all together.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 写游戏的方式有很多种。谁做什么，谁在哪里保存什么——客户端还是服务器？Web是无状态的，所以每次客户端调用服务器时，服务器都是完全健忘的，并发誓从未见过这个客户端。因此，我们需要在某处保持*状态*：跨游戏步骤保留数据以将它们全部连接在一起。
- en: We could write a game completely in JavaScript on the client side, and keep
    all the state there. If you know JavaScript well, that’s a good solution, but
    if you don’t (a possibility, because you’re reading a Python book), let’s give
    Python something to do too.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以完全在客户端JavaScript中编写游戏，并在那里保持所有状态。如果你很熟悉JavaScript，那是一个不错的解决方案，但如果不熟悉（这是可能的，因为你正在阅读一本Python书），让我们也给Python一些事情可做。
- en: 'At the other extreme, we could write a server-heavy application: generate some
    distinct id for this particular game on an initial web call, and pass that id
    with other data to the server in subsequent game steps, and maintain all that
    changing state in some server-side data store, like a database.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我们可以编写一个服务器重型应用程序：在初始Web调用中为此特定游戏生成一些独特的ID，并在后续游戏步骤中将该ID与其他数据一起传递到服务器，并在某些服务器端数据存储中维护所有这些变化的状态，如数据库。
- en: Finally, we could structure the game as a sequence of client-server web endpoint
    calls, in a so-called single-page application (SPA). Writing an SPA would typically
    have JavaScript making Ajax calls to a server, and targeting the web responses
    to refresh parts of the page instead of the whole display. The client JavaScript
    and HTML do some of the work, and the server handles some of the logic and data.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以将游戏结构化为一系列客户端-服务器网络端点调用，即所谓的单页应用程序（SPA）。编写SPA通常需要JavaScript向服务器发出Ajax调用，并将Web响应定位到页面的部分，而不是整个显示。客户端JavaScript和HTML会完成部分工作，服务器处理部分逻辑和数据。
- en: Game Design
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏设计
- en: First, what’s the game? We’ll build a simple [Wordle-like game](https://oreil.ly/PuD-Y),
    but using only the names of the creatures from the *cryptid.db* database. This
    makes it quite a bit easier than Wordle, especially if you cheat and look at [Appendix B](app02.html#app02).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这款游戏是什么？我们将构建一个简单的[类Wordle游戏](https://oreil.ly/PuD-Y)，但只使用来自*cryptid.db*数据库的生物名称。这比Wordle要简单得多，尤其是如果你作弊并查看[附录
    B](app02.html#app02)。
- en: 'We’ll use the final, balanced, design approach above:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用上述最终平衡的设计方法：
- en: Let’s use vanilla JavaScript in the client instead of well-known JavaScript
    libraries like React, Angular, or even jQuery.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在客户端使用原生JavaScript，而不是像React、Angular甚至jQuery这样著名的JavaScript库。
- en: A new FastAPI endpoint, GET `/game`, initializes the game. It gets a random
    creature’s name from our cryptid database, and returns that, embedded as a hidden
    value in a Jinja template file of HTML, CSS, and JavaScript.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新的FastAPI端点，GET `/game`，初始化游戏。它从我们的神秘生物数据库获取一个随机生物名称，并将其作为HTML、CSS和JavaScript的Jinja模板文件中的隐藏值返回。
- en: On the client, the newly returned HTML and JavaScript display a Wordle-type
    interface. A sequence of boxes appears, one for each letter in the hidden creature
    name.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端上，新返回的HTML和JavaScript显示类似Wordle的界面。一系列框出现，每个框代表隐藏生物名称中的一个字母。
- en: The player types a letter into each box, then submits this guess and the hidden
    true name to the server. This is in an AJAX call, using the JavaScript `fetch()`
    function.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 玩家在每个框中输入一个字母，然后将此猜测和隐藏的真实名称提交给服务器。这是通过使用JavaScript的`fetch()`函数进行的AJAX调用。
- en: A second new FastAPI endpoint, POST `/game`, takes this guess and actual secret
    name and scores the guess against that name. It returns the guess and score to
    the client.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个新的FastAPI端点，POST `/game`，获取此猜测和实际秘密名称，并对该名称进行评分。它将猜测和得分返回给客户端。
- en: 'The client displays the guess and score with appropriate CSS colors in a newly
    generated table row: green for a letter in the correct place, yellow for a letter
    in the name but another position, and gray for a letter not occurring in the hidden
    name. The score is a string of single characters, which are used as CSS class
    names to display the correct colors for the guess’s letters.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端在新生成的表格行中使用适当的CSS颜色显示猜测和得分：绿色表示字母在正确位置，黄色表示字母在名称中但位置不对，灰色表示隐藏名称中不存在的字母。得分是一串单个字符，这些字符作为CSS类名用于显示猜测字母的正确颜色。
- en: If all the letters are green, then celebrate accordingly. Otherwise, the client
    displays a new sequence of text input boxes for the next guess, and repeats the
    steps 4 and later until the name is guessed or you give up. Most of the cryptid
    names are not household words, so check [Appendix B](app02.html#app02) as needed.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果所有字母都是绿色，则相应庆祝。否则，客户端显示一个新的文本输入框序列用于下一个猜测，并重复步骤4及以后，直到猜出名称或放弃。大多数神秘动物名称并不是家喻户晓的词汇，因此根据需要查看[附录
    B](app02.html#app02)。
- en: These rules are slightly different from official Wordle, which allows only five-letter
    dictionary words and a limit of six steps.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则与官方Wordle略有不同，它只允许五个字母的词典单词，并限制为六步。
- en: Don’t get your hopes up. Like most of the examples in this book, the game logic
    and design are minimal—just enough to get the pieces to work together. You can
    impart much more style and grace, given a working base.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 不要抱太大希望。像本书中大多数示例一样，游戏逻辑和设计都很简单——只是足够使各个部件一起工作。在有工作基础的情况下，您可以赋予更多的风格和优雅。
- en: 'Web Part One: Game Initialization'
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web第一部分：游戏初始化
- en: We want two new web endpoints. We’re using creature names, so we might think
    of naming endpoints like GET `/creature/game` and POST `/creature/game`. But that
    won’t work, because we already have similar endpoints GET `/creature/{name}` and
    POST `/creature/{name}`, and FastAPI will match those first. So let’s make a new
    top-level routing namespace `/game`, and place both new endpoints under it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望有两个新的Web端点。我们正在使用生物名称，因此我们可能考虑命名端点为GET `/creature/game`和POST `/creature/game`。但这不起作用，因为我们已经有类似的端点GET
    `/creature/{name}`和POST `/creature/{name}`，而FastAPI将首先匹配它们。所以让我们创建一个新的顶级路由命名空间`/game`，并将这两个新端点放在其中。
- en: The first endpoint in [Example 18-1](#ex1801) initializes the game. It needs
    to get a random creature name from the database, and return this with all the
    client code to implement the multistep game logic. For this, we’ll use a Jinja
    template (which you saw in [Chapter 16](ch16.html#ch16)) that contains HTML, CSS,
    and JavaScript.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 18-1](#ex1801)中的第一个端点初始化游戏。它需要从数据库获取一个随机生物名称，并返回此名称以及实现多步游戏逻辑的所有客户端代码。为此，我们将使用Jinja模板（您在[第16章](ch16.html#ch16)中看到过），其中包含HTML、CSS和JavaScript。'
- en: Example 18-1\. Web game initialization (web/game.py)
  id: totrans-34
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 18-1. Web游戏初始化（web/game.py）
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: FastAPI requires the `game_start()` path function to have a `request` parameter,
    and to pass it to the template as an argument.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI要求`game_start()`路径函数具有`request`参数，并将其作为参数传递给模板。
- en: Next, in [Example 18-2](#ex1802), hook this `/game` subrouter into the main
    module that has been overseeing the `/explorer` and `/creature` routes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在[示例 18-2](#ex1802)中，将这个`/game`子路由钩入到主模块中，该模块已经监视`/explorer`和`/creature`路由。
- en: Example 18-2\. Add /game subroute (web/main.py)
  id: totrans-38
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 18-2. 添加/game子路由（web/main.py）
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Web Part Two: Game Steps'
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web第二部分：游戏步骤
- en: The largest component of the client side template (HTML, CSS, and JavaScript)
    can be seen in [Example 18-3](#ex1803).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端模板（HTML、CSS和JavaScript）的最大组件可以在[示例 18-3](#ex1803)中看到。
- en: Example 18-3\. Working Jinja template file (template/game.html)
  id: totrans-42
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 18-3. 工作中的Jinja模板文件（template/game.html）
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Service Part One: Initialization'
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务第一部分：初始化
- en: '[Example 18-4](#ex1804) shows the Service code to connect the Web layer’s game
    start function to the Data layer’s provision of a random creature name.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 18-4](#ex1804)展示了连接Web层游戏启动功能与数据层提供随机生物名称的服务代码。'
- en: Example 18-4\. Calculate score (service/game.py)
  id: totrans-46
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 18-4\. 计算分数（service/game.py）
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Service Part Two: Scoring'
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务第二部分：评分
- en: Add the code from [Example 18-5](#ex1805) (next) to that of [Example 18-4](#ex1804).
    The score is a string of single characters that indicate whether the guessed letter
    matched in the correct position, matched in another position, or was a miss. The
    guess and word are both converted to lowercase to make matching case-insensitive.
    If the guess is not the same length as the hidden word, an empty string score
    is returned.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码从[示例 18-5](#ex1805)（下一步）添加到[示例 18-4](#ex1804)中。分数是一个由单个字符组成的字符串，指示猜测的字母是否匹配正确位置、匹配其他位置或是失误。为了进行大小写不敏感的匹配，猜测和单词都被转换为小写。如果猜测的长度与隐藏单词不同，将返回空字符串分数。
- en: Example 18-5\. Calculate score (service/game.py)
  id: totrans-50
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 18-5\. 计算分数（service/game.py）
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Test!
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试！
- en: '[Example 18-6](#ex1806) contains some pytest exercises for the service score
    calculation. It uses pytest’s `parametrize` feature to pass in a sequence of tests,
    rather than writing a loop inside the test function itself. Remember from [Example 18-5](#ex1805)
    that `H` is a direct hit, `C` is close (wrong position), and `M` is a miss.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 18-6](#ex1806)包含了一些关于服务分数计算的pytest练习。它使用pytest的`parametrize`特性来传递一系列测试，而不是在测试函数内部编写循环。从[示例 18-5](#ex1805)中记得，`H`是直击，`C`是接近（位置错误），`M`是失误。'
- en: Example 18-6\. Test score calculation (test/unit/service/test_game.py)
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 18-6\. 测试分数计算（test/unit/service/test_game.py）
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run it:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 运行它：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Data: Initialization'
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据：初始化
- en: We only need one function in the new *data/game.py* module, shown in [Example 18-7](#ex1807).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的*data/game.py*模块中我们只需要一个函数，如[示例 18-7](#ex1807)所示。
- en: Example 18-7\. Get random creature name (data/game.py)
  id: totrans-60
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 18-7\. 获取随机生物名称（data/game.py）
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let’s Play Cryptonamicon
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们玩Cryptonomicon
- en: (Someone, please come up with a better name.)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: （请有人想出一个更好的名字。）
- en: 'In your browser, go to `http://localhost:8000/game`. You should see an initial
    display like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的浏览器中，访问`http://localhost:8000/game`。你应该会看到一个初始显示像这样：
- en: '![fapi 18in01](assets/fapi_18in01.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![fapi 18in01](assets/fapi_18in01.png)'
- en: 'Let’s type a few letters and submit them as a guess to see what happens:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们输入一些字母并将它们作为猜测提交，看看会发生什么：
- en: '![fapi 18in02](assets/fapi_18in02.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![fapi 18in02](assets/fapi_18in02.png)'
- en: 'The letters *b*, *f*, and *g* are yellow (if you’re not viewing this in color,
    you’ll have to take my word for it!), meaning they’re in the hidden name but in
    the wrong position:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 字母*b*、*f*和*g*是黄色的（如果你没有在彩色环境中查看这个，你就只能相信我的话了！），这意味着它们在隐藏名称中，但位置错误：
- en: '![fapi 18in03](assets/fapi_18in03.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![fapi 18in03](assets/fapi_18in03.png)'
- en: Let’s take a stab at the name, but flub the last letter. We see lots of green
    on the second line. Oh, so close!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们猜一下这个名字，但是最后一个字母搞错了。我们在第二行看到了很多绿色。哦，差一点！
- en: '![fapi 18in04](assets/fapi_18in04.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![fapi 18in04](assets/fapi_18in04.png)'
- en: 'Let’s fix that last letter, and just for fun, capitalize some of the letters
    to ensure that we get case-insensitive matching. Submit that one now, and golly
    gee:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修正最后一个字母，然后为了好玩，将一些字母大写以确保我们得到大小写不敏感的匹配。现在提交它，哇哦：
- en: '![fapi 18in05](assets/fapi_18in05.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![fapi 18in05](assets/fapi_18in05.png)'
- en: Review
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾
- en: We used HTML, JavaScript, CSS, and FastAPI to build a (very!) simple interactive
    Wordle-style game. This chapter demonstrated how to manage multiple threaded conversations
    between a web client and server, using JSON and Ajax.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用HTML、JavaScript、CSS和FastAPI构建了一个（非常简单的！）交互式Wordle风格的游戏。本章展示了如何使用JSON和Ajax管理Web客户端和服务器之间的多线程对话。
