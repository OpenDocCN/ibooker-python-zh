["```py\ndef declare_special(dish: Dish, start_date: datetime.datetime,\n                    end_time: datetime.datetime):\n    # ... snip setup in local system ...\n    # ... snip send notification to the supplier ...\n\ndef order_dish(dish: Dish):\n    # ... snip automated preparation\n    out_of_stock_ingredients = {ingred for ingred in dish\n                                if out_of_stock(ingred)}\n    if out_of_stock_ingredients:\n        # ... snip taking dishes off menu ...\n        # ... snip send notification to the supplier ...\n\n# called every 24 hours\ndef check_for_expired_ingredients():\n    expired_ingredients = {ing for ing in ingredient in get_items_in_stock()}:\n    if expired_ingredients:\n        # ... snip taking dishes off menu ...\n        # ... snip send notifications to the supplier ...\n```", "```py\ndef declare_special(notification: NotificationType,\n                    start_date: datetime.datetime,\n                    end_time: datetime.datetime,\n                    email: Email):\n    # ... snip ...\n```", "```py\ndef declare_special(notification: NotificationType,\n                    start_date: datetime.datetime,\n                    end_time: datetime.datetime,\n                    email: Email):\n    # ... snip ...\n```", "```py\ndef declare_special(notification: NotificationType,\n                    start_date: datetime.datetime,\n                    end_time: datetime.datetime,\n                    emails: list[Email],\n                    texts: list[PhoneNumber],\n                    send_to_customer: bool):\n    # ... snip ...\n```", "```py\n@dataclass\nclass NewSpecial:\n    dish: Dish\n    start_date: datetime.datetime\n    end_date: datetime.datetime\n\n@dataclass\nclass IngredientsOutOfStock:\n    ingredients: Set[Ingredient]\n\n@dataclass\nclass IngredientsExpired:\n    ingredients: Set[Ingredient]\n\n@dataclass\nclass NewMenuItem:\n    dish: Dish\n\nNotification = Union[NewSpecial, IngredientsOutOfStock,\n                     IngredientsExpired, NewMenuItem]\n```", "```py\ndef declare_special(dish: Dish, start_date: datetime.datetime,\n                    end_time: datetime.datetime):\n    # ... snip setup in local system ...\n    send_notification(NewSpecial(dish, start_date, end_date))\n```", "```py\ndef send_notification(notification: Notification):\n    # ... snip ...\n```", "```py\n@dataclass\nclass Text:\n    phone_number: str\n\n@dataclass\nclass Email:\n    email_address: str\n\n@dataclass\nclass SupplierAPI:\n    pass\n\nNotificationMethod = Union[Text, Email, SupplierAPI]\n```", "```py\ndef notify(notification_method: NotificationMethod, notification: Notification):\n    if isinstance(notification_method, Text):\n        send_text(notification_method, notification)\n    elif isinstance(notification_method, Email):\n        send_email(notification_method, notification)\n    elif isinstance(notification_method, SupplierAPI):\n        send_to_supplier(notification)\n    else:\n        raise ValueError(\"Unsupported Notification Method\")\n\ndef send_text(text: Text, notification: Notification):\n    if isinstance(notification, NewSpecial):\n        # ... snip send text ...\n        pass\n    elif isinstance(notification, IngredientsOutOfStock):\n        # ... snip send text ...\n        pass\n    elif isinstance(notification, IngredientsExpired):\n        # ... snip send text ...\n        pass\n    elif isinstance(notification, NewMenuItem):\n        # .. snip send text ...\n        pass\n    raise NotImplementedError(\"Unsupported Notification Method\")\n\ndef send_email(email: Email, notification: Notification):\n    # .. similar to send_text ...\n\ndef send_to_supplier(notification: Notification):\n    # .. similar to send_text\n```", "```py\nusers_to_notify: Dict[type, List[NotificationMethod]] = {\n    NewSpecial: [SupplierAPI(), Email(\"boss@company.org\"),\n                 Email(\"marketing@company.org\"), Text(\"555-2345\")],\n    IngredientsOutOfStock: [SupplierAPI(), Email(\"boss@company.org\")],\n    IngredientsExpired: [SupplierAPI(), Email(\"boss@company.org\")],\n    NewMenuItem: [Email(\"boss@company.org\"), Email(\"marketing@company.org\")]\n}\n```", "```py\ndef send_notification(notification: Notification):\n    try:\n        users = users_to_notify[type(notification)]\n    except KeyError:\n        raise ValueError(\"Unsupported Notification Method\")\n    for notification_method in users:\n        notify(notification_method, notification)\n```"]