- en: Chapter 6\. Loop with while and for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For a’ that, an’ a’ that, Our toils obscure, an’ a’ that …
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Robert Burns, For a’ That and a’ That
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Testing with `if`, `elif`, and `else` runs from top to bottom. Sometimes, we
    need to do something more than once. We need a *loop*, and Python gives us two
    choices: `while` and `for`.'
  prefs: []
  type: TYPE_NORMAL
- en: Repeat with while
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The simplest looping mechanism in Python is `while`. Using the interactive
    interpreter, try this example, which is a simple loop that prints the numbers
    from 1 to 5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We first assigned the value `1` to `count`. The `while` loop compared the value
    of `count` to `5` and continued if `count` was less than or equal to `5`. Inside
    the loop, we printed the value of `count` and then *incremented* its value by
    one with the statement `count += 1`. Python goes back to the top of the loop,
    and again compares `count` with `5`. The value of `count` is now `2`, so the contents
    of the `while` loop are again executed, and `count` is incremented to `3`.
  prefs: []
  type: TYPE_NORMAL
- en: This continues until `count` is incremented from `5` to `6` at the bottom of
    the loop. On the next trip to the top, `count <= 5` is now `False`, and the `while`
    loop ends. Python moves on to the next lines.
  prefs: []
  type: TYPE_NORMAL
- en: Cancel with break
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to loop until something occurs, but you’re not sure when that might
    happen, you can use an *infinite loop* with a `break` statement. This time, let’s
    read a line of input from the keyboard via Python’s `input()` function and then
    print it with the first letter capitalized. We break out of the loop when a line
    containing only the letter `q` is typed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Skip Ahead with continue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, you don’t want to break out of a loop but just want to skip ahead
    to the next iteration for some reason. Here’s a contrived example: let’s read
    an integer, print its square if it’s odd, and skip it if it’s even. We even added
    a few comments. Again, we use `q` to stop the loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Check break Use with else
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If the `while` loop ended normally (no `break` call), control passes to an
    optional `else`. You use this when you’ve coded a `while` loop to check for something,
    and breaking as soon as it’s found. The `else` would be run if the `while` loop
    completed but the object was not found:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This use of `else` might seem nonintuitive. Consider it a *break checker*.
  prefs: []
  type: TYPE_NORMAL
- en: Iterate with for and in
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python makes frequent use of *iterators*, for good reason. They make it possible
    for you to traverse data structures without knowing how large they are or how
    they are implemented. You can even iterate over data that is created on the fly,
    allowing processing of data *streams* that would otherwise not fit in the computer’s
    memory all at once.
  prefs: []
  type: TYPE_NORMAL
- en: To show iteration, we need something to iterate over. You’ve already seen strings
    in [Chapter 5](ch05.html#ch_strings), but have not yet read the details on other
    *iterables* like lists and tuples ([Chapter 7](ch07.html#ch_lists)) or dictionaries
    ([Chapter 8](ch08.html#ch_dicts)). I’ll show two ways to walk through a string
    here, and show iteration for the other types in their own chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s legal Python to step through a string like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'But there’s a better, more Pythonic way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: String iteration produces one character at a time.
  prefs: []
  type: TYPE_NORMAL
- en: Cancel with break
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A `break` in a `for` loop breaks out of the loop, as it does for a `while`
    loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Skip with continue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Inserting a `continue` in a `for` loop jumps to the next iteration of the loop,
    as it does for a `while` loop.
  prefs: []
  type: TYPE_NORMAL
- en: Check break Use with else
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to `while`, `for` has an optional `else` that checks whether the `for`
    completed normally. If `break` was *not* called, the `else` statement is run.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is useful when you want to verify that the previous `for` loop ran to
    completion instead of being stopped early with a `break`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As with `while`, the use of `else` with `for` might seem nonintuitive. It makes
    more sense if you think of the `for` as looking for something, and `else` being
    called if you didn’t find it. To get the same effect without `else`, use some
    variable to indicate whether you found what you wanted in the `for` loop.
  prefs: []
  type: TYPE_NORMAL
- en: Generate Number Sequences with range()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `range()` function returns a stream of numbers within a specified range.
    without first having to create and store a large data structure such as a list
    or tuple. This lets you create huge ranges without using all the memory in your
    computer and crashing your program.
  prefs: []
  type: TYPE_NORMAL
- en: 'You use `range()` similar to how to you use slices: `range(` *`start`*, *`stop`*,
    *`step`* `)`. If you omit *`start`*, the range begins at `0`. The only required
    value is *`stop`*; as with slices, the last value created will be just before
    *`stop`*. The default value of *`step`* is `1`, but you can go backward with `-1`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Like `zip()`, `range()` returns an *iterable* object, so you need to step through
    the values with `for ... in`, or convert the object to a sequence like a list.
    Let’s make the range `0, 1, 2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s how to make a range from `2` down to `0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following snippet uses a step size of `2` to get the even numbers from
    `0` to `10`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Other Iterators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 14](ch14.html#ch_files) shows iteration over files. In [Chapter 10](ch10.html#ch_objects),
    you can see how to enable iteration over objects that you’ve defined yourself.
    Also, [Chapter 11](ch11.html#ch_modules) talks about `itertools`—a standard Python
    module with many useful shortcuts.'
  prefs: []
  type: TYPE_NORMAL
- en: Coming Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chain individual data into *lists* and *tuples*.
  prefs: []
  type: TYPE_NORMAL
- en: Things to Do
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 6.1 Use a `for` loop to print the values of the list `[3, 2, 1, 0]`.
  prefs: []
  type: TYPE_NORMAL
- en: 6.2 Assign the value `7` to the variable `guess_me`, and the value `1` to the
    variable `number`. Write a `while` loop that compares `number` with `guess_me`.
    Print `'too low'` if `number` is less than `guess me`. If `number` equals `guess_me`,
    print `'found it!'` and then exit the loop. If `number` is greater than `guess_me`,
    print `'oops'` and then exit the loop. Increment `number` at the end of the loop.
  prefs: []
  type: TYPE_NORMAL
- en: 6.3 Assign the value `5` to the variable `guess_me`. Use a `for` loop to iterate
    a variable called `number` over `range(10)`. If `number` is less than `guess_me`,
    print `'too low'`. If it equals `guess_me`, print `found it!` and then break out
    of the for loop. If `number` is greater than `guess_me`, print `'oops'` and then
    exit the loop.
  prefs: []
  type: TYPE_NORMAL
