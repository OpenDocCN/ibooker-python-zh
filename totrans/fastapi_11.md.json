["```py\n$ export PYTHONPATH=$PWD/src\n```", "```py\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef top():\n    return \"top here\"\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\"main:app\", reload=True)\n```", "```py\n$ python main.py &\nINFO:     Will watch for changes in these directories: [.../fastapi']\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [92543] using StatReload\nINFO:     Started server process [92551]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n```", "```py\n$ http localhost:8000\nHTTP/1.1 200 OK\ncontent-length: 8\ncontent-type: application/json\ndate: Sun, 05 Feb 2023 03:54:29 GMT\nserver: uvicorn\n\n\"top here\"\n```", "```py\nimport uvicorn\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef top():\n    return \"top here\"\n\n@app.get(\"/echo/{thing}\")\ndef echo(thing):\n    return f\"echoing {thing}\"\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"main:app\", reload=True)\n```", "```py\nWARNING:  StatReload detected changes in 'main.py'. Reloading...\nINFO:     Shutting down\nINFO:     Waiting for application shutdown.\nINFO:     Application shutdown complete.\nINFO:     Finished server process [92862]\nINFO:     Started server process [92872]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n```", "```py\n$ http -b localhost:8000/echo/argh\n\"echoing argh\"\n```", "```py\n$ `http -p HBh http://example.com/` GET / HTTP/1.1\nAccept: `/` Accept-Encoding: gzip, deflate\nConnection: keep-alive\nHost: example.com\nUser-Agent: HTTPie/3.2.1\n\nHTTP/1.1 200 OK\nAge: 374045\nCache-Control: max-age=604800\nContent-Encoding: gzip\nContent-Length: 648\nContent-Type: text/html; charset=UTF-8\nDate: Sat, 04 Feb 2023 01:00:21 GMT\nEtag: \"3147526947+gzip\"\nExpires: Sat, 11 Feb 2023 01:00:21 GMT\nLast-Modified: Thu, 17 Oct 2019 07:18:26 GMT\nServer: ECS (cha/80E2)\nVary: Accept-Encoding\nX-Cache: HIT\n```", "```py\nfrom fastapi import APIRouter\n\nrouter = APIRouter(prefix = \"/explorer\")\n\n@router.get(\"/\")\ndef top():\n    return \"top explorer endpoint\"\n```", "```py\nfrom fastapi import FastAPI\nfrom .web import explorer\n\napp = FastAPI()\n\napp.include_router(explorer.router)\n```", "```py\n$ http -b localhost:8000/explorer/\n\"top explorer endpoint\"\n```", "```py\nfrom pydantic import BaseModel\n\nclass Explorer(BaseModel):\n    name: str\n    country: str\n    description: str\n```", "```py\nfrom pydantic import BaseModel\n\nclass Creature(BaseModel):\n    name: str\n    country: str\n    area: str\n    description: str\n    aka: str\n```", "```py\nfrom model.explorer import Explorer\n\n# fake data, replaced in Chapter 10 by a real database and SQL\n_explorers = [\n    Explorer(name=\"Claude Hande\",\n             country=\"FR\",\n             description=\"Scarce during full moons\"),\n    Explorer(name=\"Noah Weiser\",\n             country=\"DE\",\n             description=\"Myopic machete man\"),\n    ]\n\ndef get_all() -> list[Explorer]:\n    \"\"\"Return all explorers\"\"\"\n    return _explorers\n\ndef get_one(name: str) -> Explorer | None:\n    for _explorer in _explorers:\n        if _explorer.name == name:\n            return _explorer\n    return None\n\n# The following are nonfunctional for now,\n# so they just act like they work, without modifying\n# the actual fake _explorers list:\ndef create(explorer: Explorer) -> Explorer:\n    \"\"\"Add an explorer\"\"\"\n    return explorer\n\ndef modify(explorer: Explorer) -> Explorer:\n    \"\"\"Partially modify an explorer\"\"\"\n    return explorer\n\ndef replace(explorer: Explorer) -> Explorer:\n    \"\"\"Completely replace an explorer\"\"\"\n    return explorer\n\ndef delete(name: str) -> bool:\n    \"\"\"Delete an explorer; return None if it existed\"\"\"\n    return None\n```", "```py\nfrom model.creature import Creature\n\n# fake data, until we use a real database and SQL\n_creatures = [\n    Creature(name=\"Yeti\",\n             aka=\"Abominable Snowman\",\n             country=\"CN\",\n             area=\"Himalayas\",\n             description=\"Hirsute Himalayan\"),\n    Creature(name=\"Bigfoot\",\n             description=\"Yeti's Cousin Eddie\",\n             country=\"US\",\n             area=\"*\",\n             aka=\"Sasquatch\"),\n    ]\n\ndef get_all() -> list[Creature]:\n    \"\"\"Return all creatures\"\"\"\n    return _creatures\n\ndef get_one(name: str) -> Creature | None:\n    \"\"\"Return one creature\"\"\"\n    for _creature in _creatures:\n        if _creature.name == name:\n            return _creature\n    return None\n\n# The following are nonfunctional for now,\n# so they just act like they work, without modifying\n# the actual fake _creatures list:\ndef create(creature: Creature) -> Creature:\n    \"\"\"Add a creature\"\"\"\n    return creature\n\ndef modify(creature: Creature) -> Creature:\n    \"\"\"Partially modify a creature\"\"\"\n    return creature\n\ndef replace(creature: Creature) -> Creature:\n    \"\"\"Completely replace a creature\"\"\"\n    return creature\n\ndef delete(name: str):\n    \"\"\"Delete a creature; return None if it existed\"\"\"\n    return None\n```", "```py\nfrom fastapi import APIRouter\nfrom model.explorer import Explorer\nimport fake.explorer as service\n\nrouter = APIRouter(prefix = \"/explorer\")\n\n@router.get(\"/\")\ndef get_all() -> list[Explorer]:\n    return service.get_all()\n\n@router.get(\"/{name}\")\ndef get_one(name) -> Explorer | None:\n    return service.get_one(name)\n\n# all the remaining endpoints do nothing yet:\n@router.post(\"/\")\ndef create(explorer: Explorer) -> Explorer:\n    return service.create(explorer)\n\n@router.patch(\"/\")\ndef modify(explorer: Explorer) -> Explorer:\n    return service.modify(explorer)\n\n@router.put(\"/\")\ndef replace(explorer: Explorer) -> Explorer:\n    return service.replace(explorer)\n\n@router.delete(\"/{name}\")\ndef delete(name: str):\n    return None\n```", "```py\nfrom fastapi import APIRouter\nfrom model.creature import Creature\nimport fake.creature as service\n\nrouter = APIRouter(prefix = \"/creature\")\n\n@router.get(\"/\")\ndef get_all() -> list[Creature]:\n    return service.get_all()\n\n@router.get(\"/{name}\")\ndef get_one(name) -> Creature:\n    return service.get_one(name)\n\n# all the remaining endpoints do nothing yet:\n@router.post(\"/\")\ndef create(creature: Creature) -> Creature:\n    return service.create(creature)\n\n@router.patch(\"/\")\ndef modify(creature: Creature) -> Creature:\n    return service.modify(creature)\n\n@router.put(\"/\")\ndef replace(creature: Creature) -> Creature:\n    return service.replace(creature)\n\n@router.delete(\"/{name}\")\ndef delete(name: str):\n    return service.delete(name)\n```", "```py\nimport uvicorn\nfrom fastapi import FastAPI\nfrom web import explorer, creature\n\napp = FastAPI()\n\napp.include_router(explorer.router)\napp.include_router(creature.router)\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"main:app\", reload=True)\n```", "```py\n$ http -b localhost:8000/explorer/\n[\n    {\n        \"country\": \"FR\",\n        \"name\": \"Claude Hande\",\n        \"description\": \"Scarce during full moons\"\n    },\n    {\n        \"country\": \"DE\",\n        \"name\": \"Noah Weiser\",\n        \"description\": \"Myopic machete man\"\n    }\n]\n```", "```py\n$ http -b localhost:8000/explorer/\"Noah Weiser\"\n{\n    \"country\": \"DE\",\n    \"name\": \"Noah Weiser\",\n    \"description\": \"Myopic machete man\"\n}\n```", "```py\n$ http -b PUT localhost:8000/explorer/\"Noah Weiser\"\n{\n    \"country\": \"DE\",\n    \"name\": \"Noah Weiser\",\n    \"description\": \"Myopic machete man\"\n}\n```", "```py\n$ http -b PATCH localhost:8000/explorer/\"Noah Weiser\"\n{\n    \"country\": \"DE\",\n    \"name\": \"Noah Weiser\",\n    \"description\": \"Myopic machete man\"\n}\n```", "```py\n$ http -b DELETE localhost:8000/explorer/Noah%20Weiser\ntrue\n\n$ http -b DELETE localhost:8000/explorer/Edmund%20Hillary\nfalse\n```", "```py\n[\n  {\n    \"name\": \"Claude Hande\",\n    \"country\": \"FE\",\n    \"description\": \"Scarce during full moons\"\n  },\n  {\n    \"name\": \"Noah Weiser\",\n    \"country\": \"DE\",\n    \"description\": \"Myopic machete man\"\n  }\n]\n```"]