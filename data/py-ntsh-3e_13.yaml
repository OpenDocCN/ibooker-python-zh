- en: Chapter 13\. Time Operations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章 时间操作
- en: 'A Python program can handle time in several ways. Time *intervals* are floating-point
    numbers in units of seconds (a fraction of a second is the fractional part of
    the interval): all standard library functions accepting an argument that expresses
    a time interval in seconds accept a float as the value of that argument. *Instants*
    in time are expressed in seconds since a reference instant, known as the *epoch*.
    (Although epochs vary per language and per platform, on all platforms, Python’s
    epoch is midnight, UTC, January 1, 1970.) Time instants often also need to be
    expressed as a mixture of units of measurement (e.g., years, months, days, hours,
    minutes, and seconds), particularly for I/O purposes. I/O, of course, also requires
    the ability to format times and dates into human-readable strings, and parse them
    back from string formats.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python 程序可以以多种方式处理时间。时间*间隔*是以秒为单位的浮点数（时间间隔的小数部分是间隔的小数部分）：所有标准库函数接受以秒为单位表示时间间隔的参数，接受浮点数作为该参数的值。时间中的*瞬间*是自某个参考瞬间以来的秒数，称为*
    epoch *。（尽管每种语言和每个平台的 epoch 有所不同，但在所有平台上，Python 的 epoch 是 UTC 时间，1970年1月1日午夜。）时间瞬间通常还需要以多种单位（例如年、月、日、小时、分钟和秒）的混合形式表示，特别是用于输入输出目的。当然，输入输出还需要能够将时间和日期格式化为人类可读的字符串，并从字符串格式解析它们回来。
- en: The time Module
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间模块
- en: The time module is somewhat dependent on the underlying system’s C library,
    which sets the range of dates that the time module can handle. On older Unix systems,
    the years 1970 and 2038 were typical cutoff points^([1](ch13.xhtml#ch01fn110))
    (a limitation avoided by using datetime, discussed in the following section).
    Time instants are normally specified in UTC (Coordinated Universal Time, once
    known as GMT, or Greenwich Mean Time). The time module also supports local time
    zones and daylight savings time (DST), but only to the extent the underlying C
    system library does.^([2](ch13.xhtml#ch01fn111))
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 时间模块在某种程度上依赖于底层系统的 C 库，这限定了时间模块可以处理的日期范围。在旧的 Unix 系统中，1970 年和2038年是典型的截止点^([1](ch13.xhtml#ch01fn110))（这个限制可以通过使用
    datetime 避免，后文将讨论）。时间点通常以 UTC（协调世界时，曾称为 GMT 或格林尼治平均时间）指定。时间模块还支持本地时区和夏令时（DST），但仅限于底层
    C 系统库支持的范围^([2](ch13.xhtml#ch01fn111))。
- en: 'As an alternative to seconds since the epoch, a time instant can be represented
    by a tuple of nine integers, called a *timetuple* (covered in [Table 13-1](#tuple_form_of_time_representation).)
    All the items are integers: timetuples don’t keep track of fractions of a second.
    A timetuple is an instance of struct_time. You can use it as a tuple; you can
    also, more usefully, access the items as the read-only attributes *x*.tm_year,
    *x*.tm_mon, and so on, with the attribute names listed in [Table 13-1](#tuple_form_of_time_representation).
    Wherever a function requires a timetuple argument, you can pass an instance of
    struct_time or any other sequence whose items are nine integers in the right ranges
    (all ranges in the table include both lower and upper bounds, both inclusive).'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 作为秒数自纪元以来的一个替代方法，时间点可以用一个包含九个整数的元组表示，称为* timetuple *（在[Table 13-1](#tuple_form_of_time_representation)中有介绍）。所有项目都是整数：timetuples
    不跟踪秒的小数部分。一个 timetuple 是 struct_time 的一个实例。你可以将其用作元组；更有用的是，你可以通过只读属性访问项目，如 *x*.tm_year，*x*.tm_mon
    等等，属性名称在[Table 13-1](#tuple_form_of_time_representation)中列出。在任何需要 timetuple 参数的函数中，你都可以传递
    struct_time 的实例或任何其他项目是九个整数且范围正确的序列（表中的所有范围都包括下限和上限，都是包容的）。
- en: Table 13-1\. Tuple form of time representation
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 表 13-1 元组形式的时间表示
- en: '| Item | Meaning | Field name | Range | Notes |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| 项目 | 含义 | 字段名 | 范围 | 备注 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| 0 | Year | tm_year | 1970–2038 | 0001–9999 on some platforms |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 0 | Year | tm_year | 1970–2038 | 有些平台支持 0001–9999 |'
- en: '| 1 | Month | tm_mon | 1–12 | 1 is January; 12 is December |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 1 | Month | tm_mon | 1–12 | 1 代表一月；12 代表十二月 |'
- en: '| 2 | Day | tm_mday | 1–31 |   |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 2 | Day | tm_mday | 1–31 |   |'
- en: '| 3 | Hour | tm_hour | 0–23 | 0 is midnight; 12 is noon |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 小时 | tm_hour | 0–23 | 0 表示午夜；12 表示中午 |'
- en: '| 4 | Minute | tm_min | 0–59 |   |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 分钟 | tm_min | 0–59 |   |'
- en: '| 5 | Second | tm_sec | 0–61 | 60 and 61 for leap seconds |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 秒 | tm_sec | 0–61 | 60 和 61 表示闰秒 |'
- en: '| 6 | Weekday | tm_wday | 0–6 | 0 is Monday; 6 is Sunday |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 星期几 | tm_wday | 0–6 | 0 表示星期一；6 表示星期日 |'
- en: '| 7 | Year day | tm_yday | 1–366 | Day number within the year |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 年内天数 | tm_yday | 1–366 | 年内的日期编号 |'
- en: '| 8 | DST flag | tm_isdst | −1–1 | −1 means the library determines DST |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 夏令时标志 | tm_isdst | −1–1 | −1 表示库确定夏令时 |'
- en: To translate a time instant from a “seconds since the epoch” floating-point
    value into a timetuple, pass the floating-point value to a function (e.g., localtime)
    that returns a timetuple with all nine items valid. When you convert in the other
    direction, mktime ignores redundant items 6 (tm_wday) and 7 (tm_yday) of the tuple.
    In this case, you normally set item 8 (tm_isdst) to −1 so that mktime itself determines
    whether to apply DST.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要将“自纪元以来的秒数”浮点值转换为时间元组，请将浮点值传递给函数（例如 localtime），该函数返回所有九个有效项目的时间元组。在反向转换时，mktime
    忽略元组的多余项目 6（tm_wday）和 7（tm_yday）。在这种情况下，通常将项目 8（tm_isdst）设置为 −1，以便 mktime 自行确定是否应用
    DST。
- en: time supplies the functions and attributes listed in [Table 13-2](#functions_and_attributes_of_the_time_mo).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: time 提供了 [表 13-2](#functions_and_attributes_of_the_time_mo) 中列出的函数和属性。
- en: Table 13-2\. Functions and attributes of the *time* module
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 表 13-2\. *time* 模块的函数和属性
- en: '| asctime | asctime([*tupletime*]) Accepts a timetuple and returns a readable
    24-character string, e.g., ''Sun Jan 8 14:41:06 2017''. Calling asctime() without
    arguments is like calling asctime(time.localtime()) (formats current time in local
    time). |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| asctime | asctime([*tupletime*]) 接受时间元组并返回可读的 24 字符串，例如 ''Sun Jan 8 14:41:06
    2017''。调用 asctime() 无参数相当于调用 asctime(time.localtime())（格式化当前本地时间）。 |'
- en: '| ctime | ctime([*secs*]) Like asctime(localtime(*secs*)), accepts an instant
    expressed in seconds since the epoch and returns a readable 24-character string
    form of that instant, in local time. Calling ctime() without arguments is like
    calling asctime() (formats current time in local time). |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| ctime | ctime([*secs*]) 类似于 asctime(localtime(*secs*))，接受以自纪元以来的秒数表示的瞬时，并返回该瞬时的可读的
    24 字符串形式，以本地时间显示。调用 ctime() 无参数相当于调用 asctime()（格式化当前本地时间）。 |'
- en: '| gmtime | gmtime([*secs*]) Accepts an instant expressed in seconds since the
    epoch and returns a timetuple *t* with the UTC time (*t*.tm_isdst is always 0).
    Calling gmtime() without arguments is like calling gmtime(time()) (returns the
    timetuple for the current time instant). |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| gmtime | gmtime([*secs*]) 接受以自纪元以来的秒数表示的瞬时，并返回 UTC 时间的时间元组 *t*（*t*.tm_isdst
    总是 0）。调用 gmtime() 无参数相当于调用 gmtime(time())（返回当前时间瞬时的时间元组）。 |'
- en: '| localtime | localtime([*secs*]) Accepts an instant expressed in seconds since
    the epoch and returns a timetuple *t* with the local time (*t*.tm_isdst is 0 or
    1, depending on whether DST applies to instant *secs* by local rules). Calling
    localtime() without arguments is like calling localtime(time()) (returns the timetuple
    for the current time instant). |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| localtime | localtime([*secs*]) 接受自纪元以来经过的秒数的瞬时，并返回本地时间的时间元组 *t*（*t*.tm_isdst
    根据本地规则应用于瞬时 *secs* 是 0 或 1）。调用 localtime() 无参数相当于调用 localtime(time())（返回当前时间瞬时的时间元组）。
    |'
- en: '| mktime | mktime(*tupletime*) Accepts an instant expressed as a timetuple
    in local time and returns a floating-point value with the instant expressed in
    seconds since the epoch (only accepts the limited epoch dates between 1970–2038,
    not the extended range, even on 64-bit machines).^([a](ch13.xhtml#ch01fn112))
    The DST flag, the last item in *tupletime*, is meaningful: set it to 0 to get
    standard time, to 1 to get DST, or to −1 to let mktime compute whether DST is
    in effect at the given instant. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| mktime | mktime(*tupletime*) 接受作为本地时间的时间元组表示的瞬时，并返回以自纪元以来的秒数表示的浮点值（即使在 64
    位系统上，只接受 1970–2038 之间的有限纪元日期，而不是扩展范围）^([a](ch13.xhtml#ch01fn112))。*tupletime*
    中的最后一项 DST 标志具有意义：将其设置为 0 以获取标准时间，设置为 1 以获取 DST，或设置为 −1 让 mktime 计算给定瞬时时是否适用 DST。
    |'
- en: '| monotonic | monotonic() Like time(), returns the current time instant, a
    float with seconds since the epoch; however, the time value is guaranteed to never
    go backward between calls, even when the system clock is adjusted (e.g., due to
    leap seconds or at the moment of switching to or from DST). |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| monotonic | monotonic() 类似于 time()，返回当前时间瞬时的浮点数秒数；然而，保证时间值在调用之间不会后退，即使系统时钟调整（例如由于闰秒或在切换到或从
    DST 时刻）。 |'
- en: '| perf_counter | perf_counter() For determining elapsed time between successive
    calls (like a stopwatch), perf_counter returns a time value in fractional seconds
    using the highest-resolution clock available to get accuracy for short durations.
    It is system-wide and *includes* time elapsed during sleep. Use only the difference
    between successive calls, as there is no defined reference point. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| perf_counter | perf_counter() 用于测量连续调用之间的经过时间（如秒表），perf_counter 返回使用最高分辨率时钟得到的秒数值，以获取短时间内的精确度。它是系统范围的，并且在休眠期间也包括经过的时间。只使用连续调用之间的差异，因为没有定义的参考点。
    |'
- en: '| process_time | process_time() Like perf_counter; however, the returned time
    value is process-wide and *doesn’t* include time elapsed during sleep. Use only
    the difference between successive calls, as there is no defined reference point.
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| process_time | process_time() 像perf_counter一样；但是，返回的时间值是进程范围的，并且*不*包括在休眠期间经过的时间。仅使用连续调用之间的差异，因为没有定义的参考点。|'
- en: '| sleep | sleep(*secs*) Suspends the calling thread for *secs* seconds. The
    calling thread may start executing again before *secs* seconds (when it’s the
    main thread and some signal wakes it up) or after a longer suspension (depending
    on system scheduling of processes and threads). You can call sleep with *secs*
    set to 0 to offer other threads a chance to run, incurring no significant delay
    if the current thread is the only one ready to run. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| sleep | sleep(*secs*) 暂停调用线程* secs *秒。如果是主线程并且某些信号唤醒了它，则在* secs *秒（当它是唯一准备运行的当前线程时）之前或更长时间的暂停之后，调用线程可能会再次开始执行（取决于进程和线程的系统调度）。您可以将*
    secs *设置为0调用sleep，以便为其他线程提供运行机会，如果当前线程是唯一准备运行的线程，则不会造成显著延迟。|'
- en: '| strftime | strftime(*fmt*[, *tupletime*]) Accepts an instant expressed as
    a timetuple in local time and returns a string representing the instant as specified
    by string *fmt*. If you omit *tupletime*, strftime uses localtime(time()) (formats
    the current time instant). The syntax of *fmt* is similar to that covered in [“Legacy
    String Formatting with %”](ch09.xhtml#legacy_string_formatting_with_percent),
    though the conversion characters are different, as shown in [Table 13-3](#conversion_characters_for_strftime).
    Refer to the time instant specified by *tupletime*; the format can’t specify width
    and precision.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '| strftime | strftime(*fmt*[, *tupletime*]) 接受表示本地时间的时间元组* tupletime *，并返回字符串，该字符串表示按*
    fmt *指定的即时时间。如果省略* tupletime *，strftime使用本地时间（time（））（格式化当前即时时间）。* fmt *的语法类似于[“使用％进行传统字符串格式化”](ch09.xhtml#legacy_string_formatting_with_percent)，尽管转换字符不同，如[表13-3](#conversion_characters_for_strftime)所示。参考*
    tupletime *指定的时间即时；格式无法指定宽度和精度。'
- en: For example, you can obtain dates just as formatted by asctime (e.g., 'Tue Dec
    10 18:07:14 2002') with the format string '%a %b %d %H:%M:%S %Y'.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以使用asctime格式（例如，'Tue Dec 10 18:07:14 2002'）获取日期，格式字符串为'%a %b %d %H:%M:%S
    %Y'。
- en: You can obtain dates compliant with RFC 822 (e.g., 'Tue, 10 Dec 2002 18:07:14
    EST') with the format string '%a, %d %b %Y %H:%M:%S %Z'.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用格式字符串'%a, %d %b %Y %H:%M:%S %Z'获取与RFC 822兼容的日期（例如'Tue, 10 Dec 2002 18:07:14
    EST'）。
- en: These strings can also be used for datetime formatting using the mechanisms
    discussed in [“Formatting of User-Coded Classes”](ch09.xhtml#formatting_of_user_coded_classes),
    allowing you to equivalently write, for a datetime.datetime object d, either f'{d:%Y/%m/%d}'
    or '{:%Y/%m/%d}'.format(d), both of which give a result such as ’2022/04/17’.
    For ISO 8601–format datetimes, see the isoformat() and fromisoformat() methods
    covered in [“The date Class”](#the_date_class). |
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字符串也可用于使用[“用户编码类的格式化”](ch09.xhtml#formatting_of_user_coded_classes)中讨论的机制进行日期时间格式化，允许您等效地编写，对于datetime.datetime对象d，可以写为f'{d:%Y/%m/%d}'或'{:%Y/%m/%d}'.format(d)，两者都会给出例如'2022/04/17'的结果。对于ISO
    8601格式的日期时间，请参阅[“日期类”](#the_date_class)中涵盖的isoformat（）和fromisoformat（）方法。|
- en: '| strptime | strptime(*str*, *fmt*) Parses *str* according to format string
    *fmt* (a string such as ''%a %b %d %H:%M:%S %Y'', as covered in the discussion
    of strftime) and returns the instant as a timetuple. If no time values are provided,
    defaults to midnight. If no date values are provided, defaults to January 1, 1900\.
    For example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '| strptime | strptime(*str*, *fmt*) 根据格式字符串*fmt*（例如''%a %b %d %H:%M:%S %Y''，详见strftime讨论）解析*str*，并返回时间元组作为即时。如果未提供时间值，默认为午夜。如果未提供日期值，默认为1900年1月1日。例如：'
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '|'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| time | time() Returns the current time instant, a float with seconds since
    the epoch. On some (mostly older) platforms, the precision of this time is as
    low as one second. May return a lower value in a subsequent call if the system
    clock is adjusted backward between calls (e.g., due to leap seconds). |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| time | time() 返回当前时间即时，一个从纪元以来的浮点数秒数。在一些（主要是较旧的）平台上，此时间的精度低至一秒。如果系统时钟在调用之间向后调整（例如由于闰秒），则可能在后续调用中返回较低的值。|'
- en: '| timezone | The offset in seconds of the local time zone (without DST) from
    UTC (<0 in the Americas; >=0 in most of Europe, Asia, and Africa). |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| timezone | 本地时区（无夏令时）与UTC的偏移量（<0为美洲；>=0为大部分欧洲、亚洲和非洲）。'
- en: '| tzname | A pair of locale-dependent strings, which are the names of the local
    time zone without and with DST, respectively. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| tzname | 本地时间区域依赖的一对字符串，即无夏令时和有夏令时的本地时区名称。|'
- en: '| ^([a](ch13.xhtml#ch01fn112-marker)) mktime’s result’s fractional part is
    always 0, since its timetuple argument does not account for fractions of a second.
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| ^([a](ch13.xhtml#ch01fn112-marker)) mktime 的结果小数部分总是 0，因为其 timetuple 参数不考虑秒的小数部分。
    |'
- en: Table 13-3\. Conversion characters for strftime
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 表 13-3\. strftime 的转换字符
- en: '| Type char | Meaning | Special notes |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 类型字符 | 含义 | 特殊说明 |'
- en: '| --- | --- | --- |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| a | Weekday name, abbreviated | Depends on locale |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| a | 星期几名称（缩写） | 取决于区域设置 |'
- en: '| A | Weekday name, full | Depends on locale |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| A | 星期几名称（完整） | 取决于区域设置 |'
- en: '| b | Month name, abbreviated | Depends on locale |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| b | 月份名称（缩写） | 取决于区域设置 |'
- en: '| B | Month name, full | Depends on locale |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| B | 月份名称（完整） | 取决于区域设置 |'
- en: '| c | Complete date and time representation | Depends on locale |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| c | 完整的日期和时间表示 | 取决于区域设置 |'
- en: '| d | Day of the month | Between 1 and 31 |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| d | 月份中的第几天 | 从 1 到 31 |'
- en: '| f | Microsecond as decimal, zero-padded to six digits | One to six digits
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| f | 微秒数以小数形式，零填充到六位数 | 一到六位数字 |'
- en: '| G | ISO 8601:2000 standard week-based year number |   |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| G | ISO 8601:2000 标准的基于周的年份编号 |   |'
- en: '| H | Hour (24-hour clock) | Between 0 and 23 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| H | 小时数（24 小时制钟） | 从 0 到 23 |'
- en: '| I | Hour (12-hour clock) | Between 1 and 12 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| I | 小时数（12 小时制钟） | 从 1 到 12 |'
- en: '| j | Day of the year | Between 1 and 366 |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| j | 年份中的第几天 | 从 1 到 366 |'
- en: '| m | Month number | Between 1 and 12 |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| m | 月份编号 | 从 1 到 12 |'
- en: '| M | Minute number | Between 0 and 59 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| M | 分钟数 | 从 0 到 59 |'
- en: '| p | A.M. or P.M. equivalent | Depends on locale |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| p | 上午或下午的等价项 | 取决于区域设置 |'
- en: '| S | Second number | Between 0 and 61 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| S | 秒数 | 从 0 到 61 |'
- en: '| u | Day of week | Monday is 1, up to 7 |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| u | 星期几 | 星期一为 1，最多为 7 |'
- en: '| U | Week number (Sunday first weekday) | Between 0 and 53 |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| U | 周数（以星期天为第一天） | 从 0 到 53 |'
- en: '| V | ISO 8601:2000 standard week-based week number |   |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| V | ISO 8601:2000 标准的基于周的周数 |   |'
- en: '| w | Weekday number | 0 is Sunday, up to 6 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| w | 星期几编号 | 0 表示星期天，最大为 6 |'
- en: '| W | Week number (Monday first weekday) | Between 0 and 53 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| W | 周数（以星期一为第一天） | 从 0 到 53 |'
- en: '| x | Complete date representation | Depends on locale |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| x | 完整的日期表示 | 取决于区域设置 |'
- en: '| X | Complete time representation | Depends on locale |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| X | 完整的时间表示 | 取决于区域设置 |'
- en: '| y | Year number within century | Between 0 and 99 |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| y | 世纪内的年份编号 | 从 0 到 99 |'
- en: '| Y | Year number | 1970 to 2038, or wider |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| Y | 年份编号 | 从 1970 到 2038，或更宽 |'
- en: '| z | UTC offset as a string: ±HHMM[SS[.ffffff]] |   |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| z | UTC 偏移量作为字符串：±HHMM[SS[.ffffff]] |   |'
- en: '| Z | Name of time zone | Empty if no time zone exists |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| Z | 时区名称 | 如果不存在时区则为空 |'
- en: '| % | A literal % character | Encoded as %% |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| % | 字面上的 % 字符 | 编码为 %% |'
- en: The datetime Module
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: datetime 模块
- en: 'datetime provides classes for modeling date and time objects, which can be
    either *aware* of time zones or *naive* (the default). The class tzinfo, whose
    instances model a time zone, is abstract: the datetime module supplies only one
    simple implementation, datetime.timezone (for all the gory details, see the [online
    docs](https://oreil.ly/8Bt8N)). The zoneinfo module, covered in the following
    section, offers a richer concrete implementation of tzinfo, which lets you easily
    create time zone-aware datetime objects. All types in datetime have immutable
    instances: attributes are read-only, instances can be keys in a dict or items
    in a set, and all functions and methods return new objects, never altering objects
    passed as arguments.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: datetime 提供了用于建模日期和时间对象的类，这些对象可以是*有意识*的时区或*无意识*的（默认）。类 tzinfo 的实例用于建模时区，是抽象的：datetime
    模块仅提供一个简单的实现 datetime.timezone（更多详细信息，请参阅[在线文档](https://oreil.ly/8Bt8N)）。在下一节中讨论的
    zoneinfo 模块提供了 tzinfo 的更丰富的具体实现，它允许您轻松创建时区感知的 datetime 对象。datetime 中的所有类型都有不可变的实例：属性是只读的，实例可以是字典中的键或集合中的项，所有函数和方法都返回新对象，从不改变作为参数传递的对象。
- en: The date Class
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: date 类
- en: 'Instances of the date class represent a date (no time of day in particular
    within that date) between date.min <= d <= date.max, are always naive, and assume
    the Gregorian calendar was always in effect. date instances have three read-only
    integer attributes: *year*, *month*, and *day*. The constructor for this class
    has the signature:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: date 类的实例表示一个日期（特定日期内的无特定时间），满足 date.min <= d <= date.max，始终是无意识的，并假设格里高利历始终有效。date
    实例具有三个只读整数属性：*year*、*month* 和 *day*。此类的构造函数签名如下：
- en: '| date | **class** date(*year, month, day*) Returns a date object for the given
    *year*, *month*, and *day* arguments, in the valid ranges 1 <= *year* <= 9999,
    1 <= *month* <= 12, and 1 <= *day* <= *n*, where *n* is the number of days for
    the given month and year. Raises ValueError if invalid values are given. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| date | **class** date(*year, month, day*) 返回给定 *year*、*month* 和 *day* 参数的日期对象，有效范围为
    1 <= *year* <= 9999，1 <= *month* <= 12，以及 1 <= *day* <= *n*，其中 *n* 是给定月份和年份的天数。如果给出无效值，则引发
    ValueError。 |'
- en: The date class also supplies three class methods usable as alternative constructors,
    listed in [Table 13-4](#alternative_datetime_constructor).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 日期类还提供了作为替代构造函数可用的三个类方法，列在 [表 13-4](#alternative_datetime_constructor) 中。
- en: Table 13-4\. Alternative date constructors
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 表13-4\. 替代日期构造函数
- en: '| fromordinal | date.fromordinal(*ordinal*) Returns a date object corresponding
    to the [proleptic Gregorian ordinal](https://oreil.ly/o_Li9) *ordinal*, where
    a value of 1 corresponds to the first day of year 1 CE. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| fromordinal | date.fromordinal(*ordinal*) 返回一个日期对象，对应于普通格里高利纪元中的 *ordinal*，其中值为1对应于公元1年的第一天。
    |'
- en: '| fromtimestamp | date.fromtimestamp(*timestamp*) Returns a date object corresponding
    to the instant *timestamp* expressed in seconds since the epoch. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| fromtimestamp | date.fromtimestamp(*timestamp*) 返回一个日期对象，对应于自纪元以来以秒表示的 *timestamp*。
    |'
- en: '| today | date.today() Returns a date representing today’s date. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| today | date.today() 返回表示今天日期的日期对象。 |'
- en: Instances of the date class support some arithmetic. The difference between
    date instances is a timedelta instance; you can add or subtract a timedelta to
    or from a date instance to make another date instance. You can also compare any
    two instances of the date class (the later one is greater).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 日期类的实例支持一些算术操作。日期实例之间的差异是一个 timedelta 实例；您可以将 timedelta 添加到日期实例或从日期实例中减去 timedelta
    以创建另一个日期实例。您也可以比较日期类的任意两个实例（后面的日期较大）。
- en: An instance *d* of the class date supplies the methods listed in [Table 13-5](#methods_of_an_instance_d_of_class_date).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 类 date 的实例 *d* 提供了列表中列出的方法，详见 [表 13-5](#methods_of_an_instance_d_of_class_date)。
- en: Table 13-5\. Methods of an instance d of class date
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 表13-5\. 类 date 的实例 *d* 的方法
- en: '| ctime | *d*.ctime() Returns a string representing the date *d* in the same
    24-character format as time.ctime (with the time of day set to 00:00:00, midnight).
    |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| ctime | *d*.ctime() 返回一个字符串，表示日期 *d* 的格式与 time.ctime 中的24字符格式相同（日期设置为00:00:00，午夜）。
    |'
- en: '| isocalendar | *d*.isocalendar() Returns a tuple with three integers (ISO
    year, ISO week number, and ISO weekday). See the [ISO 8601 standard](https://oreil.ly/e5yfG)
    for more details about the ISO (International Standards Organization) calendar.
    |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| isocalendar | *d*.isocalendar() 返回一个包含三个整数的元组（ISO年份、ISO周数和ISO工作日）。更多关于ISO（国际标准化组织）日历的详细信息，请参见
    [ISO 8601标准](https://oreil.ly/e5yfG)。 |'
- en: '| isoformat | *d*.isoformat() Returns a string representing date *d* in the
    format ''YYYY-MM-DD''; same as str(*d*). |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| isoformat | *d*.isoformat() 返回一个字符串，表示日期 *d* 的格式为 ''YYYY-MM-DD''；与 str(*d*)
    相同。 |'
- en: '| isoweekday | *d*.isoweekday() Returns the day of the week of date *d* as
    an integer, 1 for Monday through 7 for Sunday; like d.weekday() + 1. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| isoweekday | *d*.isoweekday() 返回日期 *d* 的星期几作为整数，星期一为1，星期日为7；类似于 d.weekday()
    + 1。 |'
- en: '| replace | *d*.replace(year=**None**, month=**None**, day=**None**) Returns
    a new date object, like *d* except for those attributes explicitly specified as
    arguments, which get replaced. For example:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '| replace | *d*.replace(year=**None**, month=**None**, day=**None**) 返回一个新的日期对象，类似于
    *d*，但显式指定为参数的那些属性被替换。例如：'
- en: '[PRE2]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '|'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| strftime | *d*.strftime(*fmt*) Returns a string representing date *d* as
    specified by string *fmt*, like:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '| strftime | *d*.strftime(*fmt*) 返回一个字符串，表示日期 *d* 按字符串 *fmt* 指定的格式。例如：'
- en: '[PRE3]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '|'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| timetuple | *d*.timetuple() Returns a timetuple corresponding to date *d*
    at time 00:00:00 (midnight). |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| timetuple | *d*.timetuple() 返回一个 timetuple，对应于日期 *d* 的时间为00:00:00（午夜）。 |'
- en: '| toordinal | *d*.toordinal() Returns the proleptic Gregorian ordinal for date
    *d*. For example:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '| toordinal | *d*.toordinal() 返回日期 *d* 的普通格里高利日期。例如：'
- en: '[PRE4]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '|'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| weekday | *d*.weekday() Returns the day of the week of date *d* as an integer,
    0 for Monday through 6 for Sunday; like d.isoweekday() - 1. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| weekday | *d*.weekday() 返回日期 *d* 的星期几作为整数，星期一为0，星期日为6；类似于 d.isoweekday()
    - 1。 |'
- en: The time Class
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间类
- en: 'Instances of the time class represent a time of day (of no particular date),
    may be naive or aware regarding time zones, and always ignore leap seconds. They
    have five attributes: four read-only integers (hour, minute, second, and microsecond)
    and an optional read-only tzinfo (**None** for naive instances). The constructor
    for the time class has the signature:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 时间类的实例表示一天中的时间（没有特定的日期），可以是关于时区的明确或无意识的，并且总是忽略闰秒。它们有五个属性：四个只读整数（小时、分钟、秒和微秒）和一个可选的只读
    tzinfo 属性（无意识实例的情况下为 **None**）。时间类的构造函数的签名为：
- en: '| time | **class** time(hour=0, minute=0, second=0, microsecond=0, tzinfo=**None**)
    Instances of the class time do not support arithmetic. You can compare two instances
    of time (the one that’s later in the day is greater), but only if they are either
    both aware or both naive. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| time | **class** time(hour=0, minute=0, second=0, microsecond=0, tzinfo=**None**)
    类时间的实例不支持算术运算。可以比较两个时间实例（时间较晚的为较大），但仅当它们都是明确或都是无意识的时才行。 |'
- en: An instance *t* of the class time supplies the methods listed in [Table 13-6](#methods_of_an_instance_t_of_class_time).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 类时间的实例 *t* 提供了 [表 13-6](#methods_of_an_instance_t_of_class_time) 中列出的方法。
- en: Table 13-6\. Methods of an instance t of class time
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 表 13-6\. 类时间实例 t 的方法
- en: '| isoformat | *t*.isoformat() Returns a string representing time *t* in the
    format ''HH:MM:SS''; same as str(*t*). If *t*.microsecond != 0, the resulting
    string is longer: ''HH:MM:SS.mmmmmm''. If *t* is aware, six more characters, ''+HH:MM'',
    are added at the end to represent the time zone’s offset from UTC. In other words,
    this formatting operation follows the [ISO 8601 standard](https://oreil.ly/e5yfG).
    |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| isoformat | *t*.isoformat() 返回一个表示时间 *t* 的字符串，格式为 ''HH:MM:SS''；与 str(*t*)
    相同。如果 *t*.microsecond != 0，则结果字符串较长：''HH:MM:SS.mmmmmm''。如果 *t* 是明确的，则在末尾添加六个字符
    ''+HH:MM''，表示时区与 UTC 的偏移量。换句话说，此格式化操作遵循 [ISO 8601 标准](https://oreil.ly/e5yfG)。'
- en: '| replace | *t*.replace(hour=**None**, minute=**None**, second=**None**, microsecond=**None**[,
    *tzinfo*]) Returns a new time object, like *t* except for those attributes explicitly
    specified as arguments, which get replaced. For example:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '| replace | *t*.replace(hour=**None**, minute=**None**, second=**None**, microsecond=**None**[,
    *tzinfo*]) 返回一个新的时间对象，类似于 *t*，除了那些显式指定为参数的属性将被替换。例如：'
- en: '[PRE5]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '|'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| strftime | *t*.strftime(*fmt*) Returns a string representing time *t* as
    specified by the string *fmt*. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| strftime | *t*.strftime(*fmt*) 返回一个字符串，表示按照字符串 *fmt* 指定的时间 *t*。 |'
- en: An instance *t* of the class time also supplies methods dst, tzname, and utcoffset,
    which accept no arguments and delegate to *t*.tzinfo, returning **None** when
    *t*.tzinfo is **None**.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 类时间的实例 *t* 还提供了方法 dst、tzname 和 utcoffset，它们不接受参数并委托给 *t*.tzinfo，当 *t*.tzinfo
    为 **None** 时返回 **None**。
- en: The datetime Class
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日期时间类
- en: Instances of the datetime class represent an instant (a date, with a specific
    time of day within that date), may be naive or aware of time zones, and always
    ignore leap seconds. datetime extends date and adds time’s attributes; its instances
    have read-only integer attributes year, month, day, hour, minute, second, and
    microsecond, and an optional tzinfo attribute (**None** for naive instances).
    In addition, datetime instances have a readonly fold attribute to distinguish
    between ambiguous timestamps during a rollback of the clock (such as the “fall
    back” at the end of daylight savings time, which creates duplicate naive times
    between 1 A.M. and 2 A.M.). fold has the value 0 or 1 0 corresponds to the time
    *before* the rollback; 1 to the time *after* the rollback.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 日期时间类的实例表示一个瞬间（一个日期，在该日期内具体的时间），可以是关于时区的明确或无意识的，并且总是忽略闰秒。日期时间扩展了日期并添加了时间的属性；它的实例有只读整数属性年、月、日、小时、分钟、秒和微秒，以及一个可选的
    tzinfo 属性（无意识实例的情况下为 **None**）。此外，日期时间实例有一个只读的 fold 属性，用于在时钟回滚期间区分模糊的时间戳（例如夏令时结束时的“回退”，在凌晨
    1 点到 2 点之间创建重复的无意识时间）。fold 取值为 0 或 1，0 对应于回滚前的时间；1 对应于回滚后的时间。
- en: 'Instances of datetime support some arithmetic: the difference between datetime
    instances (both aware, or both naive) is a timedelta instance, and you can add
    or subtract a timedelta instance to or from a datetime instance to construct another
    datetime instance. You can compare two instances of the datetime class (the later
    one is greater) as long as they’re both aware or both naive. The constructor for
    this class has the signature:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 日期时间实例支持一些算术运算：两个日期时间实例之间的差异（均为明确或均为无意识）是一个 timedelta 实例，并且可以将 timedelta 实例添加到或从日期时间实例中减去以构造另一个日期时间实例。可以比较两个日期时间类的实例（较晚的为较大），只要它们都是明确或都是无意识的。此类的构造函数的签名为：
- en: '| datetime | **class** datetime(*year*, *month*, *day*, hour=0, minute=0, second=0,
    microsecond=0, tzinfo=**None**, *, fold=0) Returns a datetime object following
    similar constraints as the date class constructor. fold is an int with the value
    0 or 1, as described previously. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| datetime | **class** datetime(*year*, *month*, *day*, hour=0, minute=0, second=0,
    microsecond=0, tzinfo=**None**, *, fold=0) 返回一个日期时间对象，遵循与日期类构造函数类似的约束。fold 是一个整数，值为
    0 或 1，如前所述。 |'
- en: datetime also supplies some class methods usable as alternative constructors,
    covered in [Table 13-7](#alternative_datetime_constructors).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: datetime 还提供一些类方法，可用作替代构造函数，详见 [Table 13-7](#alternative_datetime_constructors)。
- en: Table 13-7\. Alternative datetime constructors
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Table 13-7\. 替代日期时间构造函数
- en: '| combine | datetime.combine(*date*, *time*) Returns a datetime object with
    the date attributes taken from *date* and the time attributes (including tzinfo)
    taken from *time*. datetime.combine(*d, t*) is like:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '| combine | datetime.combine(*date*, *time*) 返回一个日期时间对象，日期属性来自 *date*，时间属性（包括时区信息）来自
    *time*。datetime.combine(*d, t*) 的作用类似于： |'
- en: '[PRE6]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| fromordinal | datetime.fromordinal(*ordinal*) Returns a datetime object for
    the date given proleptic Gregorian ordinal *ordinal*, where a value of 1 means
    the first day of year 1 CE, at midnight. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| fromordinal | datetime.fromordinal(*ordinal*) 返回一个日期对象，表示普通格里高利历的序数日期 *ordinal*，其中值为
    1 表示公元 1 年的第一天午夜。 |'
- en: '| fromt⁠i⁠m⁠e​s⁠t⁠a⁠mp | datetime.fromtimestamp(*timestamp*, tz=**None**) Returns
    a datetime object corresponding to the instant *timestamp* expressed in seconds
    since the epoch, in local time. When tz is not **None**, returns an aware datetime
    object with the given tzinfo instance tz. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| fromtimestamp | datetime.fromtimestamp(*timestamp*, tz=**None**) 返回一个日期时间对象，表示自纪元以来经过的秒数
    *timestamp* 对应的时刻，以本地时间表示。当 tz 不是 **None** 时，返回一个带有给定 tzinfo 实例 tz 的带时区信息的日期时间对象。
    |'
- en: '| now | datetime.now(tz=**None**) Returns a naive datetime object for the current
    local date and time. When tz is not **None**, returns an aware datetime object
    with the given tzinfo instance tz. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| now | datetime.now(tz=**None**) 返回一个表示当前本地日期和时间的无时区信息的日期时间对象。当 tz 不是 **None**
    时，返回一个带有给定 tzinfo 实例 tz 的带时区信息的日期时间对象。 |'
- en: '| strptime | datetime.strptime(*str*, *fmt*) Returns a datetime representing
    *str* as specified by string *fmt*. When %z is present in *fmt*, the resulting
    datetime object is time zone–aware. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| strptime | datetime.strptime(*str*, *fmt*) 返回一个日期时间对象，表示按照字符串 *fmt* 指定的格式解析的
    *str*。当 *fmt* 中包含 %z 时，生成的日期时间对象是带时区信息的。 |'
- en: '| today | datetime.today() Returns a naive datetime object representing the
    current local date and time; same as the now class method but does not accept
    optional argument *tz*. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| today | datetime.today() 返回一个表示当前本地日期和时间的无时区信息的日期时间对象；与 now 类方法相同，但不接受可选参数
    *tz*。 |'
- en: '| utcf⁠r⁠o⁠m​t⁠i⁠m⁠estamp | datetime.utcfromtimestamp(*timestamp*) Returns
    a naive datetime object corresponding to the instant *timestamp* expressed in
    seconds since the epoch, in UTC. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| utcfromtimestamp | datetime.utcfromtimestamp(*timestamp*) 返回一个表示自纪元以来经过的秒数
    *timestamp* 对应时刻的无时区信息的日期时间对象，使用的是协调世界时（UTC）。 |'
- en: '| utcnow | datetime.utcnow() Returns a naive datetime object representing the
    current date and time, in UTC. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| utcnow | datetime.utcnow() 返回一个表示当前日期和时间的无时区信息的日期时间对象，使用的是协调世界时（UTC）。 |'
- en: An instance *d* of datetime also supplies the methods listed in [Table 13-8](#methods_of_an_instance_d_of_datetime).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 日期时间实例 *d* 还提供了 [Table 13-8](#methods_of_an_instance_d_of_datetime) 中列出的方法。
- en: Table 13-8\. Methods of an instance d of datetime
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Table 13-8\. datetime 实例 *d* 的方法
- en: '| astimezone | *d*.astimezone(*tz*) Returns a new aware datetime object, like
    *d*, except that the date and time are converted along with the time zone to the
    one in tzinfo object *tz*.^([a](ch13.xhtml#ch01fn113)) *d* must be aware, to avoid
    potential bugs. Passing a naive *d* may lead to unexpected results. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| astimezone | *d*.astimezone(*tz*) 返回一个新的带时区信息的日期时间对象，类似于 *d*，但日期和时间与时区 *tz*
    一起转换。^([a](ch13.xhtml#ch01fn113)) *d* 必须是带时区信息的，以避免潜在的 bug。传递一个无时区信息的 *d* 可能导致意外结果。
    |'
- en: '| ctime | *d*.ctime() Returns a string representing date and time *d* in the
    same 24-character format as time.ctime. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| ctime | *d*.ctime() 返回一个字符串，表示与 *d* 的日期时间在与 time.ctime 相同的 24 字符格式中。 |'
- en: '| date | *d*.date() Returns a date object representing the same date as *d*.
    |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| date | *d*.date() 返回一个表示与 *d* 相同日期的日期对象。 |'
- en: '| isocalendar | *d*.isocalendar() Returns a tuple with three integers (ISO
    year, ISO week number, and ISO weekday) for *d*’s date. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| isocalendar | *d*.isocalendar() 返回一个包含三个整数的元组（ISO 年份、ISO 周号和 ISO 工作日），表示
    *d* 的日期。 |'
- en: '| isoformat | *d*.isoformat(sep=''T'') Returns a string representing *d* in
    the format ''YYYY-MM-DDxHH:MM:SS'', where *x* is the value of argument sep (must
    be a string of length 1). If *d*.microsecond != 0, seven characters, ''.mmmmmm'',
    are added after the ''SS'' part of the string. If *t* is aware, six more characters,
    ''+HH:MM'', are added at the end to represent the time zone’s offset from UTC.
    In other words, this formatting operation follows the ISO 8601 standard. str(*d*)
    is the same as *d*.isoformat(sep='' ''). |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| isoformat | *d*.isoformat(sep=''T'') 返回一个字符串，表示*d*的格式为''YYYY-MM-DDxHH:MM:SS''，其中*x*是参数sep的值（必须是长度为1的字符串）。如果*d*.microsecond
    != 0，则在字符串的''SS''部分之后添加七个字符''.mmmmmm''。如果*t*是已知的，则在最后添加六个字符''+HH:MM''，以表示时区与UTC的偏移量。换句话说，此格式化操作遵循ISO
    8601标准。str(*d*)与*d*.isoformat(sep='' '')相同。 |'
- en: '| isoweekday | *d*.isoweekday() Returns the day of the week of *d*’s date as
    an integer, 1 for Monday through 7 for Sunday. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| isoweekday | *d*.isoweekday() 返回*d*日期的星期几，返回一个整数，星期一为1，星期日为7。 |'
- en: '| replace | *d*.replace(year=**None**, month=**None**, day=**None**, hour=**None**,
    minute=**None**, second=**None**, microsecond=**None**, tzinfo=**None**,*, fold=0)
    Returns a new datetime object, like *d* except for those attributes specified
    as arguments, which get replaced (but does *no* time zone conversion—use astimezone
    if you want the time converted). You can also use replace to create an aware datetime
    object from a naive one. For example:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '| replace | *d*.replace(year=**None**, month=**None**, day=**None**, hour=**None**,
    minute=**None**, second=**None**, microsecond=**None**, tzinfo=**None**,*, fold=0)
    返回一个新的datetime对象，类似于*d*，但指定为参数的那些属性被替换（但不进行任何时区转换——如果要转换时间，请使用astimezone）。您还可以使用replace从naive创建一个已知的datetime对象。例如：'
- en: '[PRE7]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '|'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| strftime | *d*.strftime(*fmt*) Returns a string representing *d* as specified
    by the format string *fmt*. |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| strftime | *d*.strftime(*fmt*) 返回一个字符串，表示根据格式字符串*fmt*指定的格式显示的*d*。 |'
- en: '| time | *d*.time() Returns a naive time object representing the same time
    of day as *d*. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| time | *d*.time() 返回一个表示与*d*相同一天中的时间的naive时间对象。 |'
- en: '| timestamp | *d*.timestamp() Returns a float with the seconds since the epoch.
    Naive instances are assumed to be in the local time zone. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| timestamp | *d*.timestamp() 返回自纪元以来的秒数的浮点数。假设naive实例处于本地时区。 |'
- en: '| timetuple | *d*.timetuple() Returns a timetuple corresponding to instant
    *d*. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| timetuple | *d*.timetuple() 返回与时刻*d*对应的时间元组。 |'
- en: '| timetz | *d*.timetz() Returns a time object representing the same time of
    day as *d*, with the same tzinfo. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| timetz | *d*.timetz() 返回一个时间对象，表示与*d*相同的一天中的时间，具有相同的时区信息。 |'
- en: '| toordinal | *d*.toordinal() Returns the proleptic Gregorian ordinal for *d*’s
    date. For example:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '| toordinal | *d*.toordinal() 返回*d*日期的公历序数。例如：'
- en: datetime(1, 1, 1).toordinal() == 1 |
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: datetime(1, 1, 1).toordinal() == 1 |
- en: '| utct⁠i⁠m⁠e​t⁠u⁠p⁠le | *d*.utctimetuple() Returns a timetuple corresponding
    to instant *d*, normalized to UTC if *d* is aware. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| utct⁠i⁠m⁠e​t⁠u⁠p⁠le | *d*.utctimetuple() 返回一个时间元组，对应于时刻*d*，如果*d*是已知的，则规范化为UTC。
    |'
- en: '| weekday | *d*.weekday() Returns the day of the week of *d*’s date as an integer,
    0 for Monday through 6 for Sunday. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| weekday | *d*.weekday() 返回*d*日期的星期几，返回一个整数，星期一为0，星期日为6。 |'
- en: '| ^([a](ch13.xhtml#ch01fn113-marker)) Note that *d*.astimezone(*tz*) is quite
    different from *d*.replace(tzinfo=*tz*): replace does no time zone conversion,
    but rather just copies all of *d*’s attributes except for *d*.tzinfo. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| ^([a](ch13.xhtml#ch01fn113-marker)) 请注意*d*.astimezone(*tz*)与*d*.replace(tzinfo=*tz*)非常不同：replace不进行时区转换，而只是复制了*d*的所有属性，但*d*.tzinfo除外。
    |'
- en: An instance *d* of the class datetime also supplies the methods dst, tzname,
    and utcoffset, which accept no arguments and delegate to *d*.tzinfo, returning
    **None** when *d*.tzinfo is **None** (i.e., when *d* is naive).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 类datetime的实例*d*还提供了方法dst、tzname和utcoffset，这些方法不接受参数，并委托给*d*.tzinfo，在*d*.tzinfo为**None**（即*d*是naive时）时返回**None**。
- en: The timedelta Class
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: timedelta 类
- en: 'Instances of the timedelta class represent time intervals with three read-only
    integer attributes: days, seconds, and microseconds. The constructor for this
    class has the signature:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: timedelta类的实例表示具有三个只读整数属性的时间间隔：days、seconds和microseconds。此类的构造函数的签名为：
- en: '| timedelta | timedelta(days=0, seconds=0, microseconds=0, milliseconds=0,
    minutes=0, hours=0, weeks=0) Converts all units with the obvious factors (a week
    is 7 days, an hour is 3,600 seconds, and so on) and normalizes everything to the
    three integer attributes, ensuring that 0 <= seconds < 24 * 60 * 60 and 0 <= microseconds
    < 1000000. For example:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '| timedelta | timedelta(days=0, seconds=0, microseconds=0, milliseconds=0,
    minutes=0, hours=0, weeks=0) 将所有单位按照明显的因子转换（一周为7天，一小时为3,600秒等），并将一切标准化为三个整数属性，确保0
    <= seconds < 24 * 60 * 60 且 0 <= microseconds < 1000000。例如：'
- en: '[PRE8]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Instances of timedelta support arithmetic: + and - between themselves and with
    instances of the classes date and datetime; * with integers; / with integers and
    timedelta instances (floor division, true division, divmod, %). They also support
    comparisons between themselves. |'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: timedelta 的实例支持算术运算：与 timedelta 类型的实例之间的 + 和 -；与整数之间的 *；与整数和 timedelta 实例之间的
    /（地板除法、真除法、divmod、%）。它们还支持彼此之间的比较。 |
- en: While timedelta instances can be created using this constructor, they are more
    often created by subtracting two date, time, or datetime instances, such that
    the resulting timedelta represents an elapsed time period. An instance *td* of
    timedelta supplies a method *td*.total_seconds() that returns a float representing
    the total seconds of a timedelta instance.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以使用此构造函数创建 timedelta 实例，但更常见的是通过两个日期、时间或 datetime 实例相减创建 timedelta，使得结果 timedelta
    表示经过的时间段。timedelta 的实例 *td* 提供了一个方法 *td*.total_seconds()，返回表示 timedelta 实例的总秒数的浮点数。
- en: The tzinfo Abstract Class
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: tzinfo 抽象类
- en: The tzinfo class defines the abstract class methods listed in [Table 13-9](#methods_of_the_tzinfo_class),
    to support creation and usage of aware datetime and time objects.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: tzinfo 类定义了在[表 13-9](#methods_of_the_tzinfo_class)中列出的抽象类方法，用于支持创建和使用带有时区意识的
    datetime 和 time 对象。
- en: Table 13-9\. Methods of the tzinfo class
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 表 13-9\. tzinfo 类的方法
- en: '| dst | dst(*dt*) Returns the daylight savings offset of a given datetime,
    as a timedelta object |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| dst | dst(*dt*) 返回给定 datetime 的夏令时偏移量，作为 timedelta 对象 |'
- en: '| tzname | tzname(*dt*) Returns the abbreviation for the time zone of a given
    datetime |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| tzname | tzname(*dt*) 返回给定 datetime 的时区缩写 |'
- en: '| utcoffset | utcoffset(*dt*) Returns the offset from UTC of a given datetime,
    as a timedelta object |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| utcoffset | utcoffset(*dt*) 返回给定 datetime 的与 UTC 的偏移量，作为 timedelta 对象 |'
- en: tzinfo also defines a fromutc abstract instance method, primarily for internal
    use by the datetime.astimezone method.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: tzinfo 还定义了一个 fromutc 抽象实例方法，主要供 datetime.astimezone 方法内部使用。
- en: The timezone Class
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: timezone 类
- en: The timezone class is a concrete implementation of the tzinfo class. You construct
    a timezone instance using a timedelta representing the time offset from UTC. timezone
    supplies one class property, utc, a timezone representing the UTC time zone (equivalent
    to timezone(timedelta(0))).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: timezone 类是 tzinfo 类的具体实现。您可以使用表示与 UTC 时间偏移量的 timedelta 构造一个 timezone 实例。timezone
    提供一个类属性 utc，代表 UTC 时区（相当于 timezone(timedelta(0))）。
- en: The zoneinfo Module
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: zoneinfo 模块
- en: 3.9+ The zoneinfo module is a concrete implementation of timezones for use with
    datetime’s tzinfo.^([3](ch13.xhtml#ch01fn114)) zoneinfo uses the system’s time
    zone data by default, with [tzdata](https://oreil.ly/i1PF6) as a fallback. (On
    Windows, you may need to **pip install tzdata**; once installed, you don’t import
    tzdata in your program—rather, zoneinfo uses it automatically.)
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 3.9+ zoneinfo 模块是 datetime 的 tzinfo 的具体实现，用于时间区域的表示。^([3](ch13.xhtml#ch01fn114))
    zoneinfo 默认使用系统的时区数据，以 [tzdata](https://oreil.ly/i1PF6) 作为后备。（在 Windows 上，您可能需要
    **pip install tzdata**；一旦安装完成，您不需要在程序中导入 tzdata—zoneinfo 会自动使用它。）
- en: 'zoneinfo provides one class: ZoneInfo, a concrete implementation of the datetime.tzinfo
    abstract class. You can assign it to tzinfo during construction of an aware datetime
    instance, or use it with the datetime.replace or datetime.astimezone methods.
    To construct a ZoneInfo, use one of the defined IANA time zone names, such as
    "America/Los_Angeles" or "Asia/Tokyo". You can get a list of these time zone names
    by calling zoneinfo.available_timezones(). More details on each time zone (such
    as offset from UTC and daylight savings information) can be found [on Wikipedia](https://oreil.ly/0u4KW).'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: zoneinfo 提供一个类：ZoneInfo，它是 datetime.tzinfo 抽象类的具体实现。您可以在创建带有时区意识的 datetime 实例时将其赋给
    tzinfo，或者在 datetime.replace 或 datetime.astimezone 方法中使用它。要构造 ZoneInfo，请使用定义的 IANA
    时区名称之一，例如 "America/Los_Angeles" 或 "Asia/Tokyo"。您可以通过调用 zoneinfo.available_timezones()
    获取这些时区名称的列表。更多有关每个时区的详细信息（例如与 UTC 的偏移和夏令时信息）可以在[Wikipedia](https://oreil.ly/0u4KW)上找到。
- en: 'Here are some examples using ZoneInfo. We’ll start by getting the current local
    date and time in California:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些使用 ZoneInfo 的示例。我们将从获取加州当前本地日期和时间开始：
- en: '[PRE12]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can now update the time zone to a different one *without* changing other
    attributes (i.e., without converting the time to the new time zone):'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将时区更新为另一个时区，而不改变其他属性（即不将时间转换为新时区）：
- en: '[PRE14]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Convert a datetime instance to UTC:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 将 datetime 实例转换为 UTC：
- en: '[PRE16]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Get an *aware* timestamp of the current time in UTC:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 获取当前时间的*明晰*时间戳在 UTC 时区：
- en: '[PRE18]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Display the datetime instance in a different time zone:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同时区显示 datetime 实例：
- en: '[PRE20]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Get the local time zone:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 获取本地时区：
- en: '[PRE22]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Convert the UTC datetime instance back into the local time zone:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 将 UTC datetime 实例转换回本地时区：
- en: '[PRE24]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'And get a sorted list of all available time zones:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 并获取所有可用时区的排序列表：
- en: '[PRE28]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Always Use the UTC Time Zone Internally
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 始终在内部使用 UTC 时区
- en: The best way to program around the traps and pitfalls of time zones is to always
    use the UTC time zone internally, converting from other time zones on input, and
    use datetime.astimezone only for display purposes.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 规避时区的陷阱和问题的最佳方法是始终在内部使用 UTC 时区，在输入时从其他时区转换，并仅在显示目的使用 datetime.astimezone。
- en: This tip applies even if your application runs only in your own location, with
    no intention of ever using time data from other time zones. If your application
    runs continuously for days or weeks at a time, and the time zone configured for
    your system observes daylight savings time, you *will* run into time zone-related
    issues if you don’t work in UTC internally.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您的应用程序仅在自己的位置运行，并且永远不打算使用其他时区的时间数据，也适用这个技巧。如果您的应用程序连续运行几天或几周，并且为您的系统配置的时区遵循夏令时，如果不在
    UTC 内部工作，您将会遇到与时区相关的问题。
- en: The dateutil Module
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: dateutil 模块
- en: The third-party package [dateutil](https://oreil.ly/KKEf6) (which you can install
    with **pip install python-dateutil**) offers modules to manipulate dates in many
    ways. [Table 13-10](#dateutil_modules) lists the main modules it provides, in
    addition to those for time zone–related operations (now best performed with zoneinfo,
    discussed in the previous section).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方包[dateutil](https://oreil.ly/KKEf6)（您可以通过 **pip install python-dateutil**
    安装）提供了许多操作日期的模块。[表格 13-10](#dateutil_modules) 列出了它提供的主要模块，除了用于时区相关操作（现在最好使用 zoneinfo，在前一节中讨论）的模块。
- en: Table 13-10\. dateutil modules
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 13-10\. dateutil 模块
- en: '| easter | easter.easter(*year*) Returns the datetime.date object for Easter
    of the given *year*. For example:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '| easter | easter.easter(*year*) 返回给定 *year* 的复活节 datetime.date 对象。例如：'
- en: '[PRE30]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '|'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| parser | parser.parse(*s*) Returns the datetime.datetime object denoted by
    string *s*, with very permissive (or “fuzzy”) parsing rules. For example:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '| parser | parser.parse(*s*) 返回由字符串 *s* 表示的 datetime.datetime 对象，具有非常宽松（或“模糊”）的解析规则。例如：'
- en: '[PRE32]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '|'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| relativedelta | relativedelta.relativedelta(...) Provides, among other things,
    an easy way to find “next Monday,” “last year,” etc. dateutil’s [docs](https://oreil.ly/1zJqi)
    offer detailed explanations of the rules defining the inevitably complicated behavior
    of relativedelta instances. |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| relativedelta | relativedelta.relativedelta(...) 提供了一种简便的方法，用于查找“下个星期一”、“去年”等。dateutil
    的[文档](https://oreil.ly/1zJqi)详细解释了定义 relativedelta 实例行为复杂性规则。'
- en: '| rrule | rrule.rrule(*freq*, ...) Implements [RFC 2445](https://oreil.ly/Xs_NN)
    (also known as the iCalendar RFC), in all the glory of its 140+ pages. rrule allows
    you to deal with recurring events, providing such methods as after, before, between,
    and count. |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| rrule | rrule.rrule(*freq*, ...) 实现了[RFC 2445](https://oreil.ly/Xs_NN)（也称为
    iCalendar RFC），完整呈现其超过 140 页的荣耀。rrule 允许您处理重复事件，提供了诸如 after、before、between 和 count
    等方法。'
- en: See the [documentation](https://oreil.ly/dmYej) for complete details on the
    dateutil module’s rich functionality.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 详细信息请查看[dateutil 模块的文档](https://oreil.ly/dmYej)，了解其丰富功能。
- en: The sched Module
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`sched` 模块'
- en: The sched module implements an event scheduler, letting you easily deal with
    events that may be scheduled in either a “real” or a “simulated” time scale. This
    event scheduler is safe to use in single and multithreaded environments. sched
    supplies a scheduler class that takes two optional arguments, timefunc and delayfunc.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`sched` 模块实现了事件调度程序，让您可以轻松处理在“真实”或“模拟”时间尺度上安排的事件。这个事件调度程序在单线程和多线程环境中使用都是安全的。sched
    提供了一个调度程序类，它接受两个可选参数，timefunc 和 delayfunc。'
- en: '| scheduler | **class** scheduler(timefunc=time.monotonic, delayfunc=time.sleep)
    The optional argument timefunc must be callable without arguments to get the current
    time instant (in any unit of measure); for example, you can pass time.time. The
    optional delayfunc is callable with one argument (a time duration, in the same
    units as timefunc) to delay the current thread for that time. scheduler calls
    delayfunc(0) after each event to give other threads a chance; this is compatible
    with time.sleep. By taking functions as arguments, scheduler lets you use whatever
    “simulated time” or “pseudotime” fits your application’s needs^([a](ch13.xhtml#ch01fn115)).'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '| scheduler | **class** scheduler(timefunc=time.monotonic, delayfunc=time.sleep)
    可选参数 timefunc 必须是可调用的，没有参数以获取当前时间时刻（以任何度量单位）；例如，您可以传递 time.time。可选参数 delayfunc
    是可调用的，具有一个参数（时间持续时间，与 timefunc 相同单位），以延迟当前线程的该时间。调度器在每个事件之后调用 delayfunc(0) 给其他线程一个机会；这与
    time.sleep 兼容。通过接受函数作为参数，调度器可以让您使用适合应用程序需要的任何“模拟时间”或“伪时间”^([a](ch13.xhtml#ch01fn115))。'
- en: If monotonic time (time that cannot go backward even if the system clock is
    adjusted backward between calls, e.g., due to leap seconds) is critical to your
    application, use the default time.monotonic for your scheduler. |
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单调时间（即使系统时钟在调用之间向后调整也无法倒退的时间，例如由于闰秒导致）对您的应用程序至关重要，请为您的调度器使用默认的 time.monotonic。
- en: '| ^([a](ch13.xhtml#ch01fn115-marker)) A great example of the [dependency injection
    design pattern](https://oreil.ly/F8W_Z) for purposes not necessarily related to
    testing. |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| ^([a](ch13.xhtml#ch01fn115-marker)) [依赖注入设计模式](https://oreil.ly/F8W_Z) 的一个很好的示例，用于与测试无关的目的。
    |'
- en: A scheduler instance *s* supplies the methods detailed in [Table 13-11](#methods_of_an_instance_s_of_scheduler).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 调度器实例 *s* 提供了 [表 13-11](#methods_of_an_instance_s_of_scheduler) 中详细描述的方法。
- en: Table 13-11\. Methods of an instance s of scheduler
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 表 13-11\. 调度器实例 s 的方法
- en: '| cancel | *s*.cancel(*event_token*) Removes an event from *s*’s queue. *event_token*
    must be the result of a previous call to *s*.enter or *s*.enterabs, and the event
    must not yet have happened; otherwise, cancel raises RuntimeError. |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| cancel | *s*.cancel(*event_token*) 从 *s* 的队列中移除一个事件。*event_token* 必须是对 *s*.enter
    或 *s*.enterabs 的先前调用的结果，并且事件尚未发生；否则，cancel 将引发 RuntimeError。'
- en: '| empty | *s*.empty() Returns **True** when *s*’s queue is currently empty;
    otherwise, returns **False**. |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| empty | *s*.empty() 当 *s* 的队列当前为空时返回 **True**；否则返回 **False**。'
- en: '| enter | *s*.enter(*delay*, *priority*, *func*, argument=(), kwargs={}) Like
    enterabs, except that *delay* is a relative time (a positive difference forward
    from the current instant), while enterabs’s argument *when* is an absolute time
    (a future instant). To schedule an event for *repeated* execution, use a little
    wrapper function; for example:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '| enter | *s*.enter(*delay*, *priority*, *func*, argument=(), kwargs={}) 类似于
    enterabs，不同之处在于 *delay* 是相对时间（从当前时刻正向的正差），而 enterabs 的参数 *when* 是绝对时间（未来时刻）。要为
    *重复* 执行安排事件，请使用一个小的包装函数；例如：'
- en: '[PRE34]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '|'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| enterabs | *s*.enterabs(*when*, *priority*, *func*, argument=(), kwargs={})
    Schedules a future event (a callback to *func*(*args*, *kwargs*)) at time *when*.
    *when* is in the units used by the time functions of *s*. Should several events
    be scheduled for the same time, *s* executes them in increasing order of *priority*.
    enterabs returns an event token *t*, which you may later pass to *s*.cancel to
    cancel this event. |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| enterabs | *s*.enterabs(*when*, *priority*, *func*, argument=(), kwargs={})
    在时间 *when* 安排一个未来事件（回调 *func*(*args*, *kwargs*)）。*when* 使用 *s* 的时间函数使用的单位。如果为同一时间安排了几个事件，*s*
    将按 *priority* 的增加顺序执行它们。enterabs 返回一个事件令牌 *t*，您可以稍后将其传递给 *s*.cancel 来取消此事件。'
- en: '| run | *s*.run(blocking=**True**) Runs scheduled events. If blocking is **True**,
    *s*.run loops until *s*.empty returns **True**, using the delayfunc passed on
    *s*’s initialization to wait for each scheduled event. If blocking is **False**,
    executes any soon-to-expire events, then returns the next event’s deadline (if
    any). When a callback *func* raises an exception, *s* propagates it, but *s* keeps
    its own state, removing the event from the schedule. If a callback *func* runs
    longer than the time available before the next scheduled event, *s* falls behind
    but keeps executing scheduled events in order, never dropping any. Call *s*.cancel
    to drop an event explicitly if that event is no longer of interest. |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| run | *s*.run(blocking=**True**) 运行已安排的事件。如果blocking为**True**，*s*.run会循环直到*s*.empty返回**True**，使用*s*初始化时传递的delayfunc来等待每个已安排的事件。如果blocking为**False**，执行任何即将到期的事件，然后返回下一个事件的截止时间（如果有的话）。当回调函数*func*引发异常时，*s*会传播它，但*s*保持自己的状态，按顺序执行已安排的事件。如果回调函数*func*运行时间超过下一个已安排事件之前的可用时间，则*s*会落后但会继续按顺序执行已安排的事件，不会丢弃任何事件。如果不再对某个事件感兴趣，调用*s*.cancel显式地丢弃事件。
    |'
- en: The calendar Module
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日历模块
- en: The calendar module supplies calendar-related functions, including functions
    to print a text calendar for a given month or year. By default, calendar takes
    Monday as the first day of the week and Sunday as the last one. To change this,
    call calendar.setfirstweekday. calendar handles years in module time’s range,
    typically (at least) 1970 to 2038.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 日历模块提供与日历相关的函数，包括打印给定月份或年份的文本日历的函数。默认情况下，calendar将星期一作为一周的第一天，星期日作为最后一天。要更改此设置，请调用calendar.setfirstweekday。calendar处理模块时间范围内的年份，通常为1970到2038（至少）。
- en: The calendar module supplies the functions listed in [Table 13-12](#functions_of_the_calendar_module).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 日历模块提供了[表13-12](#functions_of_the_calendar_module)中列出的函数。
- en: Table 13-12\. Functions of the calendar module
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 表13-12\. 日历模块的函数
- en: '| calendar | calendar(*year,* w=2, li=1, c=6) Returns a multiline string with
    a calendar for year *year* formatted into three columns separated by c spaces.
    w is the width in characters of each date; each line has length 21*w+18+2*c. li
    is the number of lines for each week. |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| calendar | calendar(*year,* w=2, li=1, c=6) 返回一个多行字符串，其中包含*year*年的日历，以每个日期间隔c个空格分隔成三列。w是每个日期的字符宽度；每行的长度为21*w+18+2*c。li是每周的行数。
    |'
- en: '| firstweekday | firstweekday() Returns the current setting for the weekday
    that starts each week. By default, when calendar is first imported, this is 0
    (meaning Monday). |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| firstweekday | firstweekday() 返回每周起始的当前设置的工作日。默认情况下，当导入calendar时，这是0（表示星期一）。
    |'
- en: '| isleap | isleap(*year*) Returns **True** if *year* is a leap year; otherwise,
    returns **False**. |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| isleap | isleap(*year*) 如果*year*是闰年则返回**True**；否则返回**False**。 |'
- en: '| leapdays | leapdays(*y1*, *y2*) Returns the total number of leap days in
    the years within range(*y1*, *y2*) (remember, this means that *y2* is excluded).
    |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| leapdays | leapdays(*y1*, *y2*) 返回范围(*y1*, *y2*)内的闰年天数总计（注意，这意味着*y2*是不包括的）。
    |'
- en: '| month | month(*year*, *month*, w=2, li=1) Returns a multiline string with
    a calendar for month *month* of year *year*, one line per week plus two header
    lines. w is the width in characters of each date; each line has length 7*w+6.
    li is the number of lines for each week. |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| month | month(*year*, *month*, w=2, li=1) 返回一个多行字符串，其中包含*year*年*month*月的日历，每周一行加上两个标题行。w是每个日期的字符宽度；每行的长度为7*w+6。li是每周的行数。
    |'
- en: '| mo⁠n⁠t⁠h​c⁠a⁠l⁠endar | monthcalendar(*year*, *month*) Returns a list of lists
    of ints. Each sublist denotes a week. Days outside month *month* of year *year*
    are set to 0; days within the month are set to their day of month, 1 and up. |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| mo⁠n⁠t⁠h​c⁠a⁠l⁠e⁠n⁠d⁠a⁠r | monthcalendar(*year*, *month*) 返回一个整数列表的列表。每个子列表表示一周。年*year*月*month*之外的天数设为0；该月内的天数设为它们的日期，从1开始。
    |'
- en: '| monthrange | monthrange(*year*, *month*) Returns two integers. The first
    one is the code of the weekday for the first day of the month *month* in year
    *year*; the second one is the number of days in the month. Weekday codes are 0
    (Monday) to 6 (Sunday); month numbers are 1 to 12. |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| monthrange | monthrange(*year*, *month*) 返回两个整数。第一个整数是*year*年*month*月第一天的工作日代码；第二个整数是该月的天数。工作日代码为0（星期一）到6（星期日）；月份编号为1到12。
    |'
- en: '| prcal | prcal(*year*, w=2, li=1, c=6) Like print(calendar.calendar(*year*,
    *w*, *li*, *c*)). |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| prcal | prcal(*year*, w=2, li=1, c=6) 类似于print(calendar.calendar(*year*,
    *w*, *li*, *c*))。 |'
- en: '| prmonth | prmonth(*year*, *month*, w=2, li=1) Like print(calendar.month(*year*,
    *month*, *w*, *li*)). |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| prmonth | prmonth(*year*, *month*, w=2, li=1) 类似于print(calendar.month(*year*,
    *month*, *w*, *li*))。 |'
- en: '| setfirstweekday | setfirstweekday(*weekday*) Sets the first day of each week
    to weekday code *weekday*. Weekday codes are 0 (Monday) to 6 (Sunday). calendar
    supplies the attributes MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY,
    and SUNDAY, whose values are the integers 0 to 6. Use these attributes when you
    mean weekdays (e.g., calendar.FRIDAY instead of 4) to make your code clearer and
    more readable. |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| setfirstweekday | setfirstweekday(*weekday*) 设置每周的第一天为星期代码 *weekday*。星期代码为从
    0（星期一）到 6（星期日）。calendar 提供了 MONDAY、TUESDAY、WEDNESDAY、THURSDAY、FRIDAY、SATURDAY
    和 SUNDAY 这些属性，它们的值为整数 0 到 6。在代码中表示工作日时（例如，calendar.FRIDAY 而不是 4），使用这些属性可以使您的代码更清晰和更易读。
    |'
- en: '| timegm | timegm(*tupletime*) Just like time.mktime: accepts a time instant
    in timetuple form and returns that instant as a float number of seconds since
    the epoch. |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| timegm | timegm(*tupletime*) 就像 time.mktime 一样：接受时间元组形式的时间点，并将该时间点作为距离纪元的浮点秒数返回。
    |'
- en: '| weekday | weekday(*year*, *month*, *day*) Returns the weekday code for the
    given date. Weekday codes are 0 (Monday) to 6 (Sunday); month numbers are 1 (January)
    to 12 (December). |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| weekday | weekday(*year*, *month*, *day*) 返回给定日期的星期代码。星期代码为 0（星期一）到 6（星期日）；月份编号为
    1（一月）到 12（十二月）。 |'
- en: '**python -m calendar** offers a useful command-line interface to the module’s
    functionality: run **python -m calendar -h** to get a brief help message.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '**python -m calendar** 提供了一个有用的命令行界面以访问该模块的功能：运行 **python -m calendar -h**
    可以获取简短的帮助信息。'
- en: ^([1](ch13.xhtml#ch01fn110-marker)) On older Unix systems, 1970-01-01 is the
    start of the epoch, and 2038-01-19 is when 32-bit time wraps back to the epoch.
    Most modern systems now use 64-bit time, and many time methods can accept a year
    from 0001 to 9999, but some methods, or old systems (especially embedded ones),
    may still be limited.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch13.xhtml#ch01fn110-marker)) 在旧的 Unix 系统中，1970-01-01 是纪元的开始，而 2038-01-19
    是 32 位时间回到纪元的时间点。大多数现代系统现在使用 64 位时间，许多时间方法可以接受从 0001 到 9999 年的年份，但一些方法或旧系统（特别是嵌入式系统）可能仍然有限制。
- en: ^([2](ch13.xhtml#ch01fn111-marker)) time and datetime don’t account for leap
    seconds, since their schedule is not known for the future.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch13.xhtml#ch01fn111-marker)) time 和 datetime 不考虑闰秒，因为它们的计划未来不可预知。
- en: ^([3](ch13.xhtml#ch01fn114-marker)) Pre-3.9, use instead the third-party module
    [pytz](https://oreil.ly/65xFP).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch13.xhtml#ch01fn114-marker)) 在 3.9 之前，请使用第三方模块 [pytz](https://oreil.ly/65xFP)。
