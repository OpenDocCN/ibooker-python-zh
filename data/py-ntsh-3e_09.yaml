- en: Chapter 9\. Strings and Things
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。字符串和其他内容
- en: 'Python’s str type implements Unicode text strings with operators, built-in
    functions, methods, and dedicated modules. The somewhat similar bytes type represents
    arbitrary binary data as a sequence of bytes, also known as a *bytestring* or
    *byte string*. Many textual operations are possible on objects of either type:
    since these types are immutable, methods mostly create and return a new string
    unless returning the subject string unchanged. A mutable sequence of bytes can
    be represented as a bytearray, briefly introduced in [“bytearray objects”](ch03.xhtml#bytearray_objects).'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python的str类型实现了Unicode文本字符串，支持运算符、内置函数、方法和专用模块。有些相似的bytes类型表示任意二进制数据作为一系列字节，也称为*bytestring*或*byte
    string*。可以对这两种类型的对象进行许多文本操作：由于这些类型是不可变的，方法大多数情况下会创建并返回一个新的字符串，除非返回原始字符串未更改。可变字节序列可以表示为bytearray，在[“bytearray
    objects”](ch03.xhtml#bytearray_objects)中简要介绍。
- en: This chapter first covers the methods available on these three types, then discusses
    the string module and string formatting (including formatted string literals),
    followed by the textwrap, pprint, and reprlib modules. Issues related specifically
    to Unicode are covered at the end of the chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章首先介绍了这三种类型可用的方法，然后讨论了字符串模块和字符串格式化（包括格式化字符串字面值），接着是textwrap、pprint和reprlib模块。专门涉及Unicode的问题在本章末尾讨论。
- en: Methods of String Objects
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串对象的方法
- en: str, bytes, and bytearray objects are sequences, as covered in [“Strings”](ch03.xhtml#string);
    of these, only bytearray objects are mutable. All immutable-sequence operations
    (repetition, concatenation, indexing, and slicing) apply to instances of all three
    types, returning a new object of the same type. Unless otherwise specified in
    [Table 9-1](#significant_str_and_bytes_methods), methods are present on objects
    of all three types. Most methods of str, bytes, and bytearray objects return values
    of the same type, or are specifically intended to convert among representations.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: str、bytes和bytearray对象都是序列，如[“Strings”](ch03.xhtml#string)中所述；其中只有bytearray对象是可变的。所有不可变序列操作（重复、连接、索引和切片）都适用于这三种类型的实例，并返回相同类型的新对象。除非在[Table 9-1](#significant_str_and_bytes_methods)中另有规定，否则方法适用于这三种类型的对象。str、bytes和bytearray对象的大多数方法返回相同类型的值，或者专门用于在表示之间转换。
- en: Terms such as “letters,” “whitespace,” and so on refer to the corresponding
    attributes of the string module, covered in the following section. Although bytearray
    objects are mutable, their methods returning a bytearray result do not mutate
    the object but instead return a newly created bytearray, even when the result
    is the same as the subject string.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 术语如“letters”、“whitespace”等，指的是字符串模块的相应属性，在接下来的章节中会详细介绍。虽然bytearray对象是可变的，但是返回bytearray结果的方法不会改变对象，而是返回一个新的bytearray，即使结果与原始字符串相同。
- en: 'For brevity, the term bytes in the following table refers to both bytes and
    bytearray objects. Take care when mixing these two types, however: while they
    are generally interoperable, the type of the result usually depends on the order
    of the operands.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，在下表中，术语bytes指代bytes和bytearray对象。但是在混合使用这两种类型时要小心：虽然它们通常是可互操作的，但结果的类型通常取决于操作数的顺序。
- en: In [Table 9-1](#significant_str_and_bytes_methods), since integer values in
    Python can be arbitrarily large, for conciseness we use sys.maxsize for integer
    default values to mean, in practice, “integer of unlimited magnitude.”
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在[Table 9-1](#significant_str_and_bytes_methods)中，由于Python中的整数值可以任意大，为了简洁起见，我们使用sys.maxsize表示整数默认值，实际上意味着“无限大的整数”。
- en: Table 9-1\. Significant str and bytes methods
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 表9-1。重要的str和bytes方法
- en: '| capitalize | *s*.capitalize() Returns a copy of *s* where the first character,
    if a letter, is uppercase, and all other letters, if any, are lowercase. |   |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| capitalize | *s*.capitalize() 返回*s*的副本，其中第一个字符（如果是字母）大写，其余字符（如果有）小写。'
- en: '| casefold | *s*.casefold() **str** **only**. Returns a string processed by
    the algorithm described in [section 3.13 of the Unicode standard](https://oreil.ly/PjWUT).
    This is similar to *s*.lower (described later in this table) but also takes into
    account equivalences such as that between the German ''ß'' and ''ss'', and is
    thus better for case-insensitive matching when working with text that can include
    more than just the basic ASCII characters. |   |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| casefold | *s*.casefold() **str** **only**. 返回按照[Unicode标准第3.13节](https://oreil.ly/PjWUT)描述的算法处理过的字符串。这类似于后面在本表中描述的*s*.lower，但还考虑到例如德语中的
    ''ß'' 和 ''ss'' 之间的等价性，因此在处理可以包含不止基本ASCII字符的文本时更为适用。 |   |'
- en: '| center | *s*.center(*n*, *fillchar*='' '', /) Returns a string of length
    max(len(*s*), *n*), with a copy of *s* in the central part, surrounded by equal
    numbers of copies of character *fillchar* on both sides. The default fillchar
    is a space. For example, ''ciao''.center(2) is ''ciao'' and ''x''.center(4, ''_'')
    is ''_x__''. |   |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| center | *s*.center(*n*, *fillchar*='' '', /) 返回长度为max(len(*s*), *n*)的字符串，其中*s*的副本位于中心部分，两侧分别用相同数量的字符*fillchar*填充。默认的*fillchar*是空格字符。例如，''ciao''.center(2)是''ciao''，''x''.center(4,
    ''_'')是''_x__''。 |   |'
- en: '| count | *s*.count(*sub*, *start*=0, *end*=sys.maxsize, /) Returns the number
    of nonoverlapping occurrences of substring *sub* in *s*[*start*:*end*]. |   |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| count | *s*.count(*sub*, *start*=0, *end*=sys.maxsize, /) 返回在*s*[*start*:*end*]中子字符串*sub*的非重叠出现次数。
    |   |'
- en: '| decode | *s*.decode(encoding=''utf-8'', errors=''strict'') **bytes** **only**.
    Returns a str object decoded from the bytes *s* according to the given encoding.
    errors specifies how to handle decoding errors: ''strict'' causes errors to raise
    UnicodeError exceptions; ''ignore'' ignores the malformed values, while ''replace''
    replaces them with question marks (see [“Unicode”](#unicode) for details). Other
    values can be registered via codecs.register_error, covered in Table 9-10. |  
    |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| decode | *s*.decode(encoding=''utf-8'', errors=''strict'') **bytes** **only**.
    根据给定的编码从字节*s*解码为str对象。errors参数指定如何处理解码错误：''strict''会导致错误引发UnicodeError异常；''ignore''会忽略格式错误的值；''replace''会用问号替换它们（详见[“Unicode”](#unicode)）。其他值可以通过codecs.register_error注册，见表9-10。
    |   |'
- en: '| encode | *s*.encode(encoding=''utf-8'', errors=''strict'') **str** **only**.
    Returns a bytes object obtained from str *s* with the given encoding and error
    handling. See [“Unicode”](#unicode) for more details. |   |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| encode | *s*.encode(encoding=''utf-8'', errors=''strict'') **str** **only**.
    返回从str *s*按照给定编码和错误处理获得的bytes对象。详见[“Unicode”](#unicode)了解更多详情。 |   |'
- en: '| endswith | *s*.endswith(*suffix*, *start*=0, *end*=sys.maxsize, /) Returns
    **True** when *s*[*start*:*end*] ends with the string *suffix*; otherwise, returns
    **False**. *suffix* can be a tuple of strings, in which case endswith returns
    **True** when *s*[*start*:*end*] ends with any one of them. |   |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| endswith | *s*.endswith(*suffix*, *start*=0, *end*=sys.maxsize, /) 当*s*[*start*:*end*]以字符串*suffix*结尾时返回**True**；否则返回**False**。*suffix*可以是字符串元组，此时当*s*[*start*:*end*]以元组中任一字符串结尾时返回**True**。
    |   |'
- en: '| expandtabs | *s*.expandtabs(tabsize=8) Returns a copy of *s* where each tab
    character is changed into one or more spaces, with tab stops every *tabsize* characters.
    |   |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| expandtabs | *s*.expandtabs(tabsize=8) 返回一个将每个制表符字符更改为一个或多个空格字符的副本，其中每*tabsize*个字符设置一个制表位。
    |   |'
- en: '| find | *s*.find(*sub*, *start*=0, *end*=sys.maxsize, /) Returns the lowest
    index in *s* where substring *sub* is found, such that *sub* is entirely contained
    in *s*[*start*:*end*]. For example, ''banana''.find(''na'') returns 2, as does
    ''banana''.find(''na'', 1), while ''banana''.find(''na'', 3) returns 4, as does
    ''banana''.find(''na'', -2). find returns -1 when *sub* is not found. |   |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| find | *s*.find(*sub*, *start*=0, *end*=sys.maxsize, /) 返回在*s*[*start*:*end*]中找到子字符串*sub*的最低索引，其中*sub*完全包含在内。例如，''banana''.find(''na'')返回2，''banana''.find(''na'',
    1)也返回2，而''banana''.find(''na'', 3)返回4，''banana''.find(''na'', -2)也返回4。如果未找到*sub*，则返回-1。
    |   |'
- en: '| format | *s*.format(**args*, ***kwargs*) **str** **only**. Formats the positional
    and named arguments according to formatting instructions contained in the string
    *s*. See [“String Formatting”](#string_formatting) for further details. |   |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| format | *s*.format(**args*, ***kwargs*) **str** **only**. 根据字符串*s*中包含的格式说明，格式化位置和命名参数。详见[“字符串格式化”](#string_formatting)了解更多详情。
    |   |'
- en: '| format_map | *s*.format_map(mapping) **str** **only**. Formats the mapping
    argument according to formatting instructions contained in the string *s*. Equivalent
    to *s*.format(**mapping) but uses the mapping directly. See [“String Formatting”](#string_formatting)
    for formatting details. |   |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| format_map | *s*.format_map(mapping) **仅限 str**。根据字符串 *s* 中包含的格式化指令格式化映射参数。等同于
    *s*.format(**mapping)，但直接使用映射。详情请参见[“字符串格式化”](#string_formatting)。|   |'
- en: '| index | *s*.index(*sub*, *start*=0, *end*=sys.maxsize, /) Like find, but
    raises ValueError when *sub* is not found. |   |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| index | *s*.index(*sub*, *start*=0, *end*=sys.maxsize, /) 类似于 find，但是当找不到
    *sub* 时会引发 ValueError。|   |'
- en: '| isalnum | *s*.isalnum() Returns **True** when len(*s*) is greater than 0
    and all characters in *s* are Unicode letters or digits. When *s* is empty, or
    when at least one character of *s* is neither a letter nor a digit, isalnum returns
    **False**. |   |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| isalnum | *s*.isalnum() 当 *s* 的长度大于 0 且 *s* 中的所有字符都是 Unicode 字母或数字时返回**True**。当
    *s* 为空或者 *s* 中至少有一个字符既不是字母也不是数字时返回**False**。|   |'
- en: '| isalpha | *s*.isalpha() Returns **True** when len(*s*) is greater than 0
    and all characters in *s* are letters. When *s* is empty, or when at least one
    character of *s* is not a letter, isalpha returns **False**. |   |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| isalpha | *s*.isalpha() 当 *s* 的长度大于 0 且 *s* 中的所有字符都是字母时返回**True**。当 *s* 为空或者
    *s* 中至少有一个字符不是字母时返回**False**。|   |'
- en: '| isascii | *s*.isascii() Returns **True** when the string is empty or all
    characters in the string are ASCII, or **False** otherwise. ASCII characters have
    codepoints in the range U+0000–U+007F. |   |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| isascii | *s*.isascii() 当字符串为空或字符串中的所有字符都是 ASCII 时返回**True**，否则返回**False**。ASCII
    字符的码点范围在 U+0000–U+007F。|   |'
- en: '| isdecimal | *s*.isdecimal() **str** **only**. Returns **True** when len(*s*)
    is greater than 0 and all characters in *s* can be used to form decimal-radix
    numbers. This includes Unicode characters defined as Arabic digits.^([a](ch09.xhtml#ch01fn95))
    |   |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| isdecimal | *s*.isdecimal() **仅限 str**。当 *s* 的长度大于 0 且 *s* 中的所有字符都可用于形成十进制数时返回**True**。这包括被定义为阿拉伯数字的
    Unicode 字符。^([a](ch09.xhtml#ch01fn95))|   |'
- en: '| isdigit | *s*.isdigit() Returns **True** when len(*s*) is greater than 0
    and all characters in *s* are Unicode digits. When *s* is empty, or when at least
    one character of *s* is not a Unicode digit, isdigit returns **False**. |   |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| isdigit | *s*.isdigit() 当 *s* 的长度大于 0 且 *s* 中的所有字符都是 Unicode 数字时返回**True**。当
    *s* 为空或者 *s* 中至少有一个字符不是 Unicode 数字时返回**False**。|   |'
- en: '| isidentifier | *s*.isidentifier() **str** **only**. Returns **True** when
    *s* is a valid identifier according to the Python language’s definition; keywords
    also satisfy the definition, so, for example, ''class''.isidentifier() returns
    **True**. |   |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| isidentifier | *s*.isidentifier() **仅限 str**。根据 Python 语言的定义，当 *s* 是有效的标识符时返回**True**；关键字也满足该定义，因此，例如
    ''class''.isidentifier() 返回**True**。|   |'
- en: '| islower | *s*.islower() Returns **True** when all letters in *s* are lowercase.
    When *s* contains no letters, or when at least one letter of *s* is uppercase,
    islower returns **False**. |   |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| islower | *s*.islower() 当 *s* 中的所有字母都是小写字母时返回**True**。当 *s* 不包含字母或者 *s* 中至少有一个大写字母时返回**False**。|
      |'
- en: '| isnumeric | *s*.isnumeric() **str** **only**. Similar to *s*.isdigit(), but
    uses a broader definition of numeric characters that includes all characters defined
    as numeric in the Unicode standard (such as fractions). |   |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| isnumeric | *s*.isnumeric() **仅限 str**。类似于 *s*.isdigit()，但使用了更广泛的数字符号定义，包括
    Unicode 标准中定义的所有数字符号（如分数）。|   |'
- en: '| isprintable | *s*.isprintable() **str** **only**. Returns **True** when all
    characters in *s* are spaces (''\x20'') or are defined in the Unicode standard
    as printable. Because the null string contains no unprintable characters, ''''.isprintable()
    returns **True**. |   |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| isprintable | *s*.isprintable() **仅限 str**。当 *s* 中的所有字符都是空格 (''\x20'') 或在
    Unicode 标准中定义为可打印字符时返回**True**。因为空字符串不包含不可打印字符，''''.isprintable() 返回**True**。|
      |'
- en: '| isspace | *s*.isspace() Returns **True** when len(*s*) is greater than 0
    and all characters in *s* are whitespace. When *s* is empty, or when at least
    one character of *s* is not whitespace, isspace returns **False**. |   |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| isspace | *s*.isspace() 当 *s* 的长度大于 0 且 *s* 中的所有字符都是空白字符时返回**True**。当 *s*
    为空或者 *s* 中至少有一个字符不是空白字符时返回**False**。|   |'
- en: '| istitle | *s*.istitle() Returns **True** when the string *s* is *titlecased*:
    i.e., with a capital letter at the start of every contiguous sequence of letters,
    and all other letters lowercase (e.g., ''King Lear''.istitle() returns **True**).
    When *s* contains no letters, or when at least one letter of *s* violates the
    title case condition, istitle returns **False** (e.g., ''1900''.istitle() and
    ''Troilus and Cressida''.istitle() return **False**). |   |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| istitle | *s*.istitle() 返回 **True** 当字符串 *s* 是 *titlecased*：即每个连续字母序列的开头都是大写字母，其他字母都是小写字母时（例如，''King
    Lear''.istitle() 返回 **True**）。 当 *s* 不包含字母，或者 *s* 的至少一个字母不符合标题大小写条件时，istitle 返回
    **False**（例如，''1900''.istitle() 和 ''Troilus and Cressida''.istitle() 返回 **False**）。
    |   |'
- en: '| isupper | *s*.isupper() Returns **True** when all letters in *s* are uppercase.
    When *s* contains no letters, or when at least one letter of *s* is lowercase,
    isupper returns **False**. |   |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| isupper | *s*.isupper() 返回 **True** 当 *s* 中所有字母都是大写时。 当 *s* 不包含字母，或者 *s*
    的至少一个字母是小写时，isupper 返回 **False**。 |   |'
- en: '| join | *s*.join(*seq*, /) Returns the string obtained by concatenating the
    items of *seq* separated by copies of *s* (e.g., ''''.join(str(x) **for** x **in**
    range(7)) returns ''0123456'' and ''x''.join(''aeiou'') returns ''axexixoxu'').
    |   |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| join | *s*.join(*seq*, /) 返回由 *seq* 中的项目连接而成的字符串，每个项目之间由 *s* 的副本分隔（例如，''''.join(str(x)
    **for** x **in** range(7)) 返回 ''0123456''，''x''.join(''aeiou'') 返回 ''axexixoxu''）。
    |   |'
- en: '| ljust | *s*.ljust(*n*, *fillchar*='' '', /) Returns a string of length max(len(*s*),*n*),
    with a copy of *s* at the start, followed by zero or more trailing copies of character
    *fillchar*. |   |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| ljust | *s*.ljust(*n*, *fillchar*='' '', /) 返回长度为 max(len(*s*),*n*) 的字符串，其中以
    *fillchar* 字符填充的 *s* 的副本在开头，后跟零个或多个尾随 *fillchar* 的副本。 |   |'
- en: '| lower | *s*.lower() Returns a copy of *s* with all letters, if any, converted
    to lowercase. |   |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| lower | *s*.lower() 返回 *s* 的副本，其中所有字母（如果有）都转换为小写。 |   |'
- en: '| lstrip | *s*.lstrip(*x*=string.whitespace, /) Returns a copy of *s* after
    removing any leading characters found in string *x*. For example, ''banana''.lstrip(''ab'')
    returns ''nana''. |   |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| lstrip | *s*.lstrip(*x*=string.whitespace, /) 返回删除字符串 *x* 中任何前导字符后的 *s* 的副本。
    例如，''banana''.lstrip(''ab'') 返回 ''nana''。 |   |'
- en: '| removeprefix | *s*.removeprefix(*prefix*, /) 3.9+ When *s* begins with *prefix*,
    returns the remainder of *s*; otherwise, returns *s*. |   |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| removeprefix | *s*.removeprefix(*prefix*, /) 3.9+ 当 *s* 以 *prefix* 开头时，返回
    *s* 的剩余部分；否则返回 *s*。 |   |'
- en: '| removesuffix | *s*.removesuffix(*suffix*, /) 3.9+ When *s* ends with *suffix*,
    returns the rest of *s*; otherwise, returns *s*. |   |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| removesuffix | *s*.removesuffix(*suffix*, /) 3.9+ 当 *s* 以 *suffix* 结尾时，返回
    *s* 的剩余部分；否则返回 *s*。 |   |'
- en: '| replace | *s*.replace(*old*, *new*, *count*=sys.maxsize, /) Returns a copy
    of *s* with the first *count* (or fewer, if there are fewer) nonoverlapping occurrences
    of substring *old* replaced by string *new* (e.g., ''banana''.replace(''a'', ''e'',
    2) returns ''benena''). |   |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| replace | *s*.replace(*old*, *new*, *count*=sys.maxsize, /) 返回一个副本，其中第一个
    *count* （或更少，如果更少）非重叠出现的子字符串 *old* 被字符串 *new* 替换（例如，''banana''.replace(''a'',
    ''e'', 2) 返回 ''benena''）。 |   |'
- en: '| rfind | *s*.rfind(*sub*, *start*=0, *end*=sys.maxsize, /) Returns the highest
    index in *s* where substring *sub* is found, such that *sub* is entirely contained
    in *s*[*start*:*end*]. rfind returns -1 if *sub* is not found. |   |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| rfind | *s*.rfind(*sub*, *start*=0, *end*=sys.maxsize, /) 返回 *s* 中子字符串 *sub*
    的最高索引，使得 *sub* 完全包含在 *s*[*start*:*end*] 中。 如果未找到 *sub*，则 rfind 返回 -1。 |   |'
- en: '| rindex | *s*.rindex(*sub*, *start*=0, *end*=sys.maxsize, /) Like rfind, but
    raises ValueError if *sub* is not found. |   |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| rindex | *s*.rindex(*sub*, *start*=0, *end*=sys.maxsize, /) 类似于 rfind，但如果未找到
    *sub*，则引发 ValueError。 |   |'
- en: '| rjust | *s*.rjust(*n*, *fillchar*='' '', /) Returns a string of length max(len(*s*),*n*),
    with a copy of *s* at the end, preceded by zero or more leading copies of character
    *fillchar*. |   |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| rjust | *s*.rjust(*n*, *fillchar*='' '', /) 返回长度为 max(len(*s*),*n*) 的字符串，其中以
    *fillchar* 字符填充的 *s* 的副本在末尾，前面跟零个或多个前导 *fillchar* 的副本。 |   |'
- en: '| rstrip | *s*.rstrip(*x*=string.whitespace, /) Returns a copy of *s*, removing
    trailing characters that are found in string *x*. For example, ''banana''.rstrip(''ab'')
    returns ''banan''. |   |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| rstrip | *s*.rstrip(*x*=string.whitespace, /) 返回 *s* 的副本，删除在字符串 *x* 中找到的尾部字符。
    例如，''banana''.rstrip(''ab'') 返回 ''banan''。 |   |'
- en: '| split | *s*.split(sep=None, maxsplit=sys.maxsize) Returns a list *L* of up
    to maxsplit+1 strings. Each item of *L* is a “word” from *s*, where string sep
    separates words. When *s* has more than maxsplit words, the last item of *L* is
    the substring of *s* that follows the first maxsplit words. When sep is **None**,
    any string of whitespace separates words (e.g., ''four score and seven years''.split(**None**,
    3) returns [''four'', ''score'', ''and'', ''seven years'']).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '| split | *s*.split(sep=None, maxsplit=sys.maxsize) 返回一个最多包含 maxsplit+1 个字符串的列表
    *L*。*L* 的每个项是 *s* 的一个“单词”，其中字符串 sep 分隔单词。当 *s* 的单词数大于 maxsplit 时，*L* 的最后一个项是 *s*
    中跟随第一个 maxsplit 个单词之后的子字符串。当 sep 为 **None** 时，任何空白字符串分隔单词（例如，''four score and
    seven years''.split(**None**, 3) 返回 [''four'', ''score'', ''and'', ''seven years'']）。'
- en: 'Note the difference between splitting on **None** (any run of whitespace characters
    is a separator) and splitting on '' '' (where each single space character, *not*
    other whitespace such as tabs and newlines, and *not* strings of spaces, is a
    separator). For example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在使用 **None**（任何连续的空白字符作为分隔符）和 ' '（每个单独空格字符作为分隔符，不包括制表符和换行符，也不包括空格字符串）之间的区别。例如：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the first case, the two-spaces string in the middle is a single separator;
    in the second case, each single space is a separator, so that there is an empty
    string between the two spaces. |   |
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，中间的两个空格被视为单一分隔符；在第二种情况下，每个单独的空格被视为分隔符，因此在两个空格之间有一个空字符串。 |   |
- en: '| splitlines | *s*.splitlines(keepends=**False**) Like *s*.split(''\n''). When
    keepends is **True**, however, the trailing ''\n'' is included in each item of
    the resulting list (except the last one, if *s* does not end with ''\n''). |  
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| splitlines | *s*.splitlines(keepends=**False**) 类似于 *s*.split(''\n'')。但是，当
    keepends 为 **True** 时，结果列表中每个项的末尾 ''\n'' 也包括在内（如果 *s* 不以 ''\n'' 结尾，则最后一个项除外）。
    |   |'
- en: '| startswith | *s*.startswith(*prefix*, *start*=0, *end*=sys.maxsize, /) Returns
    **True** when *s*[*start*:*end*] starts with string *prefix*; otherwise, returns
    **False**. *prefix* can be a tuple of strings, in which case startswith returns
    **True** when *s*[*start*:*end*] starts with any one of them. |   |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| startswith | *s*.startswith(*prefix*, *start*=0, *end*=sys.maxsize, /) 当
    *s*[*start*:*end*] 以字符串 *prefix* 开头时返回 **True**；否则返回 **False**。*prefix* 可以是字符串元组，此时如果
    *s*[*start*:*end*] 以其中任何一个字符串开头，则返回 **True**。 |   |'
- en: '| strip | *s*.strip(*x*=string.whitespace, /) Returns a copy of *s*, removing
    both leading and trailing characters that are found in string *x*. For example,
    ''banana''.strip(''ab'') returns ''nan''. |   |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| strip | *s*.strip(*x*=string.whitespace, /) 返回 *s* 的副本，删除开头和结尾处位于字符串 *x*
    中的字符。例如，''banana''.strip(''ab'') 返回 ''nan''。 |   |'
- en: '| swapcase | *s*.swapcase() Returns a copy of *s* with all uppercase letters
    converted to lowercase and vice versa. |   |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| swapcase | *s*.swapcase() 返回 *s* 的副本，所有大写字母转换为小写字母，所有小写字母转换为大写字母。 |   |'
- en: '| title | *s*.title() Returns a copy of *s* transformed to title case: a capital
    letter at the start of each contiguous sequence of letters, with all other letters
    (if any) lowercase. |   |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| title | *s*.title() 返回 *s* 的副本，转换为标题格式：每个连续字母序列的开头字母大写，其余字母（如果有）小写。 |   |'
- en: '| translate | *s*.translate(*table*, /, delete*=*b'''') Returns a copy of *s*,
    where characters found in *table* are translated or deleted. When *s* is a str,
    you cannot pass the argument delete; *table* is a dict whose keys are Unicode
    ordinals and whose values are Unicode ordinals, Unicode strings, or **None** (to
    delete the corresponding character). For example:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '| translate | *s*.translate(*table*, /, delete*=*b'''') 返回 *s* 的副本，其中 *table*
    中的字符被翻译或删除。当 *s* 是字符串时，不能传递 delete 参数；*table* 是一个字典，其键是 Unicode 码点，值可以是 Unicode
    码点、Unicode 字符串或 **None**（表示删除对应的字符）。例如：'
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When *s* is a bytes, *table* is a bytes object of length 256; the result of
    *s*.translate(*t*, *b*) is a bytes object with each item *b* of *s* omitted if
    *b* is one of the items of delete, and otherwise changed to *t*[ord(*b*)].
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当 *s* 是字节时，*table* 是长度为 256 的字节对象；*s*.translate(*t*, *b*) 的结果是一个字节对象，其中的每个项
    *b* 如果是 delete 的项之一，则被省略，否则改为 *t*[ord(*b*)]。
- en: bytes and str each have a class method named maketrans which you can use to
    build tables suitable for the respective translate methods. |   |
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: bytes 和 str 各自有一个名为 maketrans 的类方法，可用于构建适合于相应 translate 方法的表。 |   |
- en: '| upper | *s*.upper() Returns a copy of *s* with all letters, if any, converted
    to uppercase. |   |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| upper | *s*.upper() 返回 *s* 的副本，所有字母（如果有）都转换为大写。 |   |'
- en: '| ^([a](ch09.xhtml#ch01fn95-marker)) This does *not* include punctuation marks
    used as a radix, such as a dot (.) or comma (,). |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| ^([a](ch09.xhtml#ch01fn95-marker)) 这不包括用作基数的标点符号，例如句点（.）或逗号（,）。 |'
- en: The string Module
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串模块
- en: The string module supplies several useful string attributes, listed in [Table 9-2](#predefined_constants_in_the_string_modu).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串模块提供了几个有用的字符串属性，列在 [Table 9-2](#predefined_constants_in_the_string_modu)
    中。
- en: Table 9-2\. Predefined constants in the string module
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Table 9-2\. 字符串模块中的预定义常量
- en: '| ascii_letters | The string ascii_lowercase+ascii_uppercase (the following
    two constants, concatenated) |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| ascii_letters | 包含 ascii_lowercase 和 ascii_uppercase 这两个常量的字符串（将下列两个常量连接在一起）。
    |'
- en: '| ascii_lowercase | The string ''abcdefghijklmnopqrstuvwxyz'' |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| ascii_lowercase | 字符串 ''abcdefghijklmnopqrstuvwxyz'' |'
- en: '| ascii_uppercase | The string ''ABCDEFGHIJKLMNOPQRSTUVWXYZ'' |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| ascii_uppercase | 字符串 ''ABCDEFGHIJKLMNOPQRSTUVWXYZ'' |'
- en: '| digits | The string ''0123456789'' |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| digits | 字符串 ''0123456789'' |'
- en: '| hexdigits | The string ''0123456789abcdefABCDEF'' |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| hexdigits | 字符串 ''0123456789abcdefABCDEF'' |'
- en: '| octdigits | The string ''01234567'' |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| octdigits | 字符串 ''01234567'' |'
- en: '| punctuation | The string ''!"#$%&\''()*+,-./:;<=>?@[\]^_''{&#124;}~'' (i.e.,
    all ASCII characters that are deemed punctuation characters in the C locale; does
    not depend on which locale is active) |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| punctuation | 字符串 ''!"#$%&\''()*+,-./:;<=>?@[\]^_''{&#124;}~''（即在 C 区域中被视为标点字符的所有
    ASCII 字符；不依赖于活动的区域设置） |'
- en: '| printable | The string of those ASCII characters that are deemed printable
    (i.e., digits, letters, punctuation, and whitespace) |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| printable | 包含所有被认为是可打印字符的 ASCII 字符的字符串（即数字、字母、标点符号和空白字符）。 |'
- en: '| whitespace | A string containing all ASCII characters that are deemed whitespace:
    at least space, tab, linefeed, and carriage return, but more characters (e.g.,
    certain control characters) may be present, depending on the active locale |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| whitespace | 包含所有被认为是空白字符的 ASCII 字符的字符串：至少包括空格、制表符、换行符和回车符，但可能会根据当前的区域设置包含更多字符（例如某些控制字符）。
    |'
- en: You should not rebind these attributes; the effects of doing so are undefined,
    since other parts of the Python library may rely on them.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 不应重新绑定这些属性；这样做的效果是未定义的，因为 Python 库的其他部分可能依赖于它们。
- en: The module string also supplies the class Formatter, covered in the following
    section.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串模块还提供了 Formatter 类，在下一节中介绍。
- en: String Formatting
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串格式化
- en: 'Python provides a flexible mechanism for formatting strings (but *not* bytestrings:
    for those, see [“Legacy String Formatting with %”](#legacy_string_formatting_with_percent)).
    A *format string* is simply a string containing *replacement fields* enclosed
    in braces ({}), made up of a *value part*, an optional *conversion part*, and
    an optional *format specifier*:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Python 提供了一种灵活的机制来格式化字符串（但不适用于字节串：关于字节串，请参见 [“使用 % 进行旧式字符串格式化”](#legacy_string_formatting_with_percent)）。*格式字符串*
    简单地是一个包含用大括号（{}）括起来的 *替换字段* 的字符串，由 *值部分*、可选的 *转换部分* 和可选的 *格式说明符* 组成：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The value part differs depending on the string type:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 值部分根据字符串类型而异：
- en: For formatted string literals, or *f-strings*, the value part is evaluated as
    a Python expression (see the following section for details); expressions cannot
    end in an exclamation mark.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于格式化字符串字面量或 *f-strings*，值部分会作为 Python 表达式进行求值（有关详细信息，请参见后续章节）；表达式不能以感叹号结尾。
- en: For other strings, the value part selects an argument, or an element of an argument,
    to the format method.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于其他字符串，值部分选择一个参数或参数的一个元素用于格式方法。
- en: The optional conversion part is an exclamation mark (!) followed by one of the
    letters s, r, or a (described in [“Value Conversion”](#value_conversion)).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的转换部分是感叹号（!）后跟一个字符 s、r 或 a（在 [“值转换”](#value_conversion) 中描述）。
- en: The optional format specifier begins with a colon (:) and determines how the
    converted value is rendered for interpolation in the format string in place of
    the original replacement field.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的格式说明符以冒号（:）开头，并确定如何在格式字符串中替换字段的原始替换值。
- en: Formatted String Literals (F-Strings)
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 格式化字符串字面量（F-Strings）
- en: 'This feature allows you to insert values to be interpolated inline surrounded
    by braces. To create a formatted string literal, put an f before the opening quote
    mark (this is why they’re called *f-strings*) of your string, e.g., f''{value}'':'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此特性允许您插入需要内插的值，用大括号括起来。要创建格式化字符串字面量，请在字符串的开头引号之前加上 f（这就是它们被称为 *f-strings* 的原因），例如
    f'{value}'：
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can use nested braces to specify components of formatting expressions:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用嵌套的大括号来指定格式表达式的组件：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We have tried to update most of the examples in the book to use f-strings, since
    they are the most compact way to format strings in Python. Do remember, though,
    that these string literals are *not* constants—they evaluate each time a statement
    containing them is executed, which involves runtime overhead.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经尝试更新书中的大多数示例以使用 f-strings，因为它们是 Python 中格式化字符串的最紧凑方式。但请记住，这些字符串文字并不是常量——它们在每次包含它们的语句执行时都会计算，这会涉及运行时开销。
- en: 'The values to be formatted inside formatted string literals are already inside
    quotes: therefore, take care to avoid syntax errors when using value-part expressions
    that themselves contain string quotes. With four different string quotes, plus
    the ability to use escape sequences, most things are possible, though admittedly
    readability can suffer.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在格式化字符串文字中的要格式化的值已经被引号包围：因此，在使用包含字符串引号的值部分表达式时要注意避免语法错误。使用四种不同的字符串引号以及能够使用转义序列，大多数情况都是可能的，尽管可读性可能会受到影响。
- en: F-Strings Don’t Help Internationalization
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: F-Strings 对国际化没有帮助
- en: Given a format whose contents will have to accommodate multiple languages, it’s
    much better to use the format method, since the values to be interpolated can
    then be computed independently before submitting them for formatting.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个需要适应多种语言内容的格式，最好使用格式化方法，因为要插值的值可以在提交格式化之前独立计算。
- en: Debug printing with f-strings
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 f-strings 进行调试打印
- en: '3.8+ As a convenience for debugging, the last nonblank character of the value
    expression in a formatted string literal can be followed by an equals sign (=),
    optionally surrounded by spaces. In this case the text of the expression itself
    and the equals sign, including any leading and trailing spaces, are output before
    the value. In the presence of the equals sign, when no format is specified, Python
    uses the repr() of the value as output; otherwise, Python uses the str() of the
    value unless an !r value conversion is specified:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 3.8+ 为了便于调试，在格式化字符串文字中的值表达式的最后一个非空字符后面可以跟一个等号（=），可选地包含空格。在这种情况下，表达式本身的文本和等号，包括任何前导和尾随空格，在值之前输出。在等号存在的情况下，当没有指定格式时，Python
    使用值的 repr() 作为输出；否则，Python 使用值的 str()，除非指定了 !r 值转换：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note that this form is *only* available in formatted string literals.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此形式仅在格式化字符串文字中可用。
- en: 'Here’s a simple f-string example. Notice that all text, including any whitespace,
    surrounding the replacement fields is copied literally into the result:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个简单的 f-string 示例。请注意，包括任何周围的文本，包括任何空白字符，在结果中都会字面复制：
- en: '[PRE14]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Formatting Using format Calls
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用格式化调用格式化
- en: 'The same formatting operations available in formatted string literals can also
    be performed by a call to the string’s format method. In these cases, rather than
    the value appearing inline, the replacement field begins with a value part that
    selects an argument of that call. You can specify both positional and named arguments.
    Here’s an example of a simple format method call:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在格式化字符串文字中可用的相同格式化操作也可以通过调用字符串的 format 方法执行。在这些情况下，替换字段以选择该调用的参数的值部分开始。您可以指定位置参数和命名参数。以下是一个简单的
    format 方法调用示例：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: For simplicity, none of the replacement fields in this example contain a conversion
    part or a format specifier.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 简单起见，此示例中的替换字段均不包含转换部分或格式说明符。
- en: 'As mentioned previously, the argument selection mechanism when using the format
    method can handle both positional and named arguments. The simplest replacement
    field is the empty pair of braces ({}), representing an *automatic* positional
    argument specifier. Each such replacement field automatically refers to the value
    of the next positional argument to format:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，使用格式化方法时的参数选择机制可以处理位置参数和命名参数。最简单的替换字段是空括号对（{}），表示自动位置参数指定器。每个这样的替换字段自动引用下一个要格式化的位置参数的值：
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To repeatedly select an argument, or use it out of order, use numbered replacement
    fields to specify the argument’s position in the list of arguments (counting from
    zero):'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要重复选择参数或者按顺序使用参数，请使用编号的替换字段来指定参数在参数列表中的位置（从零开始计数）：
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You cannot mix automatic and numbered replacement fields: it’s an either-or
    choice.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您不能混合自动和编号的替换字段：这是二选一的选择。
- en: 'For named arguments, use argument names. If desired, you can mix them with
    (automatic or numbered) positional arguments:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 对于命名参数，请使用参数名称。如果需要，可以将它们与（自动或编号）位置参数混合使用：
- en: '[PRE24]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If an argument is a sequence, you can use numeric indices to select a specific
    element of the argument as the value to be formatted. This applies to both positional
    (automatic or numbered) and named arguments:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果参数是一个序列，则可以使用数值索引来选择参数的特定元素作为要格式化的值。这适用于位置（自动或编号）和命名参数：
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If an argument is a composite object, you can select its individual attributes
    as values to be formatted by applying attribute-access dot notation to the argument
    selector. Here is an example using complex numbers, which have real and imag attributes
    that hold the real and imaginary parts, respectively:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果参数是一个复合对象，则可以通过将属性访问点符号应用于参数选择器来选择其各个属性作为要格式化的值。以下是使用复数的示例，复数具有分别保存实部和虚部的real和imag属性：
- en: '[PRE34]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Indexing and attribute-selection operations can be used multiple times, if required.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 索引和属性选择操作可以根据需要多次使用。
- en: Value Conversion
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 值转换
- en: 'You may apply a default conversion to the value via one of its methods. You
    indicate this by following any selector with !s to apply the object’s __str__
    method, !r for its __repr__ method, or !a for the ascii built-in:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在选择器后跟!s应用对象的__str__方法，!r应用其__repr__方法，或者使用ascii内置!a来为值应用默认转换：
- en: '[PRE36]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: When a conversion is present, the conversion is applied to the value before
    it is formatted. Since the same value is required multiple times, in this example
    a format call makes much more sense than a formatted string literal, which would
    require the value to be repeated three times.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当存在转换时，将在格式化之前应用该转换。由于同一值需要多次使用，在此示例中，格式调用比格式化字符串文字更为合理，后者需要重复三次相同的值。
- en: 'Value Formatting: The Format Specifier'
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 值格式化：格式说明符
- en: 'The final (optional) portion of the replacement field, known as the *format
    specifier* and introduced by a colon (:), provides any further required formatting
    of the (possibly converted) value. The absence of a colon in the replacement field
    means that the converted value (after representation as a string if not already
    in string form) is used with no further formatting. If present, a format specifier
    should be provided conforming to the syntax:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 替换字段的最后（可选）部分称为*格式说明符*，由冒号（:）引入，提供（可能转换后的）值的进一步所需格式化。如果在替换字段中没有冒号，则意味着使用转换后的值（如果尚未以字符串形式表示）而不进行进一步格式化。如果存在格式说明符，则应按以下语法提供：
- en: '[PRE38]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Details are provided in the following subsections.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 详细信息在以下各小节中提供。
- en: Fill and alignment
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 填充和对齐
- en: The default fill character is the space. To use an alternative fill character
    (which cannot be an opening or closing brace), begin the format specifier with
    the fill character. The fill character, if any, should be followed by an *alignment
    indicator* (see [Table 9-3](#alignment_indicators)).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 默认填充字符为空格。要使用替代填充字符（不能是开括号或闭括号），请以填充字符开头。填充字符（如果有）应跟随*对齐指示器*（见[表 9-3](#alignment_indicators)）。
- en: Table 9-3\. Alignment indicators
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9-3\. 对齐指示器
- en: '| Character | Significance as alignment indicator |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 字符 | 作为对齐指示器的重要性 |'
- en: '| --- | --- |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| ''<'' | Align value on left of field |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| ''<'' | 将值左对齐在字段内 |'
- en: '| ''>'' | Align value on right of field |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| ''>'' | 将值右对齐在字段内 |'
- en: '| ''^'' | Align value at center of field |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| ''^'' | 将值居中对齐在字段内 |'
- en: '| ''='' | Only for numeric types: add fill characters between the sign and
    the first digit of the numeric value |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| ''='' | 仅适用于数值类型：在符号和数值的第一个数字之间添加填充字符 |'
- en: If the first and second characters are *both* valid alignment indicators, then
    the first is used as the fill character and the second is used to set the alignment.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果第一个和第二个字符都是*有效*的对齐指示器，则第一个用作填充字符，第二个用于设置对齐方式。
- en: 'When no alignment is specified, values other than numbers are left-aligned.
    Unless a field width is specified later in the format specifier (see [“Field width”](#field_width)),
    no fill characters are added, whatever the fill and alignment may be:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当未指定对齐时，除数字外的值均左对齐。除非稍后在格式说明符中指定字段宽度（见[“字段宽度”](#field_width)），否则不添加填充字符，无论填充和对齐如何：
- en: '[PRE39]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Sign indication
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 符号指示
- en: For numeric values only, you can indicate how positive and negative numbers
    are differentiated by including a sign indicator (see [Table 9-4](#sign_indicators)).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 仅适用于数值的情况下，您可以通过包含符号指示器来区分正负数（详见[表 9-4](#sign_indicators)）。
- en: Table 9-4\. Sign indicators
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9-4\. 符号指示器
- en: '| Character | Significance as sign indicator |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 字符 | 作为符号指示器的重要性 |'
- en: '| --- | --- |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| ''+'' | Insert + as sign for positive numbers; - as sign for negative numbers
    |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| ''+'' | 对于正数，插入+作为符号；对于负数，插入-作为符号 |'
- en: '| ''-'' | Insert - as sign for negative numbers; do not insert any sign for
    positive numbers (default behavior if no sign indicator is included) |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| ''-'' | 对于负数，插入-作为符号；对于正数，不插入任何符号（如果未包含符号指示符，则为默认行为） |'
- en: '| '' '' | Insert a space character as sign for positive numbers; - as sign
    for negative numbers |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| '' '' | 对于正数，插入一个空格作为符号；对于负数，插入-作为符号 |'
- en: 'The space is the default sign indication. If a fill is specified, it will appear
    between the sign, if any, and the numerical value; place the sign indicator *after*
    the = to avoid it being used as a fill character:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 空格是默认的符号指示符。如果指定了填充，则会出现在符号和数值之间；在=之后放置符号指示符以避免其被用作填充字符：
- en: '[PRE45]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Zero normalization (z)
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 零归一化（z）
- en: '3.11+ Some numeric formats are capable of representing a negative zero, which
    is often a surprising and unwelcome result. Such negative zeros will be normalized
    to positive zeros when a z character appears in this position in the format specifier:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 3.11+某些数字格式能够表示负零，这往往是一个令人惊讶且不受欢迎的结果。当在格式说明符中的这个位置出现z字符时，这样的负零将被规范化为正零：
- en: '[PRE55]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Radix indicator (#)
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基数指示符（#）
- en: 'For numeric *integer* formats only, you can include a radix indicator, the
    # character. If present, this indicates that the digits of binary-formatted numbers
    should be preceded by ''0b'', those of octal-formatted numbers by ''0o'', and
    those of hexadecimal-formatted numbers by ''0x''. For example, ''{23:x}'' is ''17'',
    while ''{23:#x}'' is ''0x17'', clearly identifying the value as hexadecimal.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 仅适用于数值*整数*格式，您可以包含基数指示符，即#字符。如果存在，则表示应在二进制格式化的数字的数字之前加上'0b'，在八进制格式化的数字的数字之前加上'0o'，在十六进制格式化的数字的数字之前加上'0x'。例如，'{23:x}'为'17'，而'{23:#x}'为'0x17'，清楚地标识出值为十六进制。
- en: Leading zero indicator (0)
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 前导零指示符（0）
- en: 'For *numeric types only*, when the field width starts with a zero, the numeric
    value will be padded with leading zeros rather than leading spaces:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 仅*数值类型*，当字段宽度以零开头时，数值将使用前导零而不是前导空格进行填充：
- en: '[PRE61]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Field width
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字段宽度
- en: 'You can specify the width of the field to be printed. If the width specified
    is less than the length of the value, the length of the value is used (but for
    string values, see the upcoming section [“Precision specification”](#precision_specification)).
    If alignment is not specified, the value is left justified (except for numbers,
    which are right justified):'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以指定要打印的字段的宽度。如果指定的宽度小于值的长度，则使用值的长度（但对于字符串值，请参见下一节[“精度规范”](#precision_specification)）。如果未指定对齐方式，则该值为左对齐（但对于数字，则为右对齐）：
- en: '[PRE65]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Using nested braces, when calling the format method, the field width can be
    a format argument too:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 使用嵌套大括号时，调用格式方法，字段宽度也可以是格式参数：
- en: '[PRE69]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: See [“Nested Format Specifications”](#nested_format_specifications) for a fuller
    discussion of this technique.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此技术的更详细讨论，请参阅[“嵌套格式规范”](#nested_format_specifications)。
- en: Grouping option
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分组选项
- en: 'For numeric values in the decimal (default) format type, you can insert either
    a comma (**,**) or an underscore (**_**) to request that each group of three digits
    (*digit group*) in the integer portion of the result be separated by that character.
    For example:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 对于十进制（默认）格式类型中的数值，您可以插入逗号（**，**）或下划线（**_**）来请求结果整数部分的每个三位数（*数字组*）之间用该字符分隔。例如：
- en: '[PRE71]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: This behavior ignores system locale; for a locale-aware use of digit grouping
    and decimal point character, see format type n in [Table 9-5](#integer_format_types).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 此行为忽略了系统区域设置；对于区域设置感知的数字分组和小数点字符使用，请参阅[表 9-5](#integer_format_types)中的格式类型n。
- en: Precision specification
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 精度规范
- en: 'The precision (e.g., .2) has different meanings for different format types
    (see the following subsection for details), with .6 as the default for most numeric
    formats. For the f and F format types, it specifies the number of digits following
    the decimal point to which the value should be rounded in formatting; for the
    g and G format types, it specifies the number of *significant* digits to which
    the value should be *rounded*; for nonnumeric values, it specifies *truncation*
    of the value to its leftmost characters before formatting. For example:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 精度（例如，.2）对于不同的格式类型具有不同的含义（有关详细信息，请参见下一小节），大多数数字格式的默认值为.6。对于f和F格式类型，它指定应在格式化时四舍五入的小数点后的位数；对于g和G格式类型，它指定应四舍五入的*有效数字*的数量；对于非数值的值，它指定在格式化之前将值截断为其最左边的字符。例如：
- en: '[PRE73]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Format type
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 格式类型
- en: The format specification ends with an optional *format type*, which determines
    how the value gets represented in the given width and at the given precision.
    In the absence of an explicit format type, the value being formatted determines
    the default format type.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 格式规范以可选的*格式类型*结束，该类型确定如何在给定宽度和给定精度下表示该值。如果没有显式指定格式类型，则正在格式化的值确定默认格式类型。
- en: The s format type is always used to format Unicode strings.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: s 格式类型始终用于格式化Unicode字符串。
- en: Integer numbers have a range of acceptable format types, listed in [Table 9-5](#integer_format_types).
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 整数数值具有一系列可接受的格式类型，在[表 9-5](#integer_format_types)中列出。
- en: Table 9-5\. Integer format types
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9-5\. 整数格式类型
- en: '| Format type | Formatting description |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| 格式类型 | 格式说明 |'
- en: '| --- | --- |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| b | Binary format—a series of ones and zeros |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| b | 二进制格式—一系列1和0 |'
- en: '| c | The Unicode character whose ordinal value is the formatted value |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| c | 其序数值是格式化值的Unicode字符 |'
- en: '| d | Decimal (the default format type) |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| d | 十进制（默认格式类型） |'
- en: '| n | Decimal format, with locale-specific separators (commas in the UK and
    US) when system locale is set |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| n | 十进制格式，使用系统区域设置时的区域特定分隔符（在英国和美国为逗号） |'
- en: '| o | Octal format—a series of octal digits |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| o | 八进制格式—一系列八进制数字 |'
- en: '| x or X | Hexadecimal format—a series of hexadecimal digits, with the letters,
    respectively, in lower- or uppercase |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| x 或 X | 十六进制格式—一系列十六进制数字，相应的字母为小写或大写 |'
- en: Floating-point numbers have a different set of format types, shown in [Table 9-6](#floating_point_format_types).
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数具有不同的格式类型集，如[表 9-6](#floating_point_format_types)所示。
- en: Table 9-6\. Floating-point format types
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9-6\. 浮点格式类型
- en: '| Format type | Formatting description |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| 格式类型 | 格式说明 |'
- en: '| --- | --- |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| e or E | Exponential format—scientific notation, with an integer part between
    one and nine, using e or E just before the exponent |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| e 或 E | 指数格式—科学记数法，整数部分介于一到九之间，指数之前使用e或E |'
- en: '| f or F | Fixed-point format with infinities (inf) and nonnumbers (nan) in
    lower- or uppercase |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| f 或 F | 固定点格式，其中无穷大（inf）和非数字（nan）为小写或大写 |'
- en: '| g or G | General format (the default format type)—uses a fixed-point format
    when possible, otherwise exponential format; uses lower- or uppercase representations
    for e, inf, and nan, depending on the case of the format type |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| g 或 G | 通用格式（默认格式类型）—在可能的情况下使用固定点格式，否则使用指数格式；使用小写或大写表示e、inf和nan，具体取决于格式类型的大小写
    |'
- en: '| n | Like general format, but uses locale-specific separators, when system
    locale is set, for groups of three digits and decimal points |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| n | 类似于通用格式，但在设置系统区域设置时使用区域特定分组的分隔符，用于每三位数字和小数点 |'
- en: '| % | Percentage format—multiplies the value by 100 and formats it as fixed-point
    followed by % |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| % | 百分比格式—将值乘以100，并将其格式化为固定点，后跟% |'
- en: When no format type is specified, a float uses the g format, with at least one
    digit after the decimal point and a default precision of 12.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 当未指定格式类型时，浮点数使用g格式，小数点后至少有一位数字，默认精度为12。
- en: 'The following code takes a list of numbers and displays each right justified
    in a field width of nine characters; it specifies that each number’s sign will
    always display, adds a comma between each group of three digits, and rounds each
    number to exactly two digits after the decimal point, converting ints to floats
    as needed:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码接受一个数字列表，并将每个数字右对齐在九个字符宽的字段中；指定每个数字的符号始终显示，并在每组三位数字之间添加逗号，并将每个数字四舍五入到小数点后两位，根据需要将整数转换为浮点数：
- en: '[PRE79]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Nested Format Specifications
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌套格式规范
- en: 'In some cases you’ll want to use expression values to help determine the precise
    format used: you can use nested formatting to achieve this. For example, to format
    a string in a field four characters wider than the string itself, you can pass
    a value for the width to format, as in:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能希望使用表达式值来帮助确定所使用的精确格式：您可以使用嵌套格式化来实现这一点。例如，要将字符串格式化为比字符串本身宽四个字符的字段，可以将一个宽度值传递给格式化，如下所示：
- en: '[PRE81]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'With some care, you can use width specification and nested formatting to print
    a sequence of tuples into well-aligned columns. For example:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 通过仔细设置宽度规范和嵌套格式化，您可以将一系列元组打印成对齐的列。例如：
- en: '[PRE85]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Given this function, the following code:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于此函数，以下代码：
- en: '[PRE86]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'prints:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE87]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Formatting of User-Coded Classes
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户编码类的格式化
- en: 'Values are ultimately formatted by a call to their __format__ method with the
    format specifier as an argument. Built-in types either implement their own method
    or inherit from object, whose rather unhelpful format method only accepts an empty
    string as an argument:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，值通过调用其 __format__ 方法并使用格式说明符作为参数进行格式化。内置类型要么实现自己的方法，要么继承自 object，其不太有用的 format
    方法只接受空字符串作为参数：
- en: '[PRE88]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'You can use this knowledge to implement an entirely different formatting mini-language
    of your own, should you so choose. The following simple example demonstrates the
    passing of format specifications and the return of a (constant) formatted string
    result. The interpretation of the format specification is under your control,
    and you may choose to implement whatever formatting notation you choose:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以利用这些知识实现自己的完全不同的格式化迷你语言，如果您愿意的话。下面的简单示例演示了格式规范的传递和（恒定的）格式化字符串结果的返回。格式规范的解释由您控制，您可以选择实现任何格式化标记法：
- en: '[PRE92]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: The return value of the __format__ method is substituted for the replacement
    field in the formatted output, allowing any desired interpretation of the format
    string.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: __format__ 方法的返回值被替换为格式化输出中的替换字段，允许对格式字符串进行任何所需的解释。
- en: 'This technique is used in the datetime module, to allow the use of strftime-style
    format strings. Consequently, the following all give the same result:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 此技术在 datetime 模块中使用，以允许使用 strftime 风格的格式字符串。因此，以下所有方式都会得到相同的结果：
- en: '[PRE94]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: To help you format your objects more easily, the string module provides a Formatter
    class with many helpful methods for handling formatting tasks. See the [online
    docs](https://oreil.ly/aUmUs) for details.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更轻松地格式化对象，字符串模块提供了一个 Formatter 类，具有许多有用的方法来处理格式化任务。详细信息请参阅 [在线文档](https://oreil.ly/aUmUs)。
- en: Legacy String Formatting with %
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 % 进行遗留字符串格式化
- en: 'A legacy form of string formatting expression in Python has the syntax:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的一个遗留字符串格式化表达式的语法是：
- en: '[PRE100]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: where *format* is a str, bytes, or bytearray object containing format specifiers,
    and *values* are the values to format, usually as a tuple.^([1](ch09.xhtml#ch01fn96))
    Unlike Python’s newer formatting capabilities, you can also use % formatting with
    bytes and bytearray objects, not just str ones.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 *format* 是一个包含格式说明符的 str、bytes 或 bytearray 对象，而 *values* 是要格式化的值，通常作为一个元组。^([1](ch09.xhtml#ch01fn96))
    与 Python 的较新格式化功能不同，您也可以使用 % 格式化来处理 bytes 和 bytearray 对象，而不仅仅是 str 对象。
- en: 'The equivalent use in logging would be, for example:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在日志记录中的等效用法，例如：
- en: '[PRE101]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: with the *values* coming as positional arguments after the *format*.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '*values* 是在 *format* 后作为位置参数传入的。'
- en: The legacy string-formatting approach has roughly the same set of features as
    the C language’s printf and operates in a similar way. Each format specifier is
    a substring of *format* that starts with a percent sign (%) and ends with one
    of the conversion characters shown in [Table 9-7](#string_formatting_conversion_characters).
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留字符串格式化方法大致具有与 C 语言的 printf 相同的功能集，并以类似的方式运行。每个格式说明符都是以百分号（%）开头，并以 [表 9-7](#string_formatting_conversion_characters)
    中显示的转换字符之一结束。
- en: Table 9-7\. String-formatting conversion characters
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9-7\. 字符串格式转换字符
- en: '| Character | Output format | Notes |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| 字符 | 输出格式 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| d, i | Signed decimal integer | Value must be a number |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| d, i | 有符号十进制整数 | 值必须是一个数字 |'
- en: '| u | Unsigned decimal integer | Value must be a number |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| u | 无符号十进制整数 | 值必须是一个数字 |'
- en: '| o | Unsigned octal integer | Value must be a number |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| o | 无符号八进制整数 | 值必须是一个数字 |'
- en: '| x | Unsigned hexadecimal integer (lowercase letters) | Value must be a number
    |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| x | 无符号十六进制整数（小写字母） | 值必须是一个数字 |'
- en: '| X | Unsigned hexadecimal integer (uppercase letters) | Value must be a number
    |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| X | 无符号十六进制整数（大写字母） | 值必须是一个数字 |'
- en: '| e | Floating-point value in exponential form (lowercase e for exponent) |
    Value must be a number |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| e | 浮点数以指数形式表示（指数部分小写 e） | 值必须是一个数字 |'
- en: '| E | Floating-point value in exponential form (uppercase E for exponent) |
    Value must be a number |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| E | 浮点数以指数形式表示（指数部分大写 E） | 值必须是一个数字 |'
- en: '| f, F | Floating-point value in decimal form | Value must be a number |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| f, F | 浮点数以十进制形式表示 | 值必须是一个数字 |'
- en: '| g, G | Like e or E when *exp* is >=4 or < precision; otherwise, like f or
    F | *exp* is the exponent of the number being converted |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| g, G | 当 *exp* >=4 或 < 精度时，类似于 e 或 E；否则类似于 f 或 F | *exp* 是被转换的数的指数部分 |'
- en: '| a | String | Converts any value with ascii |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| a | 字符串 | 使用 ascii 转换任何值 |'
- en: '| r | String | Converts any value with repr |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| r | 字符串 | 使用 repr 转换任何值 |'
- en: '| s | String | Converts any value with str |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| s | 字符串 | 使用str转换任意值 |'
- en: '| % | Literal % character | Consumes no value |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| % | 百分号字符 | 不消耗任何值 |'
- en: The a, r, and s conversion characters are the ones most often used with the
    logging module. Between the % and the conversion character, you can specify a
    number of optional modifiers, as we’ll discuss shortly.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 日志模块最常使用的是a、r和s转换字符。在%和转换字符之间，可以指定一系列可选的修饰符，稍后我们将讨论。
- en: 'What is logged with a formatting expression is *format*, where each format
    specifier is replaced by the corresponding item of *values* converted to a string
    according to the specifier. Here are some simple examples:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 格式表达式记录的内容是*format*，其中每个格式规范都会被*values*的相应项替换，并根据规范转换为字符串。以下是一些简单的示例：
- en: '[PRE102]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Format Specifier Syntax
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 格式规范语法
- en: 'Each format specifier corresponds to an item in *values* by position. A format
    specifier can include modifiers to control how the corresponding item in *values*
    is converted to a string. The components of a format specifier, in order, are:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 每个格式规范按位置对应于*values*中的一项。格式规范可以包括修改器，以控制如何将*values*中的对应项转换为字符串。格式规范的组成部分依次为：
- en: The mandatory leading % character that marks the start of the specifier
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指示转换规范开始的强制前导百分号字符
- en: 'Zero or more optional conversion flags:'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 零个或多个可选的转换标志：
- en: '''#'''
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''#'''
- en: The conversion uses an alternate form (if any exists for its type).
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 转换使用一个备用形式（如果其类型存在的话）。
- en: '''0'''
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''0'''
- en: The conversion is zero padded.
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 转换进行零填充。
- en: '''-'''
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''-'''
- en: The conversion is left justified.
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 转换左对齐。
- en: ''' '''
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ''' '''
- en: Negative numbers are signed, and a space is placed before a positive number.
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 负数带有符号，正数前有一个空格。
- en: '''+'''
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''+'''
- en: A numeric sign (+ or -) is placed before any numeric conversion.
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数字前会放置一个符号（+或-）。
- en: 'An optional minimum width of the conversion: one or more digits, or an asterisk
    (*), meaning that the width is taken from the next item in *values*'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的转换最小宽度：一个或多个数字，或者一个星号(*)，表示宽度从*values*的下一项获取
- en: 'An optional precision for the conversion: a dot (.) followed by zero or more
    digits or by a *, meaning that the precision is taken from the next item in *values*'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的转换精度：点(.)后跟零个或多个数字或*，表示精度从*values*的下一项获取
- en: A mandatory conversion type from [Table 9-7](#string_formatting_conversion_characters)
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[表格 9-7](#string_formatting_conversion_characters)的强制转换类型
- en: There must be exactly as many *values* as *format* has specifiers (plus one
    extra for each width or precision given by *). When a width or precision is given
    by *, the * consumes one item in *values*, which must be an integer and is taken
    as the number of characters to use as the width or precision of that conversion.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '*values*必须与*format*的规范数量完全相同（对于由*给出的宽度或精度，额外消耗一个*values*中的项，该项必须是整数，并且用作该转换的宽度或精度的字符数）。'
- en: Always Use %r (or %a) to Log Possibly Erroneous Strings
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 始终使用%r（或%a）来记录可能错误的字符串
- en: Most often, the format specifiers in your *format* string will all be %s; occasionally,
    you’ll want to ensure horizontal alignment of the output (for example, in a right-justified,
    maybe truncated space of exactly six characters, in which case you’d use %6.6s).
    However, there is an important special case for %r or %a.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，*format*字符串中的格式规范都将是%s；偶尔，您可能希望确保输出的水平对齐（例如，在六个字符的右对齐、可能被截断的空间中），在这种情况下，您将使用%6.6s。但是，对于%r或%a，有一个重要的特殊情况。
- en: 'When you’re logging a string value that might be erroneous (for example, the
    name of a file that is not found), don’t use %s: when the error is that the string
    has spurious leading or trailing spaces, or contains some nonprinting characters
    such as \b, %s can make this hard for you to spot by studying the logs. Use %r
    or %a instead, so that all characters are clearly shown, possibly via escape sequences.
    (For f-strings, the corresponding syntax would be {variable!r} or {variable!a}).'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 当您记录可能错误的字符串值（例如，找不到的文件名）时，请不要使用%s：当错误是字符串具有不必要的前导或尾随空格，或者包含一些非打印字符如\b时，%s可能会使您通过研究日志难以发现。相反，请使用%r或%a，以便所有字符都清晰显示，可能通过转义序列。
    （对于f-strings，相应的语法将是{variable!r}或{variable!a}）。
- en: Text Wrapping and Filling
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本包装和填充
- en: The textwrap module supplies a class and a few functions to format a string
    by breaking it into lines of a given maximum length. To fine-tune the filling
    and wrapping, you can instantiate the TextWrapper class supplied by textwrap and
    apply detailed control. Most of the time, however, one of the functions exposed
    by textwrap suffices; the most commonly used functions are covered in [Table 9-8](#useful_functions_of_the_textwrap_module).
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: textwrap 模块提供一个类和几个函数，以给定的最大长度将字符串格式化为多行。要微调填充和换行效果，可以实例化 textwrap 提供的 TextWrapper
    类并应用详细控制。然而，大多数情况下，textwrap 提供的函数足够使用；最常用的函数在[表 9-8](#useful_functions_of_the_textwrap_module)中介绍。
- en: Table 9-8\. Useful functions of the textwrap module
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9-8\. textwrap 模块的常用函数
- en: '| dedent | dedent(text) Takes a multiline string and returns a copy in which
    all lines have had the same amount of leading whitespace removed, so that some
    lines have no leading whitespace. |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| dedent | dedent(text) 函数接受一个多行字符串，并返回一个去除了所有行相同数量前导空白的副本，使得某些行没有前导空白。 |'
- en: '| fill | fill(text, width=70) Returns a single multiline string equal to ''\n''.join(wrap(text,
    width)). |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| fill | fill(text, width=70) 返回一个等于 ''\n''.join(wrap(text, width)) 的多行字符串。
    |'
- en: '| wrap | wrap(text, width=70) Returns a list of strings (without terminating
    newlines), each no longer than width characters. wrap also supports other named
    arguments (equivalent to attributes of instances of class TextWrapper); for such
    advanced uses, see the [online docs](https://oreil.ly/TjsSm). |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| wrap | wrap(text, width=70) 返回一个字符串列表（不带结束换行符），每个字符串的长度不超过 width 个字符。wrap
    还支持其他命名参数（相当于 TextWrapper 类实例的属性）；对于这些高级用法，请参阅[在线文档](https://oreil.ly/TjsSm)。
    |'
- en: The pprint Module
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pprint 模块
- en: The pprint module pretty-prints data structures, with formatting that strives
    to be more readable than that supplied by the built-in function repr (covered
    in [Table 8-2](ch08.xhtml#pythonapostrophes_core_built_in_functio)). To fine-tune
    the formatting, you can instantiate the PrettyPrinter class supplied by pprint
    and apply detailed control, helped by auxiliary functions also supplied by pprint.
    Most of the time, however, one of the functions exposed by pprint suffices (see
    [Table 9-9](#useful_functions_of_the_pprint_module)).
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: pprint 模块可以对数据结构进行漂亮打印，其格式化比内置函数 repr 更易读（详见[表 8-2](ch08.xhtml#pythonapostrophes_core_built_in_functio)）。要微调格式，可以实例化
    pprint 提供的 PrettyPrinter 类，并应用详细控制，辅助函数也由 pprint 提供。然而，大多数情况下，pprint 提供的函数足够使用（参见[表 9-9](#useful_functions_of_the_pprint_module)）。
- en: Table 9-9\. Useful functions of the pprint module
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9-9\. pprint 模块的常用函数
- en: '| pformat | pformat(object) Returns a string representing the pretty-printing
    of object. |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| pformat | pformat(object) 返回表示对象的漂亮打印的字符串。 |'
- en: '| pp, pprint | pp(object, stream=*sys.stdout*), pprint(object, stream=*sys.stdout*)'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '| pp, pprint | pp(object, stream=*sys.stdout*), pprint(object, stream=*sys.stdout*)
    |'
- en: Outputs the pretty-printing of object to open-for-writing file object stream,
    with a terminating newline.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 将对象的漂亮打印输出到打开写入文件对象流中，并以换行符结尾。
- en: 'The following statements do exactly the same thing:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 以下语句实际上完成了相同的操作：
- en: '[PRE103]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Either of these constructs is roughly the same as print(*x*) in many cases—for
    example, for a container that can be displayed within a single line. However,
    with something like *x*=list(range(30)), print(*x*) displays *x* in 2 lines, breaking
    at an arbitrary point, while using the module pprint displays x over 30 lines,
    one line per item. Use pprint when you prefer the module’s specific display effects
    to the ones of normal string representation.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，这两个构造在效果上基本相同于 print(*x*) —— 例如，对于可以在单行内显示的容器。但是，对于像 *x*=list(range(30))
    这样的情况，print(*x*) 会在 2 行显示 *x*，在任意点断开，而使用 pprint 模块会将 *x* 按每项一行的方式展示出来。在希望使用模块特定的显示效果而不是正常字符串表示的情况下，请使用
    pprint。
- en: pprint and pp support additional formatting arguments; consult the [online docs](https://oreil.ly/xwrN8)
    for details. |
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: pprint 和 pp 支持额外的格式化参数；详细信息请参阅[在线文档](https://oreil.ly/xwrN8)。 |
- en: The reprlib Module
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: reprlib 模块
- en: 'The reprlib module supplies an alternative to the built-in function repr (covered
    in [Table 8-2](ch08.xhtml#pythonapostrophes_core_built_in_functio)), with limits
    on length for the representation string. To fine-tune the length limits, you can
    instantiate or subclass the Repr class supplied by the reprlib module and apply
    detailed control. Most of the time, however, the only function exposed by the
    module suffices: repr(*obj*), which returns a string representing *obj*, with
    sensible limits on length.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: reprlib模块提供了一个替代内置函数repr（在[表格 8-2](ch08.xhtml#pythonapostrophes_core_built_in_functio)中介绍），用于表示字符串的长度限制。要微调长度限制，您可以实例化或子类化reprlib模块提供的Repr类，并应用详细控制。然而，大多数情况下，模块公开的唯一函数就足够了：repr(*obj*)，它返回表示*obj*的字符串，具有合理的长度限制。
- en: Unicode
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unicode
- en: To convert bytestrings into Unicode strings, use the decode method of bytestrings
    (see [Table 9-1](#significant_str_and_bytes_methods)). The conversion must always
    be explicit, and is performed using an auxiliary object known as a *codec* (short
    for *coder–decoder*). A codec can also convert Unicode strings to bytestrings
    using the encode method of strings. To identify a codec, pass the codec name to
    decode or encode. When you pass no codec name, Python uses a default encoding,
    normally 'utf-8'.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 要将字节串转换为Unicode字符串，请使用字节串的decode方法（参见[表格 9-1](#significant_str_and_bytes_methods)）。转换必须始终是显式的，并使用称为*编解码器*（缩写为*编码器-解码器*）的辅助对象执行。编解码器还可以使用字符串的encode方法将Unicode字符串转换为字节串。要标识编解码器，请将编解码器名称传递给decode或encode。当您不传递编解码器名称时，Python使用默认编码，通常为'utf-8'。
- en: Every conversion has a parameter errors, a string specifying how conversion
    errors are to be handled. Sensibly, the default is 'strict', meaning any error
    raises an exception. When errors is 'replace', the conversion replaces each character
    causing errors with '?' in a bytestring result, or with u'\ufffd' in a Unicode
    result. When errors is 'ignore', the conversion silently skips characters causing
    errors. When errors is 'xmlcharrefreplace', the conversion replaces each character
    causing errors with the XML character reference representation of that character
    in the result. You may code your own function to implement a conversion error
    handling strategy and register it under an appropriate name by calling codecs.register_error,
    covered in the table in the following section.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 每次转换都有一个参数错误，一个字符串指定如何处理转换错误。合理地，默认值为'strict'，意味着任何错误都会引发异常。当错误为'replace'时，转换将在字节串结果中用'?'替换导致错误的每个字符，在Unicode结果中用u'\ufffd'替换。当错误为'ignore'时，转换会默默地跳过导致错误的字符。当错误为'xmlcharrefreplace'时，转换会将导致错误的每个字符替换为XML字符引用表示形式的结果中。您可以编写自己的函数来实现转换错误处理策略，并通过调用codecs.register_error并在接下来的部分的表格中覆盖的适当名称下注册它。
- en: The codecs Module
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编解码器模块
- en: The mapping of codec names to codec objects is handled by the codecs module.
    This module also lets you develop your own codec objects and register them so
    that they can be looked up by name, just like built-in codecs. It provides a function
    that lets you look up any codec explicitly as well, obtaining the functions the
    codec uses for encoding and decoding, as well as factory functions to wrap file-like
    objects. Such advanced facilities are rarely used, and we do not cover them in
    this book.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 编解码器名称到编解码器对象的映射由codecs模块处理。此模块还允许您开发自己的编解码器对象并注册它们，以便可以像内置编解码器一样按名称查找它们。它提供一个函数，让您可以显式查找任何编解码器，获取编码和解码使用的函数，以及用于包装类似文件对象的工厂函数。这些高级功能很少使用，我们在本书中不涵盖它们。
- en: The codecs module, together with the encodings package of the standard Python
    library, supplies built-in codecs useful to Python developers dealing with internationalization
    issues. Python comes with over 100 codecs; you can find a complete list, with
    a brief explanation of each, in the [online docs](https://oreil.ly/3iAbC). It’s
    *not* good practice to install a codec as the site-wide default in the module
    sitecustomize; rather, the preferred usage is to always specify the codec by name
    whenever converting between byte and Unicode strings. Python’s default Unicode
    encoding is 'utf-8'.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: codecs模块与Python标准库的编码包一起提供了对处理国际化问题有用的内置编解码器。Python自带超过100种编解码器；您可以在[在线文档](https://oreil.ly/3iAbC)中找到完整列表，并对每种编解码器进行简要解释。在模块sitecustomize中安装编解码器作为全局默认不是良好的做法；相反，推荐的用法是每次在字节和Unicode字符串之间转换时始终通过名称指定编解码器。Python的默认Unicode编码是'utf-8'。
- en: 'The codecs module supplies codecs implemented in Python for most ISO 8859 encodings,
    with codec names from ''iso8859-1'' to ''iso8859-15''. A popular codec in Western
    Europe is ''latin-1'', a fast, built-in implementation of the ISO 8859-1 encoding
    that offers a one-byte-per-character encoding of special characters found in Western
    European languages (beware that it lacks the Euro currency character ''€''; however,
    if you need that, use ''iso8859-15''). On Windows systems only, the codec named
    ''mbcs'' wraps the platform’s multibyte character set conversion procedures. The
    codecs module also supplies various code pages with names from ''cp037'' to ''cp1258'',
    and Unicode standard encodings ''utf-8'' (likely to be most often the best choice,
    thus recommended, and the default) and ''utf-16'' (which has specific big-endian
    and little-endian variants: ''utf-16-be'' and ''utf-16-le''). For use with UTF-16,
    codecs also supplies attributes BOM_BE and BOM_LE, byte-order marks for big-endian
    and little-endian machines, respectively, and BOM, the byte-order mark for the
    current platform.'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: codecs模块为大多数ISO 8859编码提供了Python实现的编解码器，编解码器名称从'iso8859-1'到'iso8859-15'。在西欧地区流行的编解码器是'latin-1'，它是ISO
    8859-1编码的快速内置实现，提供了一个每字符一个字节的编码，包括西欧语言中的特殊字符（注意，它缺少欧元货币符号'€'；但如果需要该符号，请使用'iso8859-15'）。仅在Windows系统上，名为'mbcs'的编解码器包装了平台的多字节字符集转换过程。codecs模块还提供了各种代码页，名称从'cp037'到'cp1258'，以及Unicode标准编码'utf-8'（可能是最佳选择，因此推荐使用，也是默认的）和'utf-16'（具有特定的大端和小端变体：'utf-16-be'和'utf-16-le'）。对于UTF-16的使用，codecs还提供了属性BOM_BE和BOM_LE，分别用于大端和小端机器的字节顺序标记，以及BOM，当前平台的字节顺序标记。
- en: 'In addition to various functions for more advanced uses, as mentioned earlier,
    the codecs module supplies a function to let you register your own conversion
    error handling functions:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 除了用于更高级用途的各种函数外，如前所述，codecs模块还提供了一个函数，允许您注册自己的转换错误处理函数：
- en: '| regis⁠t⁠e⁠r⁠_​e⁠r⁠r⁠or | register_error(*name*, *func*, /) *name* must be
    a string. *func* must be callable with one argument *e* that is an instance of
    UnicodeDecodeError, and must return a tuple with two items: the Unicode string
    to insert in the converted string result, and the index from which to continue
    the conversion (the latter is normally *e*.end). The function can use *e*.encoding,
    the name of the codec of this conversion, and *e*.object[*e*.start:*e*.end], the
    substring causing the conversion error. |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| regis⁠t⁠e⁠r⁠_​e⁠r⁠r⁠o⁠r | register_error(*name*, *func*, /) *name*必须是一个字符串。*func*必须是一个可调用的函数，接受一个参数*e*，它是UnicodeDecodeError的一个实例，并且必须返回一个包含两个项目的元组：要插入转换后字符串结果的Unicode字符串，以及继续转换的索引（通常为*e*.end）。该函数可以使用*e*.encoding，即此转换的编解码器名称，以及*e*.object[*e*.start:*e*.end]，导致转换错误的子字符串。
    |'
- en: The unicodedata Module
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: unicodedata模块
- en: 'The unicodedata module provides easy access to the Unicode Character Database.
    Given any Unicode character, you can use functions supplied by unicodedata to
    obtain the character’s Unicode category, official name (if any), and other relevant
    information. You can also look up the Unicode character (if any) that corresponds
    to a given official name:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: unicodedata模块提供了对Unicode字符数据库的简单访问。对于任何Unicode字符，您可以使用unicodedata提供的函数获取字符的Unicode类别、官方名称（如果有的话）和其他相关信息。您还可以查找与给定官方名称相对应的Unicode字符（如果有的话）：
- en: '[PRE104]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: ^([1](ch09.xhtml#ch01fn96-marker)) In this book we cover only a subset of this
    legacy feature, the format specifier, that you must know about to properly use
    the logging module (discussed in [“The logging module”](ch06.xhtml#the_logging_module)).
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch09.xhtml#ch01fn96-marker)) 本书仅涵盖了这一遗留特性的子集，即格式说明符，您必须了解它以正确使用日志模块（讨论在[“日志模块”](ch06.xhtml#the_logging_module)）。
