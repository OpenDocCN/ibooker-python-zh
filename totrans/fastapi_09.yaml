- en: Chapter 7\. Framework Comparisons
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 框架比较
- en: You don’t need a framework. You need a painting, not a frame.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你不需要一个框架。你需要一幅画，而不是一个框架。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Klaus Kinski, actor
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 演员克劳斯·金斯基
- en: Preview
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预览
- en: For developers who have used Flask, Django, or popular Python web frameworks,
    this chapter points out FastAPI’s similarities and differences. It does not go
    into every excruciating detail, because, otherwise, the binding glue wouldn’t
    hold this book together. This chapter’s comparisons can be useful if you’re thinking
    of migrating an application from one of these frameworks to FastAPI or are just
    curious.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于已经使用过 Flask、Django 或流行的 Python Web 框架的开发人员，本章节指出了 FastAPI 的相似之处和差异。本章并未详尽说明每个细节，因为否则这本书的粘合剂就无法将其结合在一起。如果你考虑从这些框架之一迁移到
    FastAPI 或者只是好奇，本章的比较可能会有所帮助。
- en: One of the first things you might like to know about a new web framework is
    how to get started, and a top-down way is by defining *routes* (mappings from
    URLs and HTTP methods to functions). The next section compares how to do this
    with FastAPI and Flask, because they’re more similar to one another than Django
    and are more likely to be considered together for similar applications.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 关于新的 Web 框架，你可能最想知道的第一件事是如何开始，并且一种自上而下的方法是通过定义 *路由*（将 URL 和 HTTP 方法映射到函数）来实现。接下来的部分将比较如何在
    FastAPI 和 Flask 中实现这一点，因为它们彼此之间比 Django 更相似，更有可能被同时考虑用于类似的应用程序。
- en: Flask
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flask
- en: '[Flask](https://flask.palletsprojects.com) calls itself a *microframework*.
    It provides the basics, and you download third-party packages to supplement it
    as needed. It’s smaller than Django, and faster to learn when you’re getting started.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[Flask](https://flask.palletsprojects.com) 自称为 *微框架*。它提供了基本功能，并允许您根据需要下载第三方包来补充。与
    Django 相比，它更小，对于初学者来说学习起来更快。'
- en: Flask is synchronous, based on WSGI rather than ASGI. A new project called [quart](https://quart.palletsprojects.com)
    is replicating Flask and adding ASGI support.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 是基于 WSGI 而不是 ASGI 的同步框架。一个名为 [quart](https://quart.palletsprojects.com)
    的新项目正在复制 Flask 并添加 ASGI 支持。
- en: Let’s start at the top, showing how Flask and FastAPI define web routing.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从顶层开始，展示 Flask 和 FastAPI 如何定义 Web 路由。
- en: Path
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路径
- en: At the top level, Flask and FastAPI both use a decorator to associate a route
    with a web endpoint. In [Example 7-1](#ex-7-1), let’s duplicate [Example 3-11](ch03.html#ex-3-11)
    (from back in [Chapter 3](ch03.html#ch03)), which gets the person to greet from
    the URL path.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶层，Flask 和 FastAPI 都使用装饰器来将路由与 Web 端点关联。在 [示例 7-1](#ex-7-1) 中，让我们复制 [示例 3-11](ch03.html#ex-3-11)（来自
    [第3章](ch03.html#ch03)）的内容，该示例从 URL 路径中获取要问候的人。
- en: Example 7-1\. FastAPI path
  id: totrans-13
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-1 FastAPI 路径
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: By default, FastAPI converts that `f"Hello? {who}?"` string to JSON and returns
    it to the web client.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，FastAPI 将 `f"Hello? {who}?"` 字符串转换为 JSON 并返回给 Web 客户端。
- en: '[Example 7-2](#ex-7-2) shows how Flask would do it.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 7-2](#ex-7-2) 展示了 Flask 的操作方式。'
- en: Example 7-2\. Flask path
  id: totrans-17
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-2 Flask 路径
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice that the `who` in the decorator is now bounded by `<` and `>`. In Flask,
    the method needs to be included as an argument—unless it’s the default, `GET`.
    So `meth⁠ods=​["GET"]` could have been omitted here, but being explicit never
    hurts.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，装饰器中的 `who` 现在被 `<` 和 `>` 绑定起来了。在 Flask 中，方法需要作为参数包含——除非是默认的 `GET`。所以 `meth⁠ods=​["GET"]`
    在这里可以省略，但明确表达从未有过伤害。
- en: Note
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Flask 2.0 supports the FastAPI-style decorators like `@app.get` instead of `app.route`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 2.0 支持类似 FastAPI 风格的装饰器，如 `@app.get`，而不是 `app.route`。
- en: The Flask `jsonify()` function converts its argument to a JSON string and returns
    it, along with the HTTP response header indicating that it’s JSON. If you’re returning
    a `dict` (not other data types), recent versions of Flask will automatically convert
    it to JSON and return it. Calling `jsonify()` explicitly works for all data types,
    including `dict`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 的 `jsonify()` 函数将其参数转换为 JSON 字符串并返回，同时返回带有指示其为 JSON 的 HTTP 响应头。如果返回的是
    `dict`（而不是其他数据类型），Flask 的最新版本将自动将其转换为 JSON 并返回。显式调用 `jsonify()` 对所有数据类型都有效，包括
    `dict`。
- en: Query Parameter
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询参数
- en: In [Example 7-3](#ex-7-3), let’s repeat [Example 3-15](ch03.html#ex-3-15), where
    `who` is passed as a query parameter (after the `?` in the URL).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [示例 7-3](#ex-7-3) 中，让我们重复 [示例 3-15](ch03.html#ex-3-15)，其中 `who` 作为查询参数传递（在
    URL 中的 `?` 后面）。
- en: Example 7-3\. FastAPI query parameter
  id: totrans-25
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-3 FastAPI 查询参数
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The Flask equivalent is shown in [Example 7-4](#ex-7-4).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 的等效方法显示在 [示例 7-4](#ex-7-4) 中。
- en: Example 7-4\. Flask query parameter
  id: totrans-28
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-4 Flask 查询参数
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In Flask, we need to get request values from the `request` object. In this case,
    `args` is a `dict` containing the query parameters.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Flask 中，我们需要从 `request` 对象中获取请求值。在这种情况下，`args` 是包含查询参数的 `dict`。
- en: Body
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主体
- en: In [Example 7-5](#ex-7-5), let’s copy old [Example 3-21](ch03.html#ex-3-21).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例 7-5](#ex-7-5)中，让我们复制旧的[示例 3-21](ch03.html#ex-3-21)。
- en: Example 7-5\. FastAPI body
  id: totrans-33
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-5\. FastAPI 主体
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: A Flask version looks like [Example 7-6](#ex-7-6).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 版本看起来像[示例 7-6](#ex-7-6)。
- en: Example 7-6\. Flask body
  id: totrans-36
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-6\. Flask 主体
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Flask stores JSON input in *request.json*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 将 JSON 输入存储在*request.json*中。
- en: Header
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 头部
- en: Finally, let’s repeat [Example 3-24](ch03.html#ex-3-24) in [Example 7-7](#ex-7-7).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们重复一下[示例 3-24](ch03.html#ex-3-24)，在[示例 7-7](#ex-7-7)中。
- en: Example 7-7\. FastAPI header
  id: totrans-41
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-7\. FastAPI 头部
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The Flask version is shown in [Example 7-8](#ex-7-8).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 版本显示在[示例 7-8](#ex-7-8)中。
- en: Example 7-8\. Flask header
  id: totrans-44
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-8\. Flask 头部
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As with query parameters, Flask keeps request data in the `request` object.
    This time, it’s the `headers dict` attribute. The header keys are supposed to
    be case-insensitive.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与查询参数类似，Flask 将请求数据保存在`request`对象中。这一次，是`headers dict`属性。头部键应该是大小写不敏感的。
- en: Django
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django
- en: '[Django](https://www.djangoproject.com) is bigger and more complex than Flask
    or FastAPI, targeting “perfectionists with deadlines,” according to its website.
    Its built-in object-relational mapper (ORM) is useful for sites with major database
    backends. It’s more of a monolith than a toolkit. Whether the extra complexity
    and learning curve are justified depends on your application.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[Django](https://www.djangoproject.com) 比 Flask 或 FastAPI 更大更复杂，其目标是“有截止期的完美主义者”，根据其网站。其内置的对象关系映射器（ORM）对于具有主要数据库后端的站点非常有用。它更像是一个单体而不是一个工具包。是否值得额外的复杂性和学习曲线取决于你的应用程序。'
- en: Although Django was a traditional WSGI application, version 3.0 added support
    for ASGI.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Django 是传统的 WSGI 应用程序，但 3.0 版本添加了对 ASGI 的支持。
- en: Unlike Flask and FastAPI, Django likes to define routes (associating URLs with
    web functions, which it calls *view functions*) in a single `URLConf` table, rather
    than using decorators. This makes it easier to see all your routes in one place,
    but makes it harder to see what URL is associated with a function when you’re
    looking at just the function.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Flask 和 FastAPI 不同，Django 喜欢在单个`URLConf`表中定义路由（将 URL 与 Web 函数关联，它称之为*视图函数*），而不是使用装饰器。这使得在一个地方查看所有路由更容易，但在仅查看函数时，很难看出哪个
    URL 与哪个函数关联。
- en: Other Web Framework Features
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他 Web 框架特性
- en: 'In the previous sections comparing the three frameworks, I’ve mainly compared
    how to define routes. A web framework might be expected to help in these other
    areas too:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几节中比较这三个框架时，我主要比较了如何定义路由。一个 Web 框架可能也会在这些其他领域提供帮助：
- en: Forms
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 表单
- en: All three packages support standard HTML forms.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个包都支持标准的 HTML 表单。
- en: Files
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 文件
- en: All these packages handle file uploads and downloads, including multipart HTTP
    requests and responses.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些包都处理文件的上传和下载，包括多部分 HTTP 请求和响应。
- en: Templates
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 模板
- en: A *template language* lets you mix text and code, and is useful for a *content-oriented*
    website (HTML text with dynamically inserted data), rather than an API website.
    The best-known Python template package is [Jinja](https://jinja.palletsprojects.com),
    and it’s supported by Flask, Django, and FastAPI. Django also has its own [template
    language](https://oreil.ly/OIbVJ).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*模板语言*允许你混合文本和代码，并且对于一个*内容导向*的网站（HTML 文本与动态插入的数据），非常有用，而不是一个 API 网站。最著名的 Python
    模板包是[Jinja](https://jinja.palletsprojects.com)，并且得到了 Flask、Django 和 FastAPI 的支持。Django
    还有其自己的[模板语言](https://oreil.ly/OIbVJ)。'
- en: 'If you want to use networking methods beyond basic HTTP, try these:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在基本 HTTP 之外使用网络方法，请尝试这些：
- en: Server-sent events
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器发送事件
- en: Push data to a client as needed. Supported by FastAPI ([sse-starlette](https://oreil.ly/Hv-QP)),
    Flask ([Flask-SSE](https://oreil.ly/oz518)), and Django ([Django EventStream](https://oreil.ly/NlBE5)).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 根据需要向客户端推送数据。由 FastAPI（[sse-starlette](https://oreil.ly/Hv-QP)）、Flask（[Flask-SSE](https://oreil.ly/oz518)）和
    Django（[Django EventStream](https://oreil.ly/NlBE5)）支持。
- en: Queues
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 队列
- en: Job queues, publish-subscribe, and other networking patterns are supported by
    external packages like ZeroMQ, Celery, Redis, and RabbitMQ.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 作业队列、发布-订阅和其他网络模式由外部包支持，如 ZeroMQ、Celery、Redis 和 RabbitMQ。
- en: WebSockets
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: WebSockets
- en: Supported by FastAPI (directly), Django ([Django Channels](https://channels.readthedocs.io)),
    and Flask (third-party packages).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 直接由 FastAPI 支持，Django（[Django Channels](https://channels.readthedocs.io)），以及
    Flask（第三方包）。
- en: Databases
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库
- en: Flask and FastAPI do not include any database handling in their base packages,
    but database handling is a key feature of Django.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 和 FastAPI 的基础包中不包括任何数据库处理，但数据库处理是 Django 的关键特性。
- en: 'Your site’s Data layer might access a database at different levels:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你的站点的数据层可能在不同级别访问数据库：
- en: Direct SQL (PostgreSQL, SQLite)
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接 SQL（PostgreSQL，SQLite）
- en: Direct NoSQL (Redis, MongoDB, Elasticsearch)
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接NoSQL（Redis、MongoDB、Elasticsearch）
- en: An *ORM* that generates SQL
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成SQL的*ORM*
- en: An object document/data mapper/manager (ODM) that generates NoSQL
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成NoSQL的对象文档/数据映射器/管理器（ODM）
- en: For relational databases, [SQLAlchemy](https://www.sqlalchemy.org) is an excellent
    package that includes multiple access levels, from direct SQL up to an ORM. This
    is a common choice for Flask and FastAPI developers. The author of FastAPI has
    leveraged both SQLAlchemy and Pydantic for the [SQLModel package](https://sqlmodel.tiangolo.com),
    which is discussed more in [Chapter 14](ch14.html#ch14).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于关系数据库，[SQLAlchemy](https://www.sqlalchemy.org)是一个很好的包，包括从直接SQL到ORM的多个访问级别。这是Flask和FastAPI开发人员的常见选择。FastAPI的作者利用了SQLAlchemy和Pydantic来创建[SQLModel包](https://sqlmodel.tiangolo.com)，这在[第14章](ch14.html#ch14)中进行了更多讨论。
- en: Django is often the framework choice for a site with heavy database needs. It
    has its own [ORM](https://oreil.ly/eFzZn) and an automated [database admin page](https://oreil.ly/_al42).
    Although some sources recommend letting nontechnical staff use this admin page
    for routine data management, be careful. In one case, I’ve seen a non-expert misunderstand
    an admin page warning message, resulting in the database needing to be manually
    restored from a backup.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Django通常是需要大量数据库的网站的框架选择。它拥有自己的[ORM](https://oreil.ly/eFzZn)和一个自动化的[数据库管理页面](https://oreil.ly/_al42)。尽管一些来源建议非技术人员使用这个管理页面进行常规数据管理，但要小心。在一个案例中，我曾见过一个非专家误解了管理页面的警告信息，导致数据库需要手动从备份中恢复。
- en: '[Chapter 14](ch14.html#ch14) discusses FastAPI and databases in more depth.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[第14章](ch14.html#ch14)对FastAPI和数据库进行了更深入的讨论。'
- en: Recommendations
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐
- en: For API-based services, FastAPI seems to be the best choice now. Flask and FastAPI
    are about equal in terms of getting a service up and running quickly. Django takes
    more time to understand but provides many features of use for larger sites, especially
    those with heavy database reliance.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于API的服务，FastAPI现在似乎是最佳选择。Flask和FastAPI在快速启动服务方面几乎相同。Django需要更多时间理解，但为更大的站点提供了许多有用的特性，特别是对于那些依赖重度数据库的站点。
- en: Other Python Web Frameworks
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他Python Web框架
- en: 'The current big three Python web frameworks are Flask, Django, and FastAPI.
    Google **`python web frameworks`** and you’ll get a wealth of suggestions, which
    I won’t repeat here. A few that might not stand out in those lists but that are
    interesting for one reason or another include the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当前最主要的三个Python Web框架是Flask、Django和FastAPI。谷歌**`python web frameworks`**，你会得到许多建议，我这里不会重复了。一些在这些列表中可能不太突出但因某种原因有趣的包括以下几个：
- en: '[Bottle](https://bottlepy.org/docs/dev)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[Bottle](https://bottlepy.org/docs/dev)'
- en: A *very* minimal (single Python file) package, good for a quick proof of concept
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*非常*精简（单个Python文件）的包，适用于快速概念验证
- en: '[Litestar](https://litestar.dev)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[Litestar](https://litestar.dev)'
- en: Similar to FastAPI—it’s based on ASGI/Starlette and Pydantic—but has its own
    opinions
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于FastAPI——它基于ASGI/Starlette和Pydantic，但有自己的观点
- en: '[AIOHTTP](https://docs.aiohttp.org)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[AIOHTTP](https://docs.aiohttp.org)'
- en: An ASGI client and server, with useful demo code
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 带有有用的演示代码的ASGI客户端和服务器
- en: '[Socketify.py](https://docs.socketify.dev)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[Socketify.py](https://docs.socketify.dev)'
- en: A new entrant that claims very high performance
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 声称性能非常高的新参与者
- en: Review
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾
- en: 'Flask and Django are the most popular Python web frameworks, although FastAPI’s
    popularity is growing faster. All three handle the basic web server tasks, with
    varying learning curves. FastAPI seems to have a cleaner syntax for specifying
    routes, and its support of ASGI allows it to run faster than its competitors in
    many cases. Coming next: let’s build a website already.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Flask和Django是最流行的Python Web框架，尽管FastAPI的受欢迎程度增长速度更快。这三个框架都处理基本的Web服务器任务，学习曲线不同。FastAPI似乎具有更清晰的语法来指定路由，并且它的ASGI支持使得在许多情况下运行速度比竞争对手更快。接下来：让我们开始建立一个网站吧。
