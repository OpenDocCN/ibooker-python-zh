- en: Appendix B. Supplementary Material
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录B. 补充材料
- en: This appendix contains some additional code related to the case studies presented
    in the book. You might find this material helpful to round out your understanding
    of the examples.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录包含一些与书中案例研究相关的额外代码。您可能会发现这些材料有助于全面理解示例。
- en: Cutlery Example Using Asyncio
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Asyncio的餐具示例
- en: '[“Case Study: Robots and Cutlery”](ch02.html#robotcut) analyzed a race condition
    bug caused by multiple threads modifying the cutlery records in the global “kitchen”
    object instance. For completeness, here is how we might create an async version
    of the solution.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[“案例研究：机器人和餐具”](ch02.html#robotcut)分析了由多个线程修改全局“厨房”对象实例中餐具记录而引起的竞争条件错误。为了完整起见，这里是我们可能创建的解决方案的异步版本。'
- en: There is a specific point I want to highlight about the *observability* of concurrency
    in the `asyncio` approach, shown in [Example B-1](#corobot).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要强调关于在`asyncio`方法中并发性的 *可观察性* 的特定点，如[示例 B-1](#corobot)所示。
- en: Example B-1\. Cutlery management using asyncio
  id: totrans-5
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 B-1\. 使用asyncio进行餐具管理
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](assets/1.png)](#co_supplementary_material_CO1-1)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_supplementary_material_CO1-1)'
- en: Instead of a ThreadBot, we now have a CoroBot. This code sample uses only one
    thread, and that thread will be managing all 10 separate CoroBot object instances—one
    for each table in the restaurant.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了CoroBot，而不是ThreadBot。此代码示例仅使用一个线程，并且该线程将管理所有10个独立的CoroBot对象实例——每个对象实例对应餐厅中的一个桌子。
- en: '[![2](assets/2.png)](#co_supplementary_material_CO1-2)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_supplementary_material_CO1-2)'
- en: Instead of `queue.Queue`, we’re using the `asyncio`-enabled queue.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的是支持`asyncio`的队列，而不是`queue.Queue`。
- en: '[![3](assets/3.png)](#co_supplementary_material_CO1-3)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_supplementary_material_CO1-3)'
- en: 'This is the main point: the only places at which execution can switch between
    different CoroBot instances is where the `await` keyword appears. It is *not possible*
    to have a context switch during the rest of this function, and this is why there
    is no race condition during the modification of the kitchen cutlery inventory.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是重点：只有在出现`await`关键字的地方，执行才会在不同的CoroBot实例之间切换。在函数的其余部分不可能进行上下文切换，这就是为什么在修改厨房餐具库存时不会出现竞争条件的原因。
- en: 'The presence of `await` keywords makes context switches *observable*. This
    makes it significantly easier to reason about any potential race conditions in
    concurrent applications. This version of the code always passes the test, no matter
    how many tasks are assigned:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 存在`await`关键字使得上下文切换 *可观察*。这使得在并发应用程序中推理潜在的竞争条件变得更加容易。无论分配了多少任务，该代码版本始终通过测试：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This really isn’t impressive at all: it’s an entirely predictable outcome based
    on the fact that there are clearly no race conditions in the code. And that is
    *exactly* the point.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这真的一点也不令人印象深刻：这是完全可以预测的结果，因为代码中显然没有竞争条件。这 *恰恰* 是重点所在。
- en: Supplementary Material for News Website Scraper
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新闻网站爬虫的补充材料
- en: 'This *index.html* file shown in [Example B-2](#indexhtml) is required to run
    the code in [“Case Study: Scraping the News”](ch04.html#scrapingthenews).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[“案例研究：新闻爬取”](ch04.html#scrapingthenews)中展示的 *index.html* 文件是运行代码所需的。在[示例 B-2](#indexhtml)中，我们可以看到如何创建这个文件。'
- en: Example B-2\. The index.html file required for the web scraping case study
  id: totrans-18
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 B-2\. web爬虫案例研究所需的index.html文件
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It’s a very basic template with rudimentary styling.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个非常基本的模板，具有基本的样式。
- en: Supplementary Material for the ZeroMQ Case Study
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ZeroMQ案例研究的补充材料
- en: 'In [“Case Study: Application Performance Monitoring”](ch04.html#appmon), I
    mentioned that you’ll need the HTML file being served to show the metrics charts.
    That file, *charts.html*, is presented in [Example B-3](#chartshtml). You should
    obtain a URL for *smoothie.min.js* from [Smoothie Charts](http://smoothiecharts.org)
    or one of the CDNs, and use that URL as the `src` attribute instead.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在[“案例研究：应用程序性能监控”](ch04.html#appmon)中，我提到您需要提供用于显示指标图表的HTML文件。这个文件，*charts.html*，在[示例 B-3](#chartshtml)中提供。您应该从[Smoothie
    Charts](http://smoothiecharts.org)或其中一个CDN获取*smoothie.min.js*的URL，并将该URL用作`src`属性。
- en: Example B-3\. charts.html
  id: totrans-23
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 B-3\. charts.html
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](assets/1.png)](#co_supplementary_material_CO2-1)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_supplementary_material_CO2-1)'
- en: '`cpu` and `mem` are each a mapping of a color to a `TimeSeries()` instance.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`cpu` 和 `mem` 各自是一个将颜色映射到 `TimeSeries()` 实例的映射。'
- en: '[![2](assets/2.png)](#co_supplementary_material_CO2-2)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_supplementary_material_CO2-2)'
- en: One chart instance is created for CPU, and one for memory usage.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为CPU创建一个图表实例，并为内存使用创建另一个图表实例。
- en: '[![3](assets/3.png)](#co_supplementary_material_CO2-3)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_supplementary_material_CO2-3)'
- en: We create a `TimeSeries()` instance *inside* the `onmessage` event of the `EventSource()`
    instance. This means that any new data coming in (e.g., on a different color name)
    will automatically get a new time series created for it. The `add_timeseries()`
    function creates the `TimeSeries()` instance and adds to the given chart instance.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`EventSource()`实例的`onmessage`事件中创建一个`TimeSeries()`实例。这意味着任何新数据的到来（例如不同颜色名称）都将为其自动创建一个新的时间序列。`add_timeseries()`函数创建`TimeSeries()`实例并将其添加到给定的图表实例中。
- en: '[![4](assets/4.png)](#co_supplementary_material_CO2-4)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_supplementary_material_CO2-4)'
- en: Create a new `EventSource()` instance on the */feed* URL. The browser will connect
    to this endpoint on our server, (*metric_server.py*). Note that the browser will
    automatically try to reconnect if the connection is lost. Server-sent events are
    often overlooked, but in many situations their simplicity makes them preferable
    to WebSockets.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在*/feed* URL上创建一个新的`EventSource()`实例。浏览器将连接到我们服务器上的此端点（*metric_server.py*）。请注意，如果连接丢失，浏览器将自动尝试重新连接。虽然经常被忽视，但在许多情况下，服务器发送事件的简单性使其优于WebSocket。
- en: '[![5](assets/5.png)](#co_supplementary_material_CO2-5)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_supplementary_material_CO2-5)'
- en: The `onmessage` event will fire every time the server sends data. Here the data
    is parsed as JSON.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 每当服务器发送数据时，`onmessage`事件将触发。此处的数据被解析为JSON。
- en: '[![6](assets/6.png)](#co_supplementary_material_CO2-6)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_supplementary_material_CO2-6)'
- en: Recall that the `cpu` identifier is a mapping of a color to a `TimeSeries()`
    instance. Here, we obtain that time series and append data to it. We also obtain
    the timestamp and parse it to get the correct format required by the chart.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请回想一下，`cpu`标识符是颜色到`TimeSeries()`实例的映射。在这里，我们获取该时间序列并向其附加数据。我们还获取时间戳并解析它，以获取图表所需的正确格式。
- en: Database Trigger Handling for the asyncpg Case Study
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: asyncpg案例研究的数据库触发器处理
- en: 'In [“Case Study: Cache Invalidation”](ch04.html#asyncpg_cs), one of the required
    Python source files was omitted in the interest of saving space. That file is
    presented in [Example B-4](#triggers).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在[“案例研究：缓存失效”](ch04.html#asyncpg_cs)中，由于篇幅限制，省略了所需的一个Python源文件。该文件在[示例 B-4](#triggers)中展示。
- en: Example B-4\. triggers.py
  id: totrans-39
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 B-4\. triggers.py
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](assets/1.png)](#co_supplementary_material_CO3-1)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_supplementary_material_CO3-1)'
- en: These functions require `asyncpg`, although this import is used only to allow
    `Connection` to be used in type annotations.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管此导入仅用于允许在类型注释中使用`Connection`，但这些函数需要`asyncpg`。
- en: '[![2](assets/2.png)](#co_supplementary_material_CO3-2)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_supplementary_material_CO3-2)'
- en: The `create_notify_trigger()` coroutine function will create the trigger function
    itself in the database. The trigger function will contain the name of the channel
    that updates will be sent to. The code for the function itself is in the `SQL_CREATE_TRIGGER`
    identifier, and it is set up as a format string.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`create_notify_trigger()`协程函数将在数据库中创建触发器函数本身。触发器函数将包含将发送更新的频道名称。函数本身的代码位于`SQL_CREATE_TRIGGER`标识符中，并设置为格式化字符串。'
- en: '[![3](assets/3.png)](#co_supplementary_material_CO3-3)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_supplementary_material_CO3-3)'
- en: Recall from the case study example that update notifications included a “diff”
    section in which the difference between old and new data was shown. We use the
    `hstore` feature of PostgreSQL to calculate that diff. It provides something close
    to the semantics of sets. The `hstore` extension is not enabled by default, so
    we enable it here.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请回想一下案例研究示例，更新通知包括“diff”部分，显示旧数据与新数据之间的差异。我们使用PostgreSQL的`hstore`功能来计算该差异。它提供了接近集合语义的功能。`hstore`扩展默认未启用，因此我们在此启用它。
- en: '[![4](assets/4.png)](#co_supplementary_material_CO3-4)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_supplementary_material_CO3-4)'
- en: The desired trigger name and channel are substituted into the template and then
    executed.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 模板中将替换所需的触发器名称和通道，然后执行。
- en: '[![5](assets/5.png)](#co_supplementary_material_CO3-5)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_supplementary_material_CO3-5)'
- en: The second function, `add_table_triggers()`, connects the trigger function to
    table events like insert, update, and delete.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个函数，`add_table_triggers()`，将触发器函数连接到插入、更新和删除等表事件上。
- en: '[![6](assets/6.png)](#co_supplementary_material_CO3-6)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_supplementary_material_CO3-6)'
- en: There are three format strings for each of the three methods.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 每种方法都有三个格式字符串。
- en: '[![7](assets/7.png)](#co_supplementary_material_CO3-7)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_supplementary_material_CO3-7)'
- en: The desired variables are substituted into the templates and then executed.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 所需变量被替换进模板，然后执行。
- en: '[![8](assets/8.png)](#co_supplementary_material_CO3-8)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](assets/8.png)](#co_supplementary_material_CO3-8)'
- en: 'This SQL code took me a lot longer than expected to get exactly right! This
    PostgreSQL procedure is called for insert, update, and delete events; the way
    to know which is to check the `TG_OP` variable. If the operation is `INSERT`,
    then `NEW` will be defined (and `OLD` will *not* be defined). For `DELETE`, `OLD`
    will be defined but not `NEW`. For `UPDATE`, both are defined, which allows us
    to calculate the diff. We also make use of PostgreSQL’s built-in support for JSON
    with the `row_to_json()` and `hstore_to_json()` functions: these mean that our
    callback handler will receive valid JSON.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 SQL 代码花费了比预期更长的时间才能准确无误！这个 PostgreSQL 过程被用于处理插入、更新和删除事件；判断使用 `TG_OP` 变量。如果操作是
    `INSERT`，那么 `NEW` 将被定义（而 `OLD` 将不会）。对于 `DELETE`，`OLD` 将被定义但 `NEW` 不会。对于 `UPDATE`，两者都被定义，这允许我们计算差异。我们还利用
    PostgreSQL 的内置 JSON 支持，使用 `row_to_json()` 和 `hstore_to_json()` 函数：这些意味着我们的回调处理程序将接收到有效的
    JSON。
- en: Finally, the call to the `pg_notify()` function is what actually sends the event.
    *All subscribers* on `{channel}` will receive the notification.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，调用 `pg_notify()` 函数实际发送事件。*所有订阅者* 在 `{channel}` 上都将收到通知。
- en: '[![9](assets/9.png)](#co_supplementary_material_CO3-9)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[![9](assets/9.png)](#co_supplementary_material_CO3-9)'
- en: 'This is standard trigger code: it sets up a trigger to call a specific procedure
    `{trigger_name}()` when a specific event occurs, like an `INSERT` or an `UPDATE`.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是标准的触发器代码：它设置一个触发器，以便在特定事件发生时调用特定过程 `{trigger_name}()`，如 `INSERT` 或 `UPDATE`。
- en: There are sure to be many useful applications that can be built around notifications
    received from PostgreSQL.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 可以围绕从 PostgreSQL 接收到的通知构建许多有用的应用程序。
- en: 'Supplementary Material for the Sanic Example: aelapsed and aprofiler'
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sanic 示例的补充材料：aelapsed 和 aprofiler
- en: The Sanic case study (see [*asyncpg* case study](ch04.html#asyncpg_cs)) included
    utility decorators for printing out elapsed time taken by a function. These are
    shown in [Example B-5](#aelapsed).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Sanic 案例研究（参见 [*asyncpg* 案例研究](ch04.html#asyncpg_cs)）包括用于打印函数执行时间的实用装饰器。这些显示在
    [示例 B-5](#aelapsed) 中。
- en: Example B-5\. perf.py
  id: totrans-63
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 B-5\. perf.py
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](assets/1.png)](#co_supplementary_material_CO4-1)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_supplementary_material_CO4-1)'
- en: The `aelapsed()` decorator will record the time taken to execute the wrapped
    coroutine.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`aelapsed()` 装饰器将记录执行包装的协程所花费的时间。'
- en: '[![2](assets/2.png)](#co_supplementary_material_CO4-2)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_supplementary_material_CO4-2)'
- en: The `aprofiler()` metaclass will make sure that every member of the class that
    is a coroutine function will get wrapped in the `aelapsed()` decorator.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`aprofiler()` 元类将确保类中的每个协程函数都被 `aelapsed()` 装饰器包装。'
