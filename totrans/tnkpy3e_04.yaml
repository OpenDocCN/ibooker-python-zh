- en: 2\. Variables and Statements#
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 变量与语句#
- en: 原文：[https://allendowney.github.io/ThinkPython/chap02.html](https://allendowney.github.io/ThinkPython/chap02.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://allendowney.github.io/ThinkPython/chap02.html](https://allendowney.github.io/ThinkPython/chap02.html)
- en: In the previous chapter, we used operators to write expressions that perform
    arithmetic computations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用运算符编写了执行算术计算的表达式。
- en: In this chapter, you’ll learn about variables and statements, the `import` statement,
    and the `print` function. And I’ll introduce more of the vocabulary we use to
    talk about programs, including “argument” and “module”.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习关于变量和语句、`import`语句以及`print`函数的知识。我还将介绍更多我们用来讨论程序的词汇，包括“参数”和“模块”。
- en: 2.1\. Variables[#](#variables "Link to this heading")
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.1\. 变量[#](#variables "链接到此标题")
- en: A **variable** is a name that refers to a value. To create a variable, we can
    write a **assignment statement** like this.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**变量**是指向某个值的名称。要创建一个变量，我们可以像这样写一个**赋值语句**。'
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'An assignment statement has three parts: the name of the variable on the left,
    the equals operator, `=`, and an expression on the right. In this example, the
    expression is an integer. In the following example, the expression is a floating-point
    number.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个赋值语句有三个部分：左边是变量名，等号操作符`=`，右边是表达式。在这个示例中，表达式是一个整数。在以下示例中，表达式是一个浮动小数。
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And in the following example, the expression is a string.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，表达式是一个字符串。
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When you run an assignment statement, there is no output. Python creates the
    variable and gives it a value, but the assignment statement has no visible effect.
    However, after creating a variable, you can use it as an expression. So we can
    display the value of `message` like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当你执行赋值语句时，没有输出。Python 会创建变量并赋予它一个值，但赋值语句没有可见的效果。然而，在创建变量后，你可以将其作为表达式使用。因此我们可以这样显示`message`的值：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can also use a variable as part of an expression with arithmetic operators.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将变量用作包含算术运算符的表达式的一部分。
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: And you can use a variable when you call a function.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在调用函数时使用变量。
- en: '[PRE9]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 2.2\. State diagrams[#](#state-diagrams "Link to this heading")
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.2\. 状态图[#](#state-diagrams "链接到此标题")
- en: A common way to represent variables on paper is to write the name with an arrow
    pointing to its value.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在纸面上表示变量的常见方式是写下变量名，并画一个箭头指向它的值。
- en: '![_images/54319c437cca81caa5fa9ee52a1edfb01810e693b7ebd67c56de713f1d132655.png](../Images/137875fd94efd00be105057fca45cab8.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![_images/54319c437cca81caa5fa9ee52a1edfb01810e693b7ebd67c56de713f1d132655.png](../Images/137875fd94efd00be105057fca45cab8.png)'
- en: This kind of figure is called a **state diagram** because it shows what state
    each of the variables is in (think of it as the variable’s state of mind). We’ll
    use state diagrams throughout the book to represent a model of how Python stores
    variables and their values.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这种图形被称为**状态图**，因为它展示了每个变量的状态（可以把它看作是变量的“心理状态”）。我们将在全书中使用状态图来表示 Python 如何存储变量及其值的模型。
- en: 2.3\. Variable names[#](#variable-names "Link to this heading")
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.3\. 变量名[#](#variable-names "链接到此标题")
- en: Variable names can be as long as you like. They can contain both letters and
    numbers, but they can’t begin with a number. It is legal to use uppercase letters,
    but it is conventional to use only lower case for variable names.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 变量名可以任意长。它们可以包含字母和数字，但不能以数字开头。使用大写字母是合法的，但通常约定变量名使用小写字母。
- en: The only punctuation that can appear in a variable name is the underscore character,
    `_`. It is often used in names with multiple words, such as `your_name` or `airspeed_of_unladen_swallow`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 变量名中唯一可以出现的标点符号是下划线字符`_`。它通常用于多个单词的名字中，例如`your_name`或`airspeed_of_unladen_swallow`。
- en: If you give a variable an illegal name, you get a syntax error. The name `million!`
    is illegal because it contains punctuation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给变量一个非法的名称，就会得到语法错误。`million!`是非法的，因为它包含了标点符号。
- en: '[PRE13]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`76trombones` is illegal because it starts with a number.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`76trombones`是非法的，因为它以数字开头。'
- en: '[PRE15]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`class` is also illegal, but it might not be obvious why.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`class`也是非法的，但可能不太明显为什么。'
- en: '[PRE17]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: It turns out that `class` is a **keyword**, which is a special word used to
    specify the structure of a program. Keywords can’t be used as variable names.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，`class`是一个**关键字**，是用来指定程序结构的特殊词汇。关键字不能用作变量名。
- en: 'Here’s a complete list of Python’s keywords:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Python 关键字的完整列表：
- en: '[PRE19]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You don’t have to memorize this list. In most development environments, keywords
    are displayed in a different color; if you try to use one as a variable name,
    you’ll know.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要记住这个列表。在大多数开发环境中，关键字会以不同的颜色显示；如果你尝试将其作为变量名使用，你会知道的。
- en: 2.4\. The import statement[#](#the-import-statement "Link to this heading")
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.4\. 导入语句[#](#the-import-statement "Link to this heading")
- en: In order to use some Python features, you have to **import** them. For example,
    the following statement imports the `math` module.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用一些 Python 功能，你必须**导入**它们。例如，下面的语句导入了 `math` 模块。
- en: '[PRE20]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: A **module** is a collection of variables and functions. The math module provides
    a variable called `pi` that contains the value of the mathematical constant denoted
    \(\pi\). We can display its value like this.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**模块**是一个包含变量和函数的集合。数学模块提供了一个叫做`pi`的变量，包含了数学常数\(\pi\)的值。我们可以像这样显示它的值。'
- en: '[PRE21]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: To use a variable in a module, you have to use the **dot operator** (`.`) between
    the name of the module and the name of the variable.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要在模块中使用变量，你必须在模块名称和变量名称之间使用**点操作符**（`.`）。
- en: The math module also contains functions. For example, `sqrt` computes square
    roots.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 数学模块还包含函数。例如，`sqrt` 计算平方根。
- en: '[PRE23]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: And `pow` raises one number to the power of a second number.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 而 `pow` 将一个数字提升为第二个数字的幂。
- en: '[PRE25]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'At this point we’ve seen two ways to raise a number to a power: we can use
    the `math.pow` function or the exponentiation operator, `**`. Either one is fine,
    but the operator is used more often than the function.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到两种将数字提升为幂的方法：我们可以使用 `math.pow` 函数或指数运算符 `**`。两者都可以，但运算符的使用频率比函数更高。
- en: 2.5\. Expressions and statements[#](#expressions-and-statements "Link to this
    heading")
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.5\. 表达式和语句[#](#expressions-and-statements "Link to this heading")
- en: So far, we’ve seen a few kinds of expressions. An expression can be a single
    value, like an integer, floating-point number, or string. It can also be a collection
    of values and operators. And it can include variable names and function calls.
    Here’s an expression that includes several of these elements.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到几种类型的表达式。一个表达式可以是一个单独的值，比如整数、浮点数或字符串。它也可以是一个包含值和运算符的集合。它还可以包括变量名和函数调用。这是一个包含这些元素的表达式。
- en: '[PRE27]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We have also seen a few kind of statements. A **statement** is a unit of code
    that has an effect, but no value. For example, an assignment statement creates
    a variable and gives it a value, but the statement itself has no value.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也见过几种类型的语句。**语句**是一个有作用但没有值的代码单元。例如，一个赋值语句创建一个变量并赋予它一个值，但语句本身没有值。
- en: '[PRE29]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Similarly, an import statement has an effect – it imports a module so we can
    use the variables and functions it contains – but it has no visible effect.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，导入语句也有一个作用——它导入一个模块，以便我们可以使用它包含的变量和函数——但它没有可见的效果。
- en: '[PRE30]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Computing the value of an expression is called **evaluation**. Running a statement
    is called **execution**.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 计算表达式的值称为**求值**。执行语句称为**执行**。
- en: 2.6\. The print function[#](#the-print-function "Link to this heading")
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.6\. print 函数[#](#the-print-function "Link to this heading")
- en: When you evaluate an expression, the result is displayed.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当你求值一个表达式时，结果会被显示出来。
- en: '[PRE31]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: But if you evaluate more than one expression, only the value of the last one
    is displayed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你计算多个表达式，只有最后一个表达式的值会被显示。
- en: '[PRE33]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: To display more than one value, you can use the `print` function.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示多个值，你可以使用 `print` 函数。
- en: '[PRE35]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: It also works with floating-point numbers and strings.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 它同样适用于浮点数和字符串。
- en: '[PRE37]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: You can also use a sequence of expressions separated by commas.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用由逗号分隔的表达式序列。
- en: '[PRE39]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Notice that the `print` function puts a space between the values.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`print` 函数会在值之间添加空格。
- en: 2.7\. Arguments[#](#arguments "Link to this heading")
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.7\. 参数[#](#arguments "Link to this heading")
- en: When you call a function, the expression in parenthesis is called an **argument**.
    Normally I would explain why, but in this case the technical meaning of a term
    has almost nothing to do with the common meaning of the word, so I won’t even
    try.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调用一个函数时，括号中的表达式被称为**参数**。通常我会解释为什么，但是在这种情况下，术语的技术含义几乎与词汇的常见含义无关，所以我就不尝试了。
- en: Some of the functions we’ve seen so far take only one argument, like `int`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们看到的一些函数只接受一个参数，像 `int`。
- en: '[PRE41]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Some take two, like `math.pow`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有些需要两个参数，像 `math.pow`。
- en: '[PRE43]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Some can take additional arguments that are optional. For example, `int` can
    take a second argument that specifies the base of the number.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 有些可以接受额外的可选参数。例如，`int` 可以接受一个第二个参数，指定数字的基数。
- en: '[PRE45]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The sequence of digits `101` in base 2 represents the number 5 in base 10.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制中的数字序列`101`表示十进制中的数字5。
- en: '`round` also takes an optional second argument, which is the number of decimal
    places to round off to.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`round`还可以接受一个可选的第二个参数，表示四舍五入的位数。'
- en: '[PRE47]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Some functions can take any number of arguments, like `print`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一些函数可以接受任意数量的参数，比如`print`。
- en: '[PRE49]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: If you call a function and provide too many arguments, that’s a `TypeError`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你调用一个函数并提供了太多的参数，那也是一个`TypeError`。
- en: '[PRE51]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: If you provide too few arguments, that’s also a `TypeError`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你提供了太少的参数，那也是一个`TypeError`。
- en: '[PRE53]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: And if you provide an argument with a type the function can’t handle, that’s
    a `TypeError`, too.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你提供了一个类型函数无法处理的参数，那也是一个`TypeError`。
- en: '[PRE55]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: This kind of checking can be annoying when you are getting started, but it helps
    you detect and correct errors.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始时进行这种检查可能会让人烦恼，但它有助于你发现和修正错误。
- en: 2.8\. Comments[#](#comments "Link to this heading")
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.8\. 注释[#](#comments "Link to this heading")
- en: As programs get bigger and more complicated, they get more difficult to read.
    Formal languages are dense, and it is often difficult to look at a piece of code
    and figure out what it is doing and why.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 随着程序变得越来越大和复杂，它们变得更难阅读。正式的编程语言是密集的，通常很难看一段代码就明白它在做什么以及为什么这么做。
- en: For this reason, it is a good idea to add notes to your programs to explain
    in natural language what the program is doing. These notes are called **comments**,
    and they start with the `#` symbol.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，最好在程序中添加注释，用自然语言解释程序在做什么。这些注释被称为**注释**，以`#`符号开头。
- en: '[PRE57]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'In this case, the comment appears on a line by itself. You can also put comments
    at the end of a line:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，注释会单独出现在一行上。你也可以将注释放在一行的末尾：
- en: '[PRE58]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Everything from the `#` to the end of the line is ignored—it has no effect on
    the execution of the program.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 从`#`到行末的所有内容都会被忽略——它对程序的执行没有影响。
- en: Comments are most useful when they document non-obvious features of the code.
    It is reasonable to assume that the reader can figure out *what* the code does;
    it is more useful to explain *why*.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 注释在记录代码中不明显的特性时最有用。可以合理假设读者能够弄明白*代码做了什么*；更有用的是解释*为什么*代码这么做。
- en: 'This comment is redundant with the code and useless:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这个注释与代码重复，毫无用处：
- en: '[PRE59]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'This comment contains useful information that is not in the code:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个注释包含了代码中没有的信息：
- en: '[PRE60]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Good variable names can reduce the need for comments, but long names can make
    complex expressions hard to read, so there is a tradeoff.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的变量名可以减少注释的需要，但过长的名字可能会让复杂的表达式难以阅读，因此需要做出取舍。
- en: 2.9\. Debugging[#](#debugging "Link to this heading")
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.9\. 调试[#](#debugging "Link to this heading")
- en: 'Three kinds of errors can occur in a program: syntax errors, runtime errors,
    and semantic errors. It is useful to distinguish between them in order to track
    them down more quickly.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 程序中可能发生三种类型的错误：语法错误、运行时错误和语义错误。区分它们很有用，这样可以更快地定位问题。
- en: '**Syntax error**: “Syntax” refers to the structure of a program and the rules
    about that structure. If there is a syntax error anywhere in your program, Python
    does not run the program. It displays an error message immediately.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语法错误**：“语法”是指程序的结构以及关于该结构的规则。如果程序中的任何地方存在语法错误，Python不会运行程序，而是立即显示一条错误信息。'
- en: '**Runtime error**: If there are no syntax errors in your program, it can start
    running. But if something goes wrong, Python displays an error message and stops.
    This type of error is called a runtime error. It is also called an **exception**
    because it indicates that something exceptional has happened.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行时错误**：如果程序中没有语法错误，它就可以开始运行。但如果发生错误，Python会显示一条错误信息并停止运行。这种错误被称为运行时错误，也叫做**异常**，因为它表示发生了某些异常情况。'
- en: '**Semantic error**: The third type of error is “semantic”, which means related
    to meaning. If there is a semantic error in your program, it runs without generating
    error messages, but it does not do what you intended. Identifying semantic errors
    can be tricky because it requires you to work backward by looking at the output
    of the program and trying to figure out what it is doing.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语义错误**：第三种类型的错误是“语义”错误，即与含义相关的错误。如果程序中存在语义错误，它会运行，但不会生成错误信息，而且它不会按你预期的方式工作。识别语义错误可能很棘手，因为它需要你通过查看程序的输出，反向推理出程序在做什么。'
- en: As we’ve seen, an illegal variable name is a syntax error.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，非法的变量名是语法错误。
- en: '[PRE61]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: If you use an operator with a type it doesn’t support, that’s a runtime error.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用了不支持的操作符类型，这就是一个运行时错误。
- en: '[PRE63]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Finally, here’s an example of a semantic error. Suppose we want to compute
    the average of `1` and `3`, but we forget about the order of operations and write
    this:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这里有一个语义错误的例子。假设我们想要计算`1`和`3`的平均值，但我们忽略了操作顺序，写成了这样：
- en: '[PRE65]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: When this expression is evaluated, it does not produce an error message, so
    there is no syntax error or runtime error. But the result is not the average of
    `1` and `3`, so the program is not correct. This is a semantic error because the
    program runs but it doesn’t do what’s intended.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当此表达式被求值时，它不会产生错误信息，因此没有语法错误或运行时错误。但结果不是`1`和`3`的平均值，因此程序不正确。这是一个语义错误，因为程序运行了，但没有达到预期的效果。
- en: 2.10\. Glossary[#](#glossary "Link to this heading")
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.10\. 术语表[#](#glossary "Link to this heading")
- en: '**variable:** A name that refers to a value.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**变量：** 一个代表值的名称。'
- en: '**assignment statement:** A statement that assigns a value to a variable.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**赋值语句：** 给变量赋值的语句。'
- en: '**state diagram:** A graphical representation of a set of variables and the
    values they refer to.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**状态图：** 一组变量及其引用值的图形表示。'
- en: '**keyword:** A special word used to specify the structure of a program.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**关键字：** 用来指定程序结构的特殊词语。'
- en: '**import statement:** A statement that reads a module file so we can use the
    variables and functions it contains.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**导入语句：** 读取模块文件，使我们可以使用其中的变量和函数的语句。'
- en: '**module:** A file that contains Python code, including function definitions
    and sometimes other statements.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**模块：** 一个包含Python代码的文件，包括函数定义，有时还包括其他语句。'
- en: '**dot operator:** The operator, `.`, used to access a function in another module
    by specifying the module name followed by a dot and the function name.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**点操作符：** 用于通过指定模块名称后跟点和函数名来访问另一个模块中的函数的操作符`。`。'
- en: '**evaluate:** Perform the operations in an expression in order to compute a
    value.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**求值：** 执行表达式中的操作以计算值。'
- en: '**statement:** One or more lines of code that represent a command or action.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**语句：** 一行或多行代码，表示一个命令或操作。'
- en: '**execute:** Run a statement and do what it says.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**执行：** 运行一个语句并按照它的指示操作。'
- en: '**argument:** A value provided to a function when the function is called.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**参数：** 在调用函数时提供给函数的值。'
- en: '**comment:** Text included in a program that provides information about the
    program but has no effect on its execution.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**注释：** 程序中包含的文本，提供关于程序的信息，但对程序执行没有影响。'
- en: '**runtime error:** An error that causes a program to display an error message
    and exit.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**运行时错误：** 导致程序显示错误信息并退出的错误。'
- en: '**exception:** An error that is detected while the program is running.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**异常：** 在程序运行时检测到的错误。'
- en: '**semantic error:** An error that causes a program to do the wrong thing, but
    not to display an error message.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**语义错误：** 一个错误，导致程序执行不正确，但不会显示错误信息。'
- en: 2.11\. Exercises[#](#exercises "Link to this heading")
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.11\. 练习[#](#exercises "Link to this heading")
- en: '[PRE67]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 2.11.1\. Ask a virtual assistant[#](#ask-a-virtual-assistant "Link to this heading")
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.11.1\. 向虚拟助手提问[#](#ask-a-virtual-assistant "Link to this heading")
- en: Again, I encourage you to use a virtual assistant to learn more about any of
    the topics in this chapter.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 再次鼓励你使用虚拟助手来了解本章中的任何主题。
- en: If you are curious about any of keywords I listed, you could ask “Why is class
    a keyword?” or “Why can’t variable names be keywords?”
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对我列出的任何关键字感到好奇，你可以问：“为什么class是一个关键字？”或“为什么变量名不能是关键字？”
- en: You might have noticed that `int`, `float`, and `str` are not Python keywords.
    They are variables that represent types, and they can be used as functions. So
    it is *legal* to have a variable or function with one of those names, but it is
    strongly discouraged. Ask an assistant “Why is it bad to use int, float, and str
    as variable names?”
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到，`int`、`float`和`str`不是Python的关键字。它们是代表类型的变量，也可以作为函数使用。因此，使用这些名称作为变量或函数是*合法的*，但强烈不建议这样做。可以问助手：“为什么使用int、float和str作为变量名不好？”
- en: Also ask, “What are the built-in functions in Python?” If you are curious about
    any of them, ask for more information.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以问：“Python中的内置函数有哪些？”如果你对其中的任何函数感兴趣，询问更多信息。
- en: In this chapter we imported the `math` module and used some of the variable
    and functions it provides. Ask an assistant, “What variables and functions are
    in the math module?” and “Other than math, what modules are considered core Python?”
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们导入了`math`模块，并使用了其中的一些变量和函数。可以问助手：“math模块中有哪些变量和函数？”以及“除了math，还有哪些模块是Python的核心模块？”
- en: 2.11.2\. Exercise[#](#exercise "Link to this heading")
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.11.2\. 练习[#](#exercise "Link to this heading")
- en: Repeating my advice from the previous chapter, whenever you learn a new feature,
    you should make errors on purpose to see what goes wrong.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 重申我在上一章中的建议，每当你学习一个新特性时，你应该故意犯一些错误，看看会发生什么。
- en: We’ve seen that `n = 17` is legal. What about `17 = n`?
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已经看到`n = 17`是合法的。那么`17 = n`呢？
- en: How about `x = y = 1`?
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x = y = 1` 怎么样？'
- en: In some languages every statement ends with a semi-colon (`;`). What happens
    if you put a semi-colon at the end of a Python statement?
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一些编程语言中，每条语句都以分号（`;`）结尾。如果在Python语句末尾加上分号，会发生什么？
- en: What if you put a period at the end of a statement?
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在语句末尾加一个句点，会发生什么？
- en: What happens if you spell the name of a module wrong and try to import `maath`?
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你拼写模块名错误并尝试导入`maath`，会发生什么？
- en: 2.11.3\. Exercise[#](#id1 "Link to this heading")
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.11.3\. 练习[#](#id1 "链接到此标题")
- en: 'Practice using the Python interpreter as a calculator:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 练习使用Python解释器作为计算器：
- en: '**Part 1.** The volume of a sphere with radius \(r\) is \(\frac{4}{3} \pi r^3\).
    What is the volume of a sphere with radius 5? Start with a variable named `radius`
    and then assign the result to a variable named `volume`. Display the result. Add
    comments to indicate that `radius` is in centimeters and `volume` in cubic centimeters.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**第1部分。** 半径为\(r\)的球体的体积是\(\frac{4}{3} \pi r^3\)。半径为5的球体体积是多少？首先创建一个名为`radius`的变量，然后将结果赋给一个名为`volume`的变量，并显示结果。添加注释，表示`radius`的单位是厘米，`volume`的单位是立方厘米。'
- en: '**Part 2.** A rule of trigonometry says that for any value of \(x\), \((\cos
    x)^2 + (\sin x)^2 = 1\). Let’s see if it’s true for a specific value of \(x\)
    like 42.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**第2部分。** 一条三角学定理说，对于任何值\(x\)，\((\cos x)^2 + (\sin x)^2 = 1\)。让我们看看对于特定值\(x
    = 42\)，它是否成立。'
- en: Create a variable named `x` with this value. Then use `math.cos` and `math.sin`
    to compute the sine and cosine of \(x\), and the sum of their squared.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`x`的变量并赋值。然后使用`math.cos`和`math.sin`计算\(x\)的正弦和余弦，以及它们平方的和。
- en: The result should be close to 1\. It might not be exactly 1 because floating-point
    arithmetic is not exact—it is only approximately correct.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应该接近1。它可能不是精确的1，因为浮点运算并不完全准确——它只是近似正确的。
- en: '**Part 3.** In addition to `pi`, the other variable defined in the `math` module
    is `e`, which represents the base of the natural logarithm, written in math notation
    as \(e\). If you are not familiar with this value, ask a virtual assistant “What
    is `math.e`?” Now let’s compute \(e^2\) three ways:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**第3部分。** 除了`pi`，在`math`模块中定义的另一个变量是`e`，它代表自然对数的底数，数学符号表示为\(e\)。如果你不熟悉这个值，可以问虚拟助手“`math.e`是什么？”现在让我们通过三种方法计算\(e^2\)：'
- en: Use `math.e` and the exponentiation operator (`**`).
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`math.e`和指数运算符(`**`)。
- en: Use `math.pow` to raise `math.e` to the power `2`.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`math.pow`将`math.e`的值提高到`2`的幂。
- en: Use `math.exp`, which takes as an argument a value, \(x\), and computes \(e^x\).
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`math.exp`，它接受一个参数\(x\)，并计算\(e^x\)。
- en: You might notice that the last result is slightly different from the other two.
    See if you can find out which is correct.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到，最后一个结果与其他两个略有不同。看看你能不能找出哪个是正确的。
- en: '[Think Python: 3rd Edition](https://allendowney.github.io/ThinkPython/index.html)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '[《Think Python: 第三版》](https://allendowney.github.io/ThinkPython/index.html)'
- en: Copyright 2024 [Allen B. Downey](https://allendowney.com)
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 版权 2024 [Allen B. Downey](https://allendowney.com)
- en: 'Code license: [MIT License](https://mit-license.org/)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 代码许可证：[MIT许可证](https://mit-license.org/)
- en: 'Text license: [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 文本许可证：[知识共享署名-非商业性使用-相同方式共享 4.0 国际版](https://creativecommons.org/licenses/by-nc-sa/4.0/)
