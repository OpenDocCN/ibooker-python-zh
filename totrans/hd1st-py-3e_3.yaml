- en: 'Chapter 3\. Lists of Numbers: *Processing List Data*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。数字列表：*处理列表数据*
- en: '![Image](assets/ch02-1-01.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-1-01.png)'
- en: '**The more code you write, the better you get. It’s that simple.** In this
    chapter, you continue to create Python code to help the Coach. You learn how to
    **read** data from a Coach-supplied data **file**, slurping its lines into a **list**,
    one of Python’s most-powerful built-in **data structures**. As well as creating
    lists from the file’s data, you’ll also learn how to create lists from scratch,
    **growing** your list **dynamically** as needs be. And you’ll process lists using
    one of Python’s most popular looping constructs: the **for** loop. You’ll **convert**
    values from one data format to another, and you’ll even make a new best friend
    (your very own Python **BFF**). You’ve had your fill of coffee and pie, so it’s
    time to roll up your sleeves and get back to work.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**你写的代码越多，你就会变得越好。这就是这么简单。** 在本章中，您将继续创建Python代码以帮助教练。您将学习如何从教练提供的数据文件中**读取**数据，将其行读入一个Python最强大的内置**数据结构**之一：列表。除了从文件的数据创建列表外，您还将学习如何根据需要**动态**扩展您的列表。并且您将使用Python最受欢迎的循环结构之一：**for**循环来处理列表。您将从一种数据格式**转换**为另一种，并且甚至会结交新朋友（您自己的Python**BFF**）。您已经喝了足够的咖啡和吃了足够的派，所以现在是时候卷起袖子，回到工作中去了。'
- en: 'Task #2: Process the data in the file'
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务#2：处理文件中的数据
- en: 'With Task #1 complete, it’s time to move onto Task #2\. There’s a bit of work
    to do but, as with the previous chapter’s activities, you can approach things
    bit-by-bit as detailed in the last chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 完成任务#1后，是时候转移到任务#2了。还有一些工作要做，但是，与上一章的活动一样，你可以像上一章详细描述的那样一点一点来处理：
- en: Read the lines from the file
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取文件中的行
- en: Ignore the second line
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 忽略第二行
- en: Break the first line apart by “,” to produce a list of times
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过“,”拆分第一行以生成时间列表
- en: Take each of the times and convert them to a number from the “mins:secs.hundredths”
    format
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个时间转换为“分：秒.百分之几”的数字格式
- en: Calculate the average time, then convert it back to the “mins:secs.hundredths”
    format (for display purposes)
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算平均时间，然后将其转换回“分：秒.百分之几”的格式（用于显示目的）
- en: 'Display the variables from Task #1, then the list of times and the calculated
    average from Task #2'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示来自任务#1的变量，然后显示来自任务#2的时间列表和计算出的平均值
- en: '![Image](assets/ch02-2-02.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-2-02.png)'
- en: '**It’s time to get to work.**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**是时候开始工作了。**'
- en: You won’t be done by the time the Coach is finished his warm-up, but you’ll
    definitely make progress by the end of today’s swim session.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当教练完成热身时，你可能还没有完成，但到今天的游泳课结束时，你肯定会有所进展。
- en: Let’s get started by grabbing a copy of this chapter’s data before learning
    how Python reads data from a file.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习Python如何从文件中读取数据之前，请先获取本章数据的副本。
- en: Grab a copy of the Coach’s data
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取教练的数据副本
- en: 'There’s no point learning how to read data from a file if you have no data
    to work with. So, head on over to this book’s support website and grab the latest
    copy of the Coach’s data files. There are 61 individual data files packaged as
    a ZIP archive. Grab a copy from here::'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有数据可以处理，学习如何从文件中读取数据是没有意义的。因此，请访问本书的支持网站，并获取教练数据文件的最新副本。有61个单独的数据文件打包成一个ZIP归档文件。从这里获取一份副本：
- en: '![Image](assets/ch02-3-01.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-3-01.png)'
- en: Once your download completes, unzip the file then copy the resulting swimdata
    folder into your `Learning` folder. This ensures the code which follows can find
    the data as it’ll be in a known place.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，请解压缩文件，然后将生成的swimdata文件夹复制到您的`Learning`文件夹中。这样可以确保接下来的代码能够在已知位置找到数据。
- en: 'Each file in the `swimdata` folder contains the recorded times for one swimmer’s
    attempts at a specific youth distance/stroke pairing. Recall the data file from
    the start of the previous chapter which shows Darius’s under-13 times for the
    100m fly:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: swimdata文件夹中的每个文件都包含一个游泳者在特定青少年距离/泳姿组合上的记录时间。回顾前一章开头显示的数据文件，显示了达里乌斯在100米蝶泳的13岁以下比赛中的时间：
- en: '![Image](assets/ch02-3-02.png)![Image](assets/ch02-3-03.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-3-02.png)![图片](assets/ch02-3-03.png)'
- en: '**Yes, it does.**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**是的，确实。**'
- en: There’s a BIF called **open** which can work with files, opening them for reading,
    writing, appending, or any combination of the above.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个称为**open**的BIF可以处理文件，打开它们以供读取、写入、追加或以上任意组合。
- en: The **open** BIF is powerful on it’s own, but it shines when combined with Python’s…
    em, eh… **with** statement.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**open** BIF本身很强大，但与Python的...嗯... **with**语句结合使用时效果更佳。'
- en: The open BIF works with files
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: open BIF可以处理文件
- en: Whether your file contains textual or binary data, the **open** BIF can open
    the file to read, write, or append data to/from it. By default, **open** reads
    from a text file, which is perfect as that’s what you want to do with the Darius’s
    data file.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您的文件包含文本数据还是二进制数据，**open** BIF 都可以打开文件以从中读取、写入或附加数据。默认情况下，**open** 从文本文件读取，这非常完美，因为这正是您想要对
    Darius 的数据文件进行的操作。
- en: '![Image](assets/ch02-4-01.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-4-01.png)'
- en: 'You can call **open** directly in your code, opening a named file, processing
    its data, then closing the file when you’re done. This open-process-close pattern
    is very common, regardless of the programming language you use. In fact, Python
    has a language statement which makes working with the open-process-close pattern
    especially convenient: the **with** statement.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接在代码中调用 **open**，打开一个命名文件，处理其数据，然后在完成时关闭文件。无论您使用哪种编程语言，这种打开-处理-关闭的模式都非常常见。事实上，Python
    有一种语言语句可以使得处理打开-处理-关闭模式特别方便：**with** 语句。
- en: 'Although there’s a bit more to the **with** statement than initially meets
    the eye, there’s only one thing that you need to know about it right now: If you
    open your file with **with**, Python arranges to *automatically* close your file
    when you’re done, regardless of what happens during whatever processing you perform
    on the file.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 **with** 语句有比最初看到的更多，但现在您只需要知道其中一件事：如果您使用 **with** 打开文件，Python 会 *自动* 在完成时关闭文件，无论在文件上执行任何处理时发生了什么。
- en: '![Image](assets/ch02-4-02.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-4-02.png)'
- en: Note
  id: totrans-30
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注
- en: '**As always, follow along.**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**像往常一样，跟着做。**'
- en: Not much code, but there’s lots happening...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码不多，但事情很多...
- en: 'The code is not very long, but – as the annotations at the bottom of the last
    page indicate – there’s a lot going on:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 代码不算很长，但是——正如上一页底部的注解所示——有很多事情发生：
- en: '![Image](assets/ch02-6-01.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-6-01.png)'
- en: 'Let’s highlight three important take-aways:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们强调三个重要要点：
- en: '![Images](assets/1-circle.png) **The with statement opens the file** *before*
    **its code block runs.**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](assets/1-circle.png) **with 语句在其代码块运行 *前* 打开文件。**'
- en: You may well be asking “Which code block?”, and you’d be right to. We haven’t
    told you yet, but the **with** statement’s code block is all the code indented
    under it. In this case, the code block is only one line long and that’s OK (code
    blocks can be of any length).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会问“哪个代码块？”您是对的。我们还没有告诉您，但 **with** 语句的代码块是所有缩进在其下的代码。在这种情况下，代码块只有一行，这没问题（代码块可以是任意长度）。
- en: Note
  id: totrans-38
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注
- en: '**If you are coming to Python from one of those programming languages which
    uses curly-braces to delimit blocks of code, using indentation in this way may
    unnerve you. Don’t let it, as it’s really not that big a deal.**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果您是从使用花括号界定代码块的编程语言中转到 Python，那么以这种方式使用缩进可能会让您感到不安。不要让它困扰您，因为这真的不是什么大不了的事。**'
- en: '![Image](assets/ch02-6-02.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-6-02.png)'
- en: '**It not that we don’t want to talk about indentation.**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**不是我们不想谈论缩进。**'
- en: It’s just we feel there’s much more to Python than its use of indentation (or,
    more correctly, *whitespace*) to delimit code blocks. Yes, it’s an important aspect
    of the language, but it’s something most Python newbies get used to quickly. When
    we need to, we’ll call it out, otherwise we’ll just get on with things. And with
    that said, let’s get back to the take-aways.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们觉得 Python 不仅仅是使用缩进（或者更准确地说，*空白*）来界定代码块。是的，这是语言的一个重要方面，但大多数 Python 新手很快就会习惯。当我们需要的时候，我们会提到它，否则我们会继续进行。说了这么多，让我们回到要点上。
- en: '![Images](assets/2-circle.png) **The with statement closes the file** *after*
    **its code block runs.**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](assets/2-circle.png) **with 语句在其代码块运行 *后* 关闭文件。**'
- en: This is a cool feature, as we’d forgotten to do this. It’s nice to know the
    **with** statement has your back, tidying up after your code block executes.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很酷的功能，因为我们忘记做这件事了。知道 **with** 语句在你的代码块执行完毕后会收拾残局，这很好。
- en: '![Images](assets/3-circle.png) **Two variables are created by the code:** `df`
    **and** `data`**.**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](assets/3-circle.png) **代码创建了两个变量：** `df` **和** `data`**。**'
- en: The `df` variable refers to a *file object* created by the successful execution
    of the **open** BIF. The `data` variable refers to the list of lines read from
    the `df` file object by the **readlines** method. Both variables continue to exist
    after the code block ends, although the `df` variable now refers to a *closed*
    file object.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`df`变量指的是通过成功执行**open** BIF所创建的*文件对象*。`data`变量则指的是通过**readlines**方法从`df`文件对象读取的行列表。尽管`df`变量现在指向一个*关闭*的文件对象，但这两个变量在代码块结束后仍然存在。'
- en: Variables are created dynamically, as needed
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量会根据需要动态创建
- en: The `df` and `data` variables were created as a result of assignment. Although
    it’s easy to see how `data` came into being, thanks to the use of the assignment
    operator (`=`), it’s less clear what’s going on with `df`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`df`和`data`变量都是通过赋值创建的。尽管我们很容易看出`data`是如何生成的，多亏了赋值操作符（`=`），但`df`的情况并不那么清楚。'
- en: '![Image](assets/ch02-7-01.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-7-01.png)'
- en: '**The key word is “as”.**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**关键词是“as”。**'
- en: 'Thanks to that **with**, the **as** keyword takes the **open** BIF’s return
    value and assigns it to the identified variable name, which is `df` in your code.
    It’s as if this code ran:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了那个**with**语句，**as**关键字获取了**open** BIF的返回值，并将其赋给了你代码中标识的变量名`df`。这段代码就好像运行了这样一段代码：
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The **as** keyword, together with **with**, does the same thing (and looks nicer,
    too).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**as**关键字和**with**一起做了同样的事情（而且看起来更好）。'
- en: 'Let’s take a closer look at what `df` is, as well as learn a bit about what
    it can do:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看`df`是什么，以及了解一下它能做什么：
- en: '![Image](assets/ch02-7-02.png)![Image](assets/ch02-7-03.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-7-02.png)![图片](assets/ch02-7-03.png)'
- en: It’s not that file objects aren’t exciting...
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并不是说文件对象就没有吸引力...
- en: 'It’s just, in this case, the file object is merely a means to an end: loading
    the file’s lines into the `data` variable. So, what’s `data` and what can you
    do with it?'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 只是，在这种情况下，文件对象仅仅是一个手段：将文件的行加载到`data`变量中。那么，`data`是什么，你可以用它做什么？
- en: '![Image](assets/ch02-8-01.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-8-01.png)'
- en: 'You already know (from the previous chapter) that Python lists understand the
    square bracket notation. Before you get to that, let’s take a look at what `data`
    contains:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经知道（来自前一章），Python列表理解方括号表示法。在你深入研究它之前，让我们看看`data`包含什么：
- en: Note
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**You may have thought about executing the combo mambo on “data” here, but
    you don’t need to just yet. For now, all you need is the square bracket notation.**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**你可能已经考虑在这里对“data”执行组合曼博，但现在你还不需要。目前，你只需要方括号表示法。**'
- en: '![Image](assets/ch02-8-02.png)![Image](assets/ch02-8-03.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-8-02.png)![图片](assets/ch02-8-03.png)'
- en: '**Don’t forget to press Shift+Enter to execute code cells.**'
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**不要忘记按Shift+Enter来执行代码单元。**'
- en: '![Image](assets/ch02-9-01.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-9-01.png)'
- en: '**Yes, with some help from “with”.**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**是的，借助“with”语句的一点帮助。**'
- en: Despite being a one-line code block, a lot’s happening here.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这只是一个单行代码块，但这里发生了很多事情。
- en: 'Not only has your list been created, assigned to your `data` variable *and*
    populated with the data contained within the swimmer’s file, but that `with` statement
    has managed to complete the first two subtasks for Task #2\. How *cool* is that?'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅已经创建了列表，并将其分配给了你的`data`变量，并填充了包含在游泳者文件中的数据，而且那个`with`语句已经完成了任务＃2的前两个子任务。这是多么*酷*啊！
- en: Take a look (on the next page).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下（在下一页）。
- en: 'Work has started on Task #2'
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 已经开始处理任务＃2
- en: 'Those two lines of code pack a punch. Here they are again:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这两行代码产生了很大的影响。这里再次列出它们：
- en: '![Image](assets/ch02-10-01.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-10-01.png)'
- en: 'The data value in the first slot in the `data` list is a string representing
    the swimmer’s times:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`data`列表中第一个位置的数据值是一个表示游泳者时间的字符串：'
- en: '![Image](assets/ch02-10-02.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-10-02.png)'
- en: 'You can safely ignore anything else in the file, as the data you need is in
    the above string. It’s time for a couple checkmarks to indicate your progress
    with Task #2:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以安全地忽略文件中的其他内容，因为你所需的数据就在上面的字符串中。现在是时候用一些勾号来表示你在任务＃2上的进展了：
- en: '![Image](assets/ch02-10-03.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-10-03.png)'
- en: 'The third sub-task should not be hard for anyone who has spent any amount of
    time working with Python’s string technology. As luck would have it, you’ve just
    worked through the string material in the previous chapter, so you’re all set
    to have a go. But before you get to that sub-task, we need to talk a little about
    one specific part of that **with** statement: the **colon**.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何已经花费一定时间使用 Python 字符串技术的人来说，第三个子任务不应该太难。碰巧，你刚刚在上一章节中处理了字符串材料，所以你已经准备好了。但在你处理该子任务之前，我们需要讨论**with**语句的一个特定部分：冒号。
- en: Your new best friend, Python’s colon
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的新死党，Python 的冒号
- en: The colon (`**:**`) indicates a code block is about to *begin*.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 冒号（`**:**`）表示即将*开始*一个代码块。
- en: Unlike a lot of other programming languages, Python does not use curly braces
    (`**{**` and `**}**`) to delimit blocks. Instead Python uses **indentation** (or,
    to be more accurate, *whitespace*). In fact, in Python, curly braces delimited
    data, *not* code.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多其他编程语言不同，Python 不使用花括号（`**{**` 和 `**}**`）来界定代码块。相反，Python 使用缩进（或更确切地说是*空白*）。事实上，在
    Python 中，花括号界定数据，*不是*代码。
- en: A code block in Python ends when the indentation ends.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，代码块在缩进结束时结束。
- en: In your **with** statement, the block contains only one line of code, but it
    could potentially contain any number of lines of code. Code indented to the same
    level as the immediately preceding line of code belongs to the *same* block.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的**with**语句中，该块只包含一行代码，但它可能包含任意数量的代码行。缩进到与前一行相同级别的代码属于*同一*代码块。
- en: The use of the colon is critical here (which is why it’s your new best friend).
    Like in real life, if you forget your best friend, bad things happen. If you forget
    the colon at the end of that line, Python refuses to run your code!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 冒号在这里至关重要（这就是为什么它是你的新死党）。就像现实生活中，如果你忘记了你的好朋友，坏事就会发生。如果你忘记了那行末尾的冒号，Python 就拒绝运行你的代码！
- en: 'Think of the colon and indentation as *going together*: you can’t have one
    without the other.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 把冒号和缩进看作*相辅相成*：没有其中一个，另一个也无从谈起。
- en: '**FYI: the Python docs refer to a “code block” as a “suite”.**'
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**FYI：Python 文档将“代码块”称为“套件”。**'
- en: Note
  id: totrans-85
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**We think this is weird, too.**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们也觉得这很奇怪。**'
- en: '![Image](assets/ch02-11-02.png)![Image](assets/ch02-13-03.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/ch02-11-02.png)![Image](assets/ch02-13-03.png)'
- en: '**Yes, to both questions.**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**是的，两个问题都是。**'
- en: Yes, we did indeed introduce strings in the previous chapter and, yes, we’re
    concentrating on lists in this one.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我们确实在上一章介绍了字符串，而且，是的，我们现在专注于列表。
- en: Recall the **split** method produces a list from a string, which is precisely
    why you need to use it now. If your `times` variable, above, isn’t a list, you’re
    likely doing something wrong.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下**split**方法会从字符串生成一个列表，这正是你现在需要使用它的原因。如果你上面的`times`变量不是一个列表，你可能做错了什么。
- en: When you’re ready, flip the page to see the code we came up with.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当你准备好了，请翻页看我们想出来的代码。
- en: '![Image](assets/ch02-14-03.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/ch02-14-03.png)'
- en: That was almost too easy
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那几乎太容易了
- en: With your prior experience of working with strings from the previous chapter,
    we’re hoping that most recent *Sharpen* wasn’t too taxing.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你在上一章节处理字符串的先前经验，我们希望最近的*Sharpen*不会太费力。
- en: 'It is important to call **strip** *before* **split**, producing a new list
    from the data value in the `data`’s first slot (`data[0]`). In fact, your latest
    chain code is very similar to the code from the previous chapter:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用**strip**之前调用*split*非常重要，这会从`data`的第一个槽中的数据值产生一个新列表（`data[0]`）。事实上，你的最新链式代码与上一章的代码非常相似：
- en: '![Image](assets/ch02-15-01.png)![Image](assets/ch02-15-02.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/ch02-15-01.png)![Image](assets/ch02-15-02.png)'
- en: With the result of your latest chain assigned to the `times` variable, you’ve
    completed sub-task (c). It’s time for another checkmark.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 将最新链式的结果赋给`times`变量后，你已完成子任务（c）。现在是另一个复核的时候。
- en: '![Image](assets/ch02-15-03.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/ch02-15-03.png)'
- en: Pause to review this task’s code
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暂停一下，回顾一下这个任务的代码
- en: 'Here’s how you can combine the code so far in a single code cell within VS
    Code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何在 VS Code 中将迄今为止的代码合并到一个单独的代码单元格中：
- en: '![Image](assets/ch02-16-01.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/ch02-16-01.png)'
- en: If you go ahead and try both of these `with` statements in your notebook you’ll
    learn that both populate the list `times` refers to with the same collection of
    strings. So, why not use the two-line version of the code as opposed to the three-line
    version? After all, just like with the `parts` list in the previous chapter, the
    `data` list is no longer needed once it’s been used that one time...
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在笔记本中尝试这两个`with`语句，你会发现它们都用相同的字符串集合填充了`times`引用的列表。那么，为什么不使用两行版本的代码，而不是三行版本呢？毕竟，就像前一章中的`parts`列表一样，一旦`data`列表被使用一次后就不再需要了……
- en: '![Image](assets/ch02-16-02.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-16-02.png)'
- en: '**No, it’s not hard to read. It’s a nightmare.**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**不，这不难阅读。这是一场噩梦。**'
- en: Three methods are chained here, with the first one creating a list, from which
    you take the first slot’s data (using the square bracket notation), then you strip
    it before splitting it... but, what does “it” refer to again?!?
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这里链了三种方法，第一种方法创建了一个列表，从中取出第一个槽的数据（使用方括号表示法），然后剥离它再拆分它……但是，“它”再次指的是什么呢？！？
- en: This single line of code is hard to read, understand, explain, *and* maintain.
    We pity the poor programmer asked to “fix” this code at some point in the future
    (who, most likely, will be *you*).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行代码很难阅读、理解、解释*和*维护。我们同情未来某个时刻被要求“修复”此代码的可怜程序员（很可能是*你*）。
- en: Converting a time string into a time value
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将时间字符串转换为时间值
- en: 'After the code from the previous page runs, the `times` variable refers to
    a list of strings:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一页的代码运行之后，`times`变量引用的是一个字符串列表：
- en: '![Image](assets/ch02-17-01.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-17-01.png)'
- en: The values in each of the slots in the `times` list certainly look like swim
    times, but they are not. They are strings. To perform any numeric calculation
    on this list, such as working out an average, these strings need to be converted
    into numeric values.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`times` 列表中的每个槽中的值看起来确实像是游泳时间，但实际上并不是。它们是字符串。要对此列表执行任何数值计算，比如计算平均值，需要将这些字符串转换为数值。'
- en: Let’s take a closer look at just on value (the first). If you can come up with
    a strategy for converting this first time, you can then apply it to the rest of
    the list.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看只有一个值（第一个）。如果你能想出一个转换这个第一个时间的策略，然后就可以将其应用于列表的其余部分。
- en: '![Image](assets/ch02-17-02.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-17-02.png)'
- en: Note
  id: totrans-113
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**There’s more than one way to do this, so don’t worry if what you think up
    isn’t the same method as ours (which is detailed over the page).**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**有多种方法可以做到这一点，所以如果你的想法与我们的不同也不用担心（我们的方法在后面详细说明）。**'
- en: Convert the times to hundredths of seconds
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将时间转换为百分之一秒
- en: 'At the moment, all the swim times are *strings* even though our brains see
    them as *times*. Not so for our computers, though (let alone Python). Our digital
    buddies need a little help with the conversion, and here’s how we’d suggest it
    can be done:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，尽管我们的大脑把它们看作*时间*，所有游泳时间都是*字符串*。但我们的计算机不是这样的（更不用说 Python 了）。我们的数字朋友们在转换时需要一点帮助，以下是我们建议的方法：
- en: '![Image](assets/ch02-18-01.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-18-01.png)'
- en: Turning this conversion strategy into Python code is *remarkably* straightforward.
    Let’s take a look.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个转换策略转化为 Python 代码是*非常*简单的。我们来看一下。
- en: To hundredths of seconds with Python
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用 Python 转换为百分之一秒
- en: We went all out with that visual on the previous page, and converting the visual’s
    steps to Python code is a near one-for-one match. The code shown below performs
    the calculation for the first swim time taken from your `times` list, with the
    code typed into a single cell in the `Average.ipynb` notebook.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一页用了很多视觉效果，并将视觉的步骤转换为 Python 代码几乎是一对一的匹配。下面显示的代码执行了从你的`times`列表中获取的第一个游泳时间的计算，代码输入到了`Average.ipynb`笔记本的单个单元格中。
- en: '![Image](assets/ch02-19-01.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-19-01.png)'
- en: To help keep you straight, we’ve added some comments to this code. When Python
    sees the `#` character, it *ignores* everything which follows the `#` until the
    end of the current line. (Note how VS Code helpfully displays the comments in
    **green**).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助你弄清楚，我们在这段代码中添加了一些注释。当 Python 遇到 `#` 字符时，它会*忽略*直到当前行结束的所有内容（注意 VS Code 如何友好地显示**绿色**的注释）。
- en: Type this code into your notebook, and don’t feel guilty if you decide to exclude
    the comments (don’t worry, we won’t tell). We put them in to match up the code
    with the conversion steps from the preview page’s visual.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 将这段代码输入到你的笔记本中，如果你决定排除注释也不要感到内疚（别担心，我们不会告诉）。我们把它们放在那里是为了与预览页面的转换步骤的代码匹配起来。
- en: '![Image](assets/ch02-19-02.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-19-02.png)'
- en: With this code typed into an empty cell in your notebook, press **Shift+Enter**
    to run it. The value `8795` appears on screen. Sweet.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 将这段代码输入笔记本中的空单元格，按下**Shift+Enter**来运行它。屏幕上显示`8795`。棒极了。
- en: '![Image](assets/ch02-20-01.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-20-01.png)'
- en: '**If you can convert one swim time...**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果您可以转换一个游泳时间...**'
- en: You can convert them all. And, there’s no extra credit for guessing you need
    a loop here.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将它们全部转换。并且，在此处使用循环是没有额外学分的明智选择。
- en: Like most programming languages, Python provides many ways to loop, with the
    **for** loop being a favorite. Let’s look at a simple loop which takes each of
    the strings from the `times` list and displays them on screen.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 像大多数编程语言一样，Python提供了许多循环方式，**for**循环是其中的一个最爱。让我们来看一个简单的循环，它从`times`列表中获取每个字符串并显示在屏幕上。
- en: '![Image](assets/ch02-20-02.png)![Image](assets/ch02-21-01.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-20-02.png)![图片](assets/ch02-21-01.png)'
- en: '**Cool, isn’t it?**'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**酷，不是吗？**'
- en: The **for** loop is smart enough to know all about the length of the list it
    is processing.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**for**循环足够聪明，可以知道正在处理的列表的全部长度。'
- en: There’s always a temptation to use the **len** BIF to work out how big your
    list is before it’s looped over, but with **for** this is an unnecessary step.
    The **for** loop starts with the first value in the list, takes each value in
    order, processes the value, then moves onto the next. When the list is exhausted,
    the **for** loop terminates.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**len** BIF来计算列表在被循环前有多大的诱惑总是存在的，但对于**for**来说这是一个不必要的步骤。**for**循环从列表中的第一个值开始，按顺序获取每个值，处理该值，然后移动到下一个值。当列表耗尽时，**for**循环终止。
- en: This is the sort of magic we love.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们喜欢的魔法。
- en: '![Image](assets/ch02-22-03.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-22-03.png)'
- en: '**Python does indeed support while.**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python确实支持while。**'
- en: But, the **while** loop in Python is used much less than an equivalent **for**.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在Python中，**while**循环的使用远少于等效的**for**循环。
- en: Before getting to our solution code for the above exercise, let’s take a moment
    to compare **for** loops against **while** loops.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决上述练习的解决方案代码之前，让我们花一点时间比较**for**循环和**while**循环。
- en: The gloves are off... for loops vs. while loops
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比赛开始... for循环对抗while循环
- en: 'Here’s the **for** loop from earlier, together with its output:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这是之前的**for**循环，以及它的输出：
- en: '![Image](assets/ch02-23-01.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-23-01.png)'
- en: 'And here’s an equivalent **while** loop which does exactly the same thing:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个完全相同的**while**循环：
- en: '![Image](assets/ch02-23-02.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-23-02.png)'
- en: Not only is the **while** loop’s code twice the number of lines as the **for**
    loop, but look at all the extra stuff you have to concern yourself with! There’s
    so many places where the **while** loop can go wrong, unlike the **for** loop.
    It’s not that **while** loops shouldn’t be used, just remember to reach for the
    **for** loop *first* in most cases.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅**while**循环的代码行数是**for**循环的两倍，而且看看所有你需要关注的额外内容！与**for**循环不同，**while**循环有很多地方可能会出错。并不是说**while**循环不应该使用，只是在大多数情况下，记得先选择**for**循环。
- en: You’re motoring now!
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现在您已经行驶如飞！
- en: 'You are now past the mid-point of your sub-tasks for Task #2:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经完成了任务＃2的子任务的中点：
- en: '![Image](assets/ch02-25-01.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-25-01.png)'
- en: With the first part of sub-task (e), you have choices.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在任务＃2的子任务(e)的第一部分中，您有选择。
- en: '![Image](assets/ch02-25-02.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-25-02.png)'
- en: '**Either approach works.**'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '*任何一种方法都可以。*'
- en: However, if you think the converted times might be needed later, perhaps creating
    a new list of converted times is the way to go...
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您认为转换后的时间可能会在以后需要，也许创建一个新的转换时间列表是更好的选择...
- en: What do you think?
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 您认为呢？
- en: '![Image](assets/ch02-26-01.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-26-01.png)'
- en: Let’s keep a copy of the conversions
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们保留一份转换的副本
- en: 'To be honest, *either* of the two approaches from the bottom of the last page
    would work for the first part of sub-task (e) of Task #2: *Calculate the average
    time*. However, we’re guessing those converted values will be needed at least
    once more, so best if we put them in another list as we perform the conversions.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 老实说，*任何一个*来自上一页底部的两种方法都可以用于任务＃2的子任务(e)的第一部分：*计算平均时间*。但是，我们猜想这些转换后的值至少还需要使用一次，所以最好在执行转换时将它们放入另一个列表中。
- en: To do this, you need to learn a bit more about lists. Specifically, how to create
    a new, empty list, and how to incrementally add data values to your list as you
    iterate over the `times` list.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，您需要学习更多关于列表的知识。具体来说，如何创建一个新的空列表，并且在迭代`times`列表时逐步添加数据值。
- en: Creating a new, empty list
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的空列表
- en: 'Step 1: think up a meaningful variable name for your list. Step 2: assign an
    empty list to your new variable name.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤1：为你的列表想出一个有意义的变量名。步骤2：将空列表分配给你的新变量名。
- en: 'Let’s call your new list `converts`. Here’s how to perform Step 1 and 2 in
    a single line of code:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们称你的新列表为`converts`。以下是如何在一行代码中执行步骤1和2：
- en: '![Image](assets/ch02-26-02.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-26-02.png)'
- en: 'Recall that the `type` BIF is used to determine what *type* a variable refers
    to. A quick call to `type` confirms you’re working with a list, and a call to
    the `len` BIF confirms your new list is *empty*:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`type` BIF 用于确定变量引用的*类型*。快速调用`type`确认你正在使用一个列表，并调用`len` BIF 确认你的新列表是*空的*：
- en: '![Image](assets/ch02-26-03.png)![Image](assets/ch02-26-04.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-26-03.png)![图片](assets/ch02-26-04.png)'
- en: '**Can you remember what you need to do to display your new list’s built-in
    methods?**'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**你还记得如何显示你的新列表的内置方法吗？**'
- en: Displaying a list of your list’s methods
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示你的列表方法列表
- en: It’s combo mambo time!
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是组合舞曲的时候了！
- en: As with any object in Python, the **print dir** combination lists the object’s
    built-in attributes and methods. And as everything in Python is an object, lists
    are objects too!
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 Python 中的任何对象一样，**print dir** 组合会列出对象的内置属性和方法。而在 Python 中，一切皆为对象，列表也是对象！
- en: '![Image](assets/ch02-27-01.png)![Image](assets/ch02-27-02.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-27-01.png)![图片](assets/ch02-27-02.png)'
- en: 'The first non-dunder method name is **append**. You can likely guess what it
    does, but let’s use the **help** BIF to confirm:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个非双下划线方法名称是**append**。你可能猜到它的作用，但让我们使用**help** BIF来确认：
- en: '![Image](assets/ch02-27-03.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-27-03.png)'
- en: Ah ha!
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 啊哈！
- en: That final line of output (*“Append object to the end of the list.”*) is all
    you need to know, even though it’s tempting to take some time to experiment with
    those other methods, some of which sound cool. But, let’s not do that right now.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行输出（*“将对象附加到列表末尾。”*）就是你需要知道的一切，即使尝试花时间进行实验也是很诱人的，其中一些方法听起来很酷。但是，现在不要这样做。
- en: Note
  id: totrans-172
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Of course, if you feel the need to experiment with those other methods, don’t
    let us stop you.**'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**当然，如果你想尝试其他方法，我们不会阻止你。**'
- en: Let’s stick to the task of building a new list of converted swim time values
    as you go.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续完成构建转换后游泳时间值列表的任务。
- en: '![Image](assets/ch02-28-01.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-28-01.png)'
- en: '**No, you do not need to worry.**'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**不，你不需要担心。**'
- en: In the previous chapter, we made a big deal about lists in Python being *like*
    arrays in other programming languages. This let us introduce the use of the square
    bracket notation with lists, which is a common technique when working with arrays
    *and* lists.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们非常强调 Python 中的列表与其他编程语言中的数组*相似*。这使得我们可以介绍使用方括号标记与列表一起工作的常见技术*和*方法。
- en: However, *unlike* with arrays, where you typically have to say how big your
    array is likely to get (e.g., 1000 slots) and what type of data it’s going to
    contain (e.g., integers), there’s no need to declare either of these with your
    Python lists.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，*与*数组不同，在那里通常需要声明数组可能会变得多大（例如，1000个插槽），以及它将包含哪种类型的数据（例如整数），在 Python 列表中无需声明这两者。
- en: Python lists are *dynamic*, which means they grow as needed (so there’s no need
    to pre-declare the number of slots beforehand). And Python lists don’t contain
    data values, they contain **object references**, so you can put any data of any
    type in a Python list. You can even mix’n’match types.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Python 列表是*动态的*，这意味着它们按需增长（因此无需预先声明插槽的数量）。Python 列表不包含数据值，它们包含**对象引用**，因此你可以在
    Python 列表中放置任何类型的任何数据。你甚至可以混合搭配类型。
- en: It’s time to calculate the average
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现在是计算平均值的时候了
- en: 'You don’t need to be a programmer to know how to calculate an average when
    given a list of numbers. The code is not difficult, but this fact alone does not
    justify your decision to actually write it. When you happen upon a coding need
    which feels like someone else may have already coded it, ask yourself this question:
    *I wonder if there’s anything in the Python Standard Library which might help?*'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要成为程序员才能知道如何在给定数字列表的情况下计算平均值。代码并不复杂，但这个事实本身并不能证明你实际编写它的决定是正确的。当你遇到一个编程需求，感觉好像可能已经有人编写了它，问问自己这个问题：*我想知道
    Python 标准库中是否有任何有用的东西可以帮助吗？*
- en: 'There is no shame in reusing existing code, even for something you consider
    *simple*. With that in mind, here’s how to calculate the average from the `converts`
    list with some help from the PSL:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 重复使用现有代码没有任何羞耻感，即使对于你认为*简单*的事情也是如此。考虑到这一点，以下是如何从`converts`列表中计算平均值的方法，借助PSL的帮助：
- en: '**Hey, remember that handy PSL? No, not the delicious seasonal latte, the other
    PSL!**'
  id: totrans-183
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**嘿，还记得那个方便的PSL吗？不，不是美味的季节拿铁，是另一个PSL！**'
- en: '![Image](assets/ch02-32-01.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-32-01.png)'
- en: Although calculating the average is easy, as shown above you haven’t had to
    write a loop, maintain a count, keep a running total, nor perform the average
    calculation. All you do is pass the name of the list of numbers into the **mean**
    function which returns the arithmetic mean (i.e., the average) of your data. Cool.
    That’ll do.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管计算平均值很容易，如上所示，你不必编写循环、维护计数、保持累计总数，也不必执行平均值计算。你只需将数字列表的名称传递给**mean**函数，该函数将返回你的数据的算术平均值（即平均值）。很酷。就这样。
- en: '![Image](assets/ch02-32-02.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-32-02.png)'
- en: '**Yes, as mins:secs.hundredths.**'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**是的，格式为分:秒.百分之几。**'
- en: In effect, you need to reverse the process from earlier which converted the
    original swim time string into it’s numeric equivalent.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你需要反向处理之前的过程，将原始游泳时间字符串转换为其数值等效形式。
- en: It can’t be that hard, can it?
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不难，对吧？
- en: Convert the average to a swim time string
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将平均值转换为游泳时间字符串
- en: Experienced Python programmers knows enough to apply a few “tricks” to the problem
    of converting your hundredths of seconds back into the *mins:secs.hundredths*
    string format. You’ll learn about these techniques later in this book, as showing
    them to you now would likely double the size of this chapter. So, for now, let’s
    (mostly) stick with the Python you already know to perform this task.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 有经验的Python程序员足够了解如何在将百分之几秒转换回*分:秒.百分之几*字符串格式时应用一些“技巧”。稍后在本书中，你将学习这些技术，现在展示它们可能会使本章的长度翻倍。因此，现在让我们（大多数时候）坚持你已经掌握的Python来执行这个任务。
- en: '![Image](assets/ch02-33-01.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-33-01.png)'
- en: 'Follow along in your notebook while you’re walked through the five steps to
    perform the conversion. Here’s what you’re trying to do:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在笔记本中跟着走，当你通过五个步骤进行转换时。这是你要做的事情：
- en: '![Image](assets/ch02-33-02.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-33-02.png)'
- en: '![Images](assets/1-circle.png) **Begin by converting the hundredths value to
    its seconds equivalent.**'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](assets/1-circle.png) **首先将百分之几的值转换为其相应的秒数。**'
- en: '![Image](assets/ch02-33-03.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-33-03.png)'
- en: '![Images](assets/2-circle.png) **Break the rounded average into it’s component
    parts.**'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](assets/2-circle.png) **将平均值分解为其组成部分。**'
- en: '![Image](assets/ch02-34-01.png)![Image](assets/ch02-34-02.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-34-01.png)![图片](assets/ch02-34-02.png)'
- en: '![Images](assets/3-circle.png) **Calculate the number of minutes.**'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](assets/3-circle.png) **计算分钟数。**'
- en: '![Image](assets/ch02-34-03.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-34-03.png)'
- en: '![Images](assets/4-circle.png) **Calculate the number of seconds.**'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](assets/4-circle.png) **计算秒数。**'
- en: '![Image](assets/ch02-35-01.png)![Image](assets/ch02-35-02.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-35-01.png)![图片](assets/ch02-35-02.png)'
- en: '![Images](assets/5-circle.png) **With minutes, seconds, and hundredths now
    known, build the swim time string.**'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](assets/5-circle.png) **现在知道了分钟数、秒数和百分之几，构建游泳时间字符串。**'
- en: '![Image](assets/ch02-35-03.png)![Image](assets/ch02-36-01.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-35-03.png)![图片](assets/ch02-36-01.png)'
- en: '**Yes, and it’s easier than you think.**'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**是的，比你想象的要容易。**'
- en: You could go off and learn how to write automated tests in Python, then code-up
    any number of tests to check your calculations...
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以去学习如何在Python中编写自动化测试，然后编写任意数量的测试来检查你的计算结果…
- en: Or you could simply take another look at the swim coach’s spreadsheet to confirm
    your calculated swim time of ‘`1:26.58`’ matches the average as calculated by
    the Coach’s spreadsheet.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以简单地再看看游泳教练的电子表格，确认你计算的游泳时间“`1:26.58`”与教练电子表格计算的平均值匹配。
- en: And it does, as shown below.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 此过程如下所示。
- en: '![Image](assets/ch02-36-02.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-36-02.png)'
- en: It’s been a while since your last checkmark...
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 距离上次打勾已经有一段时间了…
- en: Congratulations! You are finally able to place a well-deserved tick against
    sub-task (e).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你终于可以对子任务（e）打上实至名归的勾。
- en: 'All that remains is to combine the code from the previous chapter with the
    code seen so far in this chapter. Once that’s done, sub-task (f) will be done
    too:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 所有剩下的就是将上一章节的代码与本章节看到的代码结合起来。一旦完成，子任务（f）也将完成：
- en: '![Image](assets/ch02-37-01.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch02-37-01.png)'
- en: 'Task #2 (finally) gets over the line!'
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务#2（终于）完成了！
- en: Well done! With the creation (and execution) of the `Times.ipynb` notebook,
    the two tasks identified at the start of the previous chapter are now complete.
    It’s a case of checkmarks all around!
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 干得漂亮！通过创建（和执行）`Times.ipynb`笔记本，前一章节开始时标识的两个任务现在已经完成。所有人都打勾了！
- en: '![Images](assets/1-circle.png) **Extract data from the file’s name**'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '![图像](assets/1-circle.png) **从文件名提取数据**'
- en: '![Image](assets/ch02-40-01.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch02-40-01.png)'
- en: '![Images](assets/2-circle.png) **Process the data in the file**'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '![图像](assets/2-circle.png) **处理文件中的数据**'
- en: '![Image](assets/ch02-40-02.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch02-40-02.png)'
- en: Of course, getting to this point doesn’t necessarily mean you’re done...
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，达到这一点并不一定意味着你完成了……
- en: '![Image](assets/ch02-41-01.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch02-41-01.png)'
- en: '**No, we haven’t forgotten.**'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '**不，我们没有忘记。**'
- en: The next chapter lays the groundwork for getting to the point where you can
    tackle the charting requirement, so we’ve ask the Coach to bear with us.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章为达到你可以处理制图需求的基础铺设了基础，因此我们请求教练谅解。
- en: At the moment, your code only works with the data for one specific data file.
    There are another 60+ files in the Coach’s dataset. It would be nice if there
    was a way to use this code with *any* of them on demand, and as needed.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你的代码只能处理一个特定数据文件的数据。教练数据集中还有其他60多个文件。如果有一种方式可以根据需要随时使用这些代码，那就太好了。
- en: Doing so is something you can mull over on your way to the next chapter when
    we’ll work through a solution to this problem *together*.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 当你前往下一章时，你可以考虑这样做，届时我们将一起解决这个问题。
- en: For now, let’s conclude this chapter with another summary and a super-topical
    crossword puzzle. Enjoy!
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们用另一个总结和一个超时事话题的纵横字谜来结束这一章节。享受吧！
