["```py\nhttp://example.com/the-api-route/pathparam\n\n```", "```py\nhttp://example.com/the-api-route?param1=pathparam\n\n```", "```py\n{\"user\":{\"id\": 123, \"name\": \"Ryan Mitchell\", \"city\": \"Boston\"}}\n\n```", "```py\n<user><id>123</id><name>Ryan Mitchell</name><city>Boston</city></user>\n```", "```py\nhttp://ip-api.com/json/50.78.253.58\n```", "```py\n{\"as\": \"AS7922 Comcast Cable Communications, LLC\",\"city\": \"Boston\",\n\"country\": \"United States\",\"countryCode\": \"US\",\n\"isp\": \"Comcast Cable Communications\",\"lat\": 42.3584,\"lon\": -71.0598,\n\"org\": \"Boston Park Plaza Hotel\",\"query\": \"50.78.253.58\",\n\"region\": \"MA\",\"regionName\": \"Massachusetts\",\"status\": \"success\",\n\"timezone\": \"America/New_York\",\"zip\": \"02116\"}\n```", "```py\nhttp://ip-api.com/xml/50.78.253.58\nhttp://ip-api.com/csv/50.78.253.58\n\n```", "```py\nhttp://example.com/comments?post=123\n\n```", "```py\n{\"title\": \"Great post about APIs!\", \"body\": \"Very informative. Really helped me \nout with a tricky technical challenge I was facing. Thanks for taking the time \nto write such a detailed blog post about PUT requests!\", \"author\": {\"name\":\"Ryan \nMitchell\", \"website\": \"http://pythonscraping.com\", \"company\": \"O'Reilly Media\"}}\n\n```", "```py\n<user><firstname>Ryan</firstname><lastname>Mitchell</lastname><username>Kludgist\n</username></user>\n```", "```py\n{\"user\":{\"firstname\":\"Ryan\",\"lastname\":\"Mitchell\",\"username\":\"Kludgist\"}}\n```", "```py\n<user firstname=\"ryan\" lastname=\"mitchell\" username=\"Kludgist\"></user>\n```", "```py\n{\"success\": true}\n\n```", "```py\n{\"error\": {\"message\": \"Something super bad happened\"}}\n\n```", "```py\nhttp://ip-api.com/json/50.78.253.58\n```", "```py\nimport json\nfrom urllib.request import urlopen\n\ndef getCountry(ipAddress):\n    response = urlopen('http://ip-api.com/json/'+ipAddress).read()\n    ​    .decode('utf-8')\n    responseJson = json.loads(response)\n    return responseJson.get('countryCode')\n\nprint(getCountry('50.78.253.58'))\n```", "```py\nimport json\n\njsonString = '{\"arrayOfNums\":[{\"number\":0},{\"number\":1},{\"number\":2}],\n               \"arrayOfFruits\":[{\"fruit\":\"apple\"},{\"fruit\":\"banana\"},\n                               {\"fruit\":\"pear\"}]}'\njsonObj = json.loads(jsonString)\n\nprint(jsonObj.get('arrayOfNums'))\nprint(jsonObj.get('arrayOfNums')[1])\nprint(jsonObj.get('arrayOfNums')[1].get('number') +\n      jsonObj.get('arrayOfNums')[2].get('number'))\nprint(jsonObj.get('arrayOfFruits')[2].get('fruit'))\n```", "```py\n[{'number': 0}, {'number': 1}, {'number': 2}]\n{'number': 1}\n3\npear\n```", "```py\nhttps://redsky.target.com/redsky_aggregations/v1/web/plp_search_v2\n```", "```py\ndef getLinks(articleUrl):\n    html = urlopen(f'http://en.wikipedia.org{articleUrl}')\n    bs = BeautifulSoup(html, 'html.parser')\n    return bs.find('div', {'id':'bodyContent'}).findAll('a', \n        href=re.compile('^(/wiki/)((?!:).)*$'))\n\ndef getHistoryIPs(pageUrl):\n    #Format of revision history pages is: \n    #http://en.wikipedia.org/w/index.php?title=Title_in_URL&action=history\n    pageUrl = pageUrl.replace('/wiki/', '')\n    historyUrl = f'http://en.wikipedia.org/w/index.php?title={pageUrl}\\\n    &action=history'\n    print(f'history url is: {historyUrl}')\n    bs = BeautifulSoup(urlopen(historyUrl), 'html.parser')\n    #finds only the links with class \"mw-anonuserlink\" which has IP addresses \n    #instead of usernames\n    ipAddresses = bs.findAll('a', {'class':'mw-anonuserlink'})\n    return set([ip.get_text() for ip in ipAddresses])\n\nlinks = getLinks('/wiki/Python_(programming_language)')\n\nwhile(len(links) > 0):\n    for link in links:\n        print('-'*20) \n        historyIPs = getHistoryIPs(link.attrs['href'])\n        for historyIP in historyIPs:\n            print(historyIP)\n\n    newLink = links[random.randint(0, len(links)-1)].attrs['href']\n    links = getLinks(newLink)\n\n```", "```py\ndef getCountry(ipAddress):\n    try:\n      response = urlopen(f'https://ipwho.is/{ipAddress}').read().decode('utf-8')\n    except HTTPError:\n      return None\n    responseJson = json.loads(response)\n    return responseJson.get('country_code')\n\nlinks = getLinks('/wiki/Python_(programming_language)')\n\nwhile(len(links) > 0):\n    for link in links:\n      print('-'*20) \n      historyIPs = getHistoryIPs(link.attrs[\"href\"])\n      for historyIP in historyIPs:\n          print(f'{historyIP} is from {getCountry(historyIP)}')\n\n    newLink = links[random.randint(0, len(links)-1)].attrs['href']\n    links = getLinks(newLink)\n\n```", "```py\n--------------------\nhistory url is: http://en.wikipedia.org/w/index.php?title=Programming_paradigm&a\nction=history\n2405:201:2009:80b0:41bc:366f:a49c:52f2 is from IN\n115.186.189.53 is from PK\n103.252.145.68 is from IN\n2405:201:400b:7058:b128:89fd:5248:f249 is from IN\n172.115.220.47 is from US\n2806:1016:d:54b6:8950:4501:c00b:507a is from MX\n36.255.87.160 is from IN\n2603:6011:1100:a1d0:31bd:8a11:a0c8:e4c3 is from US\n2806:108e:d:bd2c:a577:db4f:2867:2b5c is from MX\n2409:4042:e8f:8d39:b50c:f4ca:91b8:eb9d is from IN\n107.190.108.84 is from CA\n--------------------\nhistory url is: http://en.wikipedia.org/w/index.php?title=Multi-paradigm_program\nming_language&action=history\n98.197.198.46 is from US\n75.139.254.117 is from US\n\n```"]