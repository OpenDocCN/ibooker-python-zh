["```py\n>>> class Cat():\n...     pass\n```", "```py\n>>> class Cat:\n...     pass\n```", "```py\n>>> a_cat = Cat()\n>>> another_cat = Cat()\n```", "```py\n>>> class Cat:\n...     pass\n...\n>>> a_cat = Cat()\n>>> a_cat\n<__main__.Cat object at 0x100cd1da0>\n>>> another_cat = Cat()\n>>> another_cat\n<__main__.Cat object at 0x100cd1e48>\n```", "```py\n>>> a_cat.age = 3\n>>> a_cat.name = \"Mr. Fuzzybuttons\"\n>>> a_cat.nemesis = another_cat\n```", "```py\n>>> a_cat.age\n3\n>>> a_cat.name\n'Mr. Fuzzybuttons'\n>>> a_cat.nemesis\n<__main__.Cat object at 0x100cd1e48>\n```", "```py\n>>> a_cat.nemesis.name\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'Cat' object has no attribute 'name'\n```", "```py\n>>> a_cat.nemesis.name = \"Mr. Bigglesworth\"\n>>> a_cat.nemesis.name\n'Mr. Bigglesworth'\n```", "```py\n>>> class Cat:\n...     def __init__(self):\n...         pass\n```", "```py\n>>> class Cat():\n...     def __init__(self, name):\n...         self.name = name\n...\n>>>\n```", "```py\n>>> furball = Cat('Grumpy')\n```", "```py\n>>> print('Our latest addition: ', furball.name)\nOur latest addition: Grumpy\n```", "```py\n>>> class Car():\n...     pass\n...\n>>> class Yugo(Car):\n...     pass\n...\n```", "```py\n>>> issubclass(Yugo, Car)\nTrue\n```", "```py\n>>> give_me_a_car = Car()\n>>> give_me_a_yugo = Yugo()\n```", "```py\n>>> class Car():\n...     def exclaim(self):\n...         print(\"I'm a Car!\")\n...\n>>> class Yugo(Car):\n...     pass\n...\n```", "```py\n>>> give_me_a_car = Car()\n>>> give_me_a_yugo = Yugo()\n>>> give_me_a_car.exclaim()\nI'm a Car!\n>>> give_me_a_yugo.exclaim()\nI'm a Car!\n```", "```py\n>>> class Car():\n...     def exclaim(self):\n...         print(\"I'm a Car!\")\n...\n>>> class Yugo(Car):\n...     def exclaim(self):\n...         print(\"I'm a Yugo! Much like a Car, but more Yugo-ish.\")\n...\n```", "```py\n>>> give_me_a_car = Car()\n>>> give_me_a_yugo = Yugo()\n```", "```py\n>>> give_me_a_car.exclaim()\nI'm a Car!\n>>> give_me_a_yugo.exclaim()\nI'm a Yugo! Much like a Car, but more Yugo-ish.\n```", "```py\n>>> class Person():\n...     def __init__(self, name):\n...         self.name = name\n...\n>>> class MDPerson(Person):\n...     def __init__(self, name):\n...         self.name = \"Doctor \" + name\n...\n>>> class JDPerson(Person):\n...     def __init__(self, name):\n...         self.name = name + \", Esquire\"\n...\n```", "```py\n>>> person = Person('Fudd')\n>>> doctor = MDPerson('Fudd')\n>>> lawyer = JDPerson('Fudd')\n>>> print(person.name)\nFudd\n>>> print(doctor.name)\nDoctor Fudd\n>>> print(lawyer.name)\nFudd, Esquire\n```", "```py\n>>> class Car():\n...     def exclaim(self):\n...         print(\"I'm a Car!\")\n...\n>>> class Yugo(Car):\n...     def exclaim(self):\n...         print(\"I'm a Yugo! Much like a Car, but more Yugo-ish.\")\n...     def need_a_push(self):\n...         print(\"A little help here?\")\n...\n```", "```py\n>>> give_me_a_car = Car()\n>>> give_me_a_yugo = Yugo()\n```", "```py\n>>> give_me_a_yugo.need_a_push()\nA little help here?\n```", "```py\n>>> give_me_a_car.need_a_push()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'Car' object has no attribute 'need_a_push'\n```", "```py\n>>> class Person():\n...     def __init__(self, name):\n...         self.name = name\n...\n```", "```py\n>>> class EmailPerson(Person):\n...     def __init__(self, name, email):\n...         super().__init__(name)\n...         self.email = email\n```", "```py\n>>> bob = EmailPerson('Bob Frapples', 'bob@frapples.com')\n```", "```py\n>>> bob.name\n'Bob Frapples'\n>>> bob.email\n'bob@frapples.com'\n```", "```py\n>>> class EmailPerson(Person):\n...     def __init__(self, name, email):\n...         self.name = name\n...         self.email = email\n```", "```py\n>>> class Animal:\n...     def says(self):\n return 'I speak!'\n...\n>>> class Horse(Animal):\n...     def says(self):\n...         return 'Neigh!'\n...\n>>> class Donkey(Animal):\n...     def says(self):\n...         return 'Hee-haw!'\n...\n>>> class Mule(Donkey, Horse):\n...     pass\n...\n>>> class Hinny(Horse, Donkey):\n...     pass\n...\n```", "```py\n>>> Mule.mro()\n[<class '__main__.Mule'>, <class '__main__.Donkey'>,\n<class '__main__.Horse'>, <class '__main__.Animal'>,\n<class 'object'>]\n>>> Hinny.mro()\n[<class '__main__.Hinny'>, <class '__main__.Horse'>,\n<class '__main__.Donkey'>, <class '__main__.Animal'>,\nclass 'object'>]\n```", "```py\n>>> mule = Mule()\n>>> hinny = Hinny()\n>>> mule.says()\n'hee-haw'\n>>> hinny.says()\n'neigh'\n```", "```py\n>>> class PrettyMixin():\n...     def dump(self):\n...         import pprint\n...         pprint.pprint(vars(self))\n...\n>>> class Thing(PrettyMixin):\n...     pass\n...\n>>> t = Thing()\n>>> t.name = \"Nyarlathotep\"\n>>> t.feature = \"ichor\"\n>>> t.age = \"eldritch\"\n>>> t.dump()\n{'age': 'eldritch', 'feature': 'ichor', 'name': 'Nyarlathotep'}\n```", "```py\n>>> a_car = Car()\n>>> a_car.exclaim()\nI'm a Car!\n```", "```py\n>>> Car.exclaim(a_car)\nI'm a Car!\n```", "```py\n>>> class Duck:\n...     def __init__(self, input_name):\n...         self.name = input_name\n...\n>>> fowl = Duck('Daffy')\n>>> fowl.name\n'Daffy'\n```", "```py\n>>> fowl.name = 'Daphne'\n>>> fowl.name\n'Daphne'\n```", "```py\n>>> class Duck():\n...     def __init__(self, input_name):\n...         self.hidden_name = input_name\n...     def get_name(self):\n...         print('inside the getter')\n...         return self.hidden_name\n...     def set_name(self, input_name):\n...         print('inside the setter')\n...         self.hidden_name = input_name\n```", "```py\n>>> don = Duck('Donald')\n>>> don.get_name()\ninside the getter\n'Donald'\n>>> don.set_name('Donna')\ninside the setter\n>>> don.get_name()\ninside the getter\n'Donna'\n```", "```py\n>>> class Duck():\n>>>     def __init__(self, input_name):\n>>>         self.hidden_name = input_name\n>>>     def get_name(self):\n>>>         print('inside the getter')\n>>>         return self.hidden_name\n>>>     def set_name(self, input_name):\n>>>         print('inside the setter')\n>>>         self.hidden_name = input_name\n>>>     name = property(get_name, set_name)\n```", "```py\n>>> don = Duck('Donald')\n>>> don.get_name()\ninside the getter\n'Donald'\n>>> don.set_name('Donna')\ninside the setter\n>>> don.get_name()\ninside the getter\n'Donna'\n```", "```py\n>>> don = Duck('Donald')\n>>> don.name\ninside the getter\n'Donald'\n>>> don.name = 'Donna'\ninside the setter\n>>> don.name\ninside the getter\n'Donna'\n```", "```py\n>>> class Duck():\n...     def __init__(self, input_name):\n...         self.hidden_name = input_name\n...     @property\n...     def name(self):\n...         print('inside the getter')\n...         return self.hidden_name\n...     @name.setter\n...     def name(self, input_name):\n...         print('inside the setter')\n...         self.hidden_name = input_name\n```", "```py\n>>> fowl = Duck('Howard')\n>>> fowl.name\ninside the getter\n'Howard'\n>>> fowl.name = 'Donald'\ninside the setter\n>>> fowl.name\ninside the getter\n'Donald'\n```", "```py\n>>> class Circle():\n...     def __init__(self, radius):\n...         self.radius = radius\n...     @property\n...     def diameter(self):\n...         return 2 * self.radius\n...\n```", "```py\n>>> c = Circle(5)\n>>> c.radius\n5\n```", "```py\n>>> c.diameter\n10\n```", "```py\n>>> c.radius = 7\n>>> c.diameter\n14\n```", "```py\n>>> c.diameter = 20\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: can't set attribute\n```", "```py\n>>> class Duck():\n...     def __init__(self, input_name):\n...         self.__name = input_name\n...     @property\n...     def name(self):\n...         print('inside the getter')\n...         return self.__name\n...     @name.setter\n...     def name(self, input_name):\n...         print('inside the setter')\n...         self.__name = input_name\n...\n```", "```py\n>>> fowl = Duck('Howard')\n>>> fowl.name\ninside the getter\n'Howard'\n>>> fowl.name = 'Donald'\ninside the setter\n>>> fowl.name\ninside the getter\n'Donald'\n```", "```py\n>>> fowl.__name\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'Duck' object has no attribute '__name'\n```", "```py\n>>> fowl._Duck__name\n'Donald'\n```", "```py\n>>> class Fruit:\n...     color = 'red'\n...\n>>> blueberry = Fruit()\n>>> Fruit.color\n'red'\n>>> blueberry.color\n'red'\n```", "```py\n>>> blueberry.color = 'blue'\n>>> blueberry.color\n'blue'\n>>> Fruit.color\n'red'\n```", "```py\n>>> Fruit.color = 'orange'\n>>> Fruit.color\n'orange'\n>>> blueberry.color\n'blue'\n```", "```py\n>>> new_fruit = Fruit()\n>>> new_fruit.color\n'orange'\n```", "```py\n>>> class A():\n...     count = 0\n...     def __init__(self):\n...         A.count += 1\n...     def exclaim(self):\n...         print(\"I'm an A!\")\n...     @classmethod\n...     def kids(cls):\n...         print(\"A has\", cls.count, \"little objects.\")\n...\n>>>\n>>> easy_a = A()\n>>> breezy_a = A()\n>>> wheezy_a = A()\n>>> A.kids()\nA has 3 little objects.\n```", "```py\n>>> class CoyoteWeapon():\n...     @staticmethod\n...     def commercial():\n...         print('This CoyoteWeapon has been brought to you by Acme')\n...\n>>>\n>>> CoyoteWeapon.commercial()\nThis CoyoteWeapon has been brought to you by Acme\n```", "```py\n>>> class Quote():\n...     def __init__(self, person, words):\n...         self.person = person\n...         self.words = words\n...     def who(self):\n...         return self.person\n...     def says(self):\n...         return self.words + '.'\n...\n>>> class QuestionQuote(Quote):\n...      def says(self):\n...          return self.words + '?'\n...\n>>> class ExclamationQuote(Quote):\n...      def says(self):\n...          return self.words + '!'\n...\n>>>\n```", "```py\n>>> hunter = Quote('Elmer Fudd', \"I'm hunting wabbits\")\n>>> print(hunter.who(), 'says:', hunter.says())\nElmer Fudd says: I'm hunting wabbits.\n```", "```py\n>>> hunted1 = QuestionQuote('Bugs Bunny', \"What's up, doc\")\n>>> print(hunted1.who(), 'says:', hunted1.says())\nBugs Bunny says: What's up, doc?\n```", "```py\n>>> hunted2 = ExclamationQuote('Daffy Duck', \"It's rabbit season\")\n>>> print(hunted2.who(), 'says:', hunted2.says())\nDaffy Duck says: It's rabbit season!\n```", "```py\n>>> class BabblingBrook():\n...     def who(self):\n...         return 'Brook'\n...     def says(self):\n...         return 'Babble'\n...\n>>> brook = BabblingBrook()\n```", "```py\n>>> def who_says(obj):\n...     print(obj.who(), 'says', obj.says())\n...\n>>> who_says(hunter)\nElmer Fudd says I'm hunting wabbits.\n>>> who_says(hunted1)\nBugs Bunny says What's up, doc?\n>>> who_says(hunted2)\nDaffy Duck says It's rabbit season!\n>>> who_says(brook)\nBrook says Babble\n```", "```py\n>>> class Word():\n...    def __init__(self, text):\n...        self.text = text\n...\n...    def equals(self, word2):\n...        return self.text.lower() == word2.text.lower()\n...\n```", "```py\n>>> first = Word('ha')\n>>> second = Word('HA')\n>>> third = Word('eh')\n```", "```py\n>>> first.equals(second)\nTrue\n```", "```py\n>>> first.equals(third)\nFalse\n```", "```py\n>>> class Word():\n...     def __init__(self, text):\n...         self.text = text\n...     def __eq__(self, word2):\n...         return self.text.lower() == word2.text.lower()\n...\n```", "```py\n>>> first = Word('ha')\n>>> second = Word('HA')\n>>> third = Word('eh')\n>>> first == second\nTrue\n>>> first == third\nFalse\n```", "```py\n>>> first = Word('ha')\n>>> first\n<__main__.Word object at 0x1006ba3d0>\n>>> print(first)\n<__main__.Word object at 0x1006ba3d0>\n```", "```py\n>>> class Word():\n...     def __init__(self, text):\n...         self.text = text\n...     def __eq__(self, word2):\n...         return self.text.lower() == word2.text.lower()\n...     def __str__(self):\n...         return self.text\n...     def __repr__(self):\n...         return 'Word(\"'  + self.text  + '\")'\n...\n>>> first = Word('ha')\n>>> first          # uses __repr__\nWord(\"ha\")\n>>> print(first)   # uses __str__\nha\n```", "```py\n>>> class Bill():\n...     def __init__(self, description):\n...         self.description = description\n...\n>>> class Tail():\n...     def __init__(self, length):\n...         self.length = length\n...\n>>> class Duck():\n...     def __init__(self, bill, tail):\n...         self.bill = bill\n...         self.tail = tail\n...     def about(self):\n...         print('This duck has a', self.bill.description,\n...             'bill and a', self.tail.length, 'tail')\n...\n>>> a_tail = Tail('long')\n>>> a_bill = Bill('wide orange')\n>>> duck = Duck(a_bill, a_tail)\n>>> duck.about()\nThis duck has a wide orange bill and a long tail\n```", "```py\n>>> from collections import namedtuple\n>>> Duck = namedtuple('Duck', 'bill tail')\n>>> duck = Duck('wide orange', 'long')\n>>> duck\nDuck(bill='wide orange', tail='long')\n>>> duck.bill\n'wide orange'\n>>> duck.tail\n'long'\n```", "```py\n>>> parts = {'bill': 'wide orange', 'tail': 'long'}\n>>> duck2 = Duck(**parts)\n>>> duck2\nDuck(bill='wide orange', tail='long')\n```", "```py\n>>> duck2 = Duck(bill = 'wide orange', tail = 'long')\n```", "```py\n>>> duck3 = duck2._replace(tail='magnificent', bill='crushing')\n>>> duck3\nDuck(bill='crushing', tail='magnificent')\n```", "```py\n>>> duck_dict = {'bill': 'wide orange', 'tail': 'long'}\n>>> duck_dict\n{'tail': 'long', 'bill': 'wide orange'}\n```", "```py\n>>> duck_dict['color'] = 'green'\n>>> duck_dict\n{'color': 'green', 'tail': 'long', 'bill': 'wide orange'}\n```", "```py\n>>> duck.color = 'green'\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'Duck' object has no attribute 'color'\n```", "```py\n>> class TeenyClass():\n...     def __init__(self, name):\n...         self.name = name\n...\n>>> teeny = TeenyClass('itsy')\n>>> teeny.name\n'itsy'\n```", "```py\n>>> from dataclasses import dataclass\n>>> @dataclass\n... class TeenyDataClass:\n...     name: str\n...\n>>> teeny = TeenyDataClass('bitsy')\n>>> teeny.name\n'bitsy'\n```", "```py\n>>> from dataclasses import dataclass\n>>> @dataclass\n... class AnimalClass:\n...     name: str\n...     habitat: str\n...     teeth: int = 0\n...\n>>> snowman = AnimalClass('yeti', 'Himalayas', 46)\n>>> duck = AnimalClass(habitat='lake', name='duck')\n>>> snowman\nAnimalClass(name='yeti', habitat='Himalayas', teeth=46)\n>>> duck\nAnimalClass(name='duck', habitat='lake', teeth=0)\n```", "```py\n>>> duck.habitat\n'lake'\n>>> snowman.teeth\n46\n```"]