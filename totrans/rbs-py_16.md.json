["```py\nname: Viafore's\nowner: Pat Viafore\naddress: 123 Fake St. Fakington, FA 01234\nemployees:\n  - name: Pat Viafore\n    position: Chef\n    payment_details:\n      bank_details:\n        routing_number: \"123456789\"\n        account_number: \"123456789012\"\n  - name: Made-up McGee\n    position: Server\n    payment_details:\n      bank_details:\n        routing_number: \"123456789\"\n        account_number: \"123456789012\"\n  - name: Fabricated Frank\n    position: Sous Chef\n    payment_details:\n      bank_details:\n        routing_number: \"123456789\"\n        account_number: \"123456789012\"\n  - name: Illusory Ilsa\n    position: Host\n    payment_details:\n      bank_details:\n        routing_number: \"123456789\"\n        account_number: \"123456789012\"\ndishes:\n  - name: Pasta and Sausage\n    price_in_cents: 1295\n    description: Rigatoni and sausage with a tomato-garlic-basil sauce\n  - name: Pasta Bolognese\n    price_in_cents: 1495\n    description: Spaghetti with a rich tomato and beef Sauce\n  - name: Caprese Salad\n    price_in_cents: 795\n    description: Tomato, buffalo mozzarella, and basil\n    picture: caprese.png\nnumber_of_seats: 12\nto_go: true\ndelivery: false\n```", "```py\nwith open('code_examples/chapter14/restaurant.yaml') as yaml_file:\n    restaurant = yaml.safe_load(yaml_file)\n\nprint(restaurant)\n>>> {\n    \"name\": \"Viafore's\",\n    \"owner\": \"Pat Viafore\",\n    \"address\": \"123 Fake St. Fakington, FA 01234\",\n    \"employees\": [{\n        \"name\": \"Pat Viafore\",\n        \"position\": \"Chef\",\n        \"payment_details\": {\n            \"bank_details\": {\n                \"routing_number\": '123456789',\n                \"account_number\": '123456789012'\n            }\n        }\n    },\n    {\n        \"name\": \"Made-up McGee\",\n        \"position\": \"Server\",\n        \"payment_details\": {\n            \"bank_details\": {\n                \"routing_number\": '123456789',\n                \"account_number\": '123456789012'\n            }\n        }\n    },\n    {\n        \"name\": \"Fabricated Frank\",\n        \"position\": \"Sous Chef\",\n        \"payment_details\": {\n            \"bank_details\": {\n                \"routing_number\": '123456789',\n                \"account_number\": '123456789012'\n            }\n        }\n    },\n    {\n        \"name\": \"Illusory Ilsa\",\n        \"position\": \"Host\",\n        \"payment_details\": {\n            \"bank_details\": {\n                \"routing_number\": '123456789',\n                \"account_number\": '123456789012'\n            }\n        }\n    }],\n    \"dishes\": [{\n        \"name\": \"Pasta and Sausage\",\n        \"price_in_cents\": 1295,\n        \"description\": \"Rigatoni and sausage with a tomato-garlic-basil sauce\"\n    },\n    {\n        \"name\": \"Pasta Bolognese\",\n        \"price_in_cents\": 1495,\n        \"description\": \"Spaghetti with a rich tomato and beef Sauce\"\n    },\n    {\n        \"name\": \"Caprese Salad\",\n        \"price_in_cents\": 795,\n        \"description\": \"Tomato, buffalo mozzarella, and basil\",\n        \"picture\": \"caprese.png\"\n    }],\n    'number_of_seats': 12,\n    \"to_go\": True,\n    \"delivery\": False\n}\n```", "```py\nfrom typing import Literal, TypedDict, Union\nclass AccountAndRoutingNumber(TypedDict):\n    account_number: str\n    routing_number: str\n\nclass BankDetails(TypedDict):\n    bank_details: AccountAndRoutingNumber\n\nAddressOrBankDetails = Union[str, BankDetails]\n\nPosition = Literal['Chef', 'Sous Chef', 'Host',\n                   'Server', 'Delivery Driver']\n\nclass Dish(TypedDict):\n    name: str\n    price_in_cents: int\n    description: str\n\nclass DishWithOptionalPicture(Dish, TypedDict, total=False):\n    picture: str\n\nclass Employee(TypedDict):\n    name: str\n    position: Position\n    payment_information: AddressOrBankDetails\n\nclass Restaurant(TypedDict):\n    name: str\n    owner: str\n    address: str\n    employees: list[Employee]\n    dishes: list[Dish]\n    number_of_seats: int\n    to_go: bool\n    delivery: bool\n```", "```py\ndef load_restaurant(filename: str) -> Restaurant:\n    with open(filename) as yaml_file:\n        return yaml.safe_load(yaml_file)\n```", "```py\ninvalid_name: \"This is the wrong file format\"\n```", "```py\nfrom pydantic.dataclasses import dataclass\nfrom typing import Literal, Optional, TypedDict, Union\n\n@dataclass\nclass AccountAndRoutingNumber:\n    account_number: str\n    routing_number: str\n\n@dataclass\nclass BankDetails:\n    bank_details: AccountAndRoutingNumber\n\nAddressOrBankDetails = Union[str, BankDetails]\n\nPosition = Literal['Chef', 'Sous Chef', 'Host',\n                   'Server', 'Delivery Driver']\n\n@dataclass\nclass Dish:\n    name: str\n    price_in_cents: int\n    description: str\n    picture: Optional[str] = None\n\n@dataclass\nclass Employee:\n    name: str\n    position: Position\n    payment_information: AddressOrBankDetails\n\n@dataclass\nclass Restaurant:\n    name: str\n    owner: str\n    address: str\n    employees: list[Employee]\n    dishes: list[Dish]\n    number_of_seats: int\n    to_go: bool\n    delivery: bool\n```", "```py\ndef load_restaurant(filename: str) -> Restaurant:\n    with open(filename) as yaml_file:\n        data = yaml.safe_load(yaml_file)\n        return Restaurant(**data)\n```", "```py\npydantic.error_wrappers.ValidationError: 1 validation error for Restaurant\ndishes -> 2\n  __init__() missing 1 required positional argument:\n    'description' (type=type_error)\n```", "```py\npydantic.error_wrappers.ValidationError: 1 validation error for Restaurant\nemployees -> 0 -> position\n  unexpected value; permitted: 'Chef', 'Sous Chef', 'Host',\n                               'Server', 'Delivery Driver'\n                               (type=value_error.const; given=3;\n                                permitted=('Chef', 'Sous Chef', 'Host',\n                                           'Server', 'Delivery Driver'))\n```", "```py\n[mypy]\nplugins = pydantic.mypy\n```", "```py\nfrom typing import Optional\n\nfrom pydantic.dataclasses import dataclass\nfrom pydantic import constr, PositiveInt\n\n@dataclass\nclass AccountAndRoutingNumber:\n    account_number: constr(min_length=9,max_length=9) ![1](../images/00002.gif)\n    routing_number: constr(min_length=8,max_length=12)\n\n@dataclass\nclass Address:\n    address: constr(min_length=1)\n\n# ... snip ...\n\n@dataclass\nclass Dish:\n    name: constr(min_length=1, max_length=16)\n    price_in_cents: PositiveInt\n    description: constr(min_length=1, max_length=80)\n    picture: Optional[str] = None\n\n@dataclass\nclass Restaurant:\n    name: constr(regex=r'^[a-zA-Z0-9 ]*$', ![2](../images/00005.gif)\n                  min_length=1, max_length=16)\n    owner: constr(min_length=1)\n    address: constr(min_length=1)\n    employees: List[Employee]\n    dishes: List[Dish]\n    number_of_seats: PositiveInt\n    to_go: bool\n    delivery: bool\n```", "```py\npydantic.error_wrappers.ValidationError: 2 validation errors for Restaurant\nname\n  string does not match regex \"^[a-zA-Z0-9 ]$\" (type=value_error.str.regex;\n                                                pattern=^[a-zA-Z0-9 ]$)\nnumber_of_seats\n  ensure this value is greater than 0\n    (type=value_error.number.not_gt; limit_value=0)\n```", "```py\nfrom pydantic import conlist,constr\n@dataclass\nclass Restaurant:\n    name: constr(regex=r'^[a-zA-Z0-9 ]*$',\n                   min_length=1, max_length=16)\n    owner: constr(min_length=1)\n    address: constr(min_length=1)\n    employees: conlist(Employee, min_items=2) ![1](../images/00002.gif)\n    dishes: conlist(Dish, min_items=3) ![2](../images/00005.gif)\n    number_of_seats: PositiveInt\n    to_go: bool\n    delivery: bool\n```", "```py\npydantic.error_wrappers.ValidationError: 1 validation error for Restaurant\ndishes\n  ensure this value has at least 3 items\n    (type=value_error.list.min_items; limit_value=3)\n```", "```py\nfrom pydantic import validator\n@dataclass\nclass Restaurant:\n    name: constr(regex=r'^[a-zA-Z0-9 ]*$',\n                   min_length=1, max_length=16)\n    owner: constr(min_length=1)\n    address: constr(min_length=1)\n    employees: conlist(Employee, min_items=2)\n    dishes: conlist(Dish, min_items=3)\n    number_of_seats: PositiveInt\n    to_go: bool\n    delivery: bool\n\n    @validator('employees')\n    def check_chef_and_server(cls, employees):\n        if (any(e for e in employees if e.position == 'Chef') and\n            any(e for e in employees if e.position == 'Server')):\n                return employees\n        raise ValueError('Must have at least one chef and one server')\n```", "```py\npydantic.error_wrappers.ValidationError: 1 validation error for Restaurant\nemployees\n  Must have at least one chef and one server (type=value_error)\n```", "```py\nfrom pydantic import dataclass\n@dataclass\nclass Model:\n    value: int\n```", "```py\nModel(value=\"123\") # value is set to the integer 123\nModel(value=5.5) # this truncates the value to 5\n```", "```py\nfrom pydantic.dataclasses import dataclass\nfrom pydantic import StrictInt\n@dataclass\nclass Model:\n    value: StrictInt\n```", "```py\nx = Model(value=\"0023\").value\n```", "```py\npydantic.error_wrappers.ValidationError: 1 validation error for Model\nvalue\n  value is not a valid integer (type=type_error.integer)\n```"]