["```py\nfrom flask import Response, Flask\nimport prometheus_client\n\napp = Flask('prometheus-app')\n\n@app.route('/metrics/')\ndef metrics():\n    return Response(\n        prometheus_client.generate_latest(),\n        mimetype='text/plain; version=0.0.4; charset=utf-8'\n    )\n```", "```py\n$ FLASK_APP=web.py flask run\n * Serving Flask app \"web.py\"\n * Environment: production\n   WARNING: This is a development server.\n   Use a production WSGI server instead.\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n127.0.0.1 - - [07/Jul/2019 10:16:20] \"GET /metrics HTTP/1.1\" 308 -\n127.0.0.1 - - [07/Jul/2019 10:16:20] \"GET /metrics/ HTTP/1.1\" 200 -\n```", "```py\n...\n# HELP process_cpu_seconds_total Total user and system CPU time in seconds.\n# TYPE process_cpu_seconds_total counter\nprocess_cpu_seconds_total 0.27\n# HELP process_open_fds Number of open file descriptors.\n# TYPE process_open_fds gauge\nprocess_open_fds 6.0\n# HELP process_max_fds Maximum number of open file descriptors.\n# TYPE process_max_fds gauge\nprocess_max_fds 1024.0\n```", "```py\n@app.route('/')\ndef index():\n    return '<h1>Development Prometheus-backed Flask App</h1>'\n```", "```py\nfrom prometheus_client import Counter\n\nREQUESTS = Counter(\n    'requests', 'Application Request Count',\n    ['endpoint']\n)\n\n@app.route('/')\ndef index():\n    REQUESTS.labels(endpoint='/').inc()\n    return '<h1>Development Prometheus-backed Flask App</h1>'\n```", "```py\n...\n# HELP requests_total Application Request Count\n# TYPE requests_total counter\nrequests_total{endpoint=\"/\"} 3.0\n# TYPE requests_created gauge\nrequests_created{endpoint=\"/\"} 1.562512871203272e+09\n```", "```py\nfrom prometheus_client import Histogram\n\nTIMER = Histogram(\n    'slow', 'Slow Requests',\n    ['endpoint']\n)\n```", "```py\nimport time\nimport random\n\n@app.route('/database/')\ndef database():\n    with TIMER.labels('/database').time():\n        # simulated database response time\n        sleep(random.uniform(1, 3))\n    return '<h1>Completed expensive database operation</h1>'\n```", "```py\n# HELP slow Slow Requests\n# TYPE slow histogram\nslow_bucket{endpoint=\"/database\",le=\"0.005\"} 0.0\nslow_bucket{endpoint=\"/database\",le=\"0.01\"} 0.0\nslow_bucket{endpoint=\"/database\",le=\"0.025\"} 0.0\nslow_bucket{endpoint=\"/database\",le=\"0.05\"} 0.0\nslow_bucket{endpoint=\"/database\",le=\"0.075\"} 0.0\nslow_bucket{endpoint=\"/database\",le=\"0.1\"} 0.0\nslow_bucket{endpoint=\"/database\",le=\"0.25\"} 0.0\nslow_bucket{endpoint=\"/database\",le=\"0.5\"} 0.0\nslow_bucket{endpoint=\"/database\",le=\"0.75\"} 0.0\nslow_bucket{endpoint=\"/database\",le=\"1.0\"} 0.0\nslow_bucket{endpoint=\"/database\",le=\"2.5\"} 2.0\nslow_bucket{endpoint=\"/database\",le=\"5.0\"} 2.0\nslow_bucket{endpoint=\"/database\",le=\"7.5\"} 2.0\nslow_bucket{endpoint=\"/database\",le=\"10.0\"} 2.0\nslow_bucket{endpoint=\"/database\",le=\"+Inf\"} 2.0\nslow_count{endpoint=\"/database\"} 2.0\nslow_sum{endpoint=\"/database\"} 2.0021886825561523\n```", "```py\n>>> import statsd\n>>>\n>>> counter = statsd.Counter('app')\n>>> counter += 1\n```", "```py\nimport statsd\nimport get_prefix\n\ndef Counter(name):\n    return statsd.Counter(\"%s.%s\" % (get_prefix(), name))\n```", "```py\nfrom metrics import Counter\n\ncounter = Counter(__name__)\n\ncounter += 1\n```", "```py\nimport statsd\nimport get_prefix\n\ndef Counter(name, suffix=None):\n    if suffix:\n        name_parts = name.split('.')\n        name_parts.append(suffix)\n        name =  '.'.join(name_parts)\n    return statsd.Counter(\"%s.%s\" % (get_prefix(), name))\n```", "```py\nfrom metrics import Counter\nimport boto\n\ndef s3_write(bucket, filename):\n    counter = Counter(__name__, 's3.write')\n    conn = boto.connect_s3()\n    bucket = conn.get_bucket(bucket)\n    key = boto.s3.key.Key(bucket, filename)\n    with open(filename) as f:\n        key.send_file(f)\n    counter += 1\n\ndef s3_read(bucket, filename):\n    counter = Counter(__name__, 's3.read')\n    conn = boto.connect_s3()\n    bucket = conn.get_bucket(bucket)\n    k = Key(bucket)\n    k.key = filename\n    counter += 1\n    return k\n```", "```py\n    def helper_for_expensive_operations_on_large_files():\n        counter = Counter(__name__, suffix='large_file_operations')\n        while slow_operation:\n            ...\n            counter +=1\n```", "```py\n>>> import logging\n>>> logging.basicConfig()\n>>> logger = logging.getLogger()\n>>> logger.critical(\"this can't be that easy\")\nCRITICAL:root:this can't be that easy\n```", "```py\n>>> import logging\n>>> FORMAT = '%(asctime)s %(name)s %(levelname)s %(message)s'\n>>> logging.basicConfig(format=FORMAT, level=logging.INFO)\n>>> logger = logging.getLogger()\n>>> logger.debug('this will probably not show up')\n>>> logger.warning('warning is above info, should appear')\n2019-07-08 08:31:08,493 root WARNING warning is above info, should appear\n```", "```py\nimport logging\nimport os\n\nBASE_FORMAT = \"[%(name)s][%(levelname)-6s] %(message)s\"\nFILE_FORMAT = \"[%(asctime)s]\" + BASE_FORMAT\n\nroot_logger = logging.getLogger()\nroot_logger.setLevel(logging.DEBUG)\n\ntry:\n    file_logger = logging.FileHandler('application.log')\nexcept (OSError, IOError):\n    file_logger = logging.FileHandler('/tmp/application.log')\n\nfile_logger.setLevel(logging.INFO)\nconsole_logger.setFormatter(logging.Formatter(BASE_FORMAT))\nroot_logger.addHandler(file_logger)\n```", "```py\nconsole_logger = logging.StreamHandler()\nconsole_logger.setFormatter(BASE_FORMAT)\nconsole_logger.setLevel(logging.WARNING)\nroot_logger.addHandler(console_logger)\n```", "```py\n# root logger\nlogger = logging.getLogger()\nlogger.warning('this is an info message from the root logger')\n\napp_logger = logging.getLogger('my-app')\napp_logger.warning('an info message from my-app')\n```", "```py\n$ python log_test.py\n[root][WARNING] this is an info message from the root logger\n[my-app][WARNING] an info message from my-app\n$ cat application.log\n[2019-09-08 12:28:25,190][root][WARNING] this is an info message from the root\nlogger\n[2019-09-08 12:28:25,190][my-app][WARNING] an info message from my-app\n```", "```py\nfrom logging.config import dictConfig\n\ndictConfig({\n    'version': 1,\n    'formatters': {\n        'BASE_FORMAT': {\n            'format': '[%(name)s][%(levelname)-6s] %(message)s',\n        },\n        'FILE_FORMAT': {\n            'format': '[%(asctime)s] [%(name)s][%(levelname)-6s] %(message)s',\n        },\n    },\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n            'level': 'INFO',\n            'formatter': 'BASE_FORMAT'\n        },\n        'file': {\n            'class': 'logging.FileHandler',\n            'level': 'DEBUG',\n            'formatter': 'FILE_FORMAT'\n        }\n\n    },\n    'root': {\n        'level': 'INFO',\n        'handlers': ['console', 'file']\n    }\n})\n```", "```py\nimport os\nfrom logging.config import dictConfig\n\nimport logging\n\nclass EnvironFilter(logging.Filter):\n    def filter(self, record):\n        record.app_environment = os.environ.get('APP_ENVIRON', 'DEVEL')\n        return True\n\ndictConfig({\n    'version': 1,\n    'filters' : {\n        'environ_filter' : {\n          '()': EnvironFilter\n        }\n    },\n    'formatters': {\n        'BASE_FORMAT': {\n            'format':\n                '[%(app_environment)s][%(name)s][%(levelname)-6s] %(message)s',\n        }\n    },\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n            'level': 'INFO',\n            'formatter': 'BASE_FORMAT',\n            'filters': ['environ_filter'],\n        }\n    },\n    'root': {\n        'level': 'INFO',\n        'handlers': ['console']\n    }\n})\n```", "```py\n$ pecan serve config.py\nStarting server in PID 25585\nserving on 0.0.0.0:8080, view at http://127.0.0.1:8080\n2019-08-12 07:57:28,157 [DEVEL][INFO    ] [pecan.commands.serve] GET / 200\n```", "```py\n$ APP_ENVIRON='PRODUCTION' pecan serve config.py\nStarting server in PID 2832\nserving on 0.0.0.0:8080, view at http://127.0.0.1:8080\n2019-08-12 08:15:46,552 [PRODUCTION][INFO    ] [pecan.commands.serve] GET / 200\n```", "```py\ntry:\n    return expensive_operation()\nexcept TypeError as error:\n    logging.error(\"Running expensive_operation caused error: %s\" % str(error))\n```", "```py\n[ERROR] Running expensive_operation caused an error:\n    TypeError: not all arguments converted during string formatting\n```", "```py\ntry:\n    return expensive_operation()\nexcept TypeError:\n    logging.exception(\"Running expensive_operation caused error\")\n```", "```py\n>>> logging.error(\n\"An error was produced when calling: expensive_operation, \\\nwith arguments: %s, %s\" % (arguments))\n```", "```py\n>>> logging.error(\"An error was produced when calling: expensive_operation, \\\nwith arguments: %s, %s\", arguments)\n```", "```py\n192.168.111.1 - - [03/Aug/2019:07:28:41 +0000] \"GET / HTTP/1.1\" 200 3700 \"-\" \\\n\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0\"\n```", "```py\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n...\n```", "```py\nfilebeat.inputs:\n\n- type: log\n  enabled: true\n\n  paths:\n    - /var/log/nginx/*.log\n\noutput.logstash:\n  hosts: [\"localhost:5044\"]\n```", "```py\n$ systemctl start filebeat\n```", "```py\ninput {\n  beats {\n    port => \"5044\"\n  }\n}\n```", "```py\nfilter {\n  grok {\n    match => { \"message\" => \"%{COMBINEDAPACHELOG}\"}\n  }\n}\n```", "```py\noutput {\n  elasticsearch {\n    hosts => [\"localhost:9200\"]\n  }\n}\n```", "```py\n$ systemctl start elasticsearch\n```", "```py\n$ systemctl start kibana\n```", "```py\n{\"type\":\"log\",\"@timestamp\":\"2019-08-09T12:34:43Z\",\n\"tags\":[\"status\",\"plugin:elasticsearch@7.3.0\",\"info\"],\"pid\":7885,\n\"state\":\"yellow\",\n\"message\":\"Status changed from uninitialized to yellow\",\n\"prevState\":\"uninitialized\",\"prevMsg\":\"uninitialized\"}\n\n{\"type\":\"log\",\"@timestamp\":\"2019-08-09T12:34:45Z\",\n\"tags\":[\"status\",\"plugin:elasticsearch@7.3.0\",\"info\"],\"pid\":7885,\n\"state\":\"green\",\"message\":\"Status changed from yellow to green - Ready\",\n\"prevState\":\"yellow\",\"prevMsg\":\"Waiting for Elasticsearch\"}\n```", "```py\n{\"type\":\"log\",\"@timestamp\":\"2019-08-09T12:59:27Z\",\n\"tags\":[\"error\",\"elasticsearch\",\"data\"],\"pid\":8022,\n\"message\":\"Request error, retrying\n  GET http://localhost:9199/_xpack => connect ECONNREFUSED 127.0.0.1:9199\"}\n\n{\"type\":\"log\",\"@timestamp\":\"2019-08-09T12:59:27Z\",\n\"tags\":[\"warning\",\"elasticsearch\",\"data\"],\"pid\":8022,\n\"message\":\"Unable to revive connection: http://localhost:9199/\"}\n```", "```py\n$ ab -c 8 -n 50 http://localhost/\nThis is ApacheBench, Version 2.3 <$Revision: 1430300 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking localhost (be patient).....done\n```", "```py\n...\n    \"input\": {\n      \"type\": \"log\"\n    },\n    \"auth\": \"-\",\n    \"ident\": \"-\",\n    \"request\": \"/\",\n    \"response\": \"200\",\n    \"@timestamp\": \"2019-08-08T21:03:46.513Z\",\n    \"verb\": \"GET\",\n    \"@version\": \"1\",\n    \"referrer\": \"\\\"-\\\"\",\n    \"httpversion\": \"1.1\",\n    \"message\": \"::1 - - [08/Aug/2019:21:03:45 +0000] \\\"GET / HTTP/1.1\\\" 200\",\n    \"clientip\": \"::1\",\n    \"geoip\": {},\n    \"ecs\": {\n      \"version\": \"1.0.1\"\n    },\n    \"host\": {\n      \"os\": {\n        \"codename\": \"Core\",\n        \"name\": \"CentOS Linux\",\n        \"version\": \"7 (Core)\",\n        \"platform\": \"centos\",\n        \"kernel\": \"3.10.0-957.1.3.el7.x86_64\",\n        \"family\": \"redhat\"\n      },\n      \"id\": \"0a75ccb95b4644df88f159c41fdc7cfa\",\n      \"hostname\": \"node2\",\n      \"name\": \"node2\",\n      \"architecture\": \"x86_64\",\n      \"containerized\": false\n    },\n    \"bytes\": \"3700\"\n  },\n  \"fields\": {\n    \"@timestamp\": [\n      \"2019-08-08T21:03:46.513Z\"\n    ]\n  }\n...\n```"]