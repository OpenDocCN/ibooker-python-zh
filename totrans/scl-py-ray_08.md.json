["```py\n@serve.deployment\nclass Converter:\n    def __call__(self, request):\n        if request.query_params[\"type\"] == 'CF' :\n            return {\"Fahrenheit temperature\":\n                        9.0/5.0 * float(request.query_params[\"temp\"]) + 32.0}\n        elif request.query_params[\"type\"] == 'FC' :\n            return {\"Celsius temperature\":\n                        (float(request.query_params[\"temp\"]) - 32.0) * 5.0/9.0 }\n        else:\n            return {\"Unknown conversion code\" : request.query_params[\"type\"]}\n\nConverter.deploy()\n```", "```py\nprint(requests.get(\"http://127.0.0.1:8000/Converter?temp=100.0&type=CF\").text)\nprint(requests.get(\"http://127.0.0.1:8000/Converter?temp=100.0&type=FC\").text)\nprint(requests.get(\"http://127.0.0.1:8000/Converter?temp=100.0&type=CC\").text)\n```", "```py\n{\n  \"Fahrenheit temperature\": 212.0\n}\n{\n  \"Celsius temperature\": 37.77777777777778\n}\n{\n  \"Unknown conversion code\": \"CC\"\n}\n```", "```py\nfrom starlette.requests import Request\nhandle = serve.get_deployment('Converter').get_handle()\n\nprint(ray.get(handle.remote(Request(\n{\"type\": \"http\", \"query_string\": b\"temp=100.0&type=CF\"}))))\nprint(ray.get(handle.remote(Request(\n{\"type\": \"http\", \"query_string\": b\"temp=100.0&type=FC\"}))))\nprint(ray.get(handle.remote(Request(\n{\"type\": \"http\", \"query_string\": b\"temp=100.0&type=CC\"}))))\n```", "```py\n@serve.deployment\nclass Converter:\n    def __call__(self, request):\n        if request.query_params[\"type\"] == 'CF' :\n            return {\"Fahrenheit temperature\":\n                        9.0/5.0 * float(request.query_params[\"temp\"]) + 32.0}\n        elif request.query_params[\"type\"] == 'FC' :\n            return {\"Celsius temperature\":\n                        (float(request.query_params[\"temp\"]) - 32.0) * 5.0/9.0 }\n        else:\n            return {\"Unknown conversion code\" : request.query_params[\"type\"]}\n    def celcius_fahrenheit(self, temp):\n        return 9.0/5.0 * temp + 32.0\n\n    def fahrenheit_celcius(self, temp):\n        return (temp - 32.0) * 5.0/9.0\n\nConverter.deploy()\n# list current deploymente\nprint(serve.list_deployments())\n```", "```py\nprint(ray.get(handle.celcius_fahrenheit.remote(100.0)))\nprint(ray.get(handle.fahrenheit_celcius.remote(100.0)))\n```", "```py\n@serve.deployment(num_replicas=3)\nclass Converter:\n    def __init__(self):\n        from uuid import uuid4\n        self.id = str(uuid4())\n    def __call__(self, request):\n        if request.query_params[\"type\"] == 'CF' :\n            return {\"Deployment\": self.id, \"Fahrenheit temperature\":\n                9.0/5.0 * float(request.query_params[\"temp\"]) + 32.0}\n        elif request.query_params[\"type\"] == 'FC' :\n            return {\"Deployment\": self.id, \"Celsius temperature\":\n                (float(request.query_params[\"temp\"]) - 32.0) * 5.0/9.0 }\n        else:\n            return {\"Deployment\": self.id, \"Unknown conversion code\":\n                request.query_params[\"type\"]}\n    def celcius_fahrenheit(self, temp):\n        return 9.0/5.0 * temp + 32.0\n\n    def fahrenheit_celcius(self, temp):\n        return (temp - 32.0) * 5.0/9.0\n\nConverter.deploy()\n# list current deployments\nprint(serve.list_deployments())\n```", "```py\n{'Deployment': '1d...0d', 'Fahrenheit temperature': 212.0}\n{'Deployment': '4d...b9', 'Celsius temperature': 37.8}\n{'Deployment': '00...aa', 'Unknown conversion code': 'CC'}\n```", "```py\n@serve.deployment(ray_actor_options={\"num_cpus\": 2, \"num_gpus\": 1})\n```", "```py\n@serve.deployment(route_prefix=\"/converter\")\n```", "```py\n@serve.deployment(route_prefix=\"/converter\")\n@serve.ingress(app)\nclass Converter:\n    @app.get(\"/cf\")\n    def celcius_fahrenheit(self, temp):\n        return {\"Fahrenheit temperature\": 9.0/5.0 * float(temp) + 32.0}\n\n    @app.get(\"/fc\")\n    def fahrenheit_celcius(self, temp):\n        return {\"Celsius temperature\": (float(temp) - 32.0) * 5.0/9.0}\n```", "```py\nprint(requests.get(\"http://127.0.0.1:8000/converter/cf?temp=100.0&\").text)\nprint(requests.get(\"http://127.0.0.1:8000/converter/fc?temp=100.0\").text)\n```", "```py\n@serve.deployment\ndef version_one(data):\n    return {\"result\": \"version1\"}\n\nversion_one.deploy()\n\n@serve.deployment\ndef version_two(data):\n    return {\"result\": \"version2\"}\n\nversion_two.deploy()\n```", "```py\n@serve.deployment(route_prefix=\"/versioned\")\nclass Canary:\n    def __init__(self, canary_percent):\n        from random import random\n        self.version_one = version_one.get_handle()\n        self.version_two = version_two.get_handle()\n        self.canary_percent = canary_percent\n\n    # This method can be called concurrently!\n    async def __call__(self, request):\n        data = await request.body()\n        if(random() < self.canary_percent):\n            return await self.version_one.remote(data=data)\n        else:\n            return await self.version_two.remote(data=data)\n```", "```py\n{'result': 'version2'}\n{'result': 'version2'}\n{'result': 'version1'}\n{'result': 'version2'}\n{'result': 'version1'}\n{'result': 'version2'}\n{'result': 'version2'}\n{'result': 'version1'}\n{'result': 'version2'}\n{'result': 'version2'}\n```", "```py\n@serve.deployment(route_prefix=\"/randomforest\")\nclass RandomForestModel:\n    def __init__(self, path):\n        with open(path, \"rb\") as f:\n            self.model = pickle.load(f)\n    async def __call__(self, request):\n        payload = await request.json()\n        return self.serve(payload)\n\n    def serve(self, request):\n        input_vector = [\n            request[\"fixed acidity\"],\n            request[\"volatile acidity\"],\n            request[\"citric acid\"],\n            request[\"residual sugar\"],\n            request[\"chlorides\"],\n            request[\"free sulfur dioxide\"],\n            request[\"total sulfur dioxide\"],\n            request[\"density\"],\n            request[\"pH\"],\n            request[\"sulphates\"],\n            request[\"alcohol\"],\n        ]\n        prediction = self.model.predict([input_vector])[0]\n        return {\"result\": str(prediction)}\n```", "```py\n@serve.deployment(route_prefix=\"/speculative\")\nclass Speculative:\n    def __init__(self):\n        self.rfhandle = RandomForestModel.get_handle(sync=False)\n        self.xgboosthandle = XGBoostModel.get_handle(sync=False)\n        self.grboosthandle = GRBoostModel.get_handle(sync=False)\n    async def __call__(self, request):\n        payload = await request.json()\n        f1, f2, f3 = await asyncio.gather(self.rfhandle.serve.remote(payload),\n                self.xgboosthandle.serve.remote(payload), \n                self.grboosthandle.serve.remote(payload))\n\n        rfresurlt = ray.get(f1)['result']\n        xgresurlt = ray.get(f2)['result']\n        grresult = ray.get(f3)['result']\n        ones = []\n        zeros = []\n        if rfresurlt == \"1\":\n            ones.append(\"Random forest\")\n        else:\n            zeros.append(\"Random forest\")\n        if xgresurlt == \"1\":\n            ones.append(\"XGBoost\")\n        else:\n            zeros.append(\"XGBoost\")\n        if grresult == \"1\":\n            ones.append(\"Gradient boost\")\n        else:\n            zeros.append(\"Gradient boost\")\n        if len(ones) >= 2:\n            return {\"result\": \"1\", \"methods\": ones}\n        else:\n            return {\"result\": \"0\", \"methods\": zeros}\n```"]