- en: Chapter 9\. Cloud Computing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 云计算
- en: 'Cloud computing is a term that creates the same confusion as other popular
    modern buzzwords, such as Big Data, AI, and Agile. When a term gets popular enough,
    it eventually means many things to many people. Here is a precise definition.
    The cloud is the delivery of on-demand computing services where you pay for what
    you use, just like any other utility: natural gas, electricity, or water.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算是一个术语，它像其他流行的现代术语一样会造成混淆，比如大数据、人工智能和敏捷。当一个术语变得足够流行时，最终会对很多人有很多含义。这里是一个精确的定义。云是按需提供计算服务的交付，您只需支付您使用的量，就像任何其他公用事业一样：天然气、电力或水。
- en: The top benefits of cloud computing include cost, speed, global scale, productivity,
    performance, reliability, and security. Let’s break down each one of these.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算的顶级好处包括成本、速度、全球规模、生产力、性能、可靠性和安全性。让我们逐个解析这些。
- en: Cost
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 成本
- en: There is no up-front cost and resources can be precisely metered to meet demand.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 没有前期成本，资源可以精确计量以满足需求。
- en: Speed
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 速度
- en: The cloud offers self-service, so an expert user can leverage the resources
    to build solutions quickly.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 云提供自助服务，因此专业用户可以利用资源快速构建解决方案。
- en: Global scale
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 全球规模
- en: All major cloud providers have a global scale, which means services can be provisioned
    all over the world to meet demand in a geographic region.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所有主要云提供商都具有全球规模，这意味着可以在世界各地提供服务，以满足地理区域的需求。
- en: Productivity
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 生产力
- en: Many tasks, such as racking servers, configuring network hardware, and physically
    securing a data center, no longer exist. Companies can focus on building core
    intellectual property versus reinventing the wheel.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 许多任务，如架设服务器、配置网络硬件和物理保护数据中心，已经不复存在。公司可以专注于构建核心知识产权，而不是重复造轮子。
- en: Performance
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 性能
- en: Unlike hardware you own, cloud hardware is continually upgraded, meaning that
    the fastest and latest hardware is always available on demand. All of the hardware
    is also joined together on low-latency and high-bandwidth infrastructure, creating
    an ideal high-performance environment.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与您拥有的硬件不同，云硬件不断升级，这意味着最快和最新的硬件始终按需可用。所有硬件还连接在一起，通过低延迟和高带宽的基础设施，创建了一个理想的高性能环境。
- en: Reliability
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 可靠性
- en: The core architecture of the cloud offers redundancy at every step. There are
    multiple regions and multiple data centers in each region. Cloud native architecture
    can design around these capabilities, leading to highly available architectures.
    Additionally, many core cloud services are themselves highly available, like Amazon
    S3, which has nine nines, or 99.999999999% reliability.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 云的核心架构在每一步都提供冗余。每个区域都有多个数据中心，每个数据中心都有多个。云原生架构可以围绕这些能力设计，从而实现高可用性架构。此外，许多核心云服务本身也具有高可用性，比如亚马逊S3，其可靠性为九个“9”，即99.999999999%。
- en: Security
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性
- en: You are only as good as your weakest link with security. By consolidating to
    centralized security, a higher level of security occurs. Problems such as physical
    access to a data center or encryption at rest become industry standard on day
    one.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您的安全性取决于最薄弱的环节。通过集中到中央化的安全性，可以实现更高级别的安全性。诸如物理访问数据中心或静止加密等问题，在第一天就成为行业标准。
- en: Cloud Computing Foundations
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云计算基础
- en: 'In some ways, it is hard to think about DevOps without also thinking about
    the cloud. Amazon describes the following as DevOps best practices: Continous
    Integration, Continous Delivery, Microservices, Infrastructure as Code, Monitoring
    and Logging, and Communication and Collaboration. Of these best practices, you
    could argue that all of them depend on the cloud’s existence. Even the harder
    to define practice of “Communication and Collaboration” is made possible by a
    modern suite of SaaS communication tools: Jira, Trello, Slack, GitHub, and others.
    Where do all of these SaaS communication tools run? In the cloud.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从某些方面来看，很难在不考虑云的情况下思考DevOps。亚马逊将以下内容描述为DevOps的最佳实践：持续集成、持续交付、微服务、基础设施即代码、监控与日志、以及沟通与协作。在这些最佳实践中，可以说所有这些都依赖于云的存在。即使是较难定义的“沟通与协作”实践，也是通过现代化的SaaS沟通工具套件实现的：Jira、Trello、Slack、GitHub等。所有这些SaaS沟通工具都运行在云上。
- en: 'What is unique about the modern cloud era? There are at least three defining
    characteristics: theoretical infinite computing resources, on-demand access computing
    resources, and no up-front commitment of capital. Hidden inside these characteristics
    is DevOps skills Pareto distribution.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现代云时代有什么独特之处？至少有三个定义性特征：理论上的无限计算资源，按需访问计算资源以及没有前期资本承诺。这些特征内涵了DevOps技能的帕累托分布。
- en: In practice, the cloud becomes incredibly cost effective when used in a manner
    that supports the real efficiencies of the cloud. On the other hand, for unsophisticated
    organizations using the cloud, it can be incredibly expensive because they are
    not taking advantage of the core features of the cloud. It is probably fair to
    say that 80% of the gross profits of the cloud in the early days were derived
    from unsophisticated users who left instances idle, chose the wrong instances
    (too big), didn’t architect for auto-scaling, or used software architectures that
    were noncloud native, such as shoving everything into a relational database. Likewise,
    the remaining 20% of gross profits were derived from incredibly thrifty organizations
    with exceptional DevOps skills.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，云在支持云的真正效率方面使用时变得极具成本效益。另一方面，对于使用云计算的不成熟组织来说，可能会非常昂贵，因为他们没有利用云计算的核心功能。可以说，在云计算的早期阶段，80%的总利润来自于未成熟的用户，他们让实例空闲，选择了错误的实例（过大），没有为自动扩展进行架构设计，或者使用了非云原生的软件架构，例如将所有内容都塞进关系数据库中。同样，其余20%的总利润来自于具有卓越DevOps技能的极为节俭的组织。
- en: Before the cloud existed, there was a fixed cost that never went away. This
    cost was fixed both in terms of money and in developer time. A data center had
    to be maintained by a team of people, and that was a full-time job and very expensive.
    As the cloud has grown in maturity, only the best of the best now work in data
    centers, and they are working for incredibly sophisticated organizations like
    Google, Microsoft, and Amazon. It isn’t statistically possible for a small company
    to have the hardware talent of a data center engineer at that level, at least
    over the long term.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在云存在之前，有一个永远不会消失的固定成本。这个成本无论是在金钱上还是在开发人员时间上都是固定的。一个数据中心必须由一个团队来维护，这是一份全职工作，而且非常昂贵。随着云的成熟发展，现在只有最优秀的人才才会在数据中心工作，他们为像谷歌、微软和亚马逊这样极为成熟的组织工作。从统计上讲，小公司无法长期拥有那些水平的数据中心工程师硬件技能。
- en: 'A fundamental law of economics is the principle of comparative advantage. Instead
    of looking at what the cloud costs and thinking that you can save money by doing
    it yourself, look at the *opportunity cost* of not doing something else. Most
    organizations have concluded that:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 经济学的一个基本法则是比较优势原则。与其看云计算的成本，然后认为自己可以通过自己动手省钱，不如看看不做某些事情的*机会成本*。大多数组织已经得出结论：
- en: They cannot compete at the level of Google, Amazon, and Microsoft in data center
    expertise.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 他们无法在数据中心专业知识方面与谷歌、亚马逊和微软竞争。
- en: Paying for cloud services allows the company to focus on other areas where they
    can use their unique skills.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支付云服务费用使公司能够专注于其他领域，利用他们独特的技能。
- en: Netflix has decided to focus on delivering streaming services and creating original
    content than running its own data centers. If you look at the Netflix 11-year
    stock price from 2008 to 2019 ([Figure 9-1](#Figure-9-1)), it’s hard to argue
    with this strategy.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Netflix决定专注于提供流媒体服务和创作原创内容，而不是运营自己的数据中心。如果你看一下Netflix从2008年到2019年的11年股票价格（[图9-1](#Figure-9-1)），很难反驳这一策略。
- en: '![Netflix 11-year stock price](assets/pydo_0901.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![Netflix 11年股票价格](assets/pydo_0901.png)'
- en: Figure 9-1\. Netflix 11-year stock price
  id: totrans-27
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9-1\. Netflix 11年股票价格
- en: What is unique about Netflix, though, is its dedication to operational excellence
    in the cloud. Current or former Netflix employees have given numerous talks at
    conferences, developed and released tools on GitHub, and written articles and
    books on DevOps and cloud computing topics. This further supports the point that
    it isn’t enough to realize that the cloud is the correct choice, but this decision
    must be backed up by operational excellence. Otherwise, an organization risks
    being the equivalent of the gym member who signs up for a year membership, yet
    only goes for three weeks. The members that don’t go to the gym subsidize the
    cost of the gym for the other members who attend regularly.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Netflix 的独特之处在于其在云端运营卓越性上的承诺。目前或曾经在 Netflix 工作的员工在各大会议上发表了许多演讲，在 GitHub 上开发和发布了工具，并在
    DevOps 和云计算主题上撰写了文章和书籍。这进一步支持了这样一个观点：仅仅意识到云是正确的选择是不够的，这个决定必须以卓越的运营实践为支撑。否则，一个组织可能会像那些注册了一年会员却只去了三周健身房的人一样，那些不去健身房的会员在经济上补贴了那些经常去的会员。
- en: Types of Cloud Computing
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云计算的类型
- en: 'There are several main types of cloud computing: public cloud, private cloud,
    hybrid cloud, and multicloud. The majority of the time when you hear about the
    cloud, it is about a public cloud. It is isn’t the only type of cloud, however.
    A private cloud is used exclusively by an organization, and is either physically
    located in that organization’s data center, or it can be hosted for an organization
    by another company. Some examples of private cloud providers are HPE, VMware,
    Dell, and Oracle. A popular open source private cloud option is OpenStack. An
    excellent example of how that could look in practice is that Rackspace, a more
    niche alternative in the hosting space, is one of the largest providers of OpenStack
    private clouds as a service.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算有几种主要类型：公有云、私有云、混合云和多云。大多数情况下，当我们谈论云时，指的是公有云。但这并不是唯一的云类型。私有云由组织独占使用，可以是物理上位于该组织的数据中心，也可以由另一家公司为该组织托管。一些私有云提供商包括
    HPE、VMware、戴尔和甲骨文。一个流行的开源私有云选项是 OpenStack。实际上的一个很好的例子是，Rackspace，一个在托管空间中更为专业的替代品，是
    OpenStack 私有云即服务的最大提供商之一。
- en: A more flexible option is the hybrid cloud. The hybrid cloud combines both a
    private and public cloud. An example of this type of architecture involves using
    the public cloud for situations that require scalability and extra capacity, and
    using a private cloud for day-to-day operations. Another example could involve
    a specialized hardware architecture, say, a farm of GPUs that perform deep learning
    in a private cloud, and the connected public cloud serves at the core infrastructure.
    Even major cloud vendors are entering this space. A good example is the [Anthos
    platform](https://cloud.google.com/anthos) from Google. This platform does the
    hard work of linking an on-premises data center with GCP to allow workflows, such
    as running Kubernetes clusters in both locations in a seamless manner.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 更加灵活的选择是混合云。混合云结合了私有云和公有云。这种架构的一个例子是在需要可伸缩性和额外容量的情况下使用公有云，而在日常运营中使用私有云。另一个例子可能涉及专用硬件架构，比如在私有云中进行深度学习的
    GPU 农场，而连接的公有云则作为核心基础设施。即使是主要的云供应商也进入了这个领域。一个很好的例子是谷歌的 [Anthos 平台](https://cloud.google.com/anthos)。这个平台通过在本地数据中心与
    GCP 之间建立链接来完成难以置信的工作，允许以无缝的方式运行 Kubernetes 集群。
- en: Finally, multicloud is a choice that is enabled partially by modern DevOps technologies
    such as Docker containers, and IaC solutions such as Terraform. A multicloud strategy
    is one that involves using multiple clouds at the same time. An excellent example
    of this is running jobs in containers on multiple clouds simultaneously. Why would
    you do this? For one reason, you could decide to run jobs on AWS Spot Instances
    when the price was suitable to make a profit, but on GCP when AWS was too expensive.
    Tools like Terraform allow you to abstract away cloud concepts into a familiar
    configuration language, while containers allow code and an execution environment
    to travel to any destination that can run a container.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，多云是一种选择，部分由现代 DevOps 技术（如 Docker 容器）和基础设施即代码（IaC）解决方案（如 Terraform）所启用。多云策略涉及同时使用多个云。一个很好的例子是在多个云上同时运行容器中的作业。为什么这样做？首先，你可以决定在
    AWS Spot 实例价格适宜以赚取利润时运行作业，但在 AWS 价格过高时切换到 GCP。像 Terraform 这样的工具允许你将云概念抽象为熟悉的配置语言，而容器允许代码和执行环境在能运行容器的任何目标上运行。
- en: Types of Cloud Services
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云服务的类型
- en: 'There are five main types of cloud services: Infrastructure as a Service (IaaS),
    Metal as a Service (MaaS), Platform as a Service (PaaS), serverless, and Software
    as a Service (SaaS). Each of these cloud services works at a different layer of
    abstraction and has pros and cons. Let’s break down each service.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 云服务有五种主要类型：基础设施即服务（IaaS），金属即服务（MaaS），平台即服务（PaaS），无服务器，以及软件即服务（SaaS）。这些云服务在不同的抽象层上工作，并各有利弊。让我们来详细了解每一种服务。
- en: Infrastructure as a Service
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础设施即服务
- en: IaaS is a lower-level category that includes the ability to rent virtual machines
    by the minute, access object storage, provision software-defined network (SDN)
    and software-defined storage (SDS), and bid for an available virtual machine.
    This level of service is most closely associated with AWS, especially in the early
    years (2006) when Amazon launched S3 cloud storage, SQS (Simple Queue Service),
    and EC2 (virtual machines).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Infrastructure as a Service（基础设施即服务，IaaS）是一个低级别的类别，包括按分钟租用虚拟机、访问对象存储、提供软件定义网络（SDN）和软件定义存储（SDS），以及竞标可用虚拟机的能力。这种服务水平与AWS密切相关，特别是在早期（2006年）亚马逊推出S3云存储、SQS（简单队列服务）和EC2（虚拟机）时。
- en: The advantage of this service for an organization with strong expertise in DevOps
    is that it can be incredibly cost-effective and reliable with a small team of
    people. The disadvantage is that IaaS has a steep learning curve, and when administered
    inefficiently, it can be expensive in terms of cost and human labor. In the Bay
    Area during 2009–2019, this scenario played out in real-time on AWS at many companies.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这项服务对于在DevOps方面拥有强大专业知识的组织来说具有巨大的成本效益和可靠性，只需少数人就能完成。缺点是IaaS有陡峭的学习曲线，当管理效率低下时，它在成本和人力上可能会非常昂贵。在2009年至2019年期间的旧金山湾区，这种情况在许多公司的AWS上实时发生。
- en: 'One story that brings this home occurred when Noah ran engineering at a SaaS
    company that provided monitoring and search tools. During his first month on the
    job, there were two mission-critical problems involving the cloud. The first problem,
    which occurred during week one, was that the SaaS billing system misconfigured
    the storage system. The company was deleting data from paying customers! The gist
    of the problem was that they didn’t have the necessary DevOps infrastructure needed
    to succeed in the cloud: no build server, no testing, no real isolated development
    environments, no code review, and limited ability to deploy software automatically.
    The fix Noah implemented were these DevOps practices, while a figurative raging
    fire burned.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一个令人铭记的故事是，当诺亚管理一个提供监控和搜索工具的SaaS公司的工程部门时发生的。在他上任的第一个月，云端发生了两个关乎任务的严重问题。第一个问题发生在第一周，是SaaS计费系统错误配置了存储系统。公司正在删除付费客户的数据！问题的要点是他们没有成功在云端运作所需的DevOps基础设施：没有构建服务器，没有测试，没有真正的隔离开发环境，没有代码审查，以及有限的自动部署软件能力。诺亚采取的解决措施是这些DevOps实践，就在一场象征性的大火正在燃烧的时候。
- en: Note
  id: totrans-39
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: A developer did set fire to the office by cooking bacon in a toaster oven. Noah
    thought he smelled smoke, so he walked into the kitchen and flames were crawling
    up the walls and the ceiling. He was so stunned at the sheer irony of the situation
    that he sat there for a few seconds, soaking it in. Fortunately, a quick-thinking
    co-worker (his product manager) grabbed the fire extinguisher and put out the
    fire.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一名开发人员曾用烤面包机烤培根，导致办公室起火。诺亚闻到了烟味，于是走进了厨房，发现火焰正顺着墙壁和天花板蔓延。他对情况的讽刺意味感到震惊，所以他坐在那里几秒钟，沉浸在其中。幸运的是，一个反应迅速的同事（产品经理）拿起了灭火器，扑灭了火势。
- en: A second, more serious, problem with our cloud architecture occurred shortly
    afterward. All of the developers in the company had to be on call so that there
    would be 24/7 coverage (except the CTO/founder who often wrote code that was directly
    or indirectly responsible for outages. . .more on that later). One night when
    Noah was on call, he was awoken at 2 A.M. by a call from the CEO/founder on his
    cell phone. He told Noah they had been hacked and that the entire SaaS system
    did not exist anymore. There were no web servers, search endpoints, or any other
    virtual machine running the platform in existence. Noah asked why he hadn’t received
    a page, and the CEO said the monitoring system was also deleted. Noah decided
    to drive into work at 2 A.M. and work on the problem from there.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的云架构随后发生了第二个更为严重的问题。公司所有开发人员都必须值班，以确保24/7覆盖（除了CTO/创始人经常编写直接或间接导致故障的代码......稍后再说）。一天晚上，当诺亚值班时，他在凌晨2点被CEO/创始人的手机电话吵醒。他告诉诺亚他们被黑客攻击了，整个SaaS系统不复存在。平台上没有任何网页服务器、搜索端点或任何其他虚拟机在运行。诺亚问为什么他没有收到警报，CEO说监控系统也被删除了。诺亚决定凌晨2点驱车去公司解决问题。
- en: As more information surfaced, the issue became apparent. The CEO and founder
    had set up the AWS account initially, and all emails about service interruptions
    went to his email. For several months, Amazon had been sending him emails about
    how virtual machines in our region, Northern Virginia, needed to be retired, and
    that in the coming months they would be deleted. Well, that day eventually came,
    and in the middle of the night, that entire company’s servers ceased to exist.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 随着更多信息浮出水面，问题变得显而易见。CEO和创始人最初设置了AWS账户，并且所有有关服务中断的电子邮件都发送到他的邮箱。几个月来，亚马逊一直向他发送关于我们所在地区北弗吉尼亚的虚拟机需要退役并且即将删除的电子邮件。最终那一天到来了，在深夜，整个公司的服务器都停止存在了。
- en: Noah found this out as he drove into work, so he then focused on building an
    entire SaaS company again from scratch, using the source code in GitHub. It was
    at this point that Noah began to understand both the power and the complexity
    of AWS. It took him from 2 A.M. until about 8 P.M. to get the SaaS system operational
    and able to accept data, process payments, and serve out dashboards. It took another
    48 hours to completely restore all of the data from backups.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当诺亚开车去上班时，他发现了这个问题，于是专注于从GitHub源代码重新构建一个完整的SaaS公司。从这一点开始，诺亚开始理解AWS的强大和复杂性。他从凌晨2点到下午8点之间，将SaaS系统恢复正常，能够接收数据、处理支付并提供仪表板服务。又花了48小时完全恢复所有备份数据。
- en: One of the reasons it took so long to get things running again is that the deployment
    process was centralized around a forked version of Puppet that a previous employee
    created but never checked into version control. Fortunately, Noah was able to
    find a copy of that version of Puppet at around 6 A.M. on one lone machine that
    survived the carnage. If this machine hadn’t existed, it might have been the end
    of the company. It would have taken perhaps a week to completely rebuild a company
    of that complexity without some Infrastructure as Code (IAC) scaffolding.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 导致恢复时间如此之长的原因之一是部署过程集中在先前员工创建但从未提交到版本控制的Puppet的分支版本上。幸运的是，诺亚在凌晨6点左右找到了存活下来的孤立机器上的那个版本的Puppet的副本。如果这台机器不存在，可能会导致公司的灭亡。在没有基础设施即代码（IAC）支撑的情况下，完全重建这种复杂公司可能需要一周时间。
- en: An experience this stressful that had a reasonably happy ending taught him a
    lot. Noah realized this was the trade-off of the cloud; it was incredibly powerful,
    but the learning curve was crushing even for VC-funded startups in the Bay Area.
    Now back to the CTO/founder who wasn’t on call, but checked code into production
    (without using a build server or continuous integration system). This person wasn’t
    the villain of the story. It is possible that if Noah himself was the CTO/founder
    of a company at a certain point in his career, he might have made the same mistakes.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常令人压力巨大的经历，但最终有一个相对幸运的结局，给他带来了很多教训。诺亚意识到这是云计算的一个折衷之处；虽然非常强大，但学习曲线对于旧金山湾区的风投支持的初创公司来说压力巨大。现在回到那位CTO/创始人，他不在值班，但是在没有使用构建服务器或持续集成系统的情况下将代码推送到生产环境。这个人并不是故事的反派。诺亚本人在职业生涯的某个阶段如果成为一家公司的CTO/创始人，可能也会犯同样的错误。
- en: The real issue is the power dynamic. Hierarchy does not equal being correct.
    It is easy to get drunk on your power and believe that because you are in charge,
    what you do always makes sense. When Noah ran a company, he made similar mistakes.
    The key takeaway is that the process has to be right, not the individual. If it
    isn’t automated, it is broken. If it isn’t going through some type of automated
    quality control test, then it is also broken. If the deployment isn’t repeatable,
    it is also broken.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的问题是权力动态。等级制度并不等同于正确性。很容易沉迷于自己的权力，并认为因为你掌管着，你所做的一切总是有道理的。当诺亚经营一家公司时，他也犯了类似的错误。关键要点是过程必须正确，而不是个人。如果不自动化，那就是有问题的。如果没有经过某种类型的自动化质量控制测试，那也是有问题的。如果部署不可重复，那也是有问题的。
- en: One final story to share about this company involves monitoring. After those
    two initial crises, the symptoms resolved, but the underlying diseases were still
    malignant. There was an ineffective engineering process in the company. Another
    story highlights the underlying problem. There was a homegrown monitoring system
    (again, initially created by the founders) that on average generated alerts every
    3-4 hours, 24 hours a day.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要分享的关于这家公司的故事涉及监控。在这两次初始危机之后，症状得到了缓解，但根本疾病仍然是恶性的。该公司存在一个无效的工程过程。另一个故事突显了根本问题。有一个自制的监控系统（再次由创始人最初创建），平均每
    3-4 小时生成一次警报，每天 24 小时。
- en: 'Because everyone in engineering except the CTO was on call, most of the engineering
    staff was always sleep deprived because they received alerts about the system
    not working every night. The “fix” to the alerts was to restart services. Noah
    volunteered to be on call for one month straight to allow engineering the time
    to fix the problem. This sustained period of suffering and lack of sleep led him
    to realize several things. One, the monitoring system was no better than random.
    He could potentially replace the entire system with this Python script:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于除了首席技术官外，所有工程人员都在值班，大部分工程人员总是睡眠不足，因为他们每晚都会接到系统不工作的警报。对警报的“修复”是重新启动服务。诺亚自愿连续一个月值班，以便工程有时间解决问题。这段持续的痛苦和缺觉期导致他意识到几件事情。首先，监控系统不比随机更好。他可能用这个
    Python 脚本完全替换整个系统：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once he realized this, he dug into the data and created a historical picture
    of every single alert for the last year by day (note that these alerts were meant
    to be actionable and to “wake you up”). From [Figure 9-2](#Figure-9-2), you can
    see that not only did the alerts not make sense, but they were increasing to a
    frequency that was ridiculous in hindsight. They were “cargo culting” engineering
    best practices and figuratively waving palm tree branches at a dirt runway filled
    with airplanes built out of straw.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦他意识到这一点，他深入挖掘数据，并按天创建了过去一年每个单独警报的历史图片（注意这些警报旨在可行动并“唤醒你”）。从[图 9-2](#Figure-9-2)中可以看出，这些警报不仅毫无意义，而且在事后看来频率还荒谬增长。他们在“货物崇拜”工程最佳实践，并象征性地在一个由稻草建造的泥土跑道上挥舞棕榈树枝。
- en: '![pydo 0902](assets/pydo_0902.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![pydo 0902](assets/pydo_0902.png)'
- en: Figure 9-2\. SaaS company alerts daily
  id: totrans-53
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-2\. SaaS 公司每日警报
- en: In looking at the data, it was even more distressing to learn that engineers
    had spent YEARS of their lives responding to pages and getting woken up at night,
    and it was utterly useless. The suffering and sacrifice accomplished nothing and
    reinforced the sad truth that life is not fair. The unfairness of the situation
    was quite depressing, and it took quite a bit of convincing to get people to agree
    to turn off the alerts. There is a built-in bias in human behavior to continue
    to do what you have always done. Additionally, because the suffering was so severe
    and sustained, there was a tendency to attribute a deeper meaning to it. Ultimately,
    it was a false god.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 查看数据后，了解到工程师们花费了多年的生命响应页面和夜间被唤醒，却毫无意义。这种痛苦和牺牲一无所获，强化了生活不公的悲哀真相。这种情况的不公非常令人沮丧，并且需要大量说服才能让人们同意关闭警报。人类行为中有一种固有的偏见，继续做你一直做过的事情。此外，由于痛苦如此严重和持久，往往倾向于赋予更深层次的意义。最终，这是一个虚假的神。
- en: 'The retrospective on using AWS cloud IaaS for that particular company is, in
    fact, the selling points of DevOps:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这家特定公司使用 AWS 云 IaaS 的回顾实际上是 DevOps 的卖点：
- en: 'You must have a delivery pipeline and feedback loop: build, test, release,
    monitor, and then plan.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你必须有交付流水线和反馈循环：构建、测试、发布、监控，然后计划。
- en: Development and operations are not silos. If the CTO is writing code, they should
    also be on call (the pain and suffering from years of being woken up would serve
    as the correct feedback loop).
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发与运维不是独立的。如果首席技术官在编写代码，他们也应该负责值班（多年被惊醒的痛苦和苦难将成为正确的反馈循环）。
- en: Status in a hierarchy is not more important than the process. There should be
    a collaboration between team members that emphasizes ownership and accountability,
    regardless of title, pay, or experience level.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 地位在等级制度中并不比流程更重要。团队成员之间应该有一种强调所有权和责任的合作关系，不论职称、薪水或者经验水平。
- en: Speed is a fundamental requirement of DevOps. As a result, microservices and
    continuous delivery are requirements because they let teams take ownership of
    their services and release software more quickly.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 速度是DevOps的基本要求。因此，微服务和持续交付是必需的，因为它们使团队能够快速拥有自己的服务并发布软件。
- en: Rapid delivery is a fundamental requirement of DevOps, but it also requires
    continuous integration, continuous delivery, and effective and actionable monitoring
    and logging.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 快速交付是DevOps的基本要求，但它还需要持续集成、持续交付以及有效和可操作的监控和日志记录。
- en: It provides the ability to manage infrastructure and development processes at
    scale. Automation and consistency are hard requirements. Using IaC to manage development,
    testing, and production environments in a repeatable and automated manner are
    the solution.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它提供了在规模上管理基础设施和开发过程的能力。自动化和一致性是硬性要求。使用基础设施即代码（IaC）以可重复和自动化的方式管理开发、测试和生产环境是解决方案。
- en: Metal as a Service
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**MaaS**（Metal as a Service）'
- en: MaaS allows you to treat physical servers like virtual machines. The same ease
    of use in managing clusters of virtual machines works for physical hardware. MaaS
    is the name of a service offering by Canonical, which the owner of Canonical,
    Mark Shuttleworth, describes as “cloud semantics” to the bare metal world. MaaS
    could also refer to the concept of using physical hardware from a vendor that
    treats hardware much like virtualized hardware. An excellent example of a company
    like this is SoftLayer, a bare metal provider acquired by IBM.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**MaaS**（Metal as a Service）允许你像虚拟机一样处理物理服务器。在管理虚拟机集群时同样便捷的使用体验也适用于物理硬件。MaaS是由Canonical提供的一项服务，Canonical的所有者马克·舒特尔沃斯特称其为“云语义”进入裸金属世界。MaaS还可以指的是使用将硬件视为虚拟化硬件的供应商概念。这方面的一个很好的例子是SoftLayer，这是一家被IBM收购的裸金属提供商。'
- en: In the pro category, having full control over hardware does have a certain appeal
    for niche applications. An excellent example of this could be using a GPU-based
    database. In practice, a regular public cloud could offer similar services, so
    a full cost-benefit analysis helps when justifying when to use MaaS.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在正面的优势中，对硬件拥有完全控制确实对特定应用具有一定吸引力。这方面的一个很好的例子可以是使用基于GPU的数据库。实际上，常规公共云也可以提供类似的服务，因此进行全面的成本效益分析有助于在何时使用MaaS时进行合理的辩解。
- en: Platform as a Service
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 平台即服务（Platform as a Service）
- en: PaaS is a complete development and deployment environment that has all of the
    resources necessary to create cloud services. Examples of this include Heroku
    and Google App Engine. PaaS differs from IaaS in that it has development tools,
    database management tools, and high-level services that offer “point and click”
    integration. Examples of the types of services that can be bundled are an authentication
    service, a database service, or a web application service.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: PaaS（Platform as a Service）是一个完整的开发和部署环境，具备创建云服务所需的所有资源。其例子包括Heroku和Google App
    Engine。PaaS与IaaS不同之处在于它拥有开发工具、数据库管理工具以及高级服务，提供“点对点”集成。可以捆绑的服务类型的例子包括认证服务、数据库服务或Web应用服务。
- en: A justifiable criticism of PaaS is that it can be much more expensive in the
    long term than IaaS, as discussed previously; however this depends on the environment.
    If the organization is unable to enact DevOps behaviors, then the cost is a moot
    point. In that case, it would be better to pay for a more expensive service that
    provides more of those capabilities. The opportunity cost of an organization that
    needs to learn the advanced capabilities of managing an IaaS deployment may be
    too high for the short life span of a startup. It may be smarter for an organization
    to offload those capabilities to a PaaS provider.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对 PaaS 的一个合理批评是，长期来看它可能比 IaaS 更昂贵，正如之前讨论的；然而这取决于环境。如果组织无法执行 DevOps 行为，那么成本就成了无关紧要的点。在这种情况下，最好支付更昂贵的服务，提供更多这些能力。对于需要学习管理
    IaaS 部署高级功能的组织来说，机会成本可能对初创企业的短期生命周期来说太高。对于一个组织来说，把这些能力外包给 PaaS 提供商可能更明智。
- en: Serverless Computing
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无服务器计算
- en: Serverless is one of the newer categories of cloud computing, and it is still
    actively in development. The real promise of serverless is the ability to spend
    more time building applications and services and less or no time thinking about
    how they run. Every major cloud platform has a serverless solution.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器是云计算的新类别之一，仍然在积极发展中。无服务器的真正承诺在于能够花更多时间构建应用程序和服务，而不需要或几乎不需要考虑它们的运行方式。每个主要的云平台都有无服务器解决方案。
- en: The building block for serverless solutions is a compute node or Function as
    a Service (FaaS). AWS has Lambda, GCP has Cloud Functions, and Microsoft has Azure
    Functions. Traditionally, the underlying execution of these cloud functions has
    been abstracted away for a runtime, i.e., Python 2.7, Python 3.6, or Python 3.7\.
    All of these vendors support Python runtimes, and in some cases, they also support
    customizing the underlying runtime via a customized Docker container. Here is
    an example of a straightforward AWS Lambda function that grabs the first page
    of Wikipedia.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器无关解决方案的构建模块是计算节点或函数即服务（FaaS）。AWS 拥有 Lambda，GCP 拥有 Cloud Functions，Microsoft
    拥有 Azure Functions。传统上，这些云函数的底层执行已经被抽象为一个运行时，即 Python 2.7、Python 3.6 或 Python
    3.7\. 所有这些供应商都支持 Python 运行时，并且在某些情况下，它们还支持通过定制的 Docker 容器来定制底层运行时。这里是一个简单的 AWS
    Lambda 函数示例，用于获取维基百科的第一页。
- en: There are a few things to point out about this Lambda function. The logic itself
    is in the `lambda_handler` and it takes two arguments. The first argument, `event`,
    is from whatever has triggered it. The Lambda could be anything from an Amazon
    Cloud Watch event timer to running it with a payload crafted from the AWS Lambda
    Console. The second argument, `context`, has methods and properties that provide
    information about the invocation, function, and execution environment.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有几点需要指出关于这个 Lambda 函数。逻辑本身在 `lambda_handler` 中，并且它接受两个参数。第一个参数 `event` 来自于触发它的任何内容。Lambda
    可以是从 Amazon Cloud Watch 事件定时器到使用从 AWS Lambda 控制台制定的负载运行。第二个参数 `context` 具有方法和属性，提供有关调用、函数和执行环境的信息。
- en: '[PRE2]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To use the Lambda function a `JSON` payload is sent in:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Lambda 函数，需要发送一个 `JSON` 负载：
- en: '[PRE3]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output of the Lambda is also a `JSON` payload:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 的输出也是一个 `JSON` 负载：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'One of the most potent aspects of FaaS is the ability to write code that responds
    to events versus code that is continuously running: i.e., a Ruby on Rails application.
    FaaS is a cloud-native capability that truly exploits what a cloud is best at—elasticity.
    Additionally, the development environment for writing lambda functions has evolved
    considerably.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: FaaS 最强大的一点之一是能够编写响应事件而不是持续运行的代码：例如 Ruby on Rails 应用程序。FaaS 是云原生能力，真正利用了云的弹性特性。此外，编写
    Lambda 函数的开发环境已经有了很大进步。
- en: Cloud9 on AWS is a browser-based development environment with deep integrations
    into AWS ([Figure 9-3](#Figure-9-3)).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 的 Cloud9 是一个基于浏览器的开发环境，与 AWS 深度集成（[图 9-3](#Figure-9-3)）。
- en: '![pydo 0903](assets/pydo_0903.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![pydo 0903](assets/pydo_0903.png)'
- en: Figure 9-3\. Using AWS Cloud9
  id: totrans-80
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-3\. 使用 AWS Cloud9
- en: Cloud9 is now my preferred environment for writing AWS Lambda functions and
    for running code that needs the AWS API keys. Cloud9 has built-in tools for writing
    AWS Lambda functions that make it straightforward to build and test them locally,
    as well as deploy them into AWS.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud9 现在是我编写 AWS Lambda 函数和运行需要 AWS API 密钥的代码的首选环境。Cloud9 内置了用于编写 AWS Lambda
    函数的工具，使得在本地构建和测试它们，以及部署到 AWS 中变得简单直观。
- en: '[Figure 9-4](#Figure-9-4) shows how you can pass in `JSON` payload and test
    a lambda locally in Cloud9\. Testing this way is a significant advantage of the
    evolving platform.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 9-4](#Figure-9-4) 显示了如何传递 `JSON` 负载并在 Cloud9 中本地测试 lambda。这种测试方式是这一不断发展平台的显著优势。'
- en: '![pydo 0904](assets/pydo_0904.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![pydo 0904](assets/pydo_0904.png)'
- en: Figure 9-4\. Running Lambda Function in Cloud9
  id: totrans-84
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-4\. 在 Cloud9 中运行 Lambda 函数
- en: Likewise, Google Cloud starts you off with the GCP Cloud Shell environment (see
    [Figure 9-5](#Figure-9-5)). Cloud Shell also allows you to bootstrap development
    quickly, with access to critical command-line tools and a full development environment.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，Google Cloud 在你使用 GCP 云 Shell 环境时开始启动你（参见 [图 9-5](#Figure-9-5)）。云 Shell 还允许您快速启动开发，访问关键命令行工具和完整的开发环境。
- en: '![pydo 0905](assets/pydo_0905.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![pydo 0905](assets/pydo_0905.png)'
- en: Figure 9-5\. GCP Cloud Shell
  id: totrans-87
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-5\. GCP 云 Shell
- en: The GCP Cloud Shell editor (see [Figure 9-6](#Figure-9-6)) is a full-fledged
    IDE with syntax highlighting, a file explorer, and many other tools generally
    found in a traditional IDE.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: GCP 云 Shell 编辑器（参见 [图 9-6](#Figure-9-6)）是一个功能齐全的 IDE，具有语法高亮显示、文件浏览器和许多传统 IDE
    中通常找到的其他工具。
- en: '![pydo 0906](assets/pydo_0906.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![pydo 0906](assets/pydo_0906.png)'
- en: Figure 9-6\. GCP Cloud Shell editor
  id: totrans-90
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-6\. GCP 云 Shell 编辑器
- en: The key takeaway is that with the cloud, it is also best to use native development
    tools when possible. It reduces security holes, limits slowdowns from transferring
    data from your laptop to the cloud, and increases productivity due to the deep
    integration with its native environment.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 关键要点是，在云端，最好在可能的情况下使用本地开发工具。这样做可以减少安全漏洞，限制由于从笔记本电脑传输数据到云端而导致的减速，并因其与本地环境的深度集成而提高生产力。
- en: Software as a Service
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件即服务
- en: SaaS and the cloud have been joined together from day one. As the cloud gets
    features, SaaS products continue to distribute innovation on top of the innovations
    of the cloud. There are many advantages of SaaS products, especially in the DevOps
    space. For example, why build a monitoring solution yourself if you can *rent
    it*, especially when first starting. Additionally, many core DevOps principles,
    such as continuous integration and continuous delivery, are also made available
    by SaaS applications offered by cloud vendors, such as AWS CodePipeline, or third-party
    SaaS solutions like CircleCI.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS 和云从一开始就被结合在一起。随着云端的功能不断增加，SaaS 产品继续在云端创新的基础上分发创新。SaaS 产品有许多优势，特别是在 DevOps
    领域。例如，如果你刚开始时可以*租用*一个监控解决方案，为什么要自己建造呢？此外，许多核心的 DevOps 原则，如持续集成和持续交付，也可以通过云供应商提供的
    SaaS 应用（如 AWS CodePipeline）或第三方 SaaS 解决方案（如 CircleCI）实现。
- en: In many cases, the ability to mix IaaS, PaaS, and SaaS allows modern companies
    to develop products in a much more reliable and efficient manner than they could
    10 years prior. Every year it gets easier to build software, thanks to the rapid
    evolution not just of the cloud, but of the SaaS companies building solutions
    on top of the cloud.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，能够混合使用 IaaS、PaaS 和 SaaS 允许现代公司以比 10 年前更可靠和高效的方式开发产品。由于云端以及构建在云端之上的 SaaS
    公司的快速演变，每年构建软件变得更加容易。
- en: Infrastructure as Code
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础设施即代码
- en: IaC is covered in much greater detail in [Chapter 10](ch10.html#infra-as-code);
    refer to that chapter for a more detailed breakdown of IaC. Regarding the cloud
    and DevOps, though, IaC is a fundamental aspect of real-world cloud computing.
    IaC is a must-have capability to implement DevOps practices on the cloud.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: IaC 在 [第 10 章](ch10.html#infra-as-code) 中有更详细的介绍；请参考该章节以获取 IaC 的更详细说明。然而，就云和
    DevOps 而言，IaC 是实施真实世界云计算的基本要素。在云上实施 DevOps 实践必须具备 IaC 的能力。
- en: Continuous Delivery
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续交付
- en: Continuous delivery is a newer term that can be easily confused between continuous
    integration and continuous deployment. The critical difference is that software
    is *delivered* to some environment, say a staging environment, where it can undergo
    both automated and manual testing. Although it doesn’t require deployment immediately,
    it is in a deployable state. More detailed explanations of build systems can be
    found in [Chapter 15](ch15.html#DataEngineering), but it is also worth pointing
    out that this is a fundamental requirement to using the cloud correctly.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付是一个较新的术语，可能会在持续集成和持续部署之间产生混淆。关键区别在于软件被*交付*到某个环境，例如一个演示环境，可以进行自动化和手动测试。虽然不要求立即部署，但它处于可部署状态。有关构建系统的更详细解释可以在
    [第 15 章](ch15.html#DataEngineering) 中找到，但同样值得指出的是，这是正确使用云的基本要求之一。
- en: Virtualization and Containers
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟化和容器
- en: There is no more fundamental component of the cloud then virtualization. When
    AWS officially launched in 2006, Amazon Elastic Compute Cloud (EC2) was one of
    the core services released. There are a few key areas of virtualization to discuss.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在云中最基本的组成部分莫过于虚拟化了。当AWS在2006年正式推出时，Amazon弹性计算云（EC2）是发布的核心服务之一。有几个关键的虚拟化领域需要讨论。
- en: Hardware Virtualization
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件虚拟化
- en: 'The first virtualization abstraction released by AWS was hardware virtualization.
    Hardware virtualization comes in two flavors: paravirtual (PV) or hardware virtual
    machine (HVM). The best performance comes from HVM. The critical difference in
    performance is that HVM can take advantage of hardware extensions that tap into
    the host’s hardware, essentially making the virtual machine a first-class member
    of the host’s hardware, rather than merely a guest that is unaware of what the
    host is doing.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: AWS发布的第一个虚拟化抽象是硬件虚拟化。硬件虚拟化有两种形式：半虚拟化（PV）或硬件虚拟机（HVM）。最佳性能来自于HVM。性能上的关键差异在于，HVM能够利用硬件扩展，与主机硬件紧密结合，实质上使虚拟机成为主机硬件的一部分，而不仅仅是一个不知情于主机操作的客人。
- en: Hardware virtualization provides the ability to run multiple operating systems
    on one host and the ability to partition CPU, I/O (both network and disk), and
    memory to the guest operating system. There are many advantages to this approach,
    and it is the foundation of the modern cloud, but there are also some unique challenges
    to Python itself. One issue is that often the layer of granularity is too large
    for Python to fully exploit the environment. Because of the limitations of Python
    and threads (they don’t work on multiple cores), a virtual machine that has two
    cores could be wasting one core. With hardware virtualization and the Python language,
    there can be a tremendous waste of resources due to a lack of true multithreading.
    A virtual machine configuration for a Python application can often leave one or
    more cores idle, wasting both money and energy. Fortunately, the cloud has presented
    new solutions that help eliminate these defects in the Python language. In particular,
    containers and serverless eliminate this problem because they treat the cloud
    as an operating system, and instead of threads, there are lambdas or containers.
    Instead of threads that listen on queues, lambdas respond to events from a cloud
    queue, such as SQS.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件虚拟化提供了在一个主机上运行多个操作系统的能力，以及将CPU、I/O（包括网络和磁盘）和内存分区到客户操作系统的能力。这种方法有许多优点，是现代云计算的基础，但对于Python本身也存在一些独特的挑战。一个问题是，通常的粒度对于Python来说太大，无法充分利用环境。由于Python和线程的限制（它们不能在多核上工作），一个有两个核心的虚拟机可能会浪费一个核心。使用硬件虚拟化和Python语言，由于缺乏真正的多线程，可能会造成资源的巨大浪费。对于Python应用程序的虚拟机配置往往会导致一个或多个核心处于空闲状态，浪费金钱和能源。幸运的是，云计算提供了新的解决方案，帮助消除Python语言中的这些缺陷。特别是，容器和无服务器消除了这个问题，因为它们将云视为一个操作系统，而不是线程，有的是lambda或容器。而不是在队列上监听线程，lambda响应来自云队列（例如SQS）的事件。
- en: Software Defined Networks
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件定义网络
- en: Software Defined Networks (SDNs) are an essential component of cloud computing.
    The killer feature of SDNs is the ability to dynamically and programmatically
    change network behavior. Before this capability, this often rested in the hands
    of a networking guru who managed this F5 load balancer with an iron fist. Noah
    once worked at a large telecommunications company where there was a daily meeting
    called “Change Management” with a single individual—let’s call him Bob—who controlled
    every piece of software that was released.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 软件定义网络（SDNs）是云计算的重要组成部分。SDNs的杀手级特性在于能够动态和程序化地改变网络行为。在此能力出现之前，这通常由网络专家负责管理，类似于使用F5负载均衡器。诺亚曾在一家大型电信公司工作过，那里每天都有一个称为“变更管理”的会议，由一个名叫Bob的人负责控制每一个被发布的软件。
- en: It takes a unique personality to be a Bob. There were often yelling matches
    between Bob and people in the company. It was the classic IT Operations versus
    Development battle, and Bob delighted in saying no. The cloud and DevOps completely
    eliminate this role, the hardware, and the weekly shouting matches. Continuous
    delivery processes are building and deploying software consistently with the exact
    configuration, software, and data needed for a production environment. Bob’s role
    melted into ones and zeros deep inside the Matrix, replaced by some Terraform
    code.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要成为 Bob，需要有独特的个性。Bob 和公司内的人们经常发生争吵。这是经典的 IT 运维与开发之间的斗争，Bob 乐于说不。云和 DevOps 完全消除了这个角色、硬件和每周的吵架。持续交付流程是使用精确配置、软件和所需数据持续地构建和部署软件，以用于生产环境。Bob
    的角色深深地融入了矩阵中的 0 和 1 中，被一些 Terraform 代码所取代。
- en: Software Defined Storage
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件定义存储
- en: Software Defined Storage (SDS) is an abstraction that allows storage to provision
    on demand. This storage can be configured with granular Disk I/O and Network I/O.
    A good example is Amazon EBS volumes where you can configure provisioned Disk
    I/O. Typically, cloud SDS grows Disk I/O automatically with the volume size. An
    excellent example of how that works in practice is Amazon Elastic File System
    (EFS). EFS increases Disk I/O as the storage size grows (this occurs automatically)
    and is designed to support requests from thousands of EC2 instances concurrently.
    It also has deep integration with Amazon EC2 instances that allow pending writes
    to buffer and occur asynchronously.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 软件定义存储（SDS）是一种允许按需配置存储的抽象概念。此存储可以配置有细粒度的磁盘 I/O 和网络 I/O。一个很好的例子是亚马逊的 EBS 卷，您可以在其中配置已配置的磁盘
    I/O。通常，云 SDS 会随着卷大小自动增加磁盘 I/O。一个如何在实践中工作的绝佳例子是亚马逊弹性文件系统（EFS）。EFS 随着存储大小的增长增加磁盘
    I/O（这是自动发生的），并且设计用于支持同时来自数千个 EC2 实例的请求。它还与亚马逊 EC2 实例深度集成，允许挂起的写入进行缓冲并异步发生。
- en: Noah has good experience using EFS in precisely this situation. Before AWS Batch
    was available, he architected and wrote a system that employed thousands of spot
    instances that mounted EFS volumes, where they performed distributed computer
    vision jobs they collected from Amazon SQS. The ability to use a distributed filesystem
    that is always on is a massive advantage for distributed computing, and it simplifies
    everything from deployment to cluster computing.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 诺亚在这种情况下使用 EFS 有丰富的经验。在 AWS 批处理可用之前，他设计并编写了一个系统，该系统利用了数千个挂载了 EFS 卷的 spot 实例，它们执行从
    Amazon SQS 收集的分布式计算机视觉作业。使用一个始终在线的分布式文件系统对于分布式计算来说是一个巨大的优势，并且它简化了从部署到集群计算的一切。
- en: Containers
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器
- en: Containers have been around for decades, and they refer to OS-level virtualization.
    The kernel allows the existence of isolated user-space instances. In the early
    2000s, there was an explosion of hosting companies that used virtual hosting of
    Apache websites as a form of OS-level virtualization. Mainframes and classic Unix
    operating systems such as AIX, HP-UX, and Solaris have also had sophisticated
    forms of containers for years. As a developer, Noah worked with Solaris LDOM technology
    when it came out in 2007 and was in awe at how he could install full operating
    systems that allowed granular control of CPU, memory, and I/O all from telneting
    into a machine with a lights-out management card.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 容器已经存在了几十年，它们指的是操作系统级虚拟化。内核允许存在隔离的用户空间实例。在 2000 年代初期，有许多托管公司使用 Apache 网站的虚拟托管作为操作系统级虚拟化的形式。大型机和经典的
    Unix 操作系统，如 AIX、HP-UX 和 Solaris，多年来也拥有先进的容器形式。作为开发人员，诺亚在 2007 年推出的 Solaris LDOM
    技术中使用了 Solaris LDOM 技术，并对他如何能够安装允许对 CPU、内存和 I/O 进行细粒度控制的完整操作系统而感到敬畏，所有这些都可以通过远程登录到具有带外管理卡的机器来完成。
- en: 'The modern version of containers is under rapid development, borrows the best
    things from the mainframe era, and combines them with newer ideas like source
    control. In particular, one of the significant revolutions with containers is
    to treat them as projects that check out of version control. Docker containers
    are now the standard format for containers, and all major cloud vendors support
    Dockerfile containers, along with Kubernetes container management software. There
    is more information on containers in [Chapter 12](ch12.html#containers-kubernetes),
    but the essential items that relate to the cloud are listed here:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的现代版本正在快速发展，借鉴了主机时代的优秀特性，并结合了像源代码控制这样的新思想。特别是，容器的一个重大革新是将其视为从版本控制中签出的项目。Docker
    容器现在是容器的标准格式，所有主要的云供应商都支持 Dockerfile 容器和 Kubernetes 容器管理软件。有关容器的更多信息，请参阅[第 12
    章](ch12.html#containers-kubernetes)，但与云相关的基本内容列于此处：
- en: Container registry
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 容器注册表
- en: All cloud providers have a container registry where they keep your containers.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的云服务提供商都有一个容器注册表，用于存储您的容器。
- en: Kubernetes management service
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 管理服务
- en: All cloud providers have a Kubernetes offering, and this is now the standard
    for managing container-based deployments.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的云服务提供商都有Kubernetes服务，并且这现在是管理基于容器的部署的标准。
- en: Dockerfile format
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Dockerfile 格式
- en: This is the standard for building containers, and it is a simple file format.
    It is a best practice to use lint tools like [hadolint](https://oreil.ly/XboVE)
    in your build process to ensure simple bugs don’t leak through.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这是构建容器的标准方法，它是一个简单的文件格式。在构建过程中使用像[hadolint](https://oreil.ly/XboVE)这样的代码审查工具是一个最佳实践，以确保简单的错误不会通过。
- en: Continuous integration with containers
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用容器进行持续集成
- en: All cloud providers have cloud-based build systems that allow integration with
    containers. Google has [Cloud Build](https://oreil.ly/xy6Ag), Amazon has [AWS
    CodePipeline](https://oreil.ly/I5bdH), and Azure has [Azure Pipelines](https://oreil.ly/aEOx4).
    They all can build containers and register them into a container registry, as
    well as build projects using containers.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的云服务提供商都有基于云的构建系统，允许与容器集成。谷歌有[Cloud Build](https://oreil.ly/xy6Ag)，亚马逊有[AWS
    CodePipeline](https://oreil.ly/I5bdH)，Azure有[Azure Pipelines](https://oreil.ly/aEOx4)。它们都可以构建容器并将其注册到容器注册表中，同时也可以使用容器构建项目。
- en: Deep container integration into all cloud services
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 深度集成容器到所有云服务中
- en: When you get into managed services in platforms on clouds, you can rest assured
    they all have one thing in common—containers! Amazon SageMaker, a managed machine
    learning platform, uses containers. The cloud development environment Google Cloud
    Shell uses containers to allow you to customize your development environment.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当你进入云平台上的托管服务时，可以放心它们都有一个共同点——容器！亚马逊的SageMaker，一个托管的机器学习平台，使用容器。谷歌云Shell云开发环境使用容器来允许您定制开发环境。
- en: Challenges and Opportunities in Distributed Computing
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布式计算中的挑战和机遇
- en: One of the most challenging areas of computer science is distributed computing.
    In the modern era of cloud computing, there a few fundamental shifts that have
    changed everything. One of the most significant shifts is the rise of multicore
    machines and the end of Moore’s Law. See [Figure 9-7](#Figure-9-7).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机科学中最具挑战性的领域之一是分布式计算。在云计算的现代时代，有几个根本性的转变彻底改变了一切。最显著的转变之一是多核机器的兴起和摩尔定律的终结。请参见[图
    9-7](#Figure-9-7)。
- en: '![pydo 0907](assets/pydo_0907.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![pydo 0907](assets/pydo_0907.png)'
- en: 'Figure 9-7\. End of Moore’s Law (Source: John Hennessy and David Patterson,
    Computer Architecture: A Quantitative Approach, 6/e. 2018)'
  id: totrans-126
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-7\. 摩尔定律的终结（来源：John Hennessy 和 David Patterson，《计算机体系结构：定量方法》第 6 版，2018
    年）
- en: Moore’s Law exposed two fundamental problems that manifest themselves in the
    cloud era. The first problem is that CPUs are designed to be multipurpose processors.
    They are not specialized to run parallel workloads. If you couple that with the
    ultimate physical limits of increasing CPU speed, the CPU has become less critical
    in the cloud era. In 2015, Moore’s Law was effectively over, and gains are at
    3% a year.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 摩尔定律揭示了云时代表现出来的两个基本问题。第一个问题是，CPU 被设计为多用途处理器。它们并不专门用于运行并行工作负载。如果将其与增加 CPU 速度的终极物理极限相结合，CPU
    在云时代变得不那么关键。在2015年，摩尔定律实际上结束了，每年的增益率为3%。
- en: The second problem is that making multiple core machines to counteract the limitations
    of single processor speed has led to a ripple effect on software languages. Many
    languages previously had substantial problems taking advantage of multiple cores
    because they were designed in an era before multiple processors existed, let alone
    the internet. Python is a good case in point here. What makes things even more
    challenging, [Figure 9-8](#Figure-9-8) shows that there is “no free lunch” by
    adding more cores to a problem that is not mostly parallel.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个问题是，为了抵消单处理器速度的限制而制造多核机器导致了软件语言的连锁反应。许多语言以前在多核利用方面存在重大问题，因为它们是在多处理器甚至是互联网之前设计的时代。Python在这里是一个很好的例子。更具挑战性的是，[图9-8](#Figure-9-8)显示，通过为主要非并行问题增加更多核心并不是一种“免费午餐”。
- en: '![pydo 0908](assets/pydo_0908.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![pydo 0908](assets/pydo_0908.png)'
- en: Figure 9-8\. Amdahl’s Law
  id: totrans-130
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9-8\. 阿姆达尔定律
- en: The opportunity is in the cloud and different architectures like application-specific
    integrated circuits (ASICs). These include graphic processing units (GPUs), field-programmable
    gate arrays (FPGAs), and tensor processing units (TPUs). These specialized chips
    are increasingly being used in machine learning workloads and are paving the way
    for cloud architectures that use a combination of different hardware to tackle
    complex problems in distributed computing.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 云和不同的架构的机会，例如应用特定集成电路（ASIC）。这些包括图形处理单元（GPU）、现场可编程门阵列（FPGA）和张量处理单元（TPU）。这些专用芯片越来越多地用于机器学习工作负载，并为使用多种硬件组合解决分布式计算中的复杂问题铺平了道路。
- en: Python Concurrency, Performance, and Process Management in the Cloud Era
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云时代的Python并发性、性能和进程管理
- en: Imagine walking down a dark street in San Francisco late at night in a dangerous
    part of the city. In this scenario, you are a black belt in Brazilian Jiu-Jitsu.
    You are alone and notice that a stranger seems to be following you. Your heart
    starts to race as they approach and you think about your years of martial arts
    training. Will you have to fight a stranger in the street? You actively spar with
    opponents at your gym several times per week. You feel prepared to defend yourself
    if you need to. You also know that Brazilian Jiu-Jitsu is an efficient martial
    art, and it works in real-world situations.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，在旧金山的一个危险街区深夜走在黑暗的街道上。在这种情况下，你是巴西柔术的黑带。你独自一人，注意到有个陌生人似乎在跟踪你。当他们走近时，你的心开始加速，你想到了你多年的武术训练。你会不会不得不在街上和陌生人打斗？你每周在健身房与对手进行活跃的实战。你觉得自己准备好了，如果需要的话可以保护自己。你也知道巴西柔术是一种高效的武术，适用于现实世界的情况。
- en: On the other hand, fighting someone is still something to avoid. It is dangerous.
    Weapons could be involved. You could win the fight, yet seriously injure your
    opponent. You could lose the fight and become seriously injured yourself. Even
    an expert in Brazilian Jiu-Jitsu knows that a street fight is not a preferred
    scenario, despite the high probability of winning.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，与人打斗仍然是要避免的事情。这是危险的。可能会涉及武器。你可能会赢得这场斗争，但会严重伤害你的对手。你也可能会输掉这场战斗，并且自己也会受重伤。即使是巴西柔术的专家也知道，在街头打斗并不是一个理想的场景，尽管很有可能会赢得比赛。
- en: Concurrency in Python is very similar. There are some handy patterns like multiprocessing
    and asyncio. It is better to use concurrency sparingly. Often the other option
    is to use the platform’s concurrency options (serverless, batch processing, spot
    instances) versus the concurrency you create yourself via a programming language.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的并发性非常类似。有一些方便的模式，如多进程和asyncio。最好是节制地使用并发性。通常，与通过编程语言自己创建的并发性相比，使用平台的并发性选项（无服务器、批处理处理、竞价实例）更好。
- en: Process Management
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程管理
- en: Process management in Python is a standout capability of the language. When
    Python acts as a glue to other platforms, languages, and processes, this is when
    it is at its best. Also, the actual implementation of process management has dramatically
    changed over the years and continues to improve.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的进程管理是该语言的一个突出能力。当Python作为连接其他平台、语言和进程的胶水时，它表现最佳。此外，进程管理的实际实现在多年来已经发生了显著变化，并且继续改进。
- en: Manage Processes with Subprocess
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用子进程管理进程
- en: 'The simplest and most effective way to launch processes with the standard library
    is to use the `run()` function. As long as you have python 3.7 or higher installed,
    start here and simplify your code. A hello world example is just a line of code:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用标准库启动进程最简单和最有效的方法是使用`run()`函数。只要你安装了Python 3.7或更高版本，就从这里开始简化你的代码。一个简单的示例只需要一行代码：
- en: '[PRE5]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This line does almost everything you might want. It invokes a shell command
    in a Python subprocess and captures the output. The return value is an object
    of type `CompletedProcess`. This has the `args` used to launch the process: the
    `returncode`, `stdout`, `stderr`, and `check_returncode`.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码几乎可以满足你所需。它在Python子进程中调用shell命令并捕获输出。返回值是一个`CompletedProcess`类型的对象。这个对象包含了启动进程时使用的`args`：`returncode`、`stdout`、`stderr`和`check_returncode`。
- en: This one-liner replaces and streamlines overly verbose and complicated methods
    of invoking shell commands. This is great for a developer who frequently writes
    Python code mixed with shell commands. Here are a few more tips that might be
    helpful to follow.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这个一行代码替换了过于冗长和复杂的调用shell命令的方法。对于经常写Python代码并夹杂着shell命令的开发人员来说，这非常棒。以下是一些可能有用的其他提示。
- en: Avoid shell=True
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 避免使用shell=True
- en: 'It is a security best practice to invoke a command as items in a list:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践是将命令作为列表中的项调用：
- en: '[PRE6]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It is best to avoid using a string:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 最好避免使用字符串：
- en: '[PRE7]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The reason for this is straightforward. It is easy to introduce a security hole
    accidentally if you accept any string and execute it. Let’s suppose you wrote
    a simple program that allowed a user to list a directory. A user can backdoor
    any command they want and hitchhike on your program. Writing an accidental backdoor
    is very scary and hopefully illustrates what a bad idea it is to use `shell=True`!
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的原因很简单。如果你接受任意字符串并执行它，很容易意外引入一个安全漏洞。假设你编写了一个允许用户列出目录的简单程序。用户可以植入任何想要的命令并利用你的程序。意外制造后门非常可怕，希望这说明了使用`shell=True`是多么糟糕的主意！
- en: '[PRE8]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Instead, you can completely prevent that by not allowing strings:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，你可以通过不允许使用字符串完全避免这个问题：
- en: '[PRE9]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Set timeouts and handle them when appropriate
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置适当的超时时间并在适当时处理它们
- en: 'If you are writing code that invokes a process that may take some time to run,
    you should create a sensible default timeout. An easy way to experiment with how
    this works is to use the Unix `sleep` command. Here is an example of a `sleep`
    command that finishes before the timeout triggers in the IPython shell. It returns
    a `CompletedProcess` object:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在编写一个可能运行一段时间的进程的代码，你应该设置一个明智的默认超时时间。一个测试这个的简单方法是使用Unix的`sleep`命令。下面是一个在IPython
    shell中在超时触发之前完成的`sleep`命令的示例。它返回一个`CompletedProcess`对象：
- en: '[PRE10]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is a second version that throws an exception. In most cases, it would
    be wise to do something useful with this exception:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是第二个版本，它会抛出一个异常。在大多数情况下，处理这个异常会很明智：
- en: '[PRE11]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'A reasonable approach is to catch this exception `TimeoutExpired` and then
    to log the exception and implement some cleanup code:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 一个合理的做法是捕获这个异常`TimeoutExpired`，然后记录异常并实现一些清理代码：
- en: '[PRE12]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Logging exceptions are critically important when building systems at the professional
    level. If this code is later deployed on many machines, it could become impossible
    to track down an error without a centralized logging system that is searchable.
    For DevOps professionals, it is critically essential to follow this pattern and
    evangelize its usefulness.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建专业级别的系统时，记录异常至关重要。如果这段代码稍后部署在许多机器上，没有一个可搜索的集中式日志系统，追踪错误可能会变得不可能。对于DevOps专业人员来说，遵循这个模式并传播它的用处是至关重要的。
- en: The problem with Python threads
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用Python线程的问题
- en: You may have had a friend your parents told you not to hang out with when you
    were growing up. If so, it was most likely because your parents were trying to
    help you avoid bad choices. Python threads are a lot like that lousy friend you
    had growing up. Things are not going to end well if you keep associating yourself
    with them.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能在成长过程中有过父母告诉你不要和某个朋友交往的经历。如果是这样，很可能是因为你的父母试图帮助你避免犯错。Python线程就像你成长过程中那个糟糕的朋友一样。如果你继续和它们联系，事情不会有好结果。
- en: Threads in other languages are a reasonable trade-off. In a language like C#,
    you can execute thread pools that connect to queues and expect that each thread
    that spawned can take advantage of all of the cores on the device. This well-proven
    pattern of using threads with queues decreases the downsides of manually setting
    and removing locks in code.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他语言中，线程是一个合理的折衷方案。在像C#这样的语言中，你可以执行与队列连接的线程池，并期望每个生成的线程都可以利用设备上的所有核心。这种已经被证明有效的使用线程与队列的模式减少了在代码中手动设置和移除锁的缺点。
- en: Python doesn’t work this way. If you spawn threads, it won’t use all of the
    cores on your machine, and it can often behave in a nondeterministic fashion,
    bouncing from core to core and even “slowing down your code.” Why use something
    like this when there are alternatives?
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Python不是这样工作的。如果你生成线程，它不会利用你机器上的所有核心，并且它通常会表现出非确定性的方式，从一个核心跳到另一个核心，甚至“减慢你的代码”。为什么在有替代方案的情况下要使用这样的东西呢？
- en: If you are interested in learning more about DevOps, then chances are you’re
    focused on pragmatism. You only want to learn and apply the knowledge that is
    practical and makes sense. Pragmatism is yet another reason to avoid threads in
    Python. In theory, you could use threads in some situations and get a performance
    increase if the problem was I/O bound. However, again, why use an unreliable tool
    when reliable tools exist? Using Python threads is like driving a car that requires
    you to push it and jump-start it by popping the clutch because the battery is
    flaky. What happens the day you don’t have room to jump-start it, or can’t park
    the car on a hill? Using this strategy is pure madness!
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对学习更多关于DevOps感兴趣，那么你很可能专注于实用性。你只想学习和应用实际和有意义的知识。实用性是避免在Python中使用线程的另一个理由。理论上，在某些情况下可以使用线程并获得性能提升，如果问题是I/O绑定的话。然而，再次问一下，为什么要使用一个不可靠的工具，当有可靠的工具存在时？在Python中使用线程就像开车需要推一下然后通过弹跳离合器来启动汽车，因为电池不靠谱。当你没有地方可以推动它或者无法把车停在斜坡上时会发生什么？采用这种策略纯粹是疯狂的！
- en: There are no examples of using threads in this chapter. Why show something that
    is incorrect? Instead of using threads, focus on other alternatives outlined in
    this chapter.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中没有使用线程的示例。为什么展示一些不正确的东西？与其使用线程，不如专注于本章中概述的其他替代方案。
- en: Using Multiprocessing to Solve Problems
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用多进程解决问题
- en: 'The multiprocessing library is the only unified way to use all of the cores
    on a machine using the standard library in Python. In looking at [Figure 9-9](#Figure-9-9),
    there are a couple of options at the operating system level: multiprocessing and
    containers.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 多进程库是使用Python标准库在机器上利用所有核心的唯一统一方式。查看[图 9-9](#Figure-9-9)时，操作系统级别有几个选择：多进程和容器。
- en: '![pydo 0909](assets/pydo_0909.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![pydo 0909](assets/pydo_0909.png)'
- en: Figure 9-9\. Running parallel Python code
  id: totrans-169
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-9\. 运行并行Python代码
- en: Using containers as an alternative is a crucial distinction. If the purpose
    of using the multiprocessing library is to invoke a process many times without
    interprocess communication, a strong argument could be made to use a container,
    virtual machine, or cloud-native construct such as Function as a Service. A popular
    and effective cloud-native option is AWS Lambda.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 使用容器作为替代方案是一个重要的区别。如果使用多进程库的目的是在没有进程间通信的情况下多次调用进程，可以有很强的理由使用容器、虚拟机或云原生构造，如函数即服务。一个受欢迎且有效的云原生选项是AWS
    Lambda。
- en: 'Likewise, a container has many advantages over forking processes yourself.
    There are many advantages to containers. Container definitions are code. Containers
    can be sized precisely at the level needed: i.e., memory, CPU, or disk I/O. They
    are a direct competitor and often a better replacement for forking processes yourself.
    In practice, they can also be much easier to fit into a DevOps mindset.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，与自行分叉进程相比，容器具有许多优势。容器有许多优点。容器定义为代码。容器可以精确地调整到所需的级别：即内存、CPU或磁盘I/O。它们是直接竞争对手，通常是自行分叉进程的更好替代品。在实践中，它们也可以更容易地融入DevOps思维方式。
- en: From a DevOps perspective, if you buy into the idea that you should avoid concurrency
    in Python that you implement yourself unless it is the only option, then even
    the scenario when you use the multiprocessing module is limited. It may be that
    multiprocessing is best used as a tool in development and experimentation only,
    since much better options exist at both the container and cloud level.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 从DevOps的角度来看，如果你认同这样一个观点，即除非没有其他选择，否则应该避免在Python中自己实现并发，那么即使是使用multiprocessing模块的场景也是有限的。也许在开发和实验阶段，multiprocessing最好只作为一种工具，因为在容器和云层面都存在更好的选择。
- en: 'Another way to put this is to ask who you trust to fork processes: the multiprocessing
    code you wrote in Python, the developers from Google who wrote Kubernetes, or
    the developers at Amazon who wrote AWS Lambda? Experience tells me that I make
    the best decisions when I stand on the shoulders of giants. With that philosophical
    consideration out of the way, here are some ways to use multiprocessing effectively.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种说法是问你信任哪个进程分叉：你在Python中编写的多进程代码，Google编写的Kubernetes开发人员，还是亚马逊编写的AWS Lambda开发人员？经验告诉我，当我站在巨人的肩膀上时，我做出了最好的决定。在哲学考虑之后，这里是一些有效使用多进程的方法。
- en: Forking Processes with Pool()
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Pool()分叉进程
- en: 'A straightforward way to test out the ability to fork multiple processes and
    run a function against them is to calculate KMeans clustering with the sklearn
    machine learning library. A KMeans calculation is computed intensively and has
    a time complexity of O(n**2), which means it grows exponentially slower with more
    data. This example is a perfect type of operation to parallelize, either at the
    macro or the micro level. In the following example, the `make_blobs` method creates
    a dataset with 100k records and 10 features. This process has timing for each
    KMeans algorithm as well as the total time it takes:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 测试多进程分叉能力并针对其运行函数的一个直接方法是使用sklearn机器学习库计算KMeans聚类。KMeans计算密集且时间复杂度为O(n**2)，这意味着随着数据量增加，其增长速度会指数级减慢。这个例子非常适合在宏观或微观级别上并行化处理。在下面的例子中，`make_blobs`方法创建了一个包含10万条记录和10个特征的数据集。每个KMeans算法的计时以及总计时如下：
- en: '[PRE13]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The runtime of the KMeans algorithm shows that it is an expensive operation
    and to run 10 iterations takes 3.5 seconds:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: KMeans算法的运行时显示，其是一个昂贵的操作，运行10次迭代需要3.5秒：
- en: '[PRE14]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the following example, the `multiprocessing.Pool.map`, the method is used
    to distribute 10 KMeans cluster operations to a pool of 10 processes. This example
    occurs by mapping the argument of `100000` to the function `do_kmeans`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，使用`multiprocessing.Pool.map`方法将10个KMeans集群操作分配给一个包含10个进程的池。这个例子通过将参数`100000`映射到函数`do_kmeans`来实现：
- en: '[PRE15]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The run time of each KMeans operation is slower, but the overall speedup is
    double. This is a common issue with concurrency frameworks; there is overhead
    to distribute parallel work. There isn’t a “free lunch” to run the parallel code.
    The cost is that each task has a ramp-up time of about one second:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 每个KMeans操作的运行时间较慢，但总体加速度翻倍。这是并发框架的常见问题；并行工作分配有开销。并行代码的运行并不是“免费午餐”。每个任务的启动时间约为1秒：
- en: '[PRE16]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This example shows why it is essential to profile code and also be careful about
    immediately jumping to concurrency. If the problem is small scale, then the overhead
    of the parallelization approach could slow the code down in addition to making
    it more complex to debug.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子展示了为什么对代码进行性能分析和谨慎立即跳转到并发是至关重要的。如果问题规模较小，那么并行化方法的开销可能会使代码变慢，并且调试起来更加复杂。
- en: From a DevOps perspective, the most straightforward and most maintainable approach
    should always be the top priority. In practice, this could mean that this style
    of multiprocessing parallelization is a reasonable approach, but not before a
    macro-ready level parallelization approach has first been tried. Some alternative
    Macro approaches could be using containers, using FaaS (AWS Lambda or some other
    serverless technology), or using a high-performance server that Python runs workers
    against (RabbitMQ or Redis).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 从DevOps的角度来看，最直接和最可维护的方法始终应该是首选。实际上，这可能意味着这种多进程并行化的风格是一个合理的方法，但在尝试宏观准备水平的并行化方法之前不要轻易采用。一些替代的宏观方法可能包括使用容器，使用FaaS（如AWS
    Lambda或其他无服务器技术），或者使用一个高性能服务器，Python运行工人对其进行工作（如RabbitMQ或Redis）。
- en: Function as a Service and Serverless
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为服务的函数和无服务器
- en: The modern AI era has created pressures that have enabled new paradigms. CPU
    clock speed increases have ground to a halt, and this has effectively ended Moore’s
    Law. At the same time, the explosion of data, the rise of cloud computing, and
    the availability of application specific integrated circuits (ASICs) have picked
    up that slack. Now a function as a unit of work has become an essential concept.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现代 AI 时代已经创建了压力，促使新范式的出现。CPU 时钟速度的增加已经停滞不前，这实际上结束了摩尔定律。与此同时，数据爆炸、云计算的兴起以及应用特定集成电路（ASIC）的可用性填补了这一空白。现在，函数作为工作单元已经成为一个重要的概念。
- en: Serverless and FaaS can be used somewhat interchangeably, and they describe
    the ability to run a function as a unit of work on a cloud platform.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Serverless 和 FaaS 可以在某种程度上互换使用，它们描述了在云平台上作为工作单元运行函数的能力。
- en: High Performance Python with Numba
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Numba 进行高性能 Python
- en: Numba is a very cool library to experiment with for distributed problem-solving.
    Using it is a lot like modifying your car with high-performance aftermarket parts.
    It also leverages the trend of using ASICs to solve specific problems.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Numba 是一个非常酷的库，用于进行分布式问题解决的实验。使用它就像是用高性能的市场售后部件改装你的汽车一样。它还利用了使用 ASIC 解决特定问题的趋势。
- en: Using Numba Just in Time Compiler
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Numba 即时编译器
- en: Let’s take a look at the [officially documented example](https://oreil.ly/KlW5s)
    of Numba Just in Time Compiler (JIT), tweak it a bit, and then break down what
    is happening.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 [官方文档示例](https://oreil.ly/KlW5s) 中关于 Numba 即时编译器（JIT）的例子，稍作调整，然后分析发生了什么。
- en: 'This example is a Python function that is decorated by the JIT. The argument
    `nopython=True` enforces that the code passes through the JIT and is optimized
    using the LLVM compiler. If this option isn’t selected, it means that if something
    doesn’t translate to LLVM, it stays as regular Python code:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例是一个被 JIT 装饰的 Python 函数。参数 `nopython=True` 强制代码通过 JIT 并使用 LLVM 编译器进行优化。如果不选择这个选项，意味着如果某些内容无法转换为
    LLVM，则会保持常规的 Python 代码：
- en: '[PRE17]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, a numpy array is created, and the IPython magic function is used to time
    it:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个 numpy 数组，并使用 IPython 的魔术函数来计时它：
- en: '[PRE18]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output shows that it took 855 nanoseconds to run the code:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示，运行该代码耗时 855 纳秒：
- en: '[PRE19]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The regular version can be run using this trick to avoid the decorator:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用此技巧运行常规版本以避免装饰器：
- en: '[PRE20]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output shows that without the JIT, regular Python code is 20 times slower:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示，没有 JIT，常规 Python 代码运行速度慢了 20 倍：
- en: '[PRE21]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: With the Numba JIT, for loops are an optimization that it can speed up. It also
    optimizes numpy functions and numpy data structure. The main takeaway here is
    that it might be worth looking at existing code that has been running for years
    and seeing if critical parts of a Python infrastructure could benefit from being
    compiled with the Numba JIT.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Numba JIT，for 循环是可以加速的优化对象。它还优化了 numpy 函数和 numpy 数据结构。这里的主要观点是，也许值得查看已运行多年的现有代码，看看
    Python 基础架构的关键部分是否可以受益于使用 Numba JIT 进行编译。
- en: Using High-Performance Servers
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用高性能服务器
- en: Self-actualization is an essential concept in human development. The simplest
    definition of self-actualization is an individual reaching their real potential.
    To do this, they must also accept their human nature with all of its flaws. One
    theory is that less than 1% of people have fully self-actualized.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 自我实现是人类发展中的一个重要概念。自我实现的最简单定义是个体达到他们真实潜力的状态。为了做到这一点，他们必须接受自己的人性，包括其中的所有缺陷。有一种理论认为，不到1%的人已完全实现了自我。
- en: 'The same concept can be applied to Python, the language. Fully accepting the
    strengths and weaknesses of the language allows a developer to utilize it fully.
    Python is not a high-performance language. Python is not a language optimized
    for writing servers like other languages are: Go, Java, C, C++, C#, or Erlang.
    Instead, Python is a language for applying high-level logic on top of high-performance
    code written in a high-performance language or platform.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的概念也可以应用于 Python，这种语言。全面接受语言的优势和劣势允许开发人员充分利用它。Python 不是一种高性能语言。Python 不是一种像其他语言（如
    Go、Java、C、C++、C# 或 Erlang）那样优化用于编写服务器的语言。相反，Python 是一种在高性能语言或平台上应用高级逻辑的语言。
- en: 'Python is widely popular because it fits into the natural thought process of
    the human mind. With sufficient experience using the language, you can think in
    Python, just like you can think in your native language. Logic can be expressed
    in many ways: language, symbolic notation, code, pictures, sound, and art. Computer
    science constructs such as memory management, type declaration, concurrency primitives,
    and object-oriented design can be abstracted away from pure logic. They are optional
    to the expression of an idea.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Python之所以广受欢迎，是因为它符合人类思维的自然过程。通过足够的语言使用经验，你可以像使用母语一样思考Python。逻辑可以用许多方式表达：语言、符号表示、代码、图片、声音和艺术。计算机科学构造，如内存管理、类型声明、并发原语和面向对象设计可以从纯逻辑中抽象出来。它们对于表达一个想法是可选的。
- en: The power of a language like Python is that it allows the user to work at the
    logic level, not the computer science level. What is the takeaway? Use the right
    tool for the job, and often this is the cloud or service in another language.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 类似Python这样的语言的强大之处在于它允许用户在逻辑层面工作，而不是计算机科学层面。什么是要点？为任务选择正确的工具，而通常这是云或另一种语言的服务。
- en: Conclusion
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Both DevOps and data science share a common thread in that they are both job
    titles and capabilities. Some of the benefits of DevOps methodologies are speed,
    automation, reliability, scale, and security accomplished through pragmatism.
    Using macro-level solutions for concurrency and management of processes increases
    operation efficiency. Using micro-level solutions before looking at available
    frameworks and solutions is a dangerous DevOps antipattern.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps和数据科学都有一个共同点，那就是它们既是职位名称，又是能力。DevOps方法的一些好处是速度、自动化、可靠性、规模和安全性通过实用主义实现。在考虑可用框架和解决方案之前使用宏观级别的解决方案来提高并发和进程管理的效率是一种危险的DevOps反模式。
- en: What are the takeaways for Python in the cloud era?
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Python在云时代的要点是什么？
- en: Learn to master the right concurrency technique for the task at hand.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学会为手头的任务掌握正确的并发技术。
- en: Learn to use the high-performance computing library Numba to turbocharge your
    code with real threads, JIT, and the GPU.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学会使用高性能计算库Numba为你的代码提速，使用真实线程、JIT和GPU。
- en: Learn to use FaaS to solve unique problems elegantly.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学会使用FaaS优雅地解决独特问题。
- en: Treat the cloud as an operating system and make it do the hard work of concurrency.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将云视为操作系统，并让它承担并发的繁重工作。
- en: Embrace cloud-native constructs such as continuous delivery, Docker format containers,
    and serverless.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥抱云原生构造，如持续交付、Docker格式容器和无服务器。
- en: Exercises
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: What is IaaS?
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是IaaS？
- en: What is PaaS?
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是PaaS？
- en: What does elasticity mean?
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弹性是什么意思？
- en: What does availability mean?
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用性是什么意思？
- en: What is block storage?
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是块存储？
- en: What are the different types of cloud computing services?
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云计算服务的不同类型是什么？
- en: What is serverless?
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是无服务器？
- en: What are some key differences between IaaS and PaaS?
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IaaS和PaaS之间有哪些关键区别？
- en: What is the CAP Theorem?
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是CAP定理？
- en: What is Amdahl’s Law?
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是阿姆达尔定律？
- en: Case Study Questions
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究问题
- en: A company is hesitant to move into cloud computing because it has heard it can
    be more expensive. What are some ways to mitigate the cost risks of adopting cloud
    computing?
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一家公司犹豫不决地转向云计算，因为它听说可能会更昂贵。有哪些方法可以减轻采用云计算的成本风险？
- en: What is an example of a cloud-native architecture? Draw an architectural diagram
    of a cloud-native system and list the key features.
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是云原生架构的例子？绘制一个云原生系统的架构图，并列出关键特性。
- en: What do spot or preemptible instances do? How can they save money? What problems
    are they suitable for? What problems are they not suitable for?
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: spot或抢先实例有什么作用？它们如何节省金钱？它们适用于什么问题？它们不适用于什么问题？
