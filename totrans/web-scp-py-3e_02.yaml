- en: Chapter 1\. How the Internet Works
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 如何运作互联网
- en: I have met very few people in my life who truly know how the internet works,
    and I am certainly not one of them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我生命中，我很少遇到真正了解互联网运作原理的人，而我肯定不是其中之一。
- en: The vast majority of us are making do with a set of mental abstractions that
    allow us to use the internet just as much as we need to. Even for programmers,
    these abstractions might extend only as far as what was required for them to solve
    a particularly tricky problem once in their career.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们大多数人都在利用一套精神抽象来使用互联网，这些抽象使我们能够如需求一般使用它。即使对于程序员来说，这些抽象可能只涉及到解决一次特别棘手问题所需的内容。
- en: Due to limitations in page count and the knowledge of the author, this chapter
    must also rely on these sorts of abstractions. It describes the mechanics of the
    internet and web applications, to the extent needed to scrape the web (and then,
    perhaps a little more).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于页数限制和作者知识的局限性，这一章也必须依赖这些抽象。它描述了互联网和Web应用程序的运作机制，以足够的深度来进行网页抓取（也许还要多一点）。
- en: 'This chapter, in a sense, describes the world in which web scrapers operate:
    the customs, practices, protocols, and standards that will be revisited throughout
    the book.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章在某种程度上描述了网络爬虫运行的世界：本书中将反复讨论的习俗、惯例、协议和标准。
- en: When you type a URL into the address bar of your web browser and hit Enter,
    interactive text, images, and media spring up as if by magic. This same magic
    is happening for billions of other people every day. They’re visiting the same
    websites, using the same applications—often getting media and text customized
    just for them.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在网页浏览器的地址栏中输入URL并按下回车时，互动文本、图像和媒体如魔法般地出现。每天数十亿人都在经历同样的魔法。他们访问相同的网站，使用相同的应用程序，通常获取专门为他们定制的媒体和文本内容。
- en: And these billions of people are all using different types of devices and software
    applications, written by different developers at different (often competing!)
    companies.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 而这数十亿人使用不同类型的设备和软件应用程序，这些设备和应用程序由不同公司的不同开发者编写（通常是竞争对手！）。
- en: Amazingly, there is no all-powerful governing body regulating the internet and
    coordinating its development with any sort of legal force. Instead, different
    parts of the internet are governed by several different organizations that evolved
    over time on a somewhat ad hoc and opt-in basis.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，没有一个全能的管理机构以法律强制力协调互联网的发展。相反，互联网的不同部分由不同的组织管理，这些组织随着时间的推移以一种相对特别的和自愿的方式进化。
- en: Of course, choosing *not* to opt into the standards that these organizations
    publish may result in your contributions to the internet simply...not working.
    If your website can’t be displayed in popular web browsers, people likely aren’t
    going to visit it. If the data your router is sending can’t be interpreted by
    any other router, that data will be ignored.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，选择*不*参与这些组织发布的标准可能会导致您在互联网上的贡献根本无法使用。如果您的网站无法在流行的网页浏览器中显示，人们可能就不会访问它。如果您的路由器发送的数据无法被其他路由器解释，那么这些数据将被忽略。
- en: Web scraping is, essentially, the practice of substituting a web browser for
    an application of your own design. Because of this, it’s important to understand
    the standards and frameworks that web browsers are built on. As a web scraper,
    you must both mimic and, at times, subvert the expected internet customs and practices.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 网页抓取本质上是将一个自己设计的应用程序替换为网络浏览器的实践。因此，了解构建在Web浏览器之上的标准和框架至关重要。作为一个网络爬虫，你必须模仿并有时颠覆预期的互联网习俗和惯例。
- en: Networking
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络
- en: In the early days of the telephone system, each telephone was connected by a
    physical wire to a central switchboard. If you wanted to make a call to a nearby
    friend, you picked up the phone, asked the switchboard operator to connect you,
    and the switchboard operator physically created (via plugs and jacks) a dedicated
    connection between your phone and your friend’s phone.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在电话系统的早期，每部电话通过一根物理电线连接到中央交换机。如果你想给附近的朋友打电话，你拿起电话，请求接线员连接你，接线员会通过插座和插孔物理地为你的电话和朋友的电话创建一个专用连接。
- en: Long-distance calls were expensive and could take minutes to connect. Placing
    a long-distance call from Boston to Seattle would result in the coordination of
    switchboard operators across the United States creating a single enormous length
    of wire directly connecting your phone to the recipient’s.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 远程通话费用昂贵且可能需要几分钟才能连接。从波士顿打电话到西雅图将导致美国各地交换机操作员协调创建一个直接连接您的电话到接收者的巨大电缆。
- en: Today, rather than make a telephone call over a temporary dedicated connection,
    we can make a video call from our house to anywhere in the world across a persistent
    web of wires. The wire doesn’t tell the data where to go, the data guides itself,
    in a process called *packet switching*. Although many technologies over the years
    contributed to what we think of as “the internet,” packet switching is really
    the technology that single-handedly started it all.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，我们不再通过临时的专用连接打电话，而是可以从我们家通过持久的电缆网络向世界任何地方进行视频通话。电线不告诉数据要去哪里，数据自己引导，这个过程称为*分组交换*。尽管多年来的许多技术都为我们所谓的“互联网”做出了贡献，但分组交换确实是唯一一种开启这一切的技术。
- en: In a packet-switched network, the message to be sent is divided into discrete
    ordered packets, each with its own sender and destination address. These packets
    are routed dynamically to any destination on the network, based on that address.
    Rather than being forced to blindly traverse the single dedicated connection from
    receiver to sender, the packets can take any path the network chooses. In fact,
    packets in the same message transmission might take different routes across the
    network and be reordered by the receiving computer when they arrive.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在分组交换网络中，要发送的消息被分成离散的有序分组，每个分组都有自己的发送者和目的地地址。这些分组根据该地址动态路由到网络上的任何目标。与被迫盲目穿越从接收者到发送者的单一专用连接不同，分组可以沿着网络选择的任何路径传输。事实上，同一消息传输中的分组可能会在网络中采取不同的路径，并在到达接收计算机时被重新排序。
- en: If the old phone networks were like a zip line—taking passengers from a single
    destination at the top of a hill to a single destination at the bottom—then packet-switched
    networks are like a highway system, where cars going to and from multiple destinations
    are all able to use the same roads.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果旧的电话网络就像滑索——从山顶的单一目的地到山脚的单一目的地运送乘客——那么分组交换网络就像是高速公路系统，多个目的地的汽车都能使用相同的道路。
- en: 'A modern packet-switching network is usually described using the Open Systems
    Interconnection (OSI) model, which is composed of seven layers of routing, encoding, and
    error handling:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现代分组交换网络通常使用开放系统互联模型（OSI模型）来描述，该模型由七层路由、编码和错误处理组成：
- en: Physical layer
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 物理层
- en: Data link layer
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据链路层
- en: Network layer
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网络层
- en: Transport layer
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 传输层
- en: Session layer
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 会话层
- en: Presentation layer
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展示层
- en: Application layer
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用层
- en: Most web application developers spend their days entirely in layer 7, the application
    layer. This is also the layer where the most time is spent in this book. However,
    it is important to have at least conceptual knowledge of the other layers when
    scraping the web. For example, TLS fingerprinting, discussed in [Chapter 17](ch17.html#c-17),
    is a web scraping detection method that involves the transport layer.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Web应用程序开发者在第7层，即应用层中度过他们的一天。这也是本书中花费最多时间的层次。然而，当进行网络爬取时，了解其他层至少具有概念性知识是很重要的。例如，传输层中讨论的TLS指纹识别是一种网络爬取检测方法。
- en: In addition, knowing about all of the layers of data encapsulation and transmission
    can help troubleshoot errors in your web applications and web scrapers.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，了解数据封装和传输的所有层可以帮助排查网络应用程序和网络爬虫中的错误。
- en: Physical Layer
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 物理层
- en: The *physical layer* specifies how information is physically transmitted with
    electricity over the Ethernet wire in your house (or on any local network). It
    defines things like the voltage levels that encode 1’s and 0’s, and how fast those
    voltages can be pulsed. It also defines how radio waves over Bluetooth and WiFi
    are interpreted.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*物理层* 指定了信息如何通过你家的以太网电线（或任何局域网）以电流物理传输。它定义了诸如编码1和0的电压级别，以及这些电压可以脉冲的速度。它还定义了如何解释蓝牙和WiFi上的无线电波。'
- en: This layer does not involve any programming or digital instructions but is based
    purely on physics and electrical standards.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这一层不涉及任何编程或数字指令，而完全基于物理和电气标准。
- en: Data Link Layer
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据链路层
- en: The *data link layer* specifies how information is transmitted between two nodes
    in a local network, for example, between your computer and a router. It defines
    the beginning and ending of a single transmission and provides for error correction
    if the transmission is lost or garbled.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*数据链路层* 指定了在本地网络中两个节点之间如何传输信息，例如，在你的计算机和路由器之间。它定义了单个传输的开始和结束，并提供了如果传输丢失或混乱时的纠错功能。'
- en: At this layer, the packets are wrapped in an additional “digital envelope” containing
    routing information and are referred to as *frames*. When the information in the
    frame is no longer needed, it is unwrapped and sent across the network as a packet.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一层，数据包被包裹在一个额外的“数字信封”中，其中包含路由信息，并被称为 *帧*。当帧中的信息不再需要时，它会被解开并作为数据包发送到网络上。
- en: It’s important to note that, at the data link layer, all devices on a network
    are receiving the same data at all times—there’s no actual “switching” or control
    over where the data is going. However, devices that the data is not addressed
    to will generally ignore the data and wait until they get something that’s meant
    for them.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在数据链路层，网络上的所有设备始终接收相同的数据—没有实际的“交换”或对数据流向的控制。但是，数据未被寻址到的设备通常会忽略数据，并等待直到它们收到发送给它们的数据为止。
- en: Network Layer
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络层
- en: The *network layer* is where packet switching, and therefore “the internet,”
    happens. This is the layer that allows packets from your computer to be forwarded
    by a router and reach devices beyond their immediate network.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*网络层* 是数据包交换和因此“互联网”发生的地方。这一层允许你计算机上的数据包被路由器转发并达到其直接网络之外的设备。'
- en: The network layer involves the Internet Protocol (IP) part of the Transmission
    Control Protocol/Internet Protocol (TCP/IP). IP is where we get IP addresses from.
    For instance, my IP address on the global internet is currently 173.48.178.92\.
    This allows any computer in the world to send data to me and for me to send data
    to any other address from my own address.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 网络层涉及传输控制协议/互联网协议（TCP/IP）的互联网协议（IP）部分。IP 是我们获取 IP 地址的地方。例如，我在全球互联网上的 IP 地址目前是
    173.48.178.92。这允许世界上的任何计算机向我发送数据，并且我可以从自己的地址发送数据到任何其他地址。
- en: Transport Layer
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传输层
- en: Layer 4, the *transport layer*, concerns itself with connecting a specific service
    or application running on a computer to a specific application running on another
    computer, rather than just connecting the computers themselves. It’s also responsible
    for any error correction or retrying needed in the stream of data.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第 4 层，*传输层*，关注的是将运行在一台计算机上的特定服务或应用程序连接到另一台计算机上运行的特定应用程序，而不仅仅是连接计算机本身。它还负责在数据流中进行任何必要的错误校正或重试。
- en: TCP, for example, is very picky and will keep requesting any missing packets
    until all of them are correctly received. TCP is often used for file transfers,
    where all packets must be correctly received in the right order for the file to
    work.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，TCP 非常挑剔，会一直请求任何丢失的数据包，直到所有数据包都正确接收。TCP 常用于文件传输，其中所有数据包必须以正确的顺序正确接收才能使文件正常工作。
- en: In contrast, the User Datagram Protocol (UDP) will happily skip over missing
    packets in order to keep the data streaming in. It’s often used for videoconferencing
    or audioconferencing, where a temporary drop in transmission quality is preferable
    to a lag in the conversation.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，用户数据报协议（UDP）将乐意跳过丢失的数据包以保持数据流畅进行。它通常用于视频会议或音频会议，其中临时的传输质量下降比对话延迟更可取。
- en: Because different applications on your computer can have different data reliability
    needs at the same time (for instance, making a phone call while downloading a
    file), the transport layer is also where the port number comes in. The operating
    system assigns each application or service running on your computer to a specific
    port, from where it sends and receives data.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你计算机上的不同应用程序可以同时具有不同的数据可靠性需求（例如，在下载文件的同时进行电话呼叫），所以传输层也是端口号的用武之地。操作系统将运行在计算机上的每个应用程序或服务分配给一个特定的端口，从这个端口发送和接收数据。
- en: This port is often written as a number after the IP address, separated by a
    colon. For example, 71.245.238.173:8080 indicates the application assigned by
    the operating system to port 8080 on the computer assigned by the network at IP
    address 71.245.238.173.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个端口通常在 IP 地址之后用冒号分隔的数字来表示。例如，71.245.238.173:8080 表示由操作系统分配给 IP 地址 71.245.238.173
    的网络上端口 8080 的应用程序。
- en: Session Layer
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 会话层
- en: The *session layer* is responsible for opening and closing a session between
    two applications. This session allows stateful information about what data has
    and hasn’t been sent, and who the computer is communicating with. The session
    generally stays open for as long as it takes to complete the data request, and
    then closes.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*会话层*负责在两个应用程序之间打开和关闭会话。此会话允许关于已发送和未发送数据的有状态信息，并且明确计算机正在与谁通信。会话通常保持打开状态，直到完成数据请求，然后关闭。'
- en: The session layer allows for retrying a transmission in case of a brief crash
    or disconnect.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 会话层允许在短暂崩溃或断开连接的情况下重试传输。
- en: Sessions Versus Sessions
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 会话与会话
- en: Sessions in the session layer of the OSI model are different from sessions and
    session data that web developers usually talk about. Session variables in a web
    application are a concept in the application layer that are implemented by the
    web browser software.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: OSI模型的会话层中的会话与Web开发人员通常谈论的会话和会话数据是不同的。Web应用程序中的会话变量是应用程序层的概念，由Web浏览器软件实现。
- en: Session variables, in the application layer, stay in the browser for as long
    as they need to or until the user closes the browser window. In the session layer
    of the OSI model, the session usually only lasts for as long as it takes to transmit
    a single file!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 会话变量在应用程序层中会在浏览器中保留，直到它们不再需要或者用户关闭浏览器窗口。在OSI模型的会话层中，会话通常只持续足以传输单个文件的时间！
- en: Presentation Layer
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 演示层
- en: The *presentation layer* transforms incoming data from character strings into
    a format that the application can understand and use. It is also responsible for
    character encoding and data compression. The presentation layer cares about whether
    incoming data received by the application represents a PNG file or an HTML file,
    and hands this file to the application layer accordingly.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*演示层*将输入数据从字符字符串转换为应用程序可以理解和使用的格式。它还负责字符编码和数据压缩。演示层关心应用程序接收到的输入数据是否表示PNG文件还是HTML文件，并相应地将此文件传递给应用程序层。'
- en: Application Layer
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序层
- en: The *application layer* interprets the data encoded by the presentation layer
    and uses it appropriately for the application. I like to think of the presentation
    layer as being concerned with transforming and identifying things, while the application
    layer is concerned with “doing” things. For instance, HTTP with its methods and
    statuses is an application layer protocol. The more banal JSON and HTML (because
    they are file types that define how data is encoded) are presentation layer protocols.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*应用程序层*解释由演示层编码的数据并适当地使用它。我认为演示层负责转换和识别事物，而应用程序层负责“做”事情。例如，HTTP及其方法和状态是应用程序层协议。更乏味的JSON和HTML（因为它们是定义数据编码方式的文件类型）是演示层协议。'
- en: HTML
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML
- en: The primary function of a web browser is to display HTML (HyperText Markup Language) documents.
    HTML documents are files that end in *.html* or, less frequently, *.htm*.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Web浏览器的主要功能是显示HTML（超文本标记语言）文档。HTML文档是以*.html*或者较少见的*.htm*结尾的文件。
- en: Like text files, HTML files are encoded with plain-text characters, usually
    ASCII (see [“Text Encoding and the Global Internet”](ch10.html#ch10sec2)). This
    means that they can be opened and read with any text editor.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 像文本文件一样，HTML文件使用纯文本字符编码，通常是ASCII（参见[“文本编码和全球互联网”](ch10.html#ch10sec2)）。这意味着它们可以用任何文本编辑器打开和阅读。
- en: 'This is an example of a simple HTML file:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单HTML文件的例子：
- en: '[PRE0]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: HTML files are a special type of XML (Extensible Markup Language) files. Each
    string beginning with a `<` and ending with a `>` is called a *tag*.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: HTML文件是一种特殊类型的XML（可扩展标记语言）文件。每个以`<`开头且以`>`结尾的字符串称为*标签*。
- en: The XML standard defines the concept of opening or *starting tags* like `<html>` and
    closing or *ending tags* that begin with a `</`, like `</html>`. Between the starting
    and ending tags is the *content* of the tags.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: XML标准定义了开放或*起始标签*（如`<html>`）和以`</`开头的*结束标签*，如`</html>`的概念。在起始和结束标签之间是标签的*内容*。
- en: 'In the case where it’s unnecessary for tags to have any content at all, you
    may see a tag that acts as its own closing tag. This is called an empty element
    tag or a self-closing tag and looks like:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在不需要标签有任何内容的情况下，您可能会看到一个标签，它充当自己的闭合标签。这称为空元素标签或自闭合标签，看起来像：
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Tags can also have attributes in the form of `attributeKey="attribute value"`,
    for example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 标签也可以具有`attributeKey="attribute value"`形式的属性，例如：
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, the `div` tag has the attribute `class` which has the value `main-content`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`div`标签具有`class`属性，其值为`main-content`。
- en: An HTML *element* has a starting tag with some optional attributes, some content,
    and a closing tag. An element can also contain multiple other elements, in which
    case they are *nested* elements.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: HTML *元素*具有起始标记和一些可选属性、一些内容以及结束标记。元素还可以包含多个其他元素，此时它们是*嵌套*元素。
- en: While XML defines these basic concepts of tags, content, attributes, and values,
    HTML defines what those tags can and can’t be, what they can and cannot contain,
    and how they must be interpreted and displayed by the browser.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然XML定义了标签、内容、属性和值的基本概念，但HTML定义了这些标签可以和不能是什么，它们可以和不能包含什么，以及它们必须如何由浏览器解释和显示。
- en: 'For example, the HTML standard defines the usage of the `class` *attribute*
    and the `id` *attribute*, which are often used to organize and control the display
    of HTML elements:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，HTML标准定义了`class` *属性*和`id` *属性*的使用，这些属性通常用于组织和控制HTML元素的显示：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As a rule, multiple elements on the page can contain the same `class` value;
    however, any value in the `id` field must be unique on that page. So multiple
    elements could have the `class content`, but there can only be one element with
    the `id main-title`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 作为规则，页面上的多个元素可以包含相同的`class`值；然而，`id`字段中的任何值在该页面上必须是唯一的。因此，多个元素可以具有`class content`，但只能有一个元素具有`id
    main-title`。
- en: How the elements in an HTML document are displayed in the web browser is entirely
    dependent on how the web browser, as a piece of software, is programmed. If one
    web browser is programmed to display an element differently than another web browser,
    this will result in inconsistent experiences for users of different web browsers.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: HTML文档中元素在Web浏览器中的显示完全取决于作为软件的Web浏览器如何编程。如果一个Web浏览器被编程为以不同于另一个Web浏览器的方式显示元素，这将导致不同Web浏览器用户的不一致体验。
- en: For this reason, it’s important to coordinate exactly what the HTML tags are
    supposed to do and codify this into a single standard. The HTML standard is currently
    controlled by the World Wide Web Consortium (W3C). The current specification for
    all HTML tags can be found at [*https://html.spec.whatwg.org/multipage/*](https://html.spec.whatwg.org/multipage/).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，协调HTML标签的确切功能并将其编码为单一标准非常重要。HTML标准目前由万维网联盟（W3C）控制。所有HTML标签的当前规范可以在[*https://html.spec.whatwg.org/multipage/*](https://html.spec.whatwg.org/multipage/)找到。
- en: 'However, the formal W3C HTML standard is probably not the best place to learn
    HTML if you’ve never encountered it. A large part of web scraping involves reading
    and interpreting raw HTML files found on the web. If you’ve never dealt with HTML
    before, I highly recommend a book like [*HTML & CSS: The Good Parts*](https://www.oreilly.com/library/view/html-css/9781449381943/)
    to get familiar with some of the more common HTML tags.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '然而，正式的W3C HTML标准可能不是学习HTML的最佳地方，如果你以前从未遇到过它。网页抓取的一个重要部分涉及阅读和解释在Web上找到的原始HTML文件。如果你以前没有处理过HTML，我强烈推荐像[*HTML
    & CSS: The Good Parts*](https://www.oreilly.com/library/view/html-css/9781449381943/)这样的书籍来熟悉一些更常见的HTML标签。'
- en: CSS
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS
- en: Cascading Style Sheets (CSS) define the appearance of HTML elements on a web
    page. CSS defines things like layout, colors, position, size, and other properties
    that transform a boring HTML page with browser-defined default styles into something
    more appealing for a modern web viewer.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 层叠样式表（CSS）定义了Web页面上HTML元素的外观。CSS定义了布局、颜色、位置、大小以及其他属性，这些属性将无聊的具有浏览器定义默认样式的HTML页面转变为对现代Web观众更具吸引力的内容。
- en: 'Using the HTML example from earlier:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用之前的HTML示例：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'some corresponding CSS might be:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一些相应的CSS可能是：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This CSS will set the `h1` tag’s content font size to be 20 pixels and display
    it in green text.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此CSS将设置`h1`标签的内容字体大小为20像素，并以绿色文本显示。
- en: The `h1` part of this CSS is called the *selector* or the CSS selector. This
    CSS selector indicates that the CSS inside the curly braces will be applied to
    the content of any `h1` tags.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此CSS中的`h1`部分称为*选择器*或CSS选择器。此CSS选择器指示大括号内的CSS将应用于任何`h1`标签的内容。
- en: 'CSS selectors can also be written to apply only to elements with certain `class`
    or `id` attributes. For example, using the HTML:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: CSS选择器也可以写成仅适用于具有特定`class`或`id`属性的元素。例如，使用以下HTML：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'the corresponding CSS might be:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是相应的CSS：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: A `#` is used to indicate the value of an `id` attribute, and a `.` is used
    to indicate the value of a `class` attribute.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`#`用于指示`id`属性的值，`.`用于指示`class`属性的值。'
- en: 'If it’s unimportant what the value of the tag is, the tag name can be omitted
    entirely. For instance, this CSS would turn the contents of any element having
    the class content green:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果标记的值不重要，可以完全省略标记名称。例如，这个 CSS 将使具有类 content 的任何元素的内容变绿：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'CSS data can be contained either in the HTML itself or in a separate CSS file
    with a *.css* file extension. CSS in the HTML file is placed inside `<style>`
    tags in the head of the HTML document:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 数据可以包含在 HTML 本身中，也可以包含在具有 *.css* 文件扩展名的单独 CSS 文件中。HTML 文件中的 CSS 放置在 HTML
    文档的 head 中的`<style>`标记内：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'More commonly, you’ll see CSS being imported in the head of the document using
    the `link` tag:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 更常见的是，在文档的 head 中使用`link`标记导入 CSS：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As a web scraper, you won’t often find yourself writing style sheets to make
    the HTML pretty. However, it is important to be able to read and recognize how
    an HTML page is being transformed by the CSS in order to relate what you’re seeing
    in your web browser to what you’re seeing in code.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 作为网络爬虫，您不太可能经常编写样式表来使 HTML 美观。但是，重要的是要能够阅读并识别 HTML 页面如何被 CSS 转换，以便将您在 Web 浏览器中看到的内容与代码中看到的内容相关联。
- en: 'For instance, you may be confused when an HTML element doesn’t appear on the
    page. When you read the element’s applied CSS, you see:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当一个 HTML 元素不出现在页面上时，您可能会感到困惑。当您阅读元素的应用 CSS 时，您会看到：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This sets the `display` attribute of the element to `none`, hiding it from the
    page.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这将元素的`display`属性设置为`none`，从页面中隐藏它。
- en: If you’ve never encountered CSS before, you likely won’t need to study it in
    any depth in order to scrape the web, but you should be comfortable with its syntax
    and note the CSS rules that are mentioned in this book.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您以前从未遇到过 CSS，则可能不需要深入研究它以便进行 Web 抓取，但是您应该熟悉其语法并注意本书中提到的 CSS 规则。
- en: JavaScript
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript
- en: When a client makes a request to a web server for a particular web page, the
    web server executes some code to create the web page that it sends back. This
    code, called *server-side code*, can be as simple as retrieving a static HTML
    file and sending it on. Or, it can be a complex application written in Python
    (the best language), Java, PHP, or any number of common server-side programming
    languages.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端请求 Web 服务器的特定 Web 页面时，Web 服务器会执行一些代码以创建发送回的 Web 页面。这些代码称为*服务器端代码*，可以简单到检索静态
    HTML 文件并将其发送出去。或者，它可以是用 Python（最好的语言）、Java、PHP 或任何常见的服务器端编程语言编写的复杂应用程序。
- en: Ultimately, this server-side code creates some sort of stream of data that gets
    sent to the browser and displayed. But what if you want some type of interaction
    or behavior—a text change or a drag-and-drop element, for example—to happen without
    going back to the server to run more code? For this, you use *client-side code*.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，这些服务器端代码会创建一些数据流，该数据流被发送到浏览器并显示出来。但是，如果您希望某种类型的交互或行为（例如文本更改或拖放元素）发生而无需返回服务器运行更多代码，该怎么办？为此，您使用*客户端代码*。
- en: 'Client-side code is any code that is sent over by a web server but actually
    executed by the client’s browser. In the olden days of the internet (pre-mid-2000s),
    client-side code was written in a number of languages. You may remember Java applets
    and Flash applications, for example. But JavaScript emerged as the lone option
    for client-side code for a simple reason: it was the only language supported by
    the browsers themselves, without the need to download and update separate software
    (like Adobe Flash Player) in order to run the programs.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端代码是由 Web 服务器发送的任何代码，但实际上由客户端的浏览器执行。在互联网的早期（2000年中期之前），客户端代码是用多种语言编写的。例如，您可能还记得
    Java 小程序和 Flash 应用程序。但 JavaScript 出现为客户端代码提供了唯一的选择，原因很简单：它是浏览器本身支持的唯一语言，无需下载和更新单独的软件（如
    Adobe Flash Player）即可运行程序。
- en: JavaScript originated in the mid-90s as a new feature in Netscape Navigator.
    It was quickly adopted by Internet Explorer, making it the standard for both major
    web browsers at the time.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 在 90 年代中期作为 Netscape Navigator 的新功能而起源。它很快被 Internet Explorer 采纳，使其成为当时两个主要
    Web 浏览器的标准。
- en: Despite the name, JavaScript has almost nothing to do with Java, the server-side
    programming language. Aside from a small handful of superficial syntactic similarities,
    they are extremely dissimilar languages.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管名字一样，JavaScript 几乎与服务器端编程语言 Java 毫无关系。除了一小部分表面上的语法相似之外，它们是极不相似的语言。
- en: In 1996, Netscape (the creator of JavaScript) and Sun Microsystems (the creator
    of Java) did a license agreement allowing Netscape to use the name “JavaScript,”
    anticipating some further collaboration [between the two languages](https://www.infoworld.com/article/2653798/javascript-creator-ponders-past--future.html).
    However, this collaboration never happened, and it’s been a confusing misnomer
    ever since.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 1996 年，Netscape（JavaScript 的创建者）和 Sun Microsystems（Java 的创建者）达成了许可协议，允许 Netscape
    使用名称“JavaScript”，预计会有进一步的合作[（两种语言之间）](https://www.infoworld.com/article/2653798/javascript-creator-ponders-past--future.html)。然而，这种合作从未发生过，自那时以来一直是一个令人困惑的误称。
- en: Although it had an uncertain start as a scripting language for a now-defunct
    web browser, JavaScript is now the most popular programming language in the world.
    This popularity is boosted by the fact that it can also be used server-side, using
    Node.js. But its popularity is certainly cemented by the fact that it’s the only
    client-side programming language available.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它作为一个现在已不复存在的网页浏览器的脚本语言有一个不确定的开始，但 JavaScript 现在是世界上最流行的编程语言。这种流行程度得益于它还可以在服务器端使用，使用
    Node.js。但它的流行无疑是因为它是唯一的客户端编程语言。
- en: 'JavaScript is embedded into HTML pages using the `<script>` tag. The JavaScript
    code can be inserted as content:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 被嵌入到 HTML 页面中使用 `<script>` 标签。JavaScript 代码可以作为内容插入：
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Or it can be referenced in a separate file using the `src` attribute:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 或者可以使用 `src` 属性在单独的文件中引用：
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Unlike HTML and CSS, you likely won’t need to read or write JavaScript while
    scraping the web, but it is handy to at least get a feel for what it looks like.
    It can sometimes contain useful data. For example:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 与 HTML 和 CSS 不同，您在抓取网页时可能不需要阅读或编写 JavaScript，但至少了解其外观是很有用的。有时它可能包含有用的数据。例如：
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, a JavaScript variable is being declared with the keyword `const` (which
    stands for “constant”) and is being set to a JSON-formatted string containing
    some data, which can be parsed by a web scraper directly.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，一个 JavaScript 变量正在用关键字 `const`（代表“常量”）声明，并被设置为包含一些数据的 JSON 格式字符串，这些数据可以直接由网页抓取器解析。
- en: JSON (JavaScript Object Notation) is a text format that contains human-readable
    data, is easily parsed by web scrapers, and is ubiquitous on the web. I will discuss
    it further in [Chapter 15](ch15.html#c-15).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: JSON（JavaScript 对象表示法）是一种文本格式，包含易于解析的人类可读数据，在网页上无处不在。我将在[第 15 章](ch15.html#c-15)进一步讨论它。
- en: 'You may also see JavaScript making a request to a different source entirely
    for data:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能也会看到 JavaScript 向完全不同的源请求数据：
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, JavaScript is creating a request to `http://example.com/data.json` and,
    after the response is received, logging it to the console (more about the “console”
    in the next section).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，JavaScript 正在创建一个请求到 `http://example.com/data.json`，并在接收到响应后将其记录到控制台中（有关“控制台”的更多信息，请参阅下一节）。
- en: JavaScript was originally created to provide dynamic interactivity and animation
    in an otherwise static web. However, today, not all dynamic behavior is created
    by JavaScript. HTML and CSS also have some features that allow them to change
    the content on the page.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 最初被创建为在否则静态的网页中提供动态互动和动画。然而，今天，并不是所有的动态行为都是由 JavaScript 创建的。HTML
    和 CSS 也具有一些功能，允许它们在页面上改变内容。
- en: For example, CSS keyframe animation can allow elements to move, change color,
    change size, or undergo other transformations when the user clicks on or hovers
    over that element.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，CSS 关键帧动画可以使元素在用户点击或悬停在元素上时移动、改变颜色、改变大小或进行其他转换。
- en: Recognizing how the (often literally) moving parts of a website are put together
    can help you avoid wild goose chases when you’re trying to locate data.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 理解网站（通常字面上的）如何组合起来可以帮助您在尝试定位数据时避免走了弯路。
- en: Watching Websites with Developer Tools
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用开发者工具观察网站
- en: Like a jeweler’s loupe or a cardiologist’s stethoscope, your browser’s *developer
    tools* are essential to the practice of web scraping. To collect data from a website,
    you have to know how it’s put together. The developer tools show you just that.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 像珠宝商的放大镜或心脏病医生的听诊器一样，您的浏览器的*开发者工具*对于网页抓取至关重要。要从网站收集数据，您必须了解它的构建方式。开发者工具正是为您展示这一切的。
- en: Throughout this book, I will use developer tools as shown in Google Chrome.
    However, the developer tools in Firefox, Microsoft Edge, and other browsers are
    all very similar to each other.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我将展示在 Google Chrome 中使用开发者工具。然而，Firefox、Microsoft Edge 和其他浏览器中的开发者工具都非常相似。
- en: 'To access the developer tools in your browser’s menu, use the following instructions:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问浏览器菜单中的开发者工具，请按照以下说明进行操作：
- en: '**Chrome**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**Chrome**'
- en: View→ Developer → Developer Tools
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 视图 → 开发者工具 → 开发者工具
- en: '**Safari**'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**Safari**'
- en: Safari → Preferences → Advanced → Check “Show Develop menu in menu bar”
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Safari → 首选项 → 高级 → 勾选“在菜单栏中显示开发”菜单
- en: 'Then, using the Develop menu: Develop → Show web inspector'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用开发菜单：开发 → 显示网页检查器
- en: '**Microsoft Edge**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**Microsoft Edge**'
- en: 'Using the menu: Tools → Developer → Developer Tools'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 使用菜单：工具 → 开发者 → 开发者工具
- en: '**Firefox**'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**Firefox**'
- en: Tools → Browser Tools → Web Developer Tools
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 工具 → 浏览器工具 → Web开发者工具
- en: Across all browsers, the keyboard shortcut for opening the developer tools is
    the same, and depending on your operating system.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有浏览器中，打开开发者工具的键盘快捷键都是相同的，具体取决于您的操作系统。
- en: '**Mac**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**Mac**'
- en: Option + Command + I
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Option + Command + I
- en: '**Windows**'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows**'
- en: CTRL + Shift + I
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: CTRL + Shift + I
- en: When web scraping, you’ll likely spend most of your time in the Network tab
    (shown in [Figure 1-1](#fig-1-1)) and the Elements tab.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行网页抓取时，你可能会大部分时间都在网络选项卡（如[图 1-1](#fig-1-1)所示）和“Elements”选项卡中度过。
- en: '![](assets/wsp3_0101.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/wsp3_0101.png)'
- en: Figure 1-1\. The Chrome Developer tools showing a page load from Wikipedia
  id: totrans-138
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-1\. Chrome开发者工具显示从维基百科加载的页面
- en: The Network tab shows all of the requests made by the page as the page is loading.
    If you’ve never used it before, you might be in for a surprise! It’s common for
    complex pages to make dozens or even hundreds of requests for assets as they’re
    loading. In some cases, the pages may even continue to make steady streams of
    requests for the duration of your stay on them. For instance, they may be sending
    data to action tracking software, or polling for updates.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 网络选项卡显示页面加载过程中发出的所有请求。如果你以前没有使用过，可能会感到惊讶！复杂页面加载时常常会发出数十甚至数百个资源请求。有时，页面甚至会在您访问期间持续发送请求。例如，它们可能会向行动追踪软件发送数据，或者轮询更新。
- en: Don’t See Anything in the Network Tab?
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在网络选项卡中看不到任何内容吗？
- en: Note that the developer tools must be open *while* the page is making its requests
    in order for those requests to be captured. If you load a page without having
    the developer tab open, and then decide to inspect it by opening the developer
    tools, you may want to refresh the page to reload it and see the requests it is
    making.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，开发者工具必须在页面发出请求时打开才能捕获这些请求。如果您加载页面时未打开开发者选项卡，然后决定通过打开开发者工具进行检查，可能需要刷新页面以重新加载并查看它正在发出的请求。
- en: 'If you click on a single network request in the Network tab, you’ll see all
    of the data associated with that request. The layout of this network request inspection
    tool differs slightly from browser to browser, but generally allows you to see:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在网络选项卡中点击单个网络请求，你会看到与该请求相关的所有数据。这个网络请求检查工具的布局在不同的浏览器中略有不同，但通常允许你查看：
- en: The URL the request was sent to
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求发送的URL
- en: The HTTP method used
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用的HTTP方法
- en: The response status
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应状态
- en: All headers and cookies associated with the request
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与请求相关的所有标头和Cookie
- en: The payload
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载
- en: The response
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应
- en: This information is useful for writing web scrapers that replicate these requests
    in order to fetch the same data the page is fetching.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息对于编写网页抓取器以复制这些请求以获取相同数据是有用的。
- en: The Elements tab (see Figures [1-2](#fig-1-2) and [1-3](#fig-1-3)) is used to
    examine the structure and contents of HTML files. It’s extremely handy for examining
    specific pieces of data on a page in order to locate the HTML tags surrounding
    that data and write scrapers to grab it.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: “Elements”选项卡（参见[图 1-2](#fig-1-2) 和 [图 1-3](#fig-1-3)）用于检查HTML文件的结构和内容。它非常方便，可以检查页面上特定数据的HTML标签，以便编写网页抓取器抓取这些数据。
- en: As you hover over the text of each HTML element in the Elements tab, you’ll
    see the corresponding element on the page visually highlight in the browser. Using
    this tool is a great way to explore the pages and develop a deeper understanding
    of how they’re constructed ([Figure 1-3](#fig-1-3)).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在“Elements”选项卡上悬停在每个HTML元素的文本上时，你会在浏览器中看到相应的页面元素被视觉高亮显示。使用这个工具是探索页面并深入理解页面构建方式的好方法（参见[图 1-3](#fig-1-3)）。
- en: '![](assets/wsp3_0102.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/wsp3_0102.png)'
- en: Figure 1-2\. Right-click on any piece of text or data and select Inspect to
    view the elements surrounding that data in the Elements tab
  id: totrans-153
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-2\. 右键单击任何文本或数据，并选择“检查”以查看“Elements”选项卡中围绕该数据的元素
- en: '![](assets/wsp3_0103.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/wsp3_0103.png)'
- en: Figure 1-3\. Hovering over the element in the HTML will highlight the corresponding
    structure on the page
  id: totrans-155
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-3。在 HTML 中悬停在元素上将会突出显示页面上对应的结构。
- en: You don’t need to be an expert on the internet, networking, or even programming
    to begin scraping the web. However, having a basic understanding of how the pieces
    fit together, and how your browser’s developer tools show those pieces, is essential.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要成为互联网、网络甚至编程方面的专家就能开始网络爬虫。然而，对于这些组件如何组合以及你的浏览器的开发者工具如何显示这些组件有基本的了解是必不可少的。
