- en: Chapter 26\. v3.7 to v3.n Migration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第26章\. 从 v3.7 到 v3.n 的迁移
- en: 'This book spans several versions of Python and covers some substantial (and
    still evolving!) new features, including:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书跨越了几个版本的 Python，并涵盖了一些重要的（仍在发展中的！）新功能，包括：
- en: Order-preserving dicts
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持顺序的字典
- en: Type annotations
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型注解
- en: := assignment expressions (informally called “the walrus operator”)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: := 赋值表达式（俗称“海象操作符”）
- en: Structural pattern matching
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构化模式匹配
- en: Individual developers may be able to install each new Python version as it is
    released, and solve compatibility issues as they go. But for Python developers
    working in a corporate environment or maintaining a shared library, migrating
    from one version to the next involves deliberation and planning.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 个别开发者可能会在每个新的 Python 版本发布后进行安装，并在解决兼容性问题时逐步升级。但对于在企业环境中工作或维护共享库的 Python 开发者来说，从一个版本迁移到下一个版本需要深思熟虑和计划。
- en: 'This chapter deals with the changing shape of the Python language, as seen
    from a Python programmer’s viewpoint. (There have been many changes in Python
    internals as well, including to the Python C API, but those are beyond the scope
    of this chapter: for details, see the “What’s New in Python 3.*n*” sections of
    each release’s online documentation.)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了 Python 语言的变化，从 Python 程序员的视角来看。（Python 内部也有许多变化，包括 Python C API 的变化，但这些超出了本章的范围：详情请参见每个发布版本的在线文档中的“Python
    3.*n* 新特性”部分。）
- en: Significant Changes in Python Through 3.11
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 3.11 中的重大更改
- en: Most releases have a handful of significant new features and improvements that
    characterize that release, and it is useful to have these in mind as high-level
    reasons for targeting a particular release. [Table 26-1](#significant_changes_in_recent_python_re)
    details only major new features and breaking changes in versions 3.6–3.11^([1](ch26.xhtml#ch01fn164))
    that are likely to affect many Python programs; see the [Appendix](app01.xhtml#new_features_and_changes_in)
    for a more complete list.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数版本都有几个显著的新功能和改进，这些特性和改进可以作为选择特定版本的高层次原因。[表 26-1](#significant_changes_in_recent_python_re)
    详细介绍了版本 3.6–3.11 的主要新功能和破坏性更改，这些更改可能影响许多 Python 程序；更完整的列表请参见[附录](app01.xhtml#new_features_and_changes_in)。
- en: Table 26-1\. Significant changes in recent Python releases
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 表 26-1\. 近期 Python 发布的重大更改
- en: '| Version | New features | Breaking changes |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 版本 | 新功能 | 破坏性更改 |'
- en: '| --- | --- | --- |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 3.6 |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 3.6 |'
- en: dicts preserve order (as an implementation detail of CPython)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字典保留顺序（作为 CPython 的实现细节）
- en: F-strings added
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 F-字符串
- en: _ in numeric literals supported
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持数字文字中的下划线
- en: Annotations can be used for types, which can be checked with external tools
    such as mypy
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注解可以用于类型，可以通过外部工具如 mypy 进行检查
- en: asyncio is no longer a provisional module
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: asyncio 不再是一个临时模块
- en: '*Initial release: December 2016*'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*初始发布时间：2016年12月*'
- en: '*End of support: December 2021*'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*支持结束时间：2021年12月*'
- en: '|'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Unknown escapes of \ and an ASCII letter no longer supported in pattern arguments
    to most re functions (still permitted in re.sub() only)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再支持在大多数 re 函数的模式参数中使用未知转义的 \ 和 ASCII 字母（仅在 re.sub() 中仍然允许）
- en: '|'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| 3.7 |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 3.7 |'
- en: dicts preserve order (as a formal language guarantee)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字典保留顺序（作为正式语言的保证）
- en: dataclasses module added
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 dataclasses 模块
- en: breakpoint() function added
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 breakpoint() 函数
- en: '*Initial release: June 2018*'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*初始发布时间：2018年6月*'
- en: '*Planned end of support: June 2023*'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*计划支持结束时间：2023年6月*'
- en: '|'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Unknown escapes of \ and an ASCII letter no longer supported in pattern arguments
    to re.sub()
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再支持在 re.sub() 的模式参数中使用未知转义的 \ 和 ASCII 字母
- en: Named arguments no longer supported in bool(), float(), list(), and tuple()
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再支持在 bool()、float()、list() 和 tuple() 中使用命名参数
- en: Leading named argument in int() no longer supported
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再支持在 int() 中使用前置命名参数
- en: '|'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| 3.8 |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 3.8 |'
- en: Assignment expressions (:= , aka the walrus operator) added
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了赋值表达式（:=，也称为海象操作符）
- en: / and * in function argument lists to indicate positional-only and named-only
    arguments
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在函数参数列表中使用 / 和 * 表示位置参数和命名参数
- en: Trailing = for debugging in f-strings (f'{x=}' short form for f'x={x!r}')
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 f-字符串中使用尾部 = 进行调试（f'{x=}' 的简写形式为 f'x={x!r}'）
- en: Typing classes added (Literal, TypedDict, Final, Protocol)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了类型类（Literal, TypedDict, Final, Protocol）
- en: '*Initial release: October 2019*'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*初始发布时间：2019年10月*'
- en: '*Planned end of support: October 2024*'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*计划支持结束时间：2024年10月*'
- en: '|'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: time.clock() removed; use time.perf_counter()
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了 time.clock()；使用 time.perf_counter()
- en: pyvenv script removed; use **python -m venv**
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了 pyvenv 脚本；使用 **python -m venv** 替代
- en: '**yield** and **yield from** no longer allowed in comprehensions or genexps'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**yield** 和 **yield from** 不再允许在推导式或生成器表达式中使用'
- en: SyntaxWarnings on **is** and **is not** tests against str and int literals added
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了对**is**和**is not**对str和int字面值的语法警告
- en: '|'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| 3.9 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 3.9 |'
- en: Union operators &#124; and &#124;= on dicts supported
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字典上支持联合运算符&#124;和&#124;=
- en: str.removeprefix() and str.removesuffix() methods added
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了str.removeprefix()和str.removesuffix()方法
- en: zoneinfo module added for IANA time zone support (to replace third-party pytz
    module)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了zoneinfo模块以支持IANA时区（替换第三方pytz模块）
- en: Type hints can now use built-in types in generics (list[int] instead of List[int])
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型提示现在可以在泛型中使用内置类型（例如list[int]而不是List[int]）
- en: '*Initial release: October 2020*'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*初始发布时间：2020年10月*'
- en: '*Planned end of support: October 2025*'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*预计支持结束时间：2025年10月*'
- en: '|'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: array.array.tostring() and fromstring() removed
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了array.array.tostring()和fromstring()方法
- en: threading.Thread.isAlive() removed (use is_alive() instead)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了threading.Thread.isAlive()（请使用is_alive()代替）
- en: ElementTree and Element’s getchildren() and getiterator() removed
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了ElementTree和Element的getchildren()和getiterator()方法
- en: base64.encodestring() and decodestring() removed (use encodebytes() and decodebytes()
    instead)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了base64.encodestring()和decodestring()（请改用encodebytes()和decodebytes()）
- en: fractions.gcd() removed (use math.gcd() instead)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了fractions.gcd()（请使用math.gcd()代替）
- en: typing.NamedTuple._fields removed (use __annotations__ instead)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了typing.NamedTuple._fields（请改用__annotations__代替）
- en: '|'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| 3.10 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 3.10 |'
- en: '**match**/**case** structural pattern matching supported'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持**match**/**case**结构模式匹配
- en: Writing union types as X &#124; Y (in type annotations and as second argument
    to isinstance()) allowed
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许将联合类型写为X &#124; Y（在类型注解中和作为isinstance()的第二个参数）
- en: Optional strict argument added to zip() built-in to detect sequences of differing
    lengths
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了zip()内置函数的可选strict参数，以检测长度不同的序列
- en: 'Parenthesized context managers now officially supported; e.g., **with**(*ctxmgr*,
    *ctxmgr*, ...):'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方支持了带括号的上下文管理器；例如，**with**(*ctxmgr*, *ctxmgr*, ...)
- en: '*Initial release: October 2021*'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*初始发布时间：2021年10月*'
- en: '*Planned end of support: October 2026*'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*预计支持结束时间：2026年10月*'
- en: '|'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Importing ABCs from collections removed (must now import from collections.abc)
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从collections中移除了ABCs导入（现在必须从collections.abc导入）
- en: loop parameter removed from most of asyncio’s high-level API
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数asyncio高级API中的循环参数已被移除
- en: '|'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| 3.11 |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 3.11 |'
- en: Improved error messages
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进了错误消息
- en: General performance boost
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总体性能提升
- en: Exception groups and except* added
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了异常组和except*表达式
- en: Typing classes added (Never, Self)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了类型提示类（Never，Self）
- en: tomllib TOML parser added to stdlib
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将tomllib TOML解析器添加到标准库
- en: '*Initial release: October 2022*'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*初始发布时间：2022年10月*'
- en: '*Planned end of support: October 2027 (est.)*'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*预计支持结束时间：2027年10月（估计）*'
- en: '|'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: binhex module removed
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了binhex模块
- en: int to str conversion restricted to 4,300 digits
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将int转换为str的限制扩展到4300位数字
- en: '|'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Planning a Python Version Upgrade
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划Python版本升级
- en: 'Why upgrade in the first place? If you have a stable, running application,
    and a stable deployment environment, a reasonable decision might be to leave it
    alone. But version upgrades do come with benefits:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 首先为什么要升级？如果您有一个稳定运行的应用程序和一个稳定的部署环境，那么一个合理的决定可能是不做任何更改。但是版本升级确实带来了好处：
- en: New versions usually introduce new features, which may allow you to simplify
    code.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新版本通常引入新功能，这可能使您能够简化代码。
- en: Updated versions include bug fixes and refactorings, which can improve system
    stability and performance.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新的版本包括错误修复和重构，可以提高系统的稳定性和性能。
- en: Security vulnerabilities identified in an older version may be fixed in a new
    version.^([2](ch26.xhtml#ch01fn165))
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旧版本中发现的安全漏洞可能在新版本中得到修复。^([2](ch26.xhtml#ch01fn165))
- en: Eventually, old Python versions fall out of support, and projects running on
    older versions become difficult to staff and more costly to maintain. Upgrading
    might then become a necessity.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，旧版Python版本将不再受支持，运行在旧版本上的项目将变得难以维护且成本更高。因此，升级可能成为必要。
- en: Choosing a Target Version
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择目标版本
- en: Before deciding which version to migrate to, sometimes you have to figure out
    first, “What version am I running now?” You may be unpleasantly surprised to find
    old software running unsupported Python versions lurking in your company’s systems.
    Often this happens when those systems depend on some third-party package that
    is itself behind in version upgrades, or does not have an upgrade available. The
    situation is even more dire when such a system is critical in some way for company
    operations. You may be able to isolate the lagging package behind a remote-access
    API, allowing that package to run on the old version while permitting your own
    code to safely upgrade. The presence of systems with these upgrade constraints
    must be made visible to senior management, so they can be advised of the risks
    and trade-offs of retaining, upgrading, isolating, or replacing.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在决定迁移哪个版本之前，有时你必须首先弄清楚，“我现在正在运行哪个版本？”你可能会不愉快地发现，你公司系统中存在运行不受支持的 Python 版本的旧软件。通常情况是，这些系统依赖于某些第三方包，而这些包本身版本落后或没有可用的升级版本。当这种系统在公司运营中扮演重要角色时，情况会更为严峻。你可以通过远程访问
    API 隔离落后的包，允许该包在旧版本上运行，同时让你自己的代码安全升级。必须向高级管理层展示存在升级约束的系统，以便他们了解保留、升级、隔离或替换的风险和权衡。
- en: 'The choice of target version often defaults to “whatever version is the most
    current.” This is a reasonable choice, as it is usually the most cost-effective
    option with respect to the investment involved in doing the upgrade: the most
    recent release will have the longest support period moving forward. A more conservative
    position might be “whatever version is the most current, minus 1.” You can be
    reasonably sure that version *N*–1 has undergone some period of in-production
    testing at other companies, and someone else has shaken out most of the bugs.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 目标版本的选择通常默认为“最新版本”。这是一个合理的选择，因为在进行升级时，它通常是成本效益最高的选项：最新发布的版本将具有最长的支持期。更保守的立场可能是“最新版本减一”。你可以相当确信，版本
    *N*–1 在其他公司进行了一段生产测试期间，并且其他人已经解决了大部分问题。
- en: Scoping the Work
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确定工作范围
- en: After you have selected your target version of Python, identify all the breaking
    changes in the versions after the version your software is currently using, up
    to and including the target version (see the [Appendix](app01.xhtml#new_features_and_changes_in)
    for a detailed table of features and breaking changes by version; additional details
    can be found in the “What’s New in Python 3.*n*” sections of the [online docs](https://oreil.ly/pvEtK)).
    Breaking changes are usually documented with a compatible form that will work
    with both your current version and the target version. Document and communicate
    the source changes that development teams will need to make before upgrading.
    (There may be significantly more work than expected involved in moving directly
    to the selected target version, if a lot of your code is affected by breaking
    changes or compatibility issues with related software. You may even end up revisiting
    the choice of target version or considering smaller steps. Perhaps you’ll decide
    on upgrading to *target*–1 as a first step and deferring the task of the upgrade
    to *target* or *target*+1 for a subsequent upgrade project.)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择了 Python 的目标版本之后，识别从当前软件使用的版本到目标版本（包括目标版本）之间的所有突破性变化（请参阅[附录](app01.xhtml#new_features_and_changes_in)中的详细功能和版本变化表；更多详细信息可以在[在线文档](https://oreil.ly/pvEtK)的“Python
    3.*n* 新特性”部分找到）。通常会有适用于当前版本和目标版本的兼容形式文档化的突破性变化。记录并传达开发团队在升级之前需要进行的源代码更改。（如果您的代码受到大量突破性变化或与相关软件的兼容性问题的影响，直接升级到所选目标版本可能涉及比预期更多的工作。您甚至可能需要重新考虑目标版本的选择，或者考虑采取较小的步骤。也许您会决定首先升级到
    *目标*–1，然后推迟升级到 *目标* 或 *目标*+1 的任务，作为后续升级项目。）
- en: Identify any third-party or open source libraries that your codebase uses, and
    ensure that they are compatible with (or have plans to be compatible with) the
    target Python version. Even if your own codebase is ready for upgrading to the
    target, an external library that lags behind may hold up your upgrade project.
    If necessary, you may be able to isolate such a library in a separate runtime
    environment (using virtual machines or container technologies), if that library
    offers a remote access programming interface.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 确定您的代码库使用的任何第三方或开源库，并确保它们与目标 Python 版本兼容（或计划与之兼容）。即使您自己的代码库已准备好升级到目标版本，落后的外部库可能会阻碍您的升级项目。必要时，您可以将这样的库隔离在单独的运行时环境中（使用虚拟机或容器技术），如果该库提供远程访问编程接口的话。
- en: Make the target Python version available in development environments, and optionally
    in deployment environments, so that developers can confirm that their upgrade
    changes are complete and correct.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发环境中提供目标 Python 版本，并可选择在部署环境中提供，以便开发人员确认其升级更改是完整和正确的。
- en: Applying the Code Changes
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用代码更改
- en: Once you have decided on your target version and identified all the breaking
    changes, you’ll need to make changes in your codebase to make it compatible with
    the target version. Your goal, ideally, is to have the code in a form that is
    compatible with both the current *and* target Python versions.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确定了目标版本并识别了所有破坏性更改，您将需要在代码库中进行更改，使其与目标版本兼容。理想情况下，您的目标是使代码以与当前版本和目标 Python
    版本均兼容的形式存在。
- en: Imports from __future__
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入自 __future__
- en: __future__ is a standard library module containing a variety of features, documented
    in the [online docs](https://oreil.ly/3NaU5), to ease migration between versions.
    It is unlike any other module, because importing features can affect the syntax,
    not just the semantics, of your program. Such imports *must* be the initial executable
    statements of your code.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: __future__ 是一个标准库模块，包含各种功能，文档在 [在线文档](https://oreil.ly/3NaU5) 中，用于简化版本之间的迁移。它不同于任何其他模块，因为导入功能可能影响您程序的语法，而不仅仅是语义。这些导入必须是代码的初始可执行语句。
- en: 'Each “future feature” is activated using the statement:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 每个“未来特性”都使用以下语句激活：
- en: '[PRE0]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: where *feature* is the name of the feature you want to use.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 *feature* 是您想要使用的功能名称。
- en: 'In the span of versions this book covers, the only future feature you might
    consider using is:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书涵盖的版本范围内，您可能考虑使用的唯一未来特性是：
- en: '[PRE1]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: which permits references to as-yet-undefined types without enclosing them in
    quotes (as covered in [Chapter 5](ch05.xhtml#type_annotations)). If your current
    version is Python 3.7 or later, then adding this __future__ import will permit
    use of the unquoted types in type annotations, so you don’t have to redo them
    later.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 允许引用尚未定义的类型而无需将其括在引号中（如 [第5章](ch05.xhtml#type_annotations) 所述）。如果您当前的版本是 Python
    3.7 或更高版本，则添加此 __future__ 导入将允许在类型注释中使用未引用的类型，因此您以后无需重新执行它们。
- en: 'Begin by reviewing libraries that are shared across multiple projects. Removing
    the blocking changes from these libraries will be a crucial first step, since
    you will be unable to deploy any dependent applications on the target version
    until this is done. Once a library is compatible with both versions, it can be
    deployed for use in the migration project. Moving forward, the library code must
    maintain compatibility with both the current Python version and the target version:
    shared libraries will likely be the *last* projects that will be able to utilize
    any new features of the target version.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 首先检查在多个项目中共享的库。从这些库中移除阻碍性更改将是一个关键的第一步，因为在完成此步骤之前，您将无法在目标版本上部署任何依赖的应用程序。一旦库与两个版本兼容，它就可以用于迁移项目中。未来，库代码必须保持与当前
    Python 版本和目标版本的兼容性：共享库可能是最后一个能够利用目标版本新功能的项目。
- en: Standalone applications will have earlier opportunities to use the new features
    in the target version. Once the application has removed all code affected by breaking
    changes, commit it to your source control system as a cross-version-compatible
    snapshot. Afterwards, you may add new features to the application code and deploy
    it into environments that support the target version.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 独立应用程序将有更早的机会使用目标版本中的新功能。一旦应用程序移除了所有受到破坏性更改影响的代码，请将其提交到您的源代码控制系统中作为跨版本兼容的快照。之后，您可以向应用程序代码添加新功能，并将其部署到支持目标版本的环境中。
- en: If version compatibility changes affect type annotations, you can use *.pyi*
    stub files to isolate version-dependent typing from your source code.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果版本兼容性变化影响到类型注释，你可以使用*.pyi*存根文件来隔离与版本相关的类型信息与源代码。
- en: Upgrade Automation Using pyupgrade
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用pyupgrade进行升级自动化
- en: You may be able to automate much of the toil in upgrading your code using automation
    tools such as the [pyupgrade package](https://oreil.ly/01AKX). pyupgrade analyzes
    the abstract syntax tree (AST) returned by Python’s ast.parse function to locate
    issues and make corrections to your source code. You can select a specific target
    Python version using command-line switches.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用自动化工具（如[pyupgrade包](https://oreil.ly/01AKX)）来自动化大部分代码升级过程中的枯燥工作。pyupgrade分析Python的ast.parse函数返回的抽象语法树（AST），以定位问题并对源代码进行修正。你可以通过命令行开关选择特定的目标Python版本。
- en: Whenever you use automatic code conversion, review the output of the conversion
    process. A dynamic language like Python makes it impossible to perform a perfect
    translation; while testing helps, it can’t pick up all imperfections.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你使用自动代码转换时，请审核转换过程的输出。像Python这样的动态语言使得完美的转换是不可能的；尽管测试有所帮助，但无法捕捉所有的不完美之处。
- en: Multiversion Testing
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多版本测试
- en: Make sure that your tests cover as much of your project as possible, so that
    inter-version errors are likely to be picked up during testing. Aim for at least
    80% testing coverage; much more than 90% can be difficult to achieve, so don’t
    spend too much effort trying to reach a too-ambitious standard. (*Mocks*, mentioned
    in [“Unit Testing and System Testing”](ch17.xhtml#unit_testing_and_system_testing),
    can help you increase the breadth of your unit testing coverage, if not the depth.)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的测试尽可能覆盖项目的大部分内容，以便在测试过程中可能会发现版本间错误。目标至少达到80%的测试覆盖率；超过90%可能难以达到，因此不要花费过多精力试图达到过高的标准。(*模拟*,
    在[“单元测试和系统测试”](ch17.xhtml#unit_testing_and_system_testing)中提到，可以帮助你增加单元测试覆盖的广度，尽管深度不变。)
- en: The [tox package](https://tox.readthedocs.io) is useful to help you manage and
    test multiversion code. It lets you test your code under a number of different
    virtual environments, and it supports multiple CPython versions, as well as PyPy.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[tox包](https://tox.readthedocs.io)对于帮助你管理和测试多版本代码非常有用。它允许你在多个不同的虚拟环境下测试你的代码，并支持多个CPython版本以及PyPy。'
- en: Use a Controlled Deployment Process
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用受控部署流程
- en: Make the target Python version available in deployment environments, with an
    application environment setting to indicate whether an application should run
    using the current or target Python version. Continuously track, and periodically
    report, the completion percentage to your management team.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署环境中使目标Python版本可用，通过应用环境设置来指示应用程序是否应该使用当前或目标Python版本运行。持续跟踪并定期向管理团队报告完成百分比。
- en: How Often Should You Upgrade?
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你应该多久进行一次升级？
- en: The PSF releases Python on a minor-release-per-year cadence, with each version
    enjoying five years of support after release. If you apply a latest-release-minus-1
    strategy, it provides you with a stable, proven version to migrate to, with a
    four-year support horizon (in case a future upgrade needs to be deferred). Given
    the four-year time window, doing upgrades to the latest release minus 1 every
    year or two should provide a reasonable balance of periodic upgrade cost and platform
    stability.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: PSF按年度发布Python的小版本，每个版本发布后享有五年的支持期。如果采用最新版本减一策略，它为你提供了一个稳定、经过验证的版本来迁移，拥有四年的支持时间窗口（以防未来需要推迟升级）。考虑到四年的时间窗口，每一到两年升级到最新版本减一应该能在升级成本和平台稳定性之间提供合理的平衡。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Maintaining the version currency of the software that your organization’s systems
    depend on is an ongoing habit of proper “software hygiene,” in Python just like
    in any other development stack. By performing regular upgrades of just one or
    two versions at a time, you can keep this work at a steady and manageable level,
    and it will become a recognized and valued activity in your organization.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 维护组织系统所依赖的软件版本更新是一种持续的良好“软件卫生”习惯，无论是Python还是其他任何开发堆栈都是如此。通过每次只升级一到两个版本的常规升级，你可以将这项工作保持在稳定和可管理的水平上，并且它将成为你组织中公认和重视的活动。
- en: ^([1](ch26.xhtml#ch01fn164-marker)) While Python 3.6 is outside the range of
    versions covered in this book, it introduced some significant new features, and
    we include it here for historical context.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch26.xhtml#ch01fn164-marker)) 尽管Python 3.6超出了本书涵盖范围的版本，但它引入了一些重要的新特性，我们在此提及它以供历史背景参考。
- en: ^([2](ch26.xhtml#ch01fn165-marker)) When this happens, it is usually an “all
    hands on deck” emergency situation to do the upgrade in a hurry. These events
    are the very ones you are trying to avoid, or at least minimize, by implementing
    a steady and ongoing Python version upgrade program.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch26.xhtml#ch01fn165-marker)) 当这种情况发生时，通常是“全体出动”的紧急情况，必须赶快进行升级。正是通过实施稳定持续的
    Python 版本升级计划，您才能避免或至少减少这些事件。
