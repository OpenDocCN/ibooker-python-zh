- en: 4\. Functions and Interfaces#
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 函数与接口#
- en: 原文：[https://allendowney.github.io/ThinkPython/chap04.html](https://allendowney.github.io/ThinkPython/chap04.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://allendowney.github.io/ThinkPython/chap04.html](https://allendowney.github.io/ThinkPython/chap04.html)
- en: This chapter introduces a module called `jupyturtle`, which allows you to create
    simple drawings by giving instructions to an imaginary turtle. We will use this
    module to write functions that draw squares, polygons, and circles – and to demonstrate
    **interface design**, which is a way of designing functions that work together.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了一个名为`jupyturtle`的模块，它允许你通过给一只虚拟的海龟下指令来创建简单的图形。我们将使用这个模块编写绘制正方形、多边形和圆形的函数，并演示**接口设计**，这是一种设计能协同工作的函数的方式。
- en: '## 4.1\. The jupyturtle module[#](#the-jupyturtle-module "Link to this heading")'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '## 4.1\. jupyturtle模块[#](#the-jupyturtle-module "Link to this heading")'
- en: To use the `jupyturtle` module, we can import it like this.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`jupyturtle`模块，我们可以这样导入它。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now we can use the functions defined in the module, like `make_turtle` and `forward`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用模块中定义的函数，如`make_turtle`和`forward`。
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`make_turtle` creates a **canvas**, which is a space on the screen where we
    can draw, and a turtle, which is represented by a circular shell and a triangular
    head. The circle shows the location of the turtle and the triangle indicates the
    direction it is facing.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`make_turtle`创建一个**画布**，这是屏幕上可以绘图的区域，并且创建一只海龟，海龟通过一个圆形的壳和一个三角形的头来表示。圆形表示海龟的位置，三角形表示它面朝的方向。'
- en: '`forward` moves the turtle a given distance in the direction it’s facing, drawing
    a line segment along the way. The distance is in arbitrary units – the actual
    size depends on your computer’s screen.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`forward`指令让海龟沿着它面朝的方向移动指定的距离，并在此过程中绘制一条线段。这个距离使用的是任意单位，实际的大小取决于你的计算机屏幕。'
- en: We will use functions defined in the `jupyturtle` module many times, so it would
    be nice if we did not have to write the name of the module every time. That’s
    possible if we import the module like this.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将多次使用`jupyturtle`模块中定义的函数，所以如果我们每次都不必写模块名，那就更方便了。如果我们像这样导入模块，这样做是可能的。
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This version of the import statement imports `make_turtle` and `forward` from
    the `jupyturtle` module so we can call them like this.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的导入语句从`jupyturtle`模块导入了`make_turtle`和`forward`，这样我们就可以像这样调用它们。
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`jupyturtle` provides two other functions we’ll use, called `left` and `right`.
    We’ll import them like this.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`jupyturtle`还提供了另外两个函数，我们将使用它们，分别是`left`和`right`。我们将这样导入它们。'
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`left` causes the turtle to turn left. It takes one argument, which is the
    angle of the turn in degrees. For example, we can make a 90 degree left turn like
    this.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`left`指令使海龟向左转动。它接受一个参数，表示转动的角度，单位是度。例如，我们可以这样使海龟左转90度。'
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This program moves the turtle east and then north, leaving two line segments
    behind. Before you go on, see if you can modify the previous program to make a
    square.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序使海龟先向东移动然后向北移动，留下了两条线段。在继续之前，试试看能否修改之前的程序，绘制一个正方形。
- en: 4.2\. Making a square[#](#making-a-square "Link to this heading")
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.2\. 绘制一个正方形[#](#making-a-square "Link to this heading")
- en: Here’s one way to make a square.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是绘制正方形的一种方式。
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Because this program repeats the same pair of lines four times, we can do the
    same thing more concisely with a `for` loop.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这个程序会重复执行相同的一对语句四次，我们可以通过`for`循环来更简洁地实现同样的效果。
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '## 4.3\. Encapsulation and generalization[#](#encapsulation-and-generalization
    "Link to this heading")'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '## 4.3\. 封装与泛化[#](#encapsulation-and-generalization "Link to this heading")'
- en: Let’s take the square-drawing code from the previous section and put it in a
    function called `square`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将上一节的绘制正方形的代码放到一个名为`square`的函数里。
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now we can call the function like this.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以这样调用这个函数。
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Wrapping a piece of code up in a function is called **encapsulation**. One of
    the benefits of encapsulation is that it attaches a name to the code, which serves
    as a kind of documentation. Another advantage is that if you re-use the code,
    it is more concise to call a function twice than to copy and paste the body!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 将一段代码封装到一个函数中叫做**封装**。封装的好处之一是它为代码附上了一个名称，这可以作为一种文档说明。另一个好处是，如果你要重复使用这段代码，调用函数比复制粘贴函数体要简洁得多！
- en: In the current version, the size of the square is always `50`. If we want to
    draw squares with different sizes, we can take the length of the sides as a parameter.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前版本中，正方形的大小始终是`50`。如果我们想绘制不同大小的正方形，可以将边长作为参数传入。
- en: '[PRE10]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now we can draw squares with different sizes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以绘制不同大小的正方形了。
- en: '[PRE11]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Adding a parameter to a function is called **generalization** because it makes
    the function more general: with the previous version, the square is always the
    same size; with this version it can be any size.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 向函数添加一个参数叫做**泛化**，因为它使得函数变得更加通用：在之前的版本中，正方形的大小总是一样的；而在这个版本中，它可以是任意大小。
- en: If we add another parameter, we can make it even more general. The following
    function draws regular polygons with a given number of sides.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们添加另一个参数，我们可以使它更通用。以下函数绘制具有给定边数的规则多边形。
- en: '[PRE12]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In a regular polygon with `n` sides, the angle between adjacent sides is `360
    / n` degrees.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个具有`n`条边的规则多边形中，相邻边之间的角度是`360 / n`度。
- en: The following example draws a `7`-sided polygon with side length `30`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例绘制一个具有7条边、边长为30的多边形。
- en: '[PRE13]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When a function has more than a few numeric arguments, it is easy to forget
    what they are, or what order they should be in. It can be a good idea to include
    the names of the parameters in the argument list.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个函数有很多数值型参数时，很容易忘记它们是什么，或者它们应该按什么顺序排列。一个好主意是，在参数列表中包含参数的名称。
- en: '[PRE14]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: These are sometimes called “named arguments” because they include the parameter
    names. But in Python they are more often called **keyword arguments** (not to
    be confused with Python keywords like `for` and `def`).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这些有时被称为“命名参数”，因为它们包括了参数名称。但在Python中，它们更常被称为**关键字参数**（不要与Python中的保留字如`for`和`def`混淆）。
- en: This use of the assignment operator, `=`, is a reminder about how arguments
    and parameters work – when you call a function, the arguments are assigned to
    the parameters.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这种赋值运算符`=`的使用提醒我们参数和参数列表的工作方式——当你调用一个函数时，实参会被赋值给形参。
- en: 4.4\. Approximating a circle[#](#approximating-a-circle "Link to this heading")
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.4\. 近似圆形[#](#approximating-a-circle "Link to this heading")
- en: Now suppose we want to draw a circle. We can do that, approximately, by drawing
    a polygon with a large number of sides, so each side is small enough that it’s
    hard to see. Here is a function that uses `polygon` to draw a `30`-sided polygon
    that approximates a circle.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们要画一个圆。我们可以通过画一个边数非常多的多边形来近似画圆，这样每一条边足够小，几乎看不见。这里有一个函数，使用`polygon`绘制一个具有`30`条边的多边形，近似一个圆。
- en: '[PRE15]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`circle` takes the radius of the the circle as a parameter. It computes `circumference`,
    which is the circumference of a circle with the given radius. `n` is the number
    of sides, so `circumference / n` is the length of each side.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`circle`接受圆的半径作为参数。它计算`circumference`，即具有给定半径的圆的周长。`n`是边数，所以`circumference
    / n`是每条边的长度。'
- en: This function might take a long time to run. We can speed it up by calling `make_turtle`
    with a keyword argument called `delay` that sets the time, in seconds, the turtle
    waits after each step. The default value is `0.2` seconds – if we set it to `0.02`
    it runs about 10 times faster.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数可能需要很长时间才能运行。我们可以通过使用一个名为`delay`的关键字参数来加速它，该参数设置海龟每一步后等待的时间（以秒为单位）。默认值是`0.2`秒——如果我们将其设置为`0.02`秒，运行速度大约快10倍。
- en: '[PRE16]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: A limitation of this solution is that `n` is a constant, which means that for
    very big circles, the sides are too long, and for small circles, we waste time
    drawing very short sides. One option is to generalize the function by taking `n`
    as a parameter. But let’s keep it simple for now.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案的一个局限性是`n`是一个常量，这意味着对于非常大的圆，边太长了，而对于小圆，我们浪费时间绘制非常短的边。一个选择是通过将`n`作为参数来泛化这个函数。但现在我们暂时保持简单。
- en: 4.5\. Refactoring[#](#refactoring "Link to this heading")
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.5\. 重构[#](#refactoring "Link to this heading")
- en: Now let’s write a more general version of `circle`, called `arc`, that takes
    a second parameter, `angle`, and draws an arc of a circle that spans the given
    angle. For example, if `angle` is `360` degrees, it draws a complete circle. If
    `angle` is `180` degrees, it draws a half circle.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们写一个更通用的`circle`版本，叫做`arc`，它接受第二个参数`angle`，并绘制一个跨度为给定角度的圆弧。例如，如果`angle`是`360`度，它绘制一个完整的圆。如果`angle`是`180`度，它绘制一个半圆。
- en: To write `circle`, we were able to reuse `polygon`, because a many-sided polygon
    is a good approximation of a circle. But we can’t use `polygon` to write `arc`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编写`circle`，我们能够重用`polygon`，因为多边形的边数多时是圆的一个良好近似。但我们不能用`polygon`来编写`arc`。
- en: Instead, we’ll create the more general version of `polygon`, called `polyline`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们将创建`polygon`的更通用版本，叫做`polyline`。
- en: '[PRE17]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`polyline` takes as parameters the number of line segments to draw, `n`, the
    length of the segments, `length`, and the angle between them, `angle`.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`polyline`接受三个参数：要绘制的线段数`n`，线段长度`length`，以及它们之间的角度`angle`。'
- en: Now we can rewrite `polygon` to use `polyline`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以重写`polygon`来使用`polyline`。
- en: '[PRE18]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: And we can use `polyline` to write `arc`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`polyline`来绘制`arc`。
- en: '[PRE19]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`arc` is similar to `circle`, except that it computes `arc_length`, which is
    a fraction of the circumference of a circle.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`arc`类似于`circle`，只是它计算`arc_length`，即圆周的一部分。'
- en: Finally, we can rewrite `circle` to use `arc`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以重写`circle`来使用`arc`。
- en: '[PRE20]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: To check that these functions work as expected, we’ll use them to draw something
    like a snail. With `delay=0`, the turtle runs as fast as possible.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查这些函数是否按预期工作，我们将用它们画出像蜗牛一样的图形。使用`delay=0`时，海龟运行得尽可能快。
- en: '[PRE21]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In this example, we started with working code and reorganized it with different
    functions. Changes like this, which improve the code without changing its behavior,
    are called **refactoring**.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们从有效的代码开始，并通过不同的函数重新组织它。像这样的改变，通过改进代码而不改变其行为，称为**重构**。
- en: If we had planned ahead, we might have written `polyline` first and avoided
    refactoring, but often you don’t know enough at the beginning of a project to
    design all the functions. Once you start coding, you understand the problem better.
    Sometimes refactoring is a sign that you have learned something.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们提前规划，可能会先编写`polyline`并避免重构，但通常在项目开始时，你还不知道足够多的内容来设计所有的函数。一旦开始编写代码，你会更好地理解问题。有时候，重构是你已经学到一些东西的标志。
- en: 4.6\. Stack diagram[#](#stack-diagram "Link to this heading")
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.6\. 堆栈图[#](#stack-diagram "跳转到此标题")
- en: When we call `circle`, it calls `arc`, which calls `polyline`. We can use a
    stack diagram to show this sequence of function calls and the parameters for each
    one.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用`circle`时，它会调用`arc`，而`arc`又会调用`polyline`。我们可以使用堆栈图来展示这一系列的函数调用及每个函数的参数。
- en: '![_images/92e303702d06597847739633fef20d2b08ccd373273752d5cbf8c1c93eaeb26d.png](../Images/92d83d3a339d69adaf61582f205196f6.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![_images/92e303702d06597847739633fef20d2b08ccd373273752d5cbf8c1c93eaeb26d.png](../Images/92d83d3a339d69adaf61582f205196f6.png)'
- en: Notice that the value of `angle` in `polyline` is different from the value of
    `angle` in `arc`. Parameters are local, which means you can use the same parameter
    name in different functions; it’s a different variable in each function, and it
    can refer to a different value.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`polyline`中的`angle`值与`arc`中的`angle`值不同。参数是局部的，这意味着你可以在不同的函数中使用相同的参数名；它在每个函数中都是一个不同的变量，并且可能指向不同的值。
- en: 4.7\. A development plan[#](#a-development-plan "Link to this heading")
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.7\. 开发计划[#](#a-development-plan "跳转到此标题")
- en: 'A **development plan** is a process for writing programs. The process we used
    in this chapter is “encapsulation and generalization”. The steps of this process
    are:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**开发计划**是编写程序的过程。我们在这一章中使用的过程是“封装与泛化”。这个过程的步骤如下：'
- en: Start by writing a small program with no function definitions.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先编写一个没有函数定义的小程序。
- en: Once you get the program working, identify a coherent piece of it, encapsulate
    the piece in a function and give it a name.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你让程序正常工作，找出其中的一个连贯部分，将其封装成一个函数并为其命名。
- en: Generalize the function by adding appropriate parameters.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加适当的参数来泛化函数。
- en: Repeat Steps 1 to 3 until you have a set of working functions.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤1到3，直到你有一组有效的函数。
- en: Look for opportunities to improve the program by refactoring. For example, if
    you have similar code in several places, consider factoring it into an appropriately
    general function.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 寻找通过重构改进程序的机会。例如，如果你在多个地方有相似的代码，考虑将它提取到一个适当的通用函数中。
- en: This process has some drawbacks – we will see alternatives later – but it can
    be useful if you don’t know ahead of time how to divide the program into functions.
    This approach lets you design as you go along.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程有一些缺点——稍后我们会看到一些替代方法——但是如果你事先不知道如何将程序分解成函数，它是有用的。这个方法让你在编写过程中逐步设计。
- en: 'The design of a function has two parts:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的设计有两个部分：
- en: The **interface** is how the function is used, including its name, the parameters
    it takes and what the function is supposed to do.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接口**是指函数的使用方式，包括它的名称、它接受的参数以及它应该做什么。'
- en: The **implementation** is how the function does what it’s supposed to do.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现**是指函数如何完成其预定的任务。'
- en: For example, here’s the first version of `circle` we wrote, which uses `polygon`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是我们编写的第一个版本的`circle`，它使用了`polygon`。
- en: '[PRE22]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: And here’s the refactored version that uses `arc`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用`arc`的重构版本。
- en: '[PRE23]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: These two functions have the same interface – they take the same parameters
    and do the same thing – but they have different implementations.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个函数有相同的接口——它们接受相同的参数并做相同的事情——但它们的实现不同。
- en: '## 4.8\. Docstrings[#](#docstrings "Link to this heading")'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '## 4.8\. 文档字符串[#](#docstrings "Link to this heading")'
- en: 'A **docstring** is a string at the beginning of a function that explains the
    interface (“doc” is short for “documentation”). Here is an example:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**文档字符串**是函数开头的字符串，用于解释接口（“doc”是“documentation”的缩写）。下面是一个例子：'
- en: '[PRE24]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: By convention, docstrings are triple-quoted strings, also known as **multiline
    strings** because the triple quotes allow the string to span more than one line.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 按惯例，文档字符串是三引号括起来的字符串，也称为**多行字符串**，因为三引号允许字符串跨越多行。
- en: 'A docstring should:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 文档字符串应该：
- en: Explain concisely what the function does, without getting into the details of
    how it works,
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简洁地说明函数的作用，而不深入细节说明它是如何工作的，
- en: Explain what effect each parameter has on the behavior of the function, and
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释每个参数对函数行为的影响，并且
- en: Indicate what type each parameter should be, if it is not obvious.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果参数类型不明显，请指明每个参数应是什么类型。
- en: Writing this kind of documentation is an important part of interface design.
    A well-designed interface should be simple to explain; if you have a hard time
    explaining one of your functions, maybe the interface could be improved.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 编写这类文档是接口设计的重要部分。设计良好的接口应该简洁易懂；如果你很难解释你的函数，可能是接口设计有待改进。
- en: 4.9\. Debugging[#](#debugging "Link to this heading")
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.9\. 调试[#](#debugging "Link to this heading")
- en: An interface is like a contract between a function and a caller. The caller
    agrees to provide certain arguments and the function agrees to do certain work.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接口就像是函数和调用者之间的契约。调用者同意提供某些参数，函数同意执行某些操作。
- en: 'For example, `polyline` requires three arguments: `n` has to be an integer;
    `length` should be a positive number; and `angle` has to be a number, which is
    understood to be in degrees.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`polyline` 函数需要三个参数：`n` 必须是整数；`length` 应该是正数；`angle` 必须是一个数值，且理解为角度单位是度。
- en: These requirements are called **preconditions** because they are supposed to
    be true before the function starts executing. Conversely, conditions at the end
    of the function are **postconditions**. Postconditions include the intended effect
    of the function (like drawing line segments) and any side effects (like moving
    the turtle or making other changes).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这些要求被称为**前置条件**，因为它们应在函数开始执行之前为真。相反，函数结束时的条件是**后置条件**。后置条件包括函数的预期效果（比如绘制线段）和任何副作用（比如移动海龟或进行其他更改）。
- en: Preconditions are the responsibility of the caller. If the caller violates a
    precondition and the function doesn’t work correctly, the bug is in the caller,
    not the function.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 前置条件由调用者负责。如果调用者违反了前置条件，导致函数不能正常工作，那么错误在调用者，而不是函数本身。
- en: If the preconditions are satisfied and the postconditions are not, the bug is
    in the function. If your pre- and postconditions are clear, they can help with
    debugging.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前置条件满足而后置条件不满足，则说明问题出在函数中。如果你的前置条件和后置条件明确，它们可以帮助调试。
- en: 4.10\. Glossary[#](#glossary "Link to this heading")
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.10\. 术语表[#](#glossary "Link to this heading")
- en: '**interface design:** A process for designing the interface of a function,
    which includes the parameters it should take.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**接口设计：** 设计函数接口的过程，其中包括函数应接受的参数。'
- en: '**canvas:** A window used to display graphical elements including lines, circles,
    rectangles, and other shapes.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**画布：** 用于显示图形元素的窗口，包括线条、圆形、矩形和其他形状。'
- en: '**encapsulation:** The process of transforming a sequence of statements into
    a function definition.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**封装：** 将一系列语句转化为函数定义的过程。'
- en: '**generalization:** The process of replacing something unnecessarily specific
    (like a number) with something appropriately general (like a variable or parameter).'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**泛化：** 将某些不必要的具体内容（如一个数字）替换为适当的一般内容（如一个变量或参数）的过程。'
- en: '**keyword argument:** An argument that includes the name of the parameter.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**关键字参数：** 包括参数名称的参数。'
- en: '**refactoring:** The process of modifying a working program to improve function
    interfaces and other qualities of the code.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**重构：** 修改一个已工作的程序，以改善函数接口和代码的其他质量的过程。'
- en: '**development plan:** A process for writing programs.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**开发计划：** 编写程序的过程。'
- en: '**docstring:** A string that appears at the top of a function definition to
    document the function’s interface.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**文档字符串：** 出现在函数定义顶部的字符串，用于记录函数的接口。'
- en: '**multiline string:** A string enclosed in triple quotes that can span more
    than one line of a program.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**多行字符串：** 用三引号括起来的字符串，可以跨越程序中的多行。'
- en: '**precondition:** A requirement that should be satisfied by the caller before
    a function starts.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**前置条件：** 函数开始前调用者应满足的要求。'
- en: '**postcondition:** A requirement that should be satisfied by the function before
    it ends.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**后置条件：** 函数结束前应该满足的要求。'
- en: 4.11\. Exercises[#](#exercises "Link to this heading")
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.11\. 练习[#](#exercises "链接到此标题")
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: For the exercises below, there are a few more turtle functions you might want
    to use.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 对于以下练习，可能有一些额外的海龟函数你可能想要使用。
- en: '`penup` lifts the turtle’s imaginary pen so it doesn’t leave a trail when it
    moves.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`penup`将海龟的虚拟笔抬起，这样它在移动时不会留下轨迹。'
- en: '`pendown` puts the pen back down.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pendown`将笔放下。'
- en: The following function uses `penup` and `pendown` to move the turtle without
    leaving a trail.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数使用`penup`和`pendown`来移动海龟而不留下轨迹。
- en: '[PRE27]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 4.11.1\. Exercise[#](#exercise "Link to this heading")
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.11.1\. 练习[#](#exercise "链接到此标题")
- en: Write a function called `rectangle` that draws a rectangle with given side lengths.
    For example, here’s a rectangle that’s `80` units wide and `40` units tall.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`rectangle`的函数，绘制一个给定边长的矩形。例如，下面是一个宽度为`80`单位，高度为`40`单位的矩形。
- en: 4.11.2\. Exercise[#](#id1 "Link to this heading")
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.11.2\. 练习[#](#id1 "链接到此标题")
- en: Write a function called `rhombus` that draws a rhombus with a given side length
    and a given interior angle. For example, here’s a rhombus with side length `50`
    and an interior angle of `60` degrees.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`rhombus`的函数，绘制一个给定边长和内角的菱形。例如，下面是一个边长为`50`，内角为`60`度的菱形。
- en: 4.11.3\. Exercise[#](#id2 "Link to this heading")
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.11.3\. 练习[#](#id2 "链接到此标题")
- en: Now write a more general function called `parallelogram` that draws a quadrilateral
    with parallel sides. Then rewrite `rectangle` and `rhombus` to use `parallelogram`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在编写一个更通用的函数，名为`parallelogram`，绘制一个具有平行边的四边形。然后重写`rectangle`和`rhombus`，使其使用`parallelogram`。
- en: 4.11.4\. Exercise[#](#id3 "Link to this heading")
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.11.4\. 练习[#](#id3 "链接到此标题")
- en: Write an appropriately general set of functions that can draw shapes like this.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一组适当通用的函数，能够绘制像这样的形状。
- en: '![](../Images/73a457cfb8b88465b8d35a8d99cfe5fe.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/73a457cfb8b88465b8d35a8d99cfe5fe.png)'
- en: 'Hint: Write a function called `triangle` that draws one triangular segment,
    and then a function called `draw_pie` that uses `triangle`.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：编写一个名为`triangle`的函数，绘制一个三角形段，然后编写一个名为`draw_pie`的函数，使用`triangle`。
- en: 4.11.5\. Exercise[#](#id4 "Link to this heading")
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.11.5\. 练习[#](#id4 "链接到此标题")
- en: Write an appropriately general set of functions that can draw flowers like this.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一组适当通用的函数，能够绘制像这样的花朵。
- en: '![](../Images/04840afbf96285b3c181f739f961b9d1.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/04840afbf96285b3c181f739f961b9d1.png)'
- en: 'Hint: Use `arc` to write a function called `petal` that draws one flower petal.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：使用`arc`编写一个名为`petal`的函数，绘制一片花瓣。
- en: 4.11.6\. Ask a virtual assistant[#](#ask-a-virtual-assistant "Link to this heading")
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.11.6\. 请虚拟助手帮忙[#](#ask-a-virtual-assistant "链接到此标题")
- en: 'There are several modules like `jupyturtle` in Python, and the one we used
    in this chapter has been customized for this book. So if you ask a virtual assistant
    for help, it won’t know which module to use. But if you give it a few examples
    to work with, it can probably figure it out. For example, try this prompt and
    see if it can write a function that draws a spiral:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Python中有几个像`jupyturtle`这样的模块，我们在本章中使用的模块是为本书定制的。所以如果你请虚拟助手帮忙，它可能不知道使用哪个模块。但如果你给它一些示例，它应该能够弄明白。例如，试试这个提示，看看它能否写出一个绘制螺旋的函数：
- en: '[PRE28]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Keep in mind that the result might use features we have not seen yet, and it
    might have errors. Copy the code from the VA and see if you can get it working.
    If you didn’t get what you wanted, try modifying the prompt.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，结果可能使用了我们还没有见过的功能，并且可能包含错误。复制虚拟助手的代码，看看能否使其工作。如果没有得到你想要的结果，试着修改提示。
- en: '[Think Python: 3rd Edition](https://allendowney.github.io/ThinkPython/index.html)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[Think Python: 第3版](https://allendowney.github.io/ThinkPython/index.html)'
- en: Copyright 2024 [Allen B. Downey](https://allendowney.com)
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 版权所有 2024 [Allen B. Downey](https://allendowney.com)
- en: 'Code license: [MIT License](https://mit-license.org/)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 代码许可：[MIT License](https://mit-license.org/)
- en: 'Text license: [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 文字许可：[Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/)
