["```py\nimport math\n\nnumber = input(\"Enter a number: \")\nnumber = float(number)\nresult = math.sqrt(number)\n\nprint(f\"The square root of {number} is {result}.\")\n```", "```py\n>>> math.sqrt(\"1.21\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: must be real number, not str\n\n```", "```py\ndef join_all(joinables):\n    for task in joinables:\n        task.join()\n```", "```py\ndef _send(objects, sender):\n    \"\"\"send them with the sender...\"\"\"\n    for obj in objects[0].get_all():\n        if p := obj.get_parent():\n            sender.run(p)\n        elif obj is not None and obj._next is not None:\n            _send_next_object(obj._next, sender)\n```", "```py\ndef format_lines(lines: list[str], indent: int = 0) -> str:\n    prefix = \" \" * indent\n    return \"\\n\".join(f\"{prefix}{line}\" for line in lines)\n```", "```py\nanswer: int = 42\n```", "```py\nlines: list[str] = []\n```", "```py\nfruits: dict[str, int] = {\n    \"banana\": 3,\n    \"apple\": 2,\n    \"orange\": 1,\n}\n```", "```py\npair: tuple[str, int] = (\"banana\", 3)\n```", "```py\ncoordinates: tuple[float, float, float] = (4.5, 0.1, 3.2)\n```", "```py\nnumbers: tuple[int, ...] = (1, 2, 3, 4, 5)\n```", "```py\nclass Parrot:\n    pass\n\nclass NorwegianBlue(Parrot):\n    pass\n\nparrot: Parrot = NorwegianBlue()\n```", "```py\nuser_id: int | str = \"nobody\"  # or 65534\n```", "```py\ndescription: str | None = None\n\nif readme.exists():\n    description = readme.read_text()\n```", "```py\nAttributeError: 'NoneType' object has no attribute '...'\n```", "```py\nif description is not None:\n    for line in description.splitlines():\n        print(f\" {line}\")\n```", "```py\nassert isinstance(description, str)\nfor line in description.splitlines():\n    ...\n```", "```py\ndescription_str = cast(str, description)\nfor line in description_str.splitlines():\n    ...\n```", "```py\nnumber: object = 2\nprint(number + number)  # error: Unsupported left operand type for +\n```", "```py\nfrom typing import Any\n\nnumber: Any = NorwegianBlue()\nprint(number + number)  # valid, but crashes at runtime!\n```", "```py\ndef add(a: int, b: int) -> int:\n    return a + b\n```", "```py\ndef greet(name: str) -> None:\n    print(f\"Hello, {name}\")\n```", "```py\nimport subprocess\nfrom typing import Any\n\ndef run(*args: str, check: bool = True, **kwargs: Any) -> None:\n    subprocess.run(args, check=check, **kwargs)\n```", "```py\nfrom collections.abc import Iterator\n\ndef fibonacci() -> Iterator[int]:\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n```", "```py\nfrom collections.abc import Callable\n\nServe = Callable[[Article], str]\n```", "```py\nclass Swallow:\n    def __init__(self, velocity: float) -> None:\n        self.velocity = velocity\n```", "```py\nfrom dataclasses import dataclass\n\n@dataclass\nclass Swallow:\n    velocity: float\n```", "```py\nimport math\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x: float\n    y: float\n\n    def distance(self, other: Point) -> float:\n        dx = self.x - other.x\n        dy = self.y - other.y\n        return math.sqrt(dx*dx + dy*dy)\n```", "```py\nNameError: name 'Point' is not defined. Did you mean: 'print'?\n```", "```py\n@dataclass\nclass Point:\n    def distance(self, other: \"Point\") -> float:\n        ...\n```", "```py\nfrom __future__ import annotations\n\n@dataclass\nclass Point:\n    def distance(self, other: Point) -> float:\n        ...\n```", "```py\nfrom typing import Self\n\n@dataclass\nclass Point:\n    def distance(self, other: Self) -> float:\n        ...\n```", "```py\ntype UserID = int | str\n```", "```py\ntype JSON = None | bool | int | float | str | list[JSON] | dict[str, JSON]\n```", "```py\ndef first(values: list[str]) -> str:\n    for value in values:\n        return value\n    raise ValueError(\"empty list\")\n```", "```py\nfrom collections.abc import Iterable\n\ndef first[T](values: Iterable[T]) -> T:\n    for value in values:\n        return value\n    raise ValueError(\"no values\")\n```", "```py\nfruit: str = first([\"banana\", \"orange\", \"apple\"])\nnumber: int = first({1, 2, 3})\n```", "```py\nT = TypeVar(\"T\")\n```", "```py\nfrom typing import Protocol\n\nclass Joinable(Protocol):\n    def join(self) -> None:\n        ...\n```", "```py\ndef join_all(joinables: Iterable[Joinable]) -> None:\n    for task in joinables:\n        task.join()\n```", "```py\n[project.optional-dependencies]\ntyping = [\"mypy>=1.9.0\"]\n```", "```py\n$ uv pip install -e \".[typing]\"\n```", "```py\n$ poetry add --group=typing \"mypy>=1.9.0\"\n```", "```py\n$ py -m mypy src\nSuccess: no issues found in 2 source files\n\n```", "```py\nimport textwrap\n\ndata = {\"title\": \"Gegenes nostrodamus\"}\n\nsummary = data.get(\"extract\")\nsummary = textwrap.fill(summary)\n```", "```py\n$ py -m mypy example.py\nexample.py:5: error: Argument 1 to \"fill\" has incompatible type \"str | None\";\n  expected \"str\"  [arg-type]\nFound 1 error in 1 file (checked 1 source file)\n\n```", "```py\n@dataclass\nclass Article:\n    title: str = \"\"\n    summary: str | None = None\n```", "```py\ndef show(article, file):\n    summary = textwrap.fill(article.summary)\n    file.write(f\"{article.title}\\n\\n{summary}\\n\")\n```", "```py\n$ py -m mypy src\nSuccess: no issues found in 2 source files\n\n```", "```py\ndef show(article: Article, file):\n    if article.summary is not None:\n        summary = textwrap.fill(article.summary)\n    else:\n        summary = \"[CENSORED]\"\n    file.write(f\"{article.title}\\n\\n{summary}\\n\")\n```", "```py\n[tool.mypy]\nstrict = true\n```", "```py\n$ py -m mypy src\n__init__.py:16: error: Function is missing a type annotation\n__init__.py:22: error: Function is missing a type annotation\n__init__.py:30: error: Function is missing a return type annotation\n__init__.py:30: note: Use \"-> None\" if function does not return a value\n__init__.py:31: error: Call to untyped function \"fetch\" in typed context\n__init__.py:32: error: Call to untyped function \"show\" in typed context\n__main__.py:3: error: Call to untyped function \"main\" in typed context\nFound 6 errors in 2 files (checked 2 source files)\n\n```", "```py\nimport json\nimport sys\nimport textwrap\nimport urllib.request\nfrom dataclasses import dataclass\nfrom typing import Final, TextIO\n\nAPI_URL: Final = \"https://en.wikipedia.org/api/rest_v1/page/random/summary\"\n\n@dataclass\nclass Article:\n    title: str = \"\"\n    summary: str = \"\"\n\ndef fetch(url: str) -> Article:\n    with urllib.request.urlopen(url) as response:\n        data = json.load(response)\n    return Article(data[\"title\"], data[\"extract\"])\n\ndef show(article: Article, file: TextIO) -> None:\n    summary = textwrap.fill(article.summary)\n    file.write(f\"{article.title}\\n\\n{summary}\\n\")\n\ndef main() -> None:\n    article = fetch(API_URL)\n    show(article, sys.stdout)\n```", "```py\n[tool.mypy]\npretty = true\n```", "```py\n__main__.py:3: error: Call to untyped function \"main\" in typed context\n  [no-untyped-call]\n\n```", "```py\nmain()  # type: ignore[no-untyped-call]\n```", "```py\n[tool.mypy.\"<module>\"] ![1](assets/1.png)\nallow_untyped_calls = true\n```", "```py\n[tool.mypy]\nallow_untyped_calls = true\n```", "```py\n[tool.mypy.\"<module>\"]\nignore_errors = true\n```", "```py\nimport nox\n\n@nox.session(python=[\"3.12\", \"3.11\", \"3.10\"])\ndef mypy(session: nox.Session) -> None:\n    session.install(\".[typing]\")\n    session.run(\"mypy\", \"src\")\n```", "```py\nimport sys\n\nif sys.version_info >= (3, 9):\n    from collections.abc import Iterable\nelse:\n    from typing import Iterable\n```", "```py\nimport sys\n\nif sys.version_info >= (3, 11):\n    from typing import Self\nelse:\n    from typing_extensions import Self\n```", "```py\n[tool.mypy.<package>] ![1](assets/1.png)\nignore_missing_imports = true\n```", "```py\nnox.options.sessions = [\"tests\", \"lint\", \"mypy\"]\n\n@nox.session(python=[\"3.12\", \"3.11\", \"3.10\"])\ndef mypy(session: nox.Session) -> None:\n    session.install(\".[typing,tests]\")\n    session.run(\"mypy\", \"src\", \"tests\")\n```", "```py\nimport io\nimport pytest\nfrom random_wikipedia_article import Article, show\n\n@pytest.fixture\ndef file() -> io.StringIO:\n    return io.StringIO()\n\ndef test_final_newline(article: Article, file: io.StringIO) -> None:\n    show(article, file)\n    assert file.getvalue().endswith(\"\\n\")\n```", "```py\nimport sys\n\n@nox.session(python=[\"3.12\", \"3.11\", \"3.10\"])\ndef mypy(session: nox.Session) -> None:\n    session.install(\".[typing,tests]\")\n    session.run(\"mypy\", \"src\", \"tests\")\n    session.run(\"mypy\", f\"--python-executable={sys.executable}\", \"noxfile.py\")\n```", "```py\n>>> import inspect\n>>> inspect.get_annotations(Article)\n{'title': <class 'str'>, 'summary': <class 'str'>}\n\n```", "```py\nreturn Article(data[\"title\"], data[\"extract\"])\n```", "```py\ndef dataclass[T](cls: type[T]) -> type[T]:\n    ...\n```", "```py\nfrom typing import dataclass_transform\n\n@dataclass_transform()\ndef dataclass[T](cls: type[T]) -> type[T]:\n    ...\n```", "```py\ndef __init__(self, title: str, summary: str) -> None:\n    self.title = title\n    self.summary = summary\n```", "```py\ndef build_dataclass_init[T](cls: type[T]) -> str: ![1](assets/1.png)\n    annotations = inspect.get_annotations(cls) ![2](assets/2.png)\n\n    args: list[str] = [\"self\"] ![3](assets/3.png)\n    body: list[str] = []\n\n    for name, type in annotations.items():\n        args.append(f\"{name}: {type.__name__}\")\n        body.append(f\" self.{name} = {name}\")\n\n    return \"def __init__({}) -> None:\\n{}\".format(\n        ', '.join(args),\n        '\\n'.join(body),\n    )\n```", "```py\nglobals = sys.modules[cls.__module__].__dict__\n```", "```py\n@dataclass_transform()\ndef dataclass[T](cls: type[T]) -> type[T]:\n    sourcecode = build_dataclass_init(cls)\n\n    globals = sys.modules[cls.__module__].__dict__ ![1](assets/1.png)\n    locals = {}\n    exec(sourcecode, globals, locals) ![2](assets/2.png)\n\n    cls.__init__ = locals[\"__init__\"] ![3](assets/3.png)\n    return cls\n```", "```py\ndef fetch(url: str) -> Article:\n    with urllib.request.urlopen(url) as response:\n        data = json.load(response)\n    return Article(data[\"title\"], data[\"extract\"])\n```", "```py\ndef fetch(url: str) -> Article:\n    with urllib.request.urlopen(url) as response:\n        data: JSON = json.load(response)\n    return Article(data[\"title\"], data[\"extract\"])\n```", "```py\n$ py -m mypy src\nerror: Value of type \"...\" is not indexable\nerror: No overload variant of \"__getitem__\" matches argument type \"str\"\nerror: Argument 1 to \"Article\" has incompatible type \"...\"; expected \"str\"\nerror: Invalid index type \"str\" for \"JSON\"; expected type \"...\"\nerror: Argument 2 to \"Article\" has incompatible type \"...\"; expected \"str\"\nFound 5 errors in 1 file (checked 1 source file)\n\n```", "```py\ndef fetch(url: str) -> Article:\n    with urllib.request.urlopen(url) as response:\n        data: JSON = json.load(response)\n\n    match data:\n        case {\"title\": str(title), \"extract\": str(extract)}:\n            return Article(title, extract)\n\n    raise ValueError(\"invalid response\")\n```", "```py\n[project]\ndependencies = [\"cattrs>=23.2.3\"]\n```", "```py\nimport cattrs\n\ndef fetch(url: str) -> Article:\n    with urllib.request.urlopen(url) as response:\n        data: JSON = json.load(response)\n    return cattrs.structure(data, Article)\n```", "```py\nimport cattrs.gen\n\nconverter = cattrs.Converter()\nconverter.register_structure_hook(\n    cattrs.gen.make_dict_structure_fn(\n        Article,\n        converter,\n        summary=override(rename=\"extract\"),\n    )\n)\n```", "```py\ndef fetch(url: str) -> Article:\n    with urllib.request.urlopen(url) as response:\n        data: JSON = json.load(response)\n    return converter.structure(data, Article)\n```", "```py\n[project]\ndependencies = [\"typeguard>=4.1.5\"]\n```", "```py\nfrom typeguard import check_type\n\nnumbers = check_type(data, list[float])\n```", "```py\nfrom typing import Any, TypedDict\n\nclass Person(TypedDict):\n    name: str\n    age: int\n\n    @classmethod\n    def check(cls, data: Any) -> Person:\n        return check_type(data, Person)\n```", "```py\n>>> Person.check({\"name\": \"Alice\", \"age\": 12})\n{'name': 'Alice', 'age': 12}\n>>> Person.check({\"name\": \"Carol\"})\ntypeguard.TypeCheckError: dict is missing required key(s): \"age\"\n\n```", "```py\n@typechecked\ndef load_people(path: Path) -> list[Person]:\n    with path.open() as io:\n        return json.load(io)\n```", "```py\nimport typeguard\n\ntypeguard.config.collection_check_strategy = CollectionCheckStrategy.ALL_ITEMS\n```", "```py\npackage = \"random_wikipedia_article\"\n\n@nox.session\ndef typeguard(session: nox.Session) -> None:\n    session.install(\".[tests]\", \"typeguard\")\n    session.run(\"pytest\", f\"--typeguard-packages={package}\")\n```"]