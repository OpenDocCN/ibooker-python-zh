- en: 'Chapter 8\. Prettification: Layout and Styling, and What to Test About It'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re starting to think about releasing the first version of our site, but we’re
    a bit embarrassed by how ugly it looks at the moment. In this chapter, we’ll cover
    some of the basics of styling, including integrating an HTML/CSS framework called
    Bootstrap. We’ll learn how static files work in Django, and what we need to do
    about testing them.
  prefs: []
  type: TYPE_NORMAL
- en: Testing Layout and Style
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our site is undeniably a bit unattractive at the moment ([Figure 8-1](#homepage-looking-ugly)).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you spin up your dev server with `manage.py runserver`, you may run into
    a database error “table lists_item has no column named list_id”. You need to update
    your local database to reflect the changes we made in *models.py*. Use `manage.py
    migrate`. If it gives you any grief about `IntegrityErrors`, just delete the database
    file^([1](ch08.xhtml#id450)) and try again.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can’t be adding to Python’s reputation for being [ugly](http://grokcode.com/746/dear-python-why-are-you-so-ugly/),
    so let’s do a tiny bit of polishing. Here’s a few things we might want:'
  prefs: []
  type: TYPE_NORMAL
- en: A nice large input field for adding new and existing lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A large, attention-grabbing, centered box to put it in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do we apply TDD to these things? Most people will tell you you shouldn’t
    test aesthetics, and they’re right. It’s a bit like testing a constant, in that
    tests usually wouldn’t add any value.
  prefs: []
  type: TYPE_NORMAL
- en: '![Our home page, looking a little ugly.](assets/ugly-homepage.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-1\. Our home page, looking a little ugly…​
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: But we can test the essential *behaviour* of our aesthetics, ie, that we have
    any at all. All we want to do is reassure ourselves that things are working. For
    example, we’re going to use Cascading Style Sheets (CSS) for our styling, and
    they are loaded as static files. Static files can be a bit tricky to configure
    (especially, as we’ll see later, when you move off your own computer and onto
    a hosting site), so we’ll want some kind of simple “smoke test” that the CSS has
    loaded. We don’t have to test fonts and colours and every single pixel, but we
    can do a quick check that the main input box is aligned the way we want it on
    each page, and that will give us confidence that the rest of the styling for that
    page is probably loaded too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add a new test method inside our functional test:'
  prefs: []
  type: TYPE_NORMAL
- en: functional_tests/tests.py (ch08l001)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A few new things here. We start by setting the window size to a fixed size.
    We then find the input element, look at its size and location, and do a little
    maths to check whether it seems to be positioned in the middle of the page. `assertAlmostEqual`
    helps us to deal with rounding errors and the occasional weirdness due to scrollbars
    and the like, by letting us specify that we want our arithmetic to work to within
    plus or minus 10 pixels.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the functional tests, we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'That’s the expected failure. Still, this kind of FT is easy to get wrong, so
    let’s use a quick-and-dirty “cheat” solution, to check that the FT definitely
    passes when the input box is centered. We’ll delete this code again almost as
    soon as we’ve used it to check the FT:'
  prefs: []
  type: TYPE_NORMAL
- en: lists/templates/home.xhtml (ch08l002)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'That passes, which means the FT works. Let’s extend it to make sure that the
    input box is also center-aligned on the page for a new list:'
  prefs: []
  type: TYPE_NORMAL
- en: functional_tests/tests.py (ch08l003)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'That gives us another test failure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s commit just the FT:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it feels like we’re justified in finding a “proper” solution to our need
    for some better styling for our site. We can back out our hacky `text-align: center`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'WARNING: `git reset --hard` is the “take off and nuke the site from orbit”
    Git command, so be careful with it—​it blows away all your un-committed changes.
    Unlike almost everything else you can do with Git, there’s no way of going back
    after this one.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Prettification: Using a CSS Framework'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: UI design is hard, and doubly so now that we have to deal with mobile, tablets,
    and so forth. That’s why many programmers, particularly lazy ones like me, turn
    to CSS frameworks to solve some of those problems for them. There are lots of
    frameworks out there, but one of the earliest and most popular still, is Twitter’s
    Bootstrap. Let’s use that.
  prefs: []
  type: TYPE_NORMAL
- en: You can find bootstrap at [*http://getbootstrap.com/*](http://getbootstrap.com/).
  prefs: []
  type: TYPE_NORMAL
- en: We’ll download it and put it in a new folder called *static* inside the `lists`
    app:^([2](ch08.xhtml#id457))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Bootstrap comes with a plain, uncustomised installation in the *dist* folder.
    We’re going to use that for now, but you should really never do this for a real
    site—​vanilla Bootstrap is instantly recognisable, and a big signal to anyone
    in the know that you couldn’t be bothered to style your site. Learn how to use
    Sass and change the font, if nothing else! There is info in Bootstrap’s docs,
    or there’s an [*https://www.freecodecamp.org/news/how-to-customize-bootstrap-with-sass/*](https://www.freecodecamp.org/news/how-to-customize-bootstrap-with-sass/)
    [introductory guide here].
  prefs: []
  type: TYPE_NORMAL
- en: 'Our *lists* folder will end up looking like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Look at the “Getting Started” section of the [Bootstrap documentation](https://getbootstrap.com/docs/5.3/getting-started/introduction/);
    you’ll see it wants our HTML template to include something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We already have two HTML templates. We don’t want to be adding a whole load
    of boilerplate code to each, so now feels like the right time to apply the “Don’t
    repeat yourself” rule, and bring all the common parts together. Thankfully, the
    Django template language makes that easy using something called template inheritance.
  prefs: []
  type: TYPE_NORMAL
- en: Django Template Inheritance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s have a little review of what the differences are between *home.xhtml*
    and *list.xhtml*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: They have different header texts, and their forms use different URLs. On top
    of that, *list.xhtml* has the additional `<table>` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we’re clear on what’s in common and what’s not, we can make the two
    templates inherit from a common “superclass” template. We’ll start by making a
    copy of *list.xhtml*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We make this into a base template which just contains the common boilerplate,
    and mark out the “blocks”, places where child templates can customise it:'
  prefs: []
  type: TYPE_NORMAL
- en: lists/templates/base.xhtml (ch08l007)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The base template defines a series of areas called “blocks”, which will be
    places that other templates can hook in and add their own content. Let’s see how
    that works in practice, by changing *home.xhtml* so that it “inherits from” *base.xhtml*:'
  prefs: []
  type: TYPE_NORMAL
- en: lists/templates/home.xhtml (ch08l008)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that lots of the boilerplate HTML disappears, and we just concentrate
    on the bits we want to customise. We do the same for *list.xhtml*:'
  prefs: []
  type: TYPE_NORMAL
- en: lists/templates/list.xhtml (ch08l009)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: That’s a refactor of the way our templates work. We rerun the FTs to make sure
    we haven’t broken anything…​
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Sure enough, they’re still getting to exactly where they were before. That’s
    worthy of a commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Integrating Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now it’s much easier to integrate the boilerplate code that Bootstrap wants—​we
    won’t add the JavaScript yet, just the CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: lists/templates/base.xhtml (ch08l010)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Rows and Columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, let’s actually use some of the Bootstrap magic! You’ll have to read
    the documentation yourself, but we should be able to use a combination of the
    grid system and the `justify-content-center` class to get what we want:'
  prefs: []
  type: TYPE_NORMAL
- en: lists/templates/base.xhtml (ch08l011)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: (If you’ve never seen an HTML tag broken up over several lines, that `<input>`
    may be a little shocking. It is definitely valid, but you don’t have to use it
    if you find it offensive. ;)
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Take the time to browse through the [Bootstrap documentation](http://getbootstrap.com/),
    if you’ve never seen it before. It’s a shopping trolley brimming full of useful
    tools to use in your site.
  prefs: []
  type: TYPE_NORMAL
- en: Does that work?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Hmm. No. Why isn’t our CSS loading?
  prefs: []
  type: TYPE_NORMAL
- en: Static Files in Django
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Django, and indeed any web server, needs to know two things to deal with static
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: How to tell when a URL request is for a static file, as opposed to for some
    HTML that’s going to be served via a view function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where to find the static file the user wants
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In other words, static files are a mapping from URLs to files on disk.
  prefs: []
  type: TYPE_NORMAL
- en: 'For item 1, Django lets us define a URL “prefix” to say that any URLs which
    start with that prefix should be treated as requests for static files. By default,
    the prefix is */static/*. It’s defined in *settings.py*:'
  prefs: []
  type: TYPE_NORMAL
- en: superlists/settings.py
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The rest of the settings we will add to this section are all to do with item
    2: finding the actual static files on disk.'
  prefs: []
  type: TYPE_NORMAL
- en: While we’re using the Django development server (`manage.py runserver`), we
    can rely on Django to magically find static files for us—​it’ll just look in any
    subfolder of one of our apps called *static*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You now see why we put all the Bootstrap static files into *lists/static*.
    So why are they not working at the moment? It’s because we’re not using the `/static/`
    URL prefix. Have another look at the link to the CSS in *base.xhtml*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'That `href` is just what happened to be in the bootstrap docs. To get it to
    work, we need to change it to:'
  prefs: []
  type: TYPE_NORMAL
- en: lists/templates/base.xhtml (ch08l012)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now when `runserver` sees the request, it knows that it’s for a static file
    because it begins with `/static/`. It then tries to find a file called *bootstrap/css/bootstrap.min.css*,
    looking in each of our app folders for subfolders called *static*, and it should
    find it at *lists/static/bootstrap/css/bootstrap.min.css*.
  prefs: []
  type: TYPE_NORMAL
- en: So if you take a look manually, you should see it works, as in [Figure 8-2](#list-page-centered).
  prefs: []
  type: TYPE_NORMAL
- en: '![The list page with centered header.](assets/prettified-1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-2\. Our site starts to look a little better…​
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Switching to StaticLiveServerTestCase
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you run the FT though, annoyingly, it still won’t pass:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'That’s because, although `runserver` automagically finds static files, `LiveServerTestCase`
    doesn’t. Never fear, though: the Django developers have made an even more magical
    test class called `StaticLiveServerTestCase` (see [the docs](https://docs.djangoproject.com/en/4.2/topics/testing/tools/#liveservertestcase)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s switch to that:'
  prefs: []
  type: TYPE_NORMAL
- en: functional_tests/tests.py (ch08l013)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'And now it will find the new CSS, which will get our test to pass:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Hooray!
  prefs: []
  type: TYPE_NORMAL
- en: Using Bootstrap Components to Improve the Look of the Site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s see if we can do even better, using some of the other tools in Bootstrap’s
    panoply.
  prefs: []
  type: TYPE_NORMAL
- en: Jumbotron!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first version of Bootstrap used to ship with a class called `jumbotron`
    for things that are meant to be particularly prominent on the page. It doesn’t
    exit any more, but old-timers like me still pine for it, so they have a specific
    page in the docs that tells you how to recreate it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Essentially, we massively embiggen the main page header and the input form,
    putting it into a grey box with nice rounded corners:'
  prefs: []
  type: TYPE_NORMAL
- en: lists/templates/base.xhtml (ch08l014)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'That ends up looking something like [Figure 8-3](#jumbotron-header):'
  prefs: []
  type: TYPE_NORMAL
- en: '![The homepage with a big grey box surrounding the title and input](assets/prettified-2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-3\. A big grey box at the top of the page
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When hacking about with design and layout, it’s best to have a window open that
    we can hit refresh on, frequently. Use `python manage.py runserver` to spin up
    the dev server, and then browse to *[*http://localhost:8000*](http://localhost:8000)*
    to see your work as we go.
  prefs: []
  type: TYPE_NORMAL
- en: Large Inputs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The jumbotron is a good start, but now the input box has tiny text compared
    to everything else. Thankfully, Bootstrap’s form control classes offer an option
    to set an input to be “large”:'
  prefs: []
  type: TYPE_NORMAL
- en: lists/templates/base.xhtml (ch08l015)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Table Styling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The table text also looks too small compared to the rest of the page now. Adding
    the Bootstrap `table` class improves things, over in *list.xhtml*:'
  prefs: []
  type: TYPE_NORMAL
- en: lists/templates/list.xhtml (ch08l016)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Dark Modeeeeeee
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In contrast to my greybeard nostalgia for the Jumbotron, here’s something relatively
    new to Bootstrap, Dark Mode!
  prefs: []
  type: TYPE_NORMAL
- en: lists/templates/base.xhtml (ch08l017)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Take a look at [Figure 8-4](#dark-modeee). I think that looks great!
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of lists page in dark mode. Cool.](assets/prettified-dark.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-4\. The lists page goes dark
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: But it’s very much a matter of personal preference, and my editor will kill
    me if I make all the rest of my screenshots use so much ink, so I’m going to revert
    it for now. You feel free to keep it if you like!
  prefs: []
  type: TYPE_NORMAL
- en: A semi-decent page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All that took me a few goes, but I’m reasonably happy with it now ([Figure 8-5](#homepage-looking-better)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of lists page in light mode with decent styling.](assets/prettified-final.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-5\. The lists page, looking good enough for now…​
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you want to go further with customising Bootstrap, you need to get into compiling
    Sass. I’ve said it already, but I *definitely* recommend taking the time to do
    that some day. Sass/SCSS is a great improvement on plain old CSS, and a useful
    tool even if you don’t use Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: 'A last run of the functional tests, to see if everything still works OK:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'That’s it! Definitely time for a commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'What We Glossed Over: collectstatic and Other Static Directories'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We saw earlier that the Django dev server will magically find all your static
    files inside app folders, and serve them for you. That’s fine during development,
    but when you’re running on a real web server, you don’t want Django serving your
    static content—​using Python to serve raw files is slow and inefficient, and a
    web server like Apache or Nginx can do this all for you. You might even decide
    to upload all your static files to a CDN, instead of hosting them yourself.
  prefs: []
  type: TYPE_NORMAL
- en: For these reasons, you want to be able to gather up all your static files from
    inside their various app folders, and copy them into a single location, ready
    for deployment. This is what the `collectstatic` command is for.
  prefs: []
  type: TYPE_NORMAL
- en: 'The destination, the place where the collected static files go, is defined
    in *settings.py* as `STATIC_ROOT`. In the next chapter we’ll be doing some deployment,
    so let’s actually experiment with that now. A common and straightforward place
    to put it is in a folder called “static” in the root of our repo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s a neat way of specifying that folder, making it relative to the location
    of the project base directory:'
  prefs: []
  type: TYPE_NORMAL
- en: superlists/settings.py (ch08l019)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Take a look at the top of the settings file, and you’ll see how that `BASE_DIR`
    variable is helpfully defined for us, using `pathlib.Path` and `__file__` (both
    really nice Python builtins)^([3](ch08.xhtml#id476)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyway, let’s try running `collectstatic`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'And if we look in *./static*, we’ll find all our CSS files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '`collectstatic` has also picked up all the CSS for the admin site. The admin
    site is one of Django’s powerful features, but we don’t need it for our simple
    site, so let’s disable it for now:'
  prefs: []
  type: TYPE_NORMAL
- en: superlists/settings.py
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'And we try again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Much better.
  prefs: []
  type: TYPE_NORMAL
- en: Now we know how to collect all the static files into a single folder, where
    it’s easy for a web server to find them. We’ll find out all about that, including
    how to test it, in the next chapter!
  prefs: []
  type: TYPE_NORMAL
- en: For now let’s save our changes to *settings.py*. We’ll also add the top-level
    static folder to our gitignore, since it will only contain copies of files we
    actually keep in individual apps’ static folders.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: A Few Things That Didn’t Make It
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Inevitably this was only a whirlwind tour of styling and CSS, and there were
    several topics that I’d considered covering that didn’t make it. Here are a few
    candidates for further study:'
  prefs: []
  type: TYPE_NORMAL
- en: The `{% static %}` template tag, for more DRY and fewer hardcoded URLs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client-side packaging tools, like `npm` and `bower`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And again, customising bootstrap with SASS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ^([1](ch08.xhtml#id450-marker)) What? Delete the database? Are you crazy? Not
    completely. The local dev database often gets out of sync with its migrations
    as we go back and forth in our development, and it doesn’t have any important
    data in it, so it’s OK to blow it away now and again. We’ll be much more careful
    once we have a “production” database on the server. More on this in [Link to Come].
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch08.xhtml#id457-marker)) On Windows, you may not have `wget` and `unzip`,
    but I’m sure you can figure out how to download Bootstrap, unzip it, and put the
    contents of the *dist* folder into the *lists/static/bootstrap* folder.
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch08.xhtml#id476-marker)) Notice in the `Pathlib` wrangling of `__file__`
    that the `.resolve()` happens before anything else. Always follow this pattern
    when working with `__file__`, otherwise you can see unpredictable behaviours depending
    on how the file is imported. Thanks to [Green Nathan](https://github.com/CleanCut/green)
    for that tip!
  prefs: []
  type: TYPE_NORMAL
- en: About the Author
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After an idyllic childhood spent playing with BASIC on French 8-bit computers
    like the Thomson T-07 whose keys go “boop” when you press them, Harry spent a
    few years being deeply unhappy with economics and management consultancy. Soon
    he rediscovered his true geek nature, and was lucky enough to fall in with a bunch
    of XP fanatics, working on the pioneering but sadly defunct Resolver One spreadsheet.
    He now works at PythonAnywhere LLP, and spreads the gospel of TDD worldwide at
    talks, workshops, and conferences, with all the passion and enthusiasm of a recent
    convert.
  prefs: []
  type: TYPE_NORMAL
