["```py\nopen(file, mode='r', buffering=-1, encoding=`None`, errors='strict', \n     newline=`None`, closefd=`True`, opener=os.open)\n```", "```py\n`for` *`line`* `in` *`lst`*: *`f`*.write(*`line`*)\n```", "```py\n`for` *`line`* `in` *`f`*:\n```", "```py\n`import` tempfile, shutil\npath = tempfile.mkdtemp()\n`try`:\n    use_dirpath(path)\n`finally`:\n    shutil.rmtree(path)\n```", "```py\n`import` tempfile, os\nfd, path = tempfile.mkstemp(suffix='.txt', \n                            text=`True`)\n`try`:\n    os.close(fd)\n    use_filepath(path)\n`finally`:\n    os.unlink(path)\n```", "```py\n`import` fileinput\n`for` line `in` fileinput.input(inplace=`True`):\n    print(line.replace('foo', 'bar'), end='')\n```", "```py\n`with` fileinput.input('file1.txt', 'file2.txt') `as` infile:\n    dostuff(infile)\n```", "```py\n`with` zipfile.ZipFile('archive.zip') `as` z:    \n    data = z.read('data.txt')\n```", "```py\n`import` zipfile\n`with` zipfile.ZipFile('z.zip', 'w') `as` zz:\n    data = 'four score\\nand seven\\nyears ago\\n'\n    zz.writestr('saying.txt', data)\n```", "```py\n`with` zipfile.ZipFile('z.zip') `as` zz:\n    zz.printdir()\n    `for` name `in` zz.namelist():\n        print(f'{name}: {zz.read(name)!r}')\n```", "```py\n`import` os\nprint(os.stat(path)[6])       *`# works but unclear`*\nprint(os.stat(path).st_size)  *`# easier to understand`*\nprint(os.path.getsize(path))  *`# convenience function`*\n                            *`# that wraps stat`*\n\n```", "```py\n`import` os\nprint(os.path.expandvars('$HOME/foo/'))\n```", "```py\nprint(os.path.join('a/b', 'c/d', 'e/f'))\n*`# on Unix prints: a/b/c/d/e/f`*\nprint(os.path.join('a/b', '/c/d', 'e/f'))\n*`# on Unix prints:`* *`/c/d/e/f`*\n```", "```py\n`import` errno\n`try`:\n    os.some_os_function_or_other()\n`except` FileNotFoundError `as` err:\n    print(f'Warning: file {err.filename!r} not found; continuing')\n`except` OSError `as` oserr:\n    print(f'Error {errno.errorcode[oserr.errno]}; continuing')\n```", "```py\n>>> sorted(td.glob('*'))\n```", "```py\n[WindowsPath('tempdir/bar'), \nWindowsPath('tempdir/foo')]\n```", "```py\n>>> sorted(td.glob('**/*'))\n```", "```py\n[WindowsPath('tempdir/bar'),\nWindowsPath('tempdir/bar/baz'), \nWindowsPath('tempdir/bar/boo'), \nWindowsPath('tempdir/foo')]\n```", "```py\n>>> sorted(td.glob('*/**/*')) *`# expanding at 2nd+ level`*\n```", "```py\n[WindowsPath('tempdir/bar/baz'), \nWindowsPath('tempdir/bar/boo')]\n```", "```py\n>>> sorted(td.rglob('*'))  *`# just like glob('**/*')`*\n```", "```py\n[WindowsPath('tempdir/bar'), \nWindowsPath('tempdir/bar/baz'), \nWindowsPath('tempdir/bar/boo'), \nWindowsPath('tempdir/foo')]\n```", "```py\n>>> td=pathlib.Path('tempdir/')\n>>> td.mkdir(exist_ok=True)\n>>> td.is_dir()\n```", "```py\nTrue\n```", "```py\n>>> p.read_text()\n```", "```py\n'spam'\n```", "```py\n>>> t.read_text()\n```", "```py\n'and eggs'\n```", "```py\n>>> p.replace(t)\n```", "```py\nWindowsPath('C:/Users/annar/testfile.txt')\n```", "```py\n>>> t.read_text()\n```", "```py\n'spam'\n```", "```py\n>>> p.read_text()\n```", "```py\nTraceback (most recent call last):\n```", "```py\n...\n```", "```py\nFileNotFoundError: [Errno 2] No such file...\n```", "```py\n>>> td.resolve()\n```", "```py\nPosixPath('/Users/annar/tempdir')\n```", "```py\n>>> d\n```", "```py\nWindowsPath('C:/Users/annar/Documents')\n```", "```py\n>>> f = d / 'testfile.txt'\n>>> f.is_file()\n```", "```py\nFalse\n```", "```py\n>>> f.touch()\n>>> f.is_file()\n```", "```py\nTrue\n```", "```py\n`import` shutil\nignore = shutil.ignore_patterns('.*', '*.bak')\nshutil.copytree('src', 'dst', ignore=ignore)\n```", "```py\n`def` redirect(func: Callable, *a, **k) -> (str, Any):\n    *`\"\"\"redirect(func, *a, **k) -> (func's results, return value)`*\n *`func is a callable emitting results to standard output.`*\n *`redirect captures the results as a str and returns a pair`*\n *`(output string, return value).`*\n *`\"\"\"`*\n    `import` sys, io\n    save_out = sys.stdout\n    sys.stdout = io.StringIO()\n    `try`:\n        retval = func(*args, **kwds)\n        `return` sys.stdout.getvalue(), retval\n    `finally`:\n        sys.stdout.close()\n        sys.stdout = save_out\n```", "```py\n`import` ast\nprint(ast.literal_eval('23'))     *`# prints 23`*\nprint(ast.literal_eval(' 23'))   *`# prints 23 (3.10++)`*\nprint(ast.literal_eval('[2,-3]')) *`# prints [2, -3]`*\nprint(ast.literal_eval('2+3'))    *`# raises ValueError`*\nprint(ast.literal_eval('2+'))     *`# raises SyntaxError`*\n```", "```py\n`import` readline, rlcompleter\nreadline.parse_and_bind('tab: complete')\n```", "```py\n`import` msvcrt\nprint(\"press z to exit, or any other key \"\n      \"to see the key's code:\")\n`while` `True`:\n    c = msvcrt.getch()\n    `if` c == b'z':\n        `break`\n    print(f'{ord(c)} ({c!r})')\n```", "```py\n>>> locale.setlocale(locale.LC_NUMERIC, \n...                  'en_us')\n```", "```py\n'en_us'\n```", "```py\n>>> n=1000*1000\n>>> locale.format_string('%d', n)\n```", "```py\n'1000000'\n```", "```py\n>>> locale.setlocale(locale.LC_MONETARY, \n...                  'it_it')\n```", "```py\n'it_it'\n```", "```py\n>>> locale.format_string('%f', n)\n```", "```py\n'1000000.000000'  *# uses decimal_point*\n```", "```py\n>>> locale.format_string('%f', n, \n...                      monetary=True)\n```", "```py\n'1000000,000000'  *# uses mon_decimal_point*\n```", "```py\n>>> locale.format_string('%0.2f', n, \n...                      grouping=True)\n```", "```py\n'1,000,000.00' *# separators & decimal from*\n *# LC_NUMERIC*\n```", "```py\n>>> locale.format_string('%0.2f', n, \n...                      grouping=True,\n...                      monetary=True)\n```", "```py\n'1.000.000,00'    *# separators & decimal from* \n *# LC_MONETARY*\n```", "```py\n`def` locale_sort_inplace(list_of_strings):\n    list_of_strings.sort(key=locale.strxfrm)\n```", "```py\n`try`:\n    _\n`except` NameError:\n    `def` _(s): `return` s\n`def` greet():\n    print(_('Hello world'))\n```", "```py\n`import` os, gettext\nos.environ.setdefault('LANG', 'en')  *`# application-default`* *`language`*\ngettext.install('your_application_name')\n```", "```py\n_ = translation(*`domain`*).ugettext\n```"]