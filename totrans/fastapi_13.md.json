["```py\nstmt = \"\"\"select * from creature where\n name=:name or country=:country\"\"\"\nparams = {\"name\": \"yeti\", \"country\": \"CN\"}\ncurs.execute(stmt, params)\n```", "```py\nimport sqlite3\nfrom model.creature import Creature\n\nDB_NAME = \"cryptid.db\"\nconn = sqlite3.connect(DB_NAME)\ncurs = conn.cursor()\n\ndef init():\n    curs.execute(\"create table creature(name, description, country, area, aka)\")\n\ndef row_to_model(row: tuple) -> Creature:\n    name, description, country, area, aka = row\n    return Creature(name, description, country, area, aka)\n\ndef model_to_dict(creature: Creature) -> dict:\n    return creature.dict()\n\ndef get_one(name: str) -> Creature:\n    qry = \"select * from creature where name=:name\"\n    params = {\"name\": name}\n    curs.execute(qry, params)\n    row = curs.fetchone()\n    return row_to_model(row)\n\ndef get_all(name: str) -> list[Creature]:\n    qry = \"select * from creature\"\n    curs.execute(qry)\n    rows = list(curs.fetchall())\n    return [row_to_model(row) for row in rows]\n\ndef create(creature: Creature):\n    qry = \"\"\"insert into creature values\n (:name, :description, :country, :area, :aka)\"\"\"\n    params = model_to_dict(creature)\n    curs.execute(qry, params)\n\ndef modify(creature: Creature):\n    return creature\n\ndef replace(creature: Creature):\n    return creature\n\ndef delete(creature: Creature):\n    qry = \"delete from creature where name = :name\"\n    params = {\"name\": creature.name}\n    curs.execute(qry, params)\n```", "```py\n\"\"\"Initialize SQLite database\"\"\"\n\nimport os\nfrom pathlib import Path\nfrom sqlite3 import connect, Connection, Cursor, IntegrityError\n\nconn: Connection | None = None\ncurs: Cursor | None = None\n\ndef get_db(name: str|None = None, reset: bool = False):\n    \"\"\"Connect to SQLite database file\"\"\"\n    global conn, curs\n    if conn:\n        if not reset:\n            return\n        conn = None\n    if not name:\n        name = os.getenv(\"CRYPTID_SQLITE_DB\")\n        top_dir = Path(__file__).resolve().parents[1] # repo top\n        db_dir = top_dir / \"db\"\n        db_name = \"cryptid.db\"\n        db_path = str(db_dir / db_name)\n        name = os.getenv(\"CRYPTID_SQLITE_DB\", db_path)\n    conn = connect(name, check_same_thread=False)\n    curs = conn.cursor()\n\nget_db()\n```", "```py\nfrom .init import conn, curs\nfrom model.creature import Creature\n\ncurs.execute(\"\"\"create table if not exists creature(\n name text primary key,\n description text,\n country text,\n area text,\n aka text)\"\"\")\n\ndef row_to_model(row: tuple) -> Creature:\n    (name, description, country, area, aka) = row\n    return Creature(name, description, country, area, aka)\n\ndef model_to_dict(creature: Creature) -> dict:\n    return creature.dict()\n\ndef get_one(name: str) -> Creature:\n    qry = \"select * from creature where name=:name\"\n    params = {\"name\": name}\n    curs.execute(qry, params)\n    return row_to_model(curs.fetchone())\n\ndef get_all() -> list[Creature]:\n    qry = \"select * from creature\"\n    curs.execute(qry)\n    return [row_to_model(row) for row in curs.fetchall()]\n\ndef create(creature: Creature) -> Creature:\n    qry = \"insert into creature values\"\n          \"(:name, :description, :country, :area, :aka)\"\n    params = model_to_dict(creature)\n    curs.execute(qry, params)\n    return get_one(creature.name)\n\ndef modify(creature: Creature) -> Creature:\n    qry = \"\"\"update creature\n set country=:country,\n name=:name,\n description=:description,\n area=:area,\n aka=:aka\n where name=:name_orig\"\"\"\n    params = model_to_dict(creature)\n    params[\"name_orig\"] = creature.name\n    _ = curs.execute(qry, params)\n    return get_one(creature.name)\n\ndef delete(creature: Creature) -> bool:\n    qry = \"delete from creature where name = :name\"\n    params = {\"name\": creature.name}\n    res = curs.execute(qry, params)\n    return bool(res)\n```", "```py\nfrom .init import curs\nfrom model.explorer import Explorer\n\ncurs.execute(\"\"\"create table if not exists explorer(\n name text primary key,\n country text,\n description text)\"\"\")\n\ndef row_to_model(row: tuple) -> Explorer:\n    return Explorer(name=row[0], country=row[1], description=row[2])\n\ndef model_to_dict(explorer: Explorer) -> dict:\n    return explorer.dict() if explorer else None\n\ndef get_one(name: str) -> Explorer:\n    qry = \"select * from explorer where name=:name\"\n    params = {\"name\": name}\n    curs.execute(qry, params)\n    return row_to_model(curs.fetchone())\n\ndef get_all() -> list[Explorer]:\n    qry = \"select * from explorer\"\n    curs.execute(qry)\n    return [row_to_model(row) for row in curs.fetchall()]\n\ndef create(explorer: Explorer) -> Explorer:\n    qry = \"\"\"insert into explorer (name, country, description)\n values (:name, :country, :description)\"\"\"\n    params = model_to_dict(explorer)\n    _ = curs.execute(qry, params)\n    return get_one(explorer.name)\n\ndef modify(name: str, explorer: Explorer) -> Explorer:\n    qry = \"\"\"update explorer\n set country=:country,\n name=:name,\n description=:description\n where name=:name_orig\"\"\"\n    params = model_to_dict(explorer)\n    params[\"name_orig\"] = explorer.name\n    _ = curs.execute(qry, params)\n    explorer2 = get_one(explorer.name)\n    return explorer2\n\ndef delete(explorer: Explorer) -> bool:\n    qry = \"delete from explorer where name = :name\"\n    params = {\"name\": explorer.name}\n    res = curs.execute(qry, params)\n    return bool(res)\n```", "```py\n$ http localhost:8000/explorer\nHTTP/1.1 405 Method Not Allowed\nallow: POST\ncontent-length: 31\ncontent-type: application/json\ndate: Mon, 27 Feb 2023 20:05:18 GMT\nserver: uvicorn\n\n{\n    \"detail\": \"Method Not Allowed\"\n}\n```", "```py\n@router.get(\"/\")\n```", "```py\nrouter = APIRouter(prefix = \"/explorer\")\n```", "```py\n@router.get(\"\")\n@router.get(\"/\")\ndef get_all() -> list[Explorer]:\n    return service.get_all()\n```", "```py\n$ http localhost:8000/explorer\nHTTP/1.1 200 OK\ncontent-length: 2\ncontent-type: application/json\ndate: Mon, 27 Feb 2023 20:12:44 GMT\nserver: uvicorn\n\n[]\n```", "```py\n$ http localhost:8000/explorer/\nHTTP/1.1 200 OK\ncontent-length: 2\ncontent-type: application/json\ndate: Mon, 27 Feb 2023 20:14:39 GMT\nserver: uvicorn\n\n[]\n```", "```py\n$ http post localhost:8000/explorer name=\"Beau Buffette\", contry=\"US\"\nHTTP/1.1 422 Unprocessable Entity\ncontent-length: 95\ncontent-type: application/json\ndate: Mon, 27 Feb 2023 20:17:45 GMT\nserver: uvicorn\n\n{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"body\",\n                \"country\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        }\n    ]\n}\n```", "```py\n$ http post localhost:8000/explorer name=\"Beau Buffette\" country=\"US\"\nHTTP/1.1 201 Created\ncontent-length: 55\ncontent-type: application/json\ndate: Mon, 27 Feb 2023 20:20:49 GMT\nserver: uvicorn\n\n{\n    \"name\": \"Beau Buffette,\",\n    \"country\": \"US\",\n    \"description\": \"\"\n}\n```", "```py\n$ http localhost:8000/explorer\nHTTP/1.1 200 OK\ncontent-length: 57\ncontent-type: application/json\ndate: Mon, 27 Feb 2023 20:26:26 GMT\nserver: uvicorn\n\n[\n    {\n        \"name\": \"Beau Buffette\",\n        \"country\": \"US\",\n        \"description\": \"\"\n    }\n]\n```", "```py\n$ http localhost:8000/explorer/\"Beau Buffette\"\nHTTP/1.1 200 OK\ncontent-length: 55\ncontent-type: application/json\ndate: Mon, 27 Feb 2023 20:28:48 GMT\nserver: uvicorn\n\n{\n    \"name\": \"Beau Buffette\",\n    \"country\": \"US\",\n    \"description\": \"\"\n}\n```", "```py\n$ http post localhost:8000/explorer name=\"Beau Buffette\" country=\"US\"\nHTTP/1.1 500 Internal Server Error\ncontent-length: 3127\ncontent-type: text/plain; charset=utf-8\ndate: Mon, 27 Feb 2023 21:04:09 GMT\nserver: uvicorn\n\nTraceback (most recent call last):\n  File \".../starlette/middleware/errors.py\", line 162, in *call*\n... (lots of confusing innards here) ...\n  File \".../service/explorer.py\", line 11, in create\n    return data.create(explorer)\n           ^^^^^^^\n  File \".../data/explorer.py\", line 37, in create\n    curs.execute(qry, params)\nsqlite3.IntegrityError: UNIQUE constraint failed: explorer.name\n```", "```py\n$ http localhost:8000/explorer/\"Beau Buffalo\"\nHTTP/1.1 500 Internal Server Error\ncontent-length: 3282\ncontent-type: text/plain; charset=utf-8\ndate: Mon, 27 Feb 2023 21:09:37 GMT\nserver: uvicorn\n\nTraceback (most recent call last):\n  File \".../starlette/middleware/errors.py\", line 162, in *call*\n... (many lines of ancient cuneiform) ...\n  File \".../data/explorer.py\", line 11, in row_to_model\n    name, country, description = row\n    ^^^^^^^\nTypeError: cannot unpack non-iterable NoneType object\n```", "```py\nclass Missing(Exception):\n    def __init__(self, msg:str):\n        self.msg = msg\n\nclass Duplicate(Exception):\n    def __init__(self, msg:str):\n        self.msg = msg\n```", "```py\nfrom sqlite3 import connect, IntegrityError\n```", "```py\nfrom init import (conn, curs, IntegrityError)\nfrom model.explorer import Explorer\nfrom error import Missing, Duplicate\n\ncurs.execute(\"\"\"create table if not exists explorer(\n name text primary key,\n country text,\n description text)\"\"\")\n\ndef row_to_model(row: tuple) -> Explorer:\n    name, country, description = row\n    return Explorer(name=name,\n        country=country, description=description)\n\ndef model_to_dict(explorer: Explorer) -> dict:\n    return explorer.dict()\n\ndef get_one(name: str) -> Explorer:\n    qry = \"select * from explorer where name=:name\"\n    params = {\"name\": name}\n    curs.execute(qry, params)\n    row = curs.fetchone()\n    if row:\n        return row_to_model(row)\n    else:\n        raise Missing(msg=f\"Explorer {name} not found\")\n\ndef get_all() -> list[Explorer]:\n    qry = \"select * from explorer\"\n    curs.execute(qry)\n    return [row_to_model(row) for row in curs.fetchall()]\n\ndef create(explorer: Explorer) -> Explorer:\n    if not explorer: return None\n    qry = \"\"\"insert into explorer (name, country, description) values\n (:name, :country, :description)\"\"\"\n    params = model_to_dict(explorer)\n    try:\n        curs.execute(qry, params)\n    except IntegrityError:\n        raise Duplicate(msg=\n            f\"Explorer {explorer.name} already exists\")\n    return get_one(explorer.name)\n\ndef modify(name: str, explorer: Explorer) -> Explorer:\n    if not (name and explorer): return None\n    qry = \"\"\"update explorer\n set name=:name,\n country=:country,\n description=:description\n where name=:name_orig\"\"\"\n    params = model_to_dict(explorer)\n    params[\"name_orig\"] = explorer.name\n    curs.execute(qry, params)\n    if curs.rowcount == 1:\n        return get_one(explorer.name)\n    else:\n        raise Missing(msg=f\"Explorer {name} not found\")\n\ndef delete(name: str):\n    if not name: return False\n    qry = \"delete from explorer where name = :name\"\n    params = {\"name\": name}\n    curs.execute(qry, params)\n    if curs.rowcount != 1:\n        raise Missing(msg=f\"Explorer {name} not found\")\n```", "```py\nfrom fastapi import APIRouter, HTTPException\nfrom model.explorer import Explorer\nfrom service import explorer as service\nfrom error import Duplicate, Missing\n\nrouter = APIRouter(prefix = \"/explorer\")\n\n@router.get(\"\")\n@router.get(\"/\")\ndef get_all() -> list[Explorer]:\n    return service.get_all()\n\n@router.get(\"/{name}\")\ndef get_one(name) -> Explorer:\n    try:\n        return service.get_one(name)\n    except Missing as exc:\n        raise HTTPException(status_code=404, detail=exc.msg)\n\n@router.post(\"\", status_code=201)\n@router.post(\"/\", status_code=201)\ndef create(explorer: Explorer) -> Explorer:\n    try:\n        return service.create(explorer)\n    except Duplicate as exc:\n        raise HTTPException(status_code=404, detail=exc.msg)\n\n@router.patch(\"/\")\ndef modify(name: str, explorer: Explorer) -> Explorer:\n    try:\n        return service.modify(name, explorer)\n    except Missing as exc:\n        raise HTTPException(status_code=404, detail=exc.msg)\n\n@router.delete(\"/{name}\", status_code=204)\ndef delete(name: str):\n    try:\n        return service.delete(name)\n    except Missing as exc:\n        raise HTTPException(status_code=404, detail=exc.msg)\n```", "```py\n$ http localhost:8000/explorer/\"Beau Buffalo\"\nHTTP/1.1 404 Not Found\ncontent-length: 44\ncontent-type: application/json\ndate: Mon, 27 Feb 2023 21:11:27 GMT\nserver: uvicorn\n\n{\n    \"detail\": \"Explorer Beau Buffalo not found\"\n}\n```", "```py\n$ http post localhost:8000/explorer name=\"Beau Buffette\" country=\"US\"\nHTTP/1.1 404 Not Found\ncontent-length: 50\ncontent-type: application/json\ndate: Mon, 27 Feb 2023 21:14:00 GMT\nserver: uvicorn\n\n{\n    \"detail\": \"Explorer Beau Buffette already exists\"\n}\n```", "```py\nimport os\nimport pytest\nfrom model.creature import Creature\nfrom error import Missing, Duplicate\n\n# set this before data imports below for data.init\nos.environ[\"CRYPTID_SQLITE_DB\"] = \":memory:\"\nfrom data import creature\n\n@pytest.fixture\ndef sample() -> Creature:\n    return Creature(name=\"yeti\", country=\"CN\", area=\"Himalayas\",\n        description=\"Harmless Himalayan\",\n        aka=\"Abominable Snowman\")\n\ndef test_create(sample):\n    resp = creature.create(sample)\n    assert resp == sample\n\ndef test_create_duplicate(sample):\n    with pytest.raises(Duplicate):\n        _ = creature.create(sample)\n\ndef test_get_one(sample):\n    resp = creature.get_one(sample.name)\n    assert resp == sample\n\ndef test_get_one_missing():\n    with pytest.raises(Missing):\n        _ = creature.get_one(\"boxturtle\")\n\ndef test_modify(sample):\n    creature.area = \"Sesame Street\"\n    resp = creature.modify(sample.name, sample)\n    assert resp == sample\n\ndef test_modify_missing():\n    thing: Creature = Creature(name=\"snurfle\", country=\"RU\", area=\"\",\n        description=\"some thing\", aka=\"\")\n    with pytest.raises(Missing):\n        _ = creature.modify(thing.name, thing)\n\ndef test_delete(sample):\n    resp = creature.delete(sample.name)\n    assert resp is None\n\ndef test_delete_missing(sample):\n    with pytest.raises(Missing):\n        _ = creature.delete(sample.name)\n```"]