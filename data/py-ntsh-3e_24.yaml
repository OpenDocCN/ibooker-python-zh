- en: Chapter 24\. Packaging Programs and Extensions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第24章\. 打包程序和扩展
- en: '*In this chapter, abridged for print publication, we describe the packaging
    ecosystem’s development. We provide additional material in the [online version
    of this chapter](https://oreil.ly/python-nutshell-24), available in the GitHub
    repository for this book. Among other topics (see [“Online Material”](#online_materia)
    for a complete list), in the online version we describe poetry, a modern standards-compliant
    Python build system, and compare it with the more traditional setuptools approach.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*本章内容有所删减以适应印刷出版，我们在这本书的 GitHub 存储库中的[在线版本](https://oreil.ly/python-nutshell-24)提供了更多材料。在线版本中我们还描述了诗歌（poetry），这是一个符合现代标准的
    Python 构建系统，并将其与传统的 setuptools 方法进行了比较，此外还涵盖了其他主题（完整列表请参见[“在线材料”](#online_materia)）。*'
- en: Suppose you have some Python code that you need to deliver to other people and
    groups. It works on your machine, but now you have the added complication of making
    it work for other people. This involves packaging your code in a suitable format
    and making it available to its intended audience.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一些 Python 代码需要交付给其他人和团体。它在您的机器上运行正常，但现在您需要使其在其他人那里也能正常运行。这涉及将您的代码打包成适合的格式并提供给预期的受众。
- en: The quality and diversity of the Python packaging ecosystem have greatly improved
    since the last edition, and its documentation is both better organized and much
    more complete. These improvements are based on careful work to specify a Python
    source tree format independent of any specific build system in [PEP 517](https://oreil.ly/Vm1QZ),
    “A Build-System Independent Format for Source Trees,” and the minimum build system
    requirements in [PEP 518](https://oreil.ly/KwMjb), “Specifying Minimum Build System
    Requirements for Python Projects.” The “Rationale” section of the latter document
    concisely describes why these changes were required, the most significant being
    removal of the need to run the *setup.py* file to discover (presumably by observing
    tracebacks) the build’s requirements.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 自上一版以来，Python 打包生态系统的质量和多样性有了很大改善，其文档组织更为完善、内容更加完整。这些改进基于对 Python 源树格式的仔细规定，独立于任何特定构建系统的规定，详见[PEP
    517](https://oreil.ly/Vm1QZ)，“独立于构建系统的 Python 源树格式”，以及[PEP 518](https://oreil.ly/KwMjb)，“为
    Python 项目指定最低构建系统要求”，后者的“原理”部分简要描述了为何需要进行这些改变，其中最重要的是不再需要运行 *setup.py* 文件来发现（据推测是通过观察回溯信息）构建的要求。
- en: The major purpose of PEP 517 is to specify the format of build definitions in
    a file called *pyproject.toml*. The file is organized into sections called *tables*,
    each with a header comprising the table’s name in brackets, much like a config
    file. Each table contains values for various parameters, consisting of a name,
    an equals sign, and a value. 3.11+ Python includes the [tomllib](https://oreil.ly/fdSIV)
    module for extracting these definitions, with load and loads methods similar to
    those in the json module.^([1](ch24.xhtml#ch01fn161))
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: PEP 517 的主要目的是指定一个名为 *pyproject.toml* 的文件中的构建定义格式。该文件被组织成称为“表”的部分，每个表的标题包含在方括号中的表名，类似于配置文件。每个表包含各种参数的值，包括名称、等号和值。Python
    3.11+ 包括了用于提取这些定义的[tomllib](https://oreil.ly/fdSIV)模块，具有类似于 json 模块中的 load 和 loads
    方法。^([1](ch24.xhtml#ch01fn161))
- en: Although more and more tools in the Python ecosystem are using these modern
    standards, you should still expect to continue to encounter the more traditional
    setuptools-based build system (which is itself [transitioning](https://oreil.ly/aF454)
    to the *pyproject.toml* base recommended in PEP 517). For an excellent survey
    of packaging tools available, see the [list](https://oreil.ly/ttIW6) maintained
    by the Python Packaging Authority (PyPA).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Python 生态系统中越来越多的工具使用这些现代标准，但您仍应该预期会继续遇到更传统的基于 setuptools 的构建系统（它本身正在[过渡](https://oreil.ly/aF454)到PEP
    517推荐的*pyproject.toml*基础）。关于可用的打包工具的优秀概述，请参阅由 Python Packaging Authority (PyPA)
    维护的[列表](https://oreil.ly/ttIW6)。
- en: To explain packaging, we first describe its development, then we discuss poetry
    and setuptools. Other PEP 517-compliant build tools worth mentioning include [flit](https://oreil.ly/sF7Zp)
    and [hatch](https://oreil.ly/AKylH), and you should expect their number to grow
    as interoperability continues to improve. For distributing relatively simple pure
    Python packages, we also introduce the standard library module zipapp, and we
    complete the chapter with a short section explaining how to access data bundled
    as part of a package.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解释打包，我们首先描述其发展，然后讨论 poetry 和 setuptools。其他符合 PEP 517 标准的构建工具包括 [flit](https://oreil.ly/sF7Zp)
    和 [hatch](https://oreil.ly/AKylH)，随着互操作性的不断改善，你应该期待它们的数量将继续增长。对于分发相对简单的纯 Python
    包，我们还介绍了标准库模块 zipapp，并在本章中通过一个简短的部分解释如何访问作为包一部分捆绑的数据。
- en: What We Don’t Cover in This Chapter
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本章未涵盖的内容
- en: 'Apart from the PyPA-sanctioned methods, there are many other possible ways
    of distributing Python code—far too many to cover in a single chapter. We do not
    cover the following packaging and distribution topics, which may well be of interest
    to those wishing to distribute Python code:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 PyPA 认可的方法外，还有许多其他可能的 Python 代码分发方式，远远超出了单章节的覆盖范围。我们不涵盖以下打包和分发主题，这些主题可能会对希望分发
    Python 代码的人感兴趣：
- en: Using [conda](https://docs.conda.io)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 [conda](https://docs.conda.io)
- en: Using [Docker](https://docs.docker.com)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 [Docker](https://docs.docker.com)
- en: 'Various methods of creating binary executable files from Python code, such
    as the following (these tools can be tricky to set up for complex projects, but
    they repay the effort by widening the potential audience for an application):'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Python 代码创建二进制可执行文件的各种方法，例如以下工具（这些工具对于复杂项目的设置可能有些棘手，但通过扩大应用程序的潜在受众来回报努力）：
- en: '[PyInstaller](https://pyinstaller.org), which takes a Python application and
    bundles all the required dependencies (including the Python interpreter and necessary
    extension libraries) into a single executable program that can be distributed
    as a standalone application. Versions exist for Windows, macOS, and Linux, though
    each architecture can only produce its own executable.'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyInstaller](https://pyinstaller.org)，它接受一个 Python 应用程序并将所有必需的依赖（包括 Python
    解释器和必要的扩展库）打包成一个单独的可执行程序，可以作为独立应用程序分发。每个体系结构都有适用于 Windows、macOS 和 Linux 的版本，但每个体系结构只能生成自己的可执行文件。'
- en: '[PyOxidizer](https://oreil.ly/GC_5w), the main tool in a utility set of the
    same name, which not only allows the creation of standalone executables but can
    also create Windows and macOS installers and other artifacts.'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyOxidizer](https://oreil.ly/GC_5w)，这是同名实用工具集中的主要工具，不仅允许创建独立的可执行文件，还可以创建 Windows
    和 macOS 安装程序及其他工件。'
- en: '[cx_Freeze](https://oreil.ly/pnWdA), which creates a folder containing a Python
    interpreter, extension libraries, and a ZIP file of the Python code. You can convert
    this into either a Windows installer or a macOS disk image.'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[cx_Freeze](https://oreil.ly/pnWdA)，它创建一个包含 Python 解释器、扩展库和 Python 代码 ZIP 文件的文件夹。你可以将其转换为
    Windows 安装程序或 macOS 磁盘映像。'
- en: A Brief History of Python Packaging
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 打包的简要历史
- en: Before the advent of virtual environments, maintaining multiple Python projects
    and avoiding conflicts between their different dependency requirements was a complex
    business involving careful management of sys.path and the PYTHONPATH environment
    variable. If different projects required the same dependency in two different
    versions, no single Python environment could support both. Nowadays, each virtual
    environment (see [“Python Environments”](ch07.xhtml#python_environments) for a
    refresher on this topic) has its own *site_packages* directory into which third-party
    and local packages and modules can be installed in a number of convenient ways,
    making it largely unnecessary to think about the mechanism.^([2](ch24.xhtml#ch01fn162))
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟环境出现之前，维护多个 Python 项目并避免它们不同依赖需求的冲突是一项复杂的任务，需要仔细管理 `sys.path` 和 `PYTHONPATH`
    环境变量。如果不同项目需要同一个依赖的不同版本，没有一个单独的 Python 环境可以同时支持它们。如今，每个虚拟环境（参见[“Python 环境”](ch07.xhtml#python_environments)以深入了解此主题）都有自己的
    *site_packages* 目录，可以通过多种便捷的方式安装第三方和本地的包和模块，大大减少了对机制的需求，使得这些问题基本上不再需要考虑。^([2](ch24.xhtml#ch01fn162))
- en: When the Python Package Index was conceived in 2003, no such features were available,
    and there was no uniform way to package and distribute Python code. Developers
    had to carefully adapt their environment to each different project they worked
    on. This changed with the development of the distutils standard library package,
    soon leveraged by the third-party setuptools package and its easy_install utility.
    The now-obsolete platform-independent *egg* packaging format was the first definition
    of a single-file format for Python package distribution, allowing easy download
    and installation of eggs from network sources. Installing a package used a *setup.py*
    component, whose execution would integrate the package’s code into an existing
    Python environment using the features of setuptools. Requiring a third-party (i.e.,
    not part of the standard distribution) module such as setuptools was clearly not
    a fully satisfactory solution.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Python 包索引于 2003 年构思时，没有这样的功能可用，也没有统一的方法来打包和分发 Python 代码。开发人员必须仔细地为他们所工作的每个不同项目调整他们的环境。随着
    distutils 标准库包的开发，情况发生了变化，很快被第三方的 setuptools 包及其 easy_install 实用工具所利用。现在已过时的跨平台
    *egg* 打包格式是 Python 包分发的第一个单文件格式的定义，允许从网络源轻松下载和安装 eggs。安装一个包使用了 *setup.py* 组件，其执行将使用
    setuptools 的特性将包的代码集成到现有的 Python 环境中。要求使用第三方（即不是标准发行版的一部分）模块，如 setuptools，显然不是一个完全令人满意的解决方案。
- en: In parallel with these developments came the creation of the virtualenv package,
    vastly simplifying project management for the average Python programmer by offering
    clean separation between the Python environments used by different projects. Shortly
    after this, the pip utility, again largely based on the ideas behind setuptools,
    was introduced. Using source trees rather than eggs as its distribution format,
    pip could not only install packages but uninstall them as well. It could also
    list the contents of a virtual environment and accept a versioned list of the
    project’s dependencies, by convention in a file named *requirements.txt*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与这些发展同时进行的是 virtualenv 包的创建，它通过为不同项目使用的 Python 环境提供清晰的分离大大简化了普通 Python 程序员的项目管理。在此之后不久，基于
    setuptools 背后的思想，pip 实用程序被引入。使用源树而不是 eggs 作为其分发格式，pip 不仅可以安装软件包，还可以卸载它们。它还可以列出虚拟环境的内容，并接受项目依赖项的带版本的列表，按照约定存储在名为
    *requirements.txt* 的文件中。
- en: 'setuptools development was somewhat idiosyncratic and not responsive to community
    needs, so a fork named distribute was created as a drop-in replacement (it installed
    under the setuptools name), to allow development work to proceed along more collaborative
    lines. This was eventually merged back into the setuptools codebase, which is
    nowadays controlled by the PyPA: the ability to do this affirmed the value of
    Python’s open source licensing policy.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: setuptools 的开发有些古怪，对社区需求反应不够灵活，因此创建了一个名为 distribute 的分支作为一个可直接替换的解决方案（它安装在 setuptools
    名下），以便允许更具合作性的开发工作进行。这最终被合并回了 setuptools 代码库中，现在由 PyPA 控制：能够做到这一点肯定了 Python 的开源许可政策的价值。
- en: -3.11 The distutils package was originally designed as a standard library component
    to help with installing extension modules (particularly those written in compiled
    languages, covered in [Chapter 25](https://oreil.ly/python-nutshell-25)). Although
    it currently remains in the standard library, it has been deprecated and is scheduled
    for removal from version 3.12, when it will likely be incorporated into setuptools.
    A number of other tools have emerged that conform to PEPs 517 and 518\. In this
    chapter we’ll look at different ways to install additional functionality into
    a Python environment.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: -3.11 distutils 包最初设计为标准库组件，帮助安装扩展模块（特别是那些用编译语言编写的模块，在 [第 25 章](https://oreil.ly/python-nutshell-25)
    中有介绍）。尽管它目前仍然存在于标准库中，但它已被弃用，并计划在版本 3.12 中删除，届时可能会并入 setuptools。出现了许多其他工具，符合 PEP
    517 和 518。在本章中，我们将介绍不同的方法来将额外的功能安装到 Python 环境中。
- en: With the acceptance of [PEP 425](https://oreil.ly/vB13q), “Compatibility Tags
    for Built Distributions,” and [PEP 427](https://oreil.ly/B_xwu), “The Wheel Binary
    Package Format,” Python finally had a specification for a binary distribution
    format (the *wheel*, whose definition has [since been updated](https://oreil.ly/XYnsg))
    that would allow the distribution of compiled extension packages for different
    architectures, falling back to installing from source when no appropriate binary
    wheel is available.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 随着[PEP 425](https://oreil.ly/vB13q)，“内置分发的兼容性标签”，以及[PEP 427](https://oreil.ly/B_xwu)，“Wheel二进制包格式”，Python终于有了一个二进制分发格式的规范（*wheel*，其定义已经[更新](https://oreil.ly/XYnsg)），允许在不同架构下分发编译的扩展包，当没有合适的二进制wheel可用时则回退到源码安装。
- en: '[PEP 453](https://oreil.ly/FhWDt), “Explicit Bootstrapping of pip in Python
    Installations,” determined that the pip utility should become the preferred way
    to install packages in Python, and established a process whereby it could be updated
    independently of Python to allow new deployment features to be delivered without
    waiting for new language releases.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[PEP 453](https://oreil.ly/FhWDt)，“Python安装中pip的显式引导”，决定pip实用程序应成为Python中首选的安装包的方式，并建立了一个独立于Python的更新过程，以便可以不必等待新的语言发布而提供新的部署功能。'
- en: These developments and many others that have rationalized the Python ecosystem
    are due to a lot of hard work by the PyPA, to whom Python’s ruling “Steering Council”
    has delegated most matters relating to packaging and distribution. For a more
    in-depth and advanced explanation of the material in this chapter, see the [“Python
    Packaging User Guide”](https://packaging.python.org), which offers sound advice
    and useful instruction to anyone who wants to make their Python software widely
    available.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些发展以及许多其他使Python生态系统合理化的努力都归功于PyPA，Python的领导“Steering Council”已将与打包和分发相关的大多数事项委托给他们。要深入了解本章节的更高级内容，请参阅[“Python打包用户指南”](https://packaging.python.org)，该指南为希望广泛发布其Python软件的任何人提供了明智的建议和有用的指导。
- en: Online Material
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在线资料
- en: 'As mentioned at the start of the chapter, the [online version of this chapter](https://oreil.ly/python-nutshell-24)
    contains additional material. The topics covered are:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章节开头所提到的，[本章节的在线版本](https://oreil.ly/python-nutshell-24)包含额外的材料。讨论的主题包括：
- en: The build process
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建过程
- en: Entry points
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 入口点
- en: Distribution formats
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布格式
- en: poetry
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: poetry
- en: setuptools
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: setuptools
- en: Distributing your package
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分发您的包
- en: zipapp
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: zipapp
- en: Accessing data included with your code
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问与您的代码一起提供的数据
- en: ^([1](ch24.xhtml#ch01fn161-marker)) Users of older versions can install the
    library from PyPI with **pip install toml**.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch24.xhtml#ch01fn161-marker)) 旧版本的用户可以使用**pip install toml**从PyPI安装该库。
- en: ^([2](ch24.xhtml#ch01fn162-marker)) Be aware that some packages are less than
    friendly to virtual environments. Happily, these are few and far between.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch24.xhtml#ch01fn162-marker)) 请注意，某些软件包对虚拟环境不太友好。幸运的是，这种情况很少见。
