- en: Chapter 2\. Getting Started with Ray (Locally)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章. 使用 Ray 入门（本地）
- en: As we’ve discussed, Ray is useful for managing resources from a single computer
    up to a cluster. It is simpler to get started with a local installation, which
    leverages the parallelism of multicore/multi-CPU machines. Even when deploying
    to a cluster, you’ll want to have Ray installed locally for development. Once
    you’ve installed Ray, we’ll show you how to make and call your first asynchronous
    parallelized function and store state in an actor.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所讨论的，Ray 可以用来管理从单台计算机到集群的资源。开始使用本地安装更简单，可以利用多核/多 CPU 机器的并行性。即使在部署到集群时，您也会希望在本地安装
    Ray 以进行开发。安装完 Ray 后，我们将向您展示如何创建和调用第一个异步并行化函数，并在 actor 中存储状态。
- en: Tip
  id: totrans-2
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: If you are in a hurry, you can also use [Gitpod on the book’s GitHub repo](https://oreil.ly/7YUbX)
    to get a web environment with the examples, or check out [Anyscale’s managed Ray](https://oreil.ly/UacuZ).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您着急的话，也可以在书籍的 GitHub 仓库上使用 [Gitpod](https://oreil.ly/7YUbX) 获取带有示例的 Web 环境，或者查看
    [Anyscale 的托管 Ray](https://oreil.ly/UacuZ)。
- en: Installation
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: Installing Ray, even on a single machine, can range from relatively straightforward
    to fairly complicated. Ray publishes wheels to the Python Package Index (PyPI)
    following a normal release cadence as well as in nightly releases. These wheels
    are currently available for only x86 users, so ARM users will mostly need to build
    Ray from source.^([1](ch02.html#idm45354787565408))
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在单台机器上，安装 Ray 的复杂程度从相对简单到非常复杂不等。Ray 将轮子发布到 Python 包索引（PyPI），遵循正常的发布周期和每夜版发布。目前这些轮子仅适用于
    x86 用户，因此 ARM 用户大多需要从源代码构建 Ray。^([1](ch02.html#idm45354787565408))
- en: Tip
  id: totrans-6
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: M1 ARM users on macOS can use the x86 packages with Rosetta. Some performance
    degradation occurs, but it’s a much simpler setup. To use the x86s package, install
    Anaconda for macOS.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上的 M1 ARM 用户可以使用 Rosetta 上的 x86 包。会有一些性能下降，但设置起来简单得多。要使用 x86s 包，请安装
    macOS 的 Anaconda。
- en: Installing for x86 and M1 ARM
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: x86 和 M1 ARM 的安装
- en: Most users can run `pip install -U ray` to automatically install Ray from PyPI.
    When you go to distribute your computation on multiple machines, it’s often easier
    to have been working in a Conda environment so you can match Python versions with
    your cluster and know your package dependencies. The commands in [Example 2-1](#ex_ray_conda)
    set up a fresh Conda environment with Python and install Ray with minimal dependencies.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数用户可以运行 `pip install -U ray` 从 PyPI 自动安装 Ray。当你需要在多台机器上分布计算时，在 Conda 环境中工作通常更容易，这样你可以匹配
    Python 版本和集群的包依赖关系。[示例 2-1](#ex_ray_conda) 中的命令设置了一个带有 Python 的全新 Conda 环境，并且使用最少的依赖项安装了
    Ray。
- en: Example 2-1\. [Installing Ray inside a Conda environment](https://oreil.ly/rxdEC)
  id: totrans-10
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-1\. [在 Conda 环境中安装 Ray](https://oreil.ly/rxdEC)
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Installing (from Source) for ARM
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ARM 的安装（来自源代码）
- en: For ARM users or any users with a system architecture that does not have a prebuilt
    wheel available, you will need to build Ray from the source. On our ARM Ubuntu
    system, we need to install additional packages, as shown in [Example 2-2](#debian_ray_arms_pkgs).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 ARM 用户或任何没有预先构建轮子的系统架构的用户，您需要从源代码构建 Ray。在我们的 ARM Ubuntu 系统上，我们需要安装额外的软件包，如[示例 2-2](#debian_ray_arms_pkgs)
    所示。
- en: Example 2-2\. [Installing Ray from source](https://oreil.ly/k97Lt)
  id: totrans-14
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-2\. [从源代码安装 Ray](https://oreil.ly/k97Lt)
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you are an M1 Mac user who doesn’t want to use Rosetta, you’ll need to install
    some dependencies. You can install them with Homebrew and `pip`, as shown in [Example 2-3](#m1_ray_arms_pkgs).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是不想使用 Rosetta 的 M1 Mac 用户，您需要安装一些依赖项。您可以使用 Homebrew 和 `pip` 安装它们，如[示例 2-3](#m1_ray_arms_pkgs)
    所示。
- en: Example 2-3\. [Installing extra dependencies needed on the M1](https://oreil.ly/4KDxL)
  id: totrans-17
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-3\. [在 M1 上安装额外的依赖项](https://oreil.ly/4KDxL)
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You need to build some of the Ray components separately because they are written
    in different languages. This does make installation more complicated, but you
    can follow the steps in [Example 2-4](#build_ray).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要单独构建一些 Ray 组件，因为它们使用不同的语言编写。这确实使安装变得更加复杂，但您可以按照[示例 2-4](#build_ray) 中的步骤操作。
- en: Example 2-4\. [Installing the build tools for Ray’s native build toolchain](https://oreil.ly/k97Lt)
  id: totrans-20
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-4\. [安装 Ray 的构建工具](https://oreil.ly/k97Lt)
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: The slowest part of the build is compiling the C++ code, which can easily take
    up to an hour even on modern machines. If you have a cluster with numerous ARM
    machines, building a wheel once and reusing it on your cluster is often worthwhile.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 构建中最慢的部分是编译C++代码，即使在现代计算机上也可能需要一个小时。如果您有一台装有多个ARM处理器的集群，仅在集群上构建一次wheel并在集群上重用它通常是值得的。
- en: Hello Worlds
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello Worlds
- en: Now that you have Ray installed, it’s time to learn about some of the Ray APIs.
    We’ll cover these APIs in more detail later, so don’t get too hung up on the details
    now.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经安装了Ray，是时候了解一些Ray API了。稍后我们会更详细地介绍这些API，所以现在不要太过于纠结于细节。
- en: Ray Remote (Task/Futures) Hello World
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ray远程（任务/未来对象）Hello World
- en: One of the core building blocks of Ray is that of remote functions, which return
    futures. The term *remote* here indicates *remote to our main process*, and can
    be on the same or a different machine.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Ray的核心构建块之一是远程函数，它们返回未来对象。这里的术语*远程*表示*远程到我们的主进程*，可以在同一台或不同的机器上。
- en: To understand this better, you can write a function that returns the location
    where it is running. Ray distributes work among multiple processes and, when in
    distributed mode, multiple hosts. A local (non-Ray) version of this function is
    shown in [Example 2-5](#ex_local_fun).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要更好地理解这一点，您可以编写一个返回其运行位置的函数。Ray将工作分布在多个进程之间，在分布式模式下，还可以在多台主机之间工作。这个函数的本地（非Ray）版本显示在[示例 2-5](#ex_local_fun)中。
- en: Example 2-5\. [A local (regular) function](https://oreil.ly/perip)
  id: totrans-29
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-5\. [一个本地（常规）函数](https://oreil.ly/perip)
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can use the `ray.remote` decorator to create a remote function. Calling
    remote functions is a bit different from calling local ones and is done by calling
    `.remote` on the function. Ray will immediately return a future when you call
    a remote function instead of blocking for the result. You can use `ray.get` to
    get the values returned in those futures. To convert [Example 2-5](#ex_local_fun)
    to a remote function, all you need to do is use the `ray.remote` decorator, as
    shown in [Example 2-6](#ex_remote_fun).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`ray.remote`装饰器创建一个远程函数。调用远程函数与调用本地函数有所不同，需要在函数上调用`.remote`。当您调用远程函数时，Ray将立即返回一个未来对象，而不是阻塞等待结果。您可以使用`ray.get`来获取这些未来对象返回的值。要将[示例 2-5](#ex_local_fun)转换为远程函数，您只需使用`ray.remote`装饰器，如[示例 2-6](#ex_remote_fun)所示。
- en: Example 2-6\. [Turning the previous function into a remote function](https://oreil.ly/perip)
  id: totrans-32
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-6\. [将上一个函数转换为远程函数](https://oreil.ly/perip)
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When you run these two examples, you’ll see that the first is executed in the
    same process, and that Ray schedules the second one in another process. When we
    run the two examples, we get `Running on jupyter-holdenk in pid 33` and `Running
    on jupyter-holdenk in pid 173`, respectively.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行这两个示例时，您会看到第一个在同一个进程中执行，而Ray将第二个调度到另一个进程中。当我们运行这两个示例时，分别得到`Running on jupyter-holdenk
    in pid 33`和`Running on jupyter-holdenk in pid 173`。
- en: Sleepy task
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sleepy task
- en: An easy (although artificial) way to understand how remote futures can help
    is by making an intentionally slow function (in our case, `slow_task`) and having
    Python compute in regular function calls and Ray remote calls. See [Example 2-7](#sleepy_task).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建一个故意缓慢的函数（在我们的例子中是`slow_task`），并让Python在常规函数调用和Ray远程调用中计算，您可以轻松（虽然是人为的）了解远程未来如何帮助。参见[示例 2-7](#sleepy_task)。
- en: Example 2-7\. [Using Ray to parallelize an intentionally slow function](https://oreil.ly/perip)
  id: totrans-37
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-7\. [使用Ray并行化一个故意缓慢的函数](https://oreil.ly/perip)
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When you run this code, you’ll see that by using Ray remote functions, your
    code is able to execute multiple remote functions at the same time. While you
    can do this without Ray by using `multiprocessing`, Ray handles all of the details
    for you and can also eventually scale up to multiple machines.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行此代码时，您会看到通过使用Ray远程函数，您的代码能够同时执行多个远程函数。虽然您可以使用`multiprocessing`在没有Ray的情况下做到这一点，但Ray会为您处理所有细节，并且还可以最终扩展到多台机器。
- en: Nested and chained tasks
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 嵌套和链式任务
- en: Ray is notable in the distributed processing world for allowing nested and chained
    tasks. Launching more tasks inside other tasks can make certain kinds of recursive
    algorithms easier to implement.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Ray在分布式处理领域中非常显著，因为它允许嵌套和链式任务。在其他任务内部启动更多任务可以使某些类型的递归算法更容易实现。
- en: One of the more straightforward examples using nested tasks is a web crawler.
    In the web crawler, each page we visit can launch multiple additional visits to
    the links on that page, as shown in [Example 2-8](#nested_task).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用嵌套任务的更直接的示例之一是网络爬虫。在网络爬虫中，我们访问的每个页面都可以启动对该页面上链接的多个额外访问，如[示例 2-8](#nested_task)所示。
- en: Example 2-8\. [Web crawler with nested tasks](https://oreil.ly/perip)
  id: totrans-43
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-8\. [带有嵌套任务的网络爬虫](https://oreil.ly/perip)
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Many other systems require that all tasks launch on a central coordinator node.
    Even those that support launching tasks in a nested fashion still usually depend
    on a central scheduler.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 许多其他系统要求所有任务都在中央协调器节点上启动。即使支持以嵌套方式启动任务的系统，通常也仍然依赖于中央调度器。
- en: Data Hello World
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据 Hello World
- en: Ray has a somewhat limited dataset API for working with structured data. Apache
    Arrow powers Ray’s Datasets API. Arrow is a column-oriented, language-independent
    format with some popular operations. Many popular tools support Arrow, allowing
    easy transfer between them (such as Spark, Ray, Dask, and TensorFlow).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Ray在处理结构化数据时使用了稍微有限的数据集API。Apache Arrow驱动Ray的数据集API。Arrow是一种面向列的、语言无关的格式，具有一些流行的操作。许多流行的工具支持Arrow，使它们之间的轻松转移成为可能（例如Spark、Ray、Dask和TensorFlow）。
- en: Ray only recently added keyed aggregations on datasets with version 1.9\. The
    most popular distributed data example is a word count, which requires aggregates.
    Instead of using these, we can perform embarrassingly parallel tasks, such as
    map transformations, by constructing a dataset of web pages, shown in [Example 2-9](#ds_hello).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Ray最近仅在版本1.9中添加了数据集上的键控聚合。最流行的分布式数据示例是词频统计，这需要聚合。我们可以执行令人尴尬的并行任务，如映射转换，构建一个网页数据集，如[示例
    2-9](#ds_hello)所示。
- en: Example 2-9\. [Constructing a dataset of web pages](https://oreil.ly/perip)
  id: totrans-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-9\. [构建一个网页数据集](https://oreil.ly/perip)
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Ray 1.9 added `GroupedDataset` for supporting various kinds of aggregations.
    By calling `groupby` with either a column name or a function that returns a key,
    you get a `GroupedDataset`. `GroupedDataset` has built-in support for `count`,
    `max`, `min`, and other common aggregations. You can use `GroupedDataset` to extend
    [Example 2-9](#ds_hello) into a word-count example, as shown in [Example 2-10](#ds_wc).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Ray 1.9添加了`GroupedDataset`以支持各种类型的聚合。通过调用`groupby`，使用列名或返回键的函数，您可以获得`GroupedDataset`。`GroupedDataset`内置支持`count`、`max`、`min`和其他常见聚合。您可以使用`GroupedDataset`将[示例
    2-9](#ds_hello)扩展为词频统计示例，如[示例 2-10](#ds_wc)所示。
- en: Example 2-10\. [Converting a dataset of web pages into words](https://oreil.ly/perip)
  id: totrans-52
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-10\. [将网页数据集转换为单词](https://oreil.ly/perip)
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When you need to go beyond the built-in operations, Ray supports custom aggregations,
    provided you implement its interface. We will cover more on datasets, including
    aggregate functions, in [Chapter 9](ch09.html#ch09).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要超越内置操作时，Ray支持自定义聚合，只要你实现其接口。我们将更详细地讨论数据集，包括聚合函数，在[第9章](ch09.html#ch09)中。
- en: Note
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Ray uses *blocking evaluation* for its Dataset API. When you call a function
    on a Ray dataset, it will wait until it completes the result instead of returning
    a future. The rest of the Ray Core API uses futures.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Ray对其数据集API使用*阻塞评估*。当您在Ray数据集上调用函数时，它将等待直到完成结果，而不是返回一个future。Ray核心API的其余部分使用futures。
- en: If you want a full-featured DataFrame API, you can convert your Ray dataset
    into Dask. [Chapter 9](ch09.html#ch09) covers how to use Dask for more complex
    operations. If you are interested in learning more about Dask, check out [*Scaling
    Python with Dask*](https://oreil.ly/LKMlO) (O’Reilly), which Holden coauthored
    with Mika Kimmins.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望拥有功能齐全的DataFrame API，可以将您的Ray数据集转换为Dask。[第9章](ch09.html#ch09)详细介绍了如何使用Dask进行更复杂的操作。如果您想了解更多关于Dask的信息，请查看[*Scaling
    Python with Dask*](https://oreil.ly/LKMlO)（O’Reilly），由Holden与Mika Kimmins共同撰写。
- en: Actor Hello World
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Actor Hello World
- en: One of the unique parts of Ray is its emphasis on actors. Actors give you tools
    to manage the execution state, which is one of the more challenging parts of scaling
    systems. Actors send and receive messages, updating their state in response. These
    messages can come from other actors, programs, or your main execution thread with
    the Ray client.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Ray的一个独特之处在于它强调Actor。Actor为您提供管理执行状态的工具，这是扩展系统中较具挑战性的部分之一。Actor发送和接收消息，根据响应更新其状态。这些消息可以来自其他Actor、程序，或者您的主执行线程与Ray客户端。
- en: For every actor, Ray starts a dedicated process. Each actor has a mailbox of
    messages waiting to be processed. When you call an actor, Ray adds a message to
    the corresponding mailbox, which allows Ray to serialize message processing, thus
    avoiding expensive distributed locks. Actors can return values in response to
    messages, so when you send a message to an actor, Ray immediately returns a future
    so you can fetch the value when the actor is done processing your message.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个演员，Ray 启动一个专用进程。每个演员都有一个等待处理的消息邮箱。当您调用一个演员时，Ray 将一条消息添加到相应的邮箱中，从而允许 Ray
    序列化消息处理，从而避免昂贵的分布式锁。演员可以在响应消息时返回值，因此当您向演员发送消息时，Ray 立即返回一个未来对象，以便在演员处理完您的消息后获取该值。
- en: Ray actors are created and called similarly to remote functions but use Python
    classes, which gives the actor a place to store state. You can see this in action
    by modifying the classic “Hello World” example to greet you in sequence, as shown
    in [Example 2-11](#actor_hello_world).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Ray 演员的创建和调用方式与远程函数类似，但使用 Python 类来实现，这使得演员有一个存储状态的地方。您可以通过修改经典的“你好世界”示例来看到它的运行过程，按顺序向您问候，如[示例
    2-11](#actor_hello_world)所示。
- en: Example 2-11\. [Actor Hello World](https://oreil.ly/perip)
  id: totrans-62
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-11\. [演员你好世界](https://oreil.ly/perip)
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This example is fairly basic; it lacks any fault tolerance or concurrency within
    each actor. We’ll explore those more in [Chapter 4](ch04.html#ch04).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例相当基础；它缺乏任何容错性或每个演员内部的并发性。我们将在[第四章](ch04.html#ch04)中更深入地探讨这些内容。
- en: Conclusion
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter, you installed Ray on your local machine and used many of its
    core APIs. For the most part, you can continue to run the examples we’ve picked
    for this book in local mode. Naturally, local mode can limit your scale or take
    longer to run.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经在本地机器上安装了 Ray，并使用了其许多核心 API。大多数情况下，您可以继续在本地模式下运行我们为本书选择的示例。当然，本地模式可能会限制您的规模或运行时间更长。
- en: In the next chapter, we’ll look at some of the core concepts behind Ray. One
    of the concepts (fault tolerance) will be easier to illustrate with a cluster
    or cloud. So if you have access to a cloud account or a cluster, now would be
    an excellent time to jump over to [Appendix B](app02.html#appB) and look at the
    deployment options.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将深入探讨 Ray 背后的一些核心概念。其中一个概念（容错性）更容易通过集群或云来进行说明。因此，如果您可以访问云账户或集群，现在是跳转到[附录
    B](app02.html#appB)并查看部署选项的绝佳时机。
- en: ^([1](ch02.html#idm45354787565408-marker)) As ARM grows in popularity, Ray is
    more likely to add ARM wheels, so this is hopefully temporary.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch02.html#idm45354787565408-marker)) 随着 ARM 的普及，Ray 更有可能添加 ARM 版本的安装包，所以这只是暂时的情况。
- en: ^([2](ch02.html#idm45354786831024-marker)) Actors are still more expensive than
    lock-free remote functions, which can be scaled horizontally. For example, lots
    of workers calling the same actor to update model weights will still be slower
    than embarrassingly parallel operations.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch02.html#idm45354786831024-marker)) 演员仍然比无锁远程函数更昂贵，后者可以进行水平扩展。例如，许多工作进程调用同一个演员更新模型权重仍然比尴尬并行操作慢。
