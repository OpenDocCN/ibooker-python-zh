["```py\nclass Time:\n  \"\"\"Represents a time of day.\"\"\" \n```", "```py\nlunch = Time() \n```", "```py\ntype(lunch) \n```", "```py\n__main__.Time \n```", "```py\nprint(lunch) \n```", "```py\n<__main__.Time object at 0x7f31440ad0c0> \n```", "```py\nlunch.hour = 11\nlunch.minute = 59\nlunch.second = 1 \n```", "```py\nlunch.hour \n```", "```py\n11 \n```", "```py\ntotal_minutes = lunch.hour * 60 + lunch.minute\ntotal_minutes \n```", "```py\n719 \n```", "```py\nf'{lunch.hour}:{lunch.minute}:{lunch.second}' \n```", "```py\n'11:59:1' \n```", "```py\nf'{lunch.hour}:{lunch.minute:02d}:{lunch.second:02d}' \n```", "```py\n'11:59:01' \n```", "```py\ndef print_time(time):\n    s = f'{time.hour:02d}:{time.minute:02d}:{time.second:02d}'\n    print(s) \n```", "```py\nprint_time(lunch) \n```", "```py\n11:59:01 \n```", "```py\ndef make_time(hour, minute, second):\n    time = Time()\n    time.hour = hour\n    time.minute = minute\n    time.second = second\n    return time \n```", "```py\ntime = make_time(11, 59, 1)\nprint_time(time) \n```", "```py\n11:59:01 \n```", "```py\nstart = make_time(9, 20, 0)\nprint_time(start) \n```", "```py\n09:20:00 \n```", "```py\nstart.hour += 1\nstart.minute += 32\nprint_time(start) \n```", "```py\n10:52:00 \n```", "```py\ndef increment_time(time, hours, minutes, seconds):\n    time.hour += hours\n    time.minute += minutes\n    time.second += seconds \n```", "```py\nstart = make_time(9, 20, 0)\nincrement_time(start, 1, 32, 0)\nprint_time(start) \n```", "```py\n10:52:00 \n```", "```py\nfrom copy import copy \n```", "```py\nstart = make_time(9, 20, 0) \n```", "```py\nend = copy(start) \n```", "```py\nprint_time(start)\nprint_time(end) \n```", "```py\n09:20:00\n09:20:00 \n```", "```py\nstart is end \n```", "```py\nFalse \n```", "```py\nstart == end \n```", "```py\nFalse \n```", "```py\ndef add_time(time, hours, minutes, seconds):\n    total = copy(time)\n    increment_time(total, hours, minutes, seconds)\n    return total \n```", "```py\nend = add_time(start, 1, 32, 0)\nprint_time(end) \n```", "```py\n10:52:00 \n```", "```py\nprint_time(start) \n```", "```py\n09:20:00 \n```", "```py\nstart = make_time(9, 40, 0)\nend = add_time(start, 1, 32, 0)\nprint_time(end) \n```", "```py\n10:72:00 \n```", "```py\ndef increment_time(time, hours, minutes, seconds):\n    time.hour += hours\n    time.minute += minutes\n    time.second += seconds\n\n    if time.second >= 60:\n        time.second -= 60\n        time.minute += 1\n\n    if time.minute >= 60:\n        time.minute -= 60\n        time.hour += 1 \n```", "```py\nend = add_time(start, 1, 32, 0)\nprint_time(end) \n```", "```py\n11:12:00 \n```", "```py\nend = add_time(start, 0, 92, 0)\nprint_time(end) \n```", "```py\n10:72:00 \n```", "```py\nend = copy(start)\nend.minute = start.minute + 92\nend.minute \n```", "```py\n132 \n```", "```py\ncarry, end.minute = divmod(end.minute, 60)\ncarry, end.minute \n```", "```py\n(2, 12) \n```", "```py\nend.hour += carry\nprint_time(end) \n```", "```py\n11:12:00 \n```", "```py\ndef increment_time(time, hours, minutes, seconds):\n    time.hour += hours\n    time.minute += minutes\n    time.second += seconds\n\n    carry, time.second = divmod(time.second, 60)\n    carry, time.minute = divmod(time.minute + carry, 60)\n    carry, time.hour = divmod(time.hour + carry, 60) \n```", "```py\nend = add_time(start, 0, 90, 120)\nprint_time(end) \n```", "```py\n11:12:00 \n```", "```py\ndef time_to_int(time):\n    minutes = time.hour * 60 + time.minute\n    seconds = minutes * 60 + time.second\n    return seconds \n```", "```py\ntime = make_time(1, 1, 1)\nprint_time(time)\ntime_to_int(time) \n```", "```py\n01:01:01 \n```", "```py\n3661 \n```", "```py\ndef int_to_time(seconds):\n    minute, second = divmod(seconds, 60)\n    hour, minute = divmod(minute, 60)\n    return make_time(hour, minute, second) \n```", "```py\ntime = int_to_time(3661)\nprint_time(time) \n```", "```py\n01:01:01 \n```", "```py\ndef add_time(time, hours, minutes, seconds):\n    duration = make_time(hours, minutes, seconds)\n    seconds = time_to_int(time) + time_to_int(duration)\n    return int_to_time(seconds) \n```", "```py\nstart = make_time(9, 40, 0)\nend = add_time(start, 1, 32, 0)\nprint_time(end) \n```", "```py\n11:12:00 \n```", "```py\ntype(start) \n```", "```py\n__main__.Time \n```", "```py\nisinstance(end, Time) \n```", "```py\nTrue \n```", "```py\nhasattr(start, 'hour') \n```", "```py\nTrue \n```", "```py\nvars(start) \n```", "```py\n{'hour': 9, 'minute': 40, 'second': 0} \n```", "```py\nfrom structshape import structshape\n\nt = start, end\nstructshape(t) \n```", "```py\n'tuple of 2 Time' \n```", "```py\n# This cell tells Jupyter to provide detailed debugging information\n# when a runtime error occurs. Run it before working on the exercises.\n\n%xmode Verbose \n```", "```py\nException reporting mode: Verbose \n```", "```py\ndef is_after(t1, t2):\n  \"\"\"Checks whether `t1` is after `t2`.\n\n >>> is_after(make_time(3, 2, 1), make_time(3, 2, 0))\n True\n >>> is_after(make_time(3, 2, 1), make_time(3, 2, 1))\n False\n >>> is_after(make_time(11, 12, 0), make_time(9, 40, 0))\n True\n \"\"\"\n    return None \n```", "```py\nclass Date:\n  \"\"\"Represents a year, month, and day\"\"\" \n```"]