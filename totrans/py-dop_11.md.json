["```py\n$ cat app.py\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World! (from a Docker container)'\n\nif __name__ == '__main__':\n    app.run(debug=True, host='0.0.0.0')\n```", "```py\n$ cat requirements.txt\nFlask==1.0.2\n```", "```py\n$ python app.py\nTraceback (most recent call last):\n  File \"app.py\", line 1, in <module>\n    from flask import Flask\nImportError: No module named flask\n```", "```py\n$ cat Dockerfile\nFROM python:3.7.3-alpine\n\nENV APP_HOME /app\nWORKDIR $APP_HOME\n\nCOPY requirements.txt .\n\nRUN pip install -r requirements.txt\n\nENTRYPOINT [ \"python\" ]\nCMD [ \"app.py\" ]\n```", "```py\n$ docker build -t hello-world-docker .\n```", "```py\n$ docker images hello-world-docker\nREPOSITORY               TAG       IMAGE ID            CREATED          SIZE\nhello-world-docker       latest    dbd84c229002        2 minutes ago    97.7MB\n```", "```py\n$ docker run --rm -d -v `pwd`:/app -p 5000:5000 hello-world-docker\nc879295baa26d9dff1473460bab810cbf6071c53183890232971d1b473910602\n```", "```py\n$ docker ps\nCONTAINER ID  IMAGE                      COMMAND         CREATED\nc879295baa26  hello-world-docker:latest  \"python app.py\" 4 seconds ago\nSTATUS          PORTS                    NAMES\nUp 2 seconds    0.0.0.0:5000->5000/tcp   flamboyant_germain\n```", "```py\n$ docker logs c879295baa26\n * Serving Flask app \"app\" (lazy loading)\n * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 647-161-014\n```", "```py\n$ curl http://127.0.0.1:5000\nHello, World! (from a Docker container)%\n```", "```py\n * Detected change in '/app/app.py', reloading\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 647-161-014\n```", "```py\n$ curl http://127.0.0.1:5000\nHello, World! (from a Docker container with modified code)%\n```", "```py\n$ docker stop c879295baa26\nc879295baa26\n```", "```py\n$ docker rmi hello-world-docker\nUntagged: hello-world-docker:latest\nDeleted:sha256:dbd84c229002950550334224b4b42aba948ce450320a4d8388fa253348126402\nDeleted:sha256:6a8f3db7658520a1654cc6abee8eafb463a72ddc3aa25f35ac0c5b1eccdf75cd\nDeleted:sha256:aee7c3304ef6ff620956850e0b6e6b1a5a5828b58334c1b82b1a1c21afa8651f\nDeleted:sha256:dca8a433d31fa06ab72af63ae23952ff27b702186de8cbea51cdea579f9221e8\nDeleted:sha256:cb9d58c66b63059f39d2e70f05916fe466e5c99af919b425aa602091c943d424\nDeleted:sha256:f0534bdca48bfded3c772c67489f139d1cab72d44a19c5972ed2cd09151564c1\n```", "```py\n$ docker images hello-world-docker\nREPOSITORY               TAG       IMAGE ID            CREATED          SIZE\nhello-world-docker       latest    dbd84c229002        2 minutes ago    97.7MB\n```", "```py\n$ docker tag hello-world-docker hello-world-docker:v1\n```", "```py\n$ docker images hello-world-docker\nREPOSITORY               TAG      IMAGE ID           CREATED          SIZE\nhello-world-docker       latest   dbd84c229002       2 minutes ago    97.7MB\nhello-world-docker       v1       89bd38cb198f       42 seconds ago   97.7MB\n```", "```py\n$ docker tag hello-world-docker:latest griggheo/hello-world-docker:latest\n$ docker tag hello-world-docker:v1 griggheo/hello-world-docker:v1\n```", "```py\n$ docker push griggheo/hello-world-docker:latest\n$ docker push griggheo/hello-world-docker:v1\n```", "```py\n$ sudo yum update -y\n$ sudo amazon-linux-extras install docker\n$ sudo service docker start\n$ sudo usermod -a -G docker ec2-user\n```", "```py\n$ docker run --rm -d -v `pwd`:/app -p 5000:5000 griggheo/hello-world-docker:v1\n\nUnable to find image 'griggheo/hello-world-docker:v1' locally\nv1: Pulling from griggheo/hello-world-docker\n921b31ab772b: Already exists\n1a0c422ed526: Already exists\nec0818a7bbe4: Already exists\nb53197ee35ff: Already exists\n8b25717b4dbf: Already exists\nd997915c3f9c: Pull complete\nf1fd8d3cc5a4: Pull complete\n10b64b1c3b21: Pull complete\nDigest: sha256:af8b74f27a0506a0c4a30255f7ff563c9bf858735baa610fda2a2f638ccfe36d\nStatus: Downloaded newer image for griggheo/hello-world-docker:v1\n9d67dc321ffb49e5e73a455bd80c55c5f09febc4f2d57112303d2b27c4c6da6a\n```", "```py\n[ec2-user@ip-10-0-0-111 hello-world-docker]$ docker ps\nCONTAINER ID  IMAGE                           COMMAND         CREATED\n9d67dc321ffb  griggheo/hello-world-docker:v1  \"python app.py\" 3 minutes ago\nSTATUS        PORTS                    NAMES\nUp 3 minutes  0.0.0.0:5000->5000/tcp   heuristic_roentgen\n\n[ec2-user@ip-10-0-0-111 hello-world-docker]$ docker logs 9d67dc321ffb\n * Serving Flask app \"app\" (lazy loading)\n * Debug mode: on\n * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 306-476-204\n72.203.107.13 - - [19/Aug/2019 04:43:34] \"GET / HTTP/1.1\" 200 -\n72.203.107.13 - - [19/Aug/2019 04:43:35] \"GET /favicon.ico HTTP/1.1\" 404 -\n * Detected change in '/app/app.py', reloading\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 306-476-204\n```", "```py\n$ git clone https://github.com/realpython/flask-by-example.git\n```", "```py\n$ cat docker-compose.yaml\nversion: \"3\"\nservices:\n  db:\n    image: \"postgres:11\"\n    container_name: \"postgres\"\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - dbdata:/var/lib/postgresql/data\nvolumes:\n  dbdata:\n```", "```py\n$ docker-compose up -d db\nCreating postgres ... done\n```", "```py\n$ docker-compose logs db\nCreating volume \"flask-by-example_dbdata\" with default driver\nPulling db (postgres:11)...\n11: Pulling from library/postgres\nCreating postgres ... done\nAttaching to postgres\npostgres | PostgreSQL init process complete; ready for start up.\npostgres |\npostgres | 2019-07-11 21:50:20.987 UTC [1]\nLOG:  listening on IPv4 address \"0.0.0.0\", port 5432\npostgres | 2019-07-11 21:50:20.987 UTC [1]\nLOG:  listening on IPv6 address \"::\", port 5432\npostgres | 2019-07-11 21:50:20.993 UTC [1]\nLOG:  listening on Unix socket \"/var/run/postgresql/.s.PGSQL.5432\"\npostgres | 2019-07-11 21:50:21.009 UTC [51]\nLOG:  database system was shut down at 2019-07-11 21:50:20 UTC\npostgres | 2019-07-11 21:50:21.014 UTC [1]\nLOG:  database system is ready to accept connections\n```", "```py\n$ docker ps\ndCONTAINER ID   IMAGE   COMMAND    CREATED   STATUS   PORTS   NAMES\n83b54ab10099 postgres:11 \"docker-entrypoint.sâ€¦\"  3 minutes ago  Up 3 minutes\n        0.0.0.0:5432->5432/tcp   postgres\n```", "```py\n$ docker volume ls | grep dbdata\nlocal               flask-by-example_dbdata\n```", "```py\n$ docker-compose exec db psql -U postgres\npsql (11.4 (Debian 11.4-1.pgdg90+1))\nType \"help\" for help.\n\npostgres=#\n```", "```py\n$ docker-compose exec db psql -U postgres\npsql (11.4 (Debian 11.4-1.pgdg90+1))\nType \"help\" for help.\n\npostgres=# create database wordcount;\nCREATE DATABASE\n\npostgres=# \\l\n```", "```py\n                            List of databases\n     Name  |  Owner | Encoding |  Collate |   Ctype  |   Access privileges\n-----------+--------+----------+----------+----------+--------------------\n postgres  | postgres | UTF8   | en_US.utf8 | en_US.utf8 |\n template0 | postgres | UTF8   | en_US.utf8 | en_US.utf8 | =c/postgres +\n           |          |        |            |            |postgres=CTc/postgres\n template1 | postgres | UTF8   | en_US.utf8 | en_US.utf8 | =c/postgres +\n           |          |        |            |            |postgres=CTc/postgres\n wordcount| postgres | UTF8| en_US.utf8 | en_US.utf8 |\n(4 rows)\npostgres=# \\q\n```", "```py\n$ docker-compose exec db psql -U postgres wordcount\nwordcount=# CREATE ROLE wordcount_dbadmin;\nCREATE ROLE\nwordcount=# ALTER ROLE wordcount_dbadmin LOGIN;\nALTER ROLE\nwordcount=# ALTER USER wordcount_dbadmin PASSWORD 'MYPASS';\nALTER ROLE\npostgres=# \\q\n```", "```py\n$ cat Dockerfile\nFROM python:3.7.3-alpine\n\nENV APP_HOME /app\nWORKDIR $APP_HOME\n\nCOPY requirements.txt .\n\nRUN \\\n apk add --no-cache postgresql-libs && \\\n apk add --no-cache --virtual .build-deps gcc musl-dev postgresql-dev && \\\n python3 -m pip install -r requirements.txt --no-cache-dir && \\\n apk --purge del .build-deps\n\nCOPY . .\n\nENTRYPOINT [ \"python\" ]\nCMD [\"app.py\"]\n```", "```py\n$ cat docker-compose.yaml\nversion: \"3\"\nservices:\n  migrations:\n    image: \"flask-by-example:v1\"\n    command: \"manage.py db upgrade\"\n    environment:\n      APP_SETTINGS: config.ProductionConfig\n      DATABASE_URL: postgresql://wordcount_dbadmin:$DBPASS@db/wordcount\n    depends_on:\n      - db\n  db:\n    image: \"postgres:11\"\n    container_name: \"postgres\"\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - dbdata:/var/lib/postgresql/data\nvolumes:\n  dbdata:\n```", "```py\n$ gpg --generate-key\npub   rsa2048 2019-07-12 [SC] [expires: 2021-07-11]\n      E14104A0890994B9AC9C9F6782C1FF5E679EFF32\nuid                      pydevops <my.email@gmail.com>\nsub   rsa2048 2019-07-12 [E] [expires: 2021-07-11]\n```", "```py\n$ sops --pgp BBDE7E57E00B98B3F4FBEAF21A1EEF4263996BD0 environment.secrets\n```", "```py\nexport DBPASS=MYPASS\n```", "```py\n$ cat environment.secrets\n{\n\t\"data\": \"ENC[AES256_GCM,data:qlQ5zc7e8KgGmu5goC9WmE7PP8gueBoSsmM=,\n  iv:xG8BHcRfdfLpH9nUlTijBsYrh4TuSdvDqp5F+2Hqw4I=,\n  tag:0OIVAm9O/UYGljGCzZerTQ==,type:str]\",\n\t\"sops\": {\n\t\t\"kms\": null,\n\t\t\"gcp_kms\": null,\n\t\t\"lastmodified\": \"2019-07-12T05:03:45Z\",\n\t\t\"mac\": \"ENC[AES256_GCM,data:wo+zPVbPbAJt9Nl23nYuWs55f68/DZJWj3pc0\n    l8T2d/SbuRF6YCuOXHSHIKs1ZBpSlsjmIrPyYTqI+M4Wf7it7fnNS8b7FnclwmxJjptBWgL\n    T/A1GzIKT1Vrgw9QgJ+prq+Qcrk5dPzhsOTxOoOhGRPsyN8KjkS4sGuXM=,iv:0VvSMgjF6\n    ypcK+1J54fonRoI7c5whmcu3iNV8xLH02k=,\n    tag:YaI7DXvvllvpJ3Talzl8lg==,\n    type:str]\",\n\t\t\"pgp\": [\n\t\t\t{\n\t\t\t\t\"created_at\": \"2019-07-12T05:02:24Z\",\n\t\t\t\t\"enc\": \"-----BEGIN PGP MESSAGE-----\\n\\nhQEMA+3cyc\n        g5b/Hu0OvU5ONr/F0htZM2MZQSXpxoCiO\\nWGB5Czc8FTSlRSwu8/cOx0Ch1FwH+IdLwwL+jd\n        oXVe55myuu/3OKUy7H1w/W2R\\nPI99Biw1m5u3ir3+9tLXmRpLWkz7+nX7FThl9QnOS25\n        NRUSSxS7hNaZMcYjpXW+w\\nM3XeaGStgbJ9OgIp4A8YGigZQVZZFl3fAG3bm2c+TNJcAbl\n        zDpc40fxlR+7LroJI\\njuidzyOEe49k0pq3tzqCnph5wPr3HZ1JeQmsIquf//9D509S5xH\n        Sa9lkz3Y7V4KC\\nefzBiS8pivm55T0s+zPBPB/GWUVlqGaxRhv1TAU=\\n=WA4+\n        \\n-----END PGP MESSAGE-----\\n\",\n\t\t\t\t\"fp\": \"E14104A0890994B9AC9C9F6782C1FF5E679EFF32\"\n\t\t\t}\n\t\t],\n\t\t\"unencrypted_suffix\": \"_unencrypted\",\n\t\t\"version\": \"3.0.5\"\n\t}\n}%\n```", "```py\n$ sops -d environment.secrets\nexport DBPASS=MYPASS\n```", "```py\n$ GPG_TTY=$(tty)\n$ export GPG_TTY\n```", "```py\n$ source <(sops -d environment.secrets); docker-compose up -d migrations\npostgres is up-to-date\nRecreating flask-by-example_migrations_1 ... done\n```", "```py\n$ docker-compose exec db psql -U postgres wordcount\npsql (11.4 (Debian 11.4-1.pgdg90+1))\nType \"help\" for help.\n\nwordcount=# \\dt\n```", "```py\n                  List of relations\n Schema |      Name       | Type  |       Owner\n--------+-----------------+-------+-------------------\n public | alembic_version | table | wordcount_dbadmin\n public | results         | table | wordcount_dbadmin\n(2 rows)\n\nwordcount=# \\q\n```", "```py\n  redis:\n    image: \"redis:alpine\"\n    ports:\n      - \"6379:6379\"\n```", "```py\n$ docker-compose up -d redis\nStarting flask-by-example_redis_1 ... done\n```", "```py\n$ docker ps\nCONTAINER ID   IMAGE   COMMAND    CREATED   STATUS   PORTS   NAMES\na1555cc372d6   redis:alpine \"docker-entrypoint.sâ€¦\" 3 seconds ago  Up 1 second\n0.0.0.0:6379->6379/tcp   flask-by-example_redis_1\n83b54ab10099   postgres:11  \"docker-entrypoint.sâ€¦\" 22 hours ago   Up 16 hours\n0.0.0.0:5432->5432/tcp   postgres\n```", "```py\n$ docker-compose logs redis\nAttaching to flask-by-example_redis_1\n1:C 12 Jul 2019 20:17:12.966 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\n1:C 12 Jul 2019 20:17:12.966 # Redis version=5.0.5, bits=64, commit=00000000,\nmodified=0, pid=1, just started\n1:C 12 Jul 2019 20:17:12.966 # Warning: no config file specified, using the\ndefault config. In order to specify a config file use\nredis-server /path/to/redis.conf\n1:M 12 Jul 2019 20:17:12.967 * Running mode=standalone, port=6379.\n1:M 12 Jul 2019 20:17:12.967 # WARNING: The TCP backlog setting of 511 cannot\nbe enforced because /proc/sys/net/core/somaxconn\nis set to the lower value of 128.\n1:M 12 Jul 2019 20:17:12.967 # Server initialized\n1:M 12 Jul 2019 20:17:12.967 * Ready to accept connections\n```", "```py\n  worker:\n    image: \"flask-by-example:v1\"\n    command: \"worker.py\"\n    environment:\n      APP_SETTINGS: config.ProductionConfig\n      DATABASE_URL: postgresql://wordcount_dbadmin:$DBPASS@db/wordcount\n      REDISTOGO_URL: redis://redis:6379\n    depends_on:\n      - db\n      - redis\n```", "```py\n$ docker-compose up -d worker\nflask-by-example_redis_1 is up-to-date\nStarting flask-by-example_worker_1 ... done\n```", "```py\n$ docker ps\nCONTAINER ID   IMAGE   COMMAND    CREATED   STATUS   PORTS   NAMES\n72327ab33073  flask-by-example \"python worker.py\"     8 minutes ago\nUp 14 seconds                             flask-by-example_worker_1\nb11b03a5bcc3  redis:alpine     \"docker-entrypoint.sâ€¦\" 15 minutes ago\nUp About a minute  0.0.0.0:6379->6379/tc  flask-by-example_redis_1\n83b54ab10099  postgres:11      \"docker-entrypoint.sâ€¦\"  23 hours ago\nUp 17 hours        0.0.0.0:5432->5432/tcp postgres\n```", "```py\n$ docker-compose logs worker\nAttaching to flask-by-example_worker_1\n20:46:34 RQ worker 'rq:worker:a66ca38275a14cac86c9b353e946a72e' started,\nversion 1.0\n20:46:34 *** Listening on default...\n20:46:34 Cleaning registries for queue: default\n```", "```py\n  app:\n    image: \"flask-by-example:v1\"\n    command: \"manage.py runserver --host=0.0.0.0\"\n    ports:\n      - \"5000:5000\"\n    environment:\n      APP_SETTINGS: config.ProductionConfig\n      DATABASE_URL: postgresql://wordcount_dbadmin:$DBPASS@db/wordcount\n      REDISTOGO_URL: redis://redis:6379\n    depends_on:\n      - db\n      - redis\n```", "```py\nsource <(sops -d environment.secrets); docker-compose up -d app\npostgres is up-to-date\nRecreating flask-by-example_app_1 ... done\n```", "```py\n$ docker ps\nCONTAINER ID   IMAGE   COMMAND    CREATED   STATUS   PORTS   NAMES\nd99168a152f1   flask-by-example \"python app.py\"  3 seconds ago\nUp 2 seconds    0.0.0.0:5000->5000/tcp   flask-by-example_app_1\n72327ab33073   flask-by-example \"python worker.py\" 16 minutes ago\nUp 7 minutes                             flask-by-example_worker_1\nb11b03a5bcc3   redis:alpine     \"docker-entrypoint.sâ€¦\" 23 minutes ago\nUp 9 minutes    0.0.0.0:6379->6379/tcp   flask-by-example_redis_1\n83b54ab10099   postgres:11      \"docker-entrypoint.sâ€¦\"  23 hours ago\nUp 17 hours     0.0.0.0:5432->5432/tcp   postgres\n```", "```py\n$ docker-compose logs app\nAttaching to flask-by-example_app_1\napp_1         |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)\n```", "```py\n$ docker-compose logs\nAttaching to flask-by-example_app_1,\nflask-by-example_worker_1,\nflask-by-example_migrations_1,\nflask-by-example_redis_1,\npostgres\n1:C 12 Jul 2019 20:17:12.966 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\n1:C 12 Jul 2019 20:17:12.966 # Redis version=5.0.5, bits=64, commit=00000000,\nmodified=0, pid=1, just started\n1:C 12 Jul 2019 20:17:12.966 # Warning: no config file specified, using the\ndefault config. In order to specify a config file use\nredis-server /path/to/redis.conf\n1:M 12 Jul 2019 20:17:12.967 * Running mode=standalone, port=6379.\n1:M 12 Jul 2019 20:17:12.967 # WARNING: The TCP backlog setting of 511 cannot\nbe enforced because /proc/sys/net/core/somaxconn\nis set to the lower value of 128.\n1:M 12 Jul 2019 20:17:12.967 # Server initialized\n1:M 12 Jul 2019 20:17:12.967 * Ready to accept connections\napp_1         |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)\npostgres      | 2019-07-12 22:15:19.193 UTC [1]\nLOG:  listening on IPv4 address \"0.0.0.0\", port 5432\npostgres      | 2019-07-12 22:15:19.194 UTC [1]\nLOG:  listening on IPv6 address \"::\", port 5432\npostgres      | 2019-07-12 22:15:19.199 UTC [1]\nLOG:  listening on Unix socket \"/var/run/postgresql/.s.PGSQL.5432\"\npostgres      | 2019-07-12 22:15:19.214 UTC [22]\nLOG:  database system was shut down at 2019-07-12 22:15:09 UTC\npostgres      | 2019-07-12 22:15:19.225 UTC [1]\nLOG:  database system is ready to accept connections\nmigrations_1  | INFO [alembic.runtime.migration] Context impl PostgresqlImpl.\nmigrations_1  | INFO [alembic.runtime.migration] Will assume transactional DDL.\nworker_1      | 22:15:20\nRQ worker 'rq:worker:2edb6a54f30a4aae8a8ca2f4a9850303' started, version 1.0\nworker_1      | 22:15:20 *** Listening on default...\nworker_1      | 22:15:20 Cleaning registries for queue: default\n```", "```py\n$ docker tag flask-by-example:v1 griggheo/flask-by-example:v1\n$ docker push griggheo/flask-by-example:v1\n```", "```py\n$ cat docker-compose.yaml\nversion: \"3\"\nservices:\n  app:\n    image: \"griggheo/flask-by-example:v1\"\n    command: \"manage.py runserver --host=0.0.0.0\"\n    ports:\n      - \"5000:5000\"\n    environment:\n      APP_SETTINGS: config.ProductionConfig\n      DATABASE_URL: postgresql://wordcount_dbadmin:$DBPASS@db/wordcount\n      REDISTOGO_URL: redis://redis:6379\n    depends_on:\n      - db\n      - redis\n  worker:\n    image: \"griggheo/flask-by-example:v1\"\n    command: \"worker.py\"\n    environment:\n      APP_SETTINGS: config.ProductionConfig\n      DATABASE_URL: postgresql://wordcount_dbadmin:$DBPASS@db/wordcount\n      REDISTOGO_URL: redis://redis:6379\n    depends_on:\n      - db\n      - redis\n  migrations:\n    image: \"griggheo/flask-by-example:v1\"\n    command: \"manage.py db upgrade\"\n    environment:\n      APP_SETTINGS: config.ProductionConfig\n      DATABASE_URL: postgresql://wordcount_dbadmin:$DBPASS@db/wordcount\n    depends_on:\n      - db\n  db:\n    image: \"postgres:11\"\n    container_name: \"postgres\"\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - dbdata:/var/lib/postgresql/data\n  redis:\n    image: \"redis:alpine\"\n    ports:\n      - \"6379:6379\"\nvolumes:\n  dbdata:\n```", "```py\n$ docker-compose down\nStopping flask-by-example_worker_1 ... done\nStopping flask-by-example_app_1    ... done\nStopping flask-by-example_redis_1  ... done\nStopping postgres                  ... done\nRemoving flask-by-example_worker_1     ... done\nRemoving flask-by-example_app_1        ... done\nRemoving flask-by-example_migrations_1 ... done\nRemoving flask-by-example_redis_1      ... done\nRemoving postgres                      ... done\nRemoving network flask-by-example_default\n\n$ source <(sops -d environment.secrets); docker-compose up -d\nCreating network \"flask-by-example_default\" with the default driver\nCreating flask-by-example_redis_1      ... done\nCreating postgres                 ... done\nCreating flask-by-example_migrations_1 ... done\nCreating flask-by-example_worker_1     ... done\nCreating flask-by-example_app_1        ... done\n```", "```py\n$ sudo apt-get update\n$ sudo apt-get remove docker docker-engine docker.io containerd runc\n$ sudo apt-get install \\\n  apt-transport-https \\\n  ca-certificates \\\n  curl \\\n  gnupg-agent \\\n  software-properties-common\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n$ sudo add-apt-repository \\\n  \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) \\\n  stable\"\n$ sudo apt-get update\n$ sudo apt-get install docker-ce docker-ce-cli containerd.io\n$ sudo usermod -a -G docker ubuntu\n\n# download docker-compose\n$ sudo curl -L \\\n\"https://github.com/docker/compose/releases/download/1.24.1/docker-compose-\\\n$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n$ sudo chmod +x /usr/local/bin/docker-compose\n```", "```py\n$ docker-compose up -d db\nStarting postgres ...\nStarting postgres ... done\n\n$ docker ps\nCONTAINER ID   IMAGE   COMMAND    CREATED   STATUS   PORTS   NAMES\n49fe88efdb45 postgres:11 \"docker-entrypoint.sâ€¦\" 29 seconds ago\n  Up 3 seconds        0.0.0.0:5432->5432/tcp   postgres\n```", "```py\n$ docker-compose exec db psql -U postgres\npsql (11.4 (Debian 11.4-1.pgdg90+1))\nType \"help\" for help.\n\npostgres=# create database wordcount;\nCREATE DATABASE\npostgres=# \\q\n\n$ docker exec -it 49fe88efdb45 psql -U postgres wordcount\npsql (11.4 (Debian 11.4-1.pgdg90+1))\nType \"help\" for help.\n\nwordcount=# CREATE ROLE wordcount_dbadmin;\nCREATE ROLE\nwordcount=# ALTER ROLE wordcount_dbadmin LOGIN;\nALTER ROLE\nwordcount=# ALTER USER wordcount_dbadmin PASSWORD 'MYPASS';\nALTER ROLE\nwordcount=# \\q\n```", "```py\n    $ docker login\n    ```", "```py\n    $ export DOCKER_PASS=MYPASS\n    ```", "```py\n$ docker-compose up -d\nPulling worker (griggheo/flask-by-example:v1)...\nv1: Pulling from griggheo/flask-by-example\n921b31ab772b: Already exists\n1a0c422ed526: Already exists\nec0818a7bbe4: Already exists\nb53197ee35ff: Already exists\n8b25717b4dbf: Already exists\n9be5e85cacbb: Pull complete\nbd62f980b08d: Pull complete\n9a89f908ad0a: Pull complete\nd787e00a01aa: Pull complete\nDigest: sha256:4fc554da6157b394b4a012943b649ec66c999b2acccb839562e89e34b7180e3e\nStatus: Downloaded newer image for griggheo/flask-by-example:v1\nCreating fbe_redis_1      ... done\nCreating postgres    ... done\nCreating fbe_migrations_1 ... done\nCreating fbe_app_1        ... done\nCreating fbe_worker_1     ... done\n\n$ docker ps\nCONTAINER ID   IMAGE   COMMAND    CREATED   STATUS   PORTS   NAMES\nf65fe9631d44  griggheo/flask-by-example:v1 \"python3 manage.py râ€¦\" 5 seconds ago\nUp 2 seconds        0.0.0.0:5000->5000/tcp   fbe_app_1\n71fc0b24bce3  griggheo/flask-by-example:v1 \"python3 worker.py\"    5 seconds ago\nUp 2 seconds                                 fbe_worker_1\na66d75a20a2d  redis:alpine     \"docker-entrypoint.sâ€¦\"   7 seconds ago\nUp 5 seconds        0.0.0.0:6379->6379/tcp   fbe_redis_1\n56ff97067637  postgres:11      \"docker-entrypoint.sâ€¦\"   7 seconds ago\nUp 5 seconds        0.0.0.0:5432->5432/tcp   postgres\n```"]