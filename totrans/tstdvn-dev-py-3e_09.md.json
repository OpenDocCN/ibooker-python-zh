["```py\n  File \"...goat-book/functional_tests.py\", line 40, in\ntest_can_start_a_todo_list\n[...]\nAssertionError: False is not true : New to-do item did not appear in table\n```", "```py\n    <h1>Your To-Do list</h1>\n    <form method=\"POST\">\n      <input name=\"item_text\" id=\"id_new_item\" placeholder=\"Enter a to-do item\" />\n    </form>\n    <table id=\"id_list_table\">\n```", "```py\n$ python functional_tests.py\n[...]\nTraceback (most recent call last):\n  File \"...goat-book/functional_tests.py\", line 38, in\ntest_can_start_a_todo_list\n    table = self.browser.find_element(By.ID, \"id_list_table\")\n[...]\nselenium.common.exceptions.NoSuchElementException: Message: Unable to locate\nelement: [id=\"id_list_table\"]\n```", "```py\n        # When she hits enter, the page updates, and now the page lists\n        # \"1: Buy peacock feathers\" as an item in a to-do list table\n        inputbox.send_keys(Keys.ENTER)\n        time.sleep(1)\n\n        table = self.browser.find_element(By.ID, \"id_list_table\")  ![1](assets/1.png)\n        rows = table.find_elements(By.TAG_NAME, \"tr\")\n        self.assertTrue(\n            any(row.text == \"1: Buy peacock feathers\" for row in rows),\n            \"New to-do item did not appear in table\",\n        )\n```", "```py\n    # When she hits enter, the page updates, and now the page lists\n    # \"1: Buy peacock feathers\" as an item in a to-do list table\n    inputbox.send_keys(Keys.ENTER)\n    time.sleep(10)\n\n    table = self.browser.find_element(By.ID, \"id_list_table\")\n```", "```py\n  <form method=\"POST\">\n    <input name=\"item_text\" id=\"id_new_item\" placeholder=\"Enter a to-do item\" />\n    {% csrf_token %}\n  </form>\n```", "```py\n  File \"...goat-book/functional_tests.py\", line 40, in\ntest_can_start_a_todo_list\n[...]\nAssertionError: False is not true : New to-do item did not appear in table\n```", "```py\n    # \"1: Buy peacock feathers\" as an item in a to-do list table\n    inputbox.send_keys(Keys.ENTER)\n    time.sleep(1)\n\n    table = self.browser.find_element(By.ID, \"id_list_table\")\n```", "```py\nclass HomePageTest(TestCase):\n    def test_uses_home_template(self):\n        response = self.client.get(\"/\")\n        self.assertTemplateUsed(response, \"home.xhtml\")\n\n    def test_can_save_a_POST_request(self):\n        response = self.client.post(\"/\", data={\"item_text\": \"A new list item\"})\n        self.assertContains(response, \"A new list item\")\n```", "```py\n$ python manage.py test\n[...]\nAssertionError: False is not true : Couldn't find 'A new list item' in response\n```", "```py\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\n\ndef home_page(request):\n    if request.method == \"POST\":\n        return HttpResponse(\"You submitted: \" + request.POST[\"item_text\"])\n    return render(request, \"home.xhtml\")\n```", "```py\n<body>\n  <h1>Your To-Do list</h1>\n  <form method=\"POST\">\n    <input name=\"item_text\" id=\"id_new_item\" placeholder=\"Enter a to-do item\" /> {% csrf_token %} </form>\n  <table id=\"id_list_table\">\n    <tr><td>{{ new_item_text }}</td></tr>  ![1](assets/1.png)\n  </table>\n</body>\n```", "```py\n    def test_can_save_a_POST_request(self):\n        response = self.client.post(\"/\", data={\"item_text\": \"A new list item\"})\n        self.assertContains(response, \"A new list item\")\n        self.assertTemplateUsed(response, \"home.xhtml\")\n```", "```py\nAssertionError: No templates used to render the response\n```", "```py\ndef home_page(request):\n    return render(\n        request,\n        \"home.xhtml\",\n        {\"new_item_text\": request.POST[\"item_text\"]},\n    )\n```", "```py\nERROR: test_uses_home_template\n(lists.tests.HomePageTest.test_uses_home_template)\n\n[...]\n    {\"new_item_text\": request.POST[\"item_text\"]},\n                      ~~~~~~~~~~~~^^^^^^^^^^^^^\n[...]\ndjango.utils.datastructures.MultiValueDictKeyError: 'item_text'\n```", "```py\ndef home_page(request):\n    return render(\n        request,\n        \"home.xhtml\",\n        {\"new_item_text\": request.POST.get(\"item_text\", \"\")},\n    )\n```", "```py\nAssertionError: False is not true : New to-do item did not appear in table\n```", "```py\nself.assertTrue(\n    any(row.text == \"1: Buy peacock feathers\" for row in rows),\n    f\"New to-do item did not appear in table. Contents were:\\n{table.text}\",\n)\n```", "```py\nAssertionError: False is not true : New to-do item did not appear in table.\nContents were:\nBuy peacock feathers\n```", "```py\n    self.assertIn(\"1: Buy peacock feathers\", [row.text for row in rows])\n```", "```py\n    self.assertIn(\"1: Buy peacock feathers\", [row.text for row in rows])\nAssertionError: '1: Buy peacock feathers' not found in ['Buy peacock feathers']\n```", "```py\n    <tr><td>1: {{ new_item_text }}</td></tr>\n```", "```py\n    # There is still a text box inviting her to add another item.\n    # She enters \"Use peacock feathers to make a fly\"\n    # (Edith is very methodical)\n    inputbox = self.browser.find_element(By.ID, \"id_new_item\")\n    inputbox.send_keys(\"Use peacock feathers to make a fly\")\n    inputbox.send_keys(Keys.ENTER)\n    time.sleep(1)\n\n    # The page updates again, and now shows both items on her list\n    table = self.browser.find_element(By.ID, \"id_list_table\")\n    rows = table.find_elements(By.TAG_NAME, \"tr\")\n    self.assertIn(\n        \"1: Buy peacock feathers\",\n        [row.text for row in rows],\n    )\n    self.assertIn(\n        \"2: Use peacock feathers to make a fly\",\n        [row.text for row in rows],\n    )\n\n    # Satisfied, she goes back to sleep\n```", "```py\nAssertionError: '1: Buy peacock feathers' not found in ['1: Use peacock\nfeathers to make a fly']\n```", "```py\n$ git diff\n# should show changes to functional_tests.py, home.xhtml,\n# tests.py and views.py\n$ git commit -a\n```", "```py\n    def tearDown(self):\n        self.browser.quit()\n\n    def check_for_row_in_list_table(self, row_text):\n        table = self.browser.find_element(By.ID, \"id_list_table\")\n        rows = table.find_elements(By.TAG_NAME, \"tr\")\n        self.assertIn(row_text, [row.text for row in rows])\n\n    def test_can_start_a_todo_list(self):\n        [...]\n```", "```py\n    # When she hits enter, the page updates, and now the page lists\n    # \"1: Buy peacock feathers\" as an item in a to-do list table\n    inputbox.send_keys(Keys.ENTER)\n    time.sleep(1)\n    self.check_for_row_in_list_table(\"1: Buy peacock feathers\")\n\n    # There is still a text box inviting her to add another item.\n    # She enters \"Use peacock feathers to make a fly\"\n    # (Edith is very methodical)\n    inputbox = self.browser.find_element(By.ID, \"id_new_item\")\n    inputbox.send_keys(\"Use peacock feathers to make a fly\")\n    inputbox.send_keys(Keys.ENTER)\n    time.sleep(1)\n\n    # The page updates again, and now shows both items on her list\n    self.check_for_row_in_list_table(\"1: Buy peacock feathers\")\n    self.check_for_row_in_list_table(\"2: Use peacock feathers to make a fly\")\n\n    # Satisfied, she goes back to sleep\n```", "```py\nAssertionError: '1: Buy peacock feathers' not found in ['1: Use peacock\nfeathers to make a fly']\n```", "```py\n$ git diff # check the changes to functional_tests.py\n$ git commit -a\n```", "```py\nfrom django.test import TestCase\nfrom lists.models import Item\n\nclass HomePageTest(TestCase):\n    [...]\n\nclass ItemModelTest(TestCase):\n    def test_saving_and_retrieving_items(self):\n        first_item = Item()\n        first_item.text = \"The first (ever) list item\"\n        first_item.save()\n\n        second_item = Item()\n        second_item.text = \"Item the second\"\n        second_item.save()\n\n        saved_items = Item.objects.all()\n        self.assertEqual(saved_items.count(), 2)\n\n        first_saved_item = saved_items[0]\n        second_saved_item = saved_items[1]\n        self.assertEqual(first_saved_item.text, \"The first (ever) list item\")\n        self.assertEqual(second_saved_item.text, \"Item the second\")\n```", "```py\nImportError: cannot import name 'Item' from 'lists.models'\n```", "```py\nfrom django.db import models\n\n# Create your models here.\nclass Item:\n    pass\n```", "```py\n[...]\n  File \"...goat-book/lists/tests.py\", line 20, in\ntest_saving_and_retrieving_items\n    first_item.save()\n    ^^^^^^^^^^^^^^^\nAttributeError: 'Item' object has no attribute 'save'\n```", "```py\nfrom django.db import models\n\nclass Item(models.Model):\n    pass\n```", "```py\ndjango.db.utils.OperationalError: no such table: lists_item\n```", "```py\n$ python manage.py makemigrations\nMigrations for 'lists':\n  lists/migrations/0001_initial.py\n    - Create model Item\n$ ls lists/migrations\n0001_initial.py  __init__.py  __pycache__\n```", "```py\n$ python manage.py test\n[...]\n    self.assertEqual(first_saved_item.text, \"The first (ever) list item\")\n                     ^^^^^^^^^^^^^^^^^^^^^\nAttributeError: 'Item' object has no attribute 'text'\n```", "```py\nclass Item(models.Model):\n    text = models.TextField()\n```", "```py\ndjango.db.utils.OperationalError: table lists_item has no column named text\n```", "```py\n$ python manage.py makemigrations\nIt is impossible to add a non-nullable field 'text' to item without specifying\na default. This is because the database needs something to populate existing\nrows.\nPlease select a fix:\n 1) Provide a one-off default now (will be set on all existing rows with a null\nvalue for this column)\n 2) Quit and manually define a default value in models.py.\nSelect an option:2\n```", "```py\nclass Item(models.Model):\n    text = models.TextField(default=\"\")\n```", "```py\n$ python manage.py makemigrations\nMigrations for 'lists':\n  lists/migrations/0002_item_text.py\n    - Add field text to item\n```", "```py\n$ python manage.py test\n[...]\n\nRan 3 tests in 0.010s\nOK\n```", "```py\n$ git status # see tests.py, models.py, and 2 untracked migrations\n$ git diff # review changes to tests.py and models.py\n$ git add lists\n$ git commit -m \"Model for list Items and associated migration\"\n```", "```py\ndef test_can_save_a_POST_request(self):\n    response = self.client.post(\"/\", data={\"item_text\": \"A new list item\"})\n\n    self.assertEqual(Item.objects.count(), 1)  ![1](assets/1.png)\n    new_item = Item.objects.first()  ![2](assets/2.png)\n    self.assertEqual(new_item.text, \"A new list item\")  ![3](assets/3.png)\n\n    self.assertContains(response, \"A new list item\")\n    self.assertTemplateUsed(response, \"home.xhtml\")\n```", "```py\n    self.assertEqual(Item.objects.count(), 1)\nAssertionError: 0 != 1\n```", "```py\nfrom django.shortcuts import render\nfrom lists.models import Item\n\ndef home_page(request):\n    item = Item()\n    item.text = request.POST.get(\"item_text\", \"\")\n    item.save()\n\n    return render(\n        request,\n        \"home.xhtml\",\n        {\"new_item_text\": request.POST.get(\"item_text\", \"\")},\n    )\n```", "```py\nRan 3 tests in 0.010s\n\nOK\n```", "```py\nclass HomePageTest(TestCase):\n    def test_uses_home_template(self):\n        [...]\n\n    def test_can_save_a_POST_request(self):\n        [...]\n\n    def test_only_saves_items_when_necessary(self):\n        self.client.get(\"/\")\n        self.assertEqual(Item.objects.count(), 0)\n```", "```py\ndef home_page(request):\n    if request.method == \"POST\":\n        item = Item()\n        item.text = request.POST[\"item_text\"]\n        item.save()\n\n    return render(\n        request,\n        \"home.xhtml\",\n        {\"new_item_text\": request.POST.get(\"item_text\", \"\")},\n    )\n```", "```py\nRan 4 tests in 0.010s\n\nOK\n```", "```py\n    def test_can_save_a_POST_request(self):\n        response = self.client.post(\"/\", data={\"item_text\": \"A new list item\"})\n\n        self.assertEqual(Item.objects.count(), 1)\n        new_item = Item.objects.first()\n        self.assertEqual(new_item.text, \"A new list item\")\n\n        self.assertRedirects(response, \"/\")  ![1](assets/1.png)\n\n    def test_only_saves_items_when_necessary(self):\n        [...]\n```", "```py\nAssertionError: 200 != 302 : Response didn't redirect as expected: Response\ncode was 200 (expected 302)\n```", "```py\nfrom django.shortcuts import redirect, render\nfrom lists.models import Item\n\ndef home_page(request):\n    if request.method == \"POST\":\n        item = Item()\n        item.text = request.POST[\"item_text\"]\n        item.save()\n        return redirect(\"/\")\n\n    return render(\n        request,\n        \"home.xhtml\",\n        {\"new_item_text\": request.POST.get(\"item_text\", \"\")},\n    )\n```", "```py\nRan 4 tests in 0.010s\n\nOK\n```", "```py\ndef home_page(request):\n    if request.method == \"POST\":\n        item = Item()  ![1](assets/1.png)\n        item.text = request.POST[\"item_text\"]  ![1](assets/1.png)\n        item.save()  ![1](assets/1.png)\n        return redirect(\"/\")\n\n    return render(\n        request,\n        \"home.xhtml\",\n        {\"new_item_text\": request.POST.get(\"item_text\", \"\")},  ![2](assets/2.png)\n    )\n```", "```py\ndef home_page(request):\n    if request.method == \"POST\":\n        Item.objects.create(text=request.POST[\"item_text\"])\n        return redirect(\"/\")\n\n    return render(\n        request,\n        \"home.xhtml\",\n        {\"new_item_text\": request.POST.get(\"item_text\", \"\")},\n    )\n```", "```py\n    def test_can_save_a_POST_request(self):\n        self.client.post(\"/\", data={\"item_text\": \"A new list item\"})\n        self.assertEqual(Item.objects.count(), 1)\n        new_item = Item.objects.first()\n        self.assertEqual(new_item.text, \"A new list item\")\n\n    def test_redirects_after_POST(self):\n        response = self.client.post(\"/\", data={\"item_text\": \"A new list item\"})\n        self.assertRedirects(response, \"/\")\n```", "```py\nRan 5 tests in 0.010s\n\nOK\n```", "```py\nclass HomePageTest(TestCase):\n    def test_uses_home_template(self):\n        [...]\n\n    def test_displays_all_list_items(self):\n        Item.objects.create(text=\"itemey 1\")\n        Item.objects.create(text=\"itemey 2\")\n        response = self.client.get(\"/\")\n        self.assertContains(response, \"itemey 1\")\n        self.assertContains(response, \"itemey 2\")\n\n    def test_can_save_a_POST_request(self):\n        [...]\n```", "```py\nAssertionError: False is not true : Couldn't find 'itemey 1' in response\n```", "```py\n<table id=\"id_list_table\">\n  {% for item in items %}\n    <tr><td>1: {{ item.text }}</td></tr>\n  {% endfor %}\n</table>\n```", "```py\ndef home_page(request):\n    if request.method == \"POST\":\n        Item.objects.create(text=request.POST[\"item_text\"])\n        return redirect(\"/\")\n\n    items = Item.objects.all()\n    return render(request, \"home.xhtml\", {\"items\": items})\n```", "```py\n$ python functional_tests.py\n[...]\nAssertionError: 'To-Do' not found in 'OperationalError at /'\n```", "```py\n[...]\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n```", "```py\n$ python manage.py migrate\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, lists, sessions\nRunning migrations:\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying contenttypes.0002_remove_content_type_name... OK\n  Applying auth.0002_alter_permission_name_max_length... OK\n  Applying auth.0003_alter_user_email_max_length... OK\n  Applying auth.0004_alter_user_username_opts... OK\n  Applying auth.0005_alter_user_last_login_null... OK\n  Applying auth.0006_require_contenttypes_0002... OK\n  Applying auth.0007_alter_validators_add_error_messages... OK\n  Applying auth.0008_alter_user_username_max_length... OK\n  Applying auth.0009_alter_user_last_name_max_length... OK\n  Applying auth.0010_alter_group_name_max_length... OK\n  Applying auth.0011_update_proxy_permissions... OK\n  Applying auth.0012_alter_user_first_name_max_length... OK\n  Applying lists.0001_initial... OK\n  Applying lists.0002_item_text... OK\n  Applying sessions.0001_initial... OK\n```", "```py\nAssertionError: '2: Use peacock feathers to make a fly' not found in ['1: Buy\npeacock feathers', '1: Use peacock feathers to make a fly']\n```", "```py\n  {% for item in items %}\n    <tr><td>{{ forloop.counter }}: {{ item.text }}</td></tr>\n  {% endfor %}\n```", "```py\n$ python functional_tests.py\n.\n ---------------------------------------------------------------------\nRan 1 test in 5.036s\n\nOK\n```", "```py\n1: Buy peacock feathers\n2: Use peacock feathers to make a fly\n3: Buy peacock feathers\n4: Use peacock feathers to make a fly\n5: Buy peacock feathers\n6: Use peacock feathers to make a fly\n```", "```py\n$ rm db.sqlite3\n$ python manage.py migrate --noinput\n```", "```py\n$ git add lists\n$ git commit -m \"Redirect after POST, and show all items in template\"\n```"]