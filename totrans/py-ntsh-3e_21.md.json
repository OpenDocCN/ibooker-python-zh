["```py\n*`g`*.flatten(*`m`*, unixfrom=`False`)\n```", "```py\n*`outfp`*.write(*`m`*.as_string(*`unixfrom`*))\n```", "```py\n*`m`* = MIMEBase(*`mainsub`*, ***`params`*)\n```", "```py\n*`m`* = Message()\n*`m`*.add_header('Content-Type', f'{*`main`*}/{*`sub`*}', \n             ***`params`*)\n*`m`*.add_header('Mime-Version', '1.0')\n```", "```py\n`import` pathlib, email\n`def` unpack_mail(mail_file, dest_dir):\n    *`'''Given file object mail_file, open for reading, and dest_dir,`*\n       *`a string that is a path to an existing, writable directory,`*\n       *`unpack each part of the mail message from mail_file to a`*\n       *`file within dest_dir.`*\n    *`'''`*\n    dest_dir_path = pathlib.Path(dest_dir)\n    `with` mail_file:\n        msg = email.message_from_file(mail_file)\n    `for` part_number, part `in` enumerate(msg.walk()):\n        `if` part.get_content_maintype() == 'multipart':\n            *`# we get each specific part later in the loop,`*\n            *`# so, nothing to do for the 'multipart' itself`*\n `continue`\n        dest = part.get_filename()\n        `if` dest `is` `None`: dest = part.get_param('name')\n        `if` dest `is` `None`: dest = f'part-{part_number}'\n        *`# in real life, make sure that dest is a reasonable filename`*\n        *`# for your OS; otherwise, mangle that name until it is`*\n        part_payload = part.get_payload(decode=`True`)\n        (dest_dir_path / dest).write_text(part_payload)\n```", "```py\n`def` pack_mail(source_dir, **headers):\n     *`'''Given source_dir, a string that is a path to an existing,`*\n        *`readable directory, and arbitrary header name/value pairs`*\n        *`passed in as named arguments, packs all the files directly`*\n        *`under source_dir (assumed to be plain text files) into a`*\n        *`mail message returned as a MIME-formatted string.`*\n     *`'''`*\n     source_dir_path = pathlib.Path(source_dir)\n     msg = email.message.Message()\n     `for` name, value `in` headers.items():\n         msg[name] = value\n     msg['Content-type'] = 'multipart/mixed'\n     filepaths = [path for path in source_dir_path.iterdir() \n                  if path.is_file()]\n     `for` filepath `in` filepaths:\n         m = email.message.Message()\n         m.add_header('Content-type', 'text/plain', name=filename)\n         m.set_payload(filepath.read_text())\n         msg.attach(m)\n     `return` msg.as_string()\n```"]