- en: 'Chapter 1\. Why Python?: *Similar But Different*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-01-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Python starts counting from zero, which should sound familiar.** In fact,
    Python has a lot in **common** with other programming languages. There’s **variables**,
    **loops**, **conditionals**, **functions**, and the like. In this, our opening
    chapter, we take you on a **high-level** **whistle-stop** **tour** of Python’s
    basics, introducing the language without getting too much into the weeds. You’ll
    learn how to **create** and **run** code within VS Code and Jupyter Notebook.
    You’ll see how lots of programming functionality comes **built-in** to Python,
    which you’ll **leverage** to get your job done. You’ll also learn that although
    Python shares a lot of the ideas with other programming languages, how they manifest
    in your Python code can be, well, **different**. Now, don’t get the wrong idea
    here: we’re talking different **good**, not different *bad*. Read on to learn
    more…'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-04-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**For sure. But, that’s not all.**'
  prefs: []
  type: TYPE_NORMAL
- en: As the interview with Python confirms, there’s a bunch of reasons for Python’s
    popularity. We’ve listed the takeaways we gleaned from the interview at the bottom
    of this page.
  prefs: []
  type: TYPE_NORMAL
- en: There are, of course, other reasons to consider Python as your next favorite
    programming language, but our list is enough to be going on with for now.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s spend some time considering these takeaways in more detail. Once you’ve
    surveyed our list, grab a pencil – yes, a *pencil* – and meet us at the top of
    the next page!
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/1-circle.png) **Python code is easy to read.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/2-circle.png) **Python comes with a Standard Library.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/3-circle.png) **Python has practical, powerful, and generic
    built-in functions (BIFs).**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/4-circle.png) **Python comes with built-in data structures.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/5-circle.png) **Python has the Python Package Index (PyPI).**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/6-circle.png) **Python doesn’t take itself too seriously.**'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Don’t underestimate the importance of this last one.**'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready to run some code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There’s a tiny bit of house-keeping to work through *before* you get run any
    code.
  prefs: []
  type: TYPE_NORMAL
- en: To help keep things organized, let’s create a folder on your computer called
    `Learning`. You can put this folder anywhere on your hard-drive, so long as you
    remember *where* you put it, as you are going to use it *all the time*.
  prefs: []
  type: TYPE_NORMAL
- en: With your `Learning` folder created, start VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-07-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Don’t feel bad if you skipped the Intro. You aren’t the first to do this,
    and won’t be the last. ![Image](assets/smile.png)**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-07-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Each time you work with VS Code in this book, you’ll open your `Learning` folder
    as needed. **Do this now before continuing**.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for your first Jupyter experience
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OK. You’re running VS Code, and you’ve opened your `Learning` folder. Let’s
    create a new notebook by first selecting the **File** menu, then selecting the
    **New File…** menu option. You’ll be presented with three choices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-08-01.png)![Image](assets/ch00-08-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'VS Code creates and opens a new, *untitled* notebook called `Untitled-1.ipynb`,
    which appears on screen, and looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-08-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Drum roll, please. You’re now ready to type in and run some Python code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-09-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '**No need. Just press Shift+Enter.**'
  prefs: []
  type: TYPE_NORMAL
- en: Jupyter comes with keyboard shortcuts designed to make your interactions with
    your notebook as easy as… say… pressing the **Shift** and **Enter** keys *together*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**When you see “Shift+Enter” in this book, press and hold down the Shift key,
    then tap the Enter key (before releasing both).**'
  prefs: []
  type: TYPE_NORMAL
- en: Pressing Shift+Enter runs the cell’s code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you press **Shift+Enter**, the code in the currently selected cell runs.
    The *focus* then moves to the next cell in your notebook. If no “next cell” exists,
    Jupyter creates a new one for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-10-01.png)![Image](assets/ch00-10-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The code ran, but produced no output.**'
  prefs: []
  type: TYPE_NORMAL
- en: Those three lines of code are examples of Python’s variable assignment. The
    name of the variable is on the left of the `**=**` operator, and its value’s on
    the right.
  prefs: []
  type: TYPE_NORMAL
- en: Those variable’s values are *defined* by this code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-12-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '**There’s still no output, but this code is executing.**'
  prefs: []
  type: TYPE_NORMAL
- en: That **import** statement has pulled-in the `random` library, and the **def**
    statement has defined the `draw` function. Let’s take that function for a spin
    to see what happens...
  prefs: []
  type: TYPE_NORMAL
- en: So... Python code really is easy to read... and run
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Besides Jupyter, there are other ways to run Python code, and you’ll learn about
    some of them as you work through this book. However, using VS Code with the Jupyter
    extension is – in our view – the *perfect* way to read, run, experiment, and play
    with Python code when first learning the language. So get ready to spend *a lot*
    of time in Jupyter and VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: Before moving on, take a moment to select **File** then **Save** from the VS
    Code menu to save your notebook under the name `Cards.ipynb`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Do this now!**'
  prefs: []
  type: TYPE_NORMAL
- en: What if you want a bunch of cards?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your `draw` function is a great start, drawing one card from the deck each time
    the function is executed. But, what if you want to draw five cards? Or ten? Or
    twenty? Or all fifty-two, for that matter?
  prefs: []
  type: TYPE_NORMAL
- en: 'Although you’d be a little off your head to suggest manually invoking your
    `draw` function as many times as is needed, most programmers instead reach for
    a loop. You’ll learn more about Python’s loops later in this book. For now, here’s
    how you’d use Python’s **for** loop to execute some code a fixed number of times:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-14-01.png)'
  prefs: []
  type: TYPE_IMG
- en: This all looks fine, in that the **for** loop’s indented block ran five times.
    But, can you spot a problem with the output?
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-15-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Yes, the loop code drew the same card twice.**'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the assumption here is that a drawn card is not put pack into the
    deck of cards. So... unless your playing with “magic cards” (or someone’s up to
    no good), the fact that this code randomly selects the same card more than once
    isn’t likely what’s required.
  prefs: []
  type: TYPE_NORMAL
- en: If your goal is to model a deck of cards, the current `draw` function isn’t
    up to snuff, is it?
  prefs: []
  type: TYPE_NORMAL
- en: 'The Big 4: list, tuple, dictionary, and set'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python’s excellent built-in support for data structures is legendary, and is
    often cited as the main reason most Python programmers *love* Python.
  prefs: []
  type: TYPE_NORMAL
- en: As this is your opening chapter, we’re not going to overload you with any sort
    of in-depth discussion of these data structures right now. There are lots of pages
    (entire chapters, in fact) dedicated to *The Big 4* later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although we haven’t called out their use specifically, you have already encountered
    lists *and* tuples. While rather cheekily referring to these as *arrays* earlier,
    each of these are in fact a bona fide, honest to goodness, Python **list**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-16-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You’ve also seen your fair share of tuples, too. Every time you invoke the
    `draw` function, it gives you back a **tuple**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-16-02.png)'
  prefs: []
  type: TYPE_IMG
- en: You’d be forgiven for thinking tuples look at little weird, and we’d have to
    agree that we think they look a little weird, too. Don’t let this worry you.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll learn more about both lists and tuples later in this book. Although both
    lists and tuples have their uses, they are not a great fit when it comes to modelling
    a deck of cards. Some other data structure is needed here. But, which one?
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Hint: There is a big clue in the title of this page.**'
  prefs: []
  type: TYPE_NORMAL
- en: Model your deck of cards with a...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although Python’s **dictionary** data structure is *hugely* popular, it primarily
    provides for lookup functionality (which features *lots* later in this book).
    Despite this, and like a list and tuple, a dictionary isn’t the best fit for modelling
    your deck of cards.
  prefs: []
  type: TYPE_NORMAL
- en: Which leaves you with **set**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sets in Python are likes sets from Math class: they contain a collection of
    unique values where duplicates are *not* allowed. As the code snippet below shows,
    when you use a Python set, you inherit a method called **add** which – brace yourself
    – adds a item to an existing set.'
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at this loop which uses the three lists from the previous page to
    construct a deck of cards.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-17-01.png)![Image](assets/ch00-17-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**That shouldn’t come as a surprise.**'
  prefs: []
  type: TYPE_NORMAL
- en: The block of code associated with any loop can contain any other code, including
    another loop. That’s a given. But, did you notice how Python’s use of indentation
    makes it easy to work out which block belongs where?
  prefs: []
  type: TYPE_NORMAL
- en: Use BIFs to learn more about your variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python’s built-in functions have many uses. Although you’re less than twenty
    pages into this chapter, you’ve already learned a little about **len**, **print**,
    **range**, and **set**.
  prefs: []
  type: TYPE_NORMAL
- en: 'We know you’ve been waiting patiently for this... so let’s see **len** in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-18-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can no doubt imagine, **len** gets a lot of use. However, the most used
    BIF is very likely **print**, which – among other things – displays objects on
    screen. Let’s see what happens when **print** is asked to display your `deck`
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-18-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Chaining BIFs to get more done
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use more than one BIF at a time (should you need to). A great BIF to
    know about is **sorted**, which returns a sorted copy of any object’s data.
  prefs: []
  type: TYPE_NORMAL
- en: The **sorted** BIF is often combined (or *chained*) with the **print** BIF to
    display an ordered version of some data. Care is needed, though, as the ordered
    data returned by **sorted** is always a list, regardless of what’s being sorted.
    This means using **sorted** on a set does *not* produce a sorted set, it produces
    a *sorted list* made up from the data in the original, *unordered* set. The original
    set is unchanged, in that it’s still a set, which is still unordered.
  prefs: []
  type: TYPE_NORMAL
- en: '**Remember: “BIF” is shorthand for “built-in function”.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-19-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The **print** **sorted** chain is a great combination, but get ready to type
    the next chain (shown on the next page) more times that you’ll likely think possible.
    It really is a common combination, and useful to boot.
  prefs: []
  type: TYPE_NORMAL
- en: The print dir combo mambo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When provided with the name of any Python object, the **dir** BIF returns a
    list of the object’s attributes which, in the case of the `deck` variable, are
    the attributes associated with a set object.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see (below), there are an awful lot of attributes associated with
    a Python set. Note how the output from **dir** is chained with a call to the **print**
    BIF, ensuring the displayed output is drawn *across* your screen as opposed to
    *down* your screen, which cuts down on the amount of scrolling required of your
    poor fingers. This may or not be something to dance about but – hey! – every little
    helps.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-20-01.png)![Image](assets/ch00-20-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here’s a simple rule to follow when looking at the output from **print** **dir**:
    *For now, ignore the attributes which begin and end with a double-underscore*.
    You’ll learn why they exist later in this book, but – for now – ignore, ignore,
    ignore!'
  prefs: []
  type: TYPE_NORMAL
- en: Getting help with dir’s output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might not think this to look at it, but you’ll likely use the **dir** BIF
    more than any other BIF when working with Python, especially when experimenting
    within a Jupyter notebook. This is due to **dir**’s ability to fess-up the list
    of attributes associated with any object. Typically, these attributes include
    a list of *methods* which can be applied to the object.
  prefs: []
  type: TYPE_NORMAL
- en: Although it might be tempting (albeit a little bonkers) to randomly execute
    any of the methods associated with the `deck` variable to see what they do, a
    more sensible approach is to read the documentation associated with the method...
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-21-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, don’t worry: we aren’t about to send you off to wade through thousands
    of pages of online Python documentation. That’s the **help** BIF’s job:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-21-02.png)'
  prefs: []
  type: TYPE_IMG
- en: This feels like a deck of cards now
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that your deck of cards is a set, you can better model its behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Sadly, randomly selecting a card from the deck is complicated by the fact the
    `random. choice` technique from earlier in this chapter doesn’t work with sets.
    This is a pity, as it would’ve been nice to use `random.choice(deck)` to pick
    a card from your deck but – alas – this won’t work.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**For now, don’t worry about why this is. The reason is kind of technical,
    which we’ll revisit later in this book.**'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**This is to make sure our readers keep reading, right?!? [Editor].**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Not to worry. A quick hack lets you first *convert* a copy of your set of cards
    to a list, which can then be used with `random.choice`. It couldn’t be more straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-22-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Having selected a card (it’s the *three of clubs* for us, but is likely a different
    card if you’re following along), we should really remove the card from the deck
    so that subsequent random choices no longer select it. There was a big clue shown
    at the bottom of the previous page as to which set method can help you here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-22-02.png)'
  prefs: []
  type: TYPE_IMG
- en: What exactly is “card”?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you’re wondering what the `card` variable is, there’s another BIF, called
    **type**, which reports the type of the value currently assigned to `card`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-23-01.png)![Image](assets/ch00-23-02.png)![Image](assets/ch00-23-03.png)![Image](assets/ch00-26-05.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The parentheses are optional.**'
  prefs: []
  type: TYPE_NORMAL
- en: You *can* wrap your conditionals in parentheses, but doing so makes the code
    harder to read. Most Python programmers only use parentheses when it helps to
    clarify what their code is doing.
  prefs: []
  type: TYPE_NORMAL
- en: But, wait! There’s more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may already be sold on Python now you’ve seen how easy it is to read as
    well as run your Python code. But, you’re not done yet.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-27-01.png)'
  prefs: []
  type: TYPE_IMG
- en: For the remainder of this chapter, you continuing your whistle-stop tour of
    some of Python’s other standout features.
  prefs: []
  type: TYPE_NORMAL
- en: As this is a *Head First* book, it’s not enough we tell you what these are,
    we want you to *experience* them. So, in VS Code, close your `Cards` notebook,
    then create a new notebook called `WhyPython.ipynb`. You’ll work in this new notebook
    for the rest of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**To create a new notebook in VS Code, select File, then New File... from the
    menu. Choose the third option to create a new, untitled notebook. Perform a File,
    Save to change the untitled name to “WhyPython.ipynb”.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-27-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Yes. Every… single…word.**'
  prefs: []
  type: TYPE_NORMAL
- en: Oh, we’re only joking. ![Image](assets/smile.png)
  prefs: []
  type: TYPE_NORMAL
- en: The goal for this chapter is to expose you to enough Python to get a feel for
    why Python is so popular. As such, the coverage in this chapter is very *high-level.*
  prefs: []
  type: TYPE_NORMAL
- en: 'But, don’t worry: You’ll be returning to all of this material *in detail* later
    in this book. For now, concentrate on understanding the gist of what you’re seeing.'
  prefs: []
  type: TYPE_NORMAL
- en: '**With your new notebook ready in VS Code, get ready to dig in.**'
  prefs: []
  type: TYPE_NORMAL
- en: Python ships with a rich standard library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Python Standard Library* (PSL) is the name used to refer to a large collection
    of Python functions, types, modules, classes, and packages bundled with Python.
    These are guaranteed to be there once Python is installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you hear programmers refer to Python as coming with “batteries included”,
    they are referring in part to the PSL. There’s a lot to it: [https://docs.python.org/3/library/index.xhtml](https://docs.python.org/3/library/index.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-28-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**In this book, “PSL” is short-hand for the “Python Standard Library”.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-28-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**It’s quite an apt description.**'
  prefs: []
  type: TYPE_NORMAL
- en: The Python install includes the PSL, which is complete to the point where, more
    times than not, you can rely on the features it provides to get a lot of work
    done. The thinking is that Python alone is all you’ll need to get going, which
    means the standard install of Python works “right out to the box” without the
    need for anything extra. Hence, *batteries included.*
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-28-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'BTW: Python is not a “toy language”'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a common criticism levelled at Python, in that it is somehow not a “real”
    programming language, or some sort of “toy”. If either of these observations were
    even remotely true, you wouldn’t expect anyone *anywhere* to be using Python for
    anything useful, let alone relying on Python to power their business.
  prefs: []
  type: TYPE_NORMAL
- en: Python may indeed look *different*, but this does not mean it can’t get the
    job done. Python is fun to use, but this doesn’t mean it’s a toy. Far from it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-31-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**There sure is a lot going on there.**'
  prefs: []
  type: TYPE_NORMAL
- en: Our goal is to give you a flavor of what’s in the PSL, not for you to explore
    it in any great detail.
  prefs: []
  type: TYPE_NORMAL
- en: You are not expected to know all of this, nor remember what’s on the last page,
    although there are three points you should consider.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**To be clear: we’re not talking about coffee…**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/1-circle.png) **You’ve only scratched the surface**'
  prefs: []
  type: TYPE_NORMAL
- en: The PSL has a lot in it, and what’s on the previous two pages provides the briefest
    of glimpses. As you work through this book, we’ll call out uses of the PSL so
    you don’t miss any (and you’ll also find resources in the appendices for further
    exploring the PSL on your own).
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/2-circle.png) **The PSL represents a large body of tested
    code which you don’t have to write, just use** As the PSL has existed for decades
    now, the modules it contains have been tested to destruction by legions of Python
    programmers *all over the globe*. Consequently, you can use PSL modules with confidence.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/3-circle.png) **The PSL is guaranteed to be there, so you
    can rely on its modules being available**'
  prefs: []
  type: TYPE_NORMAL
- en: Other than for some very specific edge cases (such as a tiny embedded micro-controller
    providing a minimal Python environment), you can be sure your code which uses
    any PSL module will be portable to other systems which also support the PSL.
  prefs: []
  type: TYPE_NORMAL
- en: '**Let’s use your latest notebook to take a quick look at two modules from the
    PSL.**'
  prefs: []
  type: TYPE_NORMAL
- en: With Python you’ll only write the code you need
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The PSL is an prime example of Python working hard to ensure you only write
    new code when you absolutely have to. If a module in the PSL solves your problem,
    use it: *Resist the urge to code everything from scratch*.'
  prefs: []
  type: TYPE_NORMAL
- en: And when it comes to reusing code, there’s more than the PSL to mine.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-33-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Python’s package ecosystem is to die for
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Not being content with what’s already included in the PSL, the Python community
    supports an online centralised repository of third-party modules, classes, and
    packages. It’s called the *The Python Package Index* and lives here: [https://pypi.org/](https://pypi.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: Known as *PyPI* (and pronounced “pie-pea-eye”), the index is a huge collection
    of software. Once you find what you’re looking for, installing is a breeze, and
    you’ll get lots of practice installing from PyPI as this book progresses.
  prefs: []
  type: TYPE_NORMAL
- en: For now, take ten minutes to visit the PyPI site (shown below) and take a look
    around.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-33-02.png)![Image](assets/ch00-34-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**OK. If it works for you, sure, follow your Zen!**'
  prefs: []
  type: TYPE_NORMAL
- en: Seriously, though, when a programming language is named in honor of a bunch
    of comedians, it should come as no surprise that things get a little silly sometimes.
    This is not a bad thing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Python documentation is literally littered (sorry) with references to *Monty
    Python*. Where other documentation favors *foo* and *bar*, the Python docs favor
    *parrots, spam* and *eggs*. Or is it *eggs* and *spam*? Anyway, as the documentation
    states: you don’t have to like *Monty Python* to use Python, but it helps.![Image](assets/smile.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-34-02.png)![Image](assets/ch00-34-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Python comes with two *Easter eggs* which demonstrate how Python programmers
    sometimes don’t take themselves too seriously, and also don’t mind when other
    folk have a bit of fun at their expense. To see what we mean, return to your WhyPython
    notebook one last time, and, in two new code cells, run each of the following
    lines of code. Enjoy!
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-34-05.png)![Image](assets/ch00-35-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**And we can help you with that.**'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we introduce – and start *immediately* working on – a real-world
    problem which you’ll solve with Python code. Working *together*, we’ll build a
    solution while learning more Python, revisiting the material from this chapter
    in more detail when needed, and as this book progresses.
  prefs: []
  type: TYPE_NORMAL
- en: Before getting to all that, though, take some time to review the chapter summary
    on the next page before testing your retention skills with this chapter’s crossword
    puzzle.
  prefs: []
  type: TYPE_NORMAL
- en: See you in the next chapter, [Chapter 2](ch02.xhtml#diving_in_letapostrophes_make_a_splash),
    which is actually your *second* chapter as we starting counting from zero (just
    like Python).
  prefs: []
  type: TYPE_NORMAL
- en: The Card Deck Crossword
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-37-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Congratulations on making it to the end of your opening chapter, numbered
    zero in honor of the fact that Python, like a lot of other programming languages,
    starts counting from zero. Before you dive into your next chapter, take a few
    minutes to try this crossword puzzle. All of the answers to the clues are found
    in this chapter’s pages, and the solution is on the next page. Enjoy!*'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-37-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Across**'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. A built-in function which tells you what something is.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Objects surrounded by `[` and `]`.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Shorthand for built-in function.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Reports on an object’s size.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Generates collection of numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. The Python Package Index.
  prefs: []
  type: TYPE_NORMAL
- en: 11\. Includes a module in your code.
  prefs: []
  type: TYPE_NORMAL
- en: 12\. Objects surrounded by `{` and `}`.
  prefs: []
  type: TYPE_NORMAL
- en: 14\. This chapter’s missing Big 4.
  prefs: []
  type: TYPE_NORMAL
- en: 15\. This operator can find things.
  prefs: []
  type: TYPE_NORMAL
- en: 16\. Use together with Shift to run.
  prefs: []
  type: TYPE_NORMAL
- en: 17\. Enlightenment, Python-style.
  prefs: []
  type: TYPE_NORMAL
- en: '**Down**'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Objects surrounded by `(` and `)`, and it is one of the Big 4, too.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The optional part of an `if` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Loops a specific number of times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. The name given to Python’s default variable.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. It’s not a *Pumpkin Skinny Latte*, but shares the same acronym
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Displays to screen.
  prefs: []
  type: TYPE_NORMAL
- en: 12\. It’s what the `card` variable is.
  prefs: []
  type: TYPE_NORMAL
- en: 13\. It’s either `True` or `False`.
  prefs: []
  type: TYPE_NORMAL
- en: 14\. Makes up the *combo mambo*.
  prefs: []
  type: TYPE_NORMAL
- en: The Card Deck Crossword Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Image](assets/ch00-38-01.png)![Image](assets/ch00-38-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Across**'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. A built-in function which tells you what something is.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Objects surrounded by `[` and `]`.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Shorthand for built-in function.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Reports on an object’s size.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Generates collection of numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. The Python Package Index.
  prefs: []
  type: TYPE_NORMAL
- en: 11\. Includes a module in your code.
  prefs: []
  type: TYPE_NORMAL
- en: 12\. Objects surrounded by `{` and `}`.
  prefs: []
  type: TYPE_NORMAL
- en: 14\. This chapter’s missing Big 4.
  prefs: []
  type: TYPE_NORMAL
- en: 15\. This operator can find things.
  prefs: []
  type: TYPE_NORMAL
- en: 16\. Use together with Shift to run.
  prefs: []
  type: TYPE_NORMAL
- en: 17\. Enlightenment, Python-style.
  prefs: []
  type: TYPE_NORMAL
- en: '**Down**'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Objects surrounded by `(` and `)`, and it is one of the Big 4, too.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The optional part of an `if` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Loops a specific number of times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. The name given to Python’s default variable.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. It’s not a *Pumpkin Skinny Latte*, but shares the same acronym
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Displays to screen.
  prefs: []
  type: TYPE_NORMAL
- en: 12\. It’s what the `card` variable is.
  prefs: []
  type: TYPE_NORMAL
- en: 13\. It’s either `True` or `False`.
  prefs: []
  type: TYPE_NORMAL
- en: 14\. Makes up the *combo mambo*.
  prefs: []
  type: TYPE_NORMAL
- en: Just when you thought you were done...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go grab your scissors, as here’s a handy cut-out chart of the Jupyter Notebook
    keyboard shortcuts we view as *essential*. You’ll get to use all of these are
    you learn more about Jupyter. For now, **Shift+Enter** remains the most important
    combination:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Just as well, as we asked you to take your scissors to what’s on the flip-side!**'
  prefs: []
  type: TYPE_NORMAL
