["```py\nclass Person:\n    name: str = \"\"\n    years_experience: int = 0\n    address: str = \"\"\n\npat = Person()\npat.name = \"Pat\"\nprint(f\"Hello {pat.name}\")\n```", "```py\npat = {\n    \"name\": \"\",\n    \"years_experience\": 0,\n    \"address\": \"\"\n}\n\n@dataclass\nclass Person():\n    name: str = \"\"\n    years_experience: int = 0\n    address: str = \"\"\n```", "```py\npat = Person(\"Pat\", 13, \"123 Fake St.\")\n```", "```py\nTypeError: Person() takes no arguments\n```", "```py\nclass Person:\n    def __init__(self,\n                  name: str,\n                  years_experience: int,\n                  address: str):\n        self.name = name\n        self.years_experience = years_experience\n        self.address = address\n\npat = Person(\"Pat\", 13, \"123 Fake St.\")\n```", "```py\nfrom pizza.sauces import is_sauce\nclass PizzaSpecification:\n    def __init__(self,\n                  dough_radius_in_inches: int,\n                  toppings: list[str]):\n        assert 6 <= dough_radius_in_inches <= 12, \\\n            'Dough must be between 6 and 12 inches'\n        sauces = [t for t in toppings if is_sauce(t)]\n        assert len(sauces) < 2, \\\n            'Can only have at most one sauce'\n\n        self.dough_radius_in_inches = dough_radius_in_inches\n        sauce = sauces[:1]\n        self.toppings = sauce + \\\n            [t for t in toppings if not is_sauce(t)]\n```", "```py\n{\n    \"dough_radius_in_inches\": 7\n    \"toppings\": [\"tomato sauce\", \"mozzarella\", \"pepperoni\"]\n}\n```", "```py\nclass PizzaSpecification:\n    \"\"\"\n This class represents a Pizza Specification for use in\n Automated Pizza Machines.\n\n The pizza specification is defined by the size of the dough and\n the toppings. Dough should be a whole number between 6 and 12\n inches (inclusive). If anything else is passed in, an AssertionError\n is thrown. The machinery cannot handle less than 6 inches and the\n business case is too costly for more than 12 inches.\n\n Toppings may have at most one sauce, but you may pass in toppings\n in any order. If there is more than one sauce, an AssertionError is\n thrown. This is done based on our research telling us that\n consumers find two-sauced pizzas do not taste good.\n\n This class will make sure that sauce is always the first topping,\n regardless of order passed in.\n\n Toppings are allowed to go above and below cheese\n (the order of non-sauce toppings matters).\n\n \"\"\"\n    def __init__(...)\n        # ... implementation goes here\n```", "```py\nimport contextlib\nfrom pizza_specification import PizzaSpecification\n\n@contextlib.contetxtmanager\ndef create_pizza_specification(dough_radius_in_inches: int,\n                               toppings: list[str]):\n    pizza_spec = PizzaSpecification(dough_radius_in_inches, toppings)\n    yield pizza_spec\n    assert 6 <= pizza_spec.dough_radius_in_inches <= 12\n    sauces = [t for t in pizza_spec.toppings if is_sauce(t)]\n    assert len(sauces) < 2\n    if sauces:\n        assert pizza_spec.toppings[0] == sauces[0]\n\n    # check that we assert order of all non sauces\n    # keep in mind, no invariant is specified that we can't add\n    # toppings at a later date, so we only check against what was\n    # passed in\n    non_sauces = [t for t in pizza_spec.toppings if t not in sauces]\n    expected_non_sauces = [t for t in toppings if t not in sauces]\n    for expected, actual in zip(expected_non_sauces, non_sauces):\n        assert expected == actual\n\ndef test_pizza_operations():\n    with create_pizza_specification(8, [\"Tomato Sauce\", \"Peppers\"]) \\\n        as pizza_spec:\n\n        # do something with pizza_spec\n```", "```py\npizza_spec = PizzaSpecification(dough_radius_in_inches=8,\n                                toppings=['Olive Oil',\n                                          'Garlic',\n                                          'Sliced Roma Tomatoes',\n                                          'Mozzarella'])\n```", "```py\npizza_spec.dough_radius_in_inches = 100  # BAD!\npizza_spec.toppings.append('Tomato Sauce')  # Second sauce, oh no!\n```", "```py\nfrom pizza.sauces import is_sauce\nclass PizzaSpecification:\n    def __init__(self,\n                 dough_radius_in_inches: int,\n                 toppings: list[str]):\n        assert 6 <= dough_radius_in_inches <= 12, \\\n        'Dough must be between 6 and 12 inches'\n        sauces = [t for t in toppings if is_sauce(t)]\n        assert len(sauces) < 2, \\\n            'Can have at most one sauce'\n\n        self.__dough_radius_in_inches = dough_radius_in_inches ![1](../images/00002.gif)\n        sauce = sauces[:1]\n        self.__toppings = sauce + \\\n            [t for t in toppings if not is_sauce(t)] ![2](../images/00005.gif)\n\npizza_spec = PizzaSpecification(dough_radius_in_inches=8,\n                                toppings=['Olive Oil',\n                                          'Garlic',\n                                          'Sliced Roma Tomatoes',\n                                          'Mozzarella'])\n\npizza_spec.__toppings.append('Tomato Sauce') # OOPS\n>>> AttributeError: type object 'pizza_spec' has no attribute '__toppings'\n```", "```py\npizza_spec.__dict__\n>>> { '_PizzaSpecification__toppings': ['Olive Oil',\n                                        'Garlic',\n                                        'Sliced Roma Tomatoes',\n                                        'Mozzarella'],\n      '_PizzaSpecification__dough_radius_in_inches': 8\n}\n\npizza_spec._PizzaSpecification__dough_radius_in_inches = 100\nprint(pizza_spec._PizzaSpecification__dough_radius_in_inches)\n>>> 100\n```", "```py\nfrom typing import List\nfrom pizza.exceptions import PizzaException\nfrom pizza.sauces import is_sauce\nclass PizzaSpecification:\n    def __init__(self,\n                 dough_radius_in_inches: int,\n                 toppings: list[str]):\n        assert 6 <= dough_radius_in_inches <= 12, \\\n            'Dough must be between 6 and 12 inches'\n\n        self.__dough_radius_in_inches = dough_radius_in_inches\n        self.__toppings: list[str] = []\n        for topping in toppings:\n            self.add_topping(topping) ![1](../images/00002.gif)\n\n    def add_topping(self, topping: str): ![2](../images/00005.gif)\n        '''\n        Add a topping to the pizza\n        All rules for pizza construction (one sauce, no sauce above\n        cheese, etc.) still apply.\n        '''\n        if (is_sauce(topping) and\n               any(t for t in self.__toppings if is_sauce(t))):\n               raise PizzaException('Pizza may only have one sauce')\n\n        if is_sauce(topping):\n            self.__toppings.insert(0, topping)\n        else:\n            self.__toppings.append(topping)\n```"]