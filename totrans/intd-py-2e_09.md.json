["```py\n>>> empty_dict = {}\n>>> empty_dict\n{}\n```", "```py\n>>> bierce = {\n...     \"day\": \"A period of twenty-four hours, mostly misspent\",\n...     \"positive\": \"Mistaken at the top of one's voice\",\n...     \"misfortune\": \"The kind of fortune that never misses\",\n...     }\n>>>\n```", "```py\n>>> bierce\n{'day': 'A period of twenty-four hours, mostly misspent',\n'positive': \"Mistaken at the top of one's voice\",\n'misfortune': 'The kind of fortune that never misses'}\n```", "```py\n>>> acme_customer = {'first': 'Wile', 'middle': 'E', 'last': 'Coyote'}\n>>> acme_customer\n{'first': 'Wile', 'middle': 'E', 'last': 'Coyote'}\n```", "```py\n>>> acme_customer = dict(first=\"Wile\", middle=\"E\", last=\"Coyote\")\n>>> acme_customer\n{'first': 'Wile', 'middle': 'E', 'last': 'Coyote'}\n```", "```py\n>>> x = dict(name=\"Elmer\", def=\"hunter\")\n  File \"<stdin>\", line 1\n    x = dict(name=\"Elmer\", def=\"hunter\")\n                             ^\nSyntaxError: invalid syntax\n```", "```py\n>>> lol = [ ['a', 'b'], ['c', 'd'], ['e', 'f'] ]\n>>> dict(lol)\n{'a': 'b', 'c': 'd', 'e': 'f'}\n```", "```py\n>>> lot = [ ('a', 'b'), ('c', 'd'), ('e', 'f') ]\n>>> dict(lot)\n{'a': 'b', 'c': 'd', 'e': 'f'}\n```", "```py\n>>> tol = ( ['a', 'b'], ['c', 'd'], ['e', 'f'] )\n>>> dict(tol)\n{'a': 'b', 'c': 'd', 'e': 'f'}\n```", "```py\n>>> los = [ 'ab', 'cd', 'ef' ]\n>>> dict(los)\n{'a': 'b', 'c': 'd', 'e': 'f'}\n```", "```py\n>>> tos = ( 'ab', 'cd', 'ef' )\n>>> dict(tos)\n{'a': 'b', 'c': 'd', 'e': 'f'}\n```", "```py\n>>> pythons = {\n...     'Chapman': 'Graham',\n...     'Cleese': 'John',\n...     'Idle': 'Eric',\n...     'Jones': 'Terry',\n...     'Palin': 'Michael',\n...     }\n>>> pythons\n{'Chapman': 'Graham', 'Cleese': 'John', 'Idle': 'Eric',\n'Jones': 'Terry', 'Palin': 'Michael'}\n```", "```py\n>>> pythons['Gilliam'] = 'Gerry'\n>>> pythons\n{'Chapman': 'Graham', 'Cleese': 'John', 'Idle': 'Eric',\n'Jones': 'Terry', 'Palin': 'Michael', 'Gilliam': 'Gerry'}\n```", "```py\n>>> pythons['Gilliam'] = 'Terry'\n>>> pythons\n{'Chapman': 'Graham', 'Cleese': 'John', 'Idle': 'Eric',\n'Jones': 'Terry', 'Palin': 'Michael', 'Gilliam': 'Terry'}\n```", "```py\n>>> some_pythons = {\n...     'Graham': 'Chapman',\n...     'John': 'Cleese',\n...     'Eric': 'Idle',\n...     'Terry': 'Gilliam',\n...     'Michael': 'Palin',\n...     'Terry': 'Jones',\n...     }\n>>> some_pythons\n{'Graham': 'Chapman', 'John': 'Cleese', 'Eric': 'Idle',\n'Terry': 'Jones', 'Michael': 'Palin'}\n```", "```py\n>>> some_pythons['John']\n'Cleese'\n```", "```py\n>>> some_pythons['Groucho']\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: 'Groucho'\n```", "```py\n>>> 'Groucho' in some_pythons\nFalse\n```", "```py\n>>> some_pythons.get('John')\n'Cleese'\n```", "```py\n>>> some_pythons.get('Groucho', 'Not a Python')\n'Not a Python'\n```", "```py\n>>> some_pythons.get('Groucho')\n>>>\n```", "```py\n>>> signals = {'green': 'go', 'yellow': 'go faster', 'red': 'smile for the camera'}\n>>> signals.keys()\ndict_keys(['green', 'yellow', 'red'])\n```", "```py\n>>> list( signals.keys() )\n['green', 'yellow', 'red']\n```", "```py\n>>> list( signals.values() )\n['go', 'go faster', 'smile for the camera']\n```", "```py\n>>> list( signals.items() )\n[('green', 'go'), ('yellow', 'go faster'), ('red', 'smile for the camera')]\n```", "```py\n>>> len(signals)\n3\n```", "```py\n>>> first = {'a': 'agony', 'b': 'bliss'}\n>>> second = {'b': 'bagels', 'c': 'candy'}\n>>> {**first, **second}\n{'a': 'agony', 'b': 'bagels', 'c': 'candy'}\n```", "```py\n>>> third = {'d': 'donuts'}\n>>> {**first, **third, **second}\n{'a': 'agony', 'b': 'bagels', 'd': 'donuts', 'c': 'candy'}\n```", "```py\n>>> pythons = {\n...     'Chapman': 'Graham',\n...     'Cleese': 'John',\n...     'Gilliam': 'Terry',\n...     'Idle': 'Eric',\n...     'Jones': 'Terry',\n...     'Palin': 'Michael',\n...     }\n>>> pythons\n{'Chapman': 'Graham', 'Cleese': 'John', 'Gilliam': 'Terry',\n'Idle': 'Eric', 'Jones': 'Terry', 'Palin': 'Michael'}\n```", "```py\n>>> others = { 'Marx': 'Groucho', 'Howard': 'Moe' }\n```", "```py\n>>> pythons.update(others)\n>>> pythons\n{'Chapman': 'Graham', 'Cleese': 'John', 'Gilliam': 'Terry',\n'Idle': 'Eric', 'Jones': 'Terry', 'Palin': 'Michael',\n'Marx': 'Groucho', 'Howard': 'Moe'}\n```", "```py\n>>> first = {'a': 1, 'b': 2}\n>>> second = {'b': 'platypus'}\n>>> first.update(second)\n>>> first\n{'a': 1, 'b': 'platypus'}\n```", "```py\n>>> del pythons['Marx']\n>>> pythons\n{'Chapman': 'Graham', 'Cleese': 'John', 'Gilliam': 'Terry',\n'Idle': 'Eric', 'Jones': 'Terry', 'Palin': 'Michael',\n'Howard': 'Moe'}\n>>> del pythons['Howard']\n>>> pythons\n{'Chapman': 'Graham', 'Cleese': 'John', 'Gilliam': 'Terry',\n'Idle': 'Eric', 'Jones': 'Terry', 'Palin': 'Michael'}\n```", "```py\n>>> len(pythons)\n6\n>>> pythons.pop('Palin')\n'Michael'\n>>> len(pythons)\n5\n>>> pythons.pop('Palin')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: 'Palin'\n```", "```py\n>>> pythons.pop('First', 'Hugo')\n'Hugo'\n>>> len(pythons)\n5\n```", "```py\n>>> pythons.clear()\n>>> pythons\n{}\n>>> pythons = {}\n>>> pythons\n{}\n```", "```py\n>>> pythons = {'Chapman': 'Graham', 'Cleese': 'John',\n... 'Jones': 'Terry', 'Palin': 'Michael', 'Idle': 'Eric'}\n```", "```py\n>>> 'Chapman' in pythons\nTrue\n>>> 'Palin' in pythons\nTrue\n```", "```py\n>>> 'Gilliam' in pythons\nFalse\n```", "```py\n>>> signals = {'green': 'go',\n... 'yellow': 'go faster',\n... 'red': 'smile for the camera'}\n>>> save_signals = signals\n>>> signals['blue'] = 'confuse everyone'\n>>> save_signals\n{'green': 'go',\n'yellow': 'go faster',\n'red': 'smile for the camera',\n'blue': 'confuse everyone'}\n```", "```py\n>>> signals = {'green': 'go',\n... 'yellow': 'go faster',\n... 'red': 'smile for the camera'}\n>>> original_signals = signals.copy()\n>>> signals['blue'] = 'confuse everyone'\n>>> signals\n{'green': 'go',\n'yellow': 'go faster',\n'red': 'smile for the camera',\n'blue': 'confuse everyone'}\n>>> original_signals\n{'green': 'go',\n'yellow': 'go faster',\n'red': 'smile for the camera'}\n>>>\n```", "```py\n>>> signals = {'green': 'go',\n... 'yellow': 'go faster',\n... 'red': ['stop', 'smile']}\n>>> signals_copy = signals.copy()\n>>> signals\n{'green': 'go',\n'yellow': 'go faster',\n'red': ['stop', 'smile']}\n>>> signals_copy\n{'green': 'go',\n'yellow': 'go faster',\n'red': ['stop', 'smile']}\n>>>\n```", "```py\n>>> signals['red'][1] = 'sweat'\n>>> signals\n{'green': 'go',\n'yellow': 'go faster',\n'red': ['stop', 'sweat']}\n>>> signals_copy\n{'green': 'go',\n'yellow': 'go faster',\n'red': ['stop', 'sweat']}\n```", "```py\n>>> import copy\n>>> signals = {'green': 'go',\n... 'yellow': 'go faster',\n... 'red': ['stop', 'smile']}\n>>> signals_copy = copy.deepcopy(signals)\n>>> signals\n{'green': 'go',\n'yellow': 'go faster',\n'red': ['stop', 'smile']}\n>>> signals_copy\n{'green': 'go',\n'yellow':'go faster',\n'red': ['stop', 'smile']}\n>>> signals['red'][1] = 'sweat'\n>>> signals\n{'green': 'go',\n'yellow': 'go faster',\nred': ['stop', 'sweat']}\n>>> signals_copy\n{'green': 'go',\n'yellow': 'go faster',\nred': ['stop', 'smile']}\n```", "```py\n>>> a = {1:1, 2:2, 3:3}\n>>> b = {3:3, 1:1, 2:2}\n>>> a == b\nTrue\n```", "```py\n>>> a = {1:1, 2:2, 3:3}\n>>> b = {3:3, 1:1, 2:2}\n>>> a <= b\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: '<=' not supported between instances of 'dict' and 'dict'\n```", "```py\n>>> a = {1: [1, 2], 2: [1], 3:[1]}\n>>> b = {1: [1, 1], 2: [1], 3:[1]}\n>>> a == b\nFalse\n```", "```py\n>>> accusation = {'room': 'ballroom', 'weapon': 'lead pipe',\n...               'person': 'Col. Mustard'}\n>>> for card in accusation:  #  or, for card in accusation.keys():\n...     print(card)\n...\nroom\nweapon\nperson\n```", "```py\n>>> for value in accusation.values():\n...     print(value)\n...\nballroom\nlead pipe\nCol. Mustard\n```", "```py\n>>> for item in accusation.items():\n...     print(item)\n...\n('room', 'ballroom')\n('weapon', 'lead pipe')\n('person', 'Col. Mustard')\n```", "```py\n>>> for card, contents in accusation.items():\n...     print('Card', card, 'has the contents', contents)\n...\nCard weapon has the contents lead pipe\nCard person has the contents Col. Mustard\nCard room has the contents ballroom\n```", "```py\n{*`key_expression`* : *`value_expression`* for *`expression`* in *`iterable`*}\n```", "```py\n>>> word = 'letters'\n>>> letter_counts = {letter: word.count(letter) for letter in word}\n>>> letter_counts\n{'l': 1, 'e': 2, 't': 2, 'r': 1, 's': 1}\n```", "```py\n>>> word = 'letters'\n>>> letter_counts = {letter: word.count(letter) for letter in set(word)}\n>>> letter_counts\n{'t': 2, 'l': 1, 'e': 2, 'r': 1, 's': 1}\n```", "```py\n{*`key_expression`* : *`value_expression`* for *`expression`* in *`iterable`* if *`condition`*}\n```", "```py\n>>> vowels = 'aeiou'\n>>> word = 'onomatopoeia'\n>>> vowel_counts = {letter: word.count(letter) for letter in set(word)\n if letter in vowels}\n>>> vowel_counts\n{'e': 1, 'i': 1, 'o': 4, 'a': 2}\n```", "```py\n>>> empty_set = set()\n>>> empty_set\nset()\n>>> even_numbers = {0, 2, 4, 6, 8}\n>>> even_numbers\n{0, 2, 4, 6, 8}\n>>> odd_numbers = {1, 3, 5, 7, 9}\n>>> odd_numbers\n{1, 3, 5, 7, 9}\n```", "```py\n>>> set( 'letters' )\n{'l', 'r', 's', 't', 'e'}\n```", "```py\n>>> set( ['Dasher', 'Dancer', 'Prancer', 'Mason-Dixon'] )\n{'Dancer', 'Dasher', 'Mason-Dixon', 'Prancer'}\n```", "```py\n>>> set( ('Ummagumma', 'Echoes', 'Atom Heart Mother') )\n{'Ummagumma', 'Atom Heart Mother', 'Echoes'}\n```", "```py\n>>> set( {'apple': 'red', 'orange': 'orange', 'cherry': 'red'} )\n{'cherry', 'orange', 'apple'}\n```", "```py\n>>> reindeer = set( ['Dasher', 'Dancer', 'Prancer', 'Mason-Dixon'] )\n>>> len(reindeer)\n4\n```", "```py\n>>> s = set((1,2,3))\n>>> s\n{1, 2, 3}\n>>> s.add(4)\n>>> s\n{1, 2, 3, 4}\n```", "```py\n>>> s = set((1,2,3))\n>>> s.remove(3)\n>>> s\n{1, 2}\n```", "```py\n>>> furniture = set(('sofa', 'ottoman', 'table'))\n>>> for piece in furniture:\n...     print(piece)\n...\nottoman\ntable\nsofa\n```", "```py\n>>> drinks = {\n...     'martini': {'vodka', 'vermouth'},\n...     'black russian': {'vodka', 'kahlua'},\n...     'white russian': {'cream', 'kahlua', 'vodka'},\n...     'manhattan': {'rye', 'vermouth', 'bitters'},\n...     'screwdriver': {'orange juice', 'vodka'}\n...     }\n```", "```py\n>>> for name, contents in drinks.items():\n...     if 'vodka' in contents:\n...         print(name)\n...\nscrewdriver\nmartini\nblack russian\nwhite russian\n```", "```py\n>>> for name, contents in drinks.items():\n...     if 'vodka' in contents and not ('vermouth' in contents or\n...         'cream' in contents):\n...         print(name)\n...\nscrewdriver\nblack russian\n```", "```py\n>>> for name, contents in drinks.items():\n...     if contents & {'vermouth', 'orange juice'}:\n...         print(name)\n...\nscrewdriver\nmartini\nmanhattan\n```", "```py\n>>> for name, contents in drinks.items():\n...     if 'vodka' in contents and not contents & {'vermouth', 'cream'}:\n...         print(name)\n...\nscrewdriver\nblack russian\n```", "```py\n>>> bruss = drinks['black russian']\n>>> wruss = drinks['white russian']\n```", "```py\n>>> a = {1, 2}\n>>> b = {2, 3}\n```", "```py\n>>> a & b\n{2}\n>>> a.intersection(b)\n{2}\n```", "```py\n>>> bruss & wruss\n{'kahlua', 'vodka'}\n```", "```py\n>>> a | b\n{1, 2, 3}\n>>> a.union(b)\n{1, 2, 3}\n```", "```py\n>>> bruss | wruss\n{'cream', 'kahlua', 'vodka'}\n```", "```py\n>>> a - b\n{1}\n>>> a.difference(b)\n{1}\n```", "```py\n>>> bruss - wruss\nset()\n>>> wruss - bruss\n{'cream'}\n```", "```py\n>>> a ^ b\n{1, 3}\n>>> a.symmetric_difference(b)\n{1, 3}\n```", "```py\n>>> bruss ^ wruss\n{'cream'}\n```", "```py\n>>> a <= b\nFalse\n>>> a.issubset(b)\nFalse\n```", "```py\n>>> bruss <= wruss\nTrue\n```", "```py\n>>> a <= a\nTrue\n>>> a.issubset(a)\nTrue\n```", "```py\n>>> a < b\nFalse\n>>> a < a\nFalse\n```", "```py\n>>> bruss < wruss\nTrue\n```", "```py\n>>> a >= b\nFalse\n>>> a.issuperset(b)\nFalse\n```", "```py\n>>> wruss >= bruss\nTrue\n```", "```py\n>>> a >= a\nTrue\n>>> a.issuperset(a)\nTrue\n```", "```py\n>>> a > b\nFalse\n```", "```py\n>>> wruss > bruss\nTrue\n```", "```py\n>>> a > a\nFalse\n```", "```py\n>>> a_set = {number for number in range(1,6) if number % 3 == 1}\n>>> a_set\n{1, 4}\n```", "```py\n>>> frozenset([3, 2, 1])\nfrozenset({1, 2, 3})\n>>> frozenset(set([2, 1, 3]))\nfrozenset({1, 2, 3})\n>>> frozenset({3, 1, 2})\nfrozenset({1, 2, 3})\n>>> frozenset( (2, 3, 1) )\nfrozenset({1, 2, 3})\n```", "```py\n>>> fs = frozenset([3, 2, 1])\n>>> fs\nfrozenset({1, 2, 3})\n>>> fs.add(4)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'frozenset' object has no attribute 'add'\n```", "```py\n>>> marx_list = ['Groucho', 'Chico', 'Harpo']\n>>> marx_tuple = ('Groucho', 'Chico', 'Harpo')\n>>> marx_dict = {'Groucho': 'banjo', 'Chico': 'piano', 'Harpo': 'harp'}\n>>> marx_set = {'Groucho', 'Chico', 'Harpo'}\n>>> marx_list[2]\n'Harpo'\n>>> marx_tuple[2]\n'Harpo'\n>>> marx_dict['Harpo']\n'harp'\n>>> 'Harpo' in marx_list\nTrue\n>>> 'Harpo' in marx_tuple\nTrue\n>>> 'Harpo' in marx_dict\nTrue\n>>> 'Harpo' in marx_set\nTrue\n```", "```py\n>>> marxes = ['Groucho', 'Chico', 'Harpo']\n>>> pythons = ['Chapman', 'Cleese', 'Gilliam', 'Jones', 'Palin']\n>>> stooges = ['Moe', 'Curly', 'Larry']\n```", "```py\n>>> tuple_of_lists = marxes, pythons, stooges\n>>> tuple_of_lists\n(['Groucho', 'Chico', 'Harpo'],\n['Chapman', 'Cleese', 'Gilliam', 'Jones', 'Palin'],\n['Moe', 'Curly', 'Larry'])\n```", "```py\n>>> list_of_lists = [marxes, pythons, stooges]\n>>> list_of_lists\n[['Groucho', 'Chico', 'Harpo'],\n['Chapman', 'Cleese', 'Gilliam', 'Jones', 'Palin'],\n['Moe', 'Curly', 'Larry']]\n```", "```py\n>>> dict_of_lists = {'Marxes': marxes, 'Pythons': pythons, 'Stooges': stooges}\n>> dict_of_lists\n{'Marxes': ['Groucho', 'Chico', 'Harpo'],\n'Pythons': ['Chapman', 'Cleese', 'Gilliam', 'Jones', 'Palin'],\n'Stooges': ['Moe', 'Curly', 'Larry']}\n```", "```py\n>>> houses = {\n (44.79, -93.14, 285): 'My House',\n (38.89, -77.03, 13): 'The White House'\n }\n```"]