- en: 'Chapter 5\. Saving User Input: Testing the Database'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章。保存用户输入：测试数据库
- en: So far we’ve managed to return a static HTML page with an input box in it. Next
    we want to take the text that the user types into that input box and send it to
    the server, so that we can save it somehow and display it back to her later.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经成功返回了一个包含输入框的静态 HTML 页面。接下来，我们想要获取用户在输入框中输入的文本，并将其发送到服务器，以便我们稍后能够保存并显示给她。
- en: 'The first time I started writing code for this chapter, I immediately wanted
    to skip to what I thought was the right design: multiple database tables for lists
    and list items, a bunch of different URLs for adding new lists and items, three
    new view functions, and about half a dozen new unit tests for all of the above.
    But I stopped myself. Although I was pretty sure I was smart enough to handle
    coding all those problems at once, the point of TDD is to allow you to do one
    thing at a time, when you need to. So I decided to be deliberately short-sighted,
    and at any given moment *only* do what was necessary to get the functional tests
    a little further.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次开始为这一章写代码时，我立即想要跳到我认为正确的设计：为列表和列表项创建多个数据库表，一堆不同的 URL 用于添加新的列表和项目，三个新的视图函数，以及大约半打新的单元测试。但我停了下来。虽然我相当确信自己足够聪明可以一次性解决所有这些问题，但
    TDD 的要点是允许你在需要时一次只做一件事。所以我决定故意近视，在任何给定的时刻*只*做必要的事情，以使功能测试有所进展。
- en: This will be a demonstration of how TDD can support an incremental, iterative
    style of development—​it may not be the quickest route, but you do get there in
    the end^([1](ch05.xhtml#id285)). There’s a neat side benefit, which is that it
    allows me to introduce new concepts like models, dealing with POST requests, Django
    template tags, and so on, *one at a time* rather than having to dump them on you
    all at once.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个演示如何支持增量、迭代式开发风格的 TDD 的例子——可能不是最快的路径，但你最终会到达^([1](ch05.xhtml#id285))。这有一个很好的附带好处，它允许我逐步引入新概念，如模型、处理
    POST 请求、Django 模板标签等，*逐步引入*，而不是一次性抛给你。
- en: None of this says that you *shouldn’t* try to think ahead, and be clever. In
    the next chapter we’ll use a bit more design and up-front thinking, and show how
    that fits in with TDD. But for now let’s plough on mindlessly and just do what
    the tests tell us to.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都没有说你*不应该*试图提前思考和聪明。在下一章中，我们将使用更多的设计和前期思考，并展示它如何与 TDD 结合。但现在让我们继续盲目前行，只做测试告诉我们要做的事情。
- en: Wiring Up Our Form to Send a POST Request
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将我们的表单连接到发送 POST 请求
- en: 'At the end of the last chapter, the tests were telling us we weren’t able to
    save the user’s input:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章的结束时，测试告诉我们我们无法保存用户的输入：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To get it to the server, for now we’ll use a standard HTML POST request. A little
    boring, but also nice and easy to deliver—​we can use all sorts of sexy HTML5
    and JavaScript later in the book.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将其发送到服务器，目前我们将使用标准的 HTML POST 请求。有点无聊，但也简单易行——我们可以在书中后面使用各种性感的 HTML5 和 JavaScript。
- en: 'To get our browser to send a POST request, we need to do two things:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要使我们的浏览器发送 POST 请求，我们需要做两件事：
- en: Give the `<input>` element a `name=` attribute.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给 `<input>` 元素添加一个 `name=` 属性。
- en: Wrap it in a `<form>` tag^([2](ch05.xhtml#id287)) with `method="POST"`.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用 `method="POST"` 将其包装在 `<form>` 标签内^([2](ch05.xhtml#id287))。
- en: 'Let’s adjust our template at *lists/templates/home.xhtml*:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们调整我们的模板在*lists/templates/home.xhtml*：
- en: lists/templates/home.xhtml (ch05l001)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 列表/模板/home.xhtml（ch05l001）
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, running our FTs gives us a slightly cryptic, unexpected error:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行我们的功能测试会出现一个稍微神秘的意外错误：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Oh dear, we’re now failing two lines *earlier*, after we submit the form, but
    before we are able to do the assert. Selenium seems to be unable to find our list
    table. Why on Earth would that happen? Let’s take another look at our code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 天哪，我们现在在提交表单后，但在能够进行断言之前，正在失败两行*之前*。 Selenium 似乎无法找到我们的列表表格。为什么会这样？让我们再看看我们的代码：
- en: functional_tests.py
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: functional_tests.py
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](assets/1.png)](#co_saving_user_input__testing_the_database_CO1-1)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_saving_user_input__testing_the_database_CO1-1)'
- en: Our test unexpectedly fails on this line. How do we figure out what’s going
    on?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试意外地在这一行失败。我们如何找出发生了什么？
- en: Debugging functional tests
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试功能测试
- en: 'When a functional test fails with an unexpected failure, there are several
    things we can do to debug it:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当功能测试因意外失败而失败时，我们可以采取几种方法来调试它：
- en: Add `print` statements, to show, for example, what the current page text is.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 `print` 语句，例如显示当前页面文本是什么。
- en: Improve the *error message* to show more info about the current state.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进*错误消息*以显示有关当前状态的更多信息。
- en: Manually visit the site yourself.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动访问网站自己。
- en: Use `time.sleep` to pause the test during execution so you can inspect what
    was happening.^([3](ch05.xhtml#id293))
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `time.sleep` 在执行过程中暂停测试，以便您可以检查发生了什么事情。^([3](ch05.xhtml#id293))
- en: We’ll look at all of these over the course of this book, but the `time.sleep`
    option is the one that leaps to mind with this kind of error in an FT. Let’s try
    it now.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的过程中，我们会详细查看所有这些内容，但 `time.sleep` 选项是在 FT 中出现这种错误时首先想到的选项。现在让我们试一试。
- en: 'Conveniently, we’ve already got a sleep just before the error occurs; let’s
    just extend it a little:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 方便地，我们在错误发生之前已经有了一个延迟；让我们稍微延长一下：
- en: functional_tests.py (ch05l003)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: functional_tests.py（ch05l003）
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Depending on how fast Selenium runs on your PC, you may have caught a glimpse
    of this already, but when we run the functional tests again, we’ve got time to
    see what’s going on: you should see a page that looks like [Figure 5-1](#csrf_error_screenshot),
    with lots of Django debug information.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 Selenium 在您的 PC 上运行的速度，您可能已经一瞥过这个，但当我们再次运行功能测试时，我们有时间看看发生了什么：您应该看到一个看起来像
    [Figure 5-1](#csrf_error_screenshot) 的页面，其中包含大量的 Django 调试信息。
- en: '![Django DEBUG page showing CSRF error](assets/twp2_0501.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![显示 CSRF 错误的 Django DEBUG 页面](assets/twp2_0501.png)'
- en: Figure 5-1\. Django DEBUG page showing CSRF error
  id: totrans-34
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-1\. 显示 CSRF 错误的 Django DEBUG 页面
- en: 'Django’s CSRF protection involves placing a little auto-generated unique token
    into each generated form, to be able to verify that POST requests have definitely
    come from the form generated by the server. So far our template has been pure
    HTML, and in this step we make the first use of Django’s template magic. To add
    the CSRF token we use a *template tag*, which has the curly-bracket/percent syntax,
    `{% ... %}`—famous for being the world’s most annoying two-key touch-typing combination:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Django 的 CSRF 保护涉及将一个小的自动生成的唯一令牌放入每个生成的表单中，以便能够验证 POST 请求确实来自服务器生成的表单。到目前为止，我们的模板一直是纯
    HTML，在这一步中，我们首次使用了 Django 的模板魔法。为了添加 CSRF 令牌，我们使用了一个 *模板标记*，其具有花括号/百分号的语法，`{%
    ... %}`——这对于是世界上最烦人的两个键触摸打字组合而闻名：
- en: lists/templates/home.xhtml (ch05l004)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/home.xhtml（ch05l004）
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Django will substitute the template tag during rendering with an `<input type="hidden">`
    containing the CSRF token. Rerunning the functional test will now bring us back
    to our previous (expected) failure:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在渲染过程中，Django 将使用模板标记替换一个包含 CSRF 令牌的 `<input type="hidden">`。重新运行功能测试现在将使我们回到之前的（预期的）失败状态：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Since our long `time.sleep` is still there, the test will pause on the final
    screen, showing us that the new item text disappears after the form is submitted,
    and the page refreshes to show an empty form again. That’s because we haven’t
    wired up our server to deal with the POST request yet—​it just ignores it and
    displays the normal home page.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们长时间的 `time.sleep` 仍然存在，测试将暂停在最终屏幕上，显示新项目文本在表单提交后消失，并且页面刷新显示空表单。这是因为我们还没有配置服务器来处理
    POST 请求——它只是忽略它并显示正常的首页。
- en: 'We can put our normal short `time.sleep` back now though:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以把我们正常的短 `time.sleep` 放回去了：
- en: functional_tests.py (ch05l005)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: functional_tests.py（ch05l005）
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Processing a POST Request on the Server
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理服务器上的 POST 请求
- en: Because we haven’t specified an `action=` attribute in the form, it is submitting
    back to the same URL it was rendered from by default (i.e., `/`), which is dealt
    with by our `home_page` function. That’s fine for now, let’s adapt the view to
    be able to deal with a POST request.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们在表单中没有指定 `action=` 属性，它默认会提交回渲染时的同一 URL（即 `/`），由我们的 `home_page` 函数处理。目前这样也可以，让我们修改视图以处理
    POST 请求。
- en: 'That means a new unit test for the `home_page` view. Open up *lists/tests.py*,
    and add a new method to `HomePageTest`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着需要为 `home_page` 视图编写一个新的单元测试。打开 *lists/tests.py*，并且在 `HomePageTest` 中添加一个新的方法：
- en: lists/tests.py (ch05l006)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: lists/tests.py（ch05l006）
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To do a POST, we call `self.client.post`, and as you can see it takes a `data`
    argument which contains the form data we want to send. Then we check that the
    text from our POST request ends up in the rendered HTML. That gives us our expected
    fail:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行 POST 请求，我们调用 `self.client.post`，正如您所见，它接受一个 `data` 参数，其中包含我们要发送的表单数据。然后我们检查来自我们的
    POST 请求的文本最终出现在呈现的 HTML 中。这给了我们预期的失败：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In (slightly exaggerated) TDD style, we can single-mindedly do “the simplest
    thing that could possibly work” to address this test failure, which is to add
    an `if` and a new code path for POST requests, with a deliberately silly return
    value:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有点夸张的 TDD 风格，我们可以单一地做“可能有效的最简单的事情”来处理这个测试失败，也就是为 POST 请求添加一个 `if` 和一个新的代码路径，带有一个故意愚蠢的返回值：
- en: lists/views.py (ch05l007)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py（ch05l007）
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: OK that gets our unit tests passing, but it’s not really what we want.^([4](ch05.xhtml#id305))
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这样可以让我们的单元测试通过，但实际上这并不是我们想要的。^([4](ch05.xhtml#id305))
- en: What we really want to do is add the POST submission to the todo items table
    in the home page template.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真正想做的是将POST提交添加到主页模板中的待办事项表中。
- en: Passing Python Variables to Be Rendered in the Template
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Python变量传递到模板中进行渲染
- en: We’ve already had a hint of it, and now it’s time to start to get to know the
    real power of the Django template syntax, which is to pass variables from our
    Python view code into HTML templates.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了一点线索，现在是时候开始了解Django模板语法的真正威力了，这是将变量从Python视图代码传递到HTML模板中的关键。
- en: 'Let’s start by seeing how the template syntax lets us include a Python object
    in our template. The notation is `{{ ... }}`, which displays the object as a string:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看看模板语法如何让我们在模板中包含一个Python对象。符号是`{{ ... }}`，它将对象显示为字符串：
- en: lists/templates/home.xhtml (ch05l008)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/home.xhtml (ch05l008)
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](assets/1.png)](#co_saving_user_input__testing_the_database_CO2-1)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_saving_user_input__testing_the_database_CO2-1)'
- en: Here’s our template variable. `new_item_text` will be the variable name for
    the user input we display in the template.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的模板变量。`new_item_text`将是我们在模板中显示的用户输入的变量名。
- en: 'Let’s adjust our unit test so that it checks whether we are still using the
    template:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们调整我们的单元测试，以检查我们是否仍在使用模板：
- en: lists/tests.py (ch05l009)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: lists/tests.py (ch05l009)
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And that will fail as expected:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 而且这将如预期地失败：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Good, our deliberately silly return value is now no longer fooling our tests,
    so we are allowed to rewrite our view, and tell it to pass the POST parameter
    to the template. The `render` function takes, as its third argument, a dictionary
    which maps template variable names to their values.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，我们故意愚弄的返回值现在不再蒙混我们的测试，所以我们可以重新编写我们的视图，并告诉它将POST参数传递给模板。`render`函数的第三个参数是一个字典，它将模板变量名映射到它们的值。
- en: 'In theory we can use it for the POST case as well as the default GET case,
    so let’s remove the `if request.method == "POST"` and simplify our view right
    down to:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，我们可以将其用于POST情况以及默认的GET情况，所以让我们删除`if request.method == "POST"`并简化我们的视图：
- en: lists/views.py (ch05l010)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py (ch05l010)
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: What do the tests think?
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 测试认为什么？
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: An Unexpected Failure
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个意外的失败
- en: Oops, an *unexpected failure*.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 糟糕，一个*意外的失败*。
- en: 'If you remember the rules for reading tracebacks, you’ll spot that it’s actually
    a failure in a *different* test. We got the actual test we were working on to
    pass, but the unit tests have picked up an unexpected consequence, a regression:
    we broke the code path where there is no POST request.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你记得阅读跟踪back的规则，你会发现实际上是*不同*的测试失败了。我们确实让我们正在处理的实际测试通过了，但单元测试却发现了一个意外的后果，即一个回归：我们打破了没有POST请求路径的代码。
- en: 'This is the whole point of having tests. Yes, perhaps we could have predicted
    this would happen, but imagine if we’d been having a bad day or weren’t paying
    attention: our tests have just saved us from accidentally breaking our application,
    and, because we’re using TDD, we found out immediately. We didn’t have to wait
    for a QA team, or switch to a web browser and click through our site manually,
    and we can get on with fixing it straight away. Here’s how:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是进行测试的全部意义。是的，也许我们可以预料到会发生这种情况，但想象一下，如果我们当时心情不好或者注意力不集中：我们的测试刚刚帮我们避免了意外地破坏我们的应用程序，并且因为我们使用了TDD，我们立即发现了问题。我们不需要等待质量保证团队的检查，也不需要切换到网页浏览器并手动点击我们的网站，我们可以立即着手修复它。具体方法如下：
- en: lists/views.py (ch05l011)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py (ch05l011)
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We use [`dict.get`](http://docs.python.org/3/library/stdtypes.xhtml#dict.get)
    to supply a default value, for the case where we are doing a normal GET request,
    when the POST dictionary is empty.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用[`dict.get`](http://docs.python.org/3/library/stdtypes.xhtml#dict.get)提供一个默认值，用于处理普通的GET请求时POST字典为空的情况。
- en: 'The unit tests should now pass. Let’s see what the functional tests say:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该通过单元测试了。让我们看看功能测试的反应：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tip
  id: totrans-83
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: If your functional tests show you a different error at this point, or at any
    point in this chapter, complaining about a `StaleElementReferenceException`, you
    may need to increase the `time.sleep` explicit wait—​try 2 or 3 seconds instead
    of 1; then read on to the next chapter for a more robust solution.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的功能测试在这一点或本章的任何时候显示不同的错误，并且抱怨`StaleElementReferenceException`，可能需要增加`time.sleep`显式等待时间——尝试2或3秒而不是1；然后继续阅读下一章，找到一个更加稳健的解决方案。
- en: 'Hmm, not a wonderfully helpful error. Let’s use another of our FT debugging
    techniques: improving the error message. This is probably the most constructive
    technique, because those improved error messages stay around to help debug any
    future errors:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，不是一个非常有帮助的错误。让我们使用另一种我们的功能测试调试技术：改进错误消息。这可能是最有建设性的技术，因为这些改进的错误消息会继续帮助调试任何未来的错误：
- en: functional_tests.py (ch05l012)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: functional_tests.py (ch05l012)
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'That gives us a more helpful error message:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就得到了一个更有帮助的错误消息：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Actually, you know what would be even better? Making that assertion a bit less
    clever! As you may remember from [Chapter 4](ch04.xhtml#chapter_philosophy_and_refactoring),
    I was very pleased with myself for using the `any()` function, but one of my Early
    Release readers (thanks, Jason!) suggested a much simpler implementation. We can
    replace all four lines of the `assertTrue` with a single `assertIn`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你知道更好的是什么吗？让那个断言少聪明点！正如你可能从[第四章](ch04.xhtml#chapter_philosophy_and_refactoring)中记得的那样，我为使用`any()`函数感到非常满意，但我的早期版本读者之一（谢谢，Jason！）建议了一个更简单的实现。我们可以用单个`assertIn`替换所有四行的`assertTrue`：
- en: functional_tests.py (ch05l013)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: functional_tests.py (ch05l013)
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Much better. You should always be very worried whenever you think you’re being
    clever, because what you’re probably being is *overcomplicated*.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 好多了。每当你觉得自己很聪明时，你应该非常担心，因为你可能只是*过于复杂化*。
- en: 'Now we get the error message for free:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们免费得到了错误消息：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Consider me suitably chastened.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我适当地反省一下。
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: If, instead, your FT seems to be saying the table is empty (“not found in ['']”),
    check your `<input>` tag—​does it have the correct `name="item_text"` attribute?
    And does it have `method="POST"`? Without them, the user’s input won’t be in the
    right place in `request.POST`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果相反，你的功能测试似乎在说表格为空（“not found in ['']”），检查你的`<input>`标签——它是否有正确的`name="item_text"`属性？它是否有`method="POST"`？如果没有，用户的输入将不会放在`request.POST`的正确位置。
- en: The point is that the FT wants us to enumerate list items with a “1:” at the
    beginning of the first list item.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是功能测试希望我们以“1:”开头列举列表项。
- en: 'The fastest way to get that to pass is with another quick “cheating” change
    to the template:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最快的方法是通过另一个快速的“作弊”更改模板来使其通过：
- en: lists/templates/home.xhtml (ch05l014)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/home.xhtml (ch05l014)
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now we get to the `self.fail(''Finish the test!'')`. If get rid of that and
    finish writing our FT, to add the check for adding a second item to the table
    (copy and paste is our friend), we begin to see that our first cut solution really
    isn’t going to, um, cut it:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来到了`self.fail('Finish the test!')`。如果去掉这个并完成我们的功能测试，添加检查将第二个项目添加到表格中（复制粘贴是我们的朋友），我们开始看到我们的第一次尝试解决方案真的行不通：
- en: functional_tests.py (ch05l015)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: functional_tests.py (ch05l015)
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Sure enough, the functional tests return an error:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，功能测试返回了一个错误：
- en: '[PRE24]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Three Strikes and Refactor
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 三次重复就重构
- en: But before we go further—​we’ve got a bad *code smell*^([5](ch05.xhtml#id319))
    in this FT. We have three almost identical code blocks checking for new items
    in the list table. When we want to apply the DRY principle, I like to follow the
    mantra *three strikes and refactor*. You can copy and paste code once, and it
    may be premature to try to remove the duplication it causes, but once you get
    three occurrences, it’s time to tidy up.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我们继续之前——在这个功能测试中有一个糟糕的*代码异味*^([5](ch05.xhtml#id319))。我们有三个几乎相同的代码块，检查列表表中的新项目。当我们想要应用DRY原则时，我喜欢遵循“三次重复就重构”的口头禅。你可以复制粘贴代码一次，也许试图消除它带来的重复性有点过早，但一旦出现三次，就是时候整理了。
- en: 'Let’s start by committing what we have so far. Even though we know our site
    has a major flaw—​it can only handle one list item—​it’s still further ahead than
    it was. We may have to rewrite it all, and we may not, but the rule is that before
    you do any refactoring, always do a commit:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从目前为止的内容开始提交。尽管我们知道我们的网站有一个主要缺陷——它只能处理一个列表项——但它仍然比以前进步了。我们可能需要重写所有内容，也可能不需要，但规则是在进行任何重构之前，始终先提交：
- en: '[PRE25]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Tip
  id: totrans-112
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Always do a commit before embarking on a refactor.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行重构之前，一定要进行提交。
- en: 'Onto our functional test refactor: let’s use a helper method—​remember, only
    methods that begin with `test_` will get run as tests, so you can use other methods
    for your own purposes:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 进入我们的功能测试重构：让我们使用一个辅助方法——记住，只有以`test_`开头的方法才会作为测试运行，所以你可以使用其他方法来达到你的目的：
- en: functional_tests.py (ch05l016)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: functional_tests.py (ch05l016)
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'I like to put helper methods near the top of the class, between the `tearDown`
    and the first test. Let’s use it in the FT:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢把辅助方法放在类的顶部，`tearDown`和第一个测试之间。让我们在功能测试中使用它：
- en: functional_tests.py (ch05l017)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: functional_tests.py（ch05l017）
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We run the FT again to check that it still behaves in the same way…​
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次运行FT来检查它是否仍然以相同的方式运行...​
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Good. Now we can commit the FT refactor as its own small, atomic change:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。现在我们可以将FT重构为其自己的小型原子更改：
- en: '[PRE29]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: And back to work. If we’re ever going to handle more than one list item, we’re
    going to need some kind of persistence, and databases are a stalwart solution
    in this area.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 回到工作。如果我们要处理多个列表项，我们将需要某种持久化方法，而数据库在这一领域中是一个可靠的解决方案。
- en: The Django ORM and Our First Model
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django ORM和我们的第一个模型
- en: An *Object-Relational Mapper* (ORM) is a layer of abstraction for data stored
    in a database with tables, rows, and columns. It lets us work with databases using
    familiar object-oriented metaphors which work well with code. Classes map to database
    tables, attributes map to columns, and an individual instance of the class represents
    a row of data in the database.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 对象关系映射器（ORM）是一个用于处理数据库中表、行和列数据的抽象层。它让我们使用熟悉的面向对象的隐喻来处理数据库，这些隐喻与代码很好地配合。类映射到数据库表，属性映射到列，类的一个实例表示数据库中的一行数据。
- en: Django comes with an excellent ORM, and writing a unit test that uses it is
    actually an excellent way of learning it, since it exercises code by specifying
    how we want it to work.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Django提供了一个出色的ORM，编写使用它的单元测试实际上是学习它的一个绝佳方法，因为它通过指定我们希望它如何工作来练习代码。
- en: 'Let’s create a new class in *lists/tests.py*:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在*lists/tests.py*中创建一个新类：
- en: lists/tests.py (ch05l018)
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: lists/tests.py（ch05l018）
- en: '[PRE30]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: You can see that creating a new record in the database is a relatively simple
    matter of creating an object, assigning some attributes, and calling a `.save()`
    function. Django also gives us an API for querying the database via a class attribute,
    `.objects`, and we use the simplest possible query, `.all()`, which retrieves
    all the records for that table. The results are returned as a list-like object
    called a `QuerySet`, from which we can extract individual objects, and also call
    further functions, like `.count()`. We then check the objects as saved to the
    database, to check whether the right information was saved.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，在数据库中创建新记录相对来说是一件相当简单的事情，只需创建一个对象，分配一些属性，并调用`.save()`函数。Django还为我们提供了一个通过类属性`.objects`查询数据库的API，我们使用最简单的查询`.all()`，它检索该表的所有记录。结果作为一个称为`QuerySet`的类似列表的对象返回，我们可以从中提取单个对象，并调用更多函数，如`.count()`。然后，我们检查保存到数据库中的对象，以确认是否保存了正确的信息。
- en: Django’s ORM has many other helpful and intuitive features; this might be a
    good time to skim through the [Django tutorial](https://docs.djangoproject.com/en/4.2/intro/tutorial01/),
    which has an excellent intro to them.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Django的ORM具有许多其他有用且直观的功能；现在可能是浏览[Django教程](https://docs.djangoproject.com/en/4.2/intro/tutorial01/)的好时机，该教程对这些功能进行了很好的介绍。
- en: Note
  id: totrans-133
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: I’ve written this unit test in a very verbose style, as a way of introducing
    the Django ORM. I wouldn’t recommend writing your model tests like this “in real
    life”, because it’s testing the framework, rather than testing our own code. We’ll
    actually rewrite this test to be much more concise in [Link to Come] (specifically,
    at [Link to Come]).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经以非常冗长的风格编写了这个单元测试，作为介绍Django ORM的一种方式。我不建议在“现实生活”中像这样编写模型测试，因为这是在测试框架，而不是测试我们自己的代码。我们实际上将重写这个测试，使其在[待定链接]（具体来说，在[待定链接]）上更加简洁。
- en: 'Let’s try running the unit test. Here comes another unit-test/code cycle:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试运行单元测试。这里又来了另一个单元测试/代码循环：
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Very well, let’s give it something to import from *lists/models.py*. We’re
    feeling confident so we’ll skip the `Item = None` step, and go straight to creating
    a class:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 非常好，让我们从*lists/models.py*中给它一些要导入的东西。我们感到很有信心，所以我们将跳过`Item = None`步骤，直接创建一个类：
- en: lists/models.py (ch05l019)
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: lists/models.py（ch05l019）
- en: '[PRE32]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'That gets our test as far as:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们的测试达到了如下程度：
- en: '[PRE33]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'To give our `Item` class a `save` method, and to make it into a real Django
    model, we make it inherit from the `Model` class:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给我们的`Item`类添加一个`save`方法，并使其成为一个真正的Django模型，我们让它继承自`Model`类：
- en: lists/models.py (ch05l020)
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: lists/models.py（ch05l020）
- en: '[PRE34]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Our First Database Migration
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的第一个数据库迁移
- en: 'The next thing that happens is a huuuuge traceback, the long and short of which
    is that there’s a problem with the database:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来发生的事情是一个非常长的回溯，简而言之，与数据库有问题：
- en: '[PRE35]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In Django, the ORM’s job is to model and read and write from database tables,
    but there’s a second system that’s in charge,of actually *creating* the tables
    in the database called “migrations”. Its job is to let you to add, remove, and
    modify tables and columns, based on changes you make to your *models.py* files.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Django 中，ORM 的工作是对数据库表进行建模、读写，但有一个第二系统负责*创建*数据库中的表，称为“迁移”。它的工作是允许你根据对 *models.py*
    文件的更改，添加、删除和修改表和列。
- en: One way to think of it is as a version control system for your database. As
    we’ll see later, it comes in particularly useful when we need to upgrade a database
    that’s deployed on a live server.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 一种思考的方式是把它看作是数据库的版本控制系统。正如我们稍后将看到的，当我们需要升级部署在实时服务器上的数据库时，它特别有用。
- en: For now all we need to know is how to build our first database migration, which
    we do using the `makemigrations` command:^([6](ch05.xhtml#id328))
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们只需要知道如何建立我们的第一个数据库迁移，我们使用 `makemigrations` 命令来做到这一点：^([6](ch05.xhtml#id328))
- en: '[PRE36]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: If you’re curious, you can go and take a look in the migrations file, and you’ll
    see it’s a representation of our additions to *models.py*.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你感兴趣，你可以去查看迁移文件，你会看到它是对我们在 *models.py* 中增加内容的表示。
- en: In the meantime, we should find our tests get a little further.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，我们应该发现我们的测试可以进一步进行。
- en: The Test Gets Surprisingly Far
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试实际上进展得相当顺利
- en: 'The test actually gets surprisingly far:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 测试实际上进展得相当顺利：
- en: '[PRE37]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: That’s a full eight lines later than the last failure—​we’ve been all the way
    through saving the two `Item`s, and we’ve checked that they’re saved in the database,
    but Django just doesn’t seem to have “remembered” the `.text` attribute.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这比上次失败晚了整整八行——我们已经完全保存了两个 `Item`，并检查它们是否保存在数据库中，但 Django 似乎并没有“记住”`.text` 属性。
- en: If you’re new to Python, you might have been surprised that we were allowed
    to assign the `.text` attribute at all. In a language like Java, you would probably
    get a compilation error. Python is more relaxed.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是 Python 新手，也许会对我们被允许分配 `.text` 属性感到惊讶。在像 Java 这样的语言中，你可能会得到一个编译错误。Python
    更加宽松。
- en: 'Classes that inherit from `models.Model` map to tables in the database. By
    default they get an auto-generated `id` attribute, which will be a primary key
    column^([7](ch05.xhtml#id329)) in the database, but you have to define any other
    columns and attributes you want explicitly; here’s how we set up a text column:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `models.Model` 继承的类映射到数据库中的表。默认情况下，它们会得到一个自动生成的 `id` 属性，这将是数据库中的主键列^([7](ch05.xhtml#id329))，但你必须显式定义任何其他列和属性；这是我们如何设置文本列的方式：
- en: lists/models.py (ch05l022)
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: lists/models.py (ch05l022)
- en: '[PRE38]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Django has many other field types, like `IntegerField`, `CharField`, `DateField`,
    and so on. I’ve chosen `TextField` rather than `CharField` because the latter
    requires a length restriction, which seems arbitrary at this point. You can read
    more on field types in the Django [tutorial](https://docs.djangoproject.com/en/4.2/intro/tutorial02/#creating-models)
    and in the [documentation](https://docs.djangoproject.com/en/4.2/ref/models/fields/).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Django 还有许多其他字段类型，如 `IntegerField`、`CharField`、`DateField` 等等。我选择了 `TextField`
    而不是 `CharField`，因为后者在这一点上需要长度限制，这似乎是任意的。你可以在 Django [教程](https://docs.djangoproject.com/en/4.2/intro/tutorial02/#creating-models)
    和 [文档](https://docs.djangoproject.com/en/4.2/ref/models/fields/) 中了解更多关于字段类型的信息。
- en: A New Field Means a New Migration
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新字段意味着新迁移
- en: 'Running the tests gives us another database error:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 运行测试会给我们带来另一个数据库错误：
- en: '[PRE39]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: It’s because we’ve added another new field to our database, which means we need
    to create another migration. Nice of our tests to let us know!
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们向数据库添加了另一个新字段，这意味着我们需要创建另一个迁移。很高兴我们的测试告诉我们！
- en: 'Let’s try it:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试一下：
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Ah. It won’t let us add the column without a default value. Let’s pick option
    2 and set a default in *models.py*. I think you’ll find the syntax reasonably
    self-explanatory:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 啊。它不允许我们添加没有默认值的列。让我们选择选项2，在 *models.py* 中设置一个默认值。我认为你会发现语法相当不难理解：
- en: lists/models.py (ch05l023)
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: lists/models.py (ch05l023)
- en: '[PRE41]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'And now the migration should complete:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在迁移应该已经完成了：
- en: '[PRE42]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: So, two new lines in *models.py*, two database migrations, and as a result,
    the `.text` attribute on our model objects is now recognised as a special attribute,
    so it does get saved to the database, and the tests pass…​
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在 *models.py* 中新增两行，两个数据库迁移，因此，我们的模型对象上的 `.text` 属性现在被识别为特殊属性，因此它确实保存到数据库中，并且测试通过……
- en: '[PRE43]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: So let’s do a commit for our first ever model!
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的第一个模型进行提交！
- en: '[PRE44]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Saving the POST to the Database
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 POST 保存到数据库
- en: 'Let’s adjust the test for our home page POST request, and say we want the view
    to save a new item to the database instead of just passing it through to its response.
    We can do that by adding three new lines to the existing test called `test_can_save_a_POST_request`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们调整我们首页的 POST 请求测试，并说我们希望视图将一个新项目保存到数据库中，而不仅仅是将其传递到其响应中。我们可以通过在现有测试`test_can_save_a_POST_request`中添加三行来实现：
- en: lists/tests.py (ch05l025)
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: lists/tests.py (ch05l025)
- en: '[PRE45]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[![1](assets/1.png)](#co_saving_user_input__testing_the_database_CO3-1)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_saving_user_input__testing_the_database_CO3-1)'
- en: We check that one new `Item` has been saved to the database. `objects.count()`
    is a shorthand for `objects.all().count()`.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查数据库中是否保存了一个新的`Item`。`objects.count()`是`objects.all().count()`的简写。
- en: '[![2](assets/2.png)](#co_saving_user_input__testing_the_database_CO3-2)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_saving_user_input__testing_the_database_CO3-2)'
- en: '`objects.first()` is the same as doing `objects.all()[0]`.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`objects.first()` 相当于 `objects.all()[0]`。'
- en: '[![3](assets/3.png)](#co_saving_user_input__testing_the_database_CO3-3)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_saving_user_input__testing_the_database_CO3-3)'
- en: We check that the item’s text is correct.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查项目的文本是否正确。
- en: 'This test is getting a little long-winded. It seems to be testing lots of different
    things. That’s another *code smell*—a long unit test either needs to be broken
    into two, or it may be an indication that the thing you’re testing is too complicated.
    Let’s add that to a little to-do list of our own, perhaps on a piece of scrap
    paper:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试变得有点冗长了。它似乎在测试很多不同的东西。这是另一个*代码异味*——一个冗长的单元测试要么需要拆分成两个，要么可能表明你正在测试的东西太复杂了。让我们把它加到我们自己的待办事项清单上，或许在一张废纸上：
- en: 'Writing it down on a scratchpad like this reassures us that we won’t forget,
    so we are comfortable getting back to what we were working on. We rerun the tests
    and see an expected failure:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 把它写在这样一个废纸上让我们放心不会忘记，所以我们可以舒心地回到我们正在处理的事情上。我们重新运行测试，看到了一个预期的失败：
- en: '[PRE46]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Let’s adjust our view:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们调整我们的视图：
- en: lists/views.py (ch05l026)
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py (ch05l026)
- en: '[PRE47]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: I’ve coded a very naive solution and you can probably spot a very obvious problem,
    which is that we’re going to be saving empty items with every request to the home
    page. Let’s add that to our list of things to fix later. You know, along with
    the painfully obvious fact that we currently have no way at all of having different
    lists for different people. That we’ll keep ignoring for now.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我编写了一个非常天真的解决方案，你可能已经发现了一个非常明显的问题，那就是我们将会在每次请求首页时保存空项目。让我们把它加到我们稍后要修复的事情清单上。你知道，还有一个非常显而易见的事实，我们目前根本没有办法为不同的人保存不同的列表。我们暂时忽略这一点。
- en: Remember, I’m not saying you should always ignore glaring problems like this
    in “real life”. Whenever we spot problems in advance, there’s a judgement call
    to make over whether to stop what you’re doing and start again, or leave them
    until later. Sometimes finishing off what you’re doing is still worth it, and
    sometimes the problem may be so major as to warrant a stop and rethink.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，我并不是说在“现实生活”中你应该总是忽视这样的显而易见的问题。每当我们提前发现问题时，就需要做出判断，是停下手头的工作重新开始，还是留到以后再解决。有时候完成手头的工作仍然是值得的，有时候问题可能太严重需要停下来重新思考。
- en: Let’s see how the unit tests get on…​
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看单元测试进行得如何……
- en: '[PRE48]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'They pass! Good. Let’s have a little look at our scratchpad. I’ve added a couple
    of the other things that are on our mind:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 它们通过了！很好。让我们来看看我们的废纸。我已经加了几件我们关注的其他事情：
- en: 'Let’s start with the first scratch pad item: *Don’t save blank items for every
    request*. We could tack on an assertion to an existing test, but it’s best to
    keep unit tests to testing one thing at a time, so let’s add a new one:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从第一个草稿项开始：*每次请求都不要保存空项目*。我们可以向现有测试添加一个断言，但最好一次只测试一个单元，所以我们添加一个新的测试：
- en: lists/tests.py (ch05l027)
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: lists/tests.py (ch05l027)
- en: '[PRE49]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'That gives us a `1 != 0` failure. Let’s fix it by bringing the `if request.method`
    check back and putting the Item creation in there:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了 `1 != 0` 的失败。让我们通过重新加上 `if request.method` 检查并将 Item 创建放在其中来修复它：
- en: lists/views.py (ch05l028)
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py (ch05l028)
- en: '[PRE50]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'And that gets the test passing:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这样测试通过：
- en: '[PRE51]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Redirect After a POST
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 POST 请求后重定向
- en: 'But, yuck, those duplicated `request.POST` accesses are making me pretty unhappy.
    Thankfully we are about to have the opportunity to fix it. A view function has
    two jobs: processing user input, and returning an appropriate response. We’ve
    taken care of the first part, which is saving the user’s input to the database,
    so now let’s work on the second part.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，糟糕的是，这些重复的`request.POST`访问让我感到非常不高兴。幸运的是，我们即将有机会修复它。视图函数有两个作业：处理用户输入和返回适当的响应。我们已经处理了第一部分，即将用户输入保存到数据库，现在让我们来处理第二部分。
- en: '[Always redirect after a POST](https://en.wikipedia.org/wiki/Post/Redirect/Get),
    they say, so let’s do that. Once again we change our unit test for saving a POST
    request: instead of expecting a response with the item in it, we want it to expect
    a redirect back to the home page.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '[总是在POST之后重定向](https://en.wikipedia.org/wiki/Post/Redirect/Get)，他们说，所以我们来做吧。我们再次改变我们的单元测试，保存POST请求：不再期望响应包含项目，而是期望重定向回主页。'
- en: lists/tests.py (ch05l029)
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: lists/tests.py (ch05l029)
- en: '[PRE52]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[![1](assets/1.png)](#co_saving_user_input__testing_the_database_CO4-1)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_saving_user_input__testing_the_database_CO4-1)'
- en: We no longer expect a response with HTML content rendered by a template, so
    we lose the `assertContains` calls that looked at that. Instead, we use Django’s
    `assertRedirects` helper which checks that we return an HTTP 302 redirect, back
    to the home URL.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再期望模板渲染的HTML内容作为响应，所以我们不再使用`assertContains`调用。相反，我们使用Django的`assertRedirects`辅助函数来检查我们是否返回了HTTP
    302重定向，回到主页URL。
- en: 'That gives us this expected failure:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们带来了预期的失败：
- en: '[PRE53]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We can now tidy up our view substantially:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以大幅整理我们的视图：
- en: lists/views.py (ch05l030)
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py (ch05l030)
- en: '[PRE54]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'And the tests should now pass:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在测试应该通过了：
- en: '[PRE55]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: We’re at green, time for a little refactor!
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功了，是时候进行一点重构了！
- en: 'Let’s have a look at *views.py* and see what opportunities for improvement
    there might be:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看*views.py*，看看可能存在哪些改进的机会：
- en: lists/views.py
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py
- en: '[PRE56]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[![1](assets/1.png)](#co_saving_user_input__testing_the_database_CO5-1)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_saving_user_input__testing_the_database_CO5-1)'
- en: There’s a quicker way to do these 3 lines with `.objects.create()`
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种更快的方法可以用`.objects.create()`完成这三行代码
- en: '[![2](assets/2.png)](#co_saving_user_input__testing_the_database_CO5-4)'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_saving_user_input__testing_the_database_CO5-4)'
- en: 'This line doesn’t seem quite right now, in fact it won’t work at all. Let’s
    make a note on our scratchpad to sort out passing list items to the template.
    It’s actually closely related to “Display multiple items”, so we’ll put it just
    before that one:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这行看起来不太对劲，实际上根本行不通。让我们在草稿纸上记下注意事项，解决将列表项传递给模板的问题。这与“显示多个项目”密切相关，因此我们将其放在那个之前：
- en: 'And here’s the refactored version of *views.py* using the `.objects.create()`
    helper method that Django provides, for one-line creation of objects:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用Django提供的`.objects.create()`辅助方法重构后的*views.py*版本，用于一行代码创建对象：
- en: lists/views.py (ch05l031)
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py (ch05l031)
- en: '[PRE57]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Better Unit Testing Practice: Each Test Should Test One Thing'
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更好的单元测试实践：每个测试应该只测试一件事情
- en: Let’s address the “POST test is too long” code smell.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解决“POST测试太长”的代码异味。
- en: Good unit testing practice says that each test should only test one thing. The
    reason is that it makes it easier to track down bugs. Having multiple assertions
    in a test means that, if the test fails on an early assertion, you don’t know
    what the statuses of the later assertions are. As we’ll see in the next chapter,
    if we ever break this view accidentally, we want to know whether it’s the saving
    of objects that’s broken, or the type of response.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的单元测试实践说，每个测试应该只测试一件事情。原因是这样可以更容易地追踪错误。如果一个测试在早期断言失败，你不知道后续断言的状态。正如我们将在下一章中看到的那样，如果我们意外地破坏了这个视图，我们想知道是对象保存有问题，还是响应类型有问题。
- en: 'You may not always write perfect unit tests with single assertions on your
    first go, but now feels like a good time to separate out our concerns:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在你第一次编写完美的单元测试并单个断言的时候可能并不总是，但现在感觉是一个分离我们关注的好时机：
- en: lists/tests.py (ch05l032)
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: lists/tests.py (ch05l032)
- en: '[PRE58]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'And we should now see five tests pass instead of four:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该看到五个测试通过而不是四个：
- en: '[PRE59]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Rendering Items in the Template
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在模板中渲染项目
- en: 'Much better! Back to our to-do list:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 好多了！回到我们的待办事项清单：
- en: Crossing things off the list is almost as satisfying as seeing tests pass!
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 将事项从列表中划掉几乎和看到测试通过一样令人满足！
- en: 'The third and fourth items are the last of the “easy” ones. Our view now does
    the right thing for POST requests, it saves new list items to the database. Now
    we want GET requests to load all currently existing list items, and pass them
    to the template for rendering. Let’s have a new unit test for that:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 第三和第四项是“简单”任务的最后一项。我们的视图现在对POST请求执行正确操作，将新列表项保存到数据库。现在我们希望GET请求加载当前存在的所有列表项，并将它们传递给模板进行渲染。让我们为此编写一个新的单元测试：
- en: lists/tests.py (ch05l033)
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: lists/tests.py (ch05l033)
- en: '[PRE60]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'That fails as expected:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 预期的失败：
- en: '[PRE61]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The Django template syntax has a tag for iterating through lists, `{% for ..
    in .. %}`; we can use it like this:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: Django模板语法有一个用于迭代列表的标签 `{% for .. in .. %}`；我们可以像这样使用它：
- en: lists/templates/home.xhtml (ch05l034)
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/home.xhtml (ch05l034)
- en: '[PRE62]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: This is one of the major strengths of the templating system. Now the template
    will render with multiple `<tr>` rows, one for each item in the variable `items`.
    Pretty neat! I’ll introduce a few more bits of Django template magic as we go,
    but at some point you’ll want to go and read up on the rest of them in the [Django
    docs](https://docs.djangoproject.com/en/4.2/topics/templates/).
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这是模板系统的主要优势之一。现在模板将渲染多个 `<tr>` 行，每个变量 `items` 中的项目都会有一行。非常棒！在我们继续的过程中，我会介绍一些更多的Django模板魔法，但你最终会想要阅读其他部分的
    [Django文档](https://docs.djangoproject.com/en/4.2/topics/templates/)。
- en: 'Just changing the template doesn’t get our tests to green; we need to actually
    pass the items to it from our home page view:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 只是改变模板并不能让我们的测试变绿；我们需要实际将项目传递给它，从我们的主页视图：
- en: lists/views.py (ch05l035)
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py (ch05l035)
- en: '[PRE63]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: That does get the unit tests to pass…​moment of truth, will the functional test
    pass?
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实使单元测试通过了…事实的时刻来了，功能测试会通过吗？
- en: '[PRE64]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Oops, apparently not. Let’s use another functional test debugging technique,
    and it’s one of the most straightforward: manually visiting the site! Open up
    *http://localhost:8000* in your web browser, and you’ll see a Django debug page
    saying “no such table: lists_item”, as in [Figure 5-2](#operationalerror).'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '糟糕，显然不行。让我们使用另一种功能测试调试技术，这是其中最直接的之一：手动访问网站！在你的网络浏览器中打开 *http://localhost:8000*，你会看到一个Django调试页面显示“no
    such table: lists_item”，如 [Figure 5-2](#operationalerror) 中所示。'
- en: '![OperationalError at / no such table: lists_item](assets/twp2_0502.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![OperationalError at / no such table: lists_item](assets/twp2_0502.png)'
- en: Figure 5-2\. Another helpful debug message
  id: totrans-259
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 5-2\. 另一个有帮助的调试消息
- en: Creating Our Production Database with migrate
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用migrate创建我们的生产数据库
- en: Another helpful error message from Django, which is basically complaining that
    we haven’t set up the database properly. How come everything worked fine in the
    unit tests, I hear you ask? Because Django creates a special *test database* for
    unit tests; it’s one of the magical things that Django’s `TestCase` does.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个来自Django的有用错误消息，基本上在抱怨我们没有正确设置数据库。你会问为什么在单元测试中一切运行正常？因为Django为单元测试创建了一个特殊的
    *test database*；这是Django的 `TestCase` 所做的神奇之一。
- en: 'To set up our “real” database, we need to explicitly create it. SQLite databases
    are just a file on disk, and you’ll see in *settings.py* that Django, by default,
    will just put it in a file called *db.sqlite3* in the base project directory:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置我们的“真实”数据库，我们需要显式创建它。SQLite数据库只是磁盘上的一个文件，在 *settings.py* 中你会看到，Django默认会将其放在名为
    *db.sqlite3* 的文件中：
- en: superlists/settings.py
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: superlists/settings.py
- en: '[PRE65]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'We’ve told Django everything it needs to create the database, first via *models.py*
    and then when we created the migrations file. To actually apply it to creating
    a real database, we use another Django Swiss Army knife *manage.py* command, `migrate`:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们告诉Django它需要创建数据库的所有内容，首先是通过 *models.py*，然后是在我们创建迁移文件时。要将其应用于创建真正的数据库，我们使用另一个Django瑞士军刀
    *manage.py* 命令，`migrate`：
- en: '[PRE66]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Now we can refresh the page on *localhost*, see that our error is gone, and
    try running the functional tests again:^([8](ch05.xhtml#id351))
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以刷新 *localhost* 上的页面，看到我们的错误消失了，并尝试再次运行功能测试:^([8](ch05.xhtml#id351))
- en: '[PRE67]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'So close! We just need to get our list numbering right. Another awesome Django
    template tag, `forloop.counter`, will help here:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 差一点！我们只需要让我们的列表编号正确。另一个令人惊叹的Django模板标签，`forloop.counter`，在这里会有所帮助：
- en: lists/templates/home.xhtml (ch05l036)
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/home.xhtml (ch05l036)
- en: '[PRE68]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'If you try it again, you should now see the FT gets to the end:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你再试一次，你现在应该会看到功能测试已经到达终点：
- en: '[PRE69]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Hooray!
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 万岁！
- en: But, as it’s running, you may notice something is amiss, like in [Figure 5-3](#items_left_over_from_previous_run).
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当它运行时，你可能会注意到有些问题，就像在 [Figure 5-3](#items_left_over_from_previous_run) 中看到的那样。
- en: '![There are list items left over from the last run of the test](assets/twp2_0503.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![测试的最后运行留下了一些列表项](assets/twp2_0503.png)'
- en: Figure 5-3\. There are list items left over from the last run of the test
  id: totrans-277
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5-3\. 测试的最后运行留下了一些列表项
- en: 'Oh dear. It looks like previous runs of the test are leaving stuff lying around
    in our database. In fact, if you run the tests again, you’ll see it gets worse:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀。看起来之前的测试运行留下了一些东西在我们的数据库里。事实上，如果你再次运行测试，你会发现情况变得更糟：
- en: '[PRE70]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Grrr. We’re so close! We’re going to need some kind of automated way of tidying
    up after ourselves. For now, if you feel like it, you can do it manually, by deleting
    the database and re-creating it fresh with `migrate` (you’ll need to shut down
    your Django server first):'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 噢，糟糕。我们快要成功了！我们需要一种自动化的方式来清理这些。暂时来说，如果你愿意，你可以手动删除数据库，并使用 `migrate` 命令重新创建（你需要先关闭Django服务器）：
- en: '[PRE71]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: And then (after restarting your server!) reassure yourself that the FT still
    passes.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 然后（重新启动服务器后！）确保你的功能测试仍然通过。
- en: Apart from that little bug in our functional testing, we’ve got some code that’s
    more or less working. Let’s do a commit.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们功能测试中的小bug外，我们已经有了大致正常工作的代码。让我们进行一次提交。
- en: 'Start by doing a **`git status`** and a **`git diff`**, and you should see
    changes to *home.xhtml*, *tests.py*, and *views.py*. Let’s add them:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 首先执行 **`git status`** 和 **`git diff`** 命令，你会看到 *home.xhtml*、*tests.py* 和 *views.py*
    有变动。让我们将它们加入：
- en: '[PRE72]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Tip
  id: totrans-286
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: You might find it useful to add markers for the end of each chapter, like **`git
    tag end-of-chapter-05`**.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现，为每一章节添加标记很有用，比如 **`git tag end-of-chapter-05`**。
- en: Recap
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Where are we? How is progress on our app, and what have we learned?
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在哪？我们的应用程序进展如何，我们学到了什么？
- en: We’ve got a form set up to add new items to the list using POST.
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已经设置好一个表单，用于通过POST方式添加新的列表项。
- en: We’ve set up a simple model in the database to save list items.
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在数据库中设置了一个简单的模型来保存列表项。
- en: We’ve learned about creating database migrations, both for the test database
    (where they’re applied automatically) and for the real database (where we have
    to apply them manually).
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已经学习了如何为测试数据库创建数据库迁移（自动应用）以及为实际数据库创建数据库迁移（手动应用）。
- en: 'We’ve used our first couple of Django template tags: `{% csrf_token %}` and
    the `{% for ... endfor %}` loop.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用了我们的第一对Django模板标签：`{% csrf_token %}` 和 `{% for ... endfor %}` 循环。
- en: 'And we’ve used two different FT debugging techniques: `time.sleep`s, and improving
    the error messages.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用了两种不同的FT调试技术：`time.sleep` 和改进错误消息。
- en: But we’ve got a couple of items on our own to-do list, namely getting the FT
    to clean up after itself, and perhaps more critically, adding support for more
    than one list.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们自己的待办列表上还有一些事项，比如让FT自己清理干净，以及更关键地，为多个列表添加支持。
- en: I mean, we *could* ship the site as it is, but people might find it strange
    that the entire human population has to share a single to-do list. I suppose it
    might get people to stop and think about how connected we all are to one another,
    how we all share a common destiny here on Spaceship Earth, and how we must all
    work together to solve the global problems that we face.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 我是说，我们*可以*以现在的状态发布这个网站，但人们可能会觉得奇怪，整个人类都必须共享一个待办事项列表。我想这可能会让人们停下来思考我们在地球飞船上是多么紧密相连，我们在这里共享着共同的命运，并且我们必须共同努力解决我们面临的全球问题。
- en: But in practical terms, the site wouldn’t be very useful.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 但在实际应用中，这个网站可能并不是非常有用。
- en: Ah well.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 哎，算了。
- en: ^([1](ch05.xhtml#id285-marker)) “Geepaw” Hill, another one of the TDD OGs, has
    [a series of blog posts](https://www.geepawhill.org/2021/09/29/many-more-much-smaller-steps-first-sketch/)
    advocating for taking “Many More Much Smaller Steps (MMMSS)”. In this chapter
    I’m being unrealistically *short-sighted* for effect, so don’t do that! But Geepaw
    argues that in the real world, when you slice your work into tiny increments,
    not only do you get there in the end, but you end up delivering business value
    *faster*.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch05.xhtml#id285-marker)) “Geepaw” Hill，另一位TDD OGs之一，提倡采用“更多更小的步骤（MMMSS）”，他在[一系列博客文章](https://www.geepawhill.org/2021/09/29/many-more-much-smaller-steps-first-sketch/)中阐述了这一观点。本章中，我为了效果而过于短视，请不要效仿！但Geepaw认为，在现实世界中，当你将工作切分为微小的增量时，不仅最终能达到目标，而且能更快地提供商业价值。
- en: ^([2](ch05.xhtml#id287-marker)) Did you know that you don’t need a button to
    make a form submit? I can’t remember when I learned that, but readers have mentioned
    that it’s unusual so I thought I’d draw your attention to it.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch05.xhtml#id287-marker)) 你知道吗？其实不需要按钮来使表单提交。我记不得我是什么时候学到这个的了，但读者们提到这很不寻常，所以我想提醒你注意一下。
- en: ^([3](ch05.xhtml#id293-marker)) Another common technique for debugging tests
    is to use `breakpoint()` to drop into a debugger like `pdb`. This is more useful
    for *unit* tests rather than FTs though, because in an FT you usually can’t step
    into actual application code. Personally I only find debuggers useful for really
    fiddly algorithms, which we won’t see in this book.)
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch05.xhtml#id293-marker)) 另一种常见的调试测试的技术是使用`breakpoint()`来进入像`pdb`这样的调试器。这对于*单元*测试比功能测试更有用，因为在功能测试中，通常无法步进到实际的应用程序代码中去。个人而言，我只发现调试器在真正繁琐的算法中有用，而这本书中我们不会看到这种情况。
- en: ^([4](ch05.xhtml#id305-marker)) But we *did* learn about `request.method` and
    `request.POST` right? I know it might seem that I’m overdoing it, but doing things
    in tiny little really does have a lot of advantages, and one of them is that you
    can really think about (or in this case, learn) one thing at a time.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch05.xhtml#id305-marker)) 但是我们确实学习了`request.method`和`request.POST`对吧？我知道这似乎有些过火，但是把事情分解成小的部分确实有很多优点，其中一个是你可以真正地一次只想（或者在这种情况下，学习）一件事情。
- en: ^([5](ch05.xhtml#id319-marker)) If you’ve not come across the concept, a “code
    smell” is something about a piece of code that makes you want to rewrite it. Jeff
    Atwood has [a compilation on his blog Coding Horror](https://blog.codinghorror.com/code-smells/).
    The more experience you gain as a programmer, the more fine-tuned your nose becomes
    to code smells…​
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch05.xhtml#id319-marker)) 如果你还不了解这个概念，那么“代码异味”是指一段代码中让你想要重写的东西。Jeff Atwood
    在他的博客 Coding Horror 上有[一篇合集](https://blog.codinghorror.com/code-smells/)。作为程序员，你积累的经验越多，你的嗅觉对代码异味的感知也就越加敏锐……
- en: ^([6](ch05.xhtml#id328-marker)) If you’ve done a bit of Django before, you may
    be wondering about when we’re going to run “migrate” as well as “makemigrations”?
    Read on; that’s coming up later in the chapter.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](ch05.xhtml#id328-marker)) 如果你之前有一些 Django 的经验，也许你会想知道我们什么时候会运行“migrate”以及“makemigrations”？继续阅读吧；这将在本章稍后讨论。
- en: ^([7](ch05.xhtml#id329-marker)) Database tables usually have a special column
    called a “primary key”, which is the unique identifier for each row in the table.
    It’s worth brushing up on a *tiny* bit of relational database theory, if you’re
    not familiar with the concept or why it’s useful. The top three articles I found
    when searching for “introduction to databases” all seemed pretty good, at the
    time of writing.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: ^([7](ch05.xhtml#id329-marker)) 数据库表通常有一个特殊的列称为“主键”，它是表中每一行的唯一标识符。值得提醒一下关系数据库理论的*一点*小知识，如果你对这个概念或者它的用处不熟悉的话。我在搜索“数据库入门”的时候找到的前三篇文章，当时看来都相当不错。
- en: ^([8](ch05.xhtml#id351-marker)) If you get a different error at this point,
    try restarting your dev server—​it may have gotten confused by the changes to
    the database happening under its feet.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: ^([8](ch05.xhtml#id351-marker)) 如果此时出现不同的错误，请尝试重新启动开发服务器——它可能对正在发生的数据库变更感到困惑。
