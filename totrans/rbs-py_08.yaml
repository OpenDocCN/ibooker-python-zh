- en: Chapter 7\. Adopting Typechecking Practically
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。实际采用类型检查
- en: Many developers dream of the days when they’ll finally work in a completely
    *green-field* project. A green-field project is one that is brand-new, where you
    have a blank slate with your code’s architecture, design, and modularity. However,
    most projects soon become *brown-field*, or legacy code. These projects have been
    around the block a bit; much of the architecture and design has been solidified.
    Making big, sweeping changes will impact real users. The term *brown-field* is
    often seen as derogatory, especially when it feels like you are slogging through
    a big ball of mud.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发人员梦想有一天终于可以在一个全新的绿地项目中工作。绿地项目是全新的项目，你可以在代码的架构、设计和模块化上有一个空白的板子。然而，大多数项目很快就变成了褐地或遗留代码。这些项目已经存在一段时间了；很多架构和设计已经固化。进行重大变更将影响真实用户。术语“褐地”通常被视为贬义，特别是当你感觉自己在浑浊的一团泥中跋涉时。
- en: 'However, not all brown-field projects are a punishment to work in. Michael
    Feathers, author of *Working Effectively With Legacy Code* (Pearson), has this
    to say:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并非所有的褐地项目都是一种惩罚。《与遗留代码高效工作》（Pearson）的作者Michael Feathers这样说：
- en: In a well-maintained system, it might take a while to figure out how to make
    a change, but once you do, the change is usually easy and you feel much more comfortable
    with the system. In a legacy system, it can take a long time to figure out what
    to do, and the change is difficult also.^([1](part0010_split_007.html#idm45644746117528))
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在一个维护良好的系统中，可能需要一段时间来弄清楚如何进行更改，但一旦做到了，更改通常很容易，并且你对系统感到更加舒适。在一个遗留系统中，弄清楚该做什么可能需要很长时间，而且变更也很困难。^([1](part0010_split_007.html#idm45644746117528))
- en: 'Feathers defines legacy code as “code without tests.” I prefer an alternate
    definition: legacy code is simply code where you can no longer discuss the code
    with the developers who wrote it. In lieu of that communication, you rely on the
    codebase itself to describe its behavior. If the codebase clearly communicates
    its intentions, it is a well-maintained system that is easy to work in. It may
    take a little bit of time to understand it all, but once you do, you are able
    to add features and evolve the system. However, if that codebase is difficult
    to understand, you will face an uphill battle. That code becomes unmaintainable.
    This is why robustness is paramount. Writing robust code eases the transition
    from green-field to brown-field by making the code more maintainable.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Feathers将遗留代码定义为“没有测试的代码”。我更倾向于另一种定义：遗留代码就是那些你无法再与编写它的开发人员讨论代码的代码。在没有那种交流的情况下，你依赖代码库本身来描述其行为。如果代码库清楚地传达了其意图，那么这是一个维护良好的系统，易于操作。可能需要一点时间来理解它，但一旦理解了，你就能够添加功能并发展系统。然而，如果那个代码库难以理解，你将面临一场艰苦的战斗。那些代码变得难以维护。这就是为什么健壮性至关重要。编写健壮的代码通过使代码更易于维护，从绿地向褐地的过渡更加顺畅。
- en: 'Most of the type annotation strategies that I’ve shown in the first part of
    this book are easier to adopt when a project is new. Adopting these practices
    in a mature project is more challenging. It is not impossible, but the cost may
    be higher. This is the heart of engineering: making smart decisions about trade-offs.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我在本书的第一部分展示的大多数类型注解策略在项目刚开始时更容易采用。在成熟项目中采用这些实践更具挑战性。这并非不可能，但成本可能更高。这是工程的核心：在权衡中做出明智的决策。
- en: Trade-offs
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权衡
- en: 'Every decision you make involves a trade-off. Lots of developers focus on the
    classic time versus space trade-off in algorithms. But there are plenty of other
    trade-offs, often involving intangible qualities. I’ve already covered the benefits
    of a typechecker quite extensively throughout this first part of the book:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 每个决策都涉及权衡。许多开发人员关注算法中经典的时间与空间权衡。但还有许多其他权衡，通常涉及无形的特质。我已经在本书的第一部分广泛介绍了类型检查器的好处：
- en: A typechecker increases communication and reduces the chances of bugs.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型检查器增加了沟通，并减少了出错的机会。
- en: A typechecker provides a safety net for making changes and increases the robustness
    of your codebase.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型检查器为进行变更提供了安全网，并增强了代码库的健壮性。
- en: A typechecker allows you to deliver functionality faster.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型检查器能让你更快地提供功能。
- en: 'But what are the costs? Adopting type annotations is not free, and they only
    get worse the larger your codebase is. These costs include:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，成本是什么？采用类型注解并非免费，而且随着代码库的增大而变得更糟。这些成本包括：
- en: The need for buy-in. Depending on culture, it might take some time convincing
    an organization to adopt typechecking.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要获得认同。根据文化背景，说服一个组织采用类型检查可能需要一些时间。
- en: Once you have buy-in, there is an initial cost of adoption. Developers don’t
    start type annotating their code overnight, and it takes time before they grok
    it. They need to learn it and experiment before they are on board.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦获得认同，就会有采用的初始成本。开发人员不会一夜之间开始为他们的代码添加类型注解，他们需要时间才能理解它。他们需要学习和实验，然后才能接受。
- en: It takes time and effort to adopt tooling. You need centralized checking of
    some fashion, and developers need to familiarize themselves with running the tooling
    as part of their workflows.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采用工具需要时间和精力。您需要以某种方式进行集中检查，并且开发人员需要熟悉在工作流程中运行这些工具。
- en: It will take time to write type annotations in your codebase.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的代码库中写入类型注解需要时间。
- en: As type annotations are checked, developers will have to get used to the slowdown
    in fighting the typechecker. There is additional cognitive overload in thinking
    about types.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当类型注解被检查时，开发人员将不得不习惯于在与类型检查器的战斗中减速。在思考类型时会有额外的认知负担。
- en: 'Developer time is expensive, and it is easy to focus on what else those developers
    could be doing. Adopting type annotations is not free. Worse, with a large enough
    codebase, these costs can easily dwarf the initial benefit you get from typechecking.
    The problem is fundamentally a chicken-and-egg conundrum. You won’t see benefits
    for annotating types until you have written enough types in your codebase. However,
    it is tough to get buy-in for writing types when the benefit isn’t there early
    on. You can model your value as such:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员的时间是昂贵的，而且很容易集中精力在那些开发人员可能在做的其他事情上。采用类型注解并非免费。更糟糕的是，对于足够庞大的代码库来说，这些成本很容易超过类型检查所带来的初始好处。问题本质上是一个鸡和蛋的困境。在代码库中写入足够的类型之前，您不会看到类型注解的好处。然而，在早期没有这些好处的情况下获得认同编写类型是困难的。您可以将您的价值建模为：
- en: Value = (Total Benefits) − (Total Costs)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 价值 =（总收益）-（总成本）
- en: Your benefits and costs will follow a curve; they are not linear functions.
    I’ve outlined the basic shapes of the curves in [Figure 7-1](part0010_split_001.html#cost_benefit_curves).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您的收益和成本将遵循一条曲线；它们不是线性函数。我已经概述了[图7-1](part0010_split_001.html#cost_benefit_curves)中曲线的基本形状。
- en: '![Cost and benefit curves over time](../images/00012.gif)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![随时间变化的成本和收益曲线](../images/00012.gif)'
- en: Figure 7-1\. Cost and benefit curves over time
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7-1\. 随时间变化的成本和收益曲线
- en: I’ve purposely left off the range, because the scale will change depending on
    the size of your codebase, but the shapes remain the same. Your costs will start
    out high, but get easier as adoption increases. Your benefits will start off low,
    but as you annotate your codebase, you will see more value. You won’t see a return
    on investment until these two curves meet. To maximize value, you need to reach
    that intersection as early as possible.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我故意没有列出范围，因为规模会根据您的代码库大小而变化，但形状保持不变。您的成本将一开始很高，但随着采用增加，会变得更容易。您的收益一开始很低，但随着注释代码库，您将看到更多价值。直到这两条曲线相交，您才会看到投资回报。为了最大化价值，您需要尽早达到这个交点。
- en: Breaking Even Earlier
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更早地实现收支平衡
- en: To maximize the benefits of type annotations, you need to either get value earlier
    or decrease your costs earlier. The intersection of these two curves is a break-even
    point; this is where the amount of effort that you’re expending is paid back by
    the value you are receiving. You want to reach this point as fast as sustainably
    possible so that your type annotations have a positive impact. Here are some strategies
    to do that.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要最大化类型注解的收益，您需要尽早获得价值或尽早减少成本。这两条曲线的交点是一个收支平衡点；这是您的付出努力与您所获得价值相抵消的地方。您希望尽快可持续地达到这一点，以便您的类型注解产生积极影响。以下是一些实现这一目标的策略。
- en: Find Your Pain Points
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 找到您的痛点
- en: 'One of the best ways to produce value is to reduce the pain you are currently
    experiencing. Ask yourself: where do I currently lose time in my process? Where
    do I lose money? Take a look at your test failures and customer bugs. These error
    cases incur real costs; you should be doing root cause analysis. If you find that
    a common root cause can be fixed by type annotations, you have a solid case for
    type annotation adoption. Here are specific bug classes you need to keep an eye
    out for:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 创造价值的最佳方式之一是减少您当前正在经历的痛苦。问问自己：我目前的过程中哪些地方花费了我的时间？我在哪里损失了金钱？看看您的测试失败和客户反馈。这些错误案例造成了实际成本；您应该进行根本原因分析。如果发现通过类型注释可以修复常见的根本原因，那么您有充分的理由采用类型注释。以下是您需要密切关注的特定错误类别：
- en: Any error surrounding `None`
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何关于`None`的错误
- en: Invalid attribute access, such as trying to access variables of functions on
    the wrong type
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无效的属性访问，例如试图在错误的类型上访问函数的变量
- en: Errors surrounding type conversions such as integers versus strings, bytes versus
    strings, or lists versus tuples
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于类型转换的错误，例如整数与字符串、字节与字符串或列表与元组
- en: Also, talk to the people who have to work in the codebase itself. Root out the
    areas that are a constant source of confusion. If developers have trouble with
    certain parts of the codebase today, it’s likely that future developers will struggle
    too.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，与必须在代码库中工作的人交谈。排查那些经常引起困惑的区域。如果开发人员今天在代码库的某些部分遇到问题，未来的开发人员可能也会遇到困难。
- en: Don’t forget to talk to those who are invested in your codebase but maybe don’t
    directly work in it, such as your tech support, product management, and QA. They
    often have a unique perspective on painful areas of the codebase that might not
    be apparent when looking through the code. Try to put these costs into concrete
    terms, such as time or money. This will be invaluable in evaluating where type
    annotations will be of benefit.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了与那些对您的代码库有投资但可能不直接在其中工作的人交谈，例如技术支持、产品管理和质量保证。他们通常对代码库中的痛点有独特的看法，这在查看代码时可能不明显。尝试将这些成本转化为具体的术语，比如时间或金钱。这在评估类型注释将带来益处的地方将是非常宝贵的。
- en: Target Code Strategically
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有策略地定位代码
- en: You may want to focus on trying to receive value earlier. Type annotations do
    not appear overnight in a large codebase. Instead, you will need to identify specific
    and strategic areas of code to target for type annotations. The beauty of type
    annotations is that they are completely optional. By typechecking just these areas,
    you very quickly see benefits without a huge up-front investment. Here are some
    strategies that you might employ to selectively type annotate your code.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望专注于尽早获得价值。类型注释不会在大型代码库中一夜之间出现。相反，您将需要确定具体且战略性的代码区域以便进行类型注释。类型注释的美妙之处在于它们是完全可选的。通过仅对这些区域进行类型检查，您可以非常快速地看到好处，而无需巨大的前期投入。以下是您可能采用的一些策略，以选择性地对代码进行类型注释。
- en: Type annotate new code only
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 仅对新代码进行类型注释
- en: 'Consider leaving your current unannotated code the way it is and annotate code
    based on these two rules:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑保持当前的未注释代码不变，并根据以下两个规则注释代码：
- en: Annotate any new code that you write.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释您编写的任何新代码。
- en: Annotate any old code that you change.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释您更改的任何旧代码。
- en: Throughout time, you’ll build out your type annotations in all code except code
    that hasn’t been changed in a long time. Code that hasn’t been changing is relatively
    stable, and is probably not read too often. Type annotating it is not likely to
    gain you much benefit.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，您将在所有代码中构建出类型注释，除了长时间没有更改的代码。长时间没有更改的代码相对稳定，可能不经常被阅读。为其进行类型注释不太可能为您带来太多好处。
- en: Type annotate from the bottom up
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从下往上类型注释
- en: Your codebase may depend on common areas of code. These are your core libraries
    and utilities that serve as a foundation upon which everything else is built.
    Type annotating these parts of your codebase makes your benefit less about depth
    and more about breadth. Because so many other pieces sit atop this foundation,
    they will all reap the benefits of typechecking. New code will quite often depend
    on these utilities as well, so your new code will have an extra layer of protection.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码库可能依赖于常见的代码区域。这些是你的核心库和实用程序，它们作为一切构建的基础。对代码库中的这些部分进行类型注释使你的收益更多地体现在广度上而不是深度上。因为许多其他部分都位于这个基础之上，它们都将受益于类型检查。新代码很常常也会依赖于这些实用程序，因此你的新代码将具有额外的保护层。
- en: Type annotate your moneymakers
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对你的赚钱代码进行类型注释
- en: In some codebases, there is a clear separation between the core business logic
    and all the rest of the code that supports your business logic. Your *business
    logic* is the area of your system that is most responsible for delivering value.
    It might be the core reservation system for a travel agency, an ordering system
    in a restaurant, or a recommendation system for media services. All of the rest
    of the code (such as logging, messaging, database drivers, and user interface)
    exists to support your business logic. By type annotating your business logic,
    you are protecting a core part of your codebase. This code is often long-lived,
    making it an easy win for long-lasting value.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些代码库中，核心业务逻辑与支持业务逻辑的所有其他代码之间存在明显的分离。你的*业务逻辑*是系统中最负责提供价值的部分。它可能是旅行社的核心预订系统，餐厅的订单系统，或者媒体服务的推荐系统。所有其他代码（例如日志记录、消息传递、数据库驱动程序和用户界面）存在的目的是支持你的业务逻辑。通过对业务逻辑进行类型注解，你正在保护代码库的核心部分。这些代码通常存在较长的生命周期，使其成为长期价值的简单获得。
- en: Type annotate the churners
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对代码变动频繁的部分进行类型注解
- en: Some parts of your codebase change way more often than the others. Every time
    a piece of code changes, you run the risk of an incorrect assumption introducing
    a bug. The whole point of robust code is to lessen the chance of introducing errors,
    so what better place to protect than the code that changes the most often? Look
    for your code that has many different commits in version control, or analyze which
    files have the most lines of code changed over a time period. Also take a look
    at which files have the most committers; this is a great indication that this
    is an area where you can shore up type annotations for communication purposes.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码库中有些部分的变化频率远高于其他部分。每次代码变动时，都存在着错误假设引入 bug 的风险。健壮代码的整个重点在于减少引入错误的机会，那么有什么比经常变化的代码更好的地方来保护呢？查找在版本控制中有许多不同提交的代码，或者分析哪些文件在一段时间内改动的代码行数最多。还要看一下哪些文件有最多的提交者；这是一个很好的指示，表明这是一个你可以加强类型注解以进行沟通的区域。
- en: Type annotate the complex
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对复杂代码进行类型注解
- en: If you come across some complex code, it will take some time to understand.
    After understanding that code, the best thing you can do is reduce the complexity
    for the next developer who reads the code. Refactoring the code, improving naming,
    and adding comments are all fantastic ways to improve comprehension, but consider
    also adding more type annotations. Type annotations will help developers understand
    what types are used, how to call functions, and how to deal with return values.
    Type annotations provide additional documentation for complex code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到了一些复杂的代码，理解它将需要一些时间。在理解该代码之后，你可以为下一个阅读代码的开发人员减少复杂性。重构代码、改进命名和添加注释都是提高理解能力的绝佳方法，但也要考虑添加更多类型注解。类型注解将帮助开发人员理解使用的类型、如何调用函数以及如何处理返回值。类型注解为复杂代码提供了额外的文档。
- en: Discussion Topic
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论话题
- en: Which of these strategies would benefit your codebase the most? Why does that
    strategy work best for you? What would the cost be to implement that strategy?
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这些策略中哪些对你的代码库最有益？为什么这种策略对你最有效？实施该策略的成本是多少？
- en: Lean on Your Tooling
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 倚赖你的工具
- en: 'There are things that computers do well, and there are things that humans do
    well. This section is about the former. When trying to adopt type annotations,
    there are some fantastic things that automated tooling can assist with. First,
    let’s talk about the most common typechecker out there: mypy.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有些事情计算机做得很好，有些事情人类做得很好。这一部分是关于前者的。在尝试采用类型注解时，自动化工具可以提供一些极好的帮助。首先，让我们来谈谈目前最常见的类型检查器：mypy。
- en: I’ve covered the configuration of mypy quite extensively in [Chapter 6](part0009_split_000.html#typechecker),
    but there are a few more options I’d like to delve into that will help you adopt
    typechecking. One of the biggest problems you will run into is the sheer number
    of errors that mypy will report the first time you run it on a larger codebase.
    The biggest mistake you can make in this situation is to keep the hundreds (or
    thousands) of errors turned on and hope that developers whittle away at the errors
    over time.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我在[第 6 章](part0009_split_000.html#typechecker)中对 mypy 的配置进行了相当详细的介绍，但还有一些我想深入探讨的选项，这些选项将帮助您采用类型检查。你将遇到的最大问题之一是，在较大的代码库上第一次运行
    mypy 时，它将报告的错误数量之多。在这种情况下，你可能犯的最大错误就是保持数百（或数千）个错误，并希望开发人员随着时间的推移逐渐消除这些错误。
- en: These errors will not get fixed in any quick fashion. If these errors are always
    turned on, you will not see the benefits of a typechecker, because it will be
    nearly impossible to detect new errors. Any new issue will simply be lost in the
    noise of the multitude of other issues.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'With mypy, you can tell the typechecker to ignore certain classes of errors
    or modules through configuration. Here’s a sample mypy file, which globally warns
    if `Any` types are returned, and sets config options on a per-module basis:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using this format, you can pick and choose which errors your typechecker tracks.
    You can mask all of your existing errors, while focusing on fixing new errors.
    Be as specific as possible in defining which errors get ignored; you don’t want
    to mask new errors that show up in unrelated parts of the code.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'To be even more specific, mypy will ignore any line commented with `# type:
    ignore`.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Warning
  id: totrans-58
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`# type: ignore` should not be an excuse to be lazy! When writing new code,
    don’t ignore type errors—fix them as you go.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Your first goal for adopting type annotations is to get a completely clean run
    of your typechecker. If there are errors, you either need to fix them with annotations
    (recommended) or accept that not all errors can be fixed soon and ignore them.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'Over time, make sure the number of ignored sections of code decreases. You
    can track the number of lines containing `# type : ignore` or the number of configuration
    file sections that you are using; no matter what, strive to ignore as few sections
    as you can (within reasonable limits, of course—there is a law of diminishing
    returns).'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: I also recommend turning the `warn_unused_ignores` flag on in your mypy configuration,
    which will warn when an ignore directive is no longer required.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Now, none of this helps you get any closer to actually annotating your codebase;
    it just gives you a starting point. To help annotate your codebase with tooling,
    you will need something that can automatically insert annotations.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: MonkeyType
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[MonkeyType](https://github.com/Instagram/MonkeyType) is a tool that will automatically
    annotate your Python code. This is a great way to typecheck a large amount of
    code without a lot of effort.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'First install MonkeyType with `pip`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Suppose your codebase controls an automatic chef with robotic arms that is
    capable of cooking perfect food every time. You want to program the chef with
    my family’s favorite recipe, Pasta with Italian Sausage:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](../images/00002.gif)](part0010_split_006.html#co_adopting_typechecking_practically_CO1-1)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Definition of all ingredients
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](../images/00005.gif)](part0010_split_006.html#co_adopting_typechecking_practically_CO1-2)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Function to make pasta with sausage
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](../images/00006.gif)](part0010_split_006.html#co_adopting_typechecking_practically_CO1-3)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Prepping instructions
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](../images/00007.gif)](part0010_split_006.html#co_adopting_typechecking_practically_CO1-4)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Cooking instructions
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](../images/00008.gif)](part0010_split_006.html#co_adopting_typechecking_practically_CO1-5)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](../images/00008.gif)](part0010_split_006.html#co_adopting_typechecking_practically_CO1-5)'
- en: Serving instructions
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用说明
- en: I’ve left out a lot of the helper functions to save space, but this gives you
    an idea of what I’m trying to achieve. You can see the full example in the [GitHub
    repo](https://github.com/pviafore/RobustPython) that accompanies this book.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我省略了很多辅助函数以节省空间，但这让您了解我试图实现的内容。您可以在附带本书的[GitHub仓库](https://github.com/pviafore/RobustPython)中查看完整示例。
- en: Throughout the entire example, I have zero type annotations. I don’t want to
    write all the type annotations by hand, so I’ll use MonkeyType. To help, I can
    generate *stub files* to create type annotations. Stub files are files that just
    contain function signatures.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个示例中，我没有任何类型注释。我不想手动编写所有的类型注释，因此我将使用MonkeyType。为了帮助，我可以生成*存根文件*来创建类型注释。存根文件只包含函数签名。
- en: 'In order to generate the stub files, you have to run your code. This is an
    important detail; MonkeyType will only annotate code that you run first. You can
    run specific scripts like so:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成存根文件，您必须运行您的代码。这是一个重要的细节；MonkeyType只会注释您先运行的代码。您可以像这样运行特定脚本：
- en: '[PRE4]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will generate a `SQLite` database that stores all the function calls made
    throughout the execution of that program. You should try to run as many parts
    of your system as you can in order to populate this database. Unit tests, integration
    tests, and test programs all contribute to populating the database.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个`SQLite`数据库，其中存储了程序执行过程中的所有函数调用。您应该尽可能运行系统的多个部分以填充此数据库。单元测试，集成测试和测试程序都有助于填充数据库。
- en: Tip
  id: totrans-85
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Because MonkeyType works by instrumenting your code using `sys.setprofile`,
    other instrumentation such as code coverage and profiling will not work at the
    same time. Any tool that uses instrumentation will need to be run separately.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因为MonkeyType通过使用`sys.setprofile`来仪器化您的代码工作，其他仪器化，如代码覆盖率和分析，将无法同时工作。任何使用仪器化的工具都需要单独运行。
- en: 'Once you have run through as many paths of your code as you want, you can generate
    the stub files:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当您通过代码的多条路径后，可以生成存根文件：
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will output the stub file for this specific module:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出此特定模块的存根文件：
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It won’t annotate everything, but it will certainly give you more than enough
    of a head start in your codebase. Once you are comfortable with the suggestions,
    you can apply them with `monkeytype apply <module-name>`. Once these annotations
    have been generated, search through the codebase for any use of `Union`. A `Union`
    tells you that more than one type has been passed to that function as part of
    the execution of your code. This is a *code smell*, or something that looks a
    little funny, even if it’s not totally wrong (yet). In this case, the use of a
    `Union` may indicate unmaintainable code; your code is receiving different types
    and might not be equipped to handle them. If wrong types are passed as a parameter,
    that’s a likely sign that assumptions have been invalidated somewhere along the
    way.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 它不会注释所有内容，但肯定会为您的代码库提供足够的起步。一旦您对建议感到满意，可以使用`monkeytype apply <module-name>`应用它们。生成这些注释后，搜索代码库中任何使用`Union`的地方。`Union`告诉您在代码执行过程中，该函数作为参数传递了多种类型。这是一种*代码异味*，或者即使不完全错误（尚未），看起来有些奇怪的东西。在这种情况下，使用`Union`可能表示代码难以维护；您的代码接收到不同类型可能并不具备处理它们的能力。如果参数传递错误类型，这很可能表明某处的假设已被无效化。
- en: 'To illustrate, the stubs for my `recipe_maker` contain a `Union` in one of
    my function signatures:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 举例说明，我的`recipe_maker`存根包含一个函数签名中的`Union`：
- en: '[PRE7]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The parameter `heat_level` has taken a `HeatLevel` in some cases and an integer
    in other cases. Looking back at my recipe, I see the following lines of code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 参数`heat_level`在某些情况下采用了`HeatLevel`，在其他情况下采用了整数。回顾我的配方，我看到以下代码行：
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Whether this is an error or not depends on the implementation of the function.
    In my case, I want to be consistent, so I would change the integer usage to `Enum`
    usage. For your codebase, you will need to determine what is acceptable and what
    is not.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是否是错误取决于函数的实现。在我的情况下，我希望保持一致，因此我会将整数用法更改为`Enum`用法。对于您的代码库，您需要确定什么是可接受的，什么是不可接受的。
- en: Pytype
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Pytype
- en: 'One of the problems with MonkeyType is that it only annotates code it sees
    at runtime. If there are branches of your code that are costly or unable to be
    run, MonkeyType will not help you that much. Fortunately, a tool exists to fill
    in this gap: [Pytype](https://github.com/google/pytype), written by Google. Pytype
    adds type annotations through static analysis, which means it does not need to
    run your code to figure out types.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: MonkeyType的一个问题是它只会注释运行时看到的代码。如果您的代码有一些成本高昂或无法运行的分支，MonkeyType将无法为您提供太多帮助。幸运的是，有一个工具填补了这个空白：[Pytype](https://github.com/google/pytype)，由Google编写。Pytype通过静态分析添加类型注解，这意味着它不需要运行您的代码来确定类型。
- en: 'To run Pytype, install it with `pip`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行Pytype，请使用`pip`进行安装：
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, run Pytype against your code folder (e.g., *code_examples/chapter7*):'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在您的代码文件夹上运行Pytype（例如，*code_examples/chapter7*）：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This will generate a set of *.pyi* files in a *.pytype* folder. These are very
    similar to the stub files that MonkeyType created. They contain annotated function
    signatures and variables that you can then copy into your source files.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在*.pytype*文件夹中生成一组*.pyi*文件。这些文件与MonkeyType创建的存根文件非常相似。它们包含了带有注释的函数签名和变量，您可以将其复制到您的源文件中。
- en: Pytype offers other intriguing benefits as well. Pytype is not just a type annotator;
    it is a full linter and typechecker. It has a different typechecking philosophy
    than other typecheckers such as mypy, Pyright, and Pyre.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Pytype还提供其他有趣的好处。Pytype不仅仅是一种类型注解工具；它还是一个完整的检查器和类型检查工具。它与其他类型检查器（如mypy、Pyright和Pyre）具有不同的类型检查哲学。
- en: Pytype will use inference to do its typechecking, which means it will typecheck
    your code even in the absence of type annotations. This is a great way to get
    the benefit of a typechecker without having to write types throughout your codebase.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Pytype将使用推断来进行类型检查，这意味着即使在缺少类型注解的情况下，它也将对您的代码进行类型检查。这是在不必在整个代码库中编写类型的情况下获得类型检查器好处的一个很好的方法。
- en: 'Pytype is also a little more lenient on types changing in the middle of their
    lifetime. This is a boon for those who fully embrace Python’s dynamically typed
    nature. As long as code will work at runtime, Pytype is happy. For instance:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Pytype对类型在其生命周期中改变也更加宽容。这对于完全接受Python动态类型特性的人来说是一个福音。只要代码在运行时能够工作，Pytype就很高兴。例如：
- en: '[PRE11]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this case, names will start off as a list of `Ingredients`. If water is not
    among the ingredients, I add the string “water” to the list. At this point, the
    list is heterogeneous; it contains both ingredients and strings. If you were to
    annotate names as a `list[Ingredient]`, mypy would error out in this case. I would
    typically throw a red flag here as well; heterogeneous collections are harder
    to reason about in the absence of good type annotations. However, the next line
    renders both mypy and my objections moot. Everything is getting converted to a
    string when returned, which fulfills the annotation of the expected return type.
    Pytype is intelligent enough to detect this and consider this code to have no
    issues.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，名称将首先作为一个`Ingredients`列表。如果水不在配料中，我会将字符串“water”添加到列表中。此时，列表是异构的；它既包含配料又包含字符串。如果您将名称注释为`list[Ingredient]`，mypy将在这种情况下报错。在这里，我通常也会提出异构集合的一个红旗；在没有良好类型注解的情况下，这些集合很难推理。然而，下一行使mypy和我的反对都变得无关紧要。当返回时，一切都被转换为字符串，这符合预期的返回类型注解。Pytype足够智能，能够检测到这一点，并认为此代码没有问题。
- en: Pytype’s leniency and approach to typechecking make it very forgiving for adopting
    into existing codebases. You don’t need any type annotations in order to see the
    value. This means you get all the benefits of a typechecker with very minimal
    work. High value, but low cost? Yes, please.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Pytype的宽容度和类型检查方法使其非常适合用于现有代码库。您无需添加任何类型注解即可看到价值。这意味着您可以在非常少的工作量下获得类型检查器的所有好处。高价值，低成本？当然。
- en: However, Pytype is a double-edged sword in this case. Make sure you don’t use
    Pytype as a crutch; you should still be writing type annotations. It becomes incredibly
    easy with Pytype to think that you don’t need type annotations at all. However,
    you should still write them for two reasons. Firstly, type annotations provide
    a documentation benefit, which helps your code’s readability. Secondly, Pytype
    will be able to make even more intelligent decisions if type annotations are present.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在这种情况下，Pytype是一把双刃剑。确保您不要将Pytype用作支架；您仍应编写类型注解。通过Pytype，认为您根本不需要类型注解变得非常容易。然而，出于两个原因，您仍应编写它们。首先，类型注解提供了文档化的好处，这有助于提高代码的可读性。其次，如果存在类型注解，Pytype将能够做出更加智能的决策。
- en: Closing Thoughts
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结思路
- en: 'Type annotations are incredibly useful, but there is no denying their cost.
    The larger the codebase, the higher the cost will be for practically adopting
    type annotations. Every codebase is different; you need to evaluate the value
    and cost of type annotations for your specific scenario. If type annotations are
    too costly to adopt, consider three strategies to get past that hurdle:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 类型注解非常有用，但它们的成本不可否认。代码库越大，实际采用类型注解的成本就越高。每个代码库都是不同的；您需要评估特定情景下类型注解的价值和成本。如果类型注解的成本过高，请考虑以下三种策略来克服这一障碍：
- en: Find pain points
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 找到痛点
- en: If you can eliminate entire classes of pain points through type annotations,
    such as errors, broken tests, or unclear code, you will save time and money. You
    target the areas that hurt the most, and by lessening that pain you are making
    it easier for developers to deliver value over time (which is a sure sign of maintainable
    code).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您可以通过类型注解消除错误、破损测试或不清晰代码等整类痛点，那么您将节省时间和金钱。您的目标是解决最痛的领域，通过减轻痛苦使开发人员随着时间的推移更轻松地交付价值（这是可维护代码的明确标志）。
- en: Target code strategically
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 策略性地定位代码目标
- en: Pick your spots wisely. In a large codebase, it will be near impossible to annotate
    every meaningful part of your code. Instead, focus on smaller sections that would
    see a huge benefit.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 明智地选择位置。在大型代码库中，注解每个有意义的代码部分几乎是不可能的。相反，重点放在能够获得巨大收益的较小部分上。
- en: Lean on your tooling
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖您的工具
- en: Use mypy to help you selectively ignore files (and make sure that you are ignoring
    fewer lines of code over time). Use type annotators such as MonkeyType and Pytype
    to quickly generate types throughout your code. Don’t discount Pytype as a typechecker
    either, as it can find bugs lurking in your code with minimal setup.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用mypy帮助您选择性地忽略文件（并确保随着时间的推移忽略的代码行数越来越少）。使用MonkeyType和Pytype等类型注解工具，快速在整个代码中生成类型。不要忽视Pytype作为类型检查器，因为它可以在最小设置的情况下发现代码中潜藏的错误。
- en: This wraps up [Part I](part0004.html#part_1) of the book. It has focused exclusively
    on type annotations and typechecking. Feel free to mix and match the strategies
    and tools I’ve discussed. You don’t need to type annotate absolutely everything,
    as type annotations can constrain expressiveness if too strictly applied. But
    you should strive to clarify code and make it harder for bugs to crop up. You
    will find the balance over time, but you need to start thinking about types in
    Python and how you can express them to other developers. Remember, the goal is
    a maintainable codebase. People need to understand as much of your intentions
    as they can from the code alone.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这是书的[第一部分](part0004.html#part_1)的总结。它专注于类型注解和类型检查。请随意混合和匹配我讨论的策略和工具。您不需要对所有内容都进行类型注解，因为如果严格应用，类型注解可能会限制表达能力。但是，您应该努力澄清代码并使其更难出现错误。随着时间的推移，您将找到平衡点，但您需要开始思考在Python中如何表达类型以及如何向其他开发人员解释它们的意图。记住，目标是可维护的代码库。人们需要能够从代码本身理解尽可能多的您意图。
- en: In [Part II](part0011.html#part_2), I’m going to focus on creating your own
    types. You’ve seen a little of this with building your own collection types, but
    you can go so much further. You’ll learn about enumerations, data classes, and
    classes, and learn why you should pick one over the other. You’ll learn how to
    craft an API and subclass types and model your data. You’ll continue to build
    a vocabulary that improves readability in your codebase.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第二部分](part0011.html#part_2)，我将重点介绍如何创建自己的类型。您已经通过构建自己的集合类型稍微了解了一些内容，但您可以做得更多。您将学习枚举、数据类和类，并了解为什么应该选择一个而不是另一个。您将学习如何设计API并对类型进行子类化和建模。您将继续建立提高代码库可读性的词汇表。
- en: '^([1](part0010_split_000.html#idm45644746117528-marker)) Michael C. Feathers.
    *Working Effectively with Legacy Code*. Upper Saddle River, NJ: Pearson, 2013.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '^([1](part0010_split_000.html#idm45644746117528-marker)) 迈克尔·C·费瑟斯。《与遗留代码有效工作》。Upper
    Saddle River, NJ: Pearson, 2013年。'
