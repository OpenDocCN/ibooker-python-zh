- en: Chapter 4\. Async, Concurrency, and Starlette Tour
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。异步、并发和Starlette之旅
- en: Starlette is a lightweight ASGI framework/toolkit, which is ideal for building
    async web services in Python.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Starlette是一个轻量级的ASGI框架/工具包，非常适合在Python中构建异步Web服务。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Tom Christie, creator of Starlette
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Starlette的创建者Tom Christie
- en: Preview
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预览
- en: The previous chapter briefly introduced the first things a developer would encounter
    on writing a new FastAPI application. This chapter emphasizes FastAPI’s underlying
    Starlette library, particularly its support of *async* processing. After an overview
    of multiple ways of “doing more things at once” in Python, you’ll see how its
    newer `async` and `await` keywords have been incorporated into Starlette and FastAPI.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 上一章简要介绍了开发者在编写新FastAPI应用时会遇到的第一件事情。本章强调了FastAPI的底层Starlette库，特别是其对*async*处理的支持。在概述Python中“同时执行多个任务”的多种方式之后，您将看到其最新的`async`和`await`关键字如何被整合到Starlette和FastAPI中。
- en: Starlette
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Starlette
- en: Much of FastAPI’s web code is based on the [Starlette package](https://www.starlette.io),
    which was created by Tom Christie. It can be used as a web framework in its own
    right or as a library for other frameworks, such as FastAPI. Like any other web
    framework, Starlette handles all the usual HTTP request parsing and response generation.
    It’s similar to [Werkzeug](https://werkzeug.palletsprojects.com), the package
    that underlies Flask.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI的许多Web代码基于[Tom Christie创建的Starlette包](https://www.starlette.io)。它可以作为自己的Web框架使用，也可以作为其他框架（如FastAPI）的库使用。与任何其他Web框架一样，Starlette处理所有常规的HTTP请求解析和响应生成。它类似于[Flask底层的Werkzeug](https://werkzeug.palletsprojects.com)。
- en: 'But its most important feature is its support of the modern Python asynchronous
    web standard: [ASGI](https://asgi.readthedocs.io). Until now, most Python web
    frameworks (like Flask and Django) have been based on the traditional synchronous
    [WSGI standard](https://wsgi.readthedocs.io). Because web applications so frequently
    connect to much slower code (e.g., database, file, and network access), ASGI avoids
    the blocking and busy waiting of WSGI-based applications.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但是它最重要的特性是支持现代Python异步Web标准：[ASGI](https://asgi.readthedocs.io)。直到现在，大多数Python
    Web框架（如Flask和Django）都是基于传统的同步[WSGI标准](https://wsgi.readthedocs.io)。因为Web应用程序经常连接到较慢的代码（例如数据库、文件和网络访问），ASGI避免了基于WSGI的应用程序的阻塞和忙等待。
- en: As a result, Starlette and frameworks that use it are the fastest Python web
    packages, rivaling even Go and Node.js applications.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用Starlette及其相关框架的Python Web包是最快的，甚至与Go和Node.js应用程序一较高下。
- en: Types of Concurrency
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并行计算类型
- en: Before getting into the details of the *async* support provided by Starlette
    and FastAPI, it’s useful to know the multiple ways we can implement *concurrency*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解Starlette和FastAPI提供的*async*支持的详细信息之前，了解一下我们可以实现*concurrency*的多种方式是很有用的。
- en: In *parallel* computing, a task is spread across multiple dedicated CPUs at
    the same time. This is common in “number-crunching” applications like graphics
    and machine learning.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在*parallel*计算中，任务同时分布在多个专用CPU上。这在像图形和机器学习这样的“数值计算”应用程序中很常见。
- en: In *concurrent* computing, each CPU switches among multiple tasks. Some tasks
    take longer than others, and we want to reduce the total time needed. Reading
    a file or accessing a remote network service is literally thousands to millions
    of times slower than running calculations in the CPU.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在*concurrent*计算中，每个CPU在多个任务之间切换。某些任务比其他任务花费的时间更长，我们希望减少所需的总时间。读取文件或访问远程网络服务比在CPU中运行计算慢得多，字面上慢了成千上百万倍。
- en: 'Web applications do a lot of this slow work. How can we make web servers, or
    any servers, run faster? This section discusses some possibilities, from system-wide
    down to the focus of this chapter: FastAPI’s implementation of Python’s `async`
    and `await`.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序完成了大量缓慢的工作。我们如何使Web服务器或任何服务器运行得更快？本节讨论了一些可能性，从系统范围内到本章重点：FastAPI对Python的`async`和`await`的实现。
- en: Distributed and Parallel Computing
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分布和并行计算
- en: If you have a really big application—one that would huff and puff on a single
    CPU—you can break it into pieces and make those pieces run on separate CPUs in
    a single machine or on multiple machines. You can do this in many, many ways,
    and if you have such an application, you already know a number of them. Managing
    all these pieces is more complex and expensive than managing a single server.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个真正大型的应用程序——一个在单个CPU上会显得吃力的应用程序——您可以将其分解成片段，并使这些片段在单个机器的多个CPU上运行或在多台机器上运行。您可以以许多种方式做到这一点，如果您拥有这样的应用程序，您已经了解了其中的一些方式。管理所有这些片段比管理单个服务器更复杂和昂贵。
- en: In this book, the focus is on small- to medium-sized applications that could
    fit on a single box. And these applications can have a mixture of synchronous
    and asynchronous code, nicely managed by FastAPI.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本书关注的是可以放在单个盒子上的小到中型应用程序。这些应用程序可以有同步和异步代码的混合，由FastAPI很好地管理。
- en: Operating System Processes
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作系统进程
- en: 'An operating system (or *OS*, because typing hurts) schedules resources: memory,
    CPUs, devices, networks, and so on. Every program that it runs executes its code
    in one or more *processes*. The OS provides each process with managed, protected
    access to resources, including when they can use the CPU.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统（或*OS*，因为打字疼）调度资源：内存、CPU、设备、网络等等。它运行的每个程序都在一个或多个*进程*中执行其代码。操作系统为每个进程提供受管理的、受保护的资源访问，包括它们何时可以使用CPU。
- en: Most systems use *preemptive* process scheduling, not allowing any process to
    hog the CPU, memory, or any other resource. An OS continually suspends and resumes
    processes, according to its design and settings.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数系统使用*抢占式*进程调度，不允许任何进程独占CPU、内存或任何其他资源。操作系统根据其设计和设置不断挂起和恢复进程。
- en: 'For developers, the good news is: not your problem! But the bad news (which
    usually seems to shadow the good) is: you can’t do much to change it, even if
    you want to.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发者来说，好消息是：这不是你的问题！但通常伴随着好消息而来的坏消息是：即使你想改变，你也不能做太多事情。
- en: With CPU-intensive Python applications, the usual solution is to use multiple
    processes and let the OS manage them. Python has a [multiprocessing module](https://oreil.ly/YO4YE)
    for this.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于CPU密集型Python应用程序，通常的解决方案是使用多个进程并让操作系统管理它们。Python有一个[multiprocessing module](https://oreil.ly/YO4YE)用于此目的。
- en: Operating System Threads
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作系统线程
- en: You can also run *threads* of control within a single process. Python’s [threading
    package](https://oreil.ly/xwVB1) manages these.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在单个进程内运行*控制线程*。Python的[threading package](https://oreil.ly/xwVB1)管理这些线程。
- en: 'Threads are often recommended when your program is I/O bound, and multiple
    processes are recommended when you’re CPU bound. But threads are tricky to program
    and can cause errors that are hard to find. In *Introducing Python*, I likened
    threads to ghosts wafting around in a haunted house: independent and invisible,
    detected only by their effects. Hey, who moved that candlestick?'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序受I/O限制时，通常建议使用线程，而当程序受CPU限制时，建议使用多个进程。但线程编程很棘手，可能导致难以找到的错误。在*介绍Python*中，我把线程比作在闹鬼的房子中飘荡的幽灵：独立而看不见，只能通过它们的效果来检测。嘿，谁移动了那个烛台？
- en: Traditionally, Python kept the process-based and thread-based libraries separate.
    Developers had to learn the arcane details of either to use them. A more recent
    package called [concurrent.futures](https://oreil.ly/dT150) is a higher-level
    interface that makes them easier to use.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，Python保持基于进程和基于线程的库分开。开发者必须学习其中的奥秘细节才能使用它们。一个更近期的包叫做[concurrent.futures](https://oreil.ly/dT150)，它是一个更高级别的接口，使它们更易于使用。
- en: As you’ll see, you can get the benefits of threads more easily with the newer
    async functions. FastAPI also manages threads for normal synchronous functions
    (`def`, not `async def`) via threadpools.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如您将看到的，通过新的async函数，您可以更轻松地获得线程的好处。FastAPI还通过线程池管理普通同步函数（`def`而不是`async def`）的线程。
- en: Green Threads
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绿色线程
- en: 'A more mysterious mechanism is presented by *green threads* such as [greenlet](https://greenlet.readthedocs.io),
    [gevent](http://www.gevent.org) and [Eventlet](https://eventlet.net). These are
    *cooperative* (not preemptive). They’re similar to OS threads but run in user
    space (i.e., your program) rather than in the OS kernel. They work by *monkey-patching*
    standard Python functions (modifying standard Python functions as they’re running)
    to make concurrent code look like normal sequential code: they give up control
    when they would block waiting for I/O.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 更神秘的机制由*绿色线程*，例如[greenlet](https://greenlet.readthedocs.io)，[gevent](http://www.gevent.org)和[Eventlet](https://eventlet.net)呈现出来。这些线程是*协作式*的（而不是抢占式的）。它们类似于操作系统线程，但在用户空间（即您的程序）而不是操作系统内核中运行。它们通过*猴子补丁*标准Python函数（在运行时修改标准Python函数）使并发代码看起来像正常的顺序代码：当它们阻塞等待I/O时，它们放弃控制权。
- en: OS threads are “lighter” (use less memory) than OS processes, and green threads
    are lighter than OS threads. In some [benchmarks](https://oreil.ly/1NFYb), all
    the async methods were generally faster than their sync counterparts.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统线程比操作系统进程“轻”（使用更少内存），而绿色线程比操作系统线程更轻。在一些[基准测试](https://oreil.ly/1NFYb)中，所有异步方法通常比它们的同步对应方法更快。
- en: Note
  id: totrans-31
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'After you’ve read this chapter, you may wonder which is better: gevent or asyncio?
    I don’t think there’s a single preference for all uses. Green threads were implemented
    earlier (using ideas from the multiplayer game *Eve Online*). This book features
    Python’s standard asyncio, which is used by FastAPI, is simpler than threads,
    and performs well.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在你读完本章之后，你可能会想知道哪个更好：gevent 还是 asyncio？我认为并没有一个适用于所有情况的单一偏好。绿色线程早在之前就已实现（使用了来自多人在线游戏*Eve
    Online*的思想）。本书采用了Python的标准asyncio，这与线程相比更简单，性能也更好。
- en: Callbacks
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回调
- en: Developers of interactive applications like games and graphic user interfaces
    are probably familiar with *callbacks*. You write functions and associate them
    with an event, like a mouse click, keypress, or time. The prominent Python package
    in this category is [Twisted](https://twisted.org). Its name reflects the reality
    that callback-based programs are a bit “inside-out” and hard to follow.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 互动应用程序的开发者，如游戏和图形用户界面的开发者，可能已经熟悉*回调*。您编写函数并将其与事件（如鼠标点击、按键或时间）关联起来。这个类别中最显著的Python包是[Twisted](https://twisted.org)。它的名字反映了基于回调的程序有点“内外颠倒”和难以理解的现实。
- en: Python Generators
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 生成器
- en: Like most languages, Python usually executes code sequentially. When you call
    a function, Python runs it from its first line until its end or a `return`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 像大多数语言一样，Python通常是顺序执行代码。当您调用一个函数时，Python会从它的第一行运行到结束或`return`。
- en: But in a Python *generator function*, you can stop and return from any point,
    *and go back to that point* later. The trick is the `yield` keyword.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在Python的*生成器函数*中，您可以在任何点停止并返回，并在以后返回到该点。这个技巧就是`yield`关键字。
- en: In one *Simpsons* episode, Homer crashes his car into a deer statue, followed
    by three lines of dialogue. [Example 4-1](#ex-4-1) defines a normal Python function
    to `return` these lines as a list and have the caller iterate over them.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在一集*Simpsons*中，Homer 将他的车撞到了一尊鹿的雕像上，接着有三行对话。 [示例 4-1](#ex-4-1) 定义了一个普通的Python函数来`return`这些行作为列表，并让调用者对其进行迭代。
- en: Example 4-1\. Use `return`
  id: totrans-39
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-1\. 使用 `return`
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This works perfectly when lists are relatively small. But what if we’re grabbing
    all the dialogue from all the *Simpsons* episodes? Lists use memory.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当列表相对较小时，这种方法非常有效。但是如果我们要获取所有*Simpsons*剧集的对话呢？列表会占用内存。
- en: '[Example 4-2](#ex-4-2) shows how a generator function would dole out the lines.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 4-2](#ex-4-2) 展示了一个生成器函数如何分配这些行。'
- en: Example 4-2\. Use `yield`
  id: totrans-43
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-2\. 使用 `yield`
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Instead of iterating over a list returned by the plain function `doh()`, we’re
    iterating over a *generator object* returned by the *generator function* `doh2()`.
    The actual iteration (`for...in`) looks the same. Python returns the first string
    from `doh2()`, but keeps track of where it is for the next iteration, and so on
    until the function runs out of dialogue.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不是在普通函数`doh()`返回的列表上进行迭代，而是在生成器函数`doh2()`返回的*生成器对象*上进行迭代。实际的迭代（`for...in`）看起来一样。Python从`doh2()`返回第一个字符串，但会追踪它的位置以便于下一次迭代，直到函数耗尽对话。
- en: Any function containing `yield` is a generator function. Given this ability
    to go back into the middle of a function and resume execution, the next section
    looks like a logical adaptation.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 任何包含`yield`的函数都是生成器函数。鉴于这种能力可以返回到函数中间并恢复执行，下一节看起来像是一个合理的适应。
- en: Python async, await, and asyncio
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 的 async、await 和 asyncio
- en: Python’s [asyncio](https://oreil.ly/cBMAc) features have been introduced over
    various releases. You’re running at least Python 3.7, when the `async` and `await`
    terms became reserved keywords.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的[asyncio](https://oreil.ly/cBMAc)特性已经在不同的版本中引入。您至少要运行Python 3.7，这是`async`和`await`成为保留关键字的版本。
- en: The following examples show a joke that’s funny only when run asynchronously.
    Run both yourself, because the timing matters.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了一个只有在异步运行时才会有趣的笑话。自己运行这两个示例，因为时机很重要。
- en: First, run the unfunny [Example 4-3](#ex-4-3).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，运行不好笑的 [示例 4-3](#ex-4-3)。
- en: Example 4-3\. Dullness
  id: totrans-51
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-3\. 枯燥
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You’ll see a three-second gap between the question and answer. Yawn.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在问题和答案之间会有三秒钟的间隙。哈欠。
- en: But the async [Example 4-4](#ex-4-4) is a little different.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 但是异步的 [示例 4-4](#ex-4-4) 有些不同。
- en: Example 4-4\. Hilarity
  id: totrans-55
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-4\. 滑稽
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This time, the answer should pop out right after the question, followed by three
    seconds of silence—just as though a programmer is telling it. Ha ha! Ahem.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，答案应该在问题之后立即出现，然后是三秒的沉默——就像一个程序员在讲述一样。哈哈！咳咳。
- en: Note
  id: totrans-58
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注
- en: I’ve used `asyncio.gather()` and `asyncio.run()` in [Example 4-4](#ex-4-4),
    but there are multiple ways of calling async functions. When using FastAPI, you
    won’t need to use these.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [示例 4-4](#ex-4-4) 中，我使用了 `asyncio.gather()` 和 `asyncio.run()`，但调用异步函数有多种方法。在使用
    FastAPI 时，你不需要使用这些。
- en: 'Python thinks this when running [Example 4-4](#ex-4-4):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 [示例 4-4](#ex-4-4) 时，Python 认为是这样的：
- en: Execute `q()`. Well, just the first line right now.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `q()`。现在只是第一行。
- en: OK, you lazy async `q()`, I’ve set my stopwatch and I’ll come back to you in
    three seconds.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好吧，你懒惰的异步 `q()`，我已经设置好秒表，三秒钟后我会回来找你。
- en: In the meantime I’ll run `a()`, printing the answer right away.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与此同时，我将运行 `a()`，并立即打印答案。
- en: No other `await`, so back to `q()`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有其他的 `await`，所以回到 `q()`。
- en: Boring event loop! I’ll sit here aaaand stare for the rest of the three seconds.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无聊的事件循环！我将坐在这里，等待剩下的三秒钟。
- en: OK, now I’m done.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好了，现在我完成了。
- en: This example uses `asyncio.sleep()` for a function that takes some time, much
    like a function that reads a file or accesses a website. You put `await` in front
    of the function that might spend most of its time waiting. And that function needs
    to have `async` before its `def`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例使用 `asyncio.sleep()` 用于需要一些时间的函数，就像读取文件或访问网站的函数一样。在那些可能大部分时间都在等待的函数前面加上 `await`。该函数在其
    `def` 前需要有 `async`。
- en: Note
  id: totrans-68
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you define a function with `async def`, its caller must put an `await` before
    the call to it. And the caller itself must be declared `async def`, and *its*
    caller must `await` it, all the way up.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你定义了一个带有 `async def` 的函数，它的调用者必须在调用它之前放置一个 `await`。而且调用者本身必须声明为 `async def`，并且
    *其* 调用者必须 `await` 它，以此类推。
- en: By the way, you can declare a function as `async` even if it doesn’t contain
    an `await` call to another async function. It doesn’t hurt.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，即使函数中没有调用其他异步函数的 `await` 调用，你也可以将函数声明为 `async`。这不会有害处。
- en: FastAPI and Async
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FastAPI 和异步
- en: After that long field trip over hill and dale, let’s get back to FastAPI and
    why any of it matters.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 经过那段漫长的田野之旅，让我们回到 FastAPI，看看为什么任何这些都很重要。
- en: 'Because web servers spend a lot of time waiting, performance can be increased
    by avoiding some of that waiting—in other words, concurrency. Other web servers
    use many of the methods mentioned earlier: threads, gevent, and so on. One of
    the reasons that FastAPI is one of the fastest Python web frameworks is its incorporation
    of async code, via the underlying Starlette package’s ASGI support, and some of
    its own inventions.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 Web 服务器花费大量时间在等待上，通过避免部分等待，即并发，可以提高性能。其他 Web 服务器使用了之前提到的多种方法：线程、gevent 等等。FastAPI
    作为最快的 Python Web 框架之一的原因之一是其整合了异步代码，通过底层 Starlette 包的 ASGI 支持，以及其自己的一些发明。
- en: Note
  id: totrans-74
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The use of `async` and `await` on their own does not make code run faster. In
    fact, it might be a little slower, from async setup overhead. The main use of
    `async` is to avoid long waits for I/O.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 单独使用 `async` 和 `await` 并不能使代码运行更快。事实上，由于异步设置的开销，它可能会慢一点。`async` 的主要用途是避免长时间等待
    I/O。
- en: Now, let’s look at our earlier web endpoint calls and see how to make them async.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们之前的 Web 端点调用，并了解如何使它们异步。
- en: The functions that map URLs to code are called *path functions* in the FastAPI
    docs. I’ve also called them *web endpoints*, and you saw synchronous examples
    of them in [Chapter 3](ch03.html#ch03). Let’s make some async ones. As in those
    earlier examples, we’ll just use simple types like numbers and strings for now.
    [Chapter 5](ch05.html#ch05) introduces *type hints* and Pydantic, which we’ll
    need to handle fancier data structures.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 文档中将将 URL 映射到代码的函数称为 *路径函数*。我还称它们为 *Web 端点*，你在 [第三章](ch03.html#ch03)
    中看到它们的同步示例。让我们制作一些异步的。就像之前的示例一样，我们现在只使用简单的类型，比如数字和字符串。[第五章](ch05.html#ch05) 引入了
    *类型提示* 和 Pydantic，我们将需要处理更复杂的数据结构。
- en: '[Example 4-5](#ex-4-5) revisits the first FastAPI program from the previous
    chapter and makes it asynchronous.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 4-5](#ex-4-5) 重新访问了上一章的第一个 FastAPI 程序，并将其改为异步。'
- en: Example 4-5\. A shy async endpoint (greet_async.py)
  id: totrans-79
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-5\. 一个害羞的异步端点（greet_async.py）
- en: '[PRE4]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To run that chunk of web code, you need a web server like Uvicorn.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行那一块 Web 代码，你需要像 Uvicorn 这样的 Web 服务器。
- en: 'The first way is to run Uvicorn on the command line:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是在命令行上运行 Uvicorn：
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The second, as in [Example 4-6](#ex-4-6), is to call Uvicorn from inside the
    example code, when it’s run as a main program instead of a module.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法，就像 [示例 4-6](#ex-4-6) 中一样，是在示例代码内部从主程序而不是模块中调用 Uvicorn。
- en: Example 4-6\. Another shy async endpoint (greet_async_uvicorn.py)
  id: totrans-85
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-6\. 另一个害羞的异步端点（greet_async_uvicorn.py）
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When run as a standalone program, Python names it `main`. That `if __name__...`
    stuff is Python’s way of running it only when called as a main program. Yes, it’s
    ugly.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当作为独立程序运行时，Python将其命名为`main`。那个`if __name__...`的东西是Python只在被调用为主程序时运行它的方式。是的，这很丑陋。
- en: This code will pause for one second before returning its timorous greeting.
    The only difference from a synchronous function that used the standard `sleep(1)`
    function is that the web server can handle other requests in the meantime with
    the async example.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码在返回其畏缩的问候之前将暂停一秒钟。与使用标准`sleep(1)`函数的同步函数唯一的区别是，异步示例允许Web服务器在此期间处理其他请求。
- en: Using `asyncio.sleep(1)` fakes a real-world function that might take one second,
    like calling a database or downloading a web page. Later chapters will show examples
    of such calls from this Web layer to the Service layer, and from there to the
    Data layer, actually spending that wait time on real work.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`asyncio.sleep(1)`模拟可能需要一秒钟的真实世界函数，比如调用数据库或下载网页。后面的章节将展示从Web层到服务层再到数据层的这些调用的实际示例，实际上在进行真正的工作时花费这段等待时间。
- en: FastAPI calls this async `greet()` path function itself when it receives a `GET`
    request for the URL */hi*. You don’t need to add an `await` anywhere. But for
    any other `async def` function definitions that you make, the caller must put
    an `await` before each call.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI在接收到对URL */hi* 的`GET`请求时会自行调用这个异步`greet()`路径函数。您不需要在任何地方添加`await`。但是对于您创建的任何其他`async
    def`函数定义，调用者必须在每次调用前加上`await`。
- en: Note
  id: totrans-91
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: FastAPI runs an async *event loop* that coordinates the async path functions,
    and a *threadpool* for synchronous path functions. A developer doesn’t need to
    know the tricky details, which is a great plus. For example, you don’t need to
    run methods like `asyncio.gather()` or `asyncio.run()`, as in the (standalone,
    non-FastAPI) joke example earlier.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI运行一个异步*事件循环*，协调异步路径函数，并为同步路径函数运行一个*线程池*。开发者不需要了解复杂的细节，这是一个很大的优点。例如，您不需要像之前的（独立的、非FastAPI）笑话示例中那样运行`asyncio.gather()`或`asyncio.run()`方法。
- en: Using Starlette Directly
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接使用Starlette
- en: FastAPI doesn’t expose Starlette as much as it does Pydantic. Starlette is largely
    the machinery humming in the engine room, keeping the ship running smoothly.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI没有像它对Pydantic那样公开Starlette。Starlette主要是引擎室内不断运行的机器。
- en: But if you’re curious, you could use Starlette directly to write a web application.
    [Example 3-1](ch03.html#ex-3-1) in the previous chapter might look like [Example 4-7](#ex-4-7).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果你感兴趣，你可以直接使用Starlette来编写Web应用程序。前一章节的[示例 3-1](ch03.html#ex-3-1)可能看起来像[示例 4-7](#ex-4-7)。
- en: 'Example 4-7\. Using Starlette: starlette_hello.py'
  id: totrans-96
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-7\. 使用Starlette：starlette_hello.py
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run this web application with this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行这个Web应用程序：
- en: '[PRE8]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In my opinion, the FastAPI additions make web API development much easier.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，FastAPI的新增功能使得Web API的开发更加容易。
- en: 'Interlude: Cleaning the Clue House'
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插曲：清洁线索之屋
- en: 'You own a small (very small: just you) house-cleaning company. You’ve been
    living on ramen but just landed a contract that will let you afford much better
    ramen.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你拥有一个小（非常小：只有你一个人）的清洁公司。你一直靠泡面过活，但刚刚签下的合同将让你能够买更好的泡面。
- en: 'Your client bought an old mansion that was built in the style of the board
    game Clue and wants to host a character party there soon. But the place is an
    incredible mess. If Marie Kondo saw the place, she might do the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您的客户购买了一座建造在Clue棋盘游戏风格中的老宅，并希望很快在那里举办角色派对。但是这个地方一团糟。如果玛丽·康多（Marie Kondo）看到这个地方，她可能会做如下事情：
- en: Scream
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尖叫
- en: Gag
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 笑喷
- en: Run away
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逃跑
- en: All of the above
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以上所有内容
- en: Your contract includes a speed bonus. How can you clean the place thoroughly,
    in the least amount of elapsed time? The best approach would have been to have
    more Clue Preservation Units (CPUs), but you’re it.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您的合同包括一个速度奖金。如何在最少的时间内彻底清洁这个地方？最好的方法本来应该是有更多的线索保护单元（CPU），但是你就是全部。
- en: 'So you can try one of these:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可以尝试以下其中之一：
- en: Do everything in one room, then everything in the next, etc.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个房间里做完所有事情，然后再下一个房间，以此类推。
- en: Do a specific task in one room, then the next, etc. Like polishing the silver
    in the Kitchen and Dining Room, or the pool balls in the Billiard Room.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个房间内完成一个特定任务，然后再下一个房间，以此类推。比如在厨房和餐厅里擦拭银器，或者在台球室里擦拭台球。
- en: 'Would your total time for these approaches differ? Maybe. But it might be more
    important to consider whether you have to wait an appreciable time for any step.
    An example might be underfoot: after cleaning rugs and waxing floors, they might
    need to dry for hours before moving furniture back onto them.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你选择的方法的总时间会不同吗？也许会。但更重要的是要考虑是否需要等待任何步骤的时间。一个例子可能是在地面上：清洁地毯和打蜡后，它们可能需要几个小时才能干透，然后才能把家具搬回去。
- en: 'So, here’s your plan for each room:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这是你每个房间的计划：
- en: Clean all the static parts (windows, etc.).
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清洁所有静态部分（窗户等）。
- en: Move all the furniture from the room into the Hall.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 把房间里的所有家具移到大厅。
- en: Remove years of grime from the rug and/or hardwood floor.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从地毯和/或硬木地板上去除多年的污垢。
- en: 'Do either of these:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 做以下任何一种：
- en: Wait for the rug or wax to dry, but wave your bonus goodbye.
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等地毯或打蜡干透，但告别你的奖金吧。
- en: Go to the next room now, and repeat. After the last room, move the furniture
    back into the first room, and so on.
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在去下一个房间，然后重复。在最后一个房间之后，把家具搬回第一个房间，依此类推。
- en: The waiting-to-dry approach is the synchronous one, and it might be best if
    time isn’t a factor and you need a break. The second is async and saves the waiting
    time for each room.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 等待干燥的方法是同步的，如果时间不是一个因素并且你需要休息的话可能是最好的选择。第二种是异步的，为每个房间节省等待时间。
- en: 'Let’s assume you choose the async path, because money. You get the old dump
    to sparkle and receive that bonus from your grateful client. The later party turns
    out to be a great success, except for these issues:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你选择了异步路径，因为有钱可赚。你让旧的垃圾发光，从你感激的客户那里获得了奖金。后来的派对结果非常成功，除了这些问题：
- en: One memeless guest came as Mario.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个没有梗的客人扮成了马里奥。
- en: You overwaxed the dance floor in the Ball Room, and a tipsy Professor Plum skated
    about in his socks, until he sailed into a table and spilled champagne on Miss
    Scarlet.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你在舞厅里打蜡过度了，在醉醺醺的普拉姆教授穿着袜子溜冰，最终撞到桌子上，把香槟洒在了斯卡雷特小姐身上。
- en: 'Morals of this story:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 故事的道德：
- en: Requirements can be conflicting and/or strange.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需求可能会有冲突和/或奇怪。
- en: Estimating time and effort can depend on many factors.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 估算时间和精力可能取决于许多因素。
- en: Sequencing tasks may be as much art as science.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顺序任务可能更多是一种艺术而不是科学。
- en: You’ll feel great when it’s all done. Mmm, ramen.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当所有事情都完成时，你会感觉很棒。嗯，拉面。
- en: Review
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习
- en: After an overview of ways of increasing concurrency, this chapter expanded on
    functions that use the recent Python keywords `async` and `await`. It showed how
    FastAPI and Starlette handle both plain old synchronous functions and these new
    async funky functions.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在总览了增加并发方式后，本章扩展了使用最近的Python关键字`async`和`await`的函数。它展示了FastAPI和Starlette如何处理传统的同步函数和这些新的异步函数。
- en: 'The next chapter introduces the second leg of FastAPI: how Pydantic helps you
    define your data.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章介绍了FastAPI的第二部分：Pydantic如何帮助您定义数据。
