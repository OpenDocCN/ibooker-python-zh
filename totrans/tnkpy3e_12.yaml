- en: 10\. Dictionaries#
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://allendowney.github.io/ThinkPython/chap10.html](https://allendowney.github.io/ThinkPython/chap10.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This chapter presents a built-in type called a dictionary. It is one of Python’s
    best features – and the building block of many efficient and elegant algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use dictionaries to compute the number of unique words in a book and the
    number of times each one appears. And in the exercises, we’ll use dictionaries
    to solve word puzzles.
  prefs: []
  type: TYPE_NORMAL
- en: 10.1\. A dictionary is a mapping[#](#a-dictionary-is-a-mapping "Link to this
    heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **dictionary** is like a list, but more general. In a list, the indices have
    to be integers; in a dictionary they can be (almost) any type. For example, suppose
    we make a list of number words, like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We can use an integer as an index to get the corresponding word.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: But suppose we want to go in the other direction, and look up a word to get
    the corresponding integer. We can’t do that with a list, but we can with a dictionary.
    We’ll start by creating an empty dictionary and assigning it to `numbers`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The curly braces, `{}`, represent an empty dictionary. To add items to the dictionary,
    we’ll use square brackets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This assignment adds to the dictionary an **item**, which represents the association
    of a **key** and a **value**. In this example, the key is the string `'zero'`
    and the value is the integer `0`. If we display the dictionary, we see that it
    contains one item, which contains a key and a value separated by a colon, `:`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We can add more items like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now the dictionary contains three items.
  prefs: []
  type: TYPE_NORMAL
- en: To look up a key and get the corresponding value, we use the bracket operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If the key isn’t in the dictionary, we get a `KeyError`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `len` function works on dictionaries; it returns the number of items.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In mathematical language, a dictionary represents a **mapping** from keys to
    values, so you can also say that each key “maps to” a value. In this example,
    each number word maps to the corresponding integer.
  prefs: []
  type: TYPE_NORMAL
- en: The following figure shows the state diagram for `numbers`.
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/b4f6ce142833c443434f72ebc060ad7736df776d1330d5455522f6c53397a0d0.png](../Images/8084970e2e60b78c27070840c99e88f3.png)'
  prefs: []
  type: TYPE_IMG
- en: A dictionary is represented by a box with the word “dict” outside and the items
    inside. Each item is represented by a key and an arrow pointing to a value. The
    quotation marks indicate that the keys here are strings, not variable names.
  prefs: []
  type: TYPE_NORMAL
- en: 10.2\. Creating dictionaries[#](#creating-dictionaries "Link to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section we created an empty dictionary and added items one at
    a time using the bracket operator. Instead, we could have created the dictionary
    all at once like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Each item consists of a key and a value separated by a colon. The items are
    separated by commas and enclosed in curly braces.
  prefs: []
  type: TYPE_NORMAL
- en: Another way to create a dictionary is to use the `dict` function. We can make
    an empty dictionary like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: And we can make a copy of a dictionary like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: It is often useful to make a copy before performing operations that modify dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: '## 10.3\. The in operator[#](#the-in-operator "Link to this heading")'
  prefs: []
  type: TYPE_NORMAL
- en: The `in` operator works on dictionaries, too; it tells you whether something
    appears as a *key* in the dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `in` operator does *not* check whether something appears as a value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: To see whether something appears as a value in a dictionary, you can use the
    method `values`, which returns a sequence of values, and then use the `in` operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The items in a Python dictionary are stored in a **hash table**, which is a
    way of organizing data that has a remarkable property: the `in` operator takes
    about the same amount of time no matter how many items are in the dictionary.
    That makes it possible to write some remarkably efficient algorithms.'
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate, we’ll compare two algorithms for finding pairs of words where
    one is the reverse of another – like `stressed` and `desserts`. We’ll start by
    reading the word list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: And here’s `reverse_word` from the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The following function loops through the words in the list. For each one, it
    reverses the letters and then checks whether the reversed word is in the word
    list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This function takes more than a minute to run. The problem is that the `in`
    operator checks the words in the list one at a time, starting at the beginning.
    If it doesn’t find what it’s looking for – which happens most of the time – it
    has to search all the way to the end.
  prefs: []
  type: TYPE_NORMAL
- en: And the `in` operator is inside the loop, so it runs once for each word. Since
    there are more than 100,000 words in the list, and for each one we check more
    than 100,000 words, the total number of comparisons is the number of words squared
    – roughly – which is almost 13 billion.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: We can make this function much faster with a dictionary. The following loop
    creates a dictionary that contains the words as keys.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The values in `word_dict` are all `1`, but they could be anything, because we
    won’t ever look them up – we will only use this dictionary to check whether a
    key exists.
  prefs: []
  type: TYPE_NORMAL
- en: Now here’s a version of the previous function that replaces `word_list` with
    `word_dict`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This function takes less than one hundredth of a second, so it’s about 10,000
    times faster than the previous version.
  prefs: []
  type: TYPE_NORMAL
- en: In general, the time it takes to find an element in a list is proportional to
    the length of the list. The time it takes to find a key in a dictionary is almost
    constant – regardless of the number of items.
  prefs: []
  type: TYPE_NORMAL
- en: 10.4\. A collection of counters[#](#a-collection-of-counters "Link to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose you are given a string and you want to count how many times each letter
    appears. A dictionary is a good tool for this job. We’ll start with an empty dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: As we loop through the letters in the string, suppose we see the letter `'a'`
    for the first time. We can add it to the dictionary like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The value `1` indicates that we have seen the letter once. Later, if we see
    the same letter again, we can increment the counter like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Now the value associated with `'a'` is `2`, because we’ve seen the letter twice.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The following function uses these features to count the number of times each
    letter appears in a string.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Each time through the loop, if `letter` is not in the dictionary, we create
    a new item with key `letter` and value `1`. If `letter` is already in the dictionary
    we increment the value associated with `letter`.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s an example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The items in `counter` show that the letter `'b'` appears once, `'r'` appears
    twice, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 10.5\. Looping and dictionaries[#](#looping-and-dictionaries "Link to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you use a dictionary in a `for` statement, it traverses the keys of the dictionary.
    To demonstrate, let’s make a dictionary that counts the letters in `'banana'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The following loop prints the keys, which are the letters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: To print the values, we can use the `values` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: To print the keys and values, we can loop through the keys and look up the corresponding
    values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: In the next chapter, we’ll see a more concise way to do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: 10.6\. Lists and dictionaries[#](#lists-and-dictionaries "Link to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can put a list in a dictionary as a value. For example, here’s a dictionary
    that maps from the number `4` to a list of four letters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: But you can’t put a list in a dictionary as a key. Here’s what happens if we
    try.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: I mentioned earlier that dictionaries use hash tables, and that means that the
    keys have to be **hashable**.
  prefs: []
  type: TYPE_NORMAL
- en: A **hash** is a function that takes a value (of any kind) and returns an integer.
    Dictionaries use these integers, called hash values, to store and look up keys.
  prefs: []
  type: TYPE_NORMAL
- en: This system only works if a key is immutable, so its hash value is always the
    same. But if a key is mutable, its hash value could change, and the dictionary
    would not work. That’s why keys have to be hashable, and why mutable types like
    lists aren’t.
  prefs: []
  type: TYPE_NORMAL
- en: Since dictionaries are mutable, they can’t be used as keys, either. But they
    *can* be used as values.
  prefs: []
  type: TYPE_NORMAL
- en: '## 10.7\. Accumulating a list[#](#accumulating-a-list "Link to this heading")'
  prefs: []
  type: TYPE_NORMAL
- en: For many programming tasks, it is useful to loop through one list or dictionary
    while building another. As an example, we’ll loop through the words in `word_dict`
    and make a list of palindromes – that is, words that are spelled the same backward
    and forward, like “noon” and “rotator”.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, one of the exercises asked you to write a function
    that checks whether a word is a palindrome. Here’s a solution that uses `reverse_word`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: If we loop through the words in `word_dict`, we can count the number of palindromes
    like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: By now, this pattern is familiar.
  prefs: []
  type: TYPE_NORMAL
- en: Before the loop, `count` is initialized to `0`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the loop, if `word` is a palindrome, we increment `count`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the loop ends, `count` contains the total number of palindromes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use a similar pattern to make a list of palindromes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: Before the loop, `palindromes` is initialized with an empty list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the loop, if `word` is a palindrome, we append it to the end of `palindromes`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the loop ends, `palindromes` is a list of palindromes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this loop, `palindromes` is used as an **accumulator**, which is a variable
    that collects or accumulates data during a computation.
  prefs: []
  type: TYPE_NORMAL
- en: Now suppose we want to select only palindromes with seven or more letters. We
    can loop through `palindromes` and make a new list that contains only long palindromes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Looping through a list like this, selecting some elements and omitting others,
    is called **filtering**.  ## 10.8\. Memos[#](#memos "Link to this heading")'
  prefs: []
  type: TYPE_NORMAL
- en: If you ran the `fibonacci` function from [Chapter 6](chap06.html#section-fibonacci),
    maybe you noticed that the bigger the argument you provide, the longer the function
    takes to run.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Furthermore, the run time increases quickly. To understand why, consider the
    following figure, which shows the **call graph** for `fibonacci` with `n=4`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/80cfcd12d7c8cde149103a1fe25d2b12bfce1b7cc33163b9e5582f9e32789f5d.png](../Images/698ff08186ba3a8f135d7c7b88b97009.png)'
  prefs: []
  type: TYPE_IMG
- en: A call graph shows a set of function frames, with lines connecting each frame
    to the frames of the functions it calls. At the top of the graph, `fibonacci`
    with `n=4` calls `fibonacci` with `n=3` and `n=2`. In turn, `fibonacci` with `n=3`
    calls `fibonacci` with `n=2` and `n=1`. And so on.
  prefs: []
  type: TYPE_NORMAL
- en: Count how many times `fibonacci(0)` and `fibonacci(1)` are called. This is an
    inefficient solution to the problem, and it gets worse as the argument gets bigger.
  prefs: []
  type: TYPE_NORMAL
- en: 'One solution is to keep track of values that have already been computed by
    storing them in a dictionary. A previously computed value that is stored for later
    use is called a **memo**. Here is a “memoized” version of `fibonacci`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '`known` is a dictionary that keeps track of the Fibonacci numbers we already
    know It starts with two items: `0` maps to `0` and `1` maps to `1`.'
  prefs: []
  type: TYPE_NORMAL
- en: Whenever `fibonacci_memo` is called, it checks `known`. If the result is already
    there, it can return immediately. Otherwise it has to compute the new value, add
    it to the dictionary, and return it.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing the two functions, `fibonacci(40)` takes about 30 seconds to run.
    `fibonacci_memo(40)` takes about 30 microseconds, so it’s a million times faster.
    In the notebook for this chapter, you’ll see where these measurements come from.
  prefs: []
  type: TYPE_NORMAL
- en: 10.9\. Debugging[#](#debugging "Link to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you work with bigger datasets it can become unwieldy to debug by printing
    and checking the output by hand. Here are some suggestions for debugging large
    datasets:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scale down the input: If possible, reduce the size of the dataset. For example
    if the program reads a text file, start with just the first 10 lines, or with
    the smallest example you can find. You can either edit the files themselves, or
    (better) modify the program so it reads only the first `n` lines.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there is an error, you can reduce `n` to the smallest value where the error
    occurs. As you find and correct errors, you can increase `n` gradually.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Check summaries and types: Instead of printing and checking the entire dataset,
    consider printing summaries of the data – for example, the number of items in
    a dictionary or the total of a list of numbers.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A common cause of runtime errors is a value that is not the right type. For
    debugging this kind of error, it is often enough to print the type of a value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Write self-checks: Sometimes you can write code to check for errors automatically.
    For example, if you are computing the average of a list of numbers, you could
    check that the result is not greater than the largest element in the list or less
    than the smallest. This is called a “sanity check” because it detects results
    that are “insane”.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another kind of check compares the results of two different computations to
    see if they are consistent. This is called a “consistency check”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Format the output: Formatting debugging output can make it easier to spot an
    error. We saw an example in [Chapter 6](chap06.html#section-debugging-factorial).
    Another tool you might find useful is the `pprint` module, which provides a `pprint`
    function that displays built-in types in a more human-readable format (`pprint`
    stands for “pretty print”).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, time you spend building scaffolding can reduce the time you spend debugging.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 10.10\. Glossary[#](#glossary "Link to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**dictionary:** An object that contains key-value pairs, also called items.'
  prefs: []
  type: TYPE_NORMAL
- en: '**item:** In a dictionary, another name for a key-value pair.'
  prefs: []
  type: TYPE_NORMAL
- en: '**key:** An object that appears in a dictionary as the first part of a key-value
    pair.'
  prefs: []
  type: TYPE_NORMAL
- en: '**value:** An object that appears in a dictionary as the second part of a key-value
    pair. This is more specific than our previous use of the word “value”.'
  prefs: []
  type: TYPE_NORMAL
- en: '**mapping:** A relationship in which each element of one set corresponds to
    an element of another set.'
  prefs: []
  type: TYPE_NORMAL
- en: '**hash table:** A collection of key-value pairs organized so that we can look
    up a key and find its value efficiently.'
  prefs: []
  type: TYPE_NORMAL
- en: '**hashable:** Immutable types like integers, floats and strings are hashable.
    Mutable types like lists and dictionaries are not.'
  prefs: []
  type: TYPE_NORMAL
- en: '**hash function:** A function that takes an object and computes an integer
    that is used to locate a key in a hash table.'
  prefs: []
  type: TYPE_NORMAL
- en: '**accumulator:** A variable used in a loop to add up or accumulate a result.'
  prefs: []
  type: TYPE_NORMAL
- en: '**filtering:** Looping through a sequence and selecting or omitting elements.'
  prefs: []
  type: TYPE_NORMAL
- en: '**call graph:** A diagram that shows every frame created during the execution
    of a program, with an arrow from each caller to each callee.'
  prefs: []
  type: TYPE_NORMAL
- en: '**memo:** A computed value stored to avoid unnecessary future computation.'
  prefs: []
  type: TYPE_NORMAL
- en: 10.11\. Exercises[#](#exercises "Link to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 10.11.1\. Ask an assistant[#](#ask-an-assistant "Link to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, I said the keys in a dictionary have to be hashable and I gave
    a short explanation. If you would like more details, ask a virtual assistant,
    “Why do keys in Python dictionaries have to be hashable?”
  prefs: []
  type: TYPE_NORMAL
- en: In [a previous section](#section-dictionary-in-operator), we stored a list of
    words as keys in a dictionary so that we could use an efficient version of the
    `in` operator. We could have done the same thing using a `set`, which is another
    built-in data type. Ask a virtual assistant, “How do I make a Python set from
    a list of strings and check whether a string is an element of the set?”
  prefs: []
  type: TYPE_NORMAL
- en: 10.11.2\. Exercise[#](#exercise "Link to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Dictionaries have a method called `get` that takes a key and a default value.
    If the key appears in the dictionary, `get` returns the corresponding value; otherwise
    it returns the default value. For example, here’s a dictionary that maps from
    the letters in a string to the number of times they appear.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: If we look up a letter that appears in the word, `get` returns the number of
    times it appears.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: If we look up a letter that doesn’t appear, we get the default value, `0`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Use `get` to write a more concise version of `value_counts`. You should be able
    to eliminate the `if` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 10.11.3\. Exercise[#](#id1 "Link to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What is the longest word you can think of where each letter appears only once?
    Let’s see if we can find one longer than `unpredictably`.
  prefs: []
  type: TYPE_NORMAL
- en: Write a function named `has_duplicates` that takes a sequence – like a list
    or string – as a parameter and returns `True` if there is any element that appears
    in the sequence more than once.
  prefs: []
  type: TYPE_NORMAL
- en: 10.11.4\. Exercise[#](#id2 "Link to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Write function called `find_repeats` that takes a dictionary that maps from
    each key to a counter, like the result from `value_counts`. It should loop through
    the dictionary and return a list of keys that have counts greater than `1`. You
    can use the following outline to get started.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 10.11.5\. Exercise[#](#id3 "Link to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Suppose you run `value_counts` with two different words and save the results
    in two dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Each dictionary maps from a set of letters to the number of times they appear.
    Write a function called `add_counters` that takes two dictionaries like this and
    returns a new dictionary that contains all of the letters and the total number
    of times they appear in either word.
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways to solve this problem. Once you have a working solution,
    consider asking a virtual assistant for different solutions.
  prefs: []
  type: TYPE_NORMAL
- en: 10.11.6\. Exercise[#](#id4 "Link to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A word is “interlocking” if we can split it into two words by taking alternating
    letters. For example, “schooled” is an interlocking word because it can be split
    into “shoe” and “cold”.
  prefs: []
  type: TYPE_NORMAL
- en: To select alternating letters from a string, you can use a slice operator with
    three components that indicate where to start, where to stop, and the “step size”
    between the letters.
  prefs: []
  type: TYPE_NORMAL
- en: In the following slice, the first component is `0`, so we start with the first
    letter. The second component is `None`, which means we should go all the way to
    the end of the string. And the third component is `2`, so there are two steps
    between the letters we select.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Instead of providing `None` as the second component, we can get the same effect
    by leaving it out altogether. For example, the following slice selects alternating
    letters, starting with the second letter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Write a function called `is_interlocking` that takes a word as an argument and
    returns `True` if it can be split into two interlocking words.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[Think Python: 3rd Edition](https://allendowney.github.io/ThinkPython/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Copyright 2024 [Allen B. Downey](https://allendowney.com)
  prefs: []
  type: TYPE_NORMAL
- en: 'Code license: [MIT License](https://mit-license.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Text license: [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/)'
  prefs: []
  type: TYPE_NORMAL
