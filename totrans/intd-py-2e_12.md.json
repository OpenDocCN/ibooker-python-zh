["```py\nfrom random import choice\n\nplaces = ['McDonalds\", \"KFC\", \"Burger King\", \"Taco Bell\",\n     \"Wendys\", \"Arbys\", \"Pizza Hut\"]\n\ndef pick():  # see the docstring below?\n    \"\"\"Return random fast food place\"\"\"\n    return choice(places)\n```", "```py\nimport fast\n\nplace = fast.pick()\nprint(\"Let's go to\", place)\n```", "```py\n$ python lunch.py\nLet's go to Burger King\n$ python lunch.py\nLet's go to Pizza Hut\n$ python lunch.py\nLet's go to Arbys\n```", "```py\nplaces = ['McDonalds\", \"KFC\", \"Burger King\", \"Taco Bell\",\n     \"Wendys\", \"Arbys\", \"Pizza Hut\"]\n\ndef pick():\n    import random\n    return random.choice(places)\n```", "```py\nimport fast as f\nplace = f.pick()\nprint(\"Let's go to\", place)\n```", "```py\nfrom fast import pick\nplace = pick()\nprint(\"Let's go to\", place)\n```", "```py\nfrom fast import pick as who_cares\nplace = who_cares()\nprint(\"Let's go to\", place)\n```", "```py\nfrom sources import fast, advice\n\nprint(\"Let's go to\", fast.pick())\nprint(\"Should we take out?\", advice.give())\n```", "```py\nfrom random import choice\n\nplaces = [\"McDonalds\", \"KFC\", \"Burger King\", \"Taco Bell\",\n     \"Wendys\", \"Arbys\", \"Pizza Hut\"]\n\ndef pick():\n    \"\"\"Return random fast food place\"\"\"\n    return choice(places)\n```", "```py\nfrom random import choice\n\nanswers = [\"Yes!\", \"No!\", \"Reply hazy\", \"Sorry, what?\"]\n\ndef give():\n    \"\"\"Return random advice\"\"\"\n    return choice(answers)\n```", "```py\n$ python questions.py\nLet's go to KFC\nShould we take out? Yes!\n$ python questions.py\nLet's go to Wendys\nShould we take out? Reply hazy\n$ python questions.py\nLet's go to McDonalds\nShould we take out? Reply hazy\n```", "```py\n>>> import sys\n>>> for place in sys.path:\n...     print(place)\n...\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python37.zip\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload\n```", "```py\n>>> import sys\n>>> sys.path.insert(0, \"/my/modules\")\n```", "```py\ncritters\n ⌞ rougarou.py\n ⌞ wendigo.py\n```", "```py\nfrom critters import wendigo, rougarou\n```", "```py\nnorth\n ⌞ critters\n   ⌞ wendigo.py\nsouth\n ⌞ critters\n   ⌞ rougarou.py\n```", "```py\nfrom critters import wendigo, rougarou\n```", "```py\n>>> import math\n>>> math.pi\n3.141592653589793\n>>> math.pi = 3.0\n>>> math.pi\n3.0\n```", "```py\n>>> periodic_table = {'Hydrogen': 1, 'Helium': 2}\n>>> periodic_table\n{'Hydrogen': 1, 'Helium': 2}\n```", "```py\n>>> carbon = periodic_table.setdefault('Carbon', 12)\n>>> carbon\n12\n>>> periodic_table\n{'Hydrogen': 1, 'Helium': 2, 'Carbon': 12}\n```", "```py\n>>> helium = periodic_table.setdefault('Helium', 947)\n>>> helium\n2\n>>> periodic_table\n{'Hydrogen': 1, 'Helium': 2, 'Carbon': 12}\n```", "```py\n>>> from collections import defaultdict\n>>> periodic_table = defaultdict(int)\n```", "```py\n>>> periodic_table['Hydrogen'] = 1\n>>> periodic_table['Lead']\n0\n>>> periodic_table\ndefaultdict(<class 'int'>, {'Hydrogen': 1, 'Lead': 0})\n```", "```py\n>>> from collections import defaultdict\n>>>\n>>> def no_idea():\n...     return 'Huh?'\n...\n>>> bestiary = defaultdict(no_idea)\n>>> bestiary['A'] = 'Abominable Snowman'\n>>> bestiary['B'] = 'Basilisk'\n>>> bestiary['A']\n'Abominable Snowman'\n>>> bestiary['B']\n'Basilisk'\n>>> bestiary['C']\n'Huh?'\n```", "```py\n>>> bestiary = defaultdict(lambda: 'Huh?')\n>>> bestiary['E']\n'Huh?'\n```", "```py\n>>> from collections import defaultdict\n>>> food_counter = defaultdict(int)\n>>> for food in ['spam', 'spam', 'eggs', 'spam']:\n...     food_counter[food] += 1\n...\n>>> for food, count in food_counter.items():\n...     print(food, count)\n...\neggs 1\nspam 3\n```", "```py\n>>> dict_counter = {}\n>>> for food in ['spam', 'spam', 'eggs', 'spam']:\n...     if not food in dict_counter:\n...         dict_counter[food] = 0\n...     dict_counter[food] += 1\n...\n>>> for food, count in dict_counter.items():\n...     print(food, count)\n...\nspam 3\neggs 1\n```", "```py\n>>> from collections import Counter\n>>> breakfast = ['spam', 'spam', 'eggs', 'spam']\n>>> breakfast_counter = Counter(breakfast)\n>>> breakfast_counter\nCounter({'spam': 3, 'eggs': 1})\n```", "```py\n>>> breakfast_counter.most_common()\n[('spam', 3), ('eggs', 1)]\n>>> breakfast_counter.most_common(1)\n[('spam', 3)]\n```", "```py\n>>> breakfast_counter\n>>> Counter({'spam': 3, 'eggs': 1})\n```", "```py\n>>> lunch = ['eggs', 'eggs', 'bacon']\n>>> lunch_counter = Counter(lunch)\n>>> lunch_counter\nCounter({'eggs': 2, 'bacon': 1})\n```", "```py\n>>> breakfast_counter + lunch_counter\nCounter({'spam': 3, 'eggs': 3, 'bacon': 1})\n```", "```py\n>>> breakfast_counter - lunch_counter\nCounter({'spam': 3})\n```", "```py\n>>> lunch_counter - breakfast_counter\nCounter({'bacon': 1, 'eggs': 1})\n```", "```py\n>>> breakfast_counter & lunch_counter\nCounter({'eggs': 1})\n```", "```py\n>>> breakfast_counter | lunch_counter\nCounter({'spam': 3, 'eggs': 2, 'bacon': 1})\n```", "```py\n>>> quotes = {\n...     'Moe': 'A wise guy, huh?',\n...     'Larry': 'Ow!',\n...     'Curly': 'Nyuk nyuk!',\n...     }\n>>> for stooge in quotes:\n...  print(stooge)\n...\nLarry\nCurly\nMoe\n```", "```py\n>>> from collections import OrderedDict\n>>> quotes = OrderedDict([\n...     ('Moe', 'A wise guy, huh?'),\n...     ('Larry', 'Ow!'),\n...     ('Curly', 'Nyuk nyuk!'),\n...     ])\n>>>\n>>> for stooge in quotes:\n...     print(stooge)\n...\nMoe\nLarry\nCurly\n```", "```py\n>>> def palindrome(word):\n...     from collections import deque\n...     dq = deque(word)\n...     while len(dq) > 1:\n...        if dq.popleft() != dq.pop():\n...            return False\n...     return True\n...\n...\n>>> palindrome('a')\nTrue\n>>> palindrome('racecar')\nTrue\n>>> palindrome('')\nTrue\n>>> palindrome('radar')\nTrue\n>>> palindrome('halibut')\nFalse\n```", "```py\n>>> def another_palindrome(word):\n...     return word == word[::-1]\n...\n>>> another_palindrome('radar')\nTrue\n>>> another_palindrome('halibut')\nFalse\n```", "```py\n>>> import itertools\n>>> for item in itertools.chain([1, 2], ['a', 'b']):\n...     print(item)\n...\n1\n2\na\nb\n```", "```py\n>>> import itertools\n>>> for item in itertools.cycle([1, 2]):\n...     print(item)\n...\n1\n2\n1\n2\n.\n.\n.\n```", "```py\n>>> import itertools\n>>> for item in itertools.accumulate([1, 2, 3, 4]):\n...     print(item)\n...\n1\n3\n6\n10\n```", "```py\n>>> import itertools\n>>> def multiply(a, b):\n...     return a * b\n...\n>>> for item in itertools.accumulate([1, 2, 3, 4], multiply):\n...     print(item)\n...\n1\n2\n6\n24\n```", "```py\n>>> from pprint import pprint\n>>> quotes = OrderedDict([\n...     ('Moe', 'A wise guy, huh?'),\n...     ('Larry', 'Ow!'),\n...     ('Curly', 'Nyuk nyuk!'),\n...     ])\n>>>\n```", "```py\n>>> print(quotes)\nOrderedDict([('Moe', 'A wise guy, huh?'), ('Larry', 'Ow!'),\n ('Curly', 'Nyuk nyuk!')])\n```", "```py\n>>> pprint(quotes)\n{'Moe': 'A wise guy, huh?',\n 'Larry': 'Ow!',\n 'Curly': 'Nyuk nyuk!'}\n```", "```py\n>>> from random import choice\n>>> choice([23, 9, 46, 'bacon', 0x123abc])\n1194684\n>>> choice( ('a', 'one', 'and-a', 'two') )\n'one'\n>>> choice(range(100))\n68\n>>> choice('alphabet')\n'l'\n```", "```py\n>>> from random import sample\n>>> sample([23, 9, 46, 'bacon', 0x123abc], 3)\n[1194684, 23, 9]\n>>> sample(('a', 'one', 'and-a', 'two'), 2)\n['two', 'and-a']\n>>> sample(range(100), 4)\n[54, 82, 10, 78]\n>>> sample('alphabet', 7)\n['l', 'e', 'a', 't', 'p', 'a', 'b']\n```", "```py\n>>> from random import randint\n>>> randint(38, 74)\n71\n>>> randint(38, 74)\n60\n>>> randint(38, 74)\n61\n```", "```py\n>>> from random import randrange\n>>> randrange(38, 74)\n65\n>>> randrange(38, 74, 10)\n68\n>>> randrange(38, 74, 10)\n48\n```", "```py\n>>> from random import random\n>>> random()\n0.07193393312692198\n>>> random()\n0.7403243673826271\n>>> random()\n0.9716517846775018\n```"]