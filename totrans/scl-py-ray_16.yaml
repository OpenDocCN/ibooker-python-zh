- en: Appendix C. Debugging with Ray
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 C. 使用 Ray 进行调试
- en: Depending on your debugging techniques, moving to distributed systems could
    require a new set of techniques. Thankfully, tools like Pdb and PyCharm allow
    you to connect remote debuggers, and Ray’s local mode can allow you to use your
    existing debugging tools in many other situations. Some errors happen outside
    Python, making them more difficult to debug, like container out-of-memory (OOM)
    errors, segmentation faults, and other native errors.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的调试技术，迁移到分布式系统可能需要一套新的技术。幸运的是，像 Pdb 和 PyCharm 这样的工具允许您连接远程调试器，而 Ray 的本地模式则允许您在许多其他情况下使用现有的调试工具。有些错误发生在
    Python 之外，使得它们更难调试，如容器内存不足（OOM）错误、分段错误和其他本地错误。
- en: Note
  id: totrans-2
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Some components of this appendix are shared with [*Scaling Python with Dask*](https://oreil.ly/Fk0I6),
    as they are general good advice for debugging all types of distributed systems.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此附录的一些部分与[*使用 Dask 扩展 Python*](https://oreil.ly/Fk0I6)共享，因为它们是调试所有类型分布式系统的一般良好建议。
- en: General Debugging Tips with Ray
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ray 的一般调试技巧
- en: 'You likely have your own standard debugging techniques for working with Python
    code, and this appendix is not meant to replace them. Here are some general tech­ni⁠ques
    that make more sense with Ray:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能有自己的标准 Python 代码调试技术，本附录不旨在替代它们。以下是一些在使用 Ray 时更有意义的一般技术：
- en: Break up failing functions into smaller functions. Since `ray.remote` schedules
    on the block of a function, smaller functions make it easier to isolate the problem.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将失败的函数拆分为较小的函数。由于`ray.remote`在函数块上调度，较小的函数使问题更容易隔离。
- en: Be careful about any unintended scope capture.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意任何意外的作用域捕获。
- en: Sample data and try to reproduce it locally (local debugging is often easier).
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用示例数据尝试在本地重现它（本地调试通常更容易）。
- en: Use Mypy for type checking. While we haven’t included types in all our examples,
    liberal type usage can catch tricky errors in production code.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Mypy 进行类型检查。虽然我们并未在所有示例中包含类型，但在生产代码中，使用自由的类型可以捕获棘手的错误。
- en: When issues appear regardless of parallelization, debug your code in single-threaded
    mode, where it can be easier to understand what’s going on.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当问题无论并行化如何出现时，请在单线程模式下调试您的代码，这样更容易理解发生了什么。
- en: Now, with those additional general tips, it’s time to learn more about the tools
    and techniques to help your Ray debugging.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有了这些额外的一般技巧，是时候了解更多有关工具和技术，帮助您进行 Ray 调试了。
- en: Serialization Errors
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 序列化错误
- en: Serialization plays an important part in Ray, but can also be a source of headaches
    as small changes can result in unintended variable capture and serialization failure.
    Thankfully, Ray has a util function `inspect_serializability` in `ray.util` that
    you can use to debug serialization errors. If you intentionally define a function
    that captures nonserializable data, like [Example C-1](#bad_ser_ex), you can run
    `inspect_serializability` and see how it reports the failure (as in [Example C-2](#bad_ser_result)).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 序列化在 Ray 中起着重要作用，但也可能是头痛的来源，因为小的更改可能导致意外的变量捕获和序列化失败。幸运的是，Ray 在 `ray.util` 中有一个实用函数
    `inspect_serializability`，您可以使用它来调试序列化错误。如果您有意定义一个捕获非可序列化数据的函数，比如 [示例 C-1](#bad_ser_ex)，您可以运行
    `inspect_serializability` 看看它如何报告失败（如 [示例 C-2](#bad_ser_result)）。
- en: Example C-1\. [Bad serialization example](https://oreil.ly/eygeJ)
  id: totrans-14
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 C-1\. [错误的序列化示例](https://oreil.ly/eygeJ)
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Example C-2\. Bad serialization result
  id: totrans-16
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 C-2\. 错误的序列化结果
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, Ray checks the elements for serializability and calls out that
    the nonserializable value `pool` is coming in from the global scope.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，Ray 检查元素的可序列化性，并指出非序列化值 `pool` 来自全局范围。
- en: Local Debugging with Ray Local
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ray 本地调试
- en: Using Ray in local mode allows you to use the tools you are accustomed to without
    having to deal with the complexity of setting up remote debugging. We won’t cover
    the variety of local Python debugging tools, so this section exists just to remind
    you to try to reproduce the problem in local mode first before you start using
    the fancy debugging techniques covered in the rest of this appendix.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地模式下使用 Ray，可以让您使用习惯的工具，而无需处理设置远程调试的复杂性。我们不会涵盖各种本地 Python 调试工具，因此这一部分存在的意义仅在于提醒您首先尝试在本地模式下重现问题，然后再开始使用本附录其余部分涵盖的高级调试技术。
- en: Remote Debugging
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程调试
- en: Remote debugging can be an excellent tool but requires more access to the cluster,
    something that may not always be available. Ray’s own special integrated `ray
    debug` tool supports tracing across the entire cluster. Unfortunately, other remote
    Python debuggers attach to only one machine at a time, so you can’t simply point
    your debugger at an entire cluster.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 远程调试可以是一个很好的工具，但需要更多对集群的访问权限，这在某些情况下可能并不总是可用。Ray 的特殊集成工具 `ray debug` 支持跨整个集群的追踪。不幸的是，其他远程
    Python 调试器一次只能附加到一个机器上，因此你不能简单地将调试器指向整个集群。
- en: Warning
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Remote debugging can result in large performance changes and security implications.
    It is important to notify all users before enabling remote debugging on a cluster.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 远程调试可能会导致性能变化和安全隐患。在启用集群上的远程调试之前，通知所有用户非常重要。
- en: If you control your own environment, setting up remote debugging is comparatively
    straightforward, but in an enterprise deployment, you may find resistance to enabling
    this. In those situations, using a local cluster or asking for a development cluster
    to debug on are your best options.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你控制自己的环境，设置远程调试相对比较简单，但在企业部署中，你可能会遇到启用这一功能的阻力。在这种情况下，使用本地集群或请求一个开发集群进行调试是你最好的选择。
- en: Tip
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: For interactive debuggers, you may need to work with your systems administrator
    to expose additional ports from your cluster.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于交互式调试器，你可能需要与系统管理员合作，以公开集群中额外的端口。
- en: Ray’s Integrated Debugger (via Pdb)
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ray 的集成调试器（通过 Pdb）
- en: Ray has integrated support for debugging with Pdb, allowing you to trace code
    across your cluster. You still need to change the launch command (`ray start`)
    to include (`ray start --ray-debugger-external`) to load the debugger. With Ray’s
    external debugger enabled on the workers, Pdb will listen on an additional port
    (without any authentication) for debuggers to connect.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Ray 支持通过 Pdb 进行调试的集成，允许你跨集群跟踪代码。你仍然需要修改启动命令 (`ray start`) 来包括 (`ray start --ray-debugger-external`)
    来加载调试器。启用 Ray 的外部调试器后，Pdb 将在额外端口上监听（无需任何认证），以供调试器连接。
- en: Once your cluster is configured and launched, you can start the Ray debugger
    on the head node.^([1](app03.html#idm45354756146752)) To start the debugger, you
    just need to run `ray debug`, and then you can use all of your favorite [Pdb debugging
    commands](https://oreil.ly/mR50g).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你配置并启动了集群，你可以在主节点上启动 Ray 调试器。^([1](app03.html#idm45354756146752)) 要启动调试器，只需运行
    `ray debug`，然后你可以使用所有你喜欢的 [Pdb 调试命令](https://oreil.ly/mR50g)。
- en: Other Tools
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他工具
- en: For nonintegrated tools, since each call to a remote function can be scheduled
    on a different worker, you may find it easier to (temporarily) convert your stateless
    function into an actor. This will have real performance considerations, so may
    not be suitable for a production environment, but does mean that repeated calls
    will be routed to the same machine, making the task of debugging simpler.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非集成工具，由于每次对远程函数的调用可能被安排在不同的工作节点上，你可能会发现将你的无状态函数暂时转换为执行器会更容易调试。这将会对性能产生真实的影响，因此在生产环境中可能不适用，但确实意味着重复调用将路由到同一台机器，从而使调试任务更加简单。
- en: PyCharm
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyCharm
- en: PyCharm is a popular Python IDE with an integrated debugger. While it is not
    integrated like Pdb, you can still make it work with a few simple changes. The
    first step is to add the `pydevd-pycharm` package to your container/requirements.
    Then, in the actor you want to debug, you can enable PyCharm debugging as shown
    in [Example C-3](#ex_pydev_charm).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm 是一个集成调试器的流行 Python IDE。虽然它不像 Pdb 那样集成，但你可以通过几个简单的更改使其工作。第一步是将 `pydevd-pycharm`
    包添加到你的容器/要求中。然后，在你想要调试的执行器中，你可以像 [示例 C-3](#ex_pydev_charm) 中展示的那样启用 PyCharm 调试。
- en: Example C-3\. [Enabled PyCharm remote debugging](https://oreil.ly/eygeJ)
  id: totrans-35
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 C-3\. [启用 PyCharm 远程调试](https://oreil.ly/eygeJ)
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Your actor will then create a connection back from the executor to your PyCharm
    IDE.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你的执行器将会从执行者回到你的 PyCharm IDE 创建连接。
- en: Python profilers
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 分析器
- en: Python profilers can help track down memory leaks, hot code paths, and other
    important-to-address non-error states.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Python 分析器可以帮助追踪内存泄漏、热代码路径以及其他重要但不是错误状态。
- en: Profilers are less problematic than live remote debugging from a security point
    of view, as they do not require a direct connection from your machine to the cluster.
    Instead, the profiler runs and generates a report, which you can look at offline.
    Profiling still introduces performance overhead, so be careful when deciding whether
    to enable it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从安全角度来看，性能分析器比远程实时调试问题少，因为它们不需要从您的计算机直接连接到集群。 相反，分析器运行并生成报告，您可以离线查看。 性能分析仍然会带来性能开销，因此在决定是否启用时要小心。
- en: To enable Python memory profiling on the executors, you can change the launch
    command to have the prefix `mprof run -E --include-children, -o memory​_pro⁠file.dat
    --python`. You can then collect the `memory_profile` and plot them with `matplotlib`
    on your machine to see if anything sticks out.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要在执行器上启用Python内存分析，您可以更改启动命令以添加前缀`mprof run -E --include-children, -o memory​_pro⁠file.dat
    --python`。 然后，您可以收集`memory_profile`并在您的计算机上用`matplotlib`绘制它们，以查看是否有什么异常。
- en: Similarly, you can enable function profiling in your `ray execute` by replacing
    `ray start` in your launch command with `echo "from ray.scripts.scripts import
    main; main()" > launch.py; python -m cProfile -o stats launch.py`. This is a bit
    more complicated than using `mprof` since the default Ray launch script does not
    play nice with the `cProfile`, so you need to create a different entry point—​but
    conceptually it is equivalent.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，您可以通过在启动命令中用`echo "from ray.scripts.scripts import main; main()" > launch.py;
    python -m cProfile -o stats launch.py`替换`ray start`来在`ray execute`中启用函数分析。 这比使用`mprof`略微复杂，因为默认的Ray启动脚本与`cProfile`不兼容，因此您需要创建一个不同的入口点—但在概念上是等效的。
- en: Warning
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: The `line_profiler` package used for annotation-based profiling does not work
    well with Ray, so you must use whole program profiling.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 用于基于注释的分析的`line_profiler`包与Ray不兼容，因此您必须使用整体程序分析。
- en: Ray and Container Exit Codes
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ray和容器退出代码
- en: '*Exit codes* are numeric codes that are set when a program exits, with any
    value besides 0 normally indicating failure. These codes (by convention) generally
    have meaning but are not 100% consistent. The following are some common exit codes:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*退出代码*是程序退出时设置的数字代码，除了0以外的任何值通常表示失败。 这些代码（按照惯例）通常有意义，但不是100%一致。 以下是一些常见的退出代码：'
- en: '0'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '0'
- en: Success (but often misreported, especially in shell scripts)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 成功（但通常误报，特别是在shell脚本中）
- en: '1'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: Generic error
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通用错误
- en: '127'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '127'
- en: Command not found (in a shell script)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 命令未找到（在shell脚本中）
- en: '130'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '130'
- en: User terminated (Ctrl-C or kill)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 用户终止（Ctrl-C或kill）
- en: '137'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '137'
- en: Out-of-memory error *or* kill -9 (force kill, not ignorable)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Out-of-memory error *或* kill -9（强制终止，不可忽略）
- en: '139'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '139'
- en: Segmentation fault (often null pointer dereference in native code)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 段错误（通常是本地代码中的空指针解引用）
- en: You can print out the exit code of the last command run with `echo $?`. In a
    script running in strict mode (like some Ray launch scripts), you can print out
    the exit code while still propagating the error with `[raycommand] || (error=$?;
    echo $error; exit $error)`.^([2](app03.html#idm45354756002752))
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`echo $?`打印出上次运行命令的退出代码。 在运行严格模式脚本（如某些Ray启动脚本）时，您可以打印出退出代码，同时传播错误`[raycommand]
    || (error=$?; echo $error; exit $error)`。^([2](app03.html#idm45354756002752))
- en: Ray Logs
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ray日志
- en: Ray’s logs behave differently from those of many other distributed applications.
    Since Ray tends to launch worker processes on the container separate from the
    initial container startup,^([3](app03.html#idm45354755996784)) the stdout and
    stderr associated with the container will (most often) not contain the debugging
    information you need. Instead, you can access the worker container logs on the
    head node by looking for the latest session directory to which Ray creates a symbolic
    link at */tmp/ray/session_latest*.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Ray的日志与许多其他分布式应用程序的日志行为不同。 由于Ray倾向于在容器启动之后在容器上启动工作进程，^([3](app03.html#idm45354755996784))
    与容器关联的stdout和stderr通常不包含您需要的调试信息。 相反，您可以通过查找Ray在头节点上创建符号链接到的最新会话目录*/tmp/ray/session_latest*来访问工作容器日志。
- en: Container Errors
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器错误
- en: Debugging container errors can be especially challenging, as many of the standard
    debugging techniques explored so far have challenges. These errors can range from
    common occurrences, like OOM errors, to the more esoteric. It can be difficult
    to distinguish the cause of the container error or exit as the container exit
    sometimes removes the logs.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 调试容器错误可能特别具有挑战性，因为到目前为止探索的许多标准调试技术都有挑战。 这些错误可以从常见的错误（如OOM错误）到更神秘的错误。 很难区分容器错误或退出的原因，因为容器退出有时会删除日志。
- en: On Kubernetes, you can sometimes get the logs of a container that has already
    exited by adding `-p` to your log request (e.g., `kubectl logs -p`). You can also
    configure `terminationMessagePath` to point to a file that contains information
    regarding termination exit. If your Ray worker is exiting, it can make sense to
    customize the Ray container launch script to add more logging. Common types of
    additional logging include the last few lines from *syslog* or *dmesg* (looking
    for OOMs) to a file location that you can use to debug later.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes上，有时可以通过在日志请求中添加`-p`来获取已经退出的容器的日志（例如，`kubectl logs -p`）。你还可以配置`terminationMessagePath`来指向包含有关终止退出信息的文件。如果你的Ray
    worker退出，定制Ray容器启动脚本以增加更多日志记录可能是有意义的。常见的附加日志类型包括从*syslog*或*dmesg*中获取的最后几行（查找OOMs），将其记录到稍后可以用于调试的文件位置。
- en: The most common kind of container error, native memory leaks, can be challenging
    to debug. Tools like [Valgrind](https://oreil.ly/8E9iG) can sometimes track down
    native memory leaks. The details of using tools like Valgrind are beyond the scope
    of this book, so check out the [Python Valgrind documentation](https://oreil.ly/jzRwT).
    Another “trick” you might want to try is effectively bisecting your code; since
    native memory leaks happen most frequently in library calls, you can try commenting
    them out and running tests to see which library call is the source of the leak.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的容器错误之一，本地内存泄漏，可能很难调试。像[Valgrind](https://oreil.ly/8E9iG)这样的工具有时可以追踪本地内存泄漏。使用类似Valgrind的工具的详细信息超出了本书的范围，请查看[Python
    Valgrind文档](https://oreil.ly/jzRwT)。你可能想尝试的另一个“技巧”是有效地二分你的代码；因为本地内存泄漏最常发生在库调用中，你可以尝试注释它们并运行测试，看看哪个库调用是泄漏的来源。
- en: Native Errors
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地错误
- en: Native errors and core dumps can be challenging to debug for the same reasons
    as container errors. Since these types of errors often result in the container
    exiting, accessing the debugging information can become challenging. A “quick”
    solution to this is to add `sleep` to the Ray launch script (on failure) so that
    you can connect to the container (e.g., `[raylaunchcommand] || sleep 100000`)
    and use native debugging tools.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 本地错误和核心转储与容器错误具有相同的调试挑战。由于这些类型的错误通常导致容器退出，因此访问调试信息变得更加困难。这个问题的“快速”解决方案是在Ray启动脚本中（失败时）添加`sleep`，以便你可以连接到容器（例如，`[raylaunchcommand]
    || sleep 100000`）并使用本地调试工具。
- en: However, accessing the internals of a container can be easier said than done.
    In many production environments, you may not be able to get remote access (e.g.,
    `kubectly exec` on Kubernetes) for security reasons. If that is the case, you
    can (sometimes) add a shutdown script to your container specification that copies
    the core files to a location that persists after the container shuts down (e.g.,
    s3, HDFS, or NFS).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在许多生产环境中，访问容器的内部可能比表面看起来更容易。出于安全原因，你可能无法获得远程访问（例如，在Kubernetes上使用`kubectl
    exec`）。如果是这种情况，你可以（有时）向容器规范添加关闭脚本，将核心文件复制到容器关闭后仍然存在的位置（例如，s3、HDFS或NFS）。
- en: Conclusion
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: You will have a bit more work to get started with your debugging tools in Ray,
    and when possible, Ray’s local mode offers a great alternative to remote debugging.
    You can take advantage of Ray actors to make remote functions schedule more predictably,
    making it easier to know where to attach your debugging tools. Not all errors
    are created equal, and some errors, like segmentation faults in native code, are
    especially challenging to debug. Good luck finding the bug(s)! We believe in you.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ray中，启动调试工具可能需要更多工作，如果可能的话，Ray的本地模式是远程调试的一个很好的选择。你可以利用Ray的actors来使远程函数调度更可预测，这样更容易知道在哪里附加你的调试工具。并非所有错误都是平等的，一些错误，比如本地代码中的分段错误，尤其难以调试。祝你找到Bug(s)！我们相信你。
- en: ^([1](app03.html#idm45354756146752-marker)) Ray has the `ray attach` command
    to create an SSH connection to the head node; however, not all head nodes will
    have an SSH server. On Ray on Kubernetes, you can get to the head node by running
    `kubectl exec -it -n [rayns] [podname] – /bin/bash`. Each cluster manager is slightly
    different here, so you may have to check your cluster manager’s documentation.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](app03.html#idm45354756146752-marker)) Ray有`ray attach`命令来创建到主节点的SSH连接；但并非所有主节点都会有SSH服务器。在Ray
    on Kubernetes上，你可以通过运行`kubectl exec -it -n [rayns] [podname] – /bin/bash`来到达主节点。每个集群管理器在此处略有不同，因此你可能需要查阅你的集群管理器的文档。
- en: ^([2](app03.html#idm45354756002752-marker)) The exact details of where to configure
    this change depends on the cluster manager being used. For Ray on Kube with the
    autoscaler, you can change `workerStartRayCommands`. For Ray on AWS, change `worker_start_ray_commands`,
    etc.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](app03.html#idm45354756002752-marker)) 这个更改的确切配置位置取决于所使用的集群管理器。对于在 Kube
    上使用自动缩放器的 Ray，你可以修改 `workerStartRayCommands`。对于在 AWS 上的 Ray，修改 `worker_start_ray_commands`，等等。
- en: ^([3](app03.html#idm45354755996784-marker)) This is done either by `ssh` or
    `kubectl exec`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](app03.html#idm45354755996784-marker)) 这可以通过 `ssh` 或 `kubectl exec` 完成。
