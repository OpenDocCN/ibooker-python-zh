- en: Chapter 3\. Numbers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章\. 数字
- en: That action is best which procures the greatest happiness for the greatest numbers.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 行动是最大程度地为最大数量的人带来最大幸福的行动。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Francis Hutcheson
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 弗朗西斯·哈切森
- en: 'In this chapter we begin by looking at Python’s simplest built-in data types:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先看一下 Python 最简单的内置数据类型：
- en: '*Booleans* (which have the value `True` or `False`)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*布尔值*（其值为`True`或`False`）'
- en: '*Integers* (whole numbers such as `42` and `100000000`)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*整数*（如`42`和`100000000`）'
- en: '*Floats* (numbers with decimal points such as `3.14159`, or sometimes exponents
    like `1.0e8`, which means *one times ten to the eighth power*, or `100000000.0`)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*浮点数*（带有小数点的数字，如`3.14159`，或者有时指数形式如`1.0e8`，表示*10 的 8 次方*，或者`100000000.0`）'
- en: In a way, they’re like atoms. We use them individually in this chapter, and
    in later chapters you’ll see how to combine them into larger “molecules” like
    lists and dictionaries.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从某种意义上说，它们就像原子一样。本章中我们单独使用它们，而在后续章节中，您将看到如何将它们组合成像列表和字典这样更大的“分子”。
- en: Each type has specific rules for its usage and is handled differently by the
    computer. I also show how to use *literal* values like `97` and `3.1416`, and
    the *variables* that I mentioned in [Chapter 2](ch02.html#ch_names).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 每种类型都有其使用的特定规则，并由计算机以不同方式处理。我还展示了如何使用像`97`和`3.1416`这样的*字面值*值，以及我在[第 2 章](ch02.html#ch_names)中提到的*变量*。
- en: The code examples in this chapter are all valid Python, but they’re snippets.
    We’ll be using the Python interactive interpreter, typing these snippets and seeing
    the results immediately. Try running them yourself with the version of Python
    on your computer. You’ll recognize these examples by the `>>>` prompt.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码示例都是有效的 Python 代码，但它们只是片段。我们将使用 Python 交互解释器，键入这些片段并立即查看结果。尝试在您的计算机上使用所安装的
    Python 版本来运行它们。您可以通过`>>>`提示符识别这些示例。
- en: Booleans
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布尔值
- en: In Python, the only values for the boolean data type are `True` and `False`.
    Sometimes, you’ll use these directly; other times you’ll evaluate the “truthiness”
    of other types from their values. The special Python function `bool()` can convert
    any Python data type to a boolean.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，布尔数据类型的唯一值为`True`和`False`。有时直接使用它们，其他时候从它们的值评估“真假性”。特殊的 Python 函数`bool()`可以将任何
    Python 数据类型转换为布尔值。
- en: Functions get their own chapter in [Chapter 9](ch09.html#ch_functions), but
    for now you just need to know that a function has a name, zero or more comma-separated
    input *arguments* surrounded by parentheses, and zero or more *return values*.
    The `bool()` function takes any value as its argument and returns the boolean
    equivalent.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 函数在[第 9 章](ch09.html#ch_functions)中有专门的章节，但现在您只需要知道函数有一个名称，零个或多个用逗号分隔的*参数*，用括号括起来，以及零个或多个*返回值*。`bool()`函数接受任何值作为其参数，并返回布尔等价值。
- en: 'Nonzero numbers are considered `True`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 非零数字被视为`True`：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And zero-valued ones are considered `False`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 零值也被视为`False`：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You’ll see the usefulness of booleans in [Chapter 4](ch04.html#ch_if). In later
    chapters, you’ll see how lists, dictionaries, and other types can be considered
    `True` or `False`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在[第 4 章](ch04.html#ch_if)中看到布尔值的实用性。在后续章节中，您将看到如何将列表、字典和其他类型视为`True`或`False`。
- en: Integers
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整数
- en: Integers are whole numbers—no fractions, no decimal points, nothing fancy. Well,
    aside from a possible initial sign. And bases, if you want to express numbers
    in other ways than the usual decimal (base 10).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 整数是整数——没有分数，没有小数点，没有花哨的东西。嗯，除了可能的初始符号。如果您希望以除了通常的十进制（10 进制）以外的其他方式表示数字，还有基数。
- en: Literal Integers
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 整数字面值
- en: 'Any sequence of digits in Python represents a *literal integer*:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，任何数字序列都表示一个*整数字面值*：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A plain zero (`0`) is valid:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 纯零（`0`）是有效的：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'But you can’t have an initial `0` followed by a digit between `1` and `9`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但是您不能以`0`开头，后面跟着介于`1`到`9`之间的数字：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-28
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This Python *exception* warns that you typed something that breaks Python’s
    rules. I explain what this means in [“Bases”](#bases). You’ll see many more examples
    of exceptions in this book because they’re Python’s main error handling mechanism.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此 Python *异常*警告您输入了违反 Python 规则的内容。我在[“基数”](#bases)中解释了这意味着什么。在本书中，您将看到更多异常的示例，因为它们是
    Python 的主要错误处理机制。
- en: You can start an integer with `0b`, `0o`, or `0x`. See [“Bases”](#bases).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以以`0b`、`0o`或`0x`开头一个整数。参见[“基数”](#bases)。
- en: 'A sequence of digits specifies a positive integer. If you put a `+` sign before
    the digits, the number stays the same:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 数字序列指定一个正整数。如果在数字前面加上`+`号，则数字保持不变：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To specify a negative integer, insert a – before the digits:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定负整数，在数字前面插入一个`-`：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can’t have any commas in the integer:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 整数中不能有逗号：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Instead of a million, you’d get a *tuple* (see [Chapter 7](ch07.html#ch_lists)
    for more information on tuples) with three values. But you *can* use the underscore
    (`_`) character as a digit separator:^([1](ch03.html#idm45795032481464))
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 与百万不同，你会得到一个*元组*（参见[第7章](ch07.html#ch_lists)了解更多关于元组的信息），包含三个值。但是你*可以*使用下划线（`_`）作为数字分隔符：^([1](ch03.html#idm45795032481464))
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Actually, you can put underscores anywhere after the first digit; they’re just
    ignored:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你可以在第一个数字后的任何位置放置下划线；它们会被忽略：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Integer Operations
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 整数运算
- en: 'For the next few pages, I show examples of Python acting as a simple calculator.
    You can do normal arithmetic with Python by using the math *operators* in this
    table:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几页中，我展示了Python作为一个简单计算器的示例。你可以通过使用表格中的数学*操作符*在Python中进行常规算术运算：
- en: '| Operator | Description | Example | Result |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 操作符 | 描述 | 示例 | 结果 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `+` | Addition | `5 + 8` | `13` |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `+` | 加法 | `5 + 8` | `13` |'
- en: '| `-` | Subtraction | `90 - 10` | `80` |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `-` | 减法 | `90 - 10` | `80` |'
- en: '| `*` | Multiplication | `4 * 7` | `28` |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `*` | 乘法 | `4 * 7` | `28` |'
- en: '| `/` | Floating-point division | `7 / 2` | `3.5` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `/` | 浮点数除法 | `7 / 2` | `3.5` |'
- en: '| `//` | Integer (truncating) division | `7 // 2` | `3` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `//` | 整数（截断）除法 | `7 // 2` | `3` |'
- en: '| `%` | Modulus (remainder) | `7 % 3` | `1` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `%` | 取模（余数） | `7 % 3` | `1` |'
- en: '| `**` | Exponentiation | `3 ** 4` | `81` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `**` | 指数运算 | `3 ** 4` | `81` |'
- en: 'Addition and subtraction work as you’d expect:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 加法和减法的工作方式与你期望的一样：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can include as many numbers and operators as you’d like:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以包含任意数量的数字和操作符：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Note that you’re not required to have a space between each number and operator:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每个数字和操作符之间不需要有空格：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It just looks better stylewise and is easier to read.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在风格上看起来更好，而且更容易阅读。
- en: 'Multiplication is also straightforward:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 乘法也很简单：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Division is a little more interesting because it comes in two flavors:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 除法更有趣一些，因为它有两种形式：
- en: '`/` carries out *floating-point* (decimal) division'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/` 执行*浮点数*（十进制）除法'
- en: '`//` performs *integer* (truncating) division'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`//` 执行*整数*（截断）除法'
- en: 'Even if you’re dividing an integer by an integer, using a `/` will give you
    a floating-point result (*floats* are coming later in this chapter):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你将整数除以整数，使用 `/` 也会给你一个浮点结果（*浮点数*稍后在本章讨论）：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Truncating integer division returns an integer answer, throwing away any remainder:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 截断整数除法返回一个整数答案，丢弃任何余数：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Instead of tearing a hole in the space-time continuum, dividing by zero with
    either kind of division causes a Python exception:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 无论使用哪种除法，将整数除以零都会引发Python异常，而不是撕开时空维度：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Integers and Variables
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 整数和变量
- en: 'All of the preceding examples used literal integers. You can mix literal integers
    and variables that have been assigned integer values:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所有前面的例子都使用了文字整数。你可以混合使用文字整数和已经赋予整数值的变量：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You’ll remember from [Chapter 2](ch02.html#ch_names) that `a` is a name that
    points to an integer object. When I said `a - 3`, I didn’t assign the result back
    to `a`, so the value of `a` did not change:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你会记得从[第2章](ch02.html#ch_names)中，`a` 是一个指向整数对象的名称。当我说 `a - 3` 时，我没有将结果再赋给 `a`，因此
    `a` 的值没有改变：
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If you wanted to change `a`, you would do this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果想要改变 `a`，你需要这样做：
- en: '[PRE19]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Again, this would not be a legal math equation, but it’s how you reassign a
    value to a variable in Python. In Python, the expression on the right side of
    the `=` is calculated first, and then assigned to the variable on the left side.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这不是一个合法的数学方程，而是在Python中重新分配变量值的方式。在Python中，等号右侧的表达式先计算，然后再赋给左侧的变量。
- en: 'If it helps, think of it this way:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有帮助，可以这样考虑：
- en: Subtract `3` from `a`
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 `a` 减去 `3`
- en: Assign the result of that subtraction to a temporary variable
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将减法的结果赋给一个临时变量
- en: 'Assign the value of the temporary variable to `a`:'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将临时变量的值赋给 `a`：
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: So, when you say
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当你说
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Python is calculating the subtraction on the righthand side, remembering the
    result, and then assigning it to `a` on the left side of the `+` sign. It’s faster
    and neater than using a temporary variable.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Python在等号右侧计算减法，记住结果，然后将其分配给 `a` 在加号左侧。这比使用临时变量更快、更整洁。
- en: 'You can combine the arithmetic operators with assignment by putting the operator
    before the `=`. Here, `a -= 3` is like saying `a = a - 3`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在等号前放置操作符将算术运算符与赋值结合起来。例如，`a -= 3` 相当于 `a = a - 3`：
- en: '[PRE22]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This is like `a = a + 8`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像 `a = a + 8` 一样：
- en: '[PRE23]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And this is like `a = a * 2`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像 `a = a * 2` 一样：
- en: '[PRE24]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here’s a floating-point division example, like `a = a / 3`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个浮点除法的例子，例如 `a = a / 3`：
- en: '[PRE25]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now let’s try the shorthand for `a = a // 4` (truncating integer division):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们试试 `a = a // 4` 的缩写（截断整数除法）：
- en: '[PRE26]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `%` character has multiple uses in Python. When it’s between two numbers,
    it produces the remainder when the first number is divided by the second:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`%` 字符在Python中有多种用法。当它在两个数字之间时，它产生第一个数除以第二个数的余数：'
- en: '[PRE27]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Here’s how to get both the (truncated) quotient and remainder at once:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是如何同时获得截断的商和余数：
- en: '[PRE28]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Otherwise, you could have calculated them separately:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，你可以分别计算它们：
- en: '[PRE29]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You just saw some new things here: a *function* named `divmod` is given the
    integers `9` and `5` and returns a two-item *tuple*. As I mentioned earlier, tuples
    will take a bow in [Chapter 7](ch07.html#ch_lists); functions debut in [Chapter 9](ch09.html#ch_functions).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚在这里看到了一些新东西：一个名为 `divmod` 的*函数*被给定整数 `9` 和 `5`，并返回一个两项的*元组*。正如我之前提到的，元组将在[第7章](ch07.html#ch_lists)亮相；函数则在[第9章](ch09.html#ch_functions)首次登场。
- en: 'One last math feature is exponentiation with `**`, which also lets you mix
    integers and floats:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个数学特性是指数运算符 `**`，它还允许你混合整数和浮点数：
- en: '[PRE30]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Precedence
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优先级
- en: What would you get if you typed the following?
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你输入以下内容，会得到什么？
- en: '[PRE31]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If you do the addition first, `2 + 3` is `5`, and `5 * 4` is `20`. But if you
    do the multiplication first, `3 * 4` is `12`, and `2 + 12` is `14`. In Python,
    as in most languages, multiplication has higher *precedence* than addition, so
    the second version is what you’d see:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你先做加法，`2 + 3` 是 `5`，然后 `5 * 4` 是 `20`。但如果你先做乘法，`3 * 4` 是 `12`，然后 `2 + 12`
    是 `14`。在Python中，与大多数语言一样，乘法比加法具有更高的*优先级*，所以第二个版本是你会看到的：
- en: '[PRE32]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'How do you know the precedence rules? There’s a big table in [Appendix E](app05.html#app_cheatsheets)
    that lists them all, but I’ve found that in practice I never look up these rules.
    It’s much easier to just add parentheses to group your code as you intend the
    calculation to be carried out:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你如何知道运算符的优先级规则？在[附录 E](app05.html#app_cheatsheets)中有一张大表列出了所有规则，但实际上我从不查看这些规则。只需通过添加括号来组合代码以执行你意图的计算，会更容易得多：
- en: '[PRE33]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This example with exponents
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个带有指数的例子
- en: '[PRE34]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: is the same as
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 是相同的
- en: '[PRE35]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'and probably not what you wanted. Parentheses make it clear:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 而且可能不是你想要的。括号可以明确表达：
- en: '[PRE36]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This way, anyone reading the code doesn’t need to guess its intent or look up
    precedence rules.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，任何阅读代码的人都不需要猜测它的意图或查阅优先级规则。
- en: Bases
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基数
- en: Integers are assumed to be decimal (base 10) unless you use a prefix to specify
    another *base*. You might never need to use these other bases, but you’ll probably
    see them in Python code somewhere, sometime.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 假设整数默认为十进制（十进制），除非你使用前缀来指定另一个*基数*。你可能永远不需要使用这些其他基数，但在某个时候你可能会在Python代码中见到它们。
- en: 'We generally have 10 fingers and 10 toes, so we count `0`, `1`, `2`, `3`, `4`,
    `5`, `6`, `7`, `8`, `9`. Next, we run out of single digits and carry the one to
    the “ten’s place” and put a `0` in the one’s place: `10` means “1 ten and 0 ones.”
    Unlike Roman numerals, Arabic numbers don’t have a single character that represents
    “10” Then, it’s `11`, `12`, up to `19`, carry the one to make `20` (2 tens and
    0 ones), and so on.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通常我们有10个手指和10个脚趾，所以我们数 `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`。然后，我们用完了个位数，并把一个`1`进位到“十位”，在个位数放一个`0`：`10`表示“1十和0个”。不像罗马数字，阿拉伯数字没有单独表示“10”的字符。然后是`11`、`12`，一直到`19`，进位成`20`（2十和0个），以此类推。
- en: A base is how many digits you can use until you need to “carry the one.” In
    base 2 (`binary`), the only digits are `0` and `1`. This is the famous *bit*.
    `0` is the same as a plain old decimal 0, and `1` is the same as a decimal 1.
    However, in base 2, if you add a `1` to a `1`, you get `10` (1 decimal two plus
    0 decimal ones).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 基数是你可以使用多少位数，直到需要“进位为一”的数。在二进制（*binary*）中，唯一的位数是`0`和`1`。这就是著名的*比特位*。`0`与普通的十进制0相同，而`1`与十进制1相同。然而，在二进制中，如果你将`1`加到`1`上，你会得到`10`（1十进制二加0十进制一）。
- en: 'In Python, you can express literal integers in three bases besides decimal
    with these integer prefixes:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，除了十进制以外，你可以用这些整数前缀表示字面整数的三种基数：
- en: '`0b` or `0B` for *binary* (base 2).'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0b` 或 `0B` 代表*二进制*（基数2）。'
- en: '`0o` or `0O` for *octal* (base 8).'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0o` 或 `0O` 代表*八进制*（基数8）。'
- en: '`0x` or `0X` for *hex* (base 16).'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0x` 或 `0X` 代表*十六进制*（基数16）。'
- en: These bases are all powers of two, and are handy in some cases, although you
    may never need to use anything other than good old decimal integers.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这些基数都是二的幂，某些情况下很方便，尽管你可能永远不需要使用除了好旧的十进制整数之外的任何东西。
- en: 'The interpreter prints these for you as decimal integers. Let’s try each of
    these bases. First, a plain old decimal `10`, which means *1 ten and 0 ones*:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器将这些打印出来作为十进制整数。让我们尝试每一个基数。首先是一个普通的十进制 `10`，这意味着*1 十和 0 个一*：
- en: '[PRE37]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now, a binary (base two) `0b10`, which means *1 (decimal) two and 0 ones*:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，二进制（基数 2） `0b10` 表示*1（十进制）二和 0 个一*：
- en: '[PRE38]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Octal (base 8) `0o10` stands for *1 (decimal) eight and 0 ones*:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 八进制（基数 8） `0o10` 代表*1（十进制）八和 0 个一*：
- en: '[PRE39]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Hexadecimal (base 16) `0x10` means *1 (decimal) sixteen and 0 ones*:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 十六进制（基数 16） `0x10` 表示*1（十进制）十六和 0 个一*：
- en: '[PRE40]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You can go the other direction, converting an integer to a string with any
    of these bases:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以反向操作，使用任何这些基数将整数转换为字符串：
- en: '[PRE41]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The `chr()` function converts an integer to its single-character string equivalent:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`chr()` 函数将一个整数转换为其单字符字符串等效物：'
- en: '[PRE42]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'And `ord()` goes the other way:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 而 `ord()` 反向操作：
- en: '[PRE43]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'In case you’re wondering what “digits” base 16 uses, they are: `0`, `1`, `2`,
    `3`, `4`, `5`, `6`, `7`, `8`, `9`, `a`, `b`, `c`, `d`, `e`, and `f`. `0xa` is
    a decimal `10`, and `0xf` is a decimal `15`. Add 1 to `0xf` and you get `0x10`
    (decimal 16).'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道十六进制中所使用的“数字”，它们是：`0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `a`,
    `b`, `c`, `d`, `e`, 和 `f`。 `0xa` 是十进制 `10`，而 `0xf` 是十进制 `15`。在 `0xf` 上加 1，你得到
    `0x10`（十进制 16）。
- en: Why use different bases from 10? They’re useful in *bit-level* operations, which
    are described in [Chapter 12](ch12.html#ch_munging), along with more details about
    converting numbers from one base to another.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要使用不同于十进制的基数？它们在*位级*操作中非常有用，详见[第十二章](ch12.html#ch_munging)，以及有关从一种进制转换到另一种进制的更多细节。
- en: Cats normally have five digits on each forepaw and four on each hindpaw, for
    a total of 18. If you ever encounter cat scientists in their lab coats, they’re
    often discussing base-18 arithmetic. My cat Chester, seen lounging about in [Figure 3-1](#img_chester),
    is a *polydactyl*, giving him a total of 22 or so (they’re hard to distinguish)
    toes. If he wanted to use all of them to count food fragments surrounding his
    bowl, he would likely use a base-22 system (hereafter, the *chesterdigital* system),
    using `0` through `9` and `a` through `l`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 猫通常每只前爪有五个趾，每只后爪有四个趾，总共有 18 个。如果你曾经在他们穿着实验服的猫科学家们之间，他们经常讨论十八进制算术。我的猫切斯特，看到他在[图
    3-1](#img_chester)中悠闲地躺着，是一只*多趾*，给了他大约 22 或更多（很难分辨）的脚趾。如果他想要用它们来计算围绕碗的食物碎片，他可能会使用一个基数
    22 的系统（这里称为*切斯特数字*系统），使用 `0` 到 `9` 和 `a` 到 `l`。
- en: '![chester](assets/inp2_0301.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![chester](assets/inp2_0301.png)'
- en: Figure 3-1\. Chester—a fine furry fellow, and inventor of the chesterdigital
    system
  id: totrans-146
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-1\. 切斯特——一只出色的毛茸茸小伙子，切斯特数字系统的发明者
- en: Type Conversions
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型转换
- en: To change other Python data types to an integer, use the `int()` function.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要将其他 Python 数据类型转换为整数，请使用 `int()` 函数。
- en: The `int()` function takes one input argument and returns one value, the integer-ized
    equivalent of the input argument. This will keep the whole number and discard
    any fractional part.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`int()` 函数接受一个输入参数并返回一个值，即输入参数的整数化等效物。这将保留整数部分并丢弃任何小数部分。'
- en: 'As you saw at the start of this chapter, Python’s simplest data type is the
    *boolean*, which has only the values `True` and `False`. When converted to integers,
    they represent the values `1` and `0`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在本章开头所见，Python 最简单的数据类型是*布尔值*，它只有 `True` 和 `False` 两个值。当转换为整数时，它们分别表示 `1`
    和 `0`：
- en: '[PRE44]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Turning this around, the `bool()` function returns the boolean equivalent of
    an integer:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 相反地，`bool()` 函数返回一个整数的布尔等效物：
- en: '[PRE45]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Converting a floating-point number to an integer just lops off everything after
    the decimal point:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 将浮点数转换为整数只需去掉小数点后的所有内容：
- en: '[PRE46]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Converting a float to a boolean is no surprise:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 将浮点数转换为布尔值并不奇怪：
- en: '[PRE47]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Finally, here’s an example of getting the integer value from a text string
    ([Chapter 5](ch05.html#ch_strings)) that contains only digits, possibly with `_`
    digit separators or an initial `+` or `-` sign:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这里有一个示例，从一个只包含数字的文本字符串中获取整数值（[第五章](ch05.html#ch_strings)）可能包含 `_` 数字分隔符或初始
    `+` 或 `-` 号：
- en: '[PRE48]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'If the string represents a nondecimal integer, you can include the base:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字符串代表一个非十进制整数，你可以包括基数：
- en: '[PRE49]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Converting an integer to an integer doesn’t change anything, but doesn’t hurt
    either:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 将整数转换为整数不会改变任何内容，但也不会造成伤害：
- en: '[PRE50]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'If you try to convert something that doesn’t look like a number, you’ll get
    an *exception*:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你试图转换一个看起来不像是数字的东西，你会得到一个*异常*：
- en: '[PRE51]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The preceding text string started with valid digit characters (`99`), but it
    kept on going with others that the `int()` function just wouldn’t stand for.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的文本字符串以有效的数字字符（`99`）开头，但随后出现了其他字符，这些字符使得`int()`函数无法处理。
- en: '`int()` will make integers from floats or strings of digits, but it won’t handle
    strings containing decimal points or exponents:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`int()`可以从浮点数或数字字符串创建整数，但不能处理包含小数点或指数的字符串：'
- en: '[PRE52]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'If you mix numeric types, Python will sometimes try to automatically convert
    them for you:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你混合使用数值类型，Python有时会尝试自动进行类型转换：
- en: '[PRE53]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The boolean value `False` is treated as `0` or `0.0` when mixed with integers
    or floats, and `True` is treated as `1` or `1.0`:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值`False`在与整数或浮点数混合时被视为`0`或`0.0`，而`True`则被视为`1`或`1.0`：
- en: '[PRE54]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: How Big Is an int?
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个整数有多大？
- en: In Python 2, the size of an `int` could be limited to 32 or 64 bits, depending
    on your CPU; 32 bits can store store any integer from –2,147,483,648 to 2,147,483,647.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 2中，`int`的大小可以限制为32位或64位，具体取决于你的CPU；32位可以存储任何从–2,147,483,648到2,147,483,647的整数。
- en: 'A `long` had 64 bits, allowing values from –9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.
    In Python 3, the `long` type is long gone, and an `int` can be *any* size—even
    greater than 64 bits. You can play with big numbers like a *googol* (one followed
    by a hundred zeroes, [named](https://oreil.ly/6ibo_) in 1920 by a nine-year-old
    boy):'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 64位的`long`类型允许存储范围从–9,223,372,036,854,775,808到9,223,372,036,854,775,807。在Python
    3中，`long`类型已经消失，而`int`可以是*任意*大小，甚至可以比64位还大。你可以处理像*谷歌*（一个后面跟着一百个零的数，[在1920年](https://oreil.ly/6ibo_)被一个九岁的男孩命名）这样的大数：
- en: '[PRE55]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: A *googolplex* is `10**googol` (a thousand zeroes, if you want to try it yourself).
    This was a suggested name for [Google](https://oreil.ly/IQfer) before they decided
    on *googol*, but didn’t check its spelling before registering the domain name
    `google.com`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '*谷歌宇宙*是`10**googol`（如果你想自己尝试的话，有一千个零）。这是谷歌在决定用*谷歌*之前的一个建议名称，但他们在注册域名`google.com`之前没有检查其拼写。'
- en: In many languages, trying this would cause something called *integer overflow*,
    where the number would need more space than the computer allowed for it, with
    various bad effects. Python handles googoly integers with no problem.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多语言中，尝试这样做会导致称为*整数溢出*的问题，其中数字需要比计算机允许的空间更多，会产生各种不良影响。Python处理谷歌般大的整数毫无问题。
- en: Floats
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浮点数
- en: 'Integers are whole numbers, but *floating-point* numbers (called *floats* in
    Python) have decimal points:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 整数是整数，但Python中的*浮点数*（称为*floats*）带有小数点：
- en: '[PRE56]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Floats can include a decimal integer exponent after the letter `e`:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数可以在字母`e`后包含一个十进制整数指数：
- en: '[PRE57]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'You can use underscore (`_`) to separate digits for clarity, as you can for
    integers:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用下划线（`_`）分隔数字以增加清晰度，就像你可以用于整数一样：
- en: '[PRE58]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Floats are handled similarly to integers: you can use the operators (`+`, `–`,
    `*`, `/`, `//`, `**`, and `%`) and the `divmod()` function.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数的处理方式与整数类似：你可以使用操作符（`+`、`–`、`*`、`/`、`//`、`**`和`%`）以及`divmod()`函数。
- en: 'To convert other types to floats, you use the `float()` function. As before,
    booleans act like tiny integers:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要将其他类型转换为浮点数，你可以使用`float()`函数。和以前一样，布尔值表现得像小整数一样：
- en: '[PRE59]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Converting an integer to a float just makes it the proud possessor of a decimal
    point:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 将整数转换为浮点数只会使其成为一个带有小数点的自豪所有者：
- en: '[PRE60]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'And you can convert a string containing characters that would be a valid float
    (digits, signs, decimal point, or an `e` followed by an exponent) to a real float:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将包含字符的字符串转换为有效的浮点数（数字、符号、小数点或`e`后跟一个指数）：
- en: '[PRE61]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'When you mix integers and floats, Python automatically *promotes* the integer
    values to float values:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 当你混合整数和浮点数时，Python会自动将整数值提升为浮点数值：
- en: '[PRE62]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Python also promotes booleans to integers or floats:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Python还会将布尔值提升为整数或浮点数：
- en: '[PRE63]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Math Functions
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数学函数
- en: Python supports complex numbers and has the usual math functions such as square
    roots, cosines, and so on. Let’s save them for [Chapter 22](ch22.html#ch_science),
    in which we also discuss using Python in science contexts.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Python支持复数，并且具有常见的数学函数，如平方根、余弦等等。我们将它们留到[第22章](ch22.html#ch_science)中，在那里我们还将讨论在科学环境中使用Python。
- en: Coming Up
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 即将发生
- en: In the next chapter, you finally graduate from one-line Python examples. With
    the `if` statement, you’ll learn how to make decisions with code.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将终于从单行的Python示例中毕业。通过`if`语句，你将学会如何使用代码做出决策。
- en: Things to Do
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要做的事情
- en: 'This chapter introduced the atoms of Python: numbers, booleans, and variables.
    Let’s try a few small exercises with them in the interactive interpreter.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了Python的基本组成部分：数字、布尔值和变量。让我们在交互式解释器中尝试一些与它们相关的小练习。
- en: 3.1 How many seconds are in an hour? Use the interactive interpreter as a calculator
    and multiply the number of seconds in a minute (`60`) by the number of minutes
    in an hour (also `60`).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 3.1 一个小时有多少秒？使用交互式解释器作为计算器，将每分钟的秒数（`60`）乘以每小时的分钟数（同样是`60`）。
- en: 3.2 Assign the result from the previous task (seconds in an hour) to a variable
    called `seconds_per_hour`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 3.2 将前一个任务（每小时的秒数）的结果赋给名为`seconds_per_hour`的变量。
- en: 3.3 How many seconds are in a day? Use your `seconds_per_hour` variable.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 3.3 一天有多少秒？使用你的`seconds_per_hour`变量。
- en: 3.4 Calculate seconds per day again, but this time save the result in a variable
    called `seconds_per_day`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 3.4 再次计算每天的秒数，但这次将结果保存在名为`seconds_per_day`的变量中。
- en: 3.5 Divide `seconds_per_day` by `seconds_per_hour`. Use floating-point (`/`)
    division.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 3.5 将`seconds_per_day`除以`seconds_per_hour`。使用浮点数（`/`）除法。
- en: 3.6 Divide `seconds_per_day` by `seconds_per_hour`, using integer (`//`) division.
    Did this number agree with the floating-point value from the previous question,
    aside from the final `.0`?
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 3.6 将`seconds_per_day`除以`seconds_per_hour`，使用整数（`//`）除法。除了最后的`.0`，这个数字是否与前一个问题中的浮点值一致？
- en: ^([1](ch03.html#idm45795032481464-marker)) For Python 3.6 and newer.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch03.html#idm45795032481464-marker)) 适用于 Python 3.6 及更新版本。
