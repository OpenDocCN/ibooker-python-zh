- en: Afterword
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后记
- en: Python is a language for consenting adults.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Python是一个成年人的语言。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Alan Runyan, cofounder of Plone
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Alan Runyan，Plone联合创始人
- en: 'Alan’s pithy definition expresses one of the best qualities of Python: it gets
    out of the way and lets you do what you must. This also means it doesn’t give
    you tools to restrict what others can do with your code and the objects it builds.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Alan的简洁定义表达了Python最好的特质之一：它不会干扰你，而是让你做你必须做的事情。这也意味着它不会给你工具来限制别人对你的代码和构建的对象所能做的事情。
- en: At age 30, Python is still growing in popularity. But of course, it is not perfect.
    Among the top irritants to me is the inconsistent use of `CamelCase`, `snake_case`,
    and `joinedwords` in the standard library. But the language definition and the
    standard library are only part of an ecosystem. The community of users and contributors
    is the best part of the Python ecosystem.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 30岁时，Python仍在不断增长。但当然，它并不完美。对我来说，最令人恼火的问题之一是标准库中对`CamelCase`、`snake_case`和`joinedwords`的不一致使用。但语言定义和标准库只是生态系统的一部分。用户和贡献者的社区是Python生态系统中最好的���分。
- en: 'Here is one example of the community at its best: while writing about *asyncio*
    in the first edition, I was frustrated because the API has many functions, dozens
    of which are coroutines, and you had to call the coroutines with `yield from`—now
    with `await`—but you can’t do that with regular functions. This was documented
    in the *asyncio* pages, but sometimes you had to read a few paragraphs to find
    out whether a particular function was a coroutine. So I sent a message to python-tulip
    titled [“Proposal: make coroutines stand out in the *asyncio* docs”](https://fpy.li/a-1).
    Victor Stinner, an *asyncio* core developer; Andrew Svetlov, main author of *aiohttp*;
    Ben Darnell, lead developer of Tornado; and Glyph Lefkowitz, inventor of *Twisted*,
    joined the conversation. Darnell suggested a solution, Alexander Shorin explained
    how to implement it in Sphinx, and Stinner added the necessary configuration and
    markup. Less than 12 hours after I raised the issue, the entire *asyncio* documentation
    set online was updated with the [*coroutine* tags](https://fpy.li/a-2) you can
    see today.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这是社区最好的一个例子：在第一版中写关于*asyncio*时，我感到沮丧，因为API有许多函数，其中几十个是协程，你必须用`yield from`调用协程—现在用`await`—但你不能对常规函数这样做。这在*asyncio*页面中有记录，但有时你必须读几段才能找出特定函数是否是协程。所以我给python-tulip发送了一封标题为[“建议：在*asyncio*文档中突出显示协程”](https://fpy.li/a-1)的消息。*asyncio*核心开发者Victor
    Stinner；*aiohttp*的主要作者Andrew Svetlov；Tornado的首席开发人员Ben Darnell；以及*Twisted*的发明者Glyph
    Lefkowitz加入了讨论。Darnell提出了一个解决方案，Alexander Shorin解释了如何在Sphinx中实现它，Stinner添加了必要的配置和标记。在我提出问题不到12小时后，整个*asyncio*在线文档集都更新了今天你可以看到的[*coroutine*标签](https://fpy.li/a-2)。
- en: That story did not happen in an exclusive club. Anybody can join the python-tulip
    list, and I had posted only a few times when I wrote the proposal. The story illustrates
    a community that is really open to new ideas and new members. Guido van Rossum
    used to hang out in python-tulip and often answered basic questions.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 那个故事并不发生在一个独家俱乐部。任何人都可以加入python-tulip列表，当我写这个提案时，我只发过几次帖子。这个故事说明了一个真正对新想法和新成员开放的社区。Guido
    van Rossum过去常常出现在python-tulip中，并经常回答基本问题。
- en: 'Another example of openness: the Python Software Foundation (PSF) has been
    working to increase diversity in the Python community. Some encouraging results
    are already in. The 2013–2014 PSF board saw the first women elected directors:
    Jessica McKellar and Lynn Root. In 2015, Diana Clarke chaired PyCon North America
    in Montréal, where about one-third of the speakers were women. PyLadies became
    a truly global movement, and I am proud that we have so many PyLadies chapters
    in Brazil.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个开放性的例子：Python软件基金会（PSF）一直致力于增加Python社区的多样性。一些令人鼓舞的结果已经出现。2013年至2014年，PSF董事会首次选举了女性董事：Jessica
    McKellar和Lynn Root。2015年，Diana Clarke在蒙特利尔主持了PyCon北美大会，大约三分之一的演讲者是女性。PyLadies成为一个真正的全球运动，我为我们在巴西有这么多PyLadies分部感到自豪。
- en: If you are a Pythonista but you have not engaged with the community, I encourage
    you to do so. Seek the PyLadies or Python Users Group (PUG) in your area. If there
    isn’t one, create it. Python is everywhere, so you will not be alone. Travel to
    events if you can. Join live events too. During the Covid-19 pandemic I learned
    a lot in the “hallway tracks” of online conferences. Come to a PythonBrasil conference—we’ve
    had international speakers regularly for many years now. Hanging out with fellow
    Pythonistas brings real benefits besides all the knowledge sharing. Like real
    jobs and real friendships.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是Python爱好者但还没有参与社区，我鼓励你这样做。寻找你所在地区的PyLadies或Python用户组（PUG）。如果没有，就创建一个。Python无处不在，所以你不会孤单。如果可以的话，参加活动。也参加线上活动。在新冠疫情期间，我在线会议的“走廊轨道”中学到了很多东西。来参加PythonBrasil大会—多年来我们一直有国际演讲者。和其他Python爱好者一起交流不仅带来知识分享，还有真正的好处。比如真正的工作和真正的友谊。
- en: I know I could not have written this book without the help of many friends I
    made over the years in the Python community.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道如果没有多年来在Python社区结识的许多朋友的帮助，我不可能写出这本书。
- en: My father, Jairo Ramalho, used to say “Só erra quem trabalha,” Portuguese for
    “Only those who work make mistakes,” great advice to avoid being paralyzed by
    the fear of making errors. I certainly made my share of mistakes while writing
    this book. The reviewers, editors, and early release readers caught many of them.
    Within hours of the first edition early release, a reader was reporting typos
    in the errata page for the book. Other readers contributed more reports, and friends
    contacted me directly to offer suggestions and corrections. The O’Reilly copyeditors
    will catch other errors during the production process, which will start as soon
    as I manage to stop writing. I take responsibility and apologize for any errors
    and suboptimal prose that remains.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我的父亲，贾伊罗·拉马尔，曾经说过“Só erra quem trabalha”，葡萄牙语中的“只有工作的人会犯错”，这是一个避免被犯错的恐惧所束缚的好建议。在写这本书的过程中，我肯定犯了很多错误。审阅者、编辑和早期发布的读者发现了很多错误。在第一版早期发布的几个小时内，一位读者在书的勘误页面上报告了错别字。其他读者提供了更多报告，朋友们直接联系我提出建议和更正。O’Reilly
    的编辑们在制作过程中会发现其他错误，一旦我停止写作就会开始。我对任何错误和次优的散文负责并致歉。
- en: I am very happy to bring this second edition to conclusion, mistakes and all,
    and I am very grateful to everybody who helped along the way.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我很高兴完成这第二版，包括错误，我非常感谢在这个过程中帮助过我的每个人。
- en: I hope to see you soon at some live event. Please come say hi if you see me
    around!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 希望很快能在某个现场活动中见到你。如果看到我，请过来打个招呼！
- en: Further Reading
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: I will wrap up the book with references regarding what it its to be “Pythonic”—the
    main question this book tried to address.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我将以关于“Pythonic”的参考资料结束本书——这本书试图解决的主要问题。
- en: 'Brandon Rhodes is an awesome Python teacher, and his talk [“A Python Æsthetic:
    Beauty and Why I Python”](https://fpy.li/a-3) is beautiful, starting with the
    use of Unicode U+00C6 (`LATIN CAPITAL LETTER AE`) in the title. Another awesome
    teacher, Raymond Hettinger, spoke of beauty in Python at PyCon US 2013: [“Transforming
    Code into Beautiful, Idiomatic Python”](https://fpy.li/a-4).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Brandon Rhodes 是一位出色的 Python 教师，他的演讲[“Python 美学：美丽和我为什么选择 Python”](https://fpy.li/a-3)非常出色，标题中使用了
    Unicode U+00C6（`LATIN CAPITAL LETTER AE`）。另一位出色的教师 Raymond Hettinger 在 PyCon US
    2013 上谈到了 Python 中的美：[“将代码转化为美丽、惯用的 Python”](https://fpy.li/a-4)。
- en: The [“Evolution of Style Guides” thread](https://fpy.li/a-5) that Ian Lee started
    on Python-ideas is worth reading. Lee is the maintainer of the [`pep8`](https://fpy.li/a-6)
    package that checks Python source code for PEP 8 compliance. To check the code
    in this book, I used [`flake8`](https://fpy.li/a-7), which wraps `pep8`, [`pyflakes`](https://fpy.li/a-8),
    and Ned Batchelder’s [McCabe complexity plug-in](https://fpy.li/a-9).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 伊恩·李在 Python-ideas 上发起的[“风格指南的演变”主题](https://fpy.li/a-5)值得一读。李是[`pep8`](https://fpy.li/a-6)包的维护者，用于检查
    Python 源代码是否符合 PEP 8 规范。为了检查本书中的代码，我使用了[`flake8`](https://fpy.li/a-7)，它包含了`pep8`、[`pyflakes`](https://fpy.li/a-8)，以及
    Ned Batchelder 的[McCabe 复杂度插件](https://fpy.li/a-9)。
- en: Besides PEP 8, other influential style guides are the [*Google Python Style
    Guide*](https://fpy.li/a-10) and the [*Pocoo Styleguide*](https://fpy.li/a-11),
    from the team that brought us Flake, Sphinx, Jinja 2, and other great Python libraries.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 PEP 8，其他有影响力的风格指南还有[*Google Python 风格指南*](https://fpy.li/a-10)和[*Pocoo 风格指南*](https://fpy.li/a-11)，这两个团队为我们带来了
    Flake、Sphinx、Jinja 2 等伟大的 Python 库。
- en: '[*The Hitchhiker’s Guide to Python!*](https://fpy.li/a-12) is a collective
    work about writing Pythonic code. Its most prolific contributor is Kenneth Reitz,
    a community hero thanks to his beautifully Pythonic `requests` package. David
    Goodger presented a tutorial at PyCon US 2008 titled [“Code Like a Pythonista:
    Idiomatic Python”](https://fpy.li/a-13). If printed, the tutorial notes are 30
    pages long. Goodger created both reStructuredText and `docutils`—the foundations
    of Sphinx, Python’s excellent documentation system (which, by the way, is also
    the [official documentation system](https://fpy.li/a-14) for MongoDB and many
    other projects).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Python 之旅者指南！*](https://fpy.li/a-12)是关于编写 Pythonic 代码的集体作品。其中最多产的贡献者是 Kenneth
    Reitz，由于他出色的 Pythonic `requests` 包，他成为了社区英雄。David Goodger 在 PyCon US 2008 上做了一个名为[“像
    Pythonista 一样编码：Python 的惯用法”](https://fpy.li/a-13)的教程。如果打印出来，教程笔记有30页长。Goodger
    创建了 reStructuredText 和 `docutils`——Sphinx 的基础，Python 出色的文档系统（顺便说一句，这也是 MongoDB
    和许多其他项目的[官方文档系统](https://fpy.li/a-14)）。'
- en: Martijn Faassen tackles the question head-on in [“What is Pythonic?”](https://fpy.li/a-15)
    In the python-list, there is a thread with [that same title](https://fpy.li/a-16).
    Martijn’s post is from 2005, and the thread from 2003, but the Pythonic ideal
    hasn’t changed much—neither has the language, for that matter. A great thread
    with “Pythonic” in the title is [“Pythonic way to sum n-th list element?”](https://fpy.li/a-17),
    from which I quoted extensively in the [“Soapbox”](ch12.html#sequence_hacking_soapbox).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 马蒂恩·法森在[“什么是 Pythonic？”](https://fpy.li/a-15)中直面这个问题。在 python-list 中，有一个同名主题的讨论[线程](https://fpy.li/a-16)。马蒂恩的帖子是2005年的，而主题是2003年的，但
    Pythonic 的理念并没有改变太多——语言本身也是如此。一个标题中带有“Pythonic”的很棒的主题是[“Pythonic way to sum n-th
    list element？”](https://fpy.li/a-17)，我在[“Soapbox”](ch12.html#sequence_hacking_soapbox)中广泛引用了其中的内容。
- en: '[PEP 3099 — Things that will Not Change in Python 3000](https://fpy.li/pep3099)
    explains why many things are the way they are, even after the major overhaul that
    was Python 3\. For a long time, Python 3 was nicknamed Python 3000, but it arrived
    a few centuries sooner—to the dismay of some. PEP 3099 was written by Georg Brandl,
    compiling many opinions expressed by the *BDFL*, Guido van Rossum. The [“Python
    Essays”](https://fpy.li/a-18) page lists several texts by Guido himself.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[PEP 3099 — Python 3000 中不会改变的事情](https://fpy.li/pep3099)解释了为什么许多事情仍然保持原样，即使
    Python 3 进行了重大改革。很长一段时间，Python 3 被昵称为 Python 3000，但它提前了几个世纪到来——这让一些人感到沮丧。PEP 3099
    是由 Georg Brandl 撰写的，汇编了许多由*BDFL*，Guido van Rossum 表达的观点。[“Python Essays”](https://fpy.li/a-18)页面列出了
    Guido 本人撰写的几篇文章。'
