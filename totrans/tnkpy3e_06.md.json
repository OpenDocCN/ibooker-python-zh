["```py\nimport jupyturtle \n```", "```py\njupyturtle.make_turtle()\njupyturtle.forward(100) \n```", "```py\nfrom jupyturtle import make_turtle, forward \n```", "```py\nmake_turtle()\nforward(100) \n```", "```py\nfrom jupyturtle import left, right \n```", "```py\nmake_turtle()\nforward(50)\nleft(90)\nforward(50) \n```", "```py\nmake_turtle()\n\nforward(50)\nleft(90)\n\nforward(50)\nleft(90)\n\nforward(50)\nleft(90)\n\nforward(50)\nleft(90) \n```", "```py\nmake_turtle()\nfor i in range(4):\n    forward(50)\n    left(90) \n```", "```py\ndef square():\n    for i in range(4):\n        forward(50)\n        left(90) \n```", "```py\nmake_turtle()\nsquare() \n```", "```py\ndef square(length):\n    for i in range(4):\n        forward(length)\n        left(90) \n```", "```py\nmake_turtle()\nsquare(30)\nsquare(60) \n```", "```py\ndef polygon(n, length):\n    angle = 360 / n\n    for i in range(n):\n        forward(length)\n        left(angle) \n```", "```py\nmake_turtle()\npolygon(7, 30) \n```", "```py\nmake_turtle()\npolygon(n=7, length=30) \n```", "```py\nimport math\n\ndef circle(radius):\n    circumference = 2 * math.pi * radius\n    n = 30\n    length = circumference / n\n    polygon(n, length) \n```", "```py\nmake_turtle(delay=0.02)\ncircle(30) \n```", "```py\ndef polyline(n, length, angle):\n    for i in range(n):\n        forward(length)\n        left(angle) \n```", "```py\ndef polygon(n, length):\n    angle = 360.0 / n\n    polyline(n, length, angle) \n```", "```py\ndef arc(radius, angle):\n    arc_length = 2 * math.pi * radius * angle / 360\n    n = 30\n    length = arc_length / n\n    step_angle = angle / n\n    polyline(n, length, step_angle) \n```", "```py\ndef circle(radius):\n    arc(radius,  360) \n```", "```py\nmake_turtle(delay=0)\npolygon(n=20, length=9)\narc(radius=70, angle=70)\ncircle(radius=10) \n```", "```py\ndef circle(radius):\n    circumference = 2 * math.pi * radius\n    n = 30\n    length = circumference / n\n    polygon(n, length) \n```", "```py\ndef circle(radius):\n    arc(radius,  360) \n```", "```py\ndef polyline(n, length, angle):\n  \"\"\"Draws line segments with the given length and angle between them.\n\n n: integer number of line segments\n length: length of the line segments\n angle: angle between segments (in degrees)\n \"\"\"    \n    for i in range(n):\n        forward(length)\n        left(angle) \n```", "```py\n# This cell tells Jupyter to provide detailed debugging information\n# when a runtime error occurs. Run it before working on the exercises.\n\n%xmode Verbose \n```", "```py\nException reporting mode: Verbose \n```", "```py\nfrom jupyturtle import penup, pendown\n\ndef jump(length):\n  \"\"\"Move forward length units without leaving a trail.\n\n Postcondition: Leaves the pen down.\n \"\"\"\n    penup()\n    forward(length)\n    pendown() \n```", "```py\nThe following program uses a turtle graphics module to draw a circle:\n\nfrom jupyturtle import make_turtle, forward, left\nimport math\n\ndef polygon(n, length):\n    angle = 360 / n\n    for i in range(n):\n        forward(length)\n        left(angle)\n\ndef circle(radius):\n    circumference = 2 * math.pi * radius\n    n = 30\n    length = circumference / n\n    polygon(n, length)\n\nmake_turtle(delay=0)\ncircle(30)\n\nWrite a function that draws a spiral. \n```"]