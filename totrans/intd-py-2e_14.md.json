["```py\n>>> def unicode_test(value):\n...     import unicodedata\n...     name = unicodedata.name(value)\n...     value2 = unicodedata.lookup(name)\n...     print('value=\"%s\", name=\"%s\", value2=\"%s\"' % (value, name, value2))\n...\n```", "```py\n>>> unicode_test('A')\nvalue=\"A\", name=\"LATIN CAPITAL LETTER A\", value2=\"A\"\n```", "```py\n>>> unicode_test('$')\nvalue=\"$\", name=\"DOLLAR SIGN\", value2=\"$\"\n```", "```py\n>>> unicode_test('\\u00a2')\nvalue=\"¢\", name=\"CENT SIGN\", value2=\"¢\"\n```", "```py\n>>> unicode_test('\\u20ac')\nvalue=\"€\", name=\"EURO SIGN\", value2=\"€\"\n```", "```py\n>>> unicode_test('\\u2603')\nvalue=\"☃\", name=\"SNOWMAN\", value2=\"☃\"\n```", "```py\n>>> place = 'café'\n>>> place\n'café'\n```", "```py\n>>> unicodedata.name('\\u00e9')\n'LATIN SMALL LETTER E WITH ACUTE'\n```", "```py\n>>> unicodedata.lookup('E WITH ACUTE, LATIN SMALL LETTER')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: \"undefined character name 'E WITH ACUTE, LATIN SMALL LETTER'\"\n```", "```py\n>>> unicodedata.lookup('LATIN SMALL LETTER E WITH ACUTE')\n'é'\n```", "```py\n>>> place = 'caf\\u00e9'\n>>> place\n'café'\n>>> place = 'caf\\N{LATIN SMALL LETTER E WITH ACUTE}'\n>>> place\n'café'\n```", "```py\n>>> u_umlaut = '\\N{LATIN SMALL LETTER U WITH DIAERESIS}'\n>>> u_umlaut\n'ü'\n>>> drink = 'Gew' + u_umlaut + 'rztraminer'\n>>> print('Now I can finally have my', drink, 'in a', place)\nNow I can finally have my Gewürztraminer in a café\n```", "```py\n>>> len('$')\n1\n>>> len('\\U0001f47b')\n1\n```", "```py\n>>> chr(233)\n'é'\n>>> chr(0xe9)\n'é'\n>>> chr(0x1fc6)\n'ῆ'\n```", "```py\n>>> snowman = '\\u2603'\n```", "```py\n>>> len(snowman)\n1\n```", "```py\n>>> ds = snowman.encode('utf-8')\n```", "```py\n>>> len(ds)\n3\n>>> ds\nb'\\xe2\\x98\\x83'\n```", "```py\n>>> ds = snowman.encode('ascii')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nUnicodeEncodeError: 'ascii' codec can't encode character '\\u2603'\nin position 0: ordinal not in range(128)\n```", "```py\n>>> snowman.encode('ascii', 'ignore')\nb''\n```", "```py\n>>> snowman.encode('ascii', 'replace')\nb'?'\n```", "```py\n>>> snowman.encode('ascii', 'backslashreplace')\nb'\\\\u2603'\n```", "```py\n>>> snowman.encode('ascii', 'xmlcharrefreplace')\nb'&#9731;'\n```", "```py\n>>> place = 'caf\\u00e9'\n>>> place\n'café'\n>>> type(place)\n<class 'str'>\n```", "```py\n>>> place_bytes = place.encode('utf-8')\n>>> place_bytes\nb'caf\\xc3\\xa9'\n>>> type(place_bytes)\n<class 'bytes'>\n```", "```py\n>>> place2 = place_bytes.decode('utf-8')\n>>> place2\n'café'\n```", "```py\n>>> place3 = place_bytes.decode('ascii')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 3:\nordinal not in range(128)\n```", "```py\n>>> place4 = place_bytes.decode('latin-1')\n>>> place4\n'cafÃ©'\n>>> place5 = place_bytes.decode('windows-1252')\n>>> place5\n'cafÃ©'\n```", "```py\n>>> import html\n>>> html.unescape(\"&egrave;\")\n'è'\n```", "```py\n>>> import html\n>>> html.unescape(\"&#233;\")\n'é'\n>>> html.unescape(\"&#xe9;\")\n'é'\n```", "```py\n>>> from html.entities import html5\n>>> html5[\"egrave\"]\n'è'\n>>> html5[\"egrave;\"]\n'è'\n```", "```py\n>>> import html\n>>> char = '\\u00e9'\n>>> dec_value = ord(char)\n>>> html.entities.codepoint2name[dec_value]\n'eacute'\n```", "```py\n>>> place = 'caf\\u00e9'\n>>> byte_value = place.encode('ascii', 'xmlcharrefreplace')\n>>> byte_value\nb'caf&#233;'\n>>> byte_value.decode()\n'caf&#233;'\n```", "```py\n>>> eacute1 = 'é'                              # UTF-8, pasted\n>>> eacute2 = '\\u00e9'                         # Unicode code point\n>>> eacute3 = \\                                # Unicode name\n...     '\\N{LATIN SMALL LETTER E WITH ACUTE}'\n>>> eacute4 = chr(233)                         # decimal byte value\n>>> eacute5 = chr(0xe9)                        # hex byte value\n>>> eacute1, eacute2, eacute3, eacute4, eacute5\n('é', 'é', 'é', 'é', 'é')\n>>> eacute1 == eacute2 == eacute3 == eacute4 == eacute5\nTrue\n```", "```py\n>>> import unicodedata\n>>> unicodedata.name(eacute1)\n'LATIN SMALL LETTER E WITH ACUTE'\n>>> ord(eacute1)             # as a decimal integer\n233\n>>> 0xe9                     # Unicode hex integer\n233\n```", "```py\n>>> eacute_combined1 = \"e\\u0301\"\n>>> eacute_combined2 = \"e\\N{COMBINING ACUTE ACCENT}\"\n>>> eacute_combined3 = \"e\" + \"\\u0301\"\n>>> eacute_combined1, eacute_combined2, eacute_combined3\n('é', 'é', 'é'))\n>>> eacute_combined1 == eacute_combined2 == eacute_combined3\nTrue\n>>> len(eacute_combined1)\n2\n```", "```py\n>>> eacute1 == eacute_combined1\nFalse\n```", "```py\n>>> import unicodedata\n>>> eacute_normalized = unicodedata.normalize('NFC', eacute_combined1)\n>>> len(eacute_normalized)\n1\n>>> eacute_normalized == eacute1\nTrue\n>>> unicodedata.name(eacute_normalized)\n'LATIN SMALL LETTER E WITH ACUTE'\n```", "```py\n>>> import re\n>>> result = re.match('You', 'Young Frankenstein')\n```", "```py\n>>> import re\n>>> youpattern = re.compile('You')\n```", "```py\n>>> import re\n>>> result = youpattern.match('Young Frankenstein')\n```", "```py\n>>> import re\n>>> source = 'Young Frankenstein'\n>>> m = re.match('You', source)  # match starts at the beginning of source\n>>> if m:  # match returns an object; do this to see what matched\n...     print(m.group())\n...\nYou\n>>> m = re.match('^You', source) # start anchor does the same\n>>> if m:\n...     print(m.group())\n...\nYou\n```", "```py\n>>> import re\n>>> source = 'Young Frankenstein'\n>>> m = re.match('Frank', source)\n>>> if m:\n...     print(m.group())\n...\n```", "```py\n>>> import re\n>>> source = 'Young Frankenstein'\n>>> if m := re.match('Frank', source):\n...     print(m.group())\n...\n```", "```py\n>>> import re\n>>> source = 'Young Frankenstein'\n>>> m = re.search('Frank', source)\n>>> if m:\n...      print(m.group())\n...\nFrank\n```", "```py\n>>> import re\n>>> source = 'Young Frankenstein'\n>>> m = re.match('.*Frank', source)\n>>> if m:  # match returns an object\n...     print(m.group())\n...\nYoung Frank\n```", "```py\n>>> import re\n>>> source = 'Young Frankenstein'\n>>> m = re.search('Frank', source)\n>>> if m:  # search returns an object\n...     print(m.group())\n...\nFrank\n```", "```py\n>>> import re\n>>> source = 'Young Frankenstein'\n>>> m = re.findall('n', source)\n>>> m   # findall returns a list\n['n', 'n', 'n', 'n']\n>>> print('Found', len(m), 'matches')\nFound 4 matches\n```", "```py\n>>> import re\n>>> source = 'Young Frankenstein'\n>>> m = re.findall('n.', source)\n>>> m\n['ng', 'nk', 'ns']\n```", "```py\n>>> import re\n>>> source = 'Young Frankenstein'\n>>> m = re.findall('n.?', source)\n>>> m\n['ng', 'nk', 'ns', 'n']\n```", "```py\n>>> import re\n>>> source = 'Young Frankenstein'\n>>> m = re.split('n', source)\n>>> m    # split returns a list\n['You', 'g Fra', 'ke', 'stei', '']\n```", "```py\n>>> import re\n>>> source = 'Young Frankenstein'\n>>> m = re.sub('n', '?', source)\n>>> m   # sub returns a string\n'You?g Fra?ke?stei?'\n```", "```py\n>>> import string\n>>> printable = string.printable\n>>> len(printable)\n100\n>>> printable[0:50]\n'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMN'\n>>> printable[50:]\n'OPQRSTUVWXYZ!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ \\t\\n\\r\\x0b\\x0c'\n```", "```py\n>>> re.findall('\\d', printable)\n['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n```", "```py\n>>> re.findall('\\w', printable)\n['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b',\n'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\n'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n'Y', 'Z', '_']\n```", "```py\n>>> re.findall('\\s', printable)\n[' ', '\\t', '\\n', '\\r', '\\x0b', '\\x0c']\n```", "```py\n>>> x = 'abc' + '-/*' + '\\u00ea' + '\\u0115'\n```", "```py\n>>> re.findall('\\w', x)\n['a', 'b', 'c', 'ê', 'ĕ']\n```", "```py\n>>> source = '''I wish I may, I wish I might\n... Have a dish of fish tonight.'''\n```", "```py\n>>> re.findall('wish', source)\n['wish', 'wish']\n```", "```py\n>>> re.findall('wish|fish', source)\n['wish', 'wish', 'fish']\n```", "```py\n>>> re.findall('^wish', source)\n[]\n```", "```py\n>>> re.findall('^I wish', source)\n['I wish']\n```", "```py\n>>> re.findall('fish$', source)\n[]\n```", "```py\n>>> re.findall('fish tonight.$', source)\n['fish tonight.']\n```", "```py\n>>> re.findall('fish tonight\\.$', source)\n['fish tonight.']\n```", "```py\n>>> re.findall('[wf]ish', source)\n['wish', 'wish', 'fish']\n```", "```py\n>>> re.findall('[wsh]+', source)\n['w', 'sh', 'w', 'sh', 'h', 'sh', 'sh', 'h']\n```", "```py\n>>> re.findall('ght\\W', source)\n['ght\\n', 'ght.']\n```", "```py\n>>> re.findall('I (?=wish)', source)\n['I ', 'I ']\n```", "```py\n>>> re.findall('(?<=I) wish', source)\n[' wish', ' wish']\n```", "```py\n>>> re.findall('\\bfish', source)\n[]\n```", "```py\n>>> re.findall(r'\\bfish', source)\n['fish']\n```", "```py\n>>> m = re.search(r'(. dish\\b).*(\\bfish)', source)\n>>> m.group()\n'a dish of fish'\n>>> m.groups()\n('a dish', 'fish')\n```", "```py\n>>> m = re.search(r'(?P<DISH>. dish\\b).*(?P<FISH>\\bfish)', source)\n>>> m.group()\n'a dish of fish'\n>>> m.groups()\n('a dish', 'fish')\n>>> m.group('DISH')\n'a dish'\n>>> m.group('FISH')\n'fish'\n```", "```py\n>>> blist = [1, 2, 3, 255]\n>>> the_bytes = bytes(blist)\n>>> the_bytes\nb'\\x01\\x02\\x03\\xff'\n>>> the_byte_array = bytearray(blist)\n>>> the_byte_array\nbytearray(b'\\x01\\x02\\x03\\xff')\n```", "```py\n>>> b'\\x61'\nb'a'\n```", "```py\n>>> b'\\x01abc\\xff'\nb'\\x01abc\\xff'\n```", "```py\n>>> blist = [1, 2, 3, 255]\n>>> the_bytes = bytes(blist)\n>>> the_bytes[1] = 127\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'bytes' object does not support item assignment\n```", "```py\n>>> blist = [1, 2, 3, 255]\n>>> the_byte_array = bytearray(blist)\n>>> the_byte_array\nbytearray(b'\\x01\\x02\\x03\\xff')\n>>> the_byte_array[1] = 127\n>>> the_byte_array\nbytearray(b'\\x01\\x7f\\x03\\xff')\n```", "```py\n>>> the_bytes = bytes(range(0, 256))\n>>> the_byte_array = bytearray(range(0, 256))\n```", "```py\n>>> the_bytes\nb'\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f\n\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\n!\"#$%&\\'()*+,-./\n0123456789:;<=>?\n@ABCDEFGHIJKLMNO\nPQRSTUVWXYZ[\\\\]^_\n`abcdefghijklmno\npqrstuvwxyz{|}~\\x7f\n\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\n\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\n\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\n\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\n\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\n\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\n\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\n\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff'\n```", "```py\n>>> import struct\n>>> valid_png_header = b'\\x89PNG\\r\\n\\x1a\\n'\n>>> data = b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR' + \\\n...     b'\\x00\\x00\\x00\\x9a\\x00\\x00\\x00\\x8d\\x08\\x02\\x00\\x00\\x00\\xc0'\n>>> if data[:8] == valid_png_header:\n...     width, height = struct.unpack('>LL', data[16:24])\n...     print('Valid PNG, width', width, 'height', height)\n... else:\n...     print('Not a valid PNG')\n...\nValid PNG, width 154 height 141\n```", "```py\n>>> data[16:20]\nb'\\x00\\x00\\x00\\x9a'\n>>> data[20:24]0x9a\nb'\\x00\\x00\\x00\\x8d'\n```", "```py\n>>> 0x9a\n154\n>>> 0x8d\n141\n```", "```py\n>>> import struct\n>>> struct.pack('>L', 154)\nb'\\x00\\x00\\x00\\x9a'\n>>> struct.pack('>L', 141)\nb'\\x00\\x00\\x00\\x8d'\n```", "```py\n>>> struct.unpack('>2L', data[16:24])\n(154, 141)\n```", "```py\n>>> struct.unpack('>16x2L6x', data)\n(154, 141)\n```", "```py\n$ pip install construct\n```", "```py\n>>> from construct import Struct, Magic, UBInt32, Const, String\n>>> # adapted from code at https://github.com/construct\n>>> fmt = Struct('png',\n...     Magic(b'\\x89PNG\\r\\n\\x1a\\n'),\n...     UBInt32('length'),\n...     Const(String('type', 4), b'IHDR'),\n...     UBInt32('width'),\n...     UBInt32('height')\n...     )\n>>> data = b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR' + \\\n...     b'\\x00\\x00\\x00\\x9a\\x00\\x00\\x00\\x8d\\x08\\x02\\x00\\x00\\x00\\xc0'\n>>> result = fmt.parse(data)\n>>> print(result)\nContainer:\n length = 13\n type = b'IHDR'\n width = 154\n height = 141\n>>> print(result.width, result.height)\n154, 141\n```", "```py\n>>> import binascii\n>>> valid_png_header = b'\\x89PNG\\r\\n\\x1a\\n'\n>>> print(binascii.hexlify(valid_png_header))\nb'89504e470d0a1a0a'\n```", "```py\n>>> print(binascii.unhexlify(b'89504e470d0a1a0a'))\nb'\\x89PNG\\r\\n\\x1a\\n'\n```", "```py\nWe have seen thee, queen of cheese,\nLying quietly at your ease,\nGently fanned by evening breeze,\nThy fair form no flies dare seize.\n\nAll gaily dressed soon you'll go\nTo the great Provincial show,\nTo be admired by many a beau\nIn the city of Toronto.\n\nCows numerous as a swarm of bees,\nOr as the leaves upon the trees,\nIt did require to make thee please,\nAnd stand unrivalled, queen of cheese.\n\nMay you not receive a scar as\nWe have heard that Mr. Harris\nIntends to send you off as far as\nThe great world's show at Paris.\n\nOf the youth beware of these,\nFor some of them might rudely squeeze\nAnd bite your cheek, then songs or glees\nWe could not sing, oh! queen of cheese.\n\nWe'rt thou suspended from balloon,\nYou'd cast a shade even at noon,\nFolks would think it was the moon\nAbout to fall and crush them soon.\n```", "```py\n'47494638396101000100800000000000ffffff21f9' +\n'0401000000002c000000000100010000020144003b'\n```"]