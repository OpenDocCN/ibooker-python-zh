["```py\ndef calculate_total_with_tax(restaurant: tuple[str, str, str, int],\n                             subtotal: float) -> float:\n    return subtotal * (1 + tax_lookup[restaurant[2]])\n```", "```py\ndef calculate_total_with_tax(restaurant: Restaurant,\n                             subtotal: decimal.Decimal) -> decimal.Decimal:\n    return subtotal * (1 + tax_lookup[restaurant.zip_code])\n```", "```py\n# Note: use UPPER_CASE variable names to denote constant/immutable values\nMOTHER_SAUCES = (\"Béchamel\", \"Velouté\", \"Espagnole\", \"Tomato\", \"Hollandaise\")\n```", "```py\nMOTHER_SAUCES[2]\n```", "```py\nBÉCHAMEL = \"Béchamel\"\nVELOUTÉ = \"Velouté\"\nESPAGNOLE = \"Espagnole\"\nTOMATO = \"Tomato\"\nHOLLANDAISE = \"Hollandaise\"\nMOTHER_SAUCES = (BÉCHAMEL, VELOUTÉ, ESPAGNOLE, TOMATO, HOLLANDAISE)\n```", "```py\ndef create_daughter_sauce(mother_sauce: str,\n                          extra_ingredients: list[str]):\n    # ...\n```", "```py\ncreate_daughter_sauce(MOTHER_SAUCES[0], [\"Onions\"]) # not super helpful\ncreate_daughter_sauce(BÉCHAMEL, [\"Onions\"]) # Better\n```", "```py\ncreate_daughter_sauce(\"Hollandaise\", [\"Horseradish\"])\ncreate_daughter_sauce(\"Veloute\", [\"Mustard\"])\n\n# Definitely wrong\ncreate_daughter_sauce(\"Alabama White BBQ Sauce\", [])\n```", "```py\nfrom enum import Enum\nclass MotherSauce(Enum):\n    BÉCHAMEL = \"Béchamel\"\n    VELOUTÉ = \"Velouté\"\n    ESPAGNOLE = \"Espagnole\"\n    TOMATO = \"Tomato\"\n    HOLLANDAISE = \"Hollandaise\"\n```", "```py\nMotherSauce.BÉCHAMEL\nMotherSauce.HOLLANDAISE\n```", "```py\n>>>MotherSauce(\"Hollandaise\") # OKAY\n\n>>>MotherSauce(\"Alabama White BBQ Sauce\")\nValueError: 'Alabama White BBQ Sauce' is not a valid MotherSauce\n```", "```py\n>>>for option_number, sauce in enumerate(MotherSauce, start=1):\n>>>    print(f\"Option {option_number}: {sauce.value}\")\n\nOption 1: Béchamel\nOption 2: Velouté\nOption 3: Espagnole\nOption 4: Tomato\nOption 5: Hollandaise\n```", "```py\ndef create_daughter_sauce(mother_sauce: MotherSauce,\n                          extra_ingredients: list[str]):\n    # ...\n```", "```py\nfrom enum import auto, Enum\nclass MotherSauce(Enum):\n    BÉCHAMEL = auto()\n    VELOUTÉ = auto()\n    ESPAGNOLE = auto()\n    TOMATO = auto()\n    HOLLANDAISE = auto()\n\n>>>list(MotherSauce)\n[<MotherSauce.BÉCHAMEL: 1>, <MotherSauce.VELOUTÉ: 2>, <MotherSauce.ESPAGNOLE: 3>,\n <MotherSauce.TOMATO: 4>, <MotherSauce.HOLLANDAISE: 5>]\n```", "```py\nfrom enum import auto, Enum\nclass MotherSauce(Enum):\n    def _generate_next_value_(name, start, count, last_values):\n        return name.capitalize()\n    BÉCHAMEL = auto()\n    VELOUTÉ = auto()\n    ESPAGNOLE = auto()\n    TOMATO = auto()\n    HOLLANDAISE = auto()\n\n>>>list(MotherSauce)\n[<MotherSauce.BÉCHAMEL: 'Béchamel'>, <MotherSauce.VELOUTÉ: 'Velouté'>,\n <MotherSauce.ESPAGNOLE: 'Espagnole'>, <MotherSauce.TOMATO: 'Tomato'>,\n <MotherSauce.HOLLANDAISE: 'Hollandaise'>]\n```", "```py\nfrom enum import auto, Enum\nfrom typing import Set\nclass Allergen(Enum):\n    FISH = auto()\n    SHELLFISH = auto()\n    TREE_NUTS = auto()\n    PEANUTS = auto()\n    GLUTEN = auto()\n    SOY = auto()\n    DAIRY = auto()\n```", "```py\nallergens: Set[Allergen] = {Allergen.FISH, Allergen.SOY}\n```", "```py\nfrom enum import Flag\nclass Allergen(Flag):\n    FISH = auto()\n    SHELLFISH = auto()\n    TREE_NUTS = auto()\n    PEANUTS = auto()\n    GLUTEN = auto()\n    SOY = auto()\n    DAIRY = auto()\n```", "```py\n>>>allergens = Allergen.FISH | Allergen.SHELLFISH\n>>>allergens\n<Allergen.SHELLFISH|FISH: 3>\n\n>>>if allergens & Allergen.FISH:\n>>>    print(\"This recipe contains fish.\")\nThis recipe contains fish.\n```", "```py\nclass Allergen(Flag):\n    FISH = auto()\n    SHELLFISH = auto()\n    TREE_NUTS = auto()\n    PEANUTS = auto()\n    GLUTEN = auto()\n    SOY = auto()\n    DAIRY = auto()\n    SEAFOOD = Allergen.FISH | Allergen.SHELLFISH\n    ALL_NUTS = Allergen.TREE_NUTS | Allergen.PEANUTS\n```", "```py\nclass ImperialLiquidMeasure(Enum):\n    CUP = 8\n    PINT = 16\n    QUART = 32\n    GALLON = 128\n\n>>>ImperialLiquidMeasure.CUP == 8\nFalse\n```", "```py\nclass ImperialLiquidMeasure(IntEnum):\n    CUP = 8\n    PINT = 16\n    QUART = 32\n    GALLON = 128\n\n>>>ImperialLiquidMeasure.CUP == 8\nTrue\n```", "```py\n>>>ImperialLiquidMeasure.CUP.value == 8\nTrue\n```", "```py\nclass Kitchenware(IntEnum):\n    # Note to future programmers: these numbers are customer-defined\n    # and apt to change\n    PLATE = 7\n    CUP = 8\n    UTENSILS = 9\n```", "```py\ndef pour_liquid(volume: ImperialLiquidMeasure):\n    if volume == Kitchenware.CUP:\n        pour_into_smaller_vessel()\n    else:\n        pour_into_larger_vessel()\n```", "```py\nfrom enum import Enum\nclass MotherSauce(Enum):\n    BÉCHAMEL = \"Béchamel\"\n    BECHAMEL = \"Béchamel\"\n    VELOUTÉ = \"Velouté\"\n    VELOUTE = \"Velouté\"\n    ESPAGNOLE = \"Espagnole\"\n    TOMATO = \"Tomato\"\n    HOLLANDAISE = \"Hollandaise\"\n```", "```py\nfrom enum import Enum, unique\n@unique\nclass MotherSauce(Enum):\n    BÉCHAMEL = \"Béchamel\"\n    VELOUTÉ = \"Velouté\"\n    ESPAGNOLE = \"Espagnole\"\n    TOMATO = \"Tomato\"\n    HOLLANDAISE = \"Hollandaise\"\n```"]