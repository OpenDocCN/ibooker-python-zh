- en: Chapter 13\. Crawling Through Forms and Logins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the first questions that comes up when you start to move beyond the
    basics of web scraping is: “How do I access information behind a login screen?”
    The web is increasingly moving toward interaction, social media, and user-generated
    content. Forms and logins are an integral part of these types of sites and almost
    impossible to avoid. Fortunately, they are also relatively easy to deal with.'
  prefs: []
  type: TYPE_NORMAL
- en: Until this point, most of our interactions with web servers in our example scrapers
    have consisted of using HTTP `GET` to request information. This chapter focuses
    on the `POST` method, which pushes information to a web server for storage and
    analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Forms basically give users a way to submit a `POST` request that the web server
    can understand and use. Just as link tags on a website help users format `GET`
    requests, HTML forms help them format `POST` requests. Of course, with a little
    bit of coding, it is possible to create these requests ourselves and submit them
    with a scraper.
  prefs: []
  type: TYPE_NORMAL
- en: Python Requests Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although it’s possible to navigate web forms by using only the Python core libraries,
    sometimes a little syntactic sugar makes life a lot sweeter. When you start to
    do more than a basic `GET` request with urllib, looking outside the Python core
    libraries can be helpful.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [Requests library](http://www.python-requests.org) is excellent at handling
    complicated HTTP requests, cookies, headers, and much more. Here’s what Requests
    creator Kenneth Reitz has to say about Python’s core tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Python’s standard urllib2 module provides most of the HTTP capabilities you
    need, but the API is thoroughly broken. It was built for a different time—and
    a different web. It requires an enormous amount of work (even method overrides)
    to perform the simplest of tasks.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Things shouldn’t be this way. Not in Python.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As with any Python library, the Requests library can be installed with any third-party
    Python library manager, such as pip, or by downloading and installing the [source
    file](https://github.com/kennethreitz/requests/tarball/master).
  prefs: []
  type: TYPE_NORMAL
- en: Submitting a Basic Form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most web forms consist of a few HTML fields, a Submit button, and an action
    page, where the actual form processing is done. The HTML fields usually consist
    of text but might also contain a file upload or other nontext content.
  prefs: []
  type: TYPE_NORMAL
- en: Most popular websites block access to their login forms in their *robots.txt*
    file ([Chapter 2](ch02.html#c-2) discusses the legality of scraping such forms),
    so to play it safe I’ve constructed a series of different types of forms and logins
    at *pythonscraping.com* that you can run your web scrapers against. [*http://pythonscraping.com/pages/files/form.html*](http://pythonscraping.com/pages/files/form.html)
    is the location of the most basic of these forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'The entirety of the HTML code for the form is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'A couple of things to notice here: first, the names of the two input fields
    are `firstname` and `lastname`. This is important. The names of these fields determine
    the names of the variable parameters that will be `POST`ed to the server when
    the form is submitted. If you want to mimic the action that the form will take
    when `POST`ing your own data, you need to make sure that your variable names match
    up.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second thing to note is that the action of the form is at *processing.php*
    (the absolute path is [*http://pythonscraping.com/pages/files/processing.php*](http://pythonscraping.com/pages/files/processing.php)).
    Any `POST` requests to the form should be made on *this* page, not on the page
    where the form itself resides. Remember: the purpose of HTML forms is only to
    help website visitors format proper requests to send to the page that does the
    real action. Unless you are doing research to format the request itself, you don’t
    need to bother much with the page that the form can be found on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Submitting a form with the Requests library can be done in four lines, including
    the import and the instruction to print the content (yes, it’s that easy):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After the form is submitted, the script should return with the page’s content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This script can be applied to many simple forms encountered on the internet.
    The form to sign up for the “Web Scraping with Python” newsletter, for example,
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Although it can look daunting at first, remember that in most cases (we’ll
    cover the exceptions later), you’re looking for only two things:'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the field (or fields) you want to submit with the data. In this
    case, first name `first_name`, last name `last_name`, and email address `email`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The action attribute of the form itself; that is, the page that the form posts
    data to.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this case, the action of the form isn’t obvious. Unlike a traditional HTML
    form, this page uses a JavaScript program that detects the form submission and
    submits it to the proper URL.
  prefs: []
  type: TYPE_NORMAL
- en: In cases like this, using your browser’s network tools can come in handy. Simply
    open up the Network tab, fill out the form, hit the Submit button, and observe
    the values being sent over the network ([Figure 13-1](#fig1301)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/wsp3_1301.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-1\. A request sent to the newsletter form at pythonscraping.com
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Although you could wade through convoluted JavaScript and eventually arrive
    at the same answer, using the Network tab allows you to see trivially that the
    form contents are being submitted to [*https://pythonscraping.com/wp-admin/admin-ajax.php*](https://pythonscraping.com/wp-admin/admin-ajax.php).
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, the Payload tab reveals a fourth form value sent to this endpoint: `action:
    eclg_add_newsletter`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With this, we can replicate the form submission in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the form provides a JSON-formatted response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Radio Buttons, Checkboxes, and Other Inputs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Obviously, not all web forms are a collection of text fields followed by a
    Submit button. Standard HTML contains a wide variety of possible form input fields:
    radio buttons, checkboxes, and select boxes, to name a few. HTML5 adds sliders
    (range input fields), email, dates, and more. With custom JavaScript fields, the
    possibilities are endless, with color pickers, calendars, and whatever else the
    developers come up with next.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Regardless of the seeming complexity of any sort of form field, you need to
    worry about only two things: the name of the element and its value. The element’s
    name easily can be determined by looking at the source code and finding the `name`
    attribute. The value can sometimes be trickier, as it might be populated by JavaScript
    immediately before form submission. Color pickers, as an example of a fairly exotic
    form field, will likely have a value of something like `#F03030`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re unsure of the format of an input field’s value, you can use various
    tools to track the `GET` and `POST` requests your browser is sending to and from
    sites. The best and perhaps most obvious way to track `GET` requests, as mentioned
    before, is to look at the URL of a site. If the URL is something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://domainname.com?thing1=foo&thing2=bar`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'you know that this corresponds to a form of this type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'which corresponds to the Python parameter object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Again, if you’re stuck with a complicated-looking `POST` form, and you want
    to see exactly which parameters your browser is sending to the server, the easiest
    way is to use your browser’s inspector or developer tool to view them (see [Figure 13-2](#form_data_section)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Alt Text](assets/wsp3_1302.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-2\. The Form Data section, highlighted in a box, shows the POST parameters
    “thing1” and “thing2” with their values “foo” and “bar”
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Submitting Files and Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although file uploads are common on the internet, file uploads are not something
    often used in web scraping. It is possible, however, that you might want to write
    a test for your own site that involves a file upload. At any rate, it’s a useful
    thing to know how to do.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a practice file upload form at *[*http://pythonscraping.com/pages/files/form2.html*](http://pythonscraping.com/pages/files/form2.html)*.
    The form on the page has the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Except for the `<input>` tag having the type attribute `file`, it looks essentially
    the same as the text-based forms used in the previous examples. Fortunately, the
    way the forms are used by the Python Requests library is also similar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note that in lieu of a simple string, the value submitted to the form field
    (with the name `uploadFile`) is now a Python File object, as returned by the `open` function.
    In this example, you’re submitting an image file, stored on your local machine,
    at the path *../files/Python-logo.png*, relative to where the Python script is
    being run from.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, it’s really that easy!
  prefs: []
  type: TYPE_NORMAL
- en: Handling Logins and Cookies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we’ve mostly discussed forms that allow you to submit information to
    a site or let you view needed information on the page immediately after the form.
    How is this different from a login form, which lets you exist in a permanent “logged-in”
    state throughout your visit to the site?
  prefs: []
  type: TYPE_NORMAL
- en: Most modern websites use cookies to keep track of who is logged in and who is
    not. After a site authenticates your login credentials, it stores them in your
    browser’s cookie, which usually contains a server-generated token, timeout, and
    tracking information. The site then uses this cookie as a sort of proof of authentication,
    which is shown to each page you visit during your time on the site. Before the
    widespread use of cookies in the mid-1990s, keeping users securely authenticated
    and tracking them was a huge problem for websites.
  prefs: []
  type: TYPE_NORMAL
- en: Although cookies are a great solution for web developers, they can be problematic
    for web scrapers. You can submit a login form all day long, but if you don’t keep
    track of the cookie the form sends back to you afterward, the next page you visit
    will act as though you’ve never logged in at all.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve created a simple login form at [*http://pythonscraping.com/pages/cookies/login.html*](http://pythonscraping.com/pages/cookies/login.html)
    (the username can be anything, but the password must be “password”). This form
    is processed at *[*http://pythonscraping.com/pages/cookies/welcome.php*](http://pythonscraping.com/pages/cookies/welcome.php)*,
    which contains a link to the main page, *[*http://pythonscraping.com/pages/cookies/profile.php*](http://pythonscraping.com/pages/cookies/profile.php)*.
  prefs: []
  type: TYPE_NORMAL
- en: If you attempt to access the welcome page or the profile page without logging
    in first, you’ll get an error message and instructions to log in first before
    continuing. On the profile page, a check is done on your browser’s cookies to
    see whether its cookie was set on the login page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Keeping track of cookies is easy with the >Requests library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here you’re sending the login parameters to the welcome page, which acts as
    the processor for the login form. You retrieve the cookies from the results of
    the last request, print the result for verification, and then send them to the
    profile page by setting the `cookies` argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'This works well for simple situations, but what if you’re dealing with a more
    complicated site that frequently modifies cookies without warning, or if you’d
    rather not even think about the cookies to begin with? The Requests `session`
    function works perfectly in this case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the session object (retrieved by calling `requests.Session()`)
    keeps track of session information, such as cookies, headers, and even information
    about protocols you might be running on top of HTTP, such as HTTPAdapters.
  prefs: []
  type: TYPE_NORMAL
- en: Requests is a fantastic library, second perhaps only to Selenium (covered in
    [Chapter 14](ch14.html#c-14)) in the completeness of what it handles without programmers
    having to think about it or write the code themselves. Although it might be tempting
    to sit back and let the library do all the work, it’s extremely important always
    to be aware of what the cookies look like and what they are controlling when you
    are writing web scrapers. It could save many hours of painful debugging or figuring
    out why a website is behaving strangely!
  prefs: []
  type: TYPE_NORMAL
- en: HTTP Basic Access Authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before the advent of cookies, one popular way to handle logins was with HTTP
    *basic access authentication*. You still see it from time to time, especially
    on high-security or corporate sites, and with some APIs. I’ve created a page at [*http://pythonscraping.com/pages/auth/login.php*](http://pythonscraping.com/pages/auth/login.php) that
    has this type of authentication ([Figure 13-3](#basic_access)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Alt Text](assets/wsp3_1303.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-3\. The user must provide a username and password to get to the page
    protected by basic access authentication
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As usual with these examples, you can log in with any username, but the password
    must be “password.”
  prefs: []
  type: TYPE_NORMAL
- en: 'The Requests package contains an `auth` module specifically designed to handle
    HTTP authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Although this appears to be a normal `POST` request, an `HTTPBasicAuth` object
    is passed as the `auth` argument in the request. The resulting text will be the
    page protected by the username and password (or an Access Denied page, if the
    request failed).
  prefs: []
  type: TYPE_NORMAL
- en: Other Form Problems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web forms are a hot point of entry for malicious bots. You don’t want bots creating
    user accounts, taking up valuable server processing time, or submitting spam comments
    on a blog. For this reason, security features often are incorporated into HTML
    forms on modern websites that might not be immediately apparent.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For help with CAPTCHAs, check out [Chapter 16](ch16.html#c-16), which covers
    image processing and text recognition in Python.
  prefs: []
  type: TYPE_NORMAL
- en: If you encounter a mysterious error, or the server is rejecting your form submission
    for an unknown reason, check out [Chapter 17](ch17.html#c-17), which covers honeypots,
    hidden fields, and other security measures that websites take to protect their
    forms.
  prefs: []
  type: TYPE_NORMAL
