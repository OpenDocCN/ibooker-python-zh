["```py\ntest\n├── unit\n│   ├── web\n│   ├── service\n│   └── data\n├── integration\n└── full\n```", "```py\ndef preamble() -> str:\n    return \"The sum is \"\n```", "```py\nimport mod1\n\ndef summer(x: int, y:int) -> str:\n    return mod1.preamble() + f\"{x+y}\"\n```", "```py\nimport mod2\n\ndef test_summer():\n    assert \"The sum is 11\" == mod2.summer(5,6)\n```", "```py\n$ pytest -q test_summer1.py\n.                                                                    [100%]\n1 passed in 0.04s\n```", "```py\nfrom unittest import mock\nimport mod1\nimport mod2\n\ndef test_summer_a():\n    with mock.patch(\"mod1.preamble\", return_value=\"\"):\n        assert \"11\" == mod2.summer(5,6)\n\ndef test_summer_b():\n    with mock.patch(\"mod1.preamble\") as mock_preamble:\n        mock_preamble.return_value=\"\"\n        assert \"11\" == mod2.summer(5,6)\n\n@mock.patch(\"mod1.preamble\", return_value=\"\")\ndef test_summer_c(mock_preamble):\n    assert \"11\" == mod2.summer(5,6)\n\n@mock.patch(\"mod1.preamble\")\ndef test_caller_d(mock_preamble):\n    mock_preamble.return_value = \"\"\n    assert \"11\" == mod2.summer(5,6)\n```", "```py\n$ pytest -q test_summer2.py\n....                                                                 [100%]\n4 passed in 0.13s\n```", "```py\nimport os\nif os.get_env(\"UNIT_TEST\"):\n    import fake_mod1 as mod1\nelse:\n    import mod1\n\ndef summer(x: int, y:int) -> str:\n    return mod1.preamble() + f\"{x+y}\"\n```", "```py\ndef preamble() -> str:\n    return \"\"\n```", "```py\nimport os\nos.environ[\"UNIT_TEST\"] = \"true\"\nimport mod2\n\ndef test_summer_fake():\n    assert \"11\" == mod2.summer(5,6)\n```", "```py\n$ pytest -q test_summer_fake.py\n.                                                                    [100%]\n1 passed in 0.04s\n```", "```py\nimport os\nfrom fastapi import APIRouter, HTTPException\nfrom model.creature import Creature\nif os.getenv(\"CRYPTID_UNIT_TEST\"):\n    from fake import creature as service\nelse:\n    from service import creature as service\nfrom error import Missing, Duplicate\n\nrouter = APIRouter(prefix = \"/creature\")\n\n@router.get(\"/\")\ndef get_all() -> list[Creature]:\n    return service.get_all()\n\n@router.get(\"/{name}\")\ndef get_one(name) -> Creature:\n    try:\n        return service.get_one(name)\n    except Missing as exc:\n        raise HTTPException(status_code=404, detail=exc.msg)\n\n@router.post(\"/\", status_code=201)\ndef create(creature: Creature) -> Creature:\n    try:\n        return service.create(creature)\n    except Duplicate as exc:\n        raise HTTPException(status_code=409, detail=exc.msg)\n\n@router.patch(\"/\")\ndef modify(name: str, creature: Creature) -> Creature:\n    try:\n        return service.modify(name, creature)\n    except Missing as exc:\n        raise HTTPException(status_code=404, detail=exc.msg)\n\n@router.delete(\"/{name}\")\ndef delete(name: str) -> None:\n    try:\n        return service.delete(name)\n    except Missing as exc:\n        raise HTTPException(status_code=404, detail=exc.msg)\n```", "```py\nfrom fastapi import HTTPException\nimport pytest\nimport os\nos.environ[\"CRYPTID_UNIT_TEST\"] = \"true\"\nfrom model.creature import Creature\nfrom web import creature\n\n@pytest.fixture\ndef sample() -> Creature:\n    return Creature(name=\"dragon\",\n        description=\"Wings! Fire! Aieee!\",\n        country=\"*\")\n\n@pytest.fixture\ndef fakes() -> list[Creature]:\n    return creature.get_all()\n\ndef assert_duplicate(exc):\n    assert exc.value.status_code == 404\n    assert \"Duplicate\" in exc.value.msg\n\ndef assert_missing(exc):\n    assert exc.value.status_code == 404\n    assert \"Missing\" in exc.value.msg\n\ndef test_create(sample):\n    assert creature.create(sample) == sample\n\ndef test_create_duplicate(fakes):\n    with pytest.raises(HTTPException) as exc:\n        _ = creature.create(fakes[0])\n        assert_duplicate(exc)\n\ndef test_get_one(fakes):\n    assert creature.get_one(fakes[0].name) == fakes[0]\n\ndef test_get_one_missing():\n    with pytest.raises(HTTPException) as exc:\n        _ = creature.get_one(\"bobcat\")\n        assert_missing(exc)\n\ndef test_modify(fakes):\n    assert creature.modify(fakes[0].name, fakes[0]) == fakes[0]\n\ndef test_modify_missing(sample):\n    with pytest.raises(HTTPException) as exc:\n        _ = creature.modify(sample.name, sample)\n        assert_missing(exc)\n\ndef test_delete(fakes):\n    assert creature.delete(fakes[0].name) is None\n\ndef test_delete_missing(sample):\n    with pytest.raises(HTTPException) as exc:\n        _ = creature.delete(\"emu\")\n        assert_missing(exc)\n```", "```py\nimport os\nfrom model.creature import Creature\nif os.getenv(\"CRYPTID_UNIT_TEST\"):\n    from fake import creature as data\nelse:\n    from data import creature as data\n\ndef get_all() -> list[Creature]:\n    return data.get_all()\n\ndef get_one(name) -> Creature:\n    return data.get_one(name)\n\ndef create(creature: Creature) -> Creature:\n    return data.create(creature)\n\ndef modify(name: str, creature: Creature) -> Creature:\n    return data.modify(name, creature)\n\ndef delete(name: str) -> None:\n    return data.delete(name)\n```", "```py\nimport os\nos.environ[\"CRYPTID_UNIT_TEST\"]= \"true\"\nimport pytest\n\nfrom model.creature import Creature\nfrom error import Missing, Duplicate\nfrom data import creature as data\n\n@pytest.fixture\ndef sample() -> Creature:\n    return Creature(name=\"yeti\",\n        aka:\"Abominable Snowman\",\n        country=\"CN\",\n        area=\"Himalayas\",\n        description=\"Handsome Himalayan\")\n\ndef test_create(sample):\n    resp = data.create(sample)\n    assert resp == sample\n\ndef test_create_duplicate(sample):\n    resp = data.create(sample)\n    assert resp == sample\n    with pytest.raises(Duplicate):\n        resp = data.create(sample)\n\ndef test_get_exists(sample):\n    resp = data.create(sample)\n    assert resp == sample\n    resp = data.get_one(sample.name)\n    assert resp == sample\n\ndef test_get_missing():\n    with pytest.raises(Missing):\n        _ = data.get_one(\"boxturtle\")\n\ndef test_modify(sample):\n    sample.country = \"CA\" # Canada!\n    resp = data.modify(sample.name, sample)\n    assert resp == sample\n\ndef test_modify_missing():\n    bob: Creature = Creature(name=\"bob\", country=\"US\", area=\"*\",\n        description=\"some guy\", aka=\"??\")\n    with pytest.raises(Missing):\n        _ = data.modify(bob.name, bob)\n```", "```py\nimport os\nimport pytest\nfrom model.creature import Creature\nfrom error import Missing, Duplicate\n\n# set this before data import below\nos.environ[\"CRYPTID_SQLITE_DB\"] = \":memory:\"\nfrom data import creature\n\n@pytest.fixture\ndef sample() -> Creature:\n    return Creature(name=\"yeti\",\n        aka=\"Abominable Snowman\",\n        country=\"CN\",\n        area=\"Himalayas\",\n        description=\"Hapless Himalayan\")\n\ndef test_create(sample):\n    resp = creature.create(sample)\n    assert resp == sample\n\ndef test_create_duplicate(sample):\n    with pytest.raises(Duplicate):\n        _ = creature.create(sample)\n\ndef test_get_one(sample):\n    resp = creature.get_one(sample.name)\n    assert resp == sample\n\ndef test_get_one_missing():\n    with pytest.raises(Missing):\n        resp = creature.get_one(\"boxturtle\")\n\ndef test_modify(sample):\n    creature.country = \"JP\"  # Japan!\n    resp = creature.modify(sample.name, sample)\n    assert resp == sample\n\ndef test_modify_missing():\n    thing: Creature = Creature(name=\"snurfle\",\n        description=\"some thing\", country=\"somewhere\")\n    with pytest.raises(Missing):\n        _ = creature.modify(thing.name, thing)\n\ndef test_delete(sample):\n    resp = creature.delete(sample.name)\n    assert resp is None\n\ndef test_delete_missing(sample):\n    with pytest.raises(Missing):\n        _ = creature.delete(sample.name)\n```", "```py\nfrom fastapi import FastAPI\nfrom web import explorer, creature\n\napp = FastAPI()\napp.include_router(explorer.router)\napp.include_router(creature.router)\n```", "```py\n$ schemathesis http://localhost:8000/openapi.json\n===================== Schemathesis test session starts =====================\nSchema location: http://localhost:8000/openapi.json\nBase URL: http://localhost:8000/\nSpecification version: Open API 3.0.2\nWorkers: 1\nCollected API operations: 12\n\nGET /explorer/ .                                                      [  8%]\nPOST /explorer/ .                                                     [ 16%]\nPATCH /explorer/ F                                                    [ 25%]\nGET /explorer .                                                       [ 33%]\nPOST /explorer .                                                      [ 41%]\nGET /explorer/{name} .                                                [ 50%]\nDELETE /explorer/{name} .                                             [ 58%]\nGET /creature/ .                                                      [ 66%]\nPOST /creature/ .                                                     [ 75%]\nPATCH /creature/ F                                                    [ 83%]\nGET /creature/{name} .                                                [ 91%]\nDELETE /creature/{name} .                                             [100%]\n```", "```py\nPerformed checks:\n    not_a_server_error                    717 / 727 passed          FAILED\n\nHint: You can visualize test results in Schemathesis.io\nby using `--report` in your CLI command.\n```"]