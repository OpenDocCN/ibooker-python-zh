["```py\n# quickstart.py\nimport asyncio, time\n\nasync def main():\n    print(f'{time.ctime()} Hello!')\n    await asyncio.sleep(1.0)\n    print(f'{time.ctime()} Goodbye!')\n\nasyncio.run(main())  ![1](assets/1.png)\n```", "```py\n$ python quickstart.py\nSun Aug 18 02:14:34 2019 Hello!\nSun Aug 18 02:14:35 2019 Goodbye!\n\n```", "```py\n# quickstart.py\nimport asyncio\nimport time\n\nasync def main():\n    print(f\"{time.ctime()} Hello!\")\n    await asyncio.sleep(1.0)\n    print(f\"{time.ctime()} Goodbye!\")\n\nloop = asyncio.get_event_loop()  ![1](assets/1.png)\ntask = loop.create_task(main())  ![2](assets/2.png)\nloop.run_until_complete(task)  ![3](assets/3.png)\npending = asyncio.all_tasks(loop=loop)\nfor task in pending:\n    task.cancel()\ngroup = asyncio.gather(*pending, return_exceptions=True)  ![4](assets/4.png)\nloop.run_until_complete(group)  ![3](assets/3.png)\nloop.close()  ![5](assets/5.png)\n```", "```py\n# quickstart_exe.py\nimport time\nimport asyncio\n\nasync def main():\n    print(f'{time.ctime()} Hello!')\n    await asyncio.sleep(1.0)\n    print(f'{time.ctime()} Goodbye!')\n\ndef blocking():  ![1](assets/1.png)\n    time.sleep(0.5)  ![2](assets/2.png)\n    print(f\"{time.ctime()} Hello from a thread!\")\n\nloop = asyncio.get_event_loop()\ntask = loop.create_task(main())\n\nloop.run_in_executor(None, blocking)  ![3](assets/3.png)\nloop.run_until_complete(task)\n\npending = asyncio.all_tasks(loop=loop)  ![4](assets/4.png)\nfor task in pending:\n    task.cancel()\ngroup = asyncio.gather(*pending, return_exceptions=True)\nloop.run_until_complete(group)\nloop.close()\n```", "```py\n$ python quickstart_exe.py\nSun Aug 18 01:20:42 2019 Hello!\nSun Aug 18 01:20:43 2019 Hello from a thread!\nSun Aug 18 01:20:43 2019 Goodbye!\n\n```", "```py\n>>> async def f():  ![1](assets/1.png)\n...   return 123\n...\n>>> type(f)  ![2](assets/2.png)\n<class 'function'>\n>>> import inspect  ![3](assets/3.png)\n>>> inspect.iscoroutinefunction(f)  ![4](assets/4.png)\nTrue\n```", "```py\n>>> def g():\n...     yield 123\n...\n>>> type(g)\n<class 'function'>\n>>> gen = g()\n>>> type(gen)\n<class 'generator'>\n```", "```py\n>>> coro = f()\n>>> type(coro)\n<class 'coroutine'>\n>>> inspect.iscoroutine(coro)\nTrue\n```", "```py\n>>> async def f():\n...    return 123\n>>> coro = f()\n>>> try:\n...   coro.send(None)  ![1](assets/1.png)\n... except StopIteration as e:\n...   print('The answer was:', e.value)  ![2](assets/2.png)\n...\nThe answer was: 123\n```", "```py\nasync def f():\n    await asyncio.sleep(1.0)\n    return 123\n\nasync def main():\n    result = await f()  ![1](assets/1.png)\n    return result\n```", "```py\n>>> coro = f()  ![1](assets/1.png)\n>>> coro.send(None)\n>>> coro.throw(Exception, 'blah')  ![2](assets/2.png)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in f\nException: blah\nblah\n```", "```py\n>>> import asyncio\n>>> async def f():\n...     try:\n...         while True: await asyncio.sleep(0)\n...     except asyncio.CancelledError:  ![1](assets/1.png)\n...         print('I was cancelled!')  ![2](assets/2.png)\n...     else:\n...         return 111\n>>> coro = f()\n>>> coro.send(None)\n>>> coro.send(None)\n>>> coro.throw(asyncio.CancelledError) ![3](assets/3.png)\nI was cancelled!  ![4](assets/4.png)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nStopIteration  ![5](assets/5.png)\n```", "```py\n>>> async def f():\n...     try:\n...         while True: await asyncio.sleep(0)\n...     except asyncio.CancelledError:\n...         print('Nope!')\n...         while True: await asyncio.sleep(0) ![1](assets/1.png)\n...     else:\n...         return 111\n>>> coro = f()\n>>> coro.send(None)\n>>> coro.throw(asyncio.CancelledError)  ![2](assets/2.png)\nNope!\n>>> coro.send(None)  ![3](assets/3.png)\n```", "```py\n>>> async def f():\n...     await asyncio.sleep(0)\n...     return 111\n>>> loop = asyncio.get_event_loop()  ![1](assets/1.png)\n>>> coro = f()\n>>> loop.run_until_complete(coro)  ![2](assets/2.png)\n111\n```", "```py\n>>> loop = asyncio.get_event_loop()\n>>> loop2 = asyncio.get_event_loop()\n>>> loop is loop2  ![1](assets/1.png)\nTrue\n```", "```py\nasync def f():\n    # Create some tasks!\n    loop = asyncio.get_event_loop()\n    for i in range():\n        loop.create_task(<some other coro>)\n```", "```py\nimport asyncio\n\nasync def f():\n    # Create some tasks!\n    for i in range():\n        asyncio.create_task(<some other coro>)\n```", "```py\n>>> from asyncio import Future\n>>> f = Future()\n>>> f.done()\nFalse\n```", "```py\n>>> import asyncio\n>>>\n>>> async def main(f: asyncio.Future):  ![1](assets/1.png)\n...     await asyncio.sleep(1)\n...     f.set_result('I have finished.')  ![2](assets/2.png)\n...\n>>> loop = asyncio.get_event_loop()\n>>> fut = asyncio.Future()  ![3](assets/3.png)\n>>> print(fut.done())  ![4](assets/4.png)\nFalse\n>>> loop.create_task(main(fut))  ![5](assets/5.png)\n<Task pending name='Task-1' coro=<main() running at <console>:1>>\n>>> loop.run_until_complete(fut)  ![6](assets/6.png)\n'I have finished.'\n>>> print(fut.done())\nTrue\n>>> print(fut.result())  ![7](assets/7.png)\nI have finished.\n```", "```py\n>>> import asyncio\n>>> from contextlib import suppress\n>>>\n>>> async def main(f: asyncio.Future):\n...     await asyncio.sleep(1)\n...     try:\n...         f.set_result('I have finished.')  ![2](assets/2.png)\n...     except RuntimeError as e:\n...         print(f'No longer allowed: {e}')\n...         f.cancel()  ![3](assets/3.png)\n...\n>>> loop = asyncio.get_event_loop()\n>>> fut = asyncio.Task(asyncio.sleep(1_000_000))  ![1](assets/1.png)\n>>> print(fut.done())\nFalse\n>>> loop.create_task(main(fut))\n<Task pending name='Task-2' coro=<main() running at <console>:1>>\n>>> with suppress(asyncio.CancelledError):\n...     loop.run_until_complete(fut)\n...\nNo longer allowed: Task does not support set_result operation\n>>> print(fut.done())\nTrue\n>>> print(fut.cancelled())  ![3](assets/3.png)\nTrue\n```", "```py\nimport asyncio\n\nasync def f():  ![1](assets/1.png)\n    pass\n\ncoro = f()  ![2](assets/2.png)\nloop = asyncio.get_event_loop()  ![3](assets/3.png)\n\ntask = loop.create_task(coro)  ![4](assets/4.png)\nassert isinstance(task, asyncio.Task)  ![5](assets/5.png)\n\nnew_task = asyncio.ensure_future(coro)  ![6](assets/6.png)\nassert isinstance(new_task, asyncio.Task)\n\nmystery_meat = asyncio.ensure_future(task)  ![7](assets/7.png)\nassert mystery_meat is task  ![8](assets/8.png)\n```", "```py\ndef listify(x: Any) -> List:\n    \"\"\" Try hard to convert x into a list \"\"\"\n    if isinstance(x, (str, bytes)):\n        return [x]\n\n    try:\n        return [_ for _ in x]\n    except TypeError:\n        return [x]\n```", "```py\nasyncio.gather(*`*``aws`*, *`loop``=``None`*, ...)\n\n```", "```py\nclass Connection:\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n    async def __aenter__(self):  ![1](assets/1.png)\n        self.conn = await get_conn(self.host, self.port)\n        return conn\n    async def __aexit__(self, exc_type, exc, tb):  ![2](assets/2.png)\n        await self.conn.close()\n\nasync with Connection('localhost', 9001) as conn:\n    <do stuff with conn>\n```", "```py\nfrom contextlib import contextmanager\n\n@contextmanager  ![1](assets/1.png)\ndef web_page(url):\n    data = download_webpage(url)  ![2](assets/2.png)\n    yield data\n    update_stats(url)  ![3](assets/3.png)\n\nwith web_page('google.com') as data:  ![4](assets/4.png)\n    process(data)  ![5](assets/5.png)\n```", "```py\nfrom contextlib import asynccontextmanager\n\n@asynccontextmanager  ![1](assets/1.png)\nasync def web_page(url):  ![2](assets/2.png)\n    data = await download_webpage(url)  ![3](assets/3.png)\n    yield data  ![4](assets/4.png)\n    await update_stats(url)  ![5](assets/5.png)\n\nasync with web_page('google.com') as data:  ![6](assets/6.png)\n    process(data)\n```", "```py\nfrom contextlib import asynccontextmanager\n\n@asynccontextmanager\nasync def web_page(url):  ![1](assets/1.png)\n    loop = asyncio.get_event_loop()\n    data = await loop.run_in_executor(\n        None, download_webpage, url)  ![2](assets/2.png)\n    yield data\n    await loop.run_in_executor(None, update_stats, url)  ![3](assets/3.png)\n\nasync with web_page('google.com') as data:\n    process(data)\n```", "```py\n>>> class A:\n...     def __iter__(self):   ![1](assets/1.png)\n...         self.x = 0  ![2](assets/2.png)\n...         return self  ![3](assets/3.png)\n...     def __next__(self):  ![4](assets/4.png)\n...         if self.x > 2:\n...             raise StopIteration  ![5](assets/5.png)\n...         else:\n...             self.x += 1\n...             return self.x  ![6](assets/6.png)\n>>> for i in A():\n...     print(i)\n1\n2\n3\n```", "```py\nimport asyncio\nfrom aioredis import create_redis\n\nasync def main():  ![1](assets/1.png)\n    redis = await create_redis(('localhost', 6379))  ![2](assets/2.png)\n    keys = ['Americas', 'Africa', 'Europe', 'Asia']  ![3](assets/3.png)\n\n    async for value in OneAtATime(redis, keys):  ![4](assets/4.png)\n        await do_something_with(value)  ![5](assets/5.png)\n\nclass OneAtATime:\n    def __init__(self, redis, keys):  ![6](assets/6.png)\n        self.redis = redis\n        self.keys = keys\n    def __aiter__(self):  ![7](assets/7.png)\n        self.ikeys = iter(self.keys)\n        return self\n    async def __anext__(self):  ![8](assets/8.png)\n        try:\n            k = next(self.ikeys)  ![9](assets/9.png)\n        except StopIteration:  ![10](assets/10.png)\n            raise StopAsyncIteration\n\n        value = await redis.get(k)  ![11](assets/11.png)\n        return value\n\nasyncio.run(main())\n```", "```py\nimport asyncio\nfrom aioredis import create_redis\n\nasync def main():  ![1](assets/1.png)\n    redis = await create_redis(('localhost', 6379))\n    keys = ['Americas', 'Africa', 'Europe', 'Asia']\n\n    async for value in one_at_a_time(redis, keys):  ![2](assets/2.png)\n        await do_something_with(value)\n\nasync def one_at_a_time(redis, keys):  ![3](assets/3.png)\n    for k in keys:\n        value = await redis.get(k)  ![4](assets/4.png)\n        yield value  ![5](assets/5.png)\n\nasyncio.run(main())\n```", "```py\n>>> import asyncio\n>>>\n>>> async def doubler(n):\n...     for i in range(n):\n...         yield i, i * 2  ![1](assets/1.png)\n...         await asyncio.sleep(0.1)  ![2](assets/2.png)\n...\n>>> async def main():\n...     result = [x async for x in doubler(3)]  ![3](assets/3.png)\n...     print(result)\n...     result = {x: y async for x, y in doubler(3)}  ![4](assets/4.png)\n...     print(result)\n...     result = {x async for x in doubler(3)}  ![5](assets/5.png)\n...     print(result)\n...\n>>> asyncio.run(main())\n[(0, 0), (1, 2), (2, 4)]\n{0: 0, 1: 2, 2: 4}\n{(2, 4), (1, 2), (0, 0)}\n```", "```py\n>>> import asyncio\n>>>\n>>> async def f(x):  ![1](assets/1.png)\n...   await asyncio.sleep(0.1)\n...   return x + 100\n...\n>>> async def factory(n):  ![2](assets/2.png)\n...   for x in range(n):\n...     await asyncio.sleep(0.1)\n...     yield f, x  ![3](assets/3.png)\n...\n>>> async def main():\n...   results = [await f(x) async for f, x in factory(3)]  ![4](assets/4.png)\n...   print('results = ', results)\n...\n>>> asyncio.run(main())\nresults =  [100, 101, 102]\n```", "```py\n# taskwarning.py\nimport asyncio\n\nasync def f(delay):\n    await asyncio.sleep(delay)\n\nloop = asyncio.get_event_loop()\nt1 = loop.create_task(f(1))  ![1](assets/1.png)\nt2 = loop.create_task(f(2))  ![2](assets/2.png)\nloop.run_until_complete(t1) ![3](assets/3.png)\nloop.close()\n```", "```py\n$ python taskwarning.py\nTask was destroyed but it is pending!\ntask: <Task pending coro=<f() done, defined at [...snip...]>\n\n```", "```py\n# telnetdemo.py\nimport asyncio\nfrom asyncio import StreamReader, StreamWriter\n\nasync def echo(reader: StreamReader, writer: StreamWriter): ![1](assets/1.png)\n    print('New connection.')\n    try:\n        while data := await reader.readline():  ![2](assets/2.png)\n            writer.write(data.upper())  ![3](assets/3.png)\n            await writer.drain()\n        print('Leaving Connection.')\n    except asyncio.CancelledError:  ![4](assets/4.png)\n        print('Connection dropped!')\n\nasync def main(host='127.0.0.1', port=8888):\n    server = await asyncio.start_server(echo, host, port) ![5](assets/5.png)\n    async with server:\n        await server.serve_forever()\n\ntry:\n    asyncio.run(main())\nexcept KeyboardInterrupt:\n    print('Bye!')\n```", "```py\n$ telnet 127.0.0.1 8888\nTrying 127.0.0.1...\nConnected to 127.0.0.1.\nEscape character is '^]'.\nhi!\nHI!\nstop shouting\nSTOP SHOUTING\n^]\ntelnet> q/\nConnection closed.\n\n```", "```py\n$ python telnetdemo.py\nNew connection.\nLeaving Connection.\n^CBye!\n\n```", "```py\n$ python telnetdemo.py\nNew connection.\n^CConnection dropped!\nBye!\n\n```", "```py\n# telnetdemo.py\nimport asyncio\nfrom asyncio import StreamReader, StreamWriter\n\nasync def send_event(msg: str):  ![1](assets/1.png)\n    await asyncio.sleep(1)\n\nasync def echo(reader: StreamReader, writer: StreamWriter):\n    print('New connection.')\n    try:\n        while (data := await reader.readline()):\n            writer.write(data.upper())\n            await writer.drain()\n        print('Leaving Connection.')\n    except asyncio.CancelledError:\n        msg = 'Connection dropped!'\n        print(msg)\n        asyncio.create_task(send_event(msg))  ![2](assets/2.png)\n\nasync def main(host='127.0.0.1', port=8888):\n    server = await asyncio.start_server(echo, host, port)\n    async with server:\n        await server.serve_forever()\n\ntry:\n    asyncio.run(main())\nexcept KeyboardInterrupt:\n    print('Bye!')\n```", "```py\n$ python telnetdemo.py\nNew connection.\n^CConnection dropped!\nBye!\nTask was destroyed but it is pending!\ntask: <Task pending name='Task-6' coro=<send_event() done, ...>\n\n```", "```py\n# alltaskscomplete.py\nimport asyncio\n\nasync def f(delay):\n    await asyncio.sleep(1 / delay)  ![1](assets/1.png)\n    return delay\n\nloop = asyncio.get_event_loop()\nfor i in range(10):\n    loop.create_task(f(i))\npending = asyncio.all_tasks()\ngroup = asyncio.gather(*pending, return_exceptions=True)\nresults = loop.run_until_complete(group)\nprint(f'Results: {results}')\nloop.close()\n```", "```py\n$ python alltaskscomplete.py\nResults: [6, 9, 3, 7, ...\n          ZeroDivisionError('division by zero',), 4, ...\n          8, 1, 5, 2]\n\n```", "```py\n$ python shell_signal01.py\n<Your app is running>\n<Your app is running>\n<Your app is running>\n<Your app is running>\n^CGot signal: SIGINT, shutting down.\n\n```", "```py\n# shell_signal01.py\nimport asyncio\n\nasync def main():  ![1](assets/1.png)\n    while True:\n        print('<Your app is running>')\n        await asyncio.sleep(1)\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    task = loop.create_task(main())  ![2](assets/2.png)\n    try:\n        loop.run_until_complete(task)\n    except KeyboardInterrupt:  ![3](assets/3.png)\n        print('Got signal: SIGINT, shutting down.')\n    tasks = asyncio.all_tasks(loop=loop)\n    for t in tasks:\n        t.cancel()\n    group = asyncio.gather(*tasks, return_exceptions=True)\n    loop.run_until_complete(group)\n    loop.close()\n```", "```py\n# shell_signal02.py\nimport asyncio\nfrom signal import SIGINT, SIGTERM  ![1](assets/1.png)\n\nasync def main():\n    try:\n        while True:\n            print('<Your app is running>')\n            await asyncio.sleep(1)\n    except asyncio.CancelledError:  ![2](assets/2.png)\n        for i in range(3):\n            print('<Your app is shutting down...>')\n            await asyncio.sleep(1)\n\ndef handler(sig):  ![3](assets/3.png)\n    loop.stop()  ![4](assets/4.png)\n    print(f'Got signal: {sig!s}, shutting down.')\n    loop.remove_signal_handler(SIGTERM)  ![5](assets/5.png)\n    loop.add_signal_handler(SIGINT, lambda: None)  ![6](assets/6.png)\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    for sig in (SIGTERM, SIGINT):  ![7](assets/7.png)\n        loop.add_signal_handler(sig, handler, sig)\n    loop.create_task(main())\n    loop.run_forever()  ![8](assets/8.png)\n    tasks = asyncio.all_tasks(loop=loop)\n    for t in tasks:\n        t.cancel()\n    group = asyncio.gather(*tasks, return_exceptions=True)\n    loop.run_until_complete(group)\n    loop.close()\n```", "```py\n$ python shell_signal02.py\n<Your app is running>\n<Your app is running>\n<Your app is running>\n<Your app is running>\n<Your app is running>\n^CGot signal: Signals.SIGINT, shutting down.\n<Your app is shutting down...>\n^C<Your app is shutting down...>  ![1](assets/1.png)\n^C<Your app is shutting down...>\n\n```", "```py\n# shell_signal02b.py\nimport asyncio\nfrom signal import SIGINT, SIGTERM\n\nasync def main():\n    loop = asyncio.get_running_loop()\n    for sig in (SIGTERM, SIGINT):\n        loop.add_signal_handler(sig, handler, sig)  ![1](assets/1.png)\n\n    try:\n        while True:\n            print('<Your app is running>')\n            await asyncio.sleep(1)\n    except asyncio.CancelledError:\n        for i in range(3):\n            print('<Your app is shutting down...>')\n            await asyncio.sleep(1)\n\ndef handler(sig):\n    loop = asyncio.get_running_loop()\n    for task in asyncio.all_tasks(loop=loop):  ![2](assets/2.png)\n        task.cancel()\n    print(f'Got signal: {sig!s}, shutting down.')\n    loop.remove_signal_handler(SIGTERM)\n    loop.add_signal_handler(SIGINT, lambda: None)\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```", "```py\n# quickstart.py\nimport time\nimport asyncio\n\nasync def main():\n    loop = asyncio.get_running_loop()\n    loop.run_in_executor(None, blocking)\n    print(f'{time.ctime()} Hello!')\n    await asyncio.sleep(1.0)\n    print(f'{time.ctime()} Goodbye!')\n\ndef blocking():\n    time.sleep(1.5)  ![1](assets/1.png)\n    print(f\"{time.ctime()} Hello from a thread!\")\n\nasyncio.run(main())\n```", "```py\n$ python quickstart.py\nFri Jan 24 16:25:08 2020 Hello!\nFri Jan 24 16:25:09 2020 Goodbye!\nexception calling callback for <Future at [...snip...]>\nTraceback (most recent call last):\n\n<big nasty traceback>\n\nRuntimeError: Event loop is closed\nFri Jan 24 16:25:09 2020 Hello from a thread!\n```", "```py\n# quickstart.py\nimport time\nimport asyncio\nfrom concurrent.futures import ThreadPoolExecutor as Executor\n\nasync def main():\n    loop = asyncio.get_running_loop()\n    future = loop.run_in_executor(None, blocking)  ![1](assets/1.png)\n    try:\n        print(f'{time.ctime()} Hello!')\n        await asyncio.sleep(1.0)\n        print(f'{time.ctime()} Goodbye!')\n    finally:\n        await future  ![2](assets/2.png)\n\ndef blocking():\n    time.sleep(2.0)\n    print(f\"{time.ctime()} Hello from a thread!\")\n\ntry:\n    asyncio.run(main())\nexcept KeyboardInterrupt:\n    print('Bye!')\n```", "```py\n# quickstart.py\nimport time\nimport asyncio\nfrom concurrent.futures import ThreadPoolExecutor as Executor\n\nasync def make_coro(future):  ![2](assets/2.png)\n    try:\n        return await future\n    except asyncio.CancelledError:\n        return await future\n\nasync def main():\n    loop = asyncio.get_running_loop()\n    future = loop.run_in_executor(None, blocking)\n    asyncio.create_task(make_coro(future))  ![1](assets/1.png)\n    print(f'{time.ctime()} Hello!')\n    await asyncio.sleep(1.0)\n    print(f'{time.ctime()} Goodbye!')\n\ndef blocking():\n    time.sleep(2.0)\n    print(f\"{time.ctime()} Hello from a thread!\")\n\ntry:\n    asyncio.run(main())\nexcept KeyboardInterrupt:\n    print('Bye!')\n```", "```py\n# quickstart.py\nimport time\nimport asyncio\nfrom concurrent.futures import ThreadPoolExecutor as Executor\n\nasync def main():\n    print(f'{time.ctime()} Hello!')\n    await asyncio.sleep(1.0)\n    print(f'{time.ctime()} Goodbye!')\n    loop.stop()\n\ndef blocking():\n    time.sleep(2.0)\n    print(f\"{time.ctime()} Hello from a thread!\")\n\nloop = asyncio.get_event_loop()\nexecutor = Executor()  ![1](assets/1.png)\nloop.set_default_executor(executor)  ![2](assets/2.png)\nloop.create_task(main())\nfuture = loop.run_in_executor(None, blocking)  ![3](assets/3.png)\ntry:\n    loop.run_forever()\nexcept KeyboardInterrupt:\n    print('Cancelled')\ntasks = asyncio.all_tasks(loop=loop)\nfor t in tasks:\n    t.cancel()\ngroup = asyncio.gather(*tasks, return_exceptions=True)\nloop.run_until_complete(group)\nexecutor.shutdown(wait=True)  ![4](assets/4.png)\nloop.close()\n```"]