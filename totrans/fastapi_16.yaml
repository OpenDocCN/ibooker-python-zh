- en: Chapter 13\. Production
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 13 章。生产
- en: If builders built buildings the way programmers wrote programs, the first woodpecker
    that came along would destroy civilization.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果建筑工人建造建筑物的方式就像程序员编写程序一样，那么第一个啄木鸟就会毁掉文明。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Gerald Weinberg, computer scientist
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 杰拉尔德·温伯格，计算机科学家
- en: Preview
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预览
- en: You have an application running on your local machine, and now you’d like to
    share it. This chapter presents many scenarios on how to move your application
    to production, and keep it running correctly and efficiently. Because some of
    the details can be *very* detailed, in some cases I’ll refer to helpful external
    documents rather than stuffing them in here.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你在本地机器上运行着一个应用程序，现在你想要分享它。本章介绍了许多场景，说明了如何将你的应用程序移动到生产环境，并确保它正确高效地运行。由于一些细节可能非常详细，在某些情况下我会参考一些有用的外部文档，而不是在这里堆砌它们。
- en: Deployment
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署
- en: 'All the code examples in this book so far have used a single instance of `uvicorn`
    running on `localhost`, port `8000`. To handle lots of traffic, you want multiple
    servers, running on the multiple cores that modern hardware provides. You’ll also
    need something above these servers to do the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止，本书中的所有代码示例都使用了在 `localhost` 的端口 `8000` 上运行的单个 `uvicorn` 实例。为了处理大量流量，你需要多个服务器，运行在现代硬件提供的多个核心上。你还需要在这些服务器之上添加一些东西来执行以下操作：
- en: Keep them running (a *supervisor*)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使它们保持运行（*监督者*）
- en: Gather and feed external requests (a *reverse proxy*)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集和提供外部请求（*反向代理*）
- en: Return responses
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回响应
- en: Provide HTTPS *termination* (SSL decryption)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供 HTTPS *终止*（SSL 解密）
- en: Multiple Workers
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多个工作进程
- en: You’ve probably seen another Python server called [Gunicorn](https://gunicorn.org).
    This can supervise multiple workers, but it’s a WSGI server, and FastAPI is based
    on ASGI. Luckily, there’s a special Uvicorn worker class that can be managed by
    Gunicorn.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能见过另一个名为 [Gunicorn](https://gunicorn.org) 的 Python 服务器。这个服务器可以监视多个工作进程，但它是一个
    WSGI 服务器，而 FastAPI 是基于 ASGI 的。幸运的是，有一个特殊的 Uvicorn 工作进程类可以由 Gunicorn 管理。
- en: '[Example 13-1](#ex-13-1) sets up these Uvicorn workers on `localhost`, port
    `8000` (this is adapted from the [official documentation](https://oreil.ly/Svdhx)).
    The quotes protect the shell from any special interpretation.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 13-1](#ex-13-1) 在 `localhost` 的端口 `8000` 上设置了这些 Uvicorn 工作进程（这是从 [官方文档](https://oreil.ly/Svdhx)
    改编的）。引号保护 shell 免受任何特殊解释。'
- en: Example 13-1\. Use Gunicorn with Uvicorn workers
  id: totrans-15
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-1。使用 Gunicorn 和 Uvicorn 工作进程
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You’ll see many lines as Gunicorn does your bidding. It will start a top-level
    Gunicorn process, talking to four Uvicorn worker subprocesses, all sharing port
    `8000` on `localhost` (`0.0.0.0`). Change the host, port, or number of workers
    if you want something else. The `main:app` refers to *main.py* and the FastAPI
    object with the variable name `app`. The Gunicorn [docs](https://oreil.ly/TxYIy)
    claim the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Gunicorn 执行你的命令时，你会看到许多行。它将启动一个顶级 Gunicorn 进程，与四个 Uvicorn 工作进程子进程交流，所有进程共享
    `localhost` (`0.0.0.0`) 上的端口 `8000`。如果你想要其他内容，可以更改主机、端口或工作进程数。`main:app` 指的是 *main.py*
    和带有变量名 `app` 的 FastAPI 对象。Gunicorn 的[文档](https://oreil.ly/TxYIy)宣称如下：
- en: Gunicorn should only need 4-12 worker processes to handle hundreds or thousands
    of requests per second.
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Gunicorn 只需要 4-12 个工作进程来处理每秒数百或数千个请求。
- en: It turns out that Uvicorn itself can also fire up multiple Uvicorn workers,
    as in [Example 13-2](#ex-13-2).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 结果发现 Uvicorn 本身也可以启动多个 Uvicorn 工作进程，就像 [示例 13-2](#ex-13-2) 中一样。
- en: Example 13-2\. Use Uvicorn with Uvicorn workers
  id: totrans-20
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-2。使用 Uvicorn 和 Uvicorn 工作进程
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'But this method doesn’t do process management, so the gunicorn method is usually
    preferred. Other process managers exist for Uvicorn: see its [official docs](https://www.uvicorn.org/deployment).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但这种方法不涉及进程管理，因此通常更喜欢 gunicorn 方法。其他进程管理器也适用于 Uvicorn：参见其[官方文档](https://www.uvicorn.org/deployment)。
- en: This handles three of the four jobs mentioned in the previous section, but not
    HTTPS encryption.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这处理了前一节提到的四项工作中的三项，但不包括 HTTPS 加密。
- en: HTTPS
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTPS
- en: The official FastAPI [HTTPS docs](https://oreil.ly/HYRW7), like all of the official
    FastAPI docs, are extremely informative. I recommend reading them, followed by
    Ramírez’s [description](https://oreil.ly/zcUWS) of how to add HTTPS support to
    FastAPI by using [Traefik](https://traefik.io). Traefik sits “above” your web
    servers, similar to nginx as a reverse proxy and load balancer, but it includes
    that HTTPS magic.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 官方 FastAPI [HTTPS 文档](https://oreil.ly/HYRW7)，就像所有官方 FastAPI 文档一样，都非常丰富。我建议先阅读它们，然后再阅读
    Ramírez 的[描述](https://oreil.ly/zcUWS)，了解如何通过使用 [Traefik](https://traefik.io) 向
    FastAPI 添加 HTTPS 支持。Traefik 位于你的 Web 服务器“之上”，类似于作为反向代理和负载均衡器的 nginx，但它包含了 HTTPS
    魔法。
- en: Although the process has many steps, it’s still much simpler than it used to
    be. In particular, you used to regularly pay big bucks to a certificate authority
    for a digital certificate that you could use to provide HTTPS for your site. Luckily,
    those authorities have been largely replaced by the free service [Let’s Encrypt](https://letsencrypt.org).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个过程有许多步骤，但比以前简单得多。特别是，以前你经常为数字证书向证书颁发机构支付高昂费用，以便为你的网站提供HTTPS。幸运的是，这些机构大多被免费服务[Let's
    Encrypt](https://letsencrypt.org)所取代。
- en: Docker
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker
- en: When Docker burst on the scene (in a five-minute [lightning talk](https://oreil.ly/25oef)
    by Solomon Hykes of dotCloud at PyCon 2013), it was the first time most of us
    had ever heard of Linux containers. Over time, we learned that Docker was faster
    and lighter than virtual machines. Instead of emulating a full operating system,
    each container shared the server’s Linux kernel, and isolated processes and networks
    into their own namespaces. Suddenly, by using the free Docker software, you could
    host multiple independent services on a single machine, without worrying about
    them stepping all over one another.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当Docker（在2013年PyCon的Solomon Hykes的五分钟[闪电演讲](https://oreil.ly/25oef)中出现）时，大多数人第一次听说Linux容器。随着时间的推移，我们了解到Docker比虚拟机更快、更轻。每个容器不是模拟完整的操作系统，而是共享服务器的Linux内核，并将进程和网络隔离到自己的命名空间中。突然间，通过使用免费的Docker软件，你可以在单台机器上托管多个独立服务，而不必担心它们互相干扰。
- en: 'Ten years later, Docker is universally recognized and supported. If you want
    to host your FastAPI application on a cloud service, you’ll usually need to create
    a *Docker image* of it first. The [official FastAPI docs](https://oreil.ly/QnwOW)
    include a thorough description of how to build a Dockerized version of your FastAPI
    application. One step is to write a *Dockerfile*: a text file containing Docker
    configuration info, like what application code to use and what processes to run.
    Just to prove that this isn’t brain surgery during a rocket launch, here’s the
    Dockerfile from that page:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 十年后，Docker 已被普遍认可和支持。如果你想在云服务上托管你的 FastAPI 应用程序，通常需要首先创建它的*Docker镜像*。[官方FastAPI文档](https://oreil.ly/QnwOW)包含了如何构建你的FastAPI应用程序的Docker化版本的详细描述。其中一步是编写*Dockerfile*：一个包含Docker配置信息的文本文件，如要使用的应用程序代码和要运行的进程。只为证明这不是在火箭发射期间进行的脑外科手术，这里是来自该页面的Dockerfile：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: I recommend reading the official docs, or other links that a Google search of
    `fastapi docker` will produce, such as [“The Ultimate FastAPI Tutorial Part 13—Using
    Docker to Deploy Your App”](https://oreil.ly/7TUpR) by Christopher Samiullah.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议阅读官方文档，或者通过谷歌搜索`fastapi docker`得到的其他链接，比如[“使用Docker部署你的应用程序的终极FastAPI教程第13部分”](https://oreil.ly/7TUpR)
    by Christopher Samiullah。
- en: Cloud Services
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云服务
- en: 'Many sources of paid or free hosting are available on the Net. Some walk-throughs
    on how to host FastAPI with them include the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在网上有许多付费或免费的主机来源。一些关于如何与它们一起托管FastAPI的指南包括以下内容：
- en: '[“FastAPI—Deployment” by Tutorials Point](https://oreil.ly/DBZcm)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“FastAPI——部署” by Tutorials Point](https://oreil.ly/DBZcm)'
- en: '[“The Ultimate FastAPI Tutorial Part 6b—Basic Deployment on Linode” by Christopher
    Samiullah](https://oreil.ly/s8iar)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Linode上的终极FastAPI教程第6b部分——基本部署” by Christopher Samiullah](https://oreil.ly/s8iar)'
- en: '[“How to Deploy a FastAPI App on Heroku for Free” by Shinichi Okada](https://oreil.ly/A6gij)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“如何免费在Heroku上部署FastAPI应用程序” by Shinichi Okada](https://oreil.ly/A6gij)'
- en: Kubernetes
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes
- en: 'Kubernetes grew from internal Google code for managing internal systems that
    were becoming ever more godawfully complex. System administrators (as they were
    called then) used to manually configure tools like load balancers, reverse proxies,
    humidors^([1](ch13.html#id831)) and so on. Kubernetes aimed to take much of this
    knowledge and automate it: don’t tell me *how* to handle this; tell me what you
    *want*. This included tasks like keeping a service running, or firing up more
    servers if traffic spikes.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes起源于Google内部用于管理越来越复杂的内部系统的代码。当时的系统管理员（他们当时被称为）过去常常手动配置诸如负载均衡器、反向代理、湿度计^([1](ch13.html#id831))等工具。Kubernetes的目标是获取这些知识并自动化：不要告诉我*如何*处理这个问题；告诉我你*想要*什么。这包括保持服务运行或在流量激增时启动更多服务器等任务。
- en: There are many descriptions of how to deploy FastAPI on Kubernetes, including
    [“Deploying a FastAPI Application on Kubernetes” by Sumanta Mukhopadhyay](https://oreil.ly/ktTNu).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多关于如何在Kubernetes上部署FastAPI的描述，包括[“在Kubernetes上部署FastAPI应用程序” by Sumanta Mukhopadhyay](https://oreil.ly/ktTNu)。
- en: Performance
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能
- en: FastAPI’s performance is currently [among the highest](https://oreil.ly/mxabf)
    of any Python web framework, even comparable to frameworks in faster languages
    like Go. But much of this is due to ASGI, avoiding I/O waiting with async. Python
    itself is a relatively slow language. The following are some tips and tricks to
    improve overall performance.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 的性能目前[位于最高水平之一](https://oreil.ly/mxabf)，甚至可以与像 Go 这样更快语言的框架相媲美。但其中很大一部分归功于
    ASGI，通过异步避免 I/O 等待。Python 本身是一种相对较慢的语言。以下是一些提高整体性能的技巧和窍门。
- en: Async
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步
- en: Often a web server doesn’t need to be really fast. It spends much of its time
    getting HTTP network requests and returning results (the Web layer in this book).
    In between, a web service performs business logic (the Service layer) and accesses
    data sources (the Data layer), and again spends much of its time on network I/O.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通常 Web 服务器不需要真正快。它大部分时间都在获取 HTTP 网络请求和返回结果（本书中的 Web 层）。在此期间，Web 服务执行业务逻辑（服务层）并访问数据源（数据层），再次花费大部分时间在网络
    I/O 上。
- en: Whenever code in the web service has to wait for a response, it’s a good candidate
    to use an async function (`async def` rather than `def`). This lets FastAPI and
    Starlette schedule the async function and do other things while waiting for it
    to get its response. This is one of the reasons FastAPI’s benchmarks are better
    than WSGI-based frameworks like Flask and Django.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 每当 Web 服务中的代码需要等待响应时，使用异步函数（`async def` 而不是 `def`）是个不错的选择。这样可以让 FastAPI 和 Starlette
    调度异步函数，在等待获取响应时做其他事情。这也是 FastAPI 的基准测试比基于 WSGI 的框架（如 Flask 和 Django）好的原因之一。
- en: 'Performance has two aspects:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 性能有两个方面：
- en: The time to handle a single request
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理单个请求所需的时间
- en: The number of requests that can be handled at once
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可同时处理的请求数量
- en: Caches
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存
- en: If you have a web endpoint that ultimately gets data from a static source (like
    a database record that changes rarely or never), it’s possible to *cache* the
    data in a function. This could be in any of the layers. Python provides the standard
    [functools module](https://oreil.ly/8Kg4V) and the functions `cache()` and `lru_cache()`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个最终从静态源获取数据的 Web 端点（例如几乎不会更改或从不更改的数据库记录），可以在函数中*缓存*数据。这可以在任何层中完成。Python
    提供了标准的[functools 模块](https://oreil.ly/8Kg4V)和函数 `cache()` 和 `lru_cache()`。
- en: Databases, Files, and Memory
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库、文件和内存
- en: One of the most common causes of a slow website is a missing index for a database
    table of sufficient size. Often you won’t see the problem until your table has
    grown to a particular size, and then queries suddenly become much slower. In SQL,
    any column in a `WHERE` clause should be indexed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 慢网站最常见的原因之一是数据库表缺少适当大小的索引。通常直到表增长到特定大小之后，查询突然变得更慢才能看到问题。在 SQL 中，`WHERE` 子句中的任何列都应该有索引。
- en: 'In many examples in this book, the primary key of the `creature` and `explorer`
    tables has been the text field `name`. When the tables were created, `name` was
    declared the `primary key`. For the tiny tables that you’ve seen so far in this
    book, SQLite would ignore that key anyhow, since it’s faster just to scan the
    table. But once a table gets to a decent size—say a million rows—a missing index
    will make a noticeable difference. The solution: run a [query optimizer](https://oreil.ly/YPR3Q).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的许多示例中，`creature` 和 `explorer` 表的主键一直是文本字段 `name`。在创建表时，`name` 被声明为 `primary
    key`。到目前为止，在本书中看到的小表中，SQLite 无论如何都会忽略该键，因为仅扫描表更快。但一旦表达到一个可观的大小，比如一百万行，缺少索引就会显著影响性能。解决方案是运行[查询优化器](https://oreil.ly/YPR3Q)。
- en: Even if you have a small table, you can do database load testing with Python
    scripts or open source tools. If you’re making numerous sequential database queries,
    it may be possible to combine them in a single batch. If you’re uploading or downloading
    a large file, use the streaming versions rather than a giant gulp.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有一个小表，也可以使用 Python 脚本或开源工具进行数据库负载测试。如果您正在进行大量顺序数据库查询，可能可以将它们合并成一个批处理。如果要上传或下载大文件，请使用流式版本而不是整体读取。
- en: Queues
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 队列
- en: If you’re performing any task that takes longer than a fraction of a second
    (like sending a confirmation email or downsizing an image), it may be worth handing
    it off to a job queue like [Celery](https://docs.celeryq.dev).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您执行的任何任务花费超过一小部分秒钟的时间（例如发送确认电子邮件或缩小图像），可能值得将其交给作业队列，例如[Celery](https://docs.celeryq.dev)。
- en: Python Itself
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 本身
- en: 'If your web service seems slow because it does significant computing with Python,
    you may want a “faster Python.” Alternatives include the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的Web服务似乎因使用Python进行大量计算而变慢，您可能需要一个“更快的Python”。替代方案包括以下内容：
- en: Use [PyPy](https://www.pypy.org) instead of the standard CPython.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[PyPy](https://www.pypy.org)而不是标准的CPython。
- en: Write a Python [extension](https://oreil.ly/BElJa) in C, C++, or Rust.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用C、C++或Rust编写Python [扩展](https://oreil.ly/BElJa)。
- en: Convert the slow Python code to [Cython](https://cython.org) (used by Pydantic
    and Uvicorn themselves).
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将缓慢的Python代码转换为[Cython](https://cython.org)（由Pydantic和Uvicorn自身使用）。
- en: A very intriguing recent announcement was the [Mojo language](https://oreil.ly/C96kx).
    It aims to be a complete superset of Python, with new features (using the same
    friendly Python syntax) that can speed up a Python example by *thousands* of times.
    The main author, Chris Lattner, had previously worked on compiler tools like [LLVM](https://llvm.org),
    [Clang](https://clang.llvm.org), and [MLIR](https://mlir.llvm.org), plus the [Swift](https://www.swift.org)
    language at Apple.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最近一个非常引人注目的公告是[Mojo语言](https://oreil.ly/C96kx)。它旨在成为Python的完整超集，具有新功能（使用相同友好的Python语法），可以将Python示例的速度提高*数千*倍。主要作者Chris
    Lattner之前曾在Apple上开发了像[LLVM](https://llvm.org)，[Clang](https://clang.llvm.org)和[MLIR](https://mlir.llvm.org)以及[Swift](https://www.swift.org)语言等编译器工具。
- en: Mojo aims to be a single-language solution to AI development, which now (in
    PyTorch and TensorFlow) requires Python/C/C++ sandwiches that are hard to develop,
    manage, and debug. But Mojo also would be a good general-purpose language aside
    from AI.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Mojo旨在成为AI开发的单一语言解决方案，现在（在PyTorch和TensorFlow中）需要Python/C/C++三明治，这使得开发、管理和调试变得困难。但Mojo也将是一个除了AI之外的好的通用语言。
- en: I coded in C for years and kept waiting for a successor that was as performant
    but as easy to use as Python. D, Go, Julia, Zig, and Rust were possibilities,
    but if Mojo can live up to its [goals](https://oreil.ly/EojvA), I would use Mojo
    extensively.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我多年来一直在C中编码，并一直在等待一个像Python一样易于使用但性能良好的后继者。D、Go、Julia、Zig和Rust都是可能的选择，但如果Mojo能够实现其[目标](https://oreil.ly/EojvA)，我将广泛使用Mojo。
- en: Troubleshooting
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除
- en: Look bottom-up from the time and place where you encounter a problem. This includes
    time and space performance issues, but also logic and async traps.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 从遇到问题的时间和地点向下查看。这包括时间和空间性能问题，还包括逻辑和异步陷阱。
- en: Kinds of Problems
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题类型
- en: At a first glance, what HTTP response code did you get?
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，您得到了什么HTTP响应代码？
- en: '`404`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`404`'
- en: An authentication or authorization error.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 出现身份验证或授权错误。
- en: '`422`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`422`'
- en: Usually a Pydantic complaint about use of a model.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通常是Pydantic对模型使用的投诉。
- en: '`500`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`500`'
- en: The failure of a service behind your FastAPI one.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI背后的服务失败。
- en: Logging
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记录
- en: Uvicorn and other web servers typically write logs to stdout. You can check
    the log to see what call was actually made, including the HTTP verb and URL, but
    not data in the body, headers, or cookies.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Uvicorn和其他Web服务器通常将日志写入stdout。您可以检查日志以查看实际进行的调用，包括HTTP动词和URL，但不包括正文、标头或Cookie中的数据。
- en: If a particular endpoint returns a 400-level status code, you can try feeding
    the same input back and see if the error reoccurs. If so, my first caveman debugging
    instinct is to add `print()` statements in the relevant Web, Service, and Data
    functions.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果特定的端点返回400级状态码，您可以尝试将相同的输入反馈并查看是否再次出现错误。如果是这样，我的第一个原始调试直觉是在相关的Web、服务和数据函数中添加`print()`语句。
- en: Also, wherever you raise an exception, add details. If a database lookup fails,
    include the input values and specific error, like an attempt to double a unique
    key field.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，无论何处引发异常，都要添加详细信息。如果数据库查找失败，请包含输入值和具体错误，例如尝试加倍唯一键字段。
- en: Metrics
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指标
- en: 'The terms *metrics*, *monitoring*, *observability*, and *telemetry* may seem
    to overlap. It’s common practice in Pythonland to use the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 术语*指标*、*监控*、*可观察性*和*遥测*可能似乎有重叠之处。在Python领域中，使用以下常见实践：
- en: '[Prometheus](https://prometheus.io) to gather metrics'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Prometheus](https://prometheus.io)用于收集指标'
- en: '[Grafana](https://grafana.com) to display them'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Grafana](https://grafana.com)用于显示它们'
- en: '[OpenTelemetry](https://opentelemetry.io) to measure timing'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[OpenTelemetry](https://opentelemetry.io)用于测量时间'
- en: 'You can apply these to all your site’s layers: Web, Service, and Data. The
    Service ones may be more business-oriented, and the others more technical, and
    useful for site developers and maintainers.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将这些应用于站点的所有层次：Web、服务和数据。服务层可能更加面向业务，其他层更多是技术方面的，对站点开发人员和维护者有用。
- en: 'Here are some links to gather FastAPI metrics:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些链接可用于收集FastAPI的指标：
- en: '[Prometheus FastAPI Instrumentator](https://oreil.ly/EYJwR)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Prometheus FastAPI Instrumentator](https://oreil.ly/EYJwR)'
- en: '[“Getting Started: Monitoring a FastAPI App with Grafana and Prometheus—A Step-by-Step
    Guide” by Zoo Codes](https://oreil.ly/Gs90t)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“入门指南：使用Grafana和Prometheus监控FastAPI应用程序—逐步指南” by Zoo Codes](https://oreil.ly/Gs90t)'
- en: '[“FastAPI Observability” page of Grafana Labs website](https://oreil.ly/spKwe)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“FastAPI Observability” page of Grafana Labs website](https://oreil.ly/spKwe)'
- en: '[OpenTelemetry FastAPI Instrumentation](https://oreil.ly/wDSNv)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[OpenTelemetry FastAPI Instrumentation](https://oreil.ly/wDSNv)'
- en: '[“OpenTelemetry FastAPI Tutorial—Complete Implementation Guide” by Ankit Anand](https://oreil.ly/ZpSXs)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“OpenTelemetry FastAPI Tutorial—Complete Implementation Guide” by Ankit Anand](https://oreil.ly/ZpSXs)'
- en: '[OpenTelemetry Python documentation](https://oreil.ly/nSD4G)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[OpenTelemetry Python documentation](https://oreil.ly/nSD4G)'
- en: Review
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾
- en: It’s pretty clear that production is not easy. Problems include the web machinery
    itself, network and disk overloading, and database problems. This chapter offered
    hints on how to get the information you need, and where to start digging when
    problems pop up.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 生产显然并不容易。问题包括网络和磁盘超载，以及数据库问题。本章提供了如何获取所需信息的提示，以及在问题出现时从哪里开始挖掘。
- en: ^([1](ch13.html#id831-marker)) Wait, those keep cigars fresh.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch13.html#id831-marker)) 等等，这些可以保持雪茄的新鲜。
