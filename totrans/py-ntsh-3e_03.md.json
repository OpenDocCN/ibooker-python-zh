["```py\n# coding: iso-8859-1\n```", "```py\nABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz\nªµºÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ\n```", "```py\n0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz\nªµ·ºÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ\n```", "```py\n>>> A = 100\n>>> *`# this variable is GREEK CAPITAL LETTER ALPHA:`*>>> Α = 200  \n>>> print(A, Α)\n```", "```py\n100 200\n```", "```py\n>>> a, o = 100, 101\n>>> ª, º = 200, 201\n>>> print(a, o, ª, º)\n```", "```py\n200 201 200 201  *# expected \"100 101 200 201\"*\n```", "```py\n+  -  *  /  %   **  //  <<  >>  &   @\n\n|  ^  ~  <  <=  >   >=  !=  ==  @=  :=\n```", "```py\n(    )    [    ]    {    }\n\n,    :    .    =    ;    @\n\n+=   -=   *=   /=   //=  %=\n\n&=   |=   ^=   >>=  <<=  **=\n```", "```py\n'  \"  #  \\\n```", "```py\n42                     *`# Integer literal`*\n3.14                   *`# Floating-point literal`*\n1.0j                   *`# Imaginary literal`*\n'hello'                *`# String literal`*\n\"world\"                *`# Another string literal`*\n*`\"\"\"Good`*\n*`night\"\"\"`               `# Triple-quoted string literal, spanning 2 lines`*\n```", "```py\n[42, 3.14, 'hello']     *`# List`*\n[]                      *`# Empty list`*\n100, 200, 300           *`# Tuple`*\n(100, 200, 300)         *`# Tuple`*\n()                      *`# Empty tuple`*\n{'x':42, 'y':3.14}      *`# Dictionary`*\n{}                      *`# Empty dictionary`*\n{1, 2, 4, 8, 'string'}  *`# Set`*\n*`# There is no literal form to denote an empty set; use set() instead`*\n```", "```py\n1, 23, 3493                    *`# Decimal integer literals`*\n0b010101, 0b110010, 0B01       *`# Binary integer literals`*\n0o1, 0o27, 0o6645, 0O777       *`# Octal integer literals`*\n0x1, 0x17, 0xDA5, 0xda5, 0Xff  *`# Hexadecimal integer literals`*\n```", "```py\n0., 0.0, .0, 1., 1.0, 1e0, 1.e0, 1.0E0  *`# Floating-point literals`*\n```", "```py\n>>> f=2.5\n>>> f.as_integer_ratio()\n```", "```py\n(5, 2)\n```", "```py\n0j, 0.j, 0.0j, .0j, 1j, 1.j, 1.0j, 1e0j, 1.e0j, 1.0e0j\n```", "```py\n>>> 100_000.000_0001, 0x_FF_FF, 0o7_777, 0b_1010_1010\n```", "```py\n(100000.0000001, 65535, 4095, 170)\n```", "```py\n'This is a literal string'\n\"This is another string\"\n```", "```py\n'I\\'m a Python fanatic'     *`# You can escape a quote`*\n\"I'm a Python fanatic\"      *`# This way may be more readable`*\n```", "```py\n'A not very long string \\ that spans two lines'       *`# Comment not allowed on previous line`*\n```", "```py\n'A not very long string\\n\\ that prints on two lines'   *`# Comment not allowed on previous line`*\n```", "```py\n*`\"\"\"`**`An even bigger`*\n*`string that spans three lines\"\"\"`*              *`# Comments not allowed on previous lines`*\n```", "```py\nthe_text = \"\"\"\\ First line\nSecond line\n\"\"\"      *`# The same as \"First line\\nSecond line\\n\" but more readable`*\n```", "```py\nmarypop = ('supercali'       *`# '(' begins logical line,`*\n           'fragilistic'     *`# indentation is ignored`*\n           'expialidocious') *`# until closing ')'`*\n```", "```py\nb'abc'\nbytes([97, 98, 99])           *`# Same as the previous line`*\nrb'\\ = solidus'               *`# A raw bytes literal, containing a '\\'`*\n```", "```py\nba = bytearray([97, 98, 99])  *`# Like bytes, can take a sequence of ints`*\nba[1] = 97                    *`# Unlike bytes, contents can be modified`*\nprint(ba.decode())            *`# Prints 'aac'`*\n```", "```py\n100, 200, 300        *`# Tuple with three items`*\n(3.14,)              *`# Tuple with one item, needs trailing comma`*\n()                   *`# Empty tuple (parentheses NOT optional)`*\n```", "```py\ntuple('wow')\n```", "```py\n('w', 'o', 'w')\n```", "```py\n[42, 3.14, 'hello']  *`# List with three items`*\n[100]                *`# List with one item`*\n[]                   *`# Empty list`*\n```", "```py\nlist('wow')\n```", "```py\n['w', 'o', 'w']\n```", "```py\n{42, 3.14, 'hello'}  *`# Literal for a set with three items`*\n{100}                *`# Literal for a set with one item`*\nset()                *`# Empty set - no literal for empty set`*\n                     *`# {} is an empty dict!`*\n```", "```py\n{1:2, 3:4, 1:5}  *`# The value of this dictionary is {1:5, 3:4}`*\n```", "```py\n{'x':42, 'y':3.14, 'z':7}    *`# Dictionary with three items, str keys`*\n{1:2, 3:4}                   *`# Dictionary with two items, int keys`*\n{1:'za', 'br':23}            *`# Dictionary with different key types`*\n{}                           *`# Empty dictionary`*\n```", "```py\ndict(x=42, y=3.14, z=7)      *`# Dictionary with three items, str keys`*\ndict([(1, 2), (3, 4)])       *`# Dictionary with two items, int keys`*\ndict([(1,'za'), ('br',23)])  *`# Dictionary with different key types`*\ndict()                       *`# Empty dictionary`*\n```", "```py\nd1 = {'a':1, 'x': 0}\nd2 = {'c': 2, 'x': 5}\nd3 = {**d1, **d2}  # result is {'a':1, 'x': 5, 'c': 2}\n```", "```py\nd4 = d1 | d2  # same result as d3\n```", "```py\ndict.fromkeys('hello', 2)    *`# Same as {'h':2, 'e':2, 'l':2, 'o':2}`*\ndict.fromkeys([1, 2, 3])     *`# Same as {1:`**`None`**`, 2:`**`None`**`, 3:`**`None`**`}`*\n```", "```py\ntally = dict.fromkeys(['A', 'B', `None`, ...], 0)\n```", "```py\n`def` count_trues(*`seq`*):\n    `return` sum(bool(x) `for` x `in` seq)\n```", "```py\n*target* = *expression*\n```", "```py\na = b = c = 0\n```", "```py\na, b, c = x\n```", "```py\na, b = b, a\n```", "```py\nfirst, *middle, last = x\n```", "```py\nfirst, middle, last = x[0], x[1:-1], x[-1]\n```", "```py\n*`a`* < *`b`* <= *`c`* < *`d`*\n```", "```py\n*`a`* < *`b`* `and` *`b`* <= *`c`* `and` *`c`* < *`d`*\n```", "```py\n*when_true* if *condition* else *when_false*\n```", "```py\nre_match = re.match(r'Name: (\\S)', input_string)\n`if` re_match:\n    print(re_match.groups(1))\n\n*`# collapsed version using :=`*\n`if` (re_match := re.match(r'Name: (\\S)', input_string)):\n    print(re_match.groups(1))\n```", "```py\ncurrent_value = get_next_value()\n`while` current_value `is` `not` `None`:\n    `if` `not` filter_condition(current_value):\n        `continue`   *`# BUG! Current_value is not advanced to next`*\n *`# ... do some work with current_value ...`*\n    current_value = get_next_value()\n```", "```py\n`while` (current_value := get_next_value()) `is` `not` `None`:\n    `if` `not` filter_condition(current_value):\n        `continue`   *`# no bug, current_value advances in while statement`*\n *`# ... do some work with current_value ...`*\n```", "```py\n`def` safe_int(s):\n    `try`:\n        `return` int(s)\n    `except` Exception:\n        `return` `None`\n\ninput_strings = ['1','2','a','11']\n\nvalid_int_strings = [safe_int(s) `for` s `in` input_strings \n                     `if` safe_int(s) `is` `not` `None`]\n```", "```py\nvalid_int_strings = [int_s `for` s `in` input_strings\n                     `if` (int_s := safe_int(s)) `is` `not` `None`]\n```", "```py\nx = [10, 20, 30, 40]\nx[1]                  *`# 20`*\nx[-1]                 *`# 40`*\n```", "```py\nx = [10, 20, 30, 40]\nx[1:3]                   *`# [20, 30]`*\nx[1:]                    *`# [20, 30, 40]`*\nx[:2]                    *`# [10, 20]`*\n```", "```py\n>>> y = list(range(10))  *`# values from 0-9`*\n>>> y[-5:]               *`# last five items`*\n```", "```py\n[5, 6, 7, 8, 9]\n```", "```py\n>>> y[::2]               *`# every other item`*\n```", "```py\n[0, 2, 4, 6, 8]\n```", "```py\n>>> y[10:0:-2]           *`# every other item, in reverse order`*\n```", "```py\n[9, 7, 5, 3, 1]\n```", "```py\n>>> y[:0:-2]             *`# every other item, in reverse order (simpler)`*\n```", "```py\n[9, 7, 5, 3, 1]\n```", "```py\n>>> y[::-2]              *`# every other item, in reverse order (best)`*\n```", "```py\n[9, 7, 5, 3, 1]\n```", "```py\nx = [1, 2, 3, 4]\nx[1] = 42                *`# x is now [1, 42, 3, 4]`*\n```", "```py\nx = [10, 20, 30, 40, 50]\n*`# replace items 1 and 2`*\nx[1:3] = [22, 33, 44]    *`# x is now [10, 22, 33, 44, 40, 50]`*\n*`# replace items 1-3`*\nx[1:4] = [88, 99]        *`# x is now [10, 88, 99, 40, 50]`*\n```", "```py\nx = [1, 2, 3, 4, 5]\n`del` x[1]                 *`# x is now [1, 3, 4, 5]`*\n`del` x[::2]               *`# x is now [3, 5]`*\n```", "```py\nmylist = ['alpha', 'Beta', 'GAMMA']\nmylist.sort()                  *`# ['Beta', 'GAMMA', 'alpha']`*\nmylist.sort(key=str.lower)     *`# ['alpha', 'Beta', 'GAMMA']`*\n```", "```py\n`while` S:\n    item = S.pop()\n *`# ...handle item...`*\n```", "```py\n`for` item `in` S:\n *`# ...handle item...`*\n```", "```py\nd = {'x':42, 'h':3.14, 'z':7}\nd['x']                         *`# 42`*\nd['z']                         *`# 7`*\nd['a']                         *`# raises KeyError exception`*\n```", "```py\nd = {'x':42, 'h':3.14}\nd['a'] = 16                    *`# d is now {'x':42, 'h':3.14, 'a':16}`*\n```", "```py\n`if` *`expression``:`*\n    *`statement``(``s``)`*\n`elif` *`expression``:`*\n    *`statement``(``s``)`*\n`elif` *`expression``:`*\n    *`statement``(``s``)`*\n...\n`else`:\n    *`statement``(``s``)`*\n```", "```py\n`if` x < 0:\n    print('x is negative')\n`elif` x % 2:\n    print('x is positive and odd')\n`else`:\n    print('x is even and nonnegative')\n```", "```py\n`if` *`x`*:\n```", "```py\nif *`x`* is True:\n`if` *`x`* == `True`:\n`if` bool(*`x`*):\n```", "```py\n`match` *`expression`*:\n    `case` *`pattern`* [`if` *`guard`*]:\n        *`statement``(``s``)`*\n    *`# ...`*\n```", "```py\n>>> `for` subject `in` (42, 42.0, 42.1, 1+1j, b'abc', 'abc'):\n... print(subject, end=': ')\n... `match` subject:\n...         `case` 42: print('integer')  *`# note this matches 42.0, too!`*\n...         `case` 42.1: print('float')\n...         `case` 1+1j: print('complex')\n...         `case` b'abc': print('bytestring')\n...         `case` 'abc': print('string')\n```", "```py\n42: integer\n42.0: integer\n42.1: float\n(1+1j): complex\nb'abc': bytestring\nabc: string\n```", "```py\n>>> `for` subject `in` 42, 'string', ('tu', 'ple'), ['list'], object:\n...     `match` subject:\n...         `case` `_`: print('matched', subject)\n...\n```", "```py\nmatched 42\nmatched string\nmatched ('tu', 'ple')\nmatched ['list']\nmatched <class 'object'>\n```", "```py\n>>> `for` subject `in` 42, 'string', ('tu', 'ple'), ['list'], object:\n...     `match` subject:\n...         `case` x: `assert` x == subject\n...\n```", "```py\n>>> `class` m: v1 = \"one\"; v2 = 2; v3 = 2.56\n`.``.``.`\n>>> `match` ('one', 2, 2.56):\n`.``.``.`     `case` (m.v1, m.v2, m.v3):  print('matched')\n`.``.``.`\n```", "```py\nmatched\n```", "```py\n>>> import sys\n>>> g = sys.modules[__name__]\n>>> v1 = \"one\"; v2 = 2; v3 = 2.56\n>>> match ('one', 2, 2.56):\n...     case (g.v1, g.v2, g.v3):  print('matched')\n...\n```", "```py\nmatched\n```", "```py\n>>> `for` subject `in` range(5):\n...     `match` subject:\n...         `case` 1 | 3: print('odd')\n...         `case` 0 | 2 | 4: print('even')\n...\n```", "```py\neven\nodd\neven\nodd\neven\n```", "```py\n>>> `for` sequence `in` ([\"one\", \"two\", \"three\"], range(2), range(6)):\n...     `match` sequence:\n...         `case`  (first, *vars, last): print(first, vars, last)\n...\n```", "```py\none ['two'] three\n0 [] 1\n0 [1, 2, 3, 4] 5\n```", "```py\n>>> `match` subject:\n...     `case` ((0 | 1) `as` x) | 2: print(x)\n...\n```", "```py\nSyntaxError: alternative patterns bind different names\n```", "```py\n>>> `match` subject:\n...     `case` (2 | x): print(x)\n...\n```", "```py\nSyntaxError: alternative patterns bind different names\n```", "```py\n>>> `match` 42:\n...     `case` (1 | 2 | 42) `as` x: print(x)\n...\n```", "```py\n42\n```", "```py\n>>> `match` {1: \"two\", \"two\": 1}:\n...     `case` {1: v1, \"two\": v2}: print(v1, v2)\n...\n```", "```py\ntwo 1\n```", "```py\n>>> `match` {1: \"two\", \"two\": 1}:\n...     `case` {1: v1} `as` v2: print(v1, v2)\n...\n```", "```py\ntwo {1: 'two', 'two': 1}\n```", "```py\n>>> `match` {1: 'one', 2: 'two', 3: 'three'}:\n...     `case` {2: middle, **others}: print(middle, others)\n...\n```", "```py\ntwo {1: 'one', 3: 'three'}\n```", "```py\n*name_or_attr*(*patterns*)\n```", "```py\n>>> `for` subject `in` 42, 42.0:\n...     `match` subject:\n...         `case` int(x): print('integer', x)\n...         `case` float(x): print('float', x)\n...\n```", "```py\ninteger 42\nfloat 42.0\n```", "```py\n>>> `for` subject `in` range(5):\n...     `match` subject:\n...         `case` int(i) `if` i % 2 == 0: print(i, \"`is` even\")\n...\n```", "```py\n0 is even\n2 is even\n4 is even\n```", "```py\n>>> `class` Color:\n...     __match_args__ = ('red', 'green', 'blue')\n...     `def` __init__(self, r, g, b, name='anonymous'):\n...         self.name = name\n...         self.red, self.green, self.blue = r, g, b\n...\n>>> color_red = Color(255, 0, 0, 'red')\n>>> color_blue = Color(0, 0, 255)\n>>> `for` subject `in` (42.0, color_red, color_blue):\n...     `match` subject:\n...         `case` float(x):\n...             print('float', x)\n...         `case` Color(red, green, blue, name='red'):\n...             print(type(subject).__name__, subject.name,\n...                   red, green, blue)\n...         `case` Color(red, green, 255) `as` color:\n...             print(type(subject).__name__, color.name,\n...                   red, green, color.blue)\n...         `case` _: print(type(subject), subject)\n...\n```", "```py\nfloat 42.0\nColor red 255 0 0\nColor anonymous 0 0 255\n```", "```py\n>>> `match` color_red:\n...     `case` Color(red, green, blue, name):\n...         print(\"matched\")\n...\n```", "```py\nTraceback (most recent call last):\n File \"<stdin>\", line 2, in <module>\nTypeError: Color() accepts 3 positional sub-patterns (4 given)\n```", "```py\nwhile *expression*:\n    *statement(s)*\n```", "```py\ncount = 0\n`while` x > 0:\n    x //= 2            *`# floor division`*\n    count += 1\nprint('The approximate log2 is', count)\n```", "```py\nfor *target* in *iterable*:\n    *statement*(*s*)\n```", "```py\n`for` letter `in` 'ciao':\n    print(f'give me a {letter}...')\n```", "```py\n`for` key, value `in` d.items():\n    `if` key `and` value:         *`# print only truthy keys and values`*\n        print(key, value)\n```", "```py\nprototype = [1, 'placeholder', 3]\n`for` prototype[1] `in` 'xyz':\n    print(prototype)\n*`# prints`* *`[1, 'x', 3]`**`,`* *`then`* *`[1, 'y', 3]`*, *`then`* *`[1, 'z', 3]`*\n```", "```py\n`for` x `in` someseq:\n    process(x)\n*`# potential NameError if someseq is empty`*\nprint(f'Last item processed was {x}')\n```", "```py\n`for` x `in` c:\n    *`statement``(``s``)`*\n```", "```py\n*`_temporary_iterator`* = iter(c)\n`while` `True`:\n    `try`:\n        x = next(*`_`**`temporary_iterator`*)\n `except` StopIteration`:`\n `break`\n    *`statement``(``s``)`*\n```", "```py\n>>> iterable = [1, 2]\n>>> `for` i `in` iterable:\n... `for` j `in` iterable:\n... print(i, j)\n...\n```", "```py\n1 1\n1 2\n2 1\n2 2\n```", "```py\n>>> iterator = iter([1, 2])\n>>> `for` i `in` iterator:\n... `for` j `in` iterator:\n... print(i, j)\n...\n```", "```py\n1 2\n```", "```py\n`for` i `in` range(*`n`*):\n    *`statement``(``s``)`*\n```", "```py\n[ *`expression`* `for` *`target`* `in` *`iterable` `lc``-``clauses`* ]\n```", "```py\n`for` *`target`* `in` *`iterable`*\n```", "```py\n`if` *`expression`*\n```", "```py\nresult = [x+1 `for` x `in` some_sequence]\n```", "```py\nresult = []\n`for` x `in` some_sequence:\n    result.append(x+1)\n```", "```py\n[fn(x) `for` x `in` seq]\n```", "```py\nresult = [x+1 `for` x `in` some_sequence `if` x>23]\n```", "```py\nresult = []\n`for` x `in` some_sequence:\n    `if` x>23:\n        result.append(x+1)\n```", "```py\nresult = [x `for` sublist `in` listoflists `for` x `in` sublist]\n```", "```py\nresult = []\n`for` sublist `in` listoflists:\n    `for` x `in` sublist:\n        result.append(x)I\n```", "```py\ns = {n//2 `for` n `in` range(10)}\nprint(sorted(s))  *`# prints: [0, 1, 2, 3, 4]`*\n```", "```py\nd = {s: i `for` (i, s) `in` enumerate(['zero', 'one', 'two'])}\nprint(d)          *`# prints: {'zero': 0, 'one': 1, 'two': 2}`*\n```", "```py\n`while` `True`:          *`# this loop can never terminate \"naturally\"`*\n    x = get_next()\n    y = preprocess(x)\n    `if` `not` keep_looping(x, y):\n        `break`\n    process(x, y)\n```", "```py\n`for` x `in` some_container:\n    `if` seems_ok(x):\n        lowbound, highbound = bounds_to_test()\n        `if` lowbound <= x < highbound:\n            pre_process(x)\n            `if` final_check(x):\n                do_processing(x)\n```", "```py\n`for` x `in` some_container:\n    `if` `not` seems_ok(x):\n        `continue`\n    lowbound, highbound = bounds_to_test()\n    `if` x < lowbound `or` x >= highbound:\n        `continue`\n    pre_process(x)\n    `if` final_check(x):\n        do_processing(x)\n```", "```py\n`for` x `in` some_container:\n    `if` is_ok(x):\n        `break`  *`# item x is satisfactory, terminate loop`*\n`else`:\n    print('Beware: no satisfactory item was found in container')\n    x = `None`\n```", "```py\n`if` condition1(x):\n    process1(x)\n`elif` x>23 `or` (x<5 `and` condition2(x)):\n    `pass`       *`# nothing to be done in this case`*\n`elif` condition3(x):\n    process3(x)\n`else`:\n    process_default(x)\n```", "```py\n`def` add_inverses(i_dict):\n    `for` f `in` list(i_dict):  *`# iterates over keys while mutating i_dict`* \n        i_dict[i_dict[f]] = f\nmath_map = {sin:asin, cos:acos, tan:atan, log:exp}\nadd_inverses(math_map)\n```", "```py\n`def` *`function_name`*(*`parameters`*):\n   *`statement``(``s``)`*\n```", "```py\n`def` twice(x):\n    `return` x*2\n```", "```py\nint(x, /, base=10)\n```", "```py\n`def` sample(population, k, *, counts=`None`):\n```", "```py\n`def` f(x, y=[]):\n    y.append(x)\n    `return` id(y), y\nprint(f(23))             *`# prints:`* *`(4302354376, [23])`*\nprint(f(42))             *`# prints:`* *`(4302354376, [23, 42])`*\n```", "```py\n`def` f(x, y=`None`):\n    `if` y `is` `None`:\n        y = []\n    y.append(x)\n    `return` id(y), y\nprint(f(23))             *`# prints:`* *`(4302354376, [23])`*\nprint(f(42))             *`# prints:`* *`(4302180040, [42])`*\n```", "```py\n`def` cached_compute(x, _cache={}):\n    `if` x `not` `in` _cache:\n        _cache[x] = costly_computation(x)\n    `return` _cache[x]\n```", "```py\n`def` sum_sequence(*numbers):\n    `return` sum(numbers)\nprint(sum_sequence(23, 42))        *`# prints: 65`*\n```", "```py\n`def` inc_dict(d, **values):\n    `for` key, value `in` values.items():\n `if` key `in` d:\n d[key] += value\n `else`:\n            d[key] = value\n\nmy_dict = {'one': 1, 'two': 2}\n\ninc_dict(my_dict, one=3, new=42)\nprint(my_dict)                *`# prints:`* *`{'one': 4, 'two': 2, 'new':42}`*\n```", "```py\n`def` sum_sequence(*numbers):\n    *`\"\"\"Return the sum of multiple numerical arguments.`*\n\n       *`The arguments are zero or more numbers.`*\n       *`The result is their sum.`*\n    *`\"\"\"`*\n    `return` sum(numbers)\n```", "```py\n`def` counter():\n    counter.count += 1\n    `return` counter.count\ncounter.count = 0\n```", "```py\n>>> `def` f(a:'foo', b)->'bar': `pass`\n...\n>>> f.__annotations__\n```", "```py\n{'a': 'foo', 'return': 'bar'}\n```", "```py\n*`function_object`*(*`arguments`*)\n```", "```py\n*`identifier`*=*`expression`*\n```", "```py\n`def` f(a, b, c=23, d=42, *x):\n    print(a, b, c, d, x)\nf(1,2,3,4,5,6)  *`# prints:`* *`1 2 3 4 (5, 6)`*\n```", "```py\n`def` f(a, b, *x, c=23, d=42):\n    print(a, b, x, c, d)\nf(1,2,3,4,5,6)  *`# prints:`* *`1 2 (3, 4, 5, 6) 23 42`*\n```", "```py\n`def` divide(divisor, dividend=94):\n    `return` dividend // divisor\nprint(divide(12))                          *`# prints:`* *`7`*\nprint(divide(12, 94))                      *`# prints:`* *`7`*\nprint(divide(dividend=94, divisor=12))     *`# prints:`* *`7`*\nprint(divide(divisor=12))                  *`# prints:`* *`7`*\n```", "```py\n`def` f(middle, begin='init', end='finis'):\n    `return` begin+middle+end\nprint(f('tini', end=''))                   *`# prints:`* *`inittini`*\n```", "```py\nprint(f('a','c','t'))                      *`# prints:`* *`cat`*\n```", "```py\n`def` sum_sequence(*numbers):\n    `return` sum(numbers)\n\nd = {'a': 1, 'b': 100, 'c': 1000}\nprint(sum_sequence(*d.values()))\n```", "```py\n`def` f(a, *, b, c=56):  *`# b and c are keyword only`*\n    `return` a, b, c\nf(12, b=34)  *`# Returns (12, 34, 56) c is optional, it has a default`*\nf(12)        *`# Raises a TypeError exception, since you didn't pass b`*\n*`# Error message is: missing 1 required keyword-only argument: 'b'`*\n```", "```py\n`def` g(x, *a, b=23, **k):  *`# b is keyword only`*\n    `return` x, a, b, k\ng(1, 2, 3, c=99)          *`# Returns (1, (2, 3), 23, {'c': 99})`*\n```", "```py\n`def` f(x, y):\n    x = 23\n    y.append(42)\na = 77\nb = [99]\nf(a, b)\nprint(a, b)             *`# prints: 77`* *`[99, 42]`*\n```", "```py\n`global` *`identifiers`*\n```", "```py\n_count = 0\n`def` counter():\n    `global` _count\n    _count += 1\n    `return` _count\n```", "```py\n`def` percent1(a, b, c):\n    `def` pc(x, total=a+b+c):\n        `return` (x*100.0) / total\n    print('Percentages are:', pc(a), pc(b), pc(c))\n```", "```py\n`def` percent2(a, b, c):\n    `def` pc(x):\n        `return` (x*100.0) / (a+b+c)\n    print('Percentages are:', pc(a), pc(b), pc(c))\n```", "```py\n`def` make_adder(augend):\n    `def` add(addend):\n        `return` addend+augend\n    `return` add\nadd5 = make_adder(5)\nadd9 = make_adder(9)\n\nprint(add5(100))   *`# prints: 105`*\nprint(add9(100))   *`# prints: 109`*\n```", "```py\n`def` make_counter():\n    count = 0\n    `def` counter():\n        `nonlocal` count\n        count += 1\n        `return` count\n    `return` counter\n\nc1 = make_counter()\nc2 = make_counter()\nprint(c1(), c1(), c1())     *`# prints:`* *`1 2 3`*\nprint(c2(), c2())           *`# prints:`* *`1 2`*\nprint(c1(), c2(), c1())     *`# prints:`* *`4 3 5`*\n```", "```py\n`lambda` *`parameters`*: *`expression`*\n```", "```py\na_list = [-2, -1, 0, 1, 2]\nsorted(a_list, key=`lambda` x: x * x)  *`# returns: [0, -1, 1, -2, 2]`*\n```", "```py\na_list = [-2, -1, 0, 1, 2]\n`def` square(value):\n    `return` value * value\nsorted(a_list, key=square)           *`# returns: [0, -1, 1, -2, 2]`*\n```", "```py\n`yield` *`expression`*\n```", "```py\n`for` *`avariable`* `in` *`somegenerator`*(*`arguments`*):\n```", "```py\n`def` updown(N):\n    `for` x `in` range(1, N):\n        `yield` x\n    `for` x `in` range(N, 0, -1):\n        `yield` x\n`for` i `in` updown(3):\n    print(i)              *`# prints:`* *`1 2 3 2 1`*\n```", "```py\n`def` frange(start, stop, stride=1.0):\n    start = float(start)  *`# force all yielded values to be floats`*\n    `while` start < stop:\n        `yield` start\n        start += stride\n```", "```py\n*`resulting_list`* = list(*`g`*(*`arguments`*))\n```", "```py\n`def` updown(N):\n    `yield from` range(1, N)\n    `yield from` range(N, 0, -1)\n`for` i `in` updown(3):\n    print(i)              *`# prints: 1 2 3 2 1`*\n```", "```py\n`def` rec(t):\n    `yield` t[0]\n    `for` i `in` (1, 2):\n        `if` t[i] `is` `not` `None``:`\n `yield from` rec(t[i])\n```", "```py\n`def` norec(t):\n    stack = [t]\n    `while` stack:\n        t = stack.pop()\n        `yield` t[0]\n        `for` i `in` (2, 1):\n            `if` t[i] `is` `not` `None`:\n                stack.append(t[i])\n```"]