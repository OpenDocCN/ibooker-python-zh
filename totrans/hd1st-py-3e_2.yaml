- en: 'Chapter 2\. Diving in: *Let’s Make a Splash*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-1-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The best way to learn a new language is to write some code.** And if you’re
    going to write some code, you’ll need a **real** problem. As luck would have it,
    we have one of those. In this chapter, you’ll start your Python application development
    journey by making a splash with our friendly, neighborhood, **Swim Coach**. You’ll
    begin with Python **strings**, learning how to **manipulate** them to your heart’s
    desire, all the while working your way towards producing a Python-based solution
    to the Coach’s problem. You’ll also see more of Python’s built-in **list** data
    structure, learn how **variables** work, as well as discover how to read Python’s
    **error messages** without going off the deep-end, all while solving a *real*
    problem with *real* Python code. Let’s dive in (head first)...'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-2-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**This sounds interesting.**'
  prefs: []
  type: TYPE_NORMAL
- en: Your subsequent chat with the Coach starts to tease out some of the details...
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to monitoring the progress of his young swimmers, the Coach does
    everything *manually*. During a training session, he records each swimmer’s training
    times on his trusty clipboard then, later at home, *manually* types each swimmer’s
    times into his favorite spreadsheet program in order to perform a simple performance
    analysis.
  prefs: []
  type: TYPE_NORMAL
- en: For now, this analysis is straightforward. The times for the session are averaged,
    and a simple bar chart allows for a quick visual check of the swimmer’s performance.
    The Coach readily admits to being a computer neophyte, stating that he’s much
    better at Coaching young swimmers than “mucking about with spreadsheets”.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-2-02.png)'
  prefs: []
  type: TYPE_IMG
- en: How do things work right now?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the moment, the Coach can’t expand his swim club membership, as his administrative
    overhead is too burdensome.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get a feel for why this is, take a look at one of the Coach’s spreadsheets
    for *Darius*, who is currently 12 years old, so swims in the Under 13 age group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-3-01.png)'
  prefs: []
  type: TYPE_IMG
- en: On the face of things, this doesn’t look all that bad. Until, that is, you consider
    the Coach has over *sixty* such spreadsheets to create after *each* training session.
  prefs: []
  type: TYPE_NORMAL
- en: There are only twenty-two swimmers enrolled in the club, but as each can swim
    different distance/stroke combinations, twenty-two swimmers turns into sixty-plus
    spreadsheets very easily. That’s a lot of manual spreadsheet work.
  prefs: []
  type: TYPE_NORMAL
- en: As you can imagine, this whole process is *painfully* slow...
  prefs: []
  type: TYPE_NORMAL
- en: Fortune decides to smile on you
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A quick search of the world’s largest online shopping site uncovers a new device
    described as an *internet-connected digital smart stopwatch*. As product names
    go, that’s a bit of a mouthful, but the smart stopwatch let’s the Coach record
    swim times for an identified swimmer, which are then transferred to the cloud
    as a CSV file (with a `.txt` extension). As an example of one of these files,
    here’s the contents of the file which contains matching data to the spreadsheet
    page you saw for Darius a few pages back:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-4-01.png)![Image](assets/ch01-4-02.png)![Image](assets/ch01-5-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The previous page’s data looks promising.**'
  prefs: []
  type: TYPE_NORMAL
- en: If you can work out how to process one file, you can then repeat for any number
    of similarly formatted files.
  prefs: []
  type: TYPE_NORMAL
- en: '**The big question is:** ***Where do you start?***'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-6-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Cubicle Conversation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Mara:** OK, folks, let’s offer some suggestions on how best to process this
    data file.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sam:** I guess there are two parts to this, right?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex:** How so?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sam:** Well, firstly, I think there’s some useful data embedded in the filename,
    so that needs to be processed. And, secondly, there’s the timing data in the file
    itself, which needs to be extracted, converted, and processed, too.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mara:** What do you mean by “converted”?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex:** That was my question, too.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sam:** I checked with the Coach, and “1:27.95” represents one minute, 27
    seconds, and 95 one-hundredths of a second. That needs to be taken into consideration
    when working with these values, especially when calculating averages. So, some
    sort of value conversion is needed here. Remember, too, that the data in the file
    is *textual.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex:** I’ll add “conversion” to the to-do list.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mara:** And I guess the filename needs to be somehow broken apart to get
    at the swimmer’s details?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sam:** Yes. The “Darius-13-100m-Fly” prefix can be broken apart on the “-”
    character, giving us the swimmer’s name (Darius), their age group (under 13),
    the distance swam (100m), and the stroke (Fly).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex:** That’s assuming we can read the filename?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sam:** Isn’t that a given?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mara:** Not really, so we’ll still have to code for it, although I’m pretty
    sure the PSL can help here.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex:** This is getting a little complex…'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sam:** Not if we take things bit-by-bit.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mara:** We just need a plan of action.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex:** If we’re going to do all this work in Python, we’ll also have a bit
    more learning to do.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sam:** I can recommend a great book… ![Image](assets/smile.png)'
  prefs: []
  type: TYPE_NORMAL
- en: The file and the spreadsheet are “related”
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we dive into Task #1, take a moment to review how the data embedded
    in the file’s name, together with the file’s data, relates to the Coach’s spreadsheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-9-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our first task: Extract the filename’s data'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For now, the plan is to concentrate on one file, specifically the file which
    contains the data for the 100m Fly times for Darius, who is swimming in the under
    13 age group.
  prefs: []
  type: TYPE_NORMAL
- en: Recall the file containing the data you need is called `Darius-13-100m-Fly.txt.`
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a Jupyter Notebook using VS Code called `Darius.ipynb`, which
    you can create in your **Learning** folder. Follow along in your notebook as,
    together, we work through Task #1.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember: To create a new notebook in VS Code, select **File** then **New File...**
    from the main menu, then select the **Notebook option.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-10-01.png)'
  prefs: []
  type: TYPE_IMG
- en: A string is not really a string…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The value to the right of the assignment operator (=) in the above line of code
    certainly *looks* like a string. After all, it’s a sequence of characters enclosed
    within quotes which, in most other programming languages, is the very *definition*
    of a string. This is not the case in Python.
  prefs: []
  type: TYPE_NORMAL
- en: In Python, the value to the right of assignment operator is a **string object**,
    which isn’t really that far off what a string is. However, the difference is important,
    as objects in Python are not just data values.
  prefs: []
  type: TYPE_NORMAL
- en: To see what we’re on about here, you’ll need to resort to the combo mambo.
  prefs: []
  type: TYPE_NORMAL
- en: '**In Python, everything is an object.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-10-02.png)'
  prefs: []
  type: TYPE_IMG
- en: A string is an object with attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You already know how to list any object’s attributes: use the **print dir**
    combo mambo.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-11-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Take a moment to appreciate what you’re looking at here
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are looking at that long list of attributes and thinking there’s an
    awful lot to learn here, consider this instead: there’s an awful lot of functionality
    built into strings that you *don’t* have to write code for.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-12-01.png)![Image](assets/ch01-13-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**No problem. Great question, by the way.**'
  prefs: []
  type: TYPE_NORMAL
- en: This is Python’s **dot** operator, which allows you to invoke a method on an
    object. This means `fn.upper()` calls the **upper** method on the string referenced
    by the `fn` variable.
  prefs: []
  type: TYPE_NORMAL
- en: This is a little different from the BIFs which are invoked like functions. For
    instance, `len(fn)` returns the size of the object referred to by the `fn` variable.
  prefs: []
  type: TYPE_NORMAL
- en: It’s an error to invoke `fn.len()` (as there’s no such method), just as it’s
    an error to try `upper(fn)` (as there’s no such BIF).
  prefs: []
  type: TYPE_NORMAL
- en: 'Think of things this way: The methods are object-specific, whereas the BIFs
    provide *generic* functionality which can be applied to objects of *any* type.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-15-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Yes, that’s right.**'
  prefs: []
  type: TYPE_NORMAL
- en: The values returned by the **upper** and **lower** methods are both *new* string
    objects, which have their own a value-part and a methods-part. Although created
    from the data referred to by the `fn` variable, the new strings are *copies* of
    the string `fn` refers to.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is all by design: Python is supposed to work this way.'
  prefs: []
  type: TYPE_NORMAL
- en: Extract the swimmer’s data from the filename
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Recall the three sub-tasks identified earlier for Task #1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-16-01.png)'
  prefs: []
  type: TYPE_IMG
- en: As you’ve already got the filename in the `fn` variable, let’s take it as given
    that sub-task (a) is done for now.
  prefs: []
  type: TYPE_NORMAL
- en: Breaking the filename apart by the “`-`” character is sub-task (b), and you’d
    be right to guess one of the string methods might help. But, which one? There’s
    47 of them!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**This is a big list of string methods. Whereas it’s easy to guess what “upper”
    and “lower” do, it’s not so clear what some of the others do, such as “casefold”,
    “format_map”, or “zfill”. What you’re looking for is a method to help with sub-task
    (b).**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-16-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Sounds interesting.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see what the **split** method does to strings. You have a choice: You
    can run **split** and see what happens, or you can read **split**’s documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t try to guess what a method does...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read the method’s documentation!
  prefs: []
  type: TYPE_NORMAL
- en: Now, granted, most programmers would rather eat glass than look-up and read
    documentation, claiming life is too short especially when there’s code to be written.
    Typically, the big annoyance with this activity is the looking-up part. So, Python
    makes finding and displaying relevant documentation easy thanks to the **help**
    BIF.
  prefs: []
  type: TYPE_NORMAL
- en: Regrettably, Python can’t read the documentation for you, so you’ll still have
    to do that bit yourself. But the **help** BIF let’s you avoid the context-shift
    of leaving VS Code, opening up your web browser, then searching for the docs.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view the documentation for any method use the **help** BIF, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-17-01.png)![Image](assets/ch01-17-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Based on a quick read of this documentation, it sounds like the **split** method
    is what you need here. Let’s take it for a quick spin.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-18-04.png)'
  prefs: []
  type: TYPE_IMG
- en: '**You did read the “split” method’s documentation, didn’t you? The answer’s
    right there...**'
  prefs: []
  type: TYPE_NORMAL
- en: The split method returns a list of words...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this context, you can think of a “word” as being a synonym for “string object”.
  prefs: []
  type: TYPE_NORMAL
- en: Lists in Python are data *enclosed* in **square brackets**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s review what just happened with the two calls to **split** shown in your
    most-recent *Test Drive*. We just can resist suggesting that doing so is as easy
    as 1-2-3:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-19-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Is it time for another checkmark?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s tempting to look at your list of sub-tasks, grab your pen, then put a satisfying
    checkmark beside sub-task (b), isn’t it?
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-20-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'But doing so would be *premature*. Take a closer look at the list produced
    by your call to the **split** method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-20-02.png)![Image](assets/ch01-20-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Emmm, maybe...**'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s spend a moment or two with **split** to ensure you understand how it works
    its magic.
  prefs: []
  type: TYPE_NORMAL
- en: Read error message from the bottom-up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last example in your most-recent *Exercise* produced a run-time error message
    which likely has you scratching your head:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-24-01.png)![Image](assets/ch01-24-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Err... Okay.**'
  prefs: []
  type: TYPE_NORMAL
- en: Whatever wets your whistle.
  prefs: []
  type: TYPE_NORMAL
- en: Just remember to always read Python’s error messages from the *bottom-up*, and
    you’ll be fine (magic potions, notwithstanding). Also, note that Python refers
    to its error messages by the name **traceback**.
  prefs: []
  type: TYPE_NORMAL
- en: Now... just what is this particular traceback trying to tell you?
  prefs: []
  type: TYPE_NORMAL
- en: Be careful when chaining method calls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The idea behind that last example is solid: specify a *chain* of calls to **split**
    to break the string object on “`-`” then again on “`.`'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-25-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Of course, this line of code failed, which is a bummer because the idea was
    sound, in that you want to split your string *twice* in an attempt to break the
    strings “`Fly`” and “`txt`” apart. But, look at the error message you’re getting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-25-02.png)![Image](assets/ch01-25-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Yes, that’s exactly what’s happening.**'
  prefs: []
  type: TYPE_NORMAL
- en: The first **split** works fine, breaking the string object using “`-`”, producing
    a list. This list is then passed onto the next method in the chain which is *also*
    **split**. The trouble is lists do *not* have a **split** method, so trying to
    invoke **split** on a list makes no sense, resulting in Python throwing it’s hands
    up in the air with an `**AttributeError**`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know this, how do you fix it?
  prefs: []
  type: TYPE_NORMAL
- en: Fixing broken chains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s see what the *Head First Coders* think your options are.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-26-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Cubicle Conversation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Alex**: I think we should pause development while we learn all about lists...'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sam**: Well, lists are important in Python, but I’m not so sure this is a
    list issue, despite what that traceback is telling us.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mara**: I agree. We’re trying to manipulate the `fn` *string*, not a list.
    The fact the traceback references a list is a little confusing, and it’s happening
    because **split** always returns a list.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex**: And we can’t call **split** on a list, right?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sam**: No, you can’t, due to the fact that lists don’t include a built-in
    **split** method, whereas strings so. That’s what the traceback is telling you:
    there’s no such thing as a list **split** method.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex**: So, we’re out of luck?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mara**: No, we just need to rethink things a little...'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sam**: Remember: `fn` is a string. So start by asking yourself if there’s
    anything else built into strings which might help.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex**: How do I do that again?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sam**: With your old friend, the **print dir** combo mambo.'
  prefs: []
  type: TYPE_NORMAL
- en: Strings can do more than just split
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As Python has trained us to always read from the bottom-up, the first method
    to catch our eye is **rstrip**. Use the **help** BIF to learn a bit about **rstrip**
    right from within your VS Code notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-27-01.png)![Image](assets/ch01-27-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s try another string method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Undaunted, let’s return to the list of string methods to continue your search:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-28-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As with the **rstrip** method, ask the **help** BIF for details on what **removesuffix**
    does:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-28-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Let’s take this method for a spin in your notebook.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-29-04.png)'
  prefs: []
  type: TYPE_IMG
- en: All that remains is to create some variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There’s one last sub-task to complete, namely part (c):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-31-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Your last line of code produced a list with the four values you need, but how
    do you assign each of these four values to individual variables?
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-31-02.png)![Image](assets/ch01-31-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Indeed they do.**'
  prefs: []
  type: TYPE_NORMAL
- en: When working with lists, it is possible to use the familiar square bracket notation.
    And, as in most other programming languages, Python starts counting from zero,
    so `[0]` refers to the first element in the list, `[1]` the second, `[2]` the
    third, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s put this new-found list knowledge to immediate use.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Don’t forget to follow along!**'
  prefs: []
  type: TYPE_NORMAL
- en: 'It looks like Task #1 is complete. But is it?'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s remind ourselves of the sub-tasks for Task #1, which was to extract the
    data you need from the file’s name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-33-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Considering the code from your last *Test Drive*, you’re likely done with Task
    #1.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Having used VS Code and Jupyter to work out the code you need, it’s a simple
    task to copy’n’paste the code for Task #1 into a new cell. And the amount of code
    you need to copy isn’t overwhelming, is it?'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-33-02.png)'
  prefs: []
  type: TYPE_IMG
- en: We were all set to begin celebrating getting to this point, but it looks like
    someone has a question...
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-34-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The** `**parts**` **variable feels kind of integral.**'
  prefs: []
  type: TYPE_NORMAL
- en: That said, it’s a valid question, in that `parts` is created to *temporarily*
    hold the list of data items, which is then combined with the square bracket notation
    to extract the individual data items. Once that’s done, the `parts` list is no
    longer needed.
  prefs: []
  type: TYPE_NORMAL
- en: So, can you do without `parts`?
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**And if the “parts” variable is not needed, does this mean it’s spare?!? (Sorry).**'
  prefs: []
  type: TYPE_NORMAL
- en: Can you do without the parts list?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Short answer: yes.'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, getting to the point where you understand the short answer is a bit
    more involved. But, don’t worry, it’ll all make sense in a bit.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing to remember is that the **split** method at the end of the
    chain of calls on the `fn` variable produces a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-35-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The list is then assigned to the `parts` variable name, allowing you to use
    the square bracket notation to access the data you need:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-35-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The **split** method always produces a list, so you could do what’s shown below
    to achieve the same thing as what’s shown above, removing the `parts` variable
    from the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-35-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Although the** `**parts**` **variable is no more, can you think of a reason
    why this version of your code may not be optimal?**'
  prefs: []
  type: TYPE_NORMAL
- en: We can think of three reasons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The latest code *does* work, but at a cost.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/1-circle.png) **The latest code is slow**'
  prefs: []
  type: TYPE_NORMAL
- en: The original code generated the list *once*, assigned it to the parts list,
    then used the list as needed. This is efficient. The latest code generates the
    list *four times*, which is hugely inefficient.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/2-circle.png) **The latest code is harder to read**'
  prefs: []
  type: TYPE_NORMAL
- en: It’s clear what the original code is doing, but the same can’t be said for the
    latest code, which – despite being a clever bit of Python – does require a bit
    of mental gymnastics to work out what’s going on. The code looks (and is) more
    complex as a result.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/3-circle.png) **The latest code is a maintenance nightmare**'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re asked to change the suffix from `".txt"` to say, `".py"`, it’s an
    easy change when working with the original code (as it’s a single edit). With
    the latest code, you have to apply the edit four times (multiple edits) which
    can be fraught with danger.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-36-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Let’s not be too hasty.**'
  prefs: []
  type: TYPE_NORMAL
- en: Yes, the latest code is more trouble than it’s worth, but the idea of removing
    the `parts` variable from your code still has merit, as it’s of no use once the
    assignment to `swimmer`, `age`, `distance`, and `stroke` have occurred.
  prefs: []
  type: TYPE_NORMAL
- en: There may be another way to do this...
  prefs: []
  type: TYPE_NORMAL
- en: Multiple assignment (aka unpacking)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although the concept is not unique to Python, the notion of *multiple assignment*
    is a powerful feature of the language. Also know as **unpacking** within the Python
    world, this feature lets you assign to more than one variable on the left of the
    assignment operator with a matching number of data values to the right of the
    assignment operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s some example code which demonstrates how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-37-01.png)![Image](assets/ch01-37-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note the following: You can match *any number* of variable names against values
    (as long as the number of each on both sides of the assignment operator match).
    Python treats the data values on the right as if they are a list, but does not
    require you to enclose the list within square brackets.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-38-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Yes, that’s what this means.**'
  prefs: []
  type: TYPE_NORMAL
- en: Python programmers describe the list as being “unpacked” prior to the assignment,
    which is their way of saying the list’s data values are taken one-by-one and assigned
    to the variable names one-by-one.
  prefs: []
  type: TYPE_NORMAL
- en: The single list is *unpacked* and its values are *assigned* to *multiple* variable
    names, one at a time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Task #1 is done!'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Recall the list of sub-tasks once more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-41-01.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s a pretty powerful line of code. We’ve told the Coach that work is progressing.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-41-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Yes, they are. We are on our way!**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, we’ve neglected to tell the Coach that there’s still a bit of work
    to do. Let’s remind everyone what Task #2 entails (shown on the next page).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Task #2: Process the data in the file'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At first glance, it looks like there’s a bit of work here. But, don’t fret:
    we’ll work though all of these sub-tasks *together* in the next chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Read the lines from the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ignore the second line
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Break the first line apart by “,” to produce a list of times
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take each of the times and convert them to a number from the “mins:secs.hundredths”
    format
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate the average time, then convert it back to the “mins:secs.hundredths”
    format (for display purposes)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Display the variables from Task #1, then the list of times and the calculated
    average from Task #2'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’ve just enough time to do a few things before diving into your third chapter.
    Go make yourself a cup of your favorite brew, grab a piece of pie, read through
    the chapter summary, then work through this chapter’s crossword *at your leisure*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-42-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The String Crossword
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-43-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '*All of the answers to the clues are found in this chapter’s pages, and the
    solution is on the next page. Have fun!*'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-43-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Across**'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Comes in handy when breaking apart strings.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Another name for multiple assignment.
  prefs: []
  type: TYPE_NORMAL
- en: 11\. To be a variable, it has to have one of these.
  prefs: []
  type: TYPE_NORMAL
- en: 12\. Everything is one of these.
  prefs: []
  type: TYPE_NORMAL
- en: 13\. Can be used to get rid of a filename’s extension.
  prefs: []
  type: TYPE_NORMAL
- en: '**Down**'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Removes a set of characters from the end of a string.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Like an array in other languages.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. More than one.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. The swim coach mucks about with one of these.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Ball and ________.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Short for “double underscore”.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Our favorite brackets.
  prefs: []
  type: TYPE_NORMAL
- en: 10\. The plural name given to an object’s built-in functions.
  prefs: []
  type: TYPE_NORMAL
- en: The String Crossword Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Image](assets/ch01-44-01.png)![Image](assets/ch01-44-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Across**'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Comes in handy when breaking apart strings.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Another name for multiple assignment.
  prefs: []
  type: TYPE_NORMAL
- en: 11\. To be a variable, it has to have one of these.
  prefs: []
  type: TYPE_NORMAL
- en: 12\. Everything is one of these.
  prefs: []
  type: TYPE_NORMAL
- en: 13\. Can be used to get rid of a filename’s extension.
  prefs: []
  type: TYPE_NORMAL
- en: '**Down**'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Removes a set of characters from the end of a string.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Like an array in other languages.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. More than one.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. The swim coach mucks about with one of these.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Ball and ________.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Short for “double underscore”.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Our favorite brackets.
  prefs: []
  type: TYPE_NORMAL
- en: 10\. The plural name given to an object’s built-in functions.
  prefs: []
  type: TYPE_NORMAL
