- en: Chapter 16\. Forms and Templates
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 16 章\. 表单和模板
- en: Preview
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预览
- en: Although the *API* in *FastAPI* is a hint of its main focus, FastAPI can also
    handle traditional web content. This chapter talks about standard HTML forms and
    templates for inserting data into HTML.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 *FastAPI* 中的 *API* 暗示了其主要关注点，FastAPI 也能处理传统的 Web 内容。本章讨论了用于将数据插入 HTML 的标准
    HTML 表单和模板。
- en: Forms
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单
- en: As you’ve seen, FastAPI was mainly designed to build APIs, and its default input
    is JSON. But that doesn’t mean that it can’t serve standard banana HTML, forms,
    and friends.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，FastAPI 主要设计用于构建 API，并且其默认输入是 JSON。但这并不意味着它不能提供标准的香蕉 HTML、表单和朋友们。
- en: FastAPI supports data from HTML forms much as it does from other sources like
    `Query` and `Path`, using the `Form` dependency.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 支持来自 HTML 表单的数据，就像支持来自 `Query` 和 `Path` 的数据一样，使用 `Form` 依赖项。
- en: You’ll need the package Python-Multipart for any FastAPI forms work, so run
    `pip install python-multipart` if you need to. Also, the *static* directory from
    [Chapter 15](ch15.html#ch15) will be needed to house the test forms in this chapter.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要安装 Python-Multipart 包来处理任何 FastAPI 表单工作，所以如果需要的话，请运行 `pip install python-multipart`。此外，[第
    15 章](ch15.html#ch15) 中的 *static* 目录将用于存放本章中的测试表单。
- en: Let’s redo [Example 3-11](ch03.html#ex-3-11), but provide the `who` value via
    a form instead of a JSON string. (Call this path function `greet2()` to avoid
    clobbering the old `greet()` path function if it’s still around.) Add [Example 16-1](#ex-16-1)
    to *main.py*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新做 [示例 3-11](ch03.html#ex-3-11)，但是通过表单而不是 JSON 字符串提供 `who` 的值。（如果旧的 `greet()`
    路径函数仍然存在，请将其命名为 `greet2()`。）将 [示例 16-1](#ex-16-1) 添加到 *main.py*。
- en: Example 16-1\. Get a value from a `GET` form
  id: totrans-8
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 16-1\. 从 `GET` 表单获取值
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The main difference is that the value comes from `Form` instead of `Path`, `Query`,
    and the others from [Chapter 3](ch03.html#ch03).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的区别在于值来自 `Form` 而不是来自 [第 3 章](ch03.html#ch03) 的 `Path`、`Query` 和其他内容。
- en: Try an initial form test with HTTPie in [Example 16-2](#ex-16-2) (you need that
    `-f` to upload with form encoding rather than as JSON).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [示例 16-2](#ex-16-2) 中，使用 HTTPie 尝试一个初始的表单测试（你需要 `-f` 来使用表单编码而不是 JSON）。
- en: Example 16-2\. Form `GET` request with HTTPie
  id: totrans-12
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 16-2\. 使用 HTTPie 进行的表单 `GET` 请求
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You could also send a request from a standard HTML form file. [Chapter 15](ch15.html#ch15)
    showed how to make a directory called *static* (accessed under the URL */static*)
    that could house anything, including HTML files, so in [Example 16-3](#ex-16-3),
    let’s put this file (*form1.html*) there.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以从标准的 HTML 表单文件发送请求。[第 15 章](ch15.html#ch15) 展示了如何创建一个名为 *static* 的目录（在 URL
    */static* 下访问），可以存放任何内容，包括 HTML 文件，所以在 [示例 16-3](#ex-16-3) 中，我们把这个文件（*form1.html*）放在那里。
- en: Example 16-3\. Form `GET` request (static/form1.html)
  id: totrans-15
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 16-3\. 表单 `GET` 请求（static/form1.html）
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you ask your browser to load *http://localhost:8000/static/form1.html*,
    you’ll see a form. If you fill in any test string, you’ll get this back:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你请求浏览器加载 *http://localhost:8000/static/form1.html*，你将会看到一个表单。如果你填入任何测试字符串，你会得到以下结果：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Huh?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯？
- en: 'Look at the window where Uvicorn is running to see what its log says:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 Uvicorn 运行时窗口中的日志信息：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Why did this form send `name` as a query parameter when we had it in a form
    field? That turns out to be an HTML weirdness, documented on the [W3C website](https://oreil.ly/e6CJb).
    Also, if you had any query parameters in your URL, it will erase them and replace
    them with `name`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在表单字段中有 `name` 时，为什么这个表单发送了 `name` 作为查询参数？这是一个 HTML 的怪事，记录在 [W3C 网站](https://oreil.ly/e6CJb)
    上。此外，如果你的 URL 中有任何查询参数，它将擦除它们并替换为 `name`。
- en: So, why did HTTPie handle it as expected? I don’t know. It’s an inconsistency
    to be aware of.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么 HTTPie 能够如预期地处理它？我不知道。这是一个需要注意的不一致性。
- en: The official HTML incantation is to change the action from a `GET` to a `POST`.
    So let’s add a `POST` endpoint for */who2* to *main.py* in [Example 16-4](#ex-16-4).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的 HTML 咒语是将动作从 `GET` 改为 `POST`。因此，让我们在 [示例 16-4](#ex-16-4) 中为 */who2* 添加一个
    `POST` 端点到 *main.py* 中。
- en: Example 16-4\. Get a value from a `POST` form
  id: totrans-25
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 16-4\. 从 `POST` 表单获取值
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[Example 16-5](#ex-16-5) is *stuff/form2.html*, with `get` changed to `post`.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 16-5](#ex-16-5) 是 *stuff/form2.html*，将 `get` 更改为 `post`。'
- en: Example 16-5\. Form `POST` request (static/form2.html)
  id: totrans-28
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 16-5\. 表单 `POST` 请求（static/form2.html）
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Ask your browser to get off its digital haunches and get this new form for
    you. Fill in `**Bob Frapples**` and submit the form. This time, you’ll get the
    result that you got from HTTPie:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请求你的浏览器摆脱数字后腿，并为你获取这个新的表单。填写 `**Bob Frapples**` 并提交表单。这一次，你将会得到从 HTTPie 得到的结果：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: So, if you’re submitting forms from HTML files, use `POST`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你从 HTML 文件提交表单，请使用 `POST`。
- en: Templates
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板
- en: You may have seen the word game *Mad Libs*. You ask people to provide a sequence
    of words—nouns, verbs, or something more specific—and you enter them into labeled
    places in a page of text. Once you have all the words, you read the text with
    the inserted values, and hilarity ensues, sometimes with embarrassment.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能见过词语游戏 *Mad Libs*。你要求人们提供一系列词语 — 名词、动词或更具体的东西 — 然后将它们输入到文本页面的标记位置。一旦你有了所有的词语，你就可以读取插入值的文本，然后就会发生欢乐，有时还会出现尴尬。
- en: Well, a web *template* is similar, though usually without the embarrassment.
    A template contains a bunch of text with slots for data to be inserted by the
    server. Its usual purpose is to generate HTML with variable content, unlike the
    *static* HTML of [Chapter 15](ch15.html#ch15).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，一个 Web *模板* 类似，尽管通常不会尴尬。模板包含一堆文本，其中有服务器插入数据的位置。它通常的目的是生成包含可变内容的 HTML，与 [Chapter 15](ch15.html#ch15)
    的 *静态* HTML 不同。
- en: Users of Flask are very familiar with its companion project, the template engine
    [Jinja](https://jinja.palletsprojects.com) (also often called *Jinja2*). FastAPI
    supports Jinja, as well as other template engines.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 的用户对其伴随项目，模板引擎 [Jinja](https://jinja.palletsprojects.com)（也经常称为 *Jinja2*）非常熟悉。FastAPI
    支持 Jinja，以及其他模板引擎。
- en: Make a directory called *template* alongside *main.py* to house Jinja-enhanced
    HTML files. Inside, make a file called *list.html*, as in [Example 16-6](#ex-16-6).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *main.py* 旁边创建一个名为 *template* 的目录，用于存放增强了 Jinja 的 HTML 文件。在其中创建一个名为 *list.html*
    的文件，就像 [Example 16-6](#ex-16-6) 中的那样。
- en: Example 16-6\. Define a template file (template/list.html)
  id: totrans-38
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 16-6\. 定义一个模板文件（template/list.html）
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: I don’t care how it looks, so there’s no CSS, just the ancient pre-CSS `bgcolor`
    table attribute to distinguish the two tables.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我不关心它的外观，所以没有 CSS，只有古老的不使用 CSS 的 `bgcolor` 表格属性来区分两个表格。
- en: Double curly braces enclose Python variables that should be inserted, and `{%`
    and `%}` enclose `if` statements, `for` loops, and other controls. See the Jinja
    [documentation](https://jinja.palletsprojects.com) for the syntax and examples.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 双大括号包含应插入的 Python 变量，而 `{%` 和 `%}` 则包含 `if` 语句、`for` 循环和其他控制语句。请参阅 Jinja 的 [documentation](https://jinja.palletsprojects.com)
    以获取语法和示例。
- en: This template expects to be passed Python variables called `creatures` and `explorers`,
    which are lists of `Creature` and `Explorer` objects.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模板期望传递名为 `creatures` 和 `explorers` 的 Python 变量，它们是 `Creature` 和 `Explorer`
    对象的列表。
- en: '[Example 16-7](#ex-16-7) shows what to add to *main.py* to set up templates
    and use the one from [Example 16-6](#ex-16-6). It feeds `creatures` and `explorers`
    to the template, using modules under the *fake* directory from previous chapters,
    which provided test data if the database was empty or not connected.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[Example 16-7](#ex-16-7) 显示了要添加到 *main.py* 中设置模板并使用 [Example 16-6](#ex-16-6)
    中的模板的内容。它将 `creatures` 和 `explorers` 提供给模板，使用前几章提供的 *fake* 目录下的模块，如果数据库为空或未连接，则提供测试数据。'
- en: Example 16-7\. Configure templates and use one (main.py)
  id: totrans-44
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 16-7\. 配置模板并使用一个（main.py）
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Ask your favorite browser, or even one that you don’t like very well, for *http://localhost:8000/list*,
    and you should get [Figure 16-1](#fig-output-from-list) back.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请求你喜欢的浏览器，甚至是你不太喜欢的浏览器，访问 *http://localhost:8000/list*，你应该会得到 [Figure 16-1](#fig-output-from-list)
    返回。
- en: '![fapi 1601](assets/fapi_1601.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![fapi 1601](assets/fapi_1601.png)'
- en: Figure 16-1\. Output from /list
  id: totrans-48
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 16-1\. /list 的输出
- en: Review
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习
- en: This chapter was a quick overview of how FastAPI handles non-API topics like
    forms and templates. Along with the previous chapter on files, these are traditional
    bread-and-butter web tasks that you’ll encounter often.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于 FastAPI 如何处理非 API 主题，如表单和模板的快速概述。以及前一章关于文件的内容，这些都是你经常会遇到的传统 Web 任务。
