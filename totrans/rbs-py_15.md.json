["```py\nclass BLTSandwich:\n    def __init__(self):\n        self.cost = 6.95\n        self.name = 'BLT'\n        # This class handles a fully constructed BLT sandwich\n        # ...\n\n    def split_in_half(self) -> tuple['BLTSandwich', 'BLTSandwich']:\n        # Instructions for how to split a sandwich in half\n        # Cut along diagonal, wrap separately, etc.\n        # Return two sandwiches in return\n\nclass Chili:\n    def __init__(self):\n        self.cost = 4.95\n        self.name = 'Chili'\n        # This class handles a fully loaded chili\n        # ...\n\n    def split_in_half(self) -> tuple['Chili', 'Chili']:\n        # Instructions for how to split chili in half\n        # Ladle into new container, add toppings\n        # Return two cups of chili in return\n        # ...\n\nclass BaconCheeseburger:\n    def __init__(self):\n        self.cost = 11.95\n        self.name = 'Bacon Cheeseburger'\n        # This class handles a delicious Bacon Cheeseburger\n        # ...\n\n    # NOTE! no split_in_half method\n```", "```py\nimport math\ndef split_dish(dish: ???) -> ????:\n    dishes = dish.split_in_half()\n    assert len(dishes) == 2\n    for half_dish in dishes:\n        half_dish.cost = math.ceil(half_dish.cost) / 2\n        half_dish.name = \"Â½ \" + half_dish.name\n    return dishes\n```", "```py\ndef split_dish(dish: ???) -> ???:\n```", "```py\ndef split_dish(dish: Any)\n```", "```py\ndef split_dish(dish: Union[BLTSandwich, Chili])\n```", "```py\nclass Splittable:\n    def __init__(self, cost, name):\n        self.cost = cost\n        self.name = name\n\n    def split_in_half(self) -> tuple['Splittable', 'Splittable']:\n        raise NotImplementedError(\"Must implement split in half\")\n\nclass BLTSandwich(Splittable):\n    # ...\n\nclass Chili(Splittable):\n    # ...\n```", "```py\ndef split_dish(dish: Splittable):\n```", "```py\ndef split_dish(dish: Splittable) ->\n    tuple[Splittable, Splittable]:\n```", "```py\nclass BLTSandwich(Shareable,\n                  PickUppable,\n                  Substitutable,\n                  Splittable):\n    # ...\n```", "```py\nfrom random import shuffle\nfrom typing import Iterator, MutableSequence\nclass ShuffleIterator:\n    def __init__(self, sequence: MutableSequence):\n        self.sequence = list(sequence)\n        shuffle(self.sequence)\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if not self.sequence:\n            raise StopIteration\n        return self.sequence.pop(0)\n\nmy_list = [1, 2, 3, 4]\niterator: Iterator = ShuffleIterator(my_list)\n\nfor num in iterator:\n    print(num)\n```", "```py\nfrom typing import Protocol\nclass Splittable(Protocol):\n    cost: int\n    name: str\n\n    def split_in_half(self) -> tuple['Splittable', 'Splittable']:\n        \"\"\" No implementation needed \"\"\"\n        ...\n```", "```py\nclass BLTSandwich:\n    def __init__(self):\n        self.cost = 6.95\n        self.name = 'BLT'\n        # This class handles a fully constructed BLT sandwich\n        # ...\n\n    def split_in_half(self) -> ('BLTSandwich', 'BLTSandwich'):\n        # Instructions for how to split a sandwich in half\n        # Cut along diagonal, wrap separately, etc.\n        # Return two sandwiches in return\n```", "```py\ndef split_dish(order: Splittable) -> tuple[Splittable, Splittable]:\n```", "```py\nStandardLunchEntry = Union[Splittable, Shareable,\n                           Substitutable, PickUppable]\n```", "```py\nclass StandardLunchEntry(Splittable, Shareable, Substitutable,\n                         PickUppable, Protocol):\n    pass\n\n# Remember, you don't need to explicitly subclass from the protocol\n# I do so here for clarity's sake\nclass BLTSandwich(StandardLunchEntry):\n    # ... snip ...\n```", "```py\nfrom typing import runtime_checkable, Protocol\n\n@runtime_checkable\nclass Splittable(Protocol):\n    cost: int\n    name: str\n\n    def split_in_half(self) -> tuple['Splittable', 'Splittable']:\n        ...\n\nclass BLTSandwich():\n    # ... snip ..\n\nassert isinstance(BLTSandwich(), Splittable)\n```", "```py\nname = \"Chameleon CafÃ©\"\naddress = \"123 Fake St.\"\n\nstandard_lunch_entries = [BLTSandwich, TurkeyAvocadoWrap, Chili]\nother_entries = [BaconCheeseburger, FrenchOnionSoup]\n\ndef render_menu() -> Menu:\n    # Code to render a menu\n```", "```py\nfrom typing import Protocol\nfrom lunch import LunchEntry, Menu, StandardLunchEntry\n\nclass Restaurant(Protocol):\n    name: str\n    address: str\n    standard_lunch_entries: list[StandardLunchEntry]\n    other_entries: List[LunchEntry]\n\n    def render_menu(self) -> Menu:\n        \"\"\" No implementation needed \"\"\"\n        ...\n\ndef load_restaurant(restaurant: Restaurant):\n    # code to load restaurant\n    # ...\n```", "```py\nimport restaurant\nfrom load_restaurant import load_restaurant\n\n# Loads our restaurant model\nload_restaurant(restaurant)\n```"]