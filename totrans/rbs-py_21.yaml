- en: Chapter 18\. Event-Driven Architecture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 18 章。事件驱动架构
- en: 'Extensibility is important at every level of your codebase. At the code level,
    you employ extensibility to make your functions and classes flexible. At the abstract
    level, you utilize the same principles in your codebase’s architecture. *Architecture*
    is the set of high-level guidelines and constraints that shape how you design
    software. It is the vision that influences all developers, past, present, and
    future. This chapter, as well as the next one, are going to show two examples
    of how architectural examples improve maintability. Everything you’ve learned
    so far in this part of the book applies: good architecture promotes extensibility,
    manages dependencies well, and fosters composability.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性在你的代码库的每个层次都非常重要。在代码层面，你利用可扩展性来使你的函数和类灵活。在抽象层面，你在代码库的架构中使用相同的原则。*架构*是塑造软件设计方式的高级指导方针和约束集。它是影响所有开发人员的愿景，包括过去、现在和未来。本章以及接下来的章节将展示两个示例，说明架构示例如何提高可维护性。你在本书的这部分中学到的一切都适用：良好的架构促进可扩展性，良好地管理依赖关系，并促进可组合性。
- en: 'In this chapter, you will learn about event-driven architecture. *Event-driven
    architecture* revolves around events, or notifications in your system. It is a
    fantastic way to decouple different parts of your codebase, as well as extend
    your system for new functionality or performance. Event-driven architectures allow
    you to introduce new changes easily with minimal impact. First, I want to talk
    about the flexibility that event-driven architectures provide. Then, I’ll cover
    two separate variations of event-driven architectures: simple events and streaming
    events. While they are similar, you will use them in slightly different scenarios.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习有关事件驱动架构的知识。*事件驱动架构*围绕着事件或系统中的通知。它是解耦代码库不同部分的绝佳方式，同时还可以为新功能或性能扩展系统。事件驱动架构使你可以轻松引入新的变化，并带来最小的影响。首先，我想谈谈事件驱动架构所提供的灵活性。然后，我将介绍事件驱动架构的两种不同变体：简单事件和流式事件。虽然它们相似，但你会在稍微不同的场景中使用它们。
- en: How It Works
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理
- en: When you focus on event-driven architectures, you are revolving around reactions
    to stimuli. You deal with reactions to simuli all the time, whether it’s pulling
    a casserole out of the oven or picking up a delivery from your front door after
    a phone notification. In an event-driven architecture, you architect your code
    to represent this model. Your stimulus is some *producer* of events. A *consumer*
    of these events is the reaction to that stimulus. An event is just a transmission
    of information from a producer to a consumer. [Table 18-1](part0023_split_001.html#producer_consumer_table)
    shows some common producer–consumer pairs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当你专注于事件驱动架构时，你实际上是围绕着对刺激的反应。你一直在处理对刺激的反应，无论是从烤箱中取出烩菜还是在手机通知后从前门取货。在事件驱动架构中，你的代码被构建成了这种模型。你的刺激是某种事件的*生产者*。对这些事件的*消费者*就是对那个刺激的反应。事件只是从生产者传递到消费者的信息传输。[Table 18-1](part0023_split_001.html#producer_consumer_table)展示了一些常见的生产者-消费者对。
- en: Table 18-1\. Everyday events and their consumers
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Table 18-1。日常事件及其消费者
- en: '| Producer | Consumer |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| 生产者 | 消费者 |'
- en: '| --- | --- |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Kitchen timer going off | Chef retrieves a casserole from the oven |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 厨房计时器响起 | 厨师从烤箱取出一份烩菜 |'
- en: '| Cook ringing a bell when a dish is done | Server picks it up and serves it
    |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 烹饪员在菜做好时敲铃 | 服务员接过并上菜 |'
- en: '| Alarm clock going off | Late sleeper wakes up |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 闹钟响起 | 睡眠者醒来 |'
- en: '| A last call for boarding at an airport | Rushing family rushes, trying to
    make their connection |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 机场最后一次登机通知 | 匆忙的家庭着急赶上他们的连接航班 |'
- en: 'You actually deal with producers and consumers every time you program. Any
    function that returns a value is a producer, and any piece of code that uses that
    returned value is a consumer. Observe:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，你在编程时实际上一直在处理生产者和消费者。任何返回值的函数都是生产者，任何使用该返回值的代码片段都是消费者。观察：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this case, `complete_order` is *producing* information in the form of a completed
    order. Based on the function names, the customer and the restaurant are *consuming*
    the fact that an order is done. There is a direct linkage where the producer notifies
    the consumer. Event-driven architectures aim to sever this physical dependency.
    The goal is to decouple producers and consumers. Producers do not know about the
    consumers, and consumers do not know about the producers. This is what drives
    the flexibility of an event-driven architecture.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`complete_order`以完成订单的形式*产生*信息。根据函数名称，客户和餐馆正在*消耗*订单完成的事实。生产者通知消费者存在直接的链接。事件驱动架构的目标是断开这种物理依赖关系。目标是解耦生产者和消费者。生产者不知道消费者，消费者也不知道生产者。这就是推动事件驱动架构灵活性的因素。
- en: With this decoupling, it becomes incredibly easy to add onto your system. If
    you need new consumers, you can add them without ever touching the producer. If
    you need different producers, you can add them without ever touching the consumers.
    This bidirectional extensibility allows you to substantially change multiple parts
    of your codebase in isolation.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种解耦，向系统添加新的功能变得非常容易。如果需要新的消费者，可以添加它们而不需要触及生产者。如果需要不同的生产者，也可以添加它们而不需要触及消费者。这种双向的可扩展性允许您在隔离的多个代码部分中实现重大变更。
- en: What’s happening behind the scenes is quite ingenious. Instead of any dependencies
    between producer and consumer, they both depend on a transport mechanism, as shown
    in [Figure 18-1](part0023_split_001.html#transport_mechanism). A *transport mechanism*
    is simply the way that two pieces of code pass data back and forth.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 发生在幕后的事情非常巧妙。生产者和消费者之间不存在任何依赖关系，它们都依赖于传输机制，如[图18-1](part0023_split_001.html#transport_mechanism)所示。*传输机制*只是两段代码之间传递数据的方式。
- en: '![ropy 1801](../images/00033.gif)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图18-01](../images/00033.gif)'
- en: Figure 18-1\. Producer–consumer relationship
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图18-1\. 生产者-消费者关系
- en: Drawbacks
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: Because the producer and consumer depend on a transport mechanism, they have
    to agree on the message format. In most event-driven architectures, both the producer
    and consumer agree on a common identifier and message format. This does create
    a *logical* dependency between the two but not a physical one. If either party
    changes the identifier or message format in an incompatible way, the scheme breaks
    down. And like most logical dependencies, it is difficult to link the dependencies
    together through inspection. Consult [Chapter 16](part0021_split_000.html#dependencies)
    to learn more about how to mitigate these problems.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因为生产者和消费者依赖于传输机制，它们必须就消息格式达成一致。在大多数事件驱动架构中，生产者和消费者都会就常见标识符和消息格式达成一致。这确实在两者之间创建了*逻辑*依赖关系，但并非物理依赖关系。如果任何一方以不兼容的方式更改标识符或消息格式，则方案将崩溃。而且像大多数逻辑依赖关系一样，很难通过检查将这些依赖关系连接在一起。请参阅[第16章](part0021_split_000.html#dependencies)了解如何缓解这些问题。
- en: Because of this separation of code, your typechecker will not be much help when
    things go wrong. If a consumer starts depending on the wrong event type, the typechecker
    will not flag it. Be extra careful when changing the type of a producer or consumer,
    because you will have to update all the other producers–consumers to match.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于代码的分离，当出现问题时，您的类型检查器将无法提供太多帮助。如果一个消费者开始依赖错误的事件类型，类型检查器将不会标记它。在更改生产者或消费者的类型时要格外小心，因为您将不得不更新所有其他生产者-消费者以匹配。
- en: Event-driven architectures can make debugging harder. When stepping through
    code in a debugger, you will get to the code that produces an event, but when
    you step into the transport mechanism, you often are stepping into third-party
    code. In the worst case, the code that actually transports your events may be
    running in a different process, or even on a different machine. You may need multiple
    debuggers active (one per process or system) to properly debug event-driven architectures.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 事件驱动架构可能会增加调试的难度。当您在调试器中逐步执行代码时，您将到达生成事件的代码，但是当您进入传输机制时，通常会进入第三方代码。在最坏的情况下，实际传输事件的代码可能在不同的进程中运行，甚至在不同的机器上运行。您可能需要多个活动调试器（每个进程或系统一个）来正确调试事件驱动架构。
- en: Finally, error handling becomes a little more difficult when using event-driven
    architectures. Most producers are decoupled from their consumers; when a consumer
    throws an exception or returns an error, it’s not always easy to handle it from
    the producer side.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当使用事件驱动架构时，错误处理变得稍微复杂一些。大多数生产者与它们的消费者解耦；当消费者抛出异常或返回错误时，往往不容易从生产者端处理。
- en: As a thought experiment, consider what would happen if a producer produced an
    event and five consumers consumed it. If the third consumer that was notified
    threw an exception, what should happen? Should the other consumers get the exception,
    or should the execution stop in its tracks? Should the producer know about any
    error conditions, or should the errors get swallowed up? If the producer receives
    an exception, what happens if different consumers produce different exceptions?
    There is no one right answer to all of these questions; consult the tools you’re
    using for event-driven architectures to better understand what happens in these
    cases.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个思维实验，考虑一下如果一个生产者产生了一个事件，而五个消费者消费了它会发生什么。如果被通知的第三个消费者抛出异常，应该发生什么？其他消费者应该得到异常吗，还是应该停止执行？生产者应该知道任何错误条件吗，还是错误应该被吞噬？如果生产者接收到异常，如果不同的消费者产生不同的异常会发生什么？对于所有这些问题没有一个正确的答案；请咨询您用于事件驱动架构的工具，以更好地了解在这些情况下会发生什么。
- en: Despite these drawbacks, event-driven architectures are worthwhile in situations
    where you need to give your system much-needed flexibility. Future maintainers
    can replace your producers or consumers with minimal impact. They can bring in
    new producers and consumers to create new functionality. They can quickly integrate
    with external systems, opening the door for new partnerships. And best of all,
    they are working with small, modular systems that are easy to test in isolation
    and easy to understand.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在这些缺点，事件驱动架构在需要为系统提供急需的灵活性的情况下是值得的。未来的维护者可以在最小的影响下替换您的生产者或消费者。他们可以引入新的生产者和消费者以创建新功能。他们可以快速集成外部系统，为新的合作伙伴关系打开大门。而且最重要的是，他们正在处理小型、模块化的系统，这些系统易于独立测试和理解。
- en: Simple Events
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单事件
- en: 'The simplest case for event-oriented architectures is dealing with *simple
    events* such as acting or alerting you when certain conditions change. Your producer
    of information is the one sending the event, and your consumer receives and acts
    upon the event. There are two typical ways of implementing this: with or without
    a message broker.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 事件导向架构的最简单情况是处理*简单事件*，比如在某些条件变化时采取行动或通知您。您的信息生产者发送事件，您的消费者接收并对事件采取行动。有两种典型的实现方式：使用或不使用消息代理。
- en: Using a Message Broker
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用消息代理
- en: A message broker is a specific piece of code that acts as a transport of data.
    Producers will publish data, known as a message, to a specific *topic* on the
    message broker. The topic is simply a unique identifier, such as a string. It
    could be something simple, like “orders,” or complex, like “sandwich order is
    finished.” It’s just a namespace that distinguishes one message channel from another.
    Consumers use the same identifier to *subscribe* to a topic. The message broker
    then sends the message to all consumers subscribed to the topic. This type of
    system is also known as *publisher/subscriber*, or pub/sub for short. [Figure 18-2](part0023_split_004.html#message_broker)
    shows a hypothetical pub/sub architecture.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 消息代理是一种特定的代码片段，用作数据传输。生产者会将称为*消息*的数据发布到消息代理上的特定*主题*。主题只是一个唯一的标识符，比如一个字符串。它可以是简单的，比如“orders”，或者复杂的，比如“sandwich
    order is finished”。它只是一个命名空间，用于区分一个消息通道与另一个。消费者使用相同的标识符*订阅*一个主题。消息代理然后将消息发送给所有订阅该主题的消费者。这种类型的系统也被称为*发布/订阅*，简称pub/sub。[图 18-2](part0023_split_004.html#message_broker)展示了一个假设的pub/sub架构。
- en: '![ropy 1802](../images/00034.gif)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![ropy 1802](../images/00034.gif)'
- en: Figure 18-2\. A hypothetical message broker–based architecture
  id: totrans-31
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 18-2\. 一个假设的基于消息代理的架构
- en: For this chapter, I will design the notification system for an automated drone
    delivery service for restaurants. When a customer order is cooked, the drone system
    kicks into action, picks up the order, and delivers the meal to the correct address.
    There are five notifications that happen in this system, and I’ve broken them
    down into producer–consumer in [Table 18-2](part0023_split_004.html#drone_notification_table).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将设计为餐厅的自动无人机送餐服务通知系统。当顾客订单烹饪完成时，无人机系统立即启动，接收订单并将餐点送到正确的地址。此系统中有五个通知，我已将它们拆分成生产者-消费者在[Table 18-2](part0023_split_004.html#drone_notification_table)中。
- en: Table 18-2\. Producers and consumers in the automated drone delivery system
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 表18-2\. 自动无人机送餐系统中的生产者和消费者
- en: '| Producer | Consumer |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 生产者 | 消费者 |'
- en: '| --- | --- |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Meal has finished cooking | Drone is notified for pickup |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 餐点已经烹饪完成 | 无人机已经通知进行取货 |'
- en: '| Meal has finished cooking | Customer is notified that the meal is cooked
    |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 餐点已经烹饪完成 | 顾客已经收到餐点烹饪完成的通知 |'
- en: '| Drone is en route | Customer is notified about an ETA |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 无人机正在途中 | 顾客已经收到关于预计到达时间的通知 |'
- en: '| Drone has delivered meal | Customer is notified about delivery |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 无人机已经交付餐点 | 顾客已经收到交付通知 |'
- en: '| Drone has delivered meal | Restaurant is notified about delivery |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 无人机已经交付餐点 | 餐厅已经收到交付通知 |'
- en: I don’t want any of these systems to directly know about one another, as the
    code handling customers, drones, and restaurants should remain independent (they
    are maintained by separate teams and I want to keep physical dependencies low).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我不希望这些系统直接相互了解，因为处理顾客、无人机和餐厅的代码应保持独立（它们由不同的团队维护，我希望保持物理依赖低）。
- en: 'First, I will define the topics that exist in the system: a meal has finished
    cooking, the drone is en route, and the order is delivered.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我将定义系统中存在的主题：餐点已经烹饪完成、无人机正在途中以及订单已经交付。
- en: 'For this example, I will use the Python library [PyPubSub](https://oreil.ly/8xLj7),
    which is a publish-subscribe API used in single-process applications. To use it,
    you need to set up code to subscribe to a topic and other code to publish to the
    topic. First, you need to install `pypubsub`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个示例，我将使用Python库[PyPubSub](https://oreil.ly/8xLj7)，这是用于单进程应用程序的发布-订阅API。要使用它，您需要设置订阅主题的代码和发布到主题的其他代码。首先，您需要安装`pypubsub`：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, to subscribe to the topic, you specify the topic and the function you
    want to be called:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，要订阅该主题，您需要指定主题和要调用的函数：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then to publish to this topic, you do the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，要发布到这个主题，您需要执行以下操作：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Warning
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Subscribers operate in the same thread as the publisher, which means that any
    blocking I/O, such as waiting on a socket to be read, will block the publisher.
    This will affect all other subscribers and should be avoided.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 订阅者在与发布者相同的线程中运行，这意味着任何阻塞I/O，如等待读取套接字，将会阻塞发布者。这将影响所有其他订阅者，应避免这种情况发生。
- en: 'These two pieces of code have no knowledge of each other; all they depend upon
    is the PyPubSub library as well as agreeing on the topic/message data. This makes
    it incredibly easy to add new subscribers:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这两段代码彼此之间没有任何关联；它们的全部依赖仅限于PyPubSub库以及在主题/消息数据上达成一致。这使得添加新的订阅者变得非常容易：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can’t get much more extensible. By defining topics that exist within the
    system, you can create new producers or consumers with the utmost ease. As your
    system needs to grow, you extend it by interacting with the existing messaging
    system.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您不能更容易扩展。通过定义存在于系统内的主题，您可以轻松创建新的生产者或消费者。随着系统的增长需求，您通过与现有消息系统的交互来扩展它。
- en: PyPubSub also comes with a few options to help with debugging. You can add audit
    operations by adding your own functionality for things like new topics being created
    or a message being sent. You can add error handlers for any subscriber exception
    being thrown. You can also set up subscribers for *all* topics at once. If you
    would like to learn more about any of these features, or any other piece of functionality
    in PyPubSub, check out the [PyPubSub documentation](https://pypubsub.readthedocs.io).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: PyPubSub还提供了一些选项来帮助调试。您可以通过添加自己的功能来添加审计操作，例如创建新主题或发送消息。您可以添加错误处理程序来处理任何订阅者抛出的异常。您还可以设置订阅所有主题的订阅者。如果您想了解更多关于这些功能或PyPubSub中任何其他功能的信息，请查阅[PyPubSub文档](https://pypubsub.readthedocs.io)。
- en: Note
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: PyPubSub is meant for single-process applications; you cannot publish to code
    running in other processes or systems. Other applications can be used to provide
    this functionality, such as [Kafka](https://kafka.apache.org), [Redis](https://redis.io),
    or [RabbitMQ](https://www.rabbitmq.com). Check out each of these tool’s documentation
    to learn how to use them in Python.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: PyPubSub 用于单进程应用程序；你无法发布到运行在其他进程或系统中的代码。其他应用程序可以提供此功能，例如[Kafka](https://kafka.apache.org)，[Redis](https://redis.io)，或[RabbitMQ](https://www.rabbitmq.com)。查阅每个工具的文档以了解如何在Python中使用它们。
- en: The Observer Pattern
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 观察者模式
- en: 'If you don’t want to use a message broker, you can choose to implement the
    Observer Pattern.^([1](part0023_split_008.html#idm45644730197896)) With the Observer
    Pattern, your producer contains of a list of *observers*: the consumers in this
    scenario. The Observer Pattern does not need a separate library to act as a message
    broker.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想使用消息代理，你可以选择实现观察者模式。^([1](part0023_split_008.html#idm45644730197896)) 在观察者模式中，你的生产者包含一个*观察者*列表：这些在此场景中是消费者。观察者模式不需要单独的库来充当消息代理。
- en: 'To avoid directly linking producers and consumers, you need to keep the knowledge
    of observers *generic*. In other words, keep any specific knowledge about the
    observers abstracted away. I will do this by just using functions (type annotated
    as a `Callable`). Here is how I would rewrite the previous example to use an Observer
    Pattern:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免直接连接生产者和消费者，你需要将观察者的知识保持*通用化*。换句话说，将观察者的任何具体知识抽象出来。我将通过仅使用函数（类型注释为`Callable`）来做到这一点。以下是我将如何重写先前示例以使用观察者模式的方法：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this case, the producer only knows about a list of functions to call to notify.
    To add new observers, you just need to add them to the list passed in as an argument.
    Furthermore, since this is just function calls, your typechecker will be able
    to detect when a producer or its observers change in an incompatible way, which
    is a huge benefit over the message broker paradigm. It is also easier to debug,
    as you don’t need to step through third-party message broker code in your debugger.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，生产者只知道调用以通知的函数列表。要添加新的观察者，你只需将它们添加到作为参数传递的列表中。此外，由于这只是函数调用，你的类型检查器将能够检测到当生产者或其观察者以不兼容的方式发生变化时，这是消息代理范式的巨大优势。这也更容易调试，因为你不需要在调试器中步进第三方消息代理代码。
- en: The Observer Pattern above does have some drawbacks. First, you are a bit more
    sensitive to errors that crop up. If the observer throws an exception, the producer
    needs to be able to handle that directly (or use a helper function or class to
    handle the notification wrapped in a `try…except`). Second, the linking of producer
    to observer is more direct than in the message broker paradigm. In a message broker
    paradigm, the publisher and subscriber can become connected regardless of where
    they live in the codebase.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的观察者模式确实有一些缺点。首先，你对出现的错误更加敏感。如果观察者抛出异常，生产者需要能够直接处理（或者使用一个辅助函数或类来处理包装在`try…except`中的通知）。其次，生产者到观察者的连接比消息代理范式更直接。在消息代理范式中，发布者和订阅者可以连接起来，而不管它们在代码库中的位置如何。
- en: In contrast, the Observer Pattern requires the caller of the notification (in
    the previous case, this was `complete_order`) to know about the observers. If
    the caller doesn’t know directly about the observers, then its caller needs to
    pass in the observers. This can continue all the way up the call stack until you
    are in a piece of code that directly knows about the observers. This can pollute
    a lot your function calls with extra parameters if there is a large gap between
    what knows about the observers and the actual code issuing the notification. If
    you find yourself passing observers through multiple functions to get to a producer
    deep in the call stack, consider using a message broker instead.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，观察者模式要求通知的调用者（在前面的情况下是`complete_order`）知道观察者。如果调用者不直接知道观察者，那么它的调用者需要传递观察者。这可能一直延续到调用栈深处，直到有一段代码直接了解观察者为止。如果发现自己通过多个函数传递观察者以到达调用栈深处的生产者，请考虑使用消息代理代替。
- en: If you would like to go more in-depth into event-driven architectures with simple
    events, I recommend the book [*Architecture Patterns with Python*](https://oreil.ly/JPpdr)
    by Harry Percival and Bob Gregory (O’Reilly); its Part II is all about event-driven
    architecture.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更深入地了解简单事件的事件驱动架构，我推荐Harry Percival和Bob Gregory（O’Reilly）的书籍[*Architecture
    Patterns with Python*](https://oreil.ly/JPpdr)，其第二部分完全是关于事件驱动架构的。
- en: Discussion Topic
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论主题
- en: How would event-driven architecture improve the decoupling within your codebase?
    Would the Observer Pattern or a message broker be more suitable for your needs?
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 事件驱动架构如何提升代码库内的解耦性？观察者模式或消息代理哪一个更适合您的需求？
- en: Streaming Events
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流式事件
- en: In the preceding section, simple events were each represented as a discrete
    event that happened when a certain condition was fulfilled. Message brokers and
    the Observer Pattern are great ways to handle simple events. However, some systems
    deal with a never-ending series of events. The events flow into the system as
    a continuous series of data known as a stream. Think about the drone systems described
    in the last section. Consider all the data that comes from each drone. There might
    be location data, battery levels, current speed, wind data, weather data, and
    current weight carried. This data will be coming in at regular intervals, and
    you need a way to handle it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，简单事件被表示为满足某一条件时发生的离散事件。消息代理和观察者模式是处理简单事件的好方法。然而，一些系统处理永不停止的事件序列。事件以连续的数据流的形式流入系统。想象一下上一节中描述的无人机系统。考虑每个无人机传输的所有数据。可能包括位置数据、电池电量、当前速度、风数据、天气数据和当前负载重量。这些数据将定期传入，并且您需要一种处理方式。
- en: In these sorts of use cases, you don’t want to build all the boilerplate of
    pub/sub or observers; you want an architecture that matches your use case. You
    need a programming model that centers on events and defines workflows for handling
    every single event. Enter reactive programming.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这类用例中，您不希望构建所有发布/订阅或观察者的样板代码；您需要一种与您的用例匹配的架构。您需要一个以事件为中心并为处理每个事件定义工作流的编程模型。这就是响应式编程的作用。
- en: '*Reactive programming* is an architectural style that revolves around streams
    of events. You define data sources as producers of these streams, and then link
    together multiple observers. Each observer is notified whenever there is a change
    in data and defines a series of operations for handling the data stream. The reactive
    programming style was popularized by [ReactiveX](http://reactivex.io). In this
    section, I’ll use the Python implementation of ReactiveX: RxPY.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*响应式编程*是围绕事件流的一种架构风格。您将数据源定义为这些流的生产者，然后将多个观察者链接在一起。每个观察者在数据变化时得到通知，并定义一系列操作来处理数据流。响应式编程风格由[ReactiveX](http://reactivex.io)推广。在本节中，我将使用ReactiveX的Python实现：RxPY。'
- en: 'I will install RxPy with `pip`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用`pip`安装RxPy：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: From there, I need to define a stream of data. In RxPY parlance, this is known
    as an *observable*. For example purposes, I’ll use a single hard-coded observable,
    but in practice, you will generate multiple observables from real data.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我需要定义一个数据流。在RxPY术语中，这被称为*可观察对象*。例如，我将使用一个硬编码的单个可观察对象进行示例，但实际上，您将从真实数据生成多个可观察对象。
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This observable is generated from a list of events of different types for the
    drone data.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此可观察对象是从不同类型事件的事件列表中生成的，用于无人机数据。
- en: 'I next need to define what to do to process each event. Once I have an observable,
    observers can subscribe to it, in a similar manner to the pub/sub mechanism:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步需要定义每个事件的处理方法。一旦有可观察对象，观察者可以订阅它，类似于发布/订阅机制：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This doesn’t look too different from a normal pub/sub idiom.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来与普通的发布/订阅习语并没有太大不同。
- en: 'The real magic comes with *pipable* operators. RxPY allows you to *pipe*, or
    chain, operations together to produce a pipeline of filters, transformations,
    and calculations. For instance, I can write an operator pipeline with `rx.pipe`
    to grab the average weight the drone has carried:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*管道*运算符真正的魔力就在这里。RxPY允许您将操作*管道化*或链接在一起，形成一个过滤器、转换和计算的管道。例如，我可以使用`rx.pipe`编写一个操作符管道来获取飞行器的平均重量：'
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Similarly, I could write a pipeline chain that tracks the drone’s maximum altitude
    once it’s left the restaurant:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我可以编写一个管道链，跟踪无人机离开餐厅后的最大高度：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-83
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: A *lambda function* is just an inline function without a name. It is often used
    for functions that are only used once where you don’t want to place the definition
    of the function too far away from its use.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*Lambda 函数* 只是一个没有名称的内联函数。它通常用于只使用一次的函数，你不希望将函数的定义放得离它的使用太远。'
- en: This is our old friend *composability* (as seen in [Chapter 17](part0022_split_000.html#composability))
    coming to our aid. I can compose different operators however I want to produce
    a datastream that matches my use case. RxPY has support for over one hundred built-in
    operators, as well as a framework for defining your own operators. You can even
    compose the results from one pipe into a new stream of events that other parts
    of the program can observe. This composability, paired with the decoupled nature
    of event subscription, gives you a large amount of flexibility in writing code.
    Furthermore, reactive programming encourages immutability, which greatly decreases
    the chance of bugs. You can hook up new pipes, compose operators together, handle
    data asynchronously, and more with a reactive framework like RxPY.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们老朋友*可组合性*（如[第 17 章](part0022_split_000.html#composability)中所见）在帮助我们。我可以随心所欲地组合不同的操作符，以产生符合我的用例的数据流。RxPY
    支持超过一百个内置操作符，以及定义自己操作符的框架。你甚至可以将一个管道的结果组合成其他程序部分可以观察的新事件流。这种可组合性，加上事件订阅的解耦特性，使你在编写代码时拥有极大的灵活性。此外，响应式编程鼓励不可变性，大大降低了出错的可能性。你可以连接新的管道，组合操作符，异步处理数据等等，这些都是响应式框架如
    RxPY 能够做到的。
- en: It also becomes easy to debug in isolation. While you can’t easily step through
    RxPY with a debugger (you’ll end up in a lot of complicated code related to operations
    and observables), you can instead step into the functions that you pass to operators.
    Testing is a breeze too. Since all the functions are meant to be immutable, you
    can test any of them on their own. You end up with a lot of small, single-purpose
    functions that are easy to understand.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在独立环境中调试也变得容易了。虽然你不能轻易地通过调试器逐步进行 RxPY 的调试（你会陷入与操作和可观察对象相关的大量复杂代码中），但你可以步进到你传递给操作符的函数中。测试也非常简单。由于所有的函数都应该是不可变的，你可以单独测试它们中的任何一个。最终你会得到很多小而专用的函数，这些函数易于理解。
- en: 'This type of model excels in systems that revolve around streams of data, such
    as data pipelines and extract, transform, load (ETL) systems. It is also incredibly
    useful in applications dominated by reactions to I/O events, such as server applications
    and GUI applications. If reactive programming fits your domain model, I encourage
    you to read the [RxPY documentation](https://rxpy.readthedocs.io/en/latest). If
    you’d like more structured learning, I recommend the video course [*Reactive Python
    for Data Science*](https://oreil.ly/Kr9At) or the book [*Hands-On Reactive Programming
    with Python: Event-Driven Development Unraveled with RxPY*](https://oreil.ly/JCuf6)
    by Romain Picard (O’Reilly).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '这种模型在围绕数据流的系统中表现出色，比如数据管道和抽取、转换、加载（ETL）系统。在以对 I/O 事件的反应为主的应用程序中，如服务器应用程序和 GUI
    应用程序中，它也非常有用。如果响应式编程符合你的领域模型，我鼓励你阅读[RxPY 文档](https://rxpy.readthedocs.io/en/latest)。如果你想要更结构化的学习，我推荐视频课程[*Reactive
    Python for Data Science*](https://oreil.ly/Kr9At)或书籍[*Hands-On Reactive Programming
    with Python: Event-Driven Development Unraveled with RxPY*](https://oreil.ly/JCuf6)，作者是
    Romain Picard（O’Reilly）。'
- en: Closing Thoughts
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结思考
- en: Event-driven architectures are incredibly powerful. An event-driven architecture
    allows you to separate producers and consumers of information. By decoupling the
    two, you introduce flexibility into your system. You can replace functionality,
    test your code in isolation, or extend new functionality by introducing new producers
    or consumers.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 事件驱动架构非常强大。事件驱动架构允许你将信息的生产者和消费者分开。通过解耦这两者，你为系统引入了灵活性。你可以替换功能、在隔离环境中测试你的代码，或者通过引入新的生产者或消费者来扩展新功能。
- en: There are many ways to architect an event-driven system. You can choose to stay
    with simple events and the Observer Pattern for lightweight events in your system.
    As you scale up, you may need to introduce a message broker, such as with PyPubSub.
    You may even need to use another library as a message broker if you want to scale
    across processes or systems. Finally, as you approach streams of events, you can
    consider a reactive programming framework, such as RxPY.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 设计事件驱动系统有许多方式。您可以选择在系统中继续使用简单事件和观察者模式来处理轻量级事件。随着规模扩大，您可能需要引入消息代理，例如使用PyPubSub。甚至在跨进程或系统进行扩展时，您可能需要使用另一个库作为消息代理。最后，当您接近事件流时，您可以考虑使用响应式编程框架，如RxPY。
- en: 'In the next chapter, I will cover a different type of architectural paradigm:
    plug-in architectures. Plug-in architectures offer similar flexibility, composability,
    and extensibility to event-driven architectures, but in a completely different
    way. Whereas event-driven architectures focus on events, plug-in architecture
    focuses on pluggable units of implementation. You’ll see how plug-in architectures
    can give you plenty of options to build a robust codebase that is easy to maintain.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我将介绍一种不同类型的架构范例：插件架构。插件架构提供了与事件驱动架构类似的灵活性、可组合性和可扩展性，但方式完全不同。而事件驱动架构专注于事件，插件架构则专注于可插拔的实现单元。您将看到，插件架构如何为您提供丰富的选项，以构建一个易于维护的健壮代码库。
- en: '^([1](part0023_split_005.html#idm45644730197896-marker)) The Observer Pattern
    is first described in *Design Patterns: Elements of Reusable Object-Oriented Software*
    by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides (Addison-Wesley
    Professional). This book is colloquially known as the “Gang of Four (GoF)” book.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](part0023_split_005.html#idm45644730197896-marker)) 观察者模式首次被描述在《设计模式：可复用面向对象软件的基础》一书中，作者是Erich
    Gamma、Richard Helm、Ralph Johnson和John Vlissides（Addison-Wesley Professional）。这本书通常被称为“四人组（GoF）”书籍。
