["```py\nHere's a UDP joke. Get it?\n```", "```py\nDo you want to hear a TCP joke?\nYes, I want to hear a TCP joke.\nOkay, I'll tell you a TCP joke.\nOkay, I'll hear a TCP joke.\nOkay, I'll send you a TCP joke now.\nOkay, I'll receive the TCP joke now.\n... (and so on)\n```", "```py\nfrom datetime import datetime\nimport socket\n\nserver_address = ('localhost', 6789)\nmax_size = 4096\n\nprint('Starting the server at', datetime.now())\nprint('Waiting for a client to call.')\nserver = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nserver.bind(server_address)\n\ndata, client = server.recvfrom(max_size)\n\nprint('At', datetime.now(), client, 'said', data)\nserver.sendto(b'Are you talking to me?', client)\nserver.close()\n```", "```py\nimport socket\nfrom datetime import datetime\n\nserver_address = ('localhost', 6789)\nmax_size = 4096\n\nprint('Starting the client at', datetime.now())\nclient = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nclient.sendto(b'Hey!', server_address)\ndata, server = client.recvfrom(max_size)\nprint('At', datetime.now(), server, 'said', data)\nclient.close()\n```", "```py\n$ python udp_server.py\nStarting the server at 2014-02-05 21:17:41.945649\nWaiting for a client to call.\n```", "```py\n$ python udp_client.py\nStarting the client at 2014-02-05 21:24:56.509682\nAt 2014-02-05 21:24:56.518670 ('127.0.0.1', 6789) said b'Are you talking to me?'\n```", "```py\nAt 2014-02-05 21:24:56.518473 ('127.0.0.1', 56267) said b'Hey!'\n```", "```py\nimport socket\nfrom datetime import datetime\n\naddress = ('localhost', 6789)\nmax_size = 1000\n\nprint('Starting the client at', datetime.now())\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient.connect(address)\nclient.sendall(b'Hey!')\ndata = client.recv(max_size)\nprint('At', datetime.now(), 'someone replied', data)\nclient.close()\n```", "```py\nfrom datetime import datetime\nimport socket\n\naddress = ('localhost', 6789)\nmax_size = 1000\n\nprint('Starting the server at', datetime.now())\nprint('Waiting for a client to call.')\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind(address)\nserver.listen(5)\n\nclient, addr = server.accept()\ndata = client.recv(max_size)\n\nprint('At', datetime.now(), client, 'said', data)\nclient.sendall(b'Are you talking to me?')\nclient.close()\nserver.close()\n```", "```py\n$ python tcp_server.py\nStarting the server at 2014-02-06 22:45:13.306971\nWaiting for a client to call.\nAt 2014-02-06 22:45:16.048865 <socket.socket object, fd=6, family=2, type=1,\n    proto=0> said b'Hey!'\n```", "```py\n$ python tcp_client.py\nStarting the client at 2014-02-06 22:45:16.038642\nAt 2014-02-06 22:45:16.049078 someone replied b'Are you talking to me?'\n```", "```py\nAt 2014-02-06 22:45:16.048865 <socket.socket object, fd=6, family=2, type=1,\n    proto=0> said b'Hey!'\n```", "```py\n$ $ nc www.google.com 80\nHEAD / HTTP/1.1\n\nHTTP/1.1 200 OK\nDate: Sat, 27 Jul 2019 21:04:02 GMT\n...\n\n```", "```py\n$ pip install pyzmq\n```", "```py\nimport zmq\n\nhost = '127.0.0.1'\nport = 6789\ncontext = zmq.Context()\nserver = context.socket(zmq.REP)\nserver.bind(\"tcp://%s:%s\" % (host, port))\nwhile True:\n    #  Wait for next request from client\n    request_bytes = server.recv()\n    request_str = request_bytes.decode('utf-8')\n    print(\"That voice in my head says: %s\" % request_str)\n    reply_str = \"Stop saying: %s\" % request_str\n    reply_bytes = bytes(reply_str, 'utf-8')\n    server.send(reply_bytes)\n```", "```py\nimport zmq\n\nhost = '127.0.0.1'\nport = 6789\ncontext = zmq.Context()\nclient = context.socket(zmq.REQ)\nclient.connect(\"tcp://%s:%s\" % (host, port))\nfor num in range(1, 6):\n    request_str = \"message #%s\" % num\n    request_bytes = request_str.encode('utf-8')\n    client.send(request_bytes)\n    reply_bytes = client.recv()\n    reply_str = reply_bytes.decode('utf-8')\n    print(\"Sent %s, received %s\" % (request_str, reply_str))\n```", "```py\n$ python zmq_server.py &\n```", "```py\n$ python zmq_client.py\n```", "```py\nThat voice in my head says 'message #1'\nSent 'message #1', received 'Stop saying message #1'\nThat voice in my head says 'message #2'\nSent 'message #2', received 'Stop saying message #2'\nThat voice in my head says 'message #3'\nSent 'message #3', received 'Stop saying message #3'\nThat voice in my head says 'message #4'\nSent 'message #4', received 'Stop saying message #4'\nThat voice in my head says 'message #5'\nSent 'message #5', received 'Stop saying message #5'\n```", "```py\n$ python zmq_server.py\n```", "```py\n[2] 356\nTraceback (most recent call last):\n  File \"zmq_server.py\", line 7, in <module>\n    server.bind(\"tcp://%s:%s\" % (host, port))\n  File \"socket.pyx\", line 444, in zmq.backend.cython.socket.Socket.bind\n      (zmq/backend/cython/socket.c:4076)\n  File \"checkrc.pxd\", line 21, in zmq.backend.cython.checkrc._check_rc\n      (zmq/backend/cython/socket.c:6032)\nzmq.error.ZMQError: Address already in use\n```", "```py\nimport redis\nimport random\n\nconn = redis.Redis()\ncats = ['siamese', 'persian', 'maine coon', 'norwegian forest']\nhats = ['stovepipe', 'bowler', 'tam-o-shanter', 'fedora']\nfor msg in range(10):\n    cat = random.choice(cats)\n    hat = random.choice(hats)\n    print('Publish: %s wears a %s' % (cat, hat))\n    conn.publish(cat, hat)\n```", "```py\nimport redis\nconn = redis.Redis()\n\ntopics = ['maine coon', 'persian']\nsub = conn.pubsub()\nsub.subscribe(topics)\nfor msg in sub.listen():\n    if msg['type'] == 'message':\n        cat = msg['channel']\n        hat = msg['data']\n        print('Subscribe: %s wears a %s' % (cat, hat))\n```", "```py\n$ python redis_sub.py\n```", "```py\n$ python redis_pub.py\nPublish: maine coon wears a stovepipe\nPublish: norwegian forest wears a stovepipe\nPublish: norwegian forest wears a tam-o-shanter\nPublish: maine coon wears a bowler\nPublish: siamese wears a stovepipe\nPublish: norwegian forest wears a tam-o-shanter\nPublish: maine coon wears a bowler\nPublish: persian wears a bowler\nPublish: norwegian forest wears a bowler\nPublish: maine coon wears a stovepipe\n```", "```py\n$ python redis_sub.py\nSubscribe: maine coon wears a stovepipe\nSubscribe: maine coon wears a bowler\nSubscribe: maine coon wears a bowler\nSubscribe: persian wears a bowler\nSubscribe: maine coon wears a stovepipe\n```", "```py\nimport zmq\nimport random\nimport time\nhost = '*'\nport = 6789\nctx = zmq.Context()\npub = ctx.socket(zmq.PUB)\npub.bind('tcp://%s:%s' % (host, port))\ncats = ['siamese', 'persian', 'maine coon', 'norwegian forest']\nhats = ['stovepipe', 'bowler', 'tam-o-shanter', 'fedora']\ntime.sleep(1)\nfor msg in range(10):\n    cat = random.choice(cats)\n    cat_bytes = cat.encode('utf-8')\n    hat = random.choice(hats)\n    hat_bytes = hat.encode('utf-8')\n    print('Publish: %s wears a %s' % (cat, hat))\n    pub.send_multipart([cat_bytes, hat_bytes])\n```", "```py\nimport zmq\nhost = '127.0.0.1'\nport = 6789\nctx = zmq.Context()\nsub = ctx.socket(zmq.SUB)\nsub.connect('tcp://%s:%s' % (host, port))\ntopics = ['maine coon', 'persian']\nfor topic in topics:\n    sub.setsockopt(zmq.SUBSCRIBE, topic.encode('utf-8'))\nwhile True:\n    cat_bytes, hat_bytes = sub.recv_multipart()\n    cat = cat_bytes.decode('utf-8')\n    hat = hat_bytes.decode('utf-8')\n    print('Subscribe: %s wears a %s' % (cat, hat))\n```", "```py\n$ python zmq_sub.py\n```", "```py\n$ python zmq_pub.py\nPublish: norwegian forest wears a stovepipe\nPublish: siamese wears a bowler\nPublish: persian wears a stovepipe\nPublish: norwegian forest wears a fedora\nPublish: maine coon wears a tam-o-shanter\nPublish: maine coon wears a stovepipe\nPublish: persian wears a stovepipe\nPublish: norwegian forest wears a fedora\nPublish: norwegian forest wears a bowler\nPublish: maine coon wears a bowler\n```", "```py\nSubscribe: persian wears a stovepipe\nSubscribe: maine coon wears a tam-o-shanter\nSubscribe: maine coon wears a stovepipe\nSubscribe: persian wears a stovepipe\nSubscribe: maine coon wears a bowler\n```", "```py\n>>> import socket\n>>> socket.gethostbyname('www.crappytaxidermy.com')\n'66.6.44.4'\n>>> socket.gethostbyname_ex('www.crappytaxidermy.com')\n('crappytaxidermy.com', ['www.crappytaxidermy.com'], ['66.6.44.4'])\n```", "```py\n>>> socket.getaddrinfo('www.crappytaxidermy.com', 80)\n[(2, 2, 17, '', ('66.6.44.4', 80)),\n(2, 1, 6, '', ('66.6.44.4', 80))]\n```", "```py\n>>> socket.getaddrinfo('www.crappytaxidermy.com', 80, socket.AF_INET,\nsocket.SOCK_STREAM)\n[(2, 1, 6, '', ('66.6.44.4', 80))]\n```", "```py\n>>> import socket\n>>> socket.getservbyname('http')\n80\n>>> socket.getservbyport(80)\n'http'\n```", "```py\n>>> import pickle\n>>> import datetime\n>>> now1 = datetime.datetime.utcnow()\n>>> pickled = pickle.dumps(now1)\n>>> now2 = pickle.loads(pickled)\n>>> now1\ndatetime.datetime(2014, 6, 22, 23, 24, 19, 195722)\n>>> now2\ndatetime.datetime(2014, 6, 22, 23, 24, 19, 195722)\n```", "```py\n>>> import pickle\n>>> class Tiny():\n...     def __str__(self):\n...        return 'tiny'\n...\n>>> obj1 = Tiny()\n>>> obj1\n<__main__.Tiny object at 0x10076ed10>\n>>> str(obj1)\n'tiny'\n>>> pickled = pickle.dumps(obj1)\n>>> pickled\nb'\\x80\\x03c__main__\\nTiny\\nq\\x00)\\x81q\\x01.'\n>>> obj2 = pickle.loads(pickled)\n>>> obj2\n<__main__.Tiny object at 0x10076e550>\n>>> str(obj2)\n'tiny'\n```", "```py\nfrom xmlrpc.server import SimpleXMLRPCServer\n\ndef double(num):\n    return num * 2\n\nserver = SimpleXMLRPCServer((\"localhost\", 6789))\nserver.register_function(double, \"double\")\nserver.serve_forever()\n```", "```py\nimport xmlrpc.client\n\nproxy = xmlrpc.client.ServerProxy(\"http://localhost:6789/\")\nnum = 7\nresult = proxy.double(num)\nprint(\"Double %s is %s\" % (num, result))\n```", "```py\n$ python xmlrpc_server.py\n```", "```py\n$ python xmlrpc_client.py\nDouble 7 is 14\n```", "```py\n127.0.0.1 - - [13/Feb/2014 20:16:23] \"POST / HTTP/1.1\" 200 -\n```", "```py\nfrom jsonrpcserver import method, serve\n\n@method\ndef double(num):\n    return num * 2\n\nif __name__ == \"__main__\":\n    serve()\n```", "```py\nfrom jsonrpcclient import request\n\nnum = 7\nresponse = request(\"http://localhost:5000\", \"double\", num=num)\nprint(\"Double\", num, \"is\", response.data.result)\n```", "```py\n$ python jsonrpc_server.py &\n[1] 10621\n$ python jsonrpc_client.py\n127.0.0.1 - - [23/Jun/2019 15:39:24] \"POST / HTTP/1.1\" 200 -\nDouble 7 is 14\n```", "```py\n$ pip install msgpack-rpc-python\n```", "```py\nfrom msgpackrpc import Server, Address\n\nclass Services():\n    def double(self, num):\n        return num * 2\n\nserver = Server(Services())\nserver.listen(Address(\"localhost\", 6789))\nserver.start()\n```", "```py\nfrom msgpackrpc import Client, Address\n\nclient = Client(Address(\"localhost\", 6789))\nnum = 8\nresult =  client.call('double', num)\nprint(\"Double %s is %s\" % (num, result))\n```", "```py\n$ python msgpack_server.py\n```", "```py\n$ python msgpack_client.py\nDouble 8 is 16\n```", "```py\nimport zerorpc\n\nclass RPC():\n    def double(self, num):\n        return 2 * num\n\nserver = zerorpc.Server(RPC())\nserver.bind(\"tcp://0.0.0.0:4242\")\nserver.run()\n```", "```py\nimport zerorpc\n\nclient = zerorpc.Client()\nclient.connect(\"tcp://127.0.0.1:4242\")\nnum = 7\nresult = client.double(num)\nprint(\"Double\", num, \"is\", result)\n```", "```py\n$ python zerorpc_server &\n[1] 55172\n$ python zerorpc_client.py\nDouble 7 is 14\n```", "```py\n$ pip install grpcio\n$ pip install grpcio-tools\n```", "```py\n$ pip install dask[complete]\n```", "```py\n$ pip install boto3\n```", "```py\n$ pip install docker\n```", "```py\n$ pip install kubernetes\n```"]