- en: Chapter 21\. Py at Work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: “Business!” cried the Ghost, wringing its hands again. “Mankind was my business…”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Charles Dickens, A Christmas Carol
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The businessman’s uniform is a suit and tie. But before he can *get down to
    business*, he tosses his jacket over a chair, loosens his tie, rolls up his sleeves,
    and pours some coffee. Meanwhile, the business woman has already been getting
    work done. Maybe with a latte.
  prefs: []
  type: TYPE_NORMAL
- en: In business and government, we use all of the technologies from the earlier
    chapters—databases, the web, systems, and networks. Python’s productivity is making
    it more popular in the [enterprise](http://bit.ly/py-enterprise) and with [startups](http://bit.ly/py-startups).
  prefs: []
  type: TYPE_NORMAL
- en: 'Organizations have long fought incompatible file formats, arcane network protocols,
    language lock-in, and the universal lack of accurate documentation. They can create
    faster, cheaper, stretchier applications by using with tools such as these:'
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic languages like Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The web as a universal graphical user interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RESTful APIs as language-independent service interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relational and NoSQL databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Big data” and analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clouds for deployment and capital savings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Microsoft Office Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Business is heavily dependent on Microsoft Office applications and file formats.
    Although they are not well known, and in some cases poorly documented, there are
    some Python libraries that can help. Here are some that process Microsoft Office
    documents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[docx](https://pypi.python.org/pypi/docx)'
  prefs: []
  type: TYPE_NORMAL
- en: This library creates, reads, and writes Microsoft Office Word 2007 *.docx* files.
  prefs: []
  type: TYPE_NORMAL
- en: '[python-excel](http://www.python-excel.org)'
  prefs: []
  type: TYPE_NORMAL
- en: This one discusses the `xlrd`, `xlwt`, and `xlutils` modules via a PDF [tutorial](http://bit.ly/py-excel).
    Excel can also read and write comma-separated values (CSV) files, which you know
    how to process by using the standard `csv` module.
  prefs: []
  type: TYPE_NORMAL
- en: '[oletools](http://bit.ly/oletools)'
  prefs: []
  type: TYPE_NORMAL
- en: This library extracts data from Office formats.
  prefs: []
  type: TYPE_NORMAL
- en: '[OpenOffice](http://openoffice.org) is an open source alternative to Office.
    It runs on Linux, Unix, Windows, and macOS, and reads and writes Office file formats,
    It also installs a version of Python 3 for its own use. You can program OpenOffice
    [in Python](https://oreil.ly/mLiCr) with the [PyUNO](https://oreil.ly/FASNB) library.'
  prefs: []
  type: TYPE_NORMAL
- en: OpenOffice was owned by Sun Microsystems, and when Oracle acquired Sun, some
    people feared for its future availability. [LibreOffice](https://www.libreoffice.org)
    was spun off as a result. [DocumentHacker](http://bit.ly/docu-hacker) describes
    using the Python UNO library with LibreOffice.
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenOffice and LibreOffice had to reverse engineer the Microsoft file formats,
    which is not easy. The [Universal Office Converter](http://dag.wiee.rs/home-made/unoconv)
    module depends on the UNO library in OpenOffice or LibreOffice. It can convert
    many file formats: documents, spreadsheets, graphics, and presentations.'
  prefs: []
  type: TYPE_NORMAL
- en: If you have a mystery file, [python-magic](https://github.com/ahupp/python-magic)
    can guess its format by analyzing specific byte sequences.
  prefs: []
  type: TYPE_NORMAL
- en: The [python open document](http://appyframework.org/pod.html) library lets you
    provide Python code within templates to create dynamic documents.
  prefs: []
  type: TYPE_NORMAL
- en: Although not a Microsoft format, Adobe’s PDF is very common in business. [ReportLab](http://www.reportlab.com/opensource)
    has open source and commercial versions of its Python-based PDF generator. If
    you need to edit a PDF, you might find some help at [StackOverflow](http://bit.ly/add-text-pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Carrying Out Business Tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find a Python module for almost anything. Visit [PyPI](https://pypi.python.org/pypi)
    and type something into the search box. Many modules are interfaces to the public
    APIs of various services. You might be interested in some examples related to
    business tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Ship via [Fedex](https://github.com/gtaylor/python-fedex) or [UPS](https://github.com/openlabs/PyUPS).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mail with the [stamps.com](https://github.com/jzempel/stamps) API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read a discussion of [*Python for business intelligence*](http://bit.ly/py-biz).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If Aeropresses are flying off the shelves in Anoka, was it customer activity
    or poltergeists? [Cubes](http://cubes.databrewery.org) is an Online Analytical
    Processing (OLAP) web server and data browser.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenERP](https://www.openerp.com/) is a large commercial Enterprise Resource
    Planning (ERP) system written in Python and JavaScript, with thousands of add-on
    modules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processing Business Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Businesses have a particular fondness for data. Sadly, many of them conjure
    up perverse ways of making data harder to use.
  prefs: []
  type: TYPE_NORMAL
- en: Spreadsheets were a good invention, and over time businesses became addicted
    to them. Many nonprogrammers were tricked into programming because they were called
    *macros* instead of programs. But the universe is expanding and data is trying
    to keep up. Older versions of Excel were limited to 65,536 rows, and even newer
    versions choke at a million or so. When an organization’s data outgrow the limits
    of a single computer, it’s like headcount growing past a hundred people or so—suddenly
    you need new layers, intermediaries, and communication.
  prefs: []
  type: TYPE_NORMAL
- en: Excessive data programs aren’t caused by the size of data on single desktops;
    rather, they’re the result of the aggregate of data pouring into the business.
    Relational databases handle millions of rows without exploding, but only so many
    writes or updates at a time. A plain old text or binary file can grow gigabytes
    in size, but if you need to process it all at once, you need enough memory. Traditional
    desktop software isn’t designed for all this. Companies such as Google and Amazon
    had to invent solutions to handle so much data at scale. [Netflix](http://bit.ly/py-netflix)
    is an example built on Amazon’s AWS cloud, using Python to glue together RESTful
    APIs, security, deployment, and databases.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting, Transforming, and Loading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The underwater portions of the data icebergs include all the work to get the
    data in the first place. If you speak enterprise, the common term is extract,
    transform, load, or *ETL*. Synonyms such as *data munging* or *data wrangling*
    give the impression of taming an unruly beast, which might be apt metaphors. This
    would seem to be a solved engineering matter by now, but it remains largely an
    art. I talked a bit about this in [Chapter 12](ch12.html#ch_munging). We address
    *data science* more broadly in [Chapter 22](ch22.html#ch_science), because this
    is where most developers spend a large part of their time.
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve seen *The Wizard of Oz*, you probably remember (besides the flying
    monkeys) the part at the end—when the good witch told Dorothy that she could always
    go home to Kansas just by clicking her ruby slippers. Even when I was young I
    thought, “Now she tells her!” Although, in retrospect, I realize the movie would
    have been much shorter if she’d shared that tip earlier.
  prefs: []
  type: TYPE_NORMAL
- en: But this isn’t a movie; we’re talking about the world of business here, where
    making tasks shorter is a good thing. So, let me share some tips with you now.
    Most of the tools that you need for day-to-day data work in business are those
    that you’ve already read about here. Those include high-level data structures
    such as dictionaries and objects, thousands of standard and third-party libraries,
    and an expert community that’s just a google away.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re a computer programmer working for some business, your workflow almost
    always includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Extracting data from weird file formats or databases
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: “Cleaning up” the data, which covers a lot of ground, all strewn with pointy
    objects
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Converting things like dates, times, and character sets
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Actually doing something with the data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Storing resulting data in a file or database
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rolling back to step 1 again; lather, rinse, repeat
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here’s an example: you want to move data from a spreadsheet to a database.
    You can save the spreadsheet in CSV format and use the Python libraries from [Chapter 16](ch16.html#ch_databases).
    Or, you can look for a module that reads the binary spreadsheet format directly.
    Your fingers know how to type `python excel` into Google and find sites such as
    [Working with Excel files in Python](http://www.python-excel.org). You can install
    one of the packages by using `pip`, and locate a Python database driver for the
    last part of the task. I mentioned SQLAlchemy and the direct low-level database
    drivers in that same chapter. Now you need some code in the middle, and that’s
    where Python’s data structures and libraries can save you time.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try an example here, and then we’ll try again with a library that saves
    a few steps. We’ll read a CSV file, aggregate the counts in one column by unique
    values in another, and print the results. If we did this in SQL, we would use
    SELECT, JOIN, and GROUP BY.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the file, *zoo.csv*, which has columns for the type of animal, how many
    times it has bitten a visitor, the number of stitches required, and how much we’ve
    paid the visitor not to tell local television stations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We want to see which animal is costing us the most, so we aggregate the total
    hush money by the type of animal. (We’ll leave bites and stitches to an intern.)
    We use the `csv` module from [“CSV”](ch16.html#csv) and `Counter` from [“Count
    Items with Counter()”](ch11.html#counter). Save this code as *zoo_counts.py*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We skipped the first row because it contained only the column names. `counts`
    is a `Counter` object, and takes care of initializing the sum for each animal
    to zero. We also applied a little formatting to right-align the output. Let’s
    try it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Hah! It was the bear. He was our prime suspect all along, but now we have the
    numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s replicate this with a data processing toolkit called [Bubbles](http://bubbles.databrewery.org).
    You can install it by typing this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'It requires SQLAlchemy; if you don’t have that, `pip install sqlalchemy` will
    do the trick. Here’s the test program (call it *bubbles1.py*), adapted from the
    [documentation](http://bit.ly/py-bubbles):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And now, the moment of truth:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you read the documentation, you can avoid those debug print lines, and maybe
    change the format of the table.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the two examples, we see that the `bubbles` example used a single
    function call (`aggregate`) to replace our manual reading and counting of the
    CSV format. Depending on your needs, data toolkits can save a lot of work.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a more realistic example, our zoo file might have thousands of rows (it’s
    a dangerous place), with misspellings such as `bare`, commas in numbers, and so
    on. For good examples of practical data problems with Python code, I’d also recommend
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Data Crunching: Solve Everyday Problems Using Java, Python, and More*](http://bit.ly/data_crunching)—Greg
    Wilson (Pragmatic Bookshelf).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Automate the Boring Stuff*](https://automatetheboringstuff.com)—Al Sweigart
    (No Starch).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data cleanup tools can save a lot of time, and Python has many of them. For
    another example, [PETL](http://petl.readthedocs.org) does row and column extraction
    and renaming. Its [related work](http://bit.ly/petl-related) page lists many useful
    modules and products. [Chapter 22](ch22.html#ch_science) has detailed discussions
    of some especially useful data tools: Pandas, NumPy, and IPython. Although they’re
    currently best known among scientists, they’re becoming popular among financial
    and data developers. At the 2012 Pydata conference, [AppData](http://bit.ly/py-big-data)
    discussed how these three and other Python tools help process 15 terabytes of
    data daily. Python handles very large real-world data loads.'
  prefs: []
  type: TYPE_NORMAL
- en: You may also look back at the data serialization and validation tools discussed
    in [“Data Serialization”](ch17.html#serialization).
  prefs: []
  type: TYPE_NORMAL
- en: Data Validation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When cleaning up data, you’ll often need to check:'
  prefs: []
  type: TYPE_NORMAL
- en: Data type, such as integer, float, or string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Range of values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Correct values, such as a working phone number or email address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Duplicates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Missing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is especially common when processing web requests and responses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Useful Python packages for particular data types include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`validate_email`](https://pypi.org/project/validate_email)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`phonenumber`](https://pypi.org/project/phonenumbers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some useful general tools are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`validators`](https://validators.readthedocs.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pydantic`](https://pydantic-docs.helpmanual.io)—For Python 3.6 and above;
    uses type hints'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`marshmallow`](https://marshmallow.readthedocs.io/en/3.0)—Also serializes
    and deserializes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`cerberus`](http://docs.python-cerberus.org/en/stable)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[many others](https://libraries.io/search?keywords=validation&languages=Python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional Sources of Information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, you need data that originates somewhere else. Some business and
    government data sources include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[data.gov](https://www.data.gov)'
  prefs: []
  type: TYPE_NORMAL
- en: A gateway to thousands of data sets and tools. Its [APIs](https://www.data.gov/developers/apis)
    are built on [CKAN](http://ckan.org), a Python data management system.
  prefs: []
  type: TYPE_NORMAL
- en: '[Opening government with Python](http://sunlightfoundation.com)'
  prefs: []
  type: TYPE_NORMAL
- en: See the [video](http://bit.ly/opengov-py) and [slides](http://goo.gl/8Yh3s).
  prefs: []
  type: TYPE_NORMAL
- en: '[python-sunlight](http://bit.ly/py-sun)'
  prefs: []
  type: TYPE_NORMAL
- en: Libraries to access the [Sunlight APIs](http://sunlightfoundation.com/api).
  prefs: []
  type: TYPE_NORMAL
- en: '[froide](https://froide.readthedocs.io)'
  prefs: []
  type: TYPE_NORMAL
- en: A Django-based platform for managing freedom of information requests.
  prefs: []
  type: TYPE_NORMAL
- en: '[30 places to find open data on the web](http://blog.visual.ly/data-sources)'
  prefs: []
  type: TYPE_NORMAL
- en: Some handy links.
  prefs: []
  type: TYPE_NORMAL
- en: Open Source Python Business Packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Odoo](https://www.odoo.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Extensive ERP platform
  prefs: []
  type: TYPE_NORMAL
- en: '[Tryton](http://www.tryton.org)'
  prefs: []
  type: TYPE_NORMAL
- en: Another extensive business platform
  prefs: []
  type: TYPE_NORMAL
- en: '[Oscar](http://oscarcommerce.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Ecommerce framework for Django
  prefs: []
  type: TYPE_NORMAL
- en: '[Grid Studio](https://gridstudio.io)'
  prefs: []
  type: TYPE_NORMAL
- en: Python-based spreadsheet, runs locally or in the cloud
  prefs: []
  type: TYPE_NORMAL
- en: Python in Finance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Recently, the financial industry has developed a great interest in Python.
    Adapting software from [Chapter 22](ch22.html#ch_science) as well as some of their
    own, *quants* are building a new generation of financial tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Quantitative economics](http://quant-econ.net)'
  prefs: []
  type: TYPE_NORMAL
- en: A tool for economic modeling, with lots of math and Python code
  prefs: []
  type: TYPE_NORMAL
- en: '[Python for finance](http://www.python-for-finance.com)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Features the book *Derivatives Analytics with Python: Data Analytics, Models,
    Simulation, Calibration, and Hedging* by Yves Hilpisch (Wiley)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Quantopian](https://www.quantopian.com)'
  prefs: []
  type: TYPE_NORMAL
- en: An interactive website on which you can write your own Python code and run it
    against historic stock data to see how it would have done
  prefs: []
  type: TYPE_NORMAL
- en: '[PyAlgoTrade](http://gbeced.github.io/pyalgotrade)'
  prefs: []
  type: TYPE_NORMAL
- en: Another that you can use for stock backtesting, but on your own computer
  prefs: []
  type: TYPE_NORMAL
- en: '[Quandl](http://www.quandl.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Search millions of financial datasets
  prefs: []
  type: TYPE_NORMAL
- en: '[Ultra-finance](https://code.google.com/p/ultra-finance)'
  prefs: []
  type: TYPE_NORMAL
- en: A real-time stock collection library
  prefs: []
  type: TYPE_NORMAL
- en: '[*Python for Finance*](http://bit.ly/python-finance) (O’Reilly)'
  prefs: []
  type: TYPE_NORMAL
- en: A book by Yves Hilpisch with Python examples for financial modeling
  prefs: []
  type: TYPE_NORMAL
- en: Business Data Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is a special concern for business. Entire books are devoted to this
    topic, so we just mention a few Python-related tips here.
  prefs: []
  type: TYPE_NORMAL
- en: '[“Scapy”](ch17.html#scapy) discusses `scapy`, a Python-powered language for
    packet forensics. It has been used to explain some major network attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [Python Security](http://www.pythonsecurity.org) site has discussions of
    security topics, details on some Python modules, and cheat sheets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The book [*Violent Python*](http://bit.ly/violent-python) (subtitled *A Cookbook
    for Hackers, Forensic Analysts, Penetration Testers and Security Engineers*) by
    TJ O’Connor (Syngress) is an extensive review of Python and computer security.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maps have become valuable to many businesses. Python is very good at making
    maps, so we’re going to spend a little more time in this area. Managers love graphics,
    and if you can quickly whip up a nice map for your organization’s website it wouldn’t
    hurt.
  prefs: []
  type: TYPE_NORMAL
- en: In the early days of the web, I used to visit an experimental mapmaking website
    at Xerox. When big sites such as Google Maps came along, they were a revelation
    (along the lines of “why didn’t I think of that and make millions?”). Now mapping
    and *location-based services* are everywhere, and are particularly useful in mobile
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many terms overlap here: mapping, cartography, GIS (geographic information
    system), GPS (Global Positioning System), geospatial analysis, and many more.
    The blog at [Geospatial Python](http://bit.ly/geospatial-py) has an image of the
    “800-pound gorilla” systems—GDAL/OGR, GEOS, and PROJ.4 (projections)—and surrounding
    systems, represented as monkeys. Many of these have Python interfaces. Let’s talk
    about some of these, beginning with the simplest formats.'
  prefs: []
  type: TYPE_NORMAL
- en: Formats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The mapping world has lots of formats: vector (lines), raster (images), metadata
    (words), and various combinations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Esri, a pioneer of geographic systems, invented the *shapefile* format over
    20 years ago. A shapefile actually consists of multiple files, including at the
    very least the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*.shp*'
  prefs: []
  type: TYPE_NORMAL
- en: The “shape” (vector) information
  prefs: []
  type: TYPE_NORMAL
- en: '*.shx*'
  prefs: []
  type: TYPE_NORMAL
- en: The shape index
  prefs: []
  type: TYPE_NORMAL
- en: '*.dbf*'
  prefs: []
  type: TYPE_NORMAL
- en: An attribute database
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s grab a shapefile for our next example—visit the Natural Earth [1:110m
    Cultural Vectors page](http://bit.ly/cultural-vectors). Under “Admin 1 - States
    and Provinces,” click the green [download states and provinces](https://oreil.ly/7BR2o)
    box to download a zip file. After it downloads to your computer, unzip it; you
    should see these resulting files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We’ll use these for our examples.
  prefs: []
  type: TYPE_NORMAL
- en: Draw a Map from a Shapefile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section is an overly simplified demonstration of reading and displaying
    a shapefile. You’ll see that the result has problems, and that you’d be better
    off working with a higher-level mapping package, such as those in the sections
    that follow.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll need this library to read a shapefile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now for the program, *map1.py*, which I’ve modified from a Geospatial Python
    [blog post](http://bit.ly/raster-shape):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This reads the shapefile and iterates through its individual shapes. I’m checking
    for only two shape types: a polygon, which connects the last point to the first,
    and a polyline, which doesn’t. I’ve based my logic on the original post and a
    quick look at the documentation for `pyshp`, so I’m not really sure how it will
    work. Sometimes, we just need to make a start and deal with any problems as we
    find them.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let’s run it. The argument is the base name of the shapefile files, without
    any extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You should see something like [Figure 21-1](#business_map_us).
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, it drew a map that resembles the United States, but:'
  prefs: []
  type: TYPE_NORMAL
- en: It looks like a cat dragged yarn across Alaska and Hawaii; this is a *bug*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The country is squished; I need a *projection*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The picture isn’t pretty; I need better *style* control.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![inp2 2101](assets/inp2_2101.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-1\. Preliminary map
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To address the first point: I have a problem somewhere in my logic, but what
    should I do? [Chapter 19](ch19.html#ch_pythonista) discusses development tips,
    including debugging, but we can consider other options here. I could write some
    tests and bear down until I fix this, or I could just try some other mapping library.
    Maybe something at a higher level would solve all three of my problems (the stray
    lines, squished appearance, and primitive style).'
  prefs: []
  type: TYPE_NORMAL
- en: As far as I can tell, there is no bare-bones pure Python mapping package. Luckily,
    there are some fancier ones, so let’s take a look.
  prefs: []
  type: TYPE_NORMAL
- en: Geopandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Geopandas](http://geopandas.org) integrates `matplotlib`, `pandas`, and other
    Python libraries into a geospatial data platform.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The base package is installed with the familiar `pip install geopandas`, but
    it relies on other packages that you will also need to install with `pip` if you
    don’t have them already:'
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas` (version 0.23.4 or later)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shapely` (interface to GEOS)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fiona` (interface to GDAL)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pyproj` (interface to PROJ)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`six`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Geopandas can read shapefiles (including those from the previous section),
    and handily includes two from Natural Earth: country/continent outlines, and national
    capital cities. [Example 21-1](#geopandas_example) is a simple demo that uses
    both of them.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 21-1\. geopandas.py
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Run that, and you should get the map shown in [Figure 21-2](#world_map).
  prefs: []
  type: TYPE_NORMAL
- en: '![inp2 2102](assets/inp2_2102.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-2\. Geopandas map
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: To me, geopandas currently looks like the best combination for geographic data
    management and display. But there are many worthy contenders, which we look at
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Other Mapping Packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here’s a grab bag of links to other Python mapping software; many cannot be
    installed fully with `pip`, but some can with `conda` (the alternative Python
    package installer that’s especially handy for scientific software):'
  prefs: []
  type: TYPE_NORMAL
- en: '[pyshp](https://pypi.org/project/pyshp)'
  prefs: []
  type: TYPE_NORMAL
- en: A pure-Python shapefile library, mentioned earlier in [“Draw a Map from a Shapefile”](#map_shapefile).
  prefs: []
  type: TYPE_NORMAL
- en: '[kartograph](http://kartograph.org)'
  prefs: []
  type: TYPE_NORMAL
- en: Renders shapefiles into SVG maps on the server or client.
  prefs: []
  type: TYPE_NORMAL
- en: '[shapely](https://shapely.readthedocs.io)'
  prefs: []
  type: TYPE_NORMAL
- en: Addresses geometric questions such as, “What buildings in this town are within
    the 50-year flood contour?”
  prefs: []
  type: TYPE_NORMAL
- en: '[basemap](http://matplotlib.org/basemap)'
  prefs: []
  type: TYPE_NORMAL
- en: Based on `matplotlib`, draws maps and data overlays. Unfortunately, it has been
    deprecated in favor of Cartopy.
  prefs: []
  type: TYPE_NORMAL
- en: '[cartopy](https://scitools.org.uk/cartopy/docs/latest)'
  prefs: []
  type: TYPE_NORMAL
- en: Succeeds Basemap, and does some of the things that `geopandas` does.
  prefs: []
  type: TYPE_NORMAL
- en: '[folium](https://python-visualization.github.io/folium)'
  prefs: []
  type: TYPE_NORMAL
- en: Works with leaflet.js, used by `geopandas`.
  prefs: []
  type: TYPE_NORMAL
- en: '[plotly](https://plot.ly/python/maps)'
  prefs: []
  type: TYPE_NORMAL
- en: Another plotting package that includes mapping features.
  prefs: []
  type: TYPE_NORMAL
- en: '[dash](https://dash.plot.ly)'
  prefs: []
  type: TYPE_NORMAL
- en: Uses Plotly, Flask and JavaScript to create interactive visualizations, including
    maps.
  prefs: []
  type: TYPE_NORMAL
- en: '[fiona](https://github.com/Toblerity/Fiona)'
  prefs: []
  type: TYPE_NORMAL
- en: Wraps the OGR library, which handles shapefiles and other vector formats.
  prefs: []
  type: TYPE_NORMAL
- en: '[Open Street Map](https://oreil.ly/BJeha)'
  prefs: []
  type: TYPE_NORMAL
- en: Accesses the vast [OpenStreetMap](https://www.openstreetmap.org) world maps.
  prefs: []
  type: TYPE_NORMAL
- en: '[mapnik](http://mapnik.org)'
  prefs: []
  type: TYPE_NORMAL
- en: A C++ library with Python bindings, for vector (line) and raster (image) maps.
  prefs: []
  type: TYPE_NORMAL
- en: '[Vincent](http://vincent.readthedocs.org)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Translates to Vega, a JavaScript visualization tool; see the tutorial: [Mapping
    data in Python with pandas and vincent](https://oreil.ly/0TbTC).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Python for ArcGIS](http://bit.ly/py-arcgis)'
  prefs: []
  type: TYPE_NORMAL
- en: Links to Python resources for Esri’s commercial ArcGIS product.
  prefs: []
  type: TYPE_NORMAL
- en: '[Using geospatial data with python](http://bit.ly/geos-py)'
  prefs: []
  type: TYPE_NORMAL
- en: Video presentations.
  prefs: []
  type: TYPE_NORMAL
- en: '[So you’d like to make a map using Python](http://bit.ly/pythonmap)'
  prefs: []
  type: TYPE_NORMAL
- en: Uses `pandas`, `matplotlib`, `shapely`, and other Python modules to create maps
    of historic plaque locations.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Python Geospatial Development*](http://bit.ly/py-geo-dev) (Packt)'
  prefs: []
  type: TYPE_NORMAL
- en: A book by Eric Westra with examples using `mapnik` and other tools.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Learning Geospatial Analysis with Python*](http://bit.ly/learn-geo-py) (Packt)'
  prefs: []
  type: TYPE_NORMAL
- en: Another book by Joel Lawhead reviewing formats and libraries, with geospatial
    algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: '[geomancer](https://github.com/thinkingmachines/geomancer)'
  prefs: []
  type: TYPE_NORMAL
- en: Geospatial engineering, such as the distance from a point to the nearest Irish
    bar.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re interested in maps, try downloading and installing one of these packages
    and see what you can do. Or, you can avoid installing software and try connecting
    to a remote web service API yourself; [Chapter 18](ch18.html#ch_web) shows you
    how to connect to web servers and decode JSON responses.
  prefs: []
  type: TYPE_NORMAL
- en: Applications and Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I’ve been talking about drawing maps, but you can do a lot more with map data.
    *Geocoding* converts between addresses and geographic coordinates. There are many
    geocoding [APIs](https://oreil.ly/Zqw0W) (see [ProgrammableWeb’s comparison](http://bit.ly/free-geo-api))
    and Python libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[geopy](https://code.google.com/p/geopy)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[pygeocoder](https://pypi.python.org/pypi/pygeocoder)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[googlemaps](http://py-googlemaps.sourceforge.net)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you sign up with Google or another source to get an API key, you can access
    other services such as step-by-step travel directions or local search.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few sources of mapping data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.census.gov/geo/maps-data](http://www.census.gov/geo/maps-data)'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of the US Census Bureau’s map files
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.census.gov/geo/maps-data/data/tiger.html](http://www.census.gov/geo/maps-data/data/tiger)'
  prefs: []
  type: TYPE_NORMAL
- en: Heaps of geographic and demographic map data
  prefs: []
  type: TYPE_NORMAL
- en: '[http://wiki.openstreetmap.org/wiki/Potential_Datasources](http://wiki.openstreetmap.org/wiki/Potential_Datasources)'
  prefs: []
  type: TYPE_NORMAL
- en: Worldwide sources
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.naturalearthdata.com](http://www.naturalearthdata.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Vector and raster map data at three scales
  prefs: []
  type: TYPE_NORMAL
- en: I should mention the [Data Science Toolkit](http://www.datasciencetoolkit.org)
    here. It includes free bidirectional geocoding, coordinates to political boundaries
    and statistics, and more. You can also download all the data and software as a
    virtual machine (VM) and run it self-contained on your own computer.
  prefs: []
  type: TYPE_NORMAL
- en: Coming Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We go to a Science Fair and see all the Python exhibits.
  prefs: []
  type: TYPE_NORMAL
- en: Things to Do
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 21.1 Install `geopandas` and run [Example 21-1](#geopandas_example). Try modifying
    things like colors and marker sizes.
  prefs: []
  type: TYPE_NORMAL
