- en: Chapter 8\. Core Built-ins and Standard Library Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The term *built-in* has more than one meaning in Python. In many contexts, *built-in*
    means an object directly accessible to Python code without an **import** statement.
    The section [“Python built-ins”](ch07.xhtml#python_built_ins) shows Python’s mechanism
    to allow this direct access. Built-in types in Python include numbers, sequences,
    dictionaries, sets, functions (all covered in [Chapter 3](ch03.xhtml#the_python_language)),
    classes (covered in [“Python Classes”](ch04.xhtml#python_classes)), standard exception
    classes (covered in [“Exception Objects”](ch06.xhtml#exception_objects)), and
    modules (covered in [“Module Objects”](ch07.xhtml#module_objects)). [“The io Module”](ch11.xhtml#the_io_module)
    covers the file type, and [“Internal Types”](ch14.xhtml#internal_types) some other
    built-in types intrinsic to Python’s internal operation. This chapter provides
    additional coverage of built-in core types in the opening section and covers built-in
    functions available in the module builtins in [“Built-in Functions”](#built_in_functions).
  prefs: []
  type: TYPE_NORMAL
- en: Some modules are called “built-in” because they’re in the Python standard library
    (though it takes an **import** statement to use them), as opposed to add-on modules,
    also known as Python *extensions*.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers several built-in core modules: namely, the standard library
    modules sys, copy, collections, functools, heapq, argparse, and itertools. You’ll
    find a discussion of each module *x* in the respective section “The *x* Module.”'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.xhtml#strings_and_things) covers some string-related built-in
    core modules (string, codecs, and unicodedata) with the same section-name convention.
    [Chapter 10](ch10.xhtml#regular_expressions) covers re in [“Regular Expressions
    and the re Module”](ch10.xhtml#regular_expressions_and_the_re_module).'
  prefs: []
  type: TYPE_NORMAL
- en: Built-in Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Table 8-1](#pythonapostrophes_core_built_in_types) provides a brief overview
    of Python’s core built-in types. More details about many of these types, and about
    operations on their instances, are found throughout [Chapter 3](ch03.xhtml#the_python_language).
    In this section, by “any number” we mean, specifically, “any noncomplex number.”
    Also, many built-ins accept at least some of their parameters in a positional-only
    way; we use the 3.8+ positional-only marker /, covered in [“Positional-only marker”](ch03.xhtml#positional_only_marker),
    to indicate this.'
  prefs: []
  type: TYPE_NORMAL
- en: Table 8-1\. Python’s core built-in types
  prefs: []
  type: TYPE_NORMAL
- en: '| bool | bool(*x*=**False**, /) Returns **False** when *x* evaluates as falsy;
    returns **True** when *x* evaluates as truthy (see [“Boolean Values”](ch03.xhtml#boolean_values)).
    bool extends int: the built-in names **False** and **True** refer to the only
    two instances of bool. These instances are also ints equal to 0 and 1, respectively,
    but str(**True**) is ''True'' and str(**False**) is ''False''. |'
  prefs: []
  type: TYPE_TB
- en: '| bytearray | bytearray(*x*=b'''', /[, codec[, errors]]) Returns a mutable
    sequence of bytes (ints with values from 0 to 255), supporting the usual methods
    of mutable sequences, plus the methods of str. When *x* is a str, you must also
    pass codec and may pass errors; the result is just like calling bytearray(*x*.encode(codec,
    errors)). When *x* is an int, it must be >=0: the resulting instance has a length
    of *x*, and each item is initialized to 0. When *x* conforms to the [buffer protocol](https://oreil.ly/HlOmv),
    the read-only buffer of bytes from *x* initializes the instance. Otherwise, *x*
    must be an iterable yielding ints >=0 and <256; e.g., bytearray([1,2,3,4]) ==
    bytearray(b''\x01\x02\x03\x04''). |'
  prefs: []
  type: TYPE_TB
- en: '| bytes | bytes(*x*=b'''', /[, codec[, errors]]) Returns an immutable sequence
    of bytes, with the same nonmutating methods and the same initialization behavior
    as bytearray. |'
  prefs: []
  type: TYPE_TB
- en: '| complex | complex(real=0, imag=0) Converts any number, or a suitable string,
    to a complex number. imag may be present only when real is a number, and in that
    case imag is also a number: the imaginary part of the resulting complex number.
    See also [“Complex numbers”](ch03.xhtml#complex_numbers). |'
  prefs: []
  type: TYPE_TB
- en: '| dict | dict(*x*={}, /) Returns a new dictionary with the same items as *x*.
    (We cover dictionaries in [“Dictionaries”](ch03.xhtml#dictionaries).) When *x*
    is a dict, dict(*x*) returns a shallow copy of *x*, like *x*.copy(). Alternatively,
    *x* can be an iterable whose items are pairs (iterables with two items each).
    In this case, dict(*x*) returns a dictionary whose keys are the first items of
    each pair in *x*, and whose values are the corresponding second items. When a
    key appears more than once in *x*, Python uses the value corresponding to the
    last occurrence of the key. In other words, when *x* is any iterable yielding
    pairs, *c* = dict(*x*) is exactly equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also call dict with named arguments, in addition to, or instead of,
    positional argument *x*. Each named argument becomes an item in the dictionary,
    with the name as the key: each such extra item might “overwrite” an item from
    *x*. |'
  prefs: []
  type: TYPE_NORMAL
- en: '| float | float(*x*=0.0, /) Converts any number, or a suitable string, to a
    floating-point number. See [“Floating-point numbers”](ch03.xhtml#floating_point_numbers).
    |'
  prefs: []
  type: TYPE_TB
- en: '| frozenset | frozenset(*seq*=(), /) Returns a new frozen (i.e., immutable)
    set object with the same items as iterable *seq*. When *seq* is a frozenset, frozenset(*seq*)
    returns *seq* itself, just like *seq*.copy() does. See [“Set Operations”](ch03.xhtml#set_operation).
    |'
  prefs: []
  type: TYPE_TB
- en: '| int | int(*x*=0, /, base=10) Converts any number, or a suitable string, to
    an int. When *x* is a number, int truncates toward 0, “dropping” any fractional
    part. base may be present only when *x* is a string: then, base is the conversion
    base, between 2 and 36, with 10 as the default. You can explicitly pass base as
    0: the base is then 2, 8, 10, or 16, depending on the form of string *x*, just
    like for integer literals, as covered in [“Integer numbers”](ch03.xhtml#integer_numbers).
    |'
  prefs: []
  type: TYPE_TB
- en: '| list | list(*seq*=(), /) Returns a new list object with the same items as
    iterable *seq*, in the same order. When *seq* is a list, list(*seq*) returns a
    shallow copy of *seq*, like *seq*[:]. See [“Lists”](ch03.xhtml#list). |'
  prefs: []
  type: TYPE_TB
- en: '| memoryview | memoryview(*x*, /) Returns an object *m* “viewing” exactly the
    same underlying memory as *x*, which must be an object supporting the [buffer
    protocol](https://oreil.ly/HlOmv) (for example, an instance of bytes, bytearray,
    or array.array), with items of *m*.itemsize bytes each. In the normal case in
    which *m* is “one-dimensional” (we don’t cover the complicated case of “multidimensional”
    memoryview instances in this book), len(*m*) is the number of items. You can index
    *m* (returning int) or slice it (returning an instance of memoryview “viewing”
    the appropriate subset of the same underlying memory). *m* is mutable when *x*
    is (but you can’t change *m*’s size, so, when you assign to a slice, it must be
    from an iterable of the same length as the slice). *m* is a sequence, thus iterable,
    and is hashable when *x* is hashable and when *m*.itemsize is one byte.'
  prefs: []
  type: TYPE_NORMAL
- en: '*m* supplies several read-only attributes and methods; see the [online docs](https://oreil.ly/SIsvF)
    for details. Two particularly useful methods are *m*.tobytes (returns *m*’s data
    as an instance of bytes) and *m*.tolist (returns *m*’s data as a list of ints).
    |'
  prefs: []
  type: TYPE_NORMAL
- en: '| object | object() Returns a new instance of object, the most fundamental
    type in Python. Instances of type object have no functionality: the only use of
    such instances is as “sentinels”—i.e., objects not equal to any distinct object.
    For instance, when a function takes an optional argument where **None** is a legitimate
    value, you can use a sentinel for the argument’s default value to indicate that
    the argument was omitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| set | set(*seq*=(), /) Returns a new mutable set object with the same items
    as iterable *seq*. When *seq* is a set, set(*seq*) returns a shallow copy of *seq*,
    like *seq*.copy(). See [“Sets”](ch03.xhtml#sets). |'
  prefs: []
  type: TYPE_TB
- en: '| slice | slice([start, ]stop[, step], /) Returns a slice object with the read-only
    attributes start, stop, and step bound to the respective argument values, each
    defaulting to **None** when missing. For positive indices, such a slice signifies
    the same indices as range(start, stop, step). Slicing syntax, *obj*[start:stop:step],
    passes a slice object as the argument to the __getitem__, __setitem__, or __delitem__
    method of object *obj*. It is up to *obj*’s class to interpret the slices that
    its methods receive. See also [“Container slicing”](ch04.xhtml#container_slicing).
    |'
  prefs: []
  type: TYPE_TB
- en: '| str | str(*obj*='''', /) Returns a concise, readable string representation
    of *obj*. If *obj* is a string, str returns *obj*. See also repr in [Table 8-2](#pythonapostrophes_core_built_in_functio)
    and __str__ in [Table 4-1](ch04.xhtml#general_purpose_special_methods). |'
  prefs: []
  type: TYPE_TB
- en: '| super | super(), super(*cls*, *obj*, /) Returns a superobject of object *obj*
    (which must be an instance of class *cls* or of any subclass of *cls*), suitable
    for calling superclass methods. Instantiate this built-in type only within a method’s
    code. The super(*cls*, *obj*) syntax is a legacy form from Python 2 that has been
    retained for compatibility. In new code, you usually call super() without arguments,
    within a method, and Python determines the *cls* and *obj* by introspection (as
    type(self) and self, respectively). See [“Cooperative superclass method calling”](ch04.xhtml#cooperative_superclass_method_calling).
    |'
  prefs: []
  type: TYPE_TB
- en: '| tuple | tuple(*seq*=(), /) Returns a tuple with the same items as iterable
    *seq*, in order. When *seq* is a tuple, tuple returns *seq* itself, like *seq*[:].
    See [“Tuples”](ch03.xhtml#tuple). |'
  prefs: []
  type: TYPE_TB
- en: '| type | type(*obj*, /) Returns the type object that is the type of *obj* (i.e.,
    the most-derived, aka *leafmost*, type of which *obj* is an instance). type(*x*)
    is the same as *x*.__class__ for any *x*. Avoid checking equality or identity
    of types (see the following warning for details). This function is commonly used
    for debugging; for example, when value *x* does not behave as expected, inserting
    print(type(*x*), *x*). It can also be used to dynamically create classes at runtime,
    as described in [Chapter 4](ch04.xhtml#object_oriented_python). |'
  prefs: []
  type: TYPE_TB
- en: Built-in Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Table 8-2](#pythonapostrophes_core_built_in_functio) covers Python functions
    (and some types that, in practice, are only used *as if* they were functions)
    in the module builtins, in alphabetical order. Built-ins’ names are *not* keywords.
    This means you *can* bind, in local or global scope, an identifier that’s a built-in
    name, although we recommend avoiding it (see the following warning!). Names bound
    in local or global scope override names bound in built-in scope, so local and
    global names *hide* built-in ones. You can also rebind names in built-in scope,
    as covered in [“Python built-ins”](ch07.xhtml#python_built_ins).'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t Hide Built-ins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Avoid accidentally hiding built-ins: your code might need them later. It’s
    often tempting to use natural names such as input, list, or filter for your own
    variables, but *don’t do it*: these are names of built-in Python types or functions,
    and reusing them for your own purposes makes those built-in types and functions
    inaccessible. Unless you get into the habit of *never* hiding built-ins’ names
    with your own, sooner or later you’ll get mysterious bugs in your code caused
    by just such hiding occurring accidentally.'
  prefs: []
  type: TYPE_NORMAL
- en: Many built-in functions cannot be called with named arguments, only with positional
    ones. In [Table 8-2](#pythonapostrophes_core_built_in_functio), we mention cases
    in which this limitation does not hold; when it does, we also use the 3.8+ positional-only
    marker /, covered in [“Positional-only marker”](ch03.xhtml#positional_only_marker).
  prefs: []
  type: TYPE_NORMAL
- en: Table 8-2\. Python’s core built-in functions
  prefs: []
  type: TYPE_NORMAL
- en: '| __import__ | __import__(*module_name*[, *globals*[, *locals*[, *fromlist*]]],
    /) Deprecated in modern Python; use importlib.import_module, covered in [“Module
    Loading”](ch07.xhtml#module_loading). |'
  prefs: []
  type: TYPE_TB
- en: '| abs | abs(*x*, /) Returns the absolute value of number *x*. When *x* is complex,
    abs returns the square root of *x*.imag ** 2 + *x*.real ** 2 (also known as the
    magnitude of the complex number). Otherwise, abs returns *-x* when *x* < 0, or
    *x* when *x* >= 0. See also __abs__, __invert__, __neg__, and __pos__ in [Table 4-4](ch04.xhtml#abcs_with_additional_methods).
    |'
  prefs: []
  type: TYPE_TB
- en: '| all | all(*seq*, /) *seq* is an iterable. all returns **False** when any
    item of *seq* is falsy; otherwise, all returns **True**. Like the operators **and**
    and **or**, covered in [“Short-Circuiting Operators”](ch03.xhtml#short_circuiting_operators),
    all stops evaluating and returns a result as soon as it knows the answer; in the
    case of all, this means it stops as soon as a falsy item is reached, but proceeds
    throughout *seq* if all of *seq*’s items are truthy. Here is a typical toy example
    of the use of all:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When *seq* is empty, all returns **True**. |
  prefs: []
  type: TYPE_NORMAL
- en: '| any | any(*seq*, /) *seq* is an iterable. any returns **True** if any item
    of *seq* is truthy; otherwise, any returns **False**. Like the operators **and**
    and **or**, covered in [“Short-Circuiting Operators”](ch03.xhtml#short_circuiting_operators),
    any stops evaluating and returns a result as soon as it knows the answer; in the
    case of any, this means it stops as soon as a truthy item is reached, but proceeds
    throughout *seq* if all of *seq*’s items are falsy. Here is a typical toy example
    of the use of any:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When *seq* is empty, any returns **False**. |
  prefs: []
  type: TYPE_NORMAL
- en: '| ascii | ascii(*x*, /) Like repr, but escapes non-ASCII characters in the
    string it returns; the result is usually similar to that of repr. |'
  prefs: []
  type: TYPE_TB
- en: '| bin | bin(*x*, /) Returns a binary string representation of integer *x*.
    E.g., bin(23)==''0b10111‘. |'
  prefs: []
  type: TYPE_TB
- en: '| breakpoint | breakpoint() Invokes the pdb Python debugger. Set sys.breakpointhook
    to a callable function if you want breakpoint to invoke an alternate debugger.
    |'
  prefs: []
  type: TYPE_TB
- en: '| callable | callable(*obj*, /) Returns **True** when *obj* can be called;
    otherwise, returns **False**. An object can be called if it is a function, method,
    class, or type, or an instance of a class with a __call__ method. See also __call__
    in [Table 4-1](ch04.xhtml#general_purpose_special_methods). |'
  prefs: []
  type: TYPE_TB
- en: '| chr | chr(*code*, /) Returns a string of length 1, a single character corresponding
    to the integer *code* in Unicode. See also ord later in this table. |'
  prefs: []
  type: TYPE_TB
- en: '| compile | compile(*source*, *filename*, *mode*) Compiles a string and returns
    a code object usable by exec or eval. compile raises SyntaxError when *source*
    is not syntactically valid Python. When *source* is a multiline compound statement,
    the last character must be ''\n''. *mode* must be ''eval'' when *source* is an
    expression and the result is meant for eval; otherwise, *mode* must be ''exec''
    (for a single or multiple-statement string) or ''single'' (for a string containing
    a single statement) when the string is meant for exec. *filename* must be a string,
    used only in error messages (if an error occurs). See also eval later in this
    table, and [“compile and Code Objects”](ch14.xhtml#compile_and_code_objects).
    (compile also takes the optional arguments flags, dont_inherit, optimize, and
    **3.11+** _feature_version, though these are rarely used; see the [online documentation](https://oreil.ly/oYj2U)
    for more information on these arguments.) |'
  prefs: []
  type: TYPE_TB
- en: '| delattr | delattr(*obj*, *name*, /) Removes the attribute *name* from *obj*.
    delattr(*obj*, ''*ident*'') is like del *obj.ident**.* If *obj* has an attribute
    named *name* just because its class has it (as is normally the case, for example,
    for *methods* of *obj*), you cannot delete that attribute from *obj* itself. You
    may be able to delete that attribute from the *class*, if the metaclass lets you.
    If you can delete the class attribute, *obj* ceases to have the attribute, and
    so does every other instance of that class. |'
  prefs: []
  type: TYPE_TB
- en: '| dir | dir([*obj*, ]/) Called without arguments, dir returns a sorted list
    of all variable names that are bound in the current scope. dir(*obj*) returns
    a sorted list of names of attributes of *obj*, including ones coming from *obj*’s
    type or by inheritance. See also vars later in this table. |'
  prefs: []
  type: TYPE_TB
- en: '| divmod | divmod(*dividend*, *divisor*, /) Divides two numbers and returns
    a pair whose items are the quotient and remainder. See also __divmod__ in [Table 4-4](ch04.xhtml#abcs_with_additional_methods).
    |'
  prefs: []
  type: TYPE_TB
- en: '| enumerate | enumerate(iterable, start=0) Returns a new iterator whose items
    are pairs. For each such pair, the second item is the corresponding item in iterable,
    while the first item is an integer: start, start+1, start+2.... For example, the
    following snippet loops on a list L of integers, changing L in place by halving
    every even value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: enumerate is one of the few built-ins callable with named arguments. |
  prefs: []
  type: TYPE_NORMAL
- en: '| eval | eval(*expr*[, *globals*[, *locals*]]*,* /) Returns the result of an
    expression. *expr* may be a code object ready for evaluation, or a string; if
    a string, eval gets a code object by internally calling compile(*expr*, ''<string>'',
    ''eval''). eval evaluates the code object as an expression, using the *globals*
    and *locals* dictionaries as namespaces (when they’re missing, eval uses the current
    namespace). eval doesn’t execute statements: it only evaluates expressions. Nevertheless,
    eval is dangerous; avoid it unless you know and trust that *expr* comes from a
    source that you are certain is safe. See also ast.literal_eval (covered in [“Standard
    Input”](ch11.xhtml#standard_input)), and [“Dynamic Execution and exec”](ch14.xhtml#dynamic_execution_and_exec).
    |'
  prefs: []
  type: TYPE_TB
- en: '| exec | exec(*statement*[, *globals*[, *locals*]]*, /*) Like eval, but applies
    to any statement and returns **None**. exec is very dangerous, unless you know
    and trust that *statement* comes from a source that you are certain is safe. See
    also [“Statements”](ch03.xhtml#statements) and [“Dynamic Execution and exec”](ch14.xhtml#dynamic_execution_and_exec).
    |'
  prefs: []
  type: TYPE_TB
- en: '| filter | filter(*func*, *seq*, /) Returns an iterator of those items of *seq*
    for which *func* is true. *func* can be any callable object accepting a single
    argument, or **None**. *seq* can be any iterable. When *func* is callable, filter
    calls *func* on each item of *seq*, just like the following generator expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'When *func* is **None**, filter tests for truthy items, just like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| format | format(*x*, *format_spec*='''', /) Returns *x*.__format__(*format_spec*).
    See [Table 4-1](ch04.xhtml#general_purpose_special_methods). |'
  prefs: []
  type: TYPE_TB
- en: '| getattr | getattr(*obj*, *name*[, *default*], /) Returns *obj*’s attribute
    named by string *name**.* getattr(*obj*, ''*ident*'') is like *obj.ident*. When
    *default* is present and *name* is not found in *obj*, getattr returns *default*
    instead of raising AttributeError. See also [“Object attributes and items”](ch03.xhtml#object_attributes_and_items)
    and [“Attribute Reference Basics”](ch04.xhtml#attribute_reference_basics). |'
  prefs: []
  type: TYPE_TB
- en: '| globals | globals() Returns the __dict__ of the calling module (i.e., the
    dictionary used as the global namespace at the point of call). See also locals
    later in this table. (Unlike locals(), the dict returned by globals() is read/write,
    and updates to that dict are equivalent to ordinary name definitions.) |'
  prefs: []
  type: TYPE_TB
- en: '| hasattr | hasattr(*obj*, *name*, /) Returns **False** when *obj* has no attribute
    *name* (i.e., when getattr(*obj, name*) would raise AttributeError); otherwise,
    returns True. See also [“Attribute Reference Basics”](ch04.xhtml#attribute_reference_basics).
    |'
  prefs: []
  type: TYPE_TB
- en: '| hash | hash(*obj,* /) Returns the hash value for *obj**.* *obj* can be a
    dictionary key, or an item in a set, only if *obj* can be hashed. All objects
    that compare equal must have the same hash value, even if they are of different
    types. If the type of *obj* does not define equality comparison, hash(*obj*) normally
    returns id(*obj*) (see id in this table and __hash__ in [Table 4-1](ch04.xhtml#general_purpose_special_methods)).
    |'
  prefs: []
  type: TYPE_TB
- en: '| help | help([*obj*, /]) When called without an *obj* argument, begins an
    interactive help session, which you exit by entering **quit**. When *obj* is given,
    help prints the documentation for *obj* and its attributes, and returns **None**.
    help is useful in interactive Python sessions to get a quick reference to an object’s
    functionality. |'
  prefs: []
  type: TYPE_TB
- en: '| hex | hex(*x*, /) Returns a hex string representation of int *x*. See also
    __hex__ in [Table 4-4](ch04.xhtml#abcs_with_additional_methods). |'
  prefs: []
  type: TYPE_TB
- en: '| id | id(*obj*, /) Returns the integer value that is the identity of *obj*.
    The id of *obj* is unique and constant during *obj*’s lifetime^([a](ch08.xhtml#ch01fn85))
    (but may be reused at any later time after *obj* is garbage-collected, so don’t
    rely on storing or checking id values). When a type or class does not define equality
    comparison, Python uses id to compare and hash instances. For any objects *x*
    and *y*, identity check *x* **is** *y* is the same as id(*x*)==id(*y*), but more
    readable and better performing. |'
  prefs: []
  type: TYPE_TB
- en: '| input | input(*prompt*='''', /) Writes *prompt* to standard output, reads
    a line from standard input, and returns the line (without \n) as a str. At end-of-file,
    input raises EOFError. |'
  prefs: []
  type: TYPE_TB
- en: '| isinstance | isinstance(*obj, cls*, /) Returns **True** when *obj* is an
    instance of class *cls* (or any subclass of *cls*, or implements protocol or ABC
    *cls*); otherwise, returns **False**. *cls* can be a tuple whose items are classes
    (or 3.10+ multiple types joined using the &#124; operator): in this case, isinstance
    returns **True** when *obj* is an instance of any of the items of *cls*; otherwise,
    it returns **False**. See also [“Abstract Base Classes”](ch04.xhtml#abstract_base_classe)
    and [“Protocols”](ch05.xhtml#protocols). |'
  prefs: []
  type: TYPE_TB
- en: '| issubclass | issubclass(*cls1*, *cls2*, /) Returns **True** when *cls1* is
    a direct or indirect subclass of *cls2*, or defines all the elements of protocol
    or ABC *cls2*; otherwise, returns **False**. *cls1* and *cls2* must be classes.
    *cls2* can also be a tuple whose items are classes. In this case, issubclass returns
    **True** when *cls1* is a direct or indirect subclass of any of the items of *cls2*;
    otherwise, it returns **False**. For any class *C*, issubclass(*C*, *C*) returns
    **True**. |'
  prefs: []
  type: TYPE_TB
- en: '| iter | iter(*obj*, /), iter(*func*, *sentinel, /*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creates and returns an iterator (an object that you can repeatedly pass to
    the next built-in function to get one item at a time; see [“Iterators”](ch03.xhtml#iterators)).
    When called with one argument, iter(*obj*) normally returns *obj*.__iter__().
    When *obj* is a sequence without a special method __iter__, iter(*obj*) is equivalent
    to the generator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: See also [“Sequences”](ch03.xhtml#sequence) and __iter__ in [Table 4-2](ch04.xhtml#container_methods).
    |
  prefs: []
  type: TYPE_NORMAL
- en: '| iter *(cont.)* | When called with two arguments, the first argument must
    be callable without arguments, and iter(*func*, *sentinel*) is equivalent to the
    generator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Don’t Call iter in a for Clause
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed in [“The for Statement”](ch03.xhtml#the_for_statement), the statement
    **for** *x* **in** *obj* is exactly equivalent to **for** *x* **in** iter(*obj*);
    therefore, do *not* explicitly call iter in such a **for** statement. That would
    be redundant and, therefore, bad Python style, slower, and less readable.
  prefs: []
  type: TYPE_NORMAL
- en: iter is *idempotent*. In other words, when *x* is an iterator, iter(*x*) is
    *x*, as long as *x*’s class supplies an __iter__ method whose body is just **return**
    self, as an iterator’s class should. |
  prefs: []
  type: TYPE_NORMAL
- en: '| len | len(*container*, /) Returns the number of items in *container*, which
    may be a sequence, a mapping, or a set. See also __len__ in [“Container methods”](ch04.xhtml#container_method).
    |'
  prefs: []
  type: TYPE_TB
- en: '| locals | locals() Returns a dictionary that represents the current local
    namespace. Treat the returned dictionary as read-only; trying to modify it may
    or may not affect the values of local variables, and might raise an exception.
    See also globals and vars in this table. |'
  prefs: []
  type: TYPE_TB
- en: '| map | map(*func, seq*, /), map(*func*, /, **seqs*)'
  prefs: []
  type: TYPE_NORMAL
- en: map calls *func* on every item of iterable *seq* and returns an iterator of
    the results. When you call map with multiple *seqs* iterables, *func* must be
    a callable object that accepts *n* arguments (where *n* is the number of *seqs*
    arguments,). map repeatedly calls *func* with *n* arguments, one corresponding
    item from each iterable.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, map(*func*, *seq*) is just like the generator expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'is just like the generator expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: When map’s iterable arguments have different lengths, map acts as if the longer
    ones were truncated (just as zip itself does). |
  prefs: []
  type: TYPE_NORMAL
- en: '| max | max(*seq*, /, *, key=**None**[, default=...]), max(**args*, key=**None**[,
    default=...])'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the largest item in the iterable argument *seq*, or the largest one
    of multiple positional arguments *args*. You can pass a key argument, with the
    same semantics covered in [“Sorting a list”](ch03.xhtml#sorting_a_list). You can
    also pass a default argument, the value to return if *seq* is empty; when you
    don’t pass default, and *seq* is empty, max raises ValueError. (When you pass
    key and/or default, you must pass either or both as named arguments.) |
  prefs: []
  type: TYPE_NORMAL
- en: '| min | min(*seq,* /, *, key*=***None**[, default=...]), min(**args*, key*=***None**[,
    default=...])'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the smallest item in the iterable argument *seq*, or the smallest one
    of multiple positional arguments *args*. You can pass a key argument, with the
    same semantics covered in [“Sorting a list”](ch03.xhtml#sorting_a_list). You can
    also pass a default argument, the value to return if *seq* is empty; when you
    don’t pass default, and *seq* is empty, min raises ValueError. (When you pass
    key and/or default, you must pass either or both as named arguments.) |
  prefs: []
  type: TYPE_NORMAL
- en: '| next | next(*it*[, *default*], /) Returns the next item from iterator *it*,
    which advances to the next item. When *it* has no more items, next returns *default*,
    or, when you don’t pass *default*, raises StopIteration. |'
  prefs: []
  type: TYPE_TB
- en: '| oct | oct(*x*, /) Converts int *x* to an octal string. See also __oct__ in
    [Table 4-4](ch04.xhtml#abcs_with_additional_methods). |'
  prefs: []
  type: TYPE_TB
- en: '| open | open(file, mode=''r'', buffering=-1) Opens or creates a file and returns
    a new file object. open accepts many, many more optional parameters; see [“The
    io Module”](ch11.xhtml#the_io_module) for details.'
  prefs: []
  type: TYPE_NORMAL
- en: open is one of the few built-ins callable with named arguments. |
  prefs: []
  type: TYPE_NORMAL
- en: '| ord | ord(*ch*, /) Returns an int between 0 and sys.maxunicode (inclusive),
    corresponding to the single-character str argument *ch*. See also chr earlier
    in this table. |'
  prefs: []
  type: TYPE_TB
- en: '| pow | pow(*x*, *y*[, *z*], /) When *z* is present, pow(*x*, *y*, *z*) returns
    (*x* ** *y*) % *z*. When *z* is missing, pow(*x*, *y*) returns *x* ** *y*. See
    also __pow__ in [Table 4-4](ch04.xhtml#abcs_with_additional_methods). When *x*
    is an int and *y* is a nonnegative int, pow returns an int and uses Python’s full
    value range for int (though evaluating pow for large *x* and *y* integer values
    may take some time). When either *x* or *y* is a float, or *y* is < 0, pow returns
    a float (or a complex, when x < 0 and y != int(y)); in this case, pow raises OverflowError
    if *x* or *y* is too large. |'
  prefs: []
  type: TYPE_TB
- en: '| print | print(/, **args*, sep='' '', end=''\n'', file=sys.stdout, flush=**False**)
    Formats with str, and emits to stream file, each item of *args* (if any), separated
    by sep, with end after all of them; then, print flushes the stream if flush is
    truthy. |'
  prefs: []
  type: TYPE_TB
- en: '| range | range([start=0, ]stop[, step=1], /) Returns an iterator of ints in
    arithmetic progression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: When start is missing, it defaults to 0. When step is missing, it defaults to
    1. When step is 0, range raises ValueError. When step is > 0, the last item is
    the largest start+(*i**step) strictly less than stop. When step is < 0, the last
    item is the smallest start+(*i**step*)* strictly greater than stop. The iterator
    is empty when start is greater than or equal to stop and step is greater than
    0, or when start is less than or equal to stop and step is less than 0. Otherwise,
    the first item of the iterator is always start.
  prefs: []
  type: TYPE_NORMAL
- en: When what you need is a list of ints in arithmetic progression, call list(range(...)).
    |
  prefs: []
  type: TYPE_NORMAL
- en: '| repr | repr(*obj*, /) Returns a complete and unambiguous string representation
    of *obj*. When feasible, repr returns a string that you could pass to eval in
    order to create a new object with the same value as *obj*. See also str in [Table 8-1](#pythonapostrophes_core_built_in_types)
    and __repr__ in [Table 4-1](ch04.xhtml#general_purpose_special_methods). |'
  prefs: []
  type: TYPE_TB
- en: '| reversed | reversed(*seq*, /) Returns a new iterator object that yields the
    items of *seq* (which must be specifically a sequence, not just any iterable)
    in reverse order. |'
  prefs: []
  type: TYPE_TB
- en: '| round | round(number, ndigits=0) Returns a float whose value is int or float
    number rounded to ndigits digits after the decimal point (i.e., the multiple of
    10**-ndigits that is closest to number). When two such multiples are equally close
    to number, round returns the *even* multiple. Since today’s computers represent
    floating-point numbers in binary, not in decimal, most of round’s results are
    not exact, as the [tutorial](https://oreil.ly/qHMNz) in the docs explains in detail.
    See also [“The decimal Module”](ch16.xhtml#the_decimal_module) and David Goldberg’s
    famous language-independent [article](https://oreil.ly/TVFMb) on floating-point
    arithmetic. |'
  prefs: []
  type: TYPE_TB
- en: '| setattr | setattr(*obj*, *name*, *value*, /) Binds *obj*’s attribute *name*
    to *value*. setattr(*obj*, ''*ident*'', *val*) is like *obj*.*ident*=*val*. See
    also getattr earlier in this table, [“Object attributes and items”](ch03.xhtml#object_attributes_and_items),
    and [“Setting an attribute”](ch04.xhtml#setting_an_attribute). |'
  prefs: []
  type: TYPE_TB
- en: '| sorted | sorted(*seq*, /, *, key=**None**, reverse=**False**) Returns a list
    with the same items as iterable *seq*, in sorted order. Same as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: See [“Sorting a list”](ch03.xhtml#sorting_a_list) for the meaning of the arguments.
    If you want to pass key and/or reverse, you *must* pass them by name. |
  prefs: []
  type: TYPE_NORMAL
- en: '| sum | sum(*seq*, /, start=0) Returns the sum of the items of iterable *seq*
    (which should be numbers, and, in particular, cannot be strings) plus the value
    of start. When *seq* is empty, returns start. To “sum” (concatenate) an iterable
    of strings, in order, use ''''.join(*iterofstrs*), as covered in [Table 8-1](#pythonapostrophes_core_built_in_types)
    and [“Building up a string from pieces”](ch17.xhtml#building_up_a_string_from_pieces).
    |'
  prefs: []
  type: TYPE_TB
- en: '| vars | vars([*obj*, ]*/*) When called with no argument, vars returns a dictionary
    with all variables that are bound in the current scope (like locals, covered earlier
    in this table). Treat this dictionary as read-only. vars(*obj*) returns a dictionary
    with all attributes currently bound in *obj*, similar to dir, covered earlier
    in this table. This dictionary may be modifiable or not, depending on the type
    of *obj*. |'
  prefs: []
  type: TYPE_TB
- en: '| zip | zip(*seq*, /, **seqs*, strict*=***False**) Returns an iterator of tuples,
    where the *n*th tuple contains the *n*th item from each of the argument iterables.
    You must call zip with at least one (positional) argument, and all positional
    arguments must be iterable. zip returns an iterator with as many items as the
    shortest iterable, ignoring trailing items in the other iterable objects. **3.10+**
    When the iterables have different lengths and strict is **True**, zip raises ValueError
    once it reaches the end of the shortest iterable. See also map earlier in this
    table and zip_longest in [Table 8-10](#functions_and_attributes_of_the_itertoo).
    |'
  prefs: []
  type: TYPE_TB
- en: '| ^([a](ch08.xhtml#ch01fn85-marker)) Otherwise arbitrary; often, an implementation
    detail, *obj*’s address in memory. |'
  prefs: []
  type: TYPE_TB
- en: The sys Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The attributes of the sys module are bound to data and functions that provide
    information on the state of the Python interpreter or affect the interpreter directly.
    [Table 8-3](#functions_and_attributes_of_the_sys_mod) covers the most frequently
    used attributes of sys. Most sys attributes we don’t cover are meant specifically
    for use in debuggers, profilers, and integrated development environments; see
    the [online docs](https://oreil.ly/2KBRg) for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Platform-specific information is best accessed using the platform module, which
    we do not cover in this book; see the [online docs](https://oreil.ly/YJKQD) for
    details on this module.
  prefs: []
  type: TYPE_NORMAL
- en: Table 8-3\. Functions and attributes of the sys module
  prefs: []
  type: TYPE_NORMAL
- en: '| argv | The list of command-line arguments passed to the main script. argv[0]
    is the name of the main script,^([a](ch08.xhtml#ch01fn86)) or ''-c'' if the command
    line used the **-c** option. See [“The argparse Module”](#the_argparse_module)
    for one good way to use sys.argv. |'
  prefs: []
  type: TYPE_TB
- en: '| audit | audit(*event*, /, **args*) Raises an *audit event* whose name is
    str *event* and whose arguments are *args*. The rationale for Python’s audit system
    is laid out in exhaustive detail in [PEP 578](https://oreil.ly/pMcEY); Python
    itself raises the large variety of events listed in the [online docs](https://oreil.ly/SjLW1).
    To *listen* for events, call sys.addaudithook(*hook*), where *hook* is a callable
    whose arguments are a str, the event’s name, followed by arbitrary positional
    arguments. For more details, see the [docs](https://oreil.ly/4os3i). |'
  prefs: []
  type: TYPE_TB
- en: '| buil⁠t⁠i⁠n⁠_​m⁠o⁠d⁠ule_names | A tuple of strs: the names of all the modules
    compiled into this Python interpreter. |'
  prefs: []
  type: TYPE_TB
- en: '| displayhook | displayhook(*value*, /) In interactive sessions, the Python
    interpreter calls displayhook, passing it the result of each expression statement
    you enter. The default displayhook does nothing when *value* is **None**; otherwise,
    it saves *value* in the built-in variable whose name is _ (an underscore) and
    displays it via repr:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You can rebind sys.displayhook in order to change interactive behavior. The
    original value is available as sys.__displayhook__. |
  prefs: []
  type: TYPE_NORMAL
- en: '| dont_wri⁠t⁠e⁠_​b⁠y⁠t⁠ecode | When **True**, Python does not write a bytecode
    file (with extension *.pyc*) to disk when it imports a source file (with extension
    *.py*). |'
  prefs: []
  type: TYPE_TB
- en: '| excepthook | excepthook(*type*, *value*, *traceback*, /) When an exception
    is not caught by any handler, propagating all the way up the call stack, Python
    calls excepthook, passing it the exception class, object, and traceback, as covered
    in [“Exception Propagation”](ch06.xhtml#exception_propagation). The default excepthook
    displays the error and traceback. You can rebind sys.excepthook to change how
    uncaught exceptions (just before Python returns to the interactive loop or terminates)
    get displayed and/or logged. The original value is available as sys.__excepthook__.
    |'
  prefs: []
  type: TYPE_TB
- en: '| exception | exception() 3.11+ When called within an **except** clause, returns
    the current exception instance (equivalent to sys.exc_info()[1]). |'
  prefs: []
  type: TYPE_TB
- en: '| exc_info | exc_info() When the current thread is handling an exception, exc_info
    returns a tuple with three items: the class, object, and traceback for the exception.
    When the thread is not handling an exception, exc_info returns (**None**, **None**,
    **None**). To display information from a traceback, see [“The traceback Module”](ch17.xhtml#the_traceback_module).'
  prefs: []
  type: TYPE_NORMAL
- en: Holding On to a Traceback Object Can Make Some Garbage Uncollectable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A traceback object indirectly holds references to all variables on the call
    stack; if you hold a reference to the traceback (e.g., indirectly, by binding
    a variable to the tuple that exc_info returns), Python must keep in memory data
    that might otherwise be garbage-collected. Make sure that any binding to the traceback
    object is of short duration, for example with a **try**/**finally** statement
    (discussed in [“try/finally”](ch06.xhtml#trysolidusfinally)). If you must hold
    a reference to an exception *e*, clear *e*’s traceback: *e*.__traceback__=**None**.^([b](ch08.xhtml#ch01fn87))'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| exit | exit(*arg*=0, /) Raises a SystemExit exception, which normally terminates
    execution after executing cleanup handlers installed by **try**/**finally** statements,
    **with** statements, and the atexit module. When *arg* is an int, Python uses
    *arg* as the program’s exit code: 0 indicates successful termination; any other
    value indicates unsuccessful termination of the program. Most platforms require
    exit codes to be between 0 and 127. When *arg* is not an int, Python prints *arg*
    to sys.stderr, and the exit code of the program is 1 (a generic “unsuccessful
    termination” code). |'
  prefs: []
  type: TYPE_TB
- en: '| float_info | A read-only object whose attributes hold low-level details about
    the implementation of the float type in this Python interpreter. See the [online
    docs](https://oreil.ly/9vMpw) for details. |'
  prefs: []
  type: TYPE_TB
- en: '| g⁠e⁠t⁠r⁠e⁠c⁠u⁠r⁠s⁠i⁠o⁠n​l⁠i⁠m⁠i⁠t | getrecursionlimit() Returns the current
    limit on the depth of Python’s call stack. See also [“Recursion”](ch03.xhtml#recursion)
    and setrecursionlimit later in this table. |'
  prefs: []
  type: TYPE_TB
- en: '| getrefcount | getrefcount(*obj*, /) Returns the reference count of *obj*.
    Reference counts are covered in [“Garbage Collection”](ch14.xhtml#garbage_collection).
    |'
  prefs: []
  type: TYPE_TB
- en: '| getsizeof | getsizeof(*obj*[, *default*], /) Returns the size, in bytes,
    of *obj* (not counting any items or attributes *obj* may refer to), or *default*
    when *obj* does not provide a way to retrieve its size (in the latter case, when
    *default* is absent, getsizeof raises TypeError). |'
  prefs: []
  type: TYPE_TB
- en: '| maxsize | The maximum number of bytes in an object in this version of Python
    (at least 2 ** 31 - 1, that is, 2147483647). |'
  prefs: []
  type: TYPE_TB
- en: '| maxunicode | The largest codepoint for a Unicode character in this version
    of Python; currently, always 1114111 (0x10FFFF). The version of the Unicode database
    used by Python is in unicodedata.unidata_version. |'
  prefs: []
  type: TYPE_TB
- en: '| modules | A dictionary whose items are the names and module objects for all
    loaded modules. See [“Module Loading”](ch07.xhtml#module_loading) for more information
    on sys.modules. |'
  prefs: []
  type: TYPE_TB
- en: '| path | A list of strings that specifies the directories and ZIP files that
    Python searches when looking for a module to load. See [“Searching the Filesystem
    for a Module”](ch07.xhtml#searching_the_filesystem_for_a_module) for more information
    on sys.path. |'
  prefs: []
  type: TYPE_TB
- en: '| platform | A string that names the platform on which this program is running.
    Typical values are brief operating system names, such as ''darwin'', ''linux2'',
    and ''win32''. For Linux, check sys.platform.startswith(''linux''), for portability
    among Linux versions. See also the online docs for the module [platform](https://oreil.ly/LH4IP),
    which we don’t cover in this book. |'
  prefs: []
  type: TYPE_TB
- en: '| ps1, ps2 | ps1 and ps2 specify the primary and secondary interpreter prompt
    strings, initially >>> and ..., respectively. These sys attributes exist only
    in interactive interpreter sessions. If you bind either attribute to a non-str
    object *x*, Python prompts by calling str(*x*) on the object each time a prompt
    is output. This feature allows dynamic prompting: code a class that defines __str__,
    then assign an instance of that class to sys.ps1 and/or sys.ps2. For example,
    to get numbered prompts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| s⁠e⁠t⁠r⁠e⁠c⁠u⁠r⁠s⁠i⁠o⁠n​l⁠i⁠m⁠i⁠t | setrecursionlimit(*limit*, /) Sets the
    limit on the depth of Python’s call stack (the default is 1000). The limit prevents
    runaway recursion from crashing Python. Raising the limit may be necessary for
    programs that rely on deep recursion, but most platforms cannot support very large
    limits on call stack depth. More usefully, *lowering* the limit helps you check,
    during testing and debugging, that your program degrades gracefully, rather than
    abruptly crashing with a RecursionError, under situations of almost runaway recursion.
    See also [“Recursion”](ch03.xhtml#recursion) and getrecursionlimit earlier in
    this table. |'
  prefs: []
  type: TYPE_TB
- en: '| stdin, stdout,'
  prefs: []
  type: TYPE_NORMAL
- en: stderr | stdin, stdout, and stderr are predefined file-like objects that correspond
    to Python’s standard input, output, and error streams. You can rebind stdout and
    stderr to file-like objects open for writing (objects that supply a write method
    accepting a string argument) to redirect the destination of output and error messages.
    You can rebind stdin to a file-like object open for reading (one that supplies
    a readline method returning a string) to redirect the source from which built-in
    function input reads. The original values are available as __stdin__, __stdout__,
    and __stderr__. We cover file objects in [“The io Module”](ch11.xhtml#the_io_module).
    |
  prefs: []
  type: TYPE_NORMAL
- en: '| tracebacklimit | The maximum number of levels of traceback displayed for
    unhandled exceptions. By default, this attribute is not defined (i.e., there is
    no limit). When sys.tracebacklimit is <= 0, Python prints only the exception type
    and value, without a traceback. |'
  prefs: []
  type: TYPE_TB
- en: '| version | A string that describes the Python version, build number and date,
    and C compiler used. Use sys.version only for logging or interactive output; to
    perform version comparisons, use sys.version_info. |'
  prefs: []
  type: TYPE_TB
- en: '| version_info | A namedtuple of the major, minor, micro, releaselevel, and
    serial fields of the running Python version. For example, in the first post-beta
    release of Python 3.10, sys.version_info was sys.version_info(major=3, minor=10,
    micro=0, releaselevel=''final'', serial=0), equivalent to the tuple (3, 10, 0,
    ''final'', 0). This form is defined to be directly comparable between versions;
    to see if the current version running is greater than or equal to, say, 3.8, you
    can test sys.version_info[:3] >= (3, 8, 0). (Do *not* do string comparisons of
    the *string* sys.version, since the string "3.10" would compare as less than "3.9"!)
    |'
  prefs: []
  type: TYPE_TB
- en: '| ^([a](ch08.xhtml#ch01fn86-marker)) It could, of course, also be a path to
    the script, and/or a symbolic link to it, if that’s what you gave Python.^([b](ch08.xhtml#ch01fn87-marker))
    One of the book’s authors had this very problem when memoizing return values and
    exceptions raised in pyparsing: the cached exception tracebacks held many object
    references and interfered with garbage collection. The solution was to clear the
    tracebacks of the exceptions before putting them in the cache. |'
  prefs: []
  type: TYPE_TB
- en: The copy Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed in [“Assignment Statements”](ch03.xhtml#assignment_statements),
    assignments in Python do not *copy* the righthand-side object being assigned.
    Rather, assignments *add references* to the RHS object. When you want a *copy*
    of object *x*, ask *x* for a copy of itself, or ask *x*’s type to make a new instance
    copied from *x*. If *x* is a list, list(*x*) returns a copy of *x*, as does *x*[:].
    If *x* is a dictionary, dict(*x*) and *x*.copy() return a copy of *x*. If *x*
    is a set, set(*x*) and *x*.copy() return a copy of *x*. In each case, this book’s
    authors prefer the uniform and readable idiom of calling the type, but there is
    no consensus on this style issue in the Python community.
  prefs: []
  type: TYPE_NORMAL
- en: 'The copy module supplies a copy function to create and return a copy of many
    types of objects. Normal copies, such as those returned by list(*x*) for a list
    *x* and copy.copy(*x*) for any *x*, are known as *shallow* copies: when *x* has
    references to other objects (either as items or as attributes), a normal (shallow)
    copy of *x* has distinct references to the *same* objects. Sometimes, however,
    you need a *deep* copy, where referenced objects are deep-copied recursively (fortunately,
    this need is rare, since a deep copy can take a lot of memory and time); for these
    cases, the copy module also supplies a deepcopy function. These functions are
    discussed further in [Table 8-4](#copy_module_functions).'
  prefs: []
  type: TYPE_NORMAL
- en: Table 8-4\. copy module functions
  prefs: []
  type: TYPE_NORMAL
- en: '| copy | copy(*x*) Creates and returns a shallow copy of *x*, for *x* of many
    types (modules, files, frames, and other internal types, however, are not supported).
    When *x* is immutable, copy.copy(*x*) may return *x* itself as an optimization.
    A class can customize the way copy.copy copies its instances by having a special
    method __copy__(self) that returns a new object, a shallow copy of self. |'
  prefs: []
  type: TYPE_TB
- en: '| deepcopy | deepcopy(*x*,[memo]) Makes a deep copy of *x* and returns it.
    Deep copying implies a [recursive walk](https://oreil.ly/8Sf4q) over a directed
    (but not necessarily [acyclic](https://oreil.ly/RivIZ)) graph of references. Be
    aware that to reproduce the graph’s exact shape, when references to the same object
    are met more than once during the walk, you must *not* make distinct copies; rather,
    you must use *references* to the same copied object. Consider the following simple
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'original[0] **is** original[1] is **True** (i.e., the two items of original
    refer to the same object). This is an important property of original, and anything
    claiming to be “a copy” must preserve it. The semantics of copy.deepcopy ensure
    that thecopy[0] **is** thecopy[1] is also **True**: the graphs of references of
    original and thecopy have the same shape. Avoiding repeated copying has an important
    beneficial side effect: it prevents infinite loops that would otherwise occur
    when the graph of references has cycles.'
  prefs: []
  type: TYPE_NORMAL
- en: 'copy.deepcopy accepts a second, optional argument: memo, a dict that maps the
    id of each object already copied to the new object that is its copy. memo is passed
    by all recursive calls of deepcopy to itself; you may also explicitly pass it
    (normally as an originally empty dict) if you also need to obtain a correspondence
    map between the identities of originals and copies (the final state of memo will
    then be just such a mapping).'
  prefs: []
  type: TYPE_NORMAL
- en: A class can customize the way copy.deepcopy copies its instances by having a
    special method __deepcopy__(self, memo) that returns a new object, a deep copy
    of self. When __deepcopy__ needs to deep-copy some referenced object *subobject*,
    it must do so by calling copy.deepcopy(*subobject*, memo). When a class has no
    special method __deepcopy__, copy.deepcopy on an instance of that class also tries
    calling the special methods __getinitargs__, __getnewargs__, __getstate__, and
    __setstate__, covered in [“Pickling instances”](ch12.xhtml#pickling_instances).
    |
  prefs: []
  type: TYPE_NORMAL
- en: The collections Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The collections module supplies useful types that are collections (i.e., containers),
    as well as the ABCs covered in [“Abstract Base Classes”](ch04.xhtml#abstract_base_classe).
    Since Python 3.4, the ABCs have been in collections.abc; for backward compatibility
    they could still be accessed directly in collections itself until Python 3.9,
    but this functionality was removed in 3.10.
  prefs: []
  type: TYPE_NORMAL
- en: ChainMap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'ChainMap “chains” multiple mappings together; given a ChainMap instance *c*,
    accessing *c*[*key*] returns the value in the first of the mappings that has that
    key, while *all* changes to *c* affect only the very first mapping in *c*. To
    further explain, you could approximate this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Other methods could be defined for efficiency, but this is the minimum set that
    a MutableMapping requires. See the [online docs](https://oreil.ly/WgfFo) for more
    details and a collection of recipes on how to use ChainMap.
  prefs: []
  type: TYPE_NORMAL
- en: Counter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Counter is a subclass of dict with int values that are meant to *count* how
    many times a key has been seen (although values are allowed to be <= 0); it’s
    roughly equivalent to types that other languages call “bag” or “multiset” types.
    A Counter instance is normally built from an iterable whose items are hashable:
    *c* = collections.Counter(*iterable*). Then, you can index *c* with any of *iterable*’s
    items to get the number of times that item appeared. When you index *c* with any
    missing key, the result is 0 (to *remove* an entry in *c*, use **del** *c*[*entry*];
    setting *c*[*entry*]=0 leaves *entry* in *c*, with a value of 0).'
  prefs: []
  type: TYPE_NORMAL
- en: '*c* supports all methods of dict; in particular, *c*.update(*otheriterable*)
    updates all the counts, incrementing them according to occurrences in *otheriterable*.
    So, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'leaves *c*[''o''] giving 4, and *c*[''f''] and *c*[''m''] each giving 1. Note
    that removing an entry from *c* (with **del**) may *not* decrement the counter,
    but subtract (described in the following table) does:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In addition to dict methods, *c* supports the extra methods detailed in [Table 8-5](#methods_of_a_counter_instance_c).
  prefs: []
  type: TYPE_NORMAL
- en: Table 8-5\. Methods of a Counter instance c
  prefs: []
  type: TYPE_NORMAL
- en: '| elements | *c*.elements() Yields, in arbitrary order, keys in *c* with *c*[*key*]>0,
    yielding each key as many times as its count. |'
  prefs: []
  type: TYPE_TB
- en: '| mo⁠s⁠t⁠_​c⁠o⁠m⁠mon | *c*.most_common([*n*, /]) Returns a list of pairs for
    the *n* keys in *c* with the highest counts (all of them, if you omit *n*), in
    order of decreasing count (“ties” between keys with the same count are resolved
    arbitrarily); each pair is of the form (*k*, *c*[*k*]), where *k* is one of the
    *n* most common keys in *c*. |'
  prefs: []
  type: TYPE_TB
- en: '| subtract | *c*.subtract(*iterable=***None**, /, ***kwds*) Like *c*.update(*iterable*)
    “in reverse”—that is, *subtracting* counts rather than *adding* them. Resulting
    counts in *c* can be <= 0. |'
  prefs: []
  type: TYPE_TB
- en: '| total | *c.*total() **3.10+** Returns the sum of all the individual counts.
    Equivalent to sum(*c*.values()). |'
  prefs: []
  type: TYPE_TB
- en: Counter objects support common arithmetic operators, such as +, -, &, and |
    for addition, subtraction, union, and intersection. See the [online docs](https://oreil.ly/MylAp)
    for more details and a collection of useful recipes on how to use Counter.
  prefs: []
  type: TYPE_NORMAL
- en: OrderedDict
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'OrderedDict is a subclass of dict with additional methods to access and manipulate
    items with respect to their insertion order. *o*.popitem() removes and returns
    the item at the most recently inserted key; *o*.move_to_end(*key*, last=**True**)
    moves the item with key *key* to the end (when last is **True**, the default)
    or to the start (when last is **False**). Equality tests between two instances
    of OrderedDict are order sensitive; equality tests between an instance of OrderedDict
    and a dict or other mapping are not. Since Python 3.7, dict insertion order is
    guaranteed to be maintained: many uses that previously required OrderedDict can
    now just use ordinary Python dicts. A significant difference remaining between
    the two is that OrderedDict’s test for equality with other OrderedDicts is order
    sensitive, while dict’s equality test is not. See the [online docs](https://oreil.ly/JSvPS)
    for more details and a collection of recipes on how to use OrderedDict.'
  prefs: []
  type: TYPE_NORMAL
- en: defaultdict
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'defaultdict extends dict and adds one per instance attribute, named default_factory.
    When an instance *d* of defaultdict has **None** as the value of *d*.default_factory,
    *d* behaves exactly like a dict. Otherwise, *d*.default_factory must be callable
    without arguments, and *d* behaves just like a dict except when you access *d*
    with a key *k* that is not in *d*. In this specific case, the indexing *d*[*k*]
    calls *d*.default_factory(), assigns the result as the value of *d*[*k*], and
    returns the result. In other words, the type defaultdict behaves much like the
    following Python-coded class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: As this Python equivalent implies, to instantiate defaultdict you usually pass
    it an extra first argument (before any other arguments, positional and/or named,
    if any, to pass on to plain dict). The extra first argument becomes the initial
    value of default_factory; you can also access and rebind default_factory later,
    though doing so is infrequent in normal Python code.
  prefs: []
  type: TYPE_NORMAL
- en: All behavior of defaultdict is essentially as implied by this Python equivalent
    (except str and repr, which return strings different from those they would return
    for a dict). Named methods, such as get and pop, are not affected. All behavior
    related to keys (method keys, iteration, membership test via operator in, etc.)
    reflects exactly the keys that are currently in the container (whether you put
    them there explicitly, or implicitly via an indexing that called default_factory).
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical use of defaultdict is, for example, to set default_factory to list,
    to make a mapping from keys to lists of values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Called with any iterable whose items are pairs of the form (*key*, *value*),
    with all keys being hashable, this make_multi_dict function returns a mapping
    that associates each key to the lists of one or more values that accompanied it
    in the iterable (if you want a pure dict result, change the last statement into
    return dict(d)—this is rarely necessary).
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t want duplicates in the result, and every *value* is hashable, use
    a collections.defaultdict(set), and add rather than append in the loop.^([2](ch08.xhtml#ch01fn88))
  prefs: []
  type: TYPE_NORMAL
- en: deque
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: deque is a sequence type whose instances are “double-ended queues” (additions
    and removals at either end are fast and thread-safe). A deque instance *d* is
    a mutable sequence, with an optional maximum length, and can be indexed and iterated
    on (however, *d* cannot be sliced; it can only be indexed one item at a time,
    whether for access, rebinding, or deletion). If a deque instance *d* has a maximum
    length, when items are added to either side of *d* so that *d*’s length exceeds
    that maximum, items are silently dropped from the other side.
  prefs: []
  type: TYPE_NORMAL
- en: deque is especially useful for implementing first-in, first-out (FIFO) queues.^([3](ch08.xhtml#ch01fn89))
    deque is also good for maintaining “the latest *N* things seen,” also known in
    some other languages as a *ring buffer*.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 8-6](#deque_methods) lists the methods the deque type supplies.'
  prefs: []
  type: TYPE_NORMAL
- en: Table 8-6\. deque methods
  prefs: []
  type: TYPE_NORMAL
- en: '| deque | deque(*seq*=(), /, maxlen=**None**) The initial items of *d* are
    those of *seq*, in the same order. *d*.maxlen is a read-only attribute: when its
    value is **None**, *d* has no maximum length; when an int, it must be >=0. *d*’s
    maximum length is *d*.maxlen. |'
  prefs: []
  type: TYPE_TB
- en: '| append | *d*.append(*item*, /) Appends *item* at the right (end) of *d*.
    |'
  prefs: []
  type: TYPE_TB
- en: '| appendleft | *d*.appendleft(*item*, /) Appends *item* at the left (start)
    of *d*. |'
  prefs: []
  type: TYPE_TB
- en: '| clear | *d*.clear() Removes all items from *d*, leaving it empty. |'
  prefs: []
  type: TYPE_TB
- en: '| extend | *d*.extend(*iterable*, /) Appends all items of *iterable* at the
    right (end) of *d*. |'
  prefs: []
  type: TYPE_TB
- en: '| extendleft | *d*.extendleft(*iterable*, /) Appends all items of *iterable*
    at the left (start) of *d*, in reverse order. |'
  prefs: []
  type: TYPE_TB
- en: '| pop | *d*.pop() Removes and returns the last (rightmost) item from *d*. If
    *d* is empty, raises IndexError. |'
  prefs: []
  type: TYPE_TB
- en: '| popleft | *d*.popleft() Removes and returns the first (leftmost) item from
    *d*. If *d* is empty, raises IndexError. |'
  prefs: []
  type: TYPE_TB
- en: '| rotate | *d*.rotate(*n*=1, /) Rotates *d n* steps to the right (if *n*<0,
    rotates left). |'
  prefs: []
  type: TYPE_TB
- en: Avoid Indexing or Slicing a deque
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: deque is primarily intended for cases that access, add, and remove items from
    either the deque’s start or end. While indexing or slicing into a deque is possible,
    it may only have O(n) performance (vs O(1) for list) when accessing an inner value
    using deque[i] form. If you must access inner values, consider using a list instead.
  prefs: []
  type: TYPE_NORMAL
- en: The functools Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The functools module supplies functions and types supporting functional programming
    in Python, listed in [Table 8-7](#functions_and_attributes_of_the_functoo).
  prefs: []
  type: TYPE_NORMAL
- en: Table 8-7\. Functions and attributes of the functools module
  prefs: []
  type: TYPE_NORMAL
- en: '| cach⁠e⁠d⁠_​p⁠r⁠o⁠perty | cached_property(func) 3.8+ A caching version of
    the property decorator. Evaluating the property the first time caches the returned
    value, so that subsequent calls can return the cached value instead of repeating
    the property calculation. cached_property uses a threading lock to ensure that
    the property calculation is performed only once, even in a multithreaded environment.^([a](ch08.xhtml#ch01fn90))
    |'
  prefs: []
  type: TYPE_TB
- en: '| lru_cache, cache | lru_cache(max_size=128, typed=**False**), cache()'
  prefs: []
  type: TYPE_NORMAL
- en: A *memoizing* decorator suitable for decorating a function whose arguments are
    all hashable, adding to the function a cache storing the last max_size results
    (max_size should be a power of 2, or **None** to have the cache keep all previous
    results); when you call the decorated function again with arguments that are in
    the cache, it immediately returns the previously cached result, bypassing the
    underlying function’s body code. When typed is **True**, arguments that compare
    equal but have different types, such as 23 and 23.0, are cached separately. 3.9+
    If setting max_size to **None**, use cache instead. For more details and examples,
    see the [online docs](https://oreil.ly/hLRYd). 3.8+ lru_cache may also be used
    as a decorator with no (). |
  prefs: []
  type: TYPE_NORMAL
- en: '| partial | partial(*func*, /, **a, **k*) Returns a callable *p* that is just
    like *func* (which is any callable), but with some positional and/or named parameters
    already bound to the values given in *a* and *k*. In other words, *p* is a *partial
    application* of *func*, often also known (with debatable correctness, but colorfully,
    in honor of mathematician Haskell Curry) as a *currying* of *func* to the given
    arguments. For example, say that we have a list of numbers L and want to clip
    the negative ones to 0. One way to do it is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'as an alternative to the **lambda**-using snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'and to the most concise approach, a list comprehension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: functools.partial comes into its own in situations that demand callbacks, such
    as event-driven programming for some GUIs and networking applications.
  prefs: []
  type: TYPE_NORMAL
- en: partial returns a callable with the attributes func (the wrapped function),
    args (the tuple of prebound positional arguments), and keywords (the dict of prebound
    named arguments, or **None**). |
  prefs: []
  type: TYPE_NORMAL
- en: '| reduce | reduce(*func*, *seq*[, *init*], /) Applies *func* to the items of
    *seq*, from left to right, to reduce the iterable to a single value. *func* must
    be callable with two arguments. reduce calls *func* on the first two items of
    *seq*, then on the result of the first call and the third item, and so on, and
    returns the result of the last such call. When *init* is present, reduce uses
    it before *seq*’s first item, if any. When *init* is missing, *seq* must be nonempty.
    When *init* is missing and *seq* has only one item, reduce returns *seq*[0]. Similarly,
    when *init* is present and *seq* is empty, reduce returns *init**.* reduce is
    thus roughly equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'An example use of reduce is to compute the product of a sequence of numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| singledispatch, singledispatchmethod | Function decorators to support multiple
    implementations of a method with differing types for their first argument. See
    the [online docs](https://oreil.ly/1nle3) for a detailed description. |'
  prefs: []
  type: TYPE_TB
- en: '| total_ordering | A class decorator suitable for decorating classes that supply
    at least one inequality comparison method, such as __lt__, and, ideally, also
    supply __eq__. Based on the class’s existing methods, the class decorator total_ordering
    adds to the class all other inequality comparison methods that aren’t implemented
    in the class itself or any of its superclasses, removing the need for you to add
    boilerplate code for them. |'
  prefs: []
  type: TYPE_TB
- en: '| wraps | wraps(wrapped) A decorator suitable for decorating functions that
    wrap another function, wrapped (often nested functions within another decorator).
    wraps copies the __name__, __doc__, and __module__ attributes of wrapped on the
    decorated function, thus improving the behavior of the built-in function help,
    and of doctests, covered in [“The doctest Module”](ch17.xhtml#the_doctest_module).
    |'
  prefs: []
  type: TYPE_TB
- en: '| ^([a](ch08.xhtml#ch01fn90-marker)) In Python versions 3.8 to 3.11, cached_property
    is implemented using a class-level lock. As such, it synchronizes for all instances
    of the class or any subclass, not just the current instance. Thus, cached_property
    can reduce performance in a multithreaded environment, and is *not* recommended.
    |'
  prefs: []
  type: TYPE_TB
- en: The heapq Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The heapq module uses [*min-heap*](https://oreil.ly/RU6F_) algorithms to keep
    a list in “nearly sorted” order as items are inserted and extracted. heapq’s operation
    is faster than calling a list’s sort method after each insertion, and much faster
    than bisect (covered in the [online docs](https://oreil.ly/nZ_9m)). For many purposes,
    such as implementing “priority queues,” the nearly sorted order supported by heapq
    is just as good as a fully sorted order, and faster to establish and maintain.
    The heapq module supplies the functions listed in [Table 8-8](#functions_of_the_heapq_module).
  prefs: []
  type: TYPE_NORMAL
- en: Table 8-8\. Functions of the heapq module
  prefs: []
  type: TYPE_NORMAL
- en: '| heapify | heapify(*alist*, /) Permutes list *alist* as needed to make it
    satisfy the (min) heap condition:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For any *i* >= 0:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: alist[*i*] <= alist[2 * *i* + 1] and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: alist[*i*] <= alist[2 * *i* + 2]
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: as long as all the indices in question are <len(*alist*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a list satisfies the (min) heap condition, the list’s first item is the smallest
    (or equal-smallest) one. A sorted list satisfies the heap condition, but many
    other permutations of a list also satisfy the heap condition without requiring
    the list to be fully sorted. heapify runs in O(len(*alist*)) time. |
  prefs: []
  type: TYPE_NORMAL
- en: '| heappop | heappop(*alist*, /) Removes and returns the smallest (first) item
    of *alist*, a list that satisfies the heap condition, and permutes some of the
    remaining items of *alist* to ensure the heap condition is still satisfied after
    the removal. heappop runs in O(log(len(*alist*))) time. |'
  prefs: []
  type: TYPE_TB
- en: '| heappush | heappush(*alist*, *item*, /) Inserts *item* in *alist*, a list
    that satisfies the heap condition, and permutes some items of *alist* to ensure
    the heap condition is still satisfied after the insertion. heappush runs in O(log(len(*alist*)))
    time. |'
  prefs: []
  type: TYPE_TB
- en: '| heappushpop | heappushpop(*alist*, *item*, /) Logically equivalent to heappush
    followed by heappop, similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'heappushpop runs in O(log(len(*alist*))) time and is generally faster than
    the logically equivalent function just shown. heappushpop can be called on an
    empty *alist*: in that case, it returns the *item* argument, as it does when *item*
    is smaller than any existing item of *alist*. |'
  prefs: []
  type: TYPE_NORMAL
- en: '| heapreplace | heapreplace(*alist*, *item*, /) Logically equivalent to heappop
    followed by heappush, similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'heapreplace runs in O(log(len(*alist*))) time and is generally faster than
    the logically equivalent function just shown. heapreplace cannot be called on
    an empty *alist*: heapreplace always returns an item that was already in *alist*,
    never the *item* just being pushed onto it. |'
  prefs: []
  type: TYPE_NORMAL
- en: '| merge | merge(**iterables*) Returns an iterator yielding, in sorted order
    (smallest to largest), the items of the *iterables*, each of which must be smallest-to-largest
    sorted. |'
  prefs: []
  type: TYPE_TB
- en: '| nlargest | nlargest(*n*, *seq*, /, key=**None**) Returns a reverse-sorted
    list with the *n* largest items of iterable *seq* (or less than *n* if *seq* has
    fewer than *n* items); like sorted(*seq*, reverse=**True**)[:*n*], but faster
    when *n* is “small enough”^([a](ch08.xhtml#ch01fn91)) compared to len(*seq*).
    You may also specify a (named or positional) key= argument, like you can for sorted.
    |'
  prefs: []
  type: TYPE_TB
- en: '| nsmallest | nsmallest(*n*, *seq*, /, key=**None**) Returns a sorted list
    with the *n* smallest items of iterable *seq* (or less than *n* if *seq* has fewer
    than *n* items); like sorted(*seq*)[:*n*], but faster when *n* is “small enough”
    compared to len(*seq*). You may also specify a (named or positional) key= argument,
    like you can for sorted. |'
  prefs: []
  type: TYPE_TB
- en: '| ^([a](ch08.xhtml#ch01fn91-marker)) To find out how specific values of *n*
    and len(*seq*) affect the timing of nlargest, nsmallest, and sorted on your specific
    Python version and machine, use timeit, covered in [“The timeit module”](ch17.xhtml#the_timeit_module).
    |'
  prefs: []
  type: TYPE_TB
- en: The Decorate–Sort–Undecorate Idiom
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Several functions in the heapq module, although they perform comparisons, do
    not accept a key= argument to customize the comparisons. This is inevitable, since
    the functions operate in place on a plain list of the items: they have nowhere
    to “stash away” custom comparison keys computed once and for all.'
  prefs: []
  type: TYPE_NORMAL
- en: When you need both heap functionality and custom comparisons, you can apply
    the good old [*decorate–sort–undecorate (DSU)* idiom](https://oreil.ly/7iR8O)^([4](ch08.xhtml#ch01fn92))
    (which used to be crucial to optimize sorting in ancient versions of Python, before
    the key= functionality was introduced).
  prefs: []
  type: TYPE_NORMAL
- en: 'The DSU idiom, as applied to heapq, has the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: Decorate
  prefs: []
  type: TYPE_NORMAL
- en: Build an auxiliary list *A* where each item is a tuple starting with the sort
    key and ending with the item of the original list *L*.
  prefs: []
  type: TYPE_NORMAL
- en: Sort
  prefs: []
  type: TYPE_NORMAL
- en: Call heapq functions on *A*, typically starting with heapq.heapify(*A*).^([5](ch08.xhtml#ch01fn93))
  prefs: []
  type: TYPE_NORMAL
- en: Undecorate
  prefs: []
  type: TYPE_NORMAL
- en: When you extract an item from *A*, typically by calling heapq.heappop(*A*),
    return just the last item of the resulting tuple (which was an item of the original
    list *L*).
  prefs: []
  type: TYPE_NORMAL
- en: When you add an item to *A* by calling heapq.heappush(*A*, /, *item*), decorate
    the actual item you’re inserting into a tuple starting with the sort key.
  prefs: []
  type: TYPE_NORMAL
- en: 'This sequence of operations can be wrapped up in a class, as in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we use an increasing number in the middle of the decorated
    tuple (after the sort key, before the actual item) to ensure that actual items
    are *never* compared directly, even if their sort keys are equal (this semantic
    guarantee is an important aspect of the key argument’s functionality for sort
    and the like).
  prefs: []
  type: TYPE_NORMAL
- en: The argparse Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you write a Python program meant to be run from the command line (or from
    a shell script in Unix-like systems, or a batch file in Windows), you often want
    to let the user pass to the program, on the command line or within the script,
    *command-line arguments* (including *command-line options*, which by convention
    are arguments starting with one or two dash characters). In Python, you can access
    the arguments as sys.argv, an attribute of the module sys holding those arguments
    as a list of strings (sys.argv[0] is the name or path by which the user started
    your program; the arguments are in the sublist sys.argv[1:]). The Python standard
    library offers three modules to process those arguments; we only cover the newest
    and most powerful one, argparse, and we only cover a small, *core* subset of argparse’s
    rich functionality. See the online [reference](https://oreil.ly/v_ml0) and [tutorial](https://oreil.ly/QWg01)
    for much, much more. argparse provides one class, which has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ArgumentParser | ArgumentParser(***kwargs*) ArgumentParser is the class whose
    instances perform argument parsing. It accepts many named arguments, mostly meant
    to improve the help message that your program displays if command-line arguments
    include -h or --help. One named argument you should always pass is description=,
    a string summarizing the purpose of your program. |'
  prefs: []
  type: TYPE_TB
- en: Given an instance *ap* of ArgumentParser, prepare it with one or more calls
    to *ap*.add_argument, then use it by calling *ap*.parse_args() without arguments
    (so it parses sys.argv). The call returns an instance of argparse.Namespace, with
    your program’s arguments and options as attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'add_argument has a mandatory first argument: an identifier string for positional
    command-line arguments, or a flag name for command-line options. In the latter
    case, pass one or more flag names; an option can have both a short name (dash,
    then a character) and a long name (two dashes, then an identifier).'
  prefs: []
  type: TYPE_NORMAL
- en: After the positional arguments, pass to add_argument zero or more named arguments
    to control its behavior. [Table 8-9](#common_named_arguments_to_add_argument)
    lists the most commonly used ones.
  prefs: []
  type: TYPE_NORMAL
- en: Table 8-9\. Common named arguments to add_argument
  prefs: []
  type: TYPE_NORMAL
- en: '| action | What the parser does with this argument. Default: ''store'', which
    stores the argument’s value in the namespace (at the name given by dest, described
    later in this table). Also useful: ''store_true'' and ''store_false'', making
    an option into a bool (defaulting to the opposite bool if the option is not present),
    and ''append'', appending argument values to a list (and thus allowing an option
    to be repeated). |'
  prefs: []
  type: TYPE_TB
- en: '| choices | A set of values allowed for the argument (parsing the argument
    raises an exception if the value is not among these). Default: no constraints.
    |'
  prefs: []
  type: TYPE_TB
- en: '| default | Value if the argument is not present. Default: **None**. |'
  prefs: []
  type: TYPE_TB
- en: '| dest | Name of the attribute to use for this argument. Default: same as the
    first positional argument stripped of leading dashes, if any. |'
  prefs: []
  type: TYPE_TB
- en: '| help | A str describing the argument, for help messages. |'
  prefs: []
  type: TYPE_TB
- en: '| nargs | The number of command-line arguments used by this logical argument.
    Default: 1, stored in the namespace. Can be an int > 0 (uses that many arguments,
    stores them as a list), ''?'' (1 or none, in which case it uses default), ''*''
    (0 or more, stored as a list), ''+'' (1 or more, stored as a list), or argparse.REMAINDER
    (all remaining arguments, stored as a list). |'
  prefs: []
  type: TYPE_TB
- en: '| type | A callable accepting a string, often a type such as int; used to transform
    values from strings to something else. Can be an instance of argparse.FileType
    to open the string as a filename (for reading if FileType(''r''), for writing
    if FileType(''w''), and so on). |'
  prefs: []
  type: TYPE_TB
- en: 'Here’s a simple example of argparse—save this code in a file called *greet.py*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Now, **python** **greet.py** prints Hello, World!, while **python** **greet.py**
    **--formal Cornelia** prints Most felicitous salutations, o Cornelia.
  prefs: []
  type: TYPE_NORMAL
- en: The itertools Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The itertools module offers high-performance building blocks to build and manipulate
    iterators. To handle long processions of items, iterators are often better than
    lists, thanks to the iterators’ intrinsic “lazy evaluation” approach: an iterator
    produces items one at a time, as needed, while all items of a list (or other sequence)
    must be in memory at the same time. This approach even makes it feasible to build
    and use unbounded iterators, while lists must always have finite numbers of items
    (since any machine has a finite amount of memory).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 8-10](#functions_and_attributes_of_the_itertoo) covers the most frequently
    used attributes of itertools; each of them is an iterator type, which you call
    to get an instance of the type in question, or a factory function behaving similarly.
    See the [online docs](https://oreil.ly/d5Eew) for more itertools attributes, including
    *combinatorial* generators for permutations, combinations, and Cartesian products,
    as well as a useful taxonomy of itertools attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: The online docs also offer recipes describing ways to combine and use itertools
    attributes. The recipes assume you have **from** itertools **import** * at the
    top of your module; this is *not* recommended use, just an assumption to make
    the recipes’ code more compact. It’s best to **import** itertools **as** it, then
    use references such as it.*something* rather than the more verbose itertools.*something*.^([6](ch08.xhtml#ch01fn94))
  prefs: []
  type: TYPE_NORMAL
- en: Table 8-10\. Functions and attributes of the itertools module
  prefs: []
  type: TYPE_NORMAL
- en: '| accumulate | accumulate(*seq*, *func*, /[, initial*=init*]) Similar to functools.reduce(*func*,
    *seq*), but returns an iterator of all the intermediate computed values, not just
    the final value. **3.8+** You can also pass an initial value *init*, which works
    the same way as in functools.reduce (see [Table 8-7](#functions_and_attributes_of_the_functoo)).
    |'
  prefs: []
  type: TYPE_TB
- en: '| chain | chain(**iterables*) Yields items from the first argument, then items
    from the second argument, and so on, until the end of the last argument. This
    is just like the generator expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| chain.from_ iterable | chain.from_iterable(*iterables*, /) Yields items from
    the iterables in the argument, in order, just like the genexp:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| compress | compress(*data*, *conditions*, /) Yields each item from *data*
    corresponding to a true item in *conditions*, just like the genexp:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| count | count(start=0, step=1) Yields consecutive integers starting from
    *start*, just like the generator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: count returns an unending iterator, so use it carefully, always ensuring you
    explicitly terminate any loop over it. |
  prefs: []
  type: TYPE_NORMAL
- en: '| cycle | cycle(*iterable*, /) Yields each item of *iterable*, endlessly repeating
    items from the beginning each time it reaches the end, just like the generator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: cycle returns an unending iterator, so use it carefully, always ensuring you
    explicitly terminate any loop over it. |
  prefs: []
  type: TYPE_NORMAL
- en: '| dropwhile | dropwhile(*func*, *iterable*, /) Drops the 0+ leading items of
    *iterable* for which *func* is true, then yields each remaining item, just like
    the generator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| filterfalse | filterfalse(*func*, *iterable*, /) Yields those items of *iterable*
    for which *func* is false, just like the genexp:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '*func* can be any callable accepting a single argument, or **None**. When *func*
    is **None**, filterfalse yields false items, just like the genexp:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| groupby | groupby(*iterable*, /, key=**None**) *iterable* normally needs
    to be already sorted according to key (**None**, as usual, standing for the identity
    function, **lambda** x: x). groupby yields pairs (*k*, *g*), each pair representing
    a *group* of adjacent items from *iterable* having the same value *k* for *key*(*item*);
    each *g* is an iterator yielding the items in the group. When the groupby object
    advances, previous iterators *g* become invalid (so, if a group of items needs
    to be processed later, you’d better store somewhere a list “snapshot” of it, list(*g*)).'
  prefs: []
  type: TYPE_NORMAL
- en: Another way of looking at the groups groupby yields is that each terminates
    as soon as *key*(*item*) changes (which is why you normally call groupby only
    on an *iterable* that’s already sorted by *key*).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, suppose that, given a set of lowercase words, we want a dict that
    maps each initial to the longest word having that initial (with “ties” broken
    arbitrarily). We could write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| islice | islice(*iterable*[, *start*], *stop*[, *step*], /) Yields items
    of *iterable* (skipping the first *start* ones, by default 0) up to but not including
    *stop*, advancing by steps of *step* (default 1) at a time. All arguments must
    be nonnegative integers (or **None**), and *step* must be > 0. Apart from checks
    and optional arguments, it’s like the generator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| pairwise | pairwise(*seq*, /) **3.10+** Yields pairs of items in *seq*, with
    overlap (for example, pairwise(''ABCD'') will yield ''AB'', ''BC'', and ''CD'').
    Equivalent to the iterator returned from zip(*seq*, *seq*[1:]). |'
  prefs: []
  type: TYPE_TB
- en: '| repeat | repeat(*item*, /[*,* times]) Repeatedly yields *item*, just like
    the genexp:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'When times is absent, the iterator is unbounded, yielding a potentially infinite
    number of items, each of which is the object *item*, just like the generator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| starmap | starmap(*func*, *iterable*, /) Yields func(**item*) for each *item*
    in *iterable* (each such *item* must be an iterable, normally a tuple), just like
    the generator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| takewhile | takewhile(*func*, *iterable*, /) Yields items from *iterable*
    as long as *func*(*item*) is truthy, then finishes, just like the generator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| tee | tee(*iterable*, *n*=2, /) Returns a tuple of *n* independent iterators,
    each yielding items that are the same as those of *iterable*. The returned iterators
    are independent from each other, but they are *not* independent from *iterable*;
    avoid altering the object *iterable* in any way, as long as you’re still using
    any of the returned iterators. |'
  prefs: []
  type: TYPE_TB
- en: '| zip_longest | zip_longest(**iterables*, /, fillvalue=**None**) Yields tuples
    with one corresponding item from each of the *iterables*; stops when the longest
    of the *iterables* is exhausted, behaving as if each of the others was “padded”
    to that same length with references to fillvalue. If **None** is a value that
    might be valid in one or more of the *iterables* (such that it could be confused
    with **None** values used for padding), you can use a Python Ellipsis (...) or
    a sentinel object FILL=object() for fillvalue. |'
  prefs: []
  type: TYPE_TB
- en: 'We have shown equivalent generators and genexps for many attributes of itertools,
    but it’s important to take into account the sheer speed of itertools. As a trivial
    example, consider repeating some action 10 times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'This turns out to be about 10 to 20% faster, depending on the Python release
    and platform, than the straightforward alternative:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: ^([1](ch08.xhtml#ch01fn84-marker)) I.e., according to the [Liskov substitution
    principle](https://oreil.ly/3jMaN), a core notion of object-oriented programming.
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch08.xhtml#ch01fn88-marker)) When first introduced, defaultdict(int) was
    commonly used to maintain counts of items. Since Counter is now part of the collections
    module, use Counter instead of defaultdict(int) for the specific task of counting
    items.
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch08.xhtml#ch01fn89-marker)) For last-in, first-out (LIFO) queues, aka
    “stacks,” a list, with its append and pop methods, is perfectly sufficient.
  prefs: []
  type: TYPE_NORMAL
- en: ^([4](ch08.xhtml#ch01fn92-marker)) Also known as the [*Schwartzian transform*](https://oreil.ly/FHlZB).
  prefs: []
  type: TYPE_NORMAL
- en: ^([5](ch08.xhtml#ch01fn93-marker)) This step is not *quite* a full “sort,” but
    it looks close enough to call it one, at least if you squint.
  prefs: []
  type: TYPE_NORMAL
- en: ^([6](ch08.xhtml#ch01fn94-marker)) Some experts recommend **from** itertools
    **import** *, but the authors of this book disagree.
  prefs: []
  type: TYPE_NORMAL
