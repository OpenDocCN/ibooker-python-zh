["```py\nimport math\n\nmath.sqrt(42 / math.pi) \n```", "```py\n3.656366395715726 \n```", "```py\nradius = math.sqrt(42 / math.pi) \n```", "```py\nradius \n```", "```py\n3.656366395715726 \n```", "```py\nradius + math.sqrt(42 / math.pi) \n```", "```py\n7.312732791431452 \n```", "```py\ndef circle_area(radius):\n    area = math.pi * radius**2\n    return area \n```", "```py\ncircle_area(radius) \n```", "```py\n42.00000000000001 \n```", "```py\na = circle_area(radius) \n```", "```py\ncircle_area(radius) + 2 * circle_area(radius / 2) \n```", "```py\n63.000000000000014 \n```", "```py\na \n```", "```py\n42.00000000000001 \n```", "```py\narea \n```", "```py\nNameError: name 'area' is not defined \n```", "```py\ndef repeat(word, n):\n    print(word * n) \n```", "```py\nrepeat('Finland, ', 3) \n```", "```py\nFinland, Finland, Finland, \n```", "```py\nresult = repeat('Finland, ', 3) \n```", "```py\nFinland, Finland, Finland, \n```", "```py\nresult \n```", "```py\nprint(result) \n```", "```py\nNone \n```", "```py\ndef repeat_string(word, n):\n    return word * n \n```", "```py\nline = repeat_string('Spam, ', 4) \n```", "```py\nline \n```", "```py\n'Spam, Spam, Spam, Spam, ' \n```", "```py\ndef absolute_value(x):\n    if x < 0:\n        return -x\n    else:\n        return x \n```", "```py\ndef absolute_value_wrong(x):\n    if x < 0:\n        return -x\n    if x > 0:\n        return x \n```", "```py\nabsolute_value_wrong(0) \n```", "```py\ndef absolute_value_extra_return(x):\n    if x < 0:\n        return -x\n    else:\n        return x\n\n    return 'This is dead code' \n```", "```py\ndef distance(x1, y1, x2, y2):\n    return 0.0 \n```", "```py\ndistance(1, 2, 4, 6) \n```", "```py\n0.0 \n```", "```py\ndef distance(x1, y1, x2, y2):\n    dx = x2 - x1\n    dy = y2 - y1\n    print('dx is', dx)\n    print('dy is', dy)\n    return 0.0 \n```", "```py\ndistance(1, 2, 4, 6) \n```", "```py\ndx is 3\ndy is 4 \n```", "```py\n0.0 \n```", "```py\ndef distance(x1, y1, x2, y2):\n    dx = x2 - x1\n    dy = y2 - y1\n    dsquared = dx**2 + dy**2\n    print('dsquared is: ', dsquared)\n    return 0.0 \n```", "```py\ndistance(1, 2, 4, 6) \n```", "```py\ndsquared is:  25 \n```", "```py\n0.0 \n```", "```py\ndef distance(x1, y1, x2, y2):\n    dx = x2 - x1\n    dy = y2 - y1\n    dsquared = dx**2 + dy**2\n    result = math.sqrt(dsquared)\n    print(\"result is\", result) \n```", "```py\ndistance(1, 2, 4, 6) \n```", "```py\nresult is 5.0 \n```", "```py\ndef distance(x1, y1, x2, y2):\n    dx = x2 - x1\n    dy = y2 - y1\n    dsquared = dx**2 + dy**2\n    result = math.sqrt(dsquared)\n    return result \n```", "```py\ndistance(1, 2, 4, 6) \n```", "```py\n5.0 \n```", "```py\nd = distance(1, 2, 4, 6) \n```", "```py\ndef is_divisible(x, y):\n    if x % y == 0:\n        return True\n    else:\n        return False \n```", "```py\nis_divisible(6, 4) \n```", "```py\nFalse \n```", "```py\nis_divisible(6, 3) \n```", "```py\nTrue \n```", "```py\ndef is_divisible(x, y):\n    return x % y == 0 \n```", "```py\nif is_divisible(6, 2):\n    print('divisible') \n```", "```py\ndivisible \n```", "```py\nif is_divisible(6, 2) == True:\n    print('divisible') \n```", "```py\ndivisible \n```", "```py\ndef factorial(n):\n    return 0 \n```", "```py\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return 0 \n```", "```py\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        recurse = factorial(n-1)\n        return n * recurse \n```", "```py\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif  n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2) \n```", "```py\nfactorial(1.5) \n```", "```py\nRecursionError: maximum recursion depth exceeded in comparison \n```", "```py\nisinstance(3, int) \n```", "```py\nTrue \n```", "```py\nisinstance(1.5, int) \n```", "```py\nFalse \n```", "```py\ndef factorial(n):\n    if not isinstance(n, int):\n        print('factorial is only defined for integers.')\n        return None\n    elif n < 0:\n        print('factorial is not defined for negative numbers.')\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n-1) \n```", "```py\nfactorial('crunchy frog') \n```", "```py\nfactorial is only defined for integers. \n```", "```py\nfactorial(-2) \n```", "```py\nfactorial is not defined for negative numbers. \n```", "```py\ndef factorial(n):\n    space = ' ' * (4 * n)\n    print(space, 'factorial', n)\n    if n == 0:\n        print(space, 'returning 1')\n        return 1\n    else:\n        recurse = factorial(n-1)\n        result = n * recurse\n        print(space, 'returning', result)\n        return result \n```", "```py\nfactorial(3) \n```", "```py\n factorial 3\n         factorial 2\n     factorial 1\n factorial 0\n returning 1\n     returning 1\n         returning 2\n             returning 6 \n```", "```py\n6 \n```", "```py\n# This cell tells Jupyter to provide detailed debugging information\n# when a runtime error occurs. Run it before working on the exercises.\n\n%xmode Verbose \n```", "```py\nException reporting mode: Verbose \n```", "```py\ndef absolute_value_wrong(x):\n    if x < 0:\n        return -x\n    if x > 0:\n        return x \n```", "```py\ndef absolute_value_extra_return(x):\n    if x < 0:\n        return -x\n    else:\n        return x\n\n    return 'This is dead code.' \n```", "```py\ndef is_divisible(x, y):\n    if x % y == 0:\n        return True\n    else:\n        return False \n```"]