["```py\ndef find_phonenumber(phonebook, name):\n    for n, p in phonebook:\n        if n == name:\n            return p\n    return None\n\nphonebook = [\n    (\"John Doe\", \"555-555-5555\"),\n    (\"Albert Einstein\", \"212-555-5555\"),\n]\nprint(f\"John Doe's phone number is {find_phonenumber(phonebook, 'John Doe')}\")\n```", "```py\nphonebook = {\n    \"John Doe\": \"555-555-5555\",\n    \"Albert Einstein\" : \"212-555-5555\",\n}\nprint(f\"John Doe's phone number is {phonebook['John Doe']}\")\n```", "```py\ndef list_unique_names(phonebook):\n    unique_names = []\n    for name, phonenumber in phonebook: ![1](Images/1.png)\n        first_name, last_name = name.split(\" \", 1)\n        for unique in unique_names: ![2](Images/2.png)\n            if unique == first_name:\n                break\n        else:\n            unique_names.append(first_name)\n    return len(unique_names)\n\ndef set_unique_names(phonebook):\n    unique_names = set()\n    for name, phonenumber in phonebook: ![3](Images/3.png)\n        first_name, last_name = name.split(\" \", 1)\n        unique_names.add(first_name) ![4](Images/4.png)\n    return len(unique_names)\n\nphonebook = [\n    (\"John Doe\", \"555-555-5555\"),\n    (\"Albert Einstein\", \"212-555-5555\"),\n    (\"John Murphey\", \"202-555-5555\"),\n    (\"Albert Rutherford\", \"647-555-5555\"),\n    (\"Guido van Rossum\", \"301-555-5555\"),\n]\n\nprint(\"Number of unique names from set method:\", set_unique_names(phonebook))\nprint(\"Number of unique names from list method:\", list_unique_names(phonebook))\n\n```", "```py\n>>> %timeit list_unique_names(large_phonebook)\n1.13 s ± 26.8 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n\n>>> %timeit set_unique_names(large_phonebook)\n4.48 ms ± 177 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n```", "```py\ndef index_sequence(key, mask=0b111, PERTURB_SHIFT=5):\n    perturb = hash(key) ![1](Images/1.png)\n    i = perturb & mask\n    yield i\n    while True:\n        perturb >>= PERTURB_SHIFT\n        i = (i * 5 + perturb + 1) & mask\n        yield i\n```", "```py\nclass City(str):\n    def __hash__(self):\n        return ord(self[0])\n\n# We create a dictionary where we assign arbitrary values to cities\ndata =  {\n    City(\"Rome\"): 'Italy',\n    City(\"San Francisco\"): 'USA',\n    City(\"New York\"): 'USA',\n    City(\"Barcelona\"): 'Spain',\n}\n```", "```py\nhash(\"Barcelona\") = ord(\"B\") & 0b111\n                  = 66 & 0b111\n                  = 0b1000010 & 0b111\n                  = 0b010 = 2\n\nhash(\"Rome\") = ord(\"R\") & 0b111\n             = 82 & 0b111\n             = 0b1010010 & 0b111\n             = 0b010 = 2\n```", "```py\n8; 18; 39; 81; 165; 333; 669; 1,341; 2,685; 5,373; 10,749; 21,501; 43,005; ...\n```", "```py\nclass Point(object):\n    def __init__(self, x, y):\n        self.x, self.y = x, y\n```", "```py\n>>> p1 = Point(1,1)\n>>> p2 = Point(1,1)\n>>> set([p1, p2])\nset([<__main__.Point at 0x1099bfc90>, <__main__.Point at 0x1099bfbd0>])\n>>> Point(1,1) in set([p1, p2])\nFalse\n```", "```py\nclass Point(object):\n    def __init__(self, x, y):\n        self.x, self.y = x, y\n\n    def __hash__(self):\n        return hash((self.x, self.y))\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n```", "```py\n>>> p1 = Point(1,1)\n>>> p2 = Point(1,1)\n>>> set([p1, p2])\nset([<__main__.Point at 0x109b95910>])\n>>> Point(1, 1) in set([p1, p2])\nTrue\n```", "```py\ndef twoletter_hash(key):\n    offset = ord('a')\n    k1, k2 = key\n    return (ord(k2) - offset) + 26 * (ord(k1) - offset)\n```", "```py\nimport string\nimport timeit\n\nclass BadHash(str):\n    def __hash__(self):\n        return 42\n\nclass GoodHash(str):\n    def __hash__(self):\n        \"\"\"\n This is a slightly optimized version of twoletter_hash\n \"\"\"\n        return ord(self[1]) + 26 * ord(self[0]) - 2619\n\nbaddict = set()\ngooddict = set()\nfor i in string.ascii_lowercase:\n    for j in string.ascii_lowercase:\n        key = i + j\n        baddict.add(BadHash(key))\n        gooddict.add(GoodHash(key))\n\nbadtime = timeit.repeat(\n    \"key in baddict\",\n    setup = \"from __main__ import baddict, BadHash; key = BadHash('zz')\",\n    repeat = 3,\n    number = 1_000_000,\n)\ngoodtime = timeit.repeat(\n    \"key in gooddict\",\n    setup = \"from __main__ import gooddict, GoodHash; key = GoodHash('zz')\",\n    repeat = 3,\n    number = 1_000_000,\n)\n\nprint(f\"Min lookup time for baddict: {min(badtime)}\")\nprint(f\"Min lookup time for gooddict: {min(goodtime)}\")\n\n# Results:\n#   Min lookup time for baddict: 17.719061855008476\n#   Min lookup time for gooddict: 0.42408075400453527\n```", "```py\nimport math\nfrom math import sin\n\ndef test1(x):\n    \"\"\"\n >>> %timeit test1(123_456)\n 162 µs ± 3.82 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n \"\"\"\n    res = 1\n    for _ in range(1000):\n        res += math.sin(x)\n    return res\n\ndef test2(x):\n    \"\"\"\n >>> %timeit test2(123_456)\n 124 µs ± 6.77 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n \"\"\"\n    res = 1\n    for _ in range(1000):\n        res += sin(x)\n    return res\n\ndef test3(x, sin=math.sin):\n    \"\"\"\n >>> %timeit test3(123_456)\n 105 µs ± 3.35 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n \"\"\"\n    res = 1\n    for _ in range(1000):\n        res += sin(x)\n    return res\n```", "```py\n>>> dis.dis(test1)\n    ...cut..\n             20 LOAD_GLOBAL              1 (math)\n             22 LOAD_METHOD              2 (sin)\n             24 LOAD_FAST                0 (x)\n             26 CALL_METHOD              1\n    ...cut..\n\n>>> dis.dis(test2)\n    ...cut...\n             20 LOAD_GLOBAL              1 (sin)\n             22 LOAD_FAST                0 (x)\n             24 CALL_FUNCTION            1\n    ...cut...\n\n>>> dis.dis(test3)\n    ...cut...\n             20 LOAD_FAST                1 (sin)\n             22 LOAD_FAST                0 (x)\n             24 CALL_FUNCTION            1\n    ...cut...\n```"]