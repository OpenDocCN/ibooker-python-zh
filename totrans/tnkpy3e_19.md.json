["```py\nclass Card:\n  \"\"\"Represents a standard playing card.\"\"\"\n\n    suit_names = ['Clubs', 'Diamonds', 'Hearts', 'Spades']\n    rank_names = [None, 'Ace', '2', '3', '4', '5', '6', '7', \n                  '8', '9', '10', 'Jack', 'Queen', 'King', 'Ace'] \n```", "```py\nCard.suit_names \n```", "```py\n['Clubs', 'Diamonds', 'Hearts', 'Spades'] \n```", "```py\nCard.suit_names[0] \n```", "```py\n'Clubs' \n```", "```py\nCard.rank_names[11] \n```", "```py\n'Jack' \n```", "```py\n%%add_method_to Card\n\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank \n```", "```py\nqueen = Card(1, 12) \n```", "```py\nqueen.suit, queen.rank \n```", "```py\n(1, 12) \n```", "```py\nqueen.suit_names \n```", "```py\n['Clubs', 'Diamonds', 'Hearts', 'Spades'] \n```", "```py\n%%add_method_to Card\n\n    def __str__(self):\n        rank_name = Card.rank_names[self.rank]\n        suit_name = Card.suit_names[self.suit]\n        return f'{rank_name} of {suit_name}' \n```", "```py\nprint(queen) \n```", "```py\nQueen of Diamonds \n```", "```py\nqueen2 = Card(1, 12)\nprint(queen2) \n```", "```py\nQueen of Diamonds \n```", "```py\nqueen == queen2 \n```", "```py\nFalse \n```", "```py\n%%add_method_to Card\n\n    def __eq__(self, other):\n        return self.suit == other.suit and self.rank == other.rank \n```", "```py\nqueen == queen2 \n```", "```py\nTrue \n```", "```py\nsix = Card(1, 6)\nprint(six) \n```", "```py\n6 of Diamonds \n```", "```py\nqueen == six \n```", "```py\nFalse \n```", "```py\nqueen != queen2 \n```", "```py\nFalse \n```", "```py\nqueen != six \n```", "```py\nTrue \n```", "```py\nqueen < queen2 \n```", "```py\nTypeError: '<' not supported between instances of 'Card' and 'Card' \n```", "```py\n%%add_method_to Card\n\n    def to_tuple(self):\n        return (self.suit, self.rank) \n```", "```py\n%%add_method_to Card\n\n    def __lt__(self, other):\n        return self.to_tuple() < other.to_tuple() \n```", "```py\nsix < queen \n```", "```py\nTrue \n```", "```py\nqueen < queen2 \n```", "```py\nFalse \n```", "```py\nqueen > queen2 \n```", "```py\nFalse \n```", "```py\n%%add_method_to Card\n\n    def __le__(self, other):\n        return self.to_tuple() <= other.to_tuple() \n```", "```py\nqueen <= queen2 \n```", "```py\nTrue \n```", "```py\nqueen <= six \n```", "```py\nFalse \n```", "```py\nqueen >= six \n```", "```py\nTrue \n```", "```py\nclass Deck:\n\n    def __init__(self, cards):\n        self.cards = cards \n```", "```py\n%%add_method_to Deck\n\n    def make_cards():\n        cards = []\n        for suit in range(4):\n            for rank in range(2, 15):\n                card = Card(suit, rank)\n                cards.append(card)\n        return cards \n```", "```py\ncards = Deck.make_cards()\ndeck = Deck(cards)\nlen(deck.cards) \n```", "```py\n52 \n```", "```py\n%%add_method_to Deck\n\n    def __str__(self):\n        res = []\n        for card in self.cards:\n            res.append(str(card))\n        return '\\n'.join(res) \n```", "```py\nsmall_deck = Deck([queen, six]) \n```", "```py\nstr(small_deck) \n```", "```py\n'Queen of Diamonds\\n6 of Diamonds' \n```", "```py\nprint(small_deck) \n```", "```py\nQueen of Diamonds\n6 of Diamonds \n```", "```py\n%%add_method_to Deck\n\n    def take_card(self):\n        return self.cards.pop() \n```", "```py\ncard = deck.take_card()\nprint(card) \n```", "```py\nAce of Spades \n```", "```py\nlen(deck.cards) \n```", "```py\n51 \n```", "```py\n%%add_method_to Deck\n\n    def put_card(self, card):\n        self.cards.append(card) \n```", "```py\ndeck.put_card(card)\nlen(deck.cards) \n```", "```py\n52 \n```", "```py\nimport random \n```", "```py\n%%add_method_to Deck\n\n    def shuffle(self):\n        random.shuffle(self.cards) \n```", "```py\ndeck.shuffle()\nfor card in deck.cards[:4]:\n    print(card) \n```", "```py\n2 of Diamonds\n4 of Hearts\n5 of Clubs\n8 of Diamonds \n```", "```py\n%%add_method_to Deck\n\n    def sort(self):\n        self.cards.sort() \n```", "```py\ndeck.sort() \n```", "```py\nfor card in deck.cards[:4]:\n    print(card) \n```", "```py\n2 of Clubs\n3 of Clubs\n4 of Clubs\n5 of Clubs \n```", "```py\nclass Hand(Deck):\n  \"\"\"Represents a hand of playing cards.\"\"\" \n```", "```py\n%%add_method_to Hand\n\n    def __init__(self, label=''):\n        self.label = label\n        self.cards = [] \n```", "```py\nhand = Hand('player 1')\nhand.label \n```", "```py\n'player 1' \n```", "```py\ndeck = Deck(cards)\ncard = deck.take_card()\nhand.put_card(card)\nprint(hand) \n```", "```py\nAce of Spades \n```", "```py\n%%add_method_to Deck\n\n    def move_cards(self, other, num):\n        for i in range(num):\n            card = self.take_card()\n            other.put_card(card) \n```", "```py\nclass BridgeHand(Hand):\n  \"\"\"Represents a bridge hand.\"\"\"\n\n    hcp_dict = {\n        'Ace': 4,\n        'King': 3,\n        'Queen': 2,\n        'Jack': 1,\n    } \n```", "```py\nrank = 12\nrank_name = Card.rank_names[rank]\nscore = BridgeHand.hcp_dict.get(rank_name, 0)\nrank_name, score \n```", "```py\n('Queen', 2) \n```", "```py\n%%add_method_to BridgeHand\n\n    def high_card_point_count(self):\n        count = 0\n        for card in self.cards:\n            rank_name = Card.rank_names[card.rank]\n            count += BridgeHand.hcp_dict.get(rank_name, 0)\n        return count \n```", "```py\nhand = BridgeHand('player 2')\n\ndeck.shuffle()\ndeck.move_cards(hand, 5)\nprint(hand) \n```", "```py\n4 of Diamonds\nKing of Hearts\n10 of Hearts\n10 of Clubs\nQueen of Diamonds \n```", "```py\nhand.high_card_point_count() \n```", "```py\n5 \n```", "```py\ndef find_defining_class(obj, method_name):\n  \"\"\"Find the class where the given method is defined.\"\"\"\n    for typ in type(obj).mro():\n        if method_name in vars(typ):\n            return typ\n    return f'Method {method_name} not found.' \n```", "```py\nhand = BridgeHand('player 3')\nfind_defining_class(hand, 'shuffle') \n```", "```py\n__main__.Deck \n```", "```py\n# This cell tells Jupyter to provide detailed debugging information\n# when a runtime error occurs. Run it before working on the exercises.\n\n%xmode Verbose \n```", "```py\nException reporting mode: Verbose \n```", "```py\nclass Trick(Deck):\n  \"\"\"Represents a trick in contract bridge.\"\"\" \n```", "```py\ncards = [Card(1, 3),\n         Card(1, 10),\n         Card(1, 12),\n         Card(2, 13)]\ntrick = Trick(cards)\nprint(trick) \n```", "```py\n3 of Diamonds\n10 of Diamonds\nQueen of Diamonds\nKing of Hearts \n```", "```py\nclass PokerHand(Hand):\n  \"\"\"Represents a poker hand.\"\"\"\n\n    def get_suit_counts(self):\n        counter = {}\n        for card in self.cards:\n            key = card.suit\n            counter[key] = counter.get(key, 0) + 1\n        return counter\n\n    def get_rank_counts(self):\n        counter = {}\n        for card in self.cards:\n            key = card.rank\n            counter[key] = counter.get(key, 0) + 1\n        return counter \n```", "```py\npair = deepcopy(bad_hand)\npair.put_card(Card(1, 2))\nprint(pair) \n```", "```py\n2 of Clubs\n3 of Clubs\n4 of Hearts\n5 of Spades\n7 of Clubs\n2 of Diamonds \n```", "```py\npair.has_pair()    # should return True \n```", "```py\nTrue \n```", "```py\nbad_hand.has_pair()    # should return False \n```", "```py\nFalse \n```", "```py\ngood_hand.has_pair()   # should return False \n```", "```py\nFalse \n```", "```py\nclass Kangaroo:\n  \"\"\"A Kangaroo is a marsupial.\"\"\"\n\n    def __init__(self, name, contents=[]):\n  \"\"\"Initialize the pouch contents.\n\n name: string\n contents: initial pouch contents.\n \"\"\"\n        self.name = name\n        self.contents = contents\n\n    def __str__(self):\n  \"\"\"Return a string representaion of this Kangaroo.\n \"\"\"\n        t = [ self.name + ' has pouch contents:' ]\n        for obj in self.contents:\n            s = '    ' + object.__str__(obj)\n            t.append(s)\n        return '\\n'.join(t)\n\n    def put_in_pouch(self, item):\n  \"\"\"Adds a new item to the pouch contents.\n\n item: object to be added\n \"\"\"\n        self.contents.append(item) \n```", "```py\nkanga = Kangaroo('Kanga')\nroo = Kangaroo('Roo') \n```", "```py\nkanga.put_in_pouch('wallet')\nkanga.put_in_pouch('car keys')\nkanga.put_in_pouch(roo) \n```", "```py\nprint(kanga) \n```", "```py\nKanga has pouch contents:\n    'wallet'\n    'car keys'\n    <__main__.Kangaroo object at 0x7f44f9b4e500> \n```", "```py\nprint(roo) \n```", "```py\nRoo has pouch contents:\n    'wallet'\n    'car keys'\n    <__main__.Kangaroo object at 0x7f44f9b4e500> \n```"]