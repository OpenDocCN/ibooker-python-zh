- en: 2 Getting started with Copilot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Setting up Python, Visual Studio Code, and Copilot on your system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the Copilot design process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Copilot’s value for a data processing task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want you to be able to create software yourself right from the start. To
    do this, we’ll guide you through setting up Visual Studio Code (VS Code), Python,
    and Copilot on your machine and familiarize you with how to interact with these
    tools. After you’ve set up the tools, you’ll be able to follow along with our
    examples and start creating software yourself. There’s no substitute for practice,
    and we believe you can learn right alongside us for the remainder of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve set up Copilot, we’ll walk through a fun example that showcases
    the power of Copilot in solving standard tasks. You’ll see how to interact with
    Copilot, and you’ll learn how you can write software without writing any actual
    code. Keep in mind that Copilot isn’t perfect, and you need to be able to read
    and understand a little Python to get what you want, but it gives you a big head
    start. Let’s get started creating your first computer program.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Setting up your computer to start learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Learning how to write software requires that you go beyond just reading about
    it and actually perform the task of writing software. If this were a book on how
    to play guitar, would you keep reading it without ever trying to play the guitar?
    We thought not. Reading this book without following along and trying it out yourself
    would be like watching a marathon runner finish the race and thinking you’re ready
    to go run one yourself. We’ll stop with the analogies, but seriously, you need
    to get your software installed and running before we go farther.
  prefs: []
  type: TYPE_NORMAL
- en: What scares us the most right now is that we just hit the most common point
    where novices, even those eager to learn programming, tend to fail, and we *really*
    want to see you succeed. Now, you might be thinking, “Wait, really? We’re just
    getting started.” Yes, that’s exactly the point. In Leo’s popular Coursera course
    about learning Java programming [1], can you guess the point when most new learners
    leave? Is it the challenging assignment at the end of the course that involves
    plotting earthquake markers on the globe in real time? No. It’s actually the warmup
    assignment where learners must set up their programming environment. As such,
    we understand this could be a hurdle for you. We hope that with this not-so-subtle
    nudge, we can help you achieve all the goals you had in mind when you bought this
    book. It all starts with installing the software.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 The software we’ll be using
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To set up and use Copilot easily, we’ll install the software editing tools used
    by novices and software engineers alike. The tools you’ll use are Python, VS Code,
    GitHub, and Copilot. Of course, if you already have all of these tools installed,
    jump to section 2.6.1.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2.1 Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Any programming language would have worked for this book, but we picked Python
    because it’s one of the most popular programming languages in the world and is
    the language we teach in our introductory courses at our universities. As we said
    in chapter 1, compared to other languages, Python is easier to read, easier to
    understand, and easier to write. For this book, Copilot will primarily generate
    the code, not you. However, you’ll want to read and understand the code generated
    by Copilot, and Python is great for that.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2.2 Visual Studio Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use any text editor to program. However, if you want a nice programming
    environment where you can write code, easily get suggestions from Copilot, and
    run your code, VS Code is our preferred tool. VS Code is used by novices learning
    software and is well liked by students [2]. It’s also used globally by professional
    software engineers, which means you can work and learn while using this environment
    after finishing the book. For VS Code to work for this book, you’ll need to install
    a few extensions that enable working with Python and using Copilot, but one of
    the great things about VS Code is that it’s easy to install those extensions.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2.3 GitHub account
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: GitHub is an industry-standard tool for developing, maintaining, and storing
    software. We won’t use GitHub in this book, however. We’re signing up for GitHub
    simply because you’ll need an account to access Copilot. Signing up for a GitHub
    account is free, but, at the time of writing, they charge for Copilot. If you’re
    a student, they will waive that fee. If you aren’t a student, as of writing, you
    can get a 30-day free trial.
  prefs: []
  type: TYPE_NORMAL
- en: You might ask why they charge for the service, and there’s a good answer. It’s
    expensive to build the GPT models (imagine thousands of computers running for
    a year to build the model), and GitHub incurs costs by providing predictions from
    the model (many machines are receiving your input, running it through the model,
    and generating your output). If you’re not ready to commit to using Copilot, you
    could make a calendar note for roughly 25 days from the day you sign up, and if
    you aren’t using Copilot at that time, just cancel. If, on the other hand, you’ve
    succeeded in learning how to write software with Copilot and are using it to improve
    your productivity at work or as a hobby, it may make sense to keep it.
  prefs: []
  type: TYPE_NORMAL
- en: Over the course of this chapter, we’ll install all of these tools, but we’re
    going to do this in two parts. The first part, coming up next, will get you set
    up to write and run code on your own so you become familiar with that process.
    The second part will set you up to use Copilot to assist you in the process of
    writing code.
  prefs: []
  type: TYPE_NORMAL
- en: '2.3 Getting your system set up: Part 1'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this first part of our installation guide, we’ll install Python and VS Code.
    To streamline this section, we’re just outlining the main steps that you should
    follow. However, there are more detailed instructions available in the following
    locations:'
  prefs: []
  type: TYPE_NORMAL
- en: VS Code maintains a tutorial for getting started writing code in Python at [https://mng.bz/znjQ](https://mng.bz/znjQ).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The website for this book ([https://mng.bz/0M46](https://mng.bz/0M46)) provides
    detailed instructions for setting up both PC and macOS systems. Because the websites
    for these tools might change after we write this book, we encourage you to use
    a combination of the GitHub link and the book website together.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the online book forum ([https://mng.bz/NBK1](https://mng.bz/NBK1)), you can
    ask for help and see the answers to a list of frequently asked questions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The primary steps you’ll need to accomplish are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Python:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [www.python.org/downloads/](http://www.python.org/downloads/).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Download and install the latest version of Python (3.12.3 at the time of writing).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install VS Code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://code.visualstudio.com/download](https://code.visualstudio.com/download),
    and select the main download for your operating system (e.g., Windows or Mac).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Download and install the latest version of VS Code.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install a VS Code Extension: (for details, see [https://mng.bz/9o01](https://mng.bz/9o01)).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Python (by Microsoft)*—Follow the instructions at [https://mng.bz/j0gP](https://mng.bz/j0gP)
    to set up the Python extension correctly (specifically, selecting the correct
    interpreter).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Although the instructions here are brief, we know in reality they can take some
    time. If you encounter any problems, consult the resources mentioned earlier for
    more detailed setup instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 2.4 Working with Python in Visual Studio Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that your system is set up, let’s get acquainted with the VS Code interface
    shown in figure 2.1\. (You may need to click the Explorer icon in the middle/top
    left to get this same view.) The following regions are identified in figure 2.1:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Activity Bar —*On the far left is the Activity Bar where we can open file
    folders (also known as directories) or install extensions (as you did to install
    the Python extension in the previous section).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Side Bar —*The Side Bar shows what is presently open in the Activity Bar.
    In figure 2.1, the Activity Bar shows the Explorer selected, so the Side Bar is
    showing the files in the current folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Editor Pane(s) —*These are the primary areas we’ll use to create our software.
    The editor in the Editor Pane is similar to any other text editor in that you
    can write, edit, copy, and paste text using the clipboard. The editor is special,
    however, because it’s designed to work well with code. At this point, we’ll be
    writing code in this window, but later in this chapter, you’ll primarily work
    in this window by asking Copilot to generate code, and then you’ll test that code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![figure](../Images/2-1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 The VS Code interface [3]
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '*Output and Terminal Panel —*In this area of the interface, you’ll see the
    output of your code or any errors that have occurred in the following tabs: Problems,
    Output, Debug Console, and Terminal. We’ll primarily use the Problems tab, where
    we can see potential errors in our code, and the Terminal tab, which allows us
    to interact with Python and see the output of our code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VS Code has many different color schemes, so you can use any color scheme you
    like as the functionality is the same.
  prefs: []
  type: TYPE_NORMAL
- en: 2.4.1 Set up your working folder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the top of the Activity Bar on the left in VS Code, you’ll find Explorer
    as the top icon. After you click Explorer, you should see a No Folder Open message.
    Click the button to open a folder, and select a folder on your computer (or make
    a new one—we like the folder name fun_with_Copilot). Once you’ve opened this folder,
    your workspace will be the folder you opened, which means you should have your
    code and any data files, like the one we’ll use later in this chapter, in that
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: File not found or file missing errors
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'If you ever receive an error that says you’re missing a file, take heart: these
    are the kinds of errors that everyone makes. They can be really annoying when
    writing software. Perhaps you just didn’t put the file in your working folder—this
    happens—but it’s an easy fix by copying or moving the file into the correct folder.
    However, sometimes, you’ll see the file in the folder, but when you run your code
    in VS Code, Python can’t seem to find it. If this happens to you (it happened
    to us when writing the book!), be sure to have the folder with the code and the
    desired file open using Explorer in VS Code (as shown in the Side Bar in figure
    2.1).'
  prefs: []
  type: TYPE_NORMAL
- en: 2.4.2 Check to see if your setup is working properly
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s check to see if we’ve set up everything properly. To do this, we start
    by creating a new file to hold our program. You do this by going to File > New
    File (figure 2.2), and then selecting Python File (figure 2.3).
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/2-2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 How to create a new file in VS Code
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'After creating the file, we like to make sure we’ve saved the file. Go to File
    > Save As, and name this file first_program.py. Next, in the text editor, type
    the following exactly as it appears here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You might already be guessing what will happen when we run this program. It
    should print “Hello World” to the screen. Let’s run it and see! First, you’ll
    want to save your file by going to File > Save.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/2-3.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 Select Python File to create the new file as a Python file.
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: WaRNING  Be sure to save your file before you run it! We’re embarrassed to admit
    the amount of time we’ve spent trying to fix code that was correct but hadn’t
    been saved.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run your program, go to the top-right corner of the text editor, and click
    the Run Code icon, as shown earlier in figure 2.1\. After clicking the icon, in
    the Terminal section at the bottom, you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The top line starting with > is the command for the computer to run your code,
    and all it says is to run your first_program.py using Python. The second line
    is the output from running the command, and it says, “Hello World,” which is what
    we’d hoped to see.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You’ve written your first program! We now know that your programming
    environment is set up correctly. Let’s get started with writing just a couple
    more small pieces of code to get familiar with this workflow, and then we’ll move
    on to the workflow with Copilot.
  prefs: []
  type: TYPE_NORMAL
- en: 2.5 Writing and running some small programs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve just finished the major step of installing Python and VS Code and getting
    it working. Before we start working with our AI assistant, Copilot, let’s write
    a few more small programs so you get a feel for typing and running code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with writing a small program that involves adding numbers. Go ahead
    and delete the line you wrote that prints Hello World, and replace it with the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: What do you think that code will print? Will it print “a + b”, or will it print
    30? Go ahead and run it and see.
  prefs: []
  type: TYPE_NORMAL
- en: The computer calculated the sum of 10 and 20 and printed 30\. This is pretty
    neat, right? We’ve used the computer to do some small calculations. If you change
    the value for `a` or `b`, what do you think will happen? Feel free to play with
    this on your own.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll spend a lot more time later in this book talking about the details of
    how to read code, but if you’re curious, here’s how to read that code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '#1 Creates a variable named “a” and gives it the value 10'
  prefs: []
  type: TYPE_NORMAL
- en: '#2 Creates a variable named “b” and gives it the value 20'
  prefs: []
  type: TYPE_NORMAL
- en: '#3 Adds “a” and “b” and then prints the result to the screen'
  prefs: []
  type: TYPE_NORMAL
- en: The key piece right now is that you become comfortable with the idea of typing
    code in the Editor Pane and running it using the Run button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s do just one more small example. Suppose you want to calculate the area
    of a square. Recalling our formulas for shapes, the area of a square whose sides
    are length *s* is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Area = *s *²
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with defining a side to be a certain length and then printing the
    area:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We encourage you to type and run that code. When you run it, you should get
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Did you run into any problems typing in that code? We suspect many of you did.
    If you missed a quotation mark, a comma, or a parenthesis, you probably got some
    kind of unpleasant error like this (here, if you forgot a comma) when you ran
    the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the old way of learning programming, you’d spend a lot of time making sure
    you understood the exact characters to write to make the programming language,
    Python, happy. We’ll reiterate the good news: with an AI assistant like Copilot,
    syntax becomes much, much less important. Let’s get Copilot installed so you can
    learn how to work with that tool.'
  prefs: []
  type: TYPE_NORMAL
- en: '2.6 Getting your system set up: Part 2'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we’re ready for the second part of our installation guide. There are some
    new steps here beyond what you did earlier. Again, feel free to refer to the following
    resources for more details on the installation process:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit GitHub’s documentation at [https://mng.bz/WVP1](https://mng.bz/WVP1).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The website for this book ([https://mng.bz/0M46](https://mng.bz/0M46)) provides
    detailed instructions for setting up both PC and macOS systems. Because the websites
    for these tools might change after we write this book, we encourage you to use
    a combination of the GitHub link and the book website together.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the online book forum ([https://mng.bz/NBK1](https://mng.bz/NBK1)), you can
    ask for help and see the answers to a list of frequently asked questions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The primary steps you’ll need to accomplish this time are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set up your GitHub account, and sign up for Copilot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://github.com/signup](https://github.com/signup), and sign up for
    a GitHub account.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Go into your settings in GitHub and enable Copilot. This is the point where
    you’ll either need to verify that you’re a student or sign up for the 30-day free
    trial (available at the time of this writing).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install the following VS Code extension(s) (for details, see [https://mng.bz/9o01](https://mng.bz/9o01)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*GitHub Copilot (by GitHub)*—At the time of writing, installing GitHub Copilot
    automatically installs the GitHub Copilot Chat. Please check that GitHub Copilot
    Chat (by GitHub) has also been installed by checking your installed extensions.
    If it hasn’t, you’ll need to add this extension as well.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We know that the steps here are brief. If you encounter any problems, we encourage
    you to consult the resources mentioned earlier for more detailed setup instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 2.6.1 Check to see if Copilot is working properly
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your installation worked properly, you should see the Copilot icon (highlighted
    in figure 2.4) in the bottom-right corner of the VS Code interface.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/2-4.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 VS Code interface with Copilot running
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Let’s check to see that Copilot is working correctly by editing the first_program.py
    file. Feel free to delete whatever code you have in there now and start fresh
    or create a new .py file—it’s up to you. In the text editor, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The prompts and code we write will be in bold font to help distinguish between
    what we write, and the code and comments Copilot may give us. The # sign at the
    start is important (and you should include it in what you typed). It means that
    what you wrote is a comment (depending on your VS Code color palette, it may be
    a different color than the code we’re about to produce). Comments are *not* code:
    the computer executes code and doesn’t execute comments. Comments are used by
    programmers to provide a human-readable summary of what the code did to help other
    software engineers read the code. Today, its purpose has expanded to also prompt
    Copilot. After writing a comment (and sometimes even while writing comments),
    Copilot will attempt to give us suggestions. You can think of this as a much more
    sophisticated autocomplete, like when you type “New York T” in your search engine,
    and it autocompletes with “New York Times.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'To trigger Copilot to start giving us code (or more comments), press Enter
    at the end of the line, and you’ll be at the start of a new line. Pause for a
    moment, and you should see something appear. Until accepted, Copilot’s suggestions
    are in light gray italics. If you don’t get a suggestion yet, you may need to
    press Enter a second time to trigger Copilot to suggest the code. Here’s what
    happened for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you still don’t see a suggestion from Copilot, try pressing Ctrl-Enter (hold
    Ctrl while pressing Enter). When you press Ctrl-Enter, a new window will appear
    to the right of your editor window with the program called GitHub Copilot Suggestions.
    If that window doesn’t appear, there may be something wrong with your setup, and
    we encourage you to go to the book website to double-check that you followed all
    the steps correctly or to find (or ask for) help.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you saw the suggestion from Copilot, press Tab to accept Copilot’s suggestion.
    Once you do this, the suggestion that was previously in light gray italics should
    now be in a standard font:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '#1 The prompt we wrote'
  prefs: []
  type: TYPE_NORMAL
- en: '#2 The code produced by Copilot'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re seeing different code than this, it’s because of something we mentioned
    earlier: Copilot is nondeterministic so you may see different code than we do.
    We mention this because sometimes Copilot makes a minor mistake with the code
    here and may give you code similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You might think this slight difference (no parentheses around `"Hello` `Copilot"`)
    wouldn’t matter, but it does. Before Python 3, this was the correct syntax for
    a print statement, and when Python 3 was introduced, it switched to the code with
    parentheses. Because we’re running Python 3, you need to have the parentheses
    for the code to work. You might ask why Copilot gets this wrong. The problem is
    Copilot was trained on some old Python code as part of its training. If this seems
    annoying, we agree. But it’s another hint of the frustration novice programmers
    went through before Copilot. Most of what Copilot suggests is syntactically correct.
    But if you’re a novice writing the code from scratch, missing parentheses or a
    missing colon somewhere might cost you a lot of time. Now we have the correct
    code as
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: which is similar to the “Hello World” code we produced manually earlier. We
    hope you’re encouraged to see that Copilot can generate code like this!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s see how it does in the example of determining the area of a square
    from the previous section. Go ahead and enter the following code with the prompt
    (again, shown in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We received the following response from Copilot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Notice how Copilot handled that piece of code well. For humans, especially learners
    new to programming, it’s easy to make a mistake, but Copilot rarely does. We hope
    Copilot gave you a similar response. Feel free to play around with Copilot for
    a bit if you’d like to become more comfortable with the interface.
  prefs: []
  type: TYPE_NORMAL
- en: We now know that your programming environment and Copilot are set up correctly,
    so we can move into a larger programming task. But before we do, we’d like to
    go over tips for how to deal with some common problems we’ve encountered when
    working with Copilot, so you have these tips available to you when working through
    the next example.
  prefs: []
  type: TYPE_NORMAL
- en: 2.7 Addressing common Copilot challenges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It may seem early to start talking about common challenges with Copilot, but
    you may have already run into challenges when writing your first program. You’ll
    certainly encounter some of these when working through our next example and in
    the next chapters, so we wanted to give these to you now.
  prefs: []
  type: TYPE_NORMAL
- en: In our time working with Copilot, we’ve run into a few common challenges. These
    challenges will likely decrease with time as Copilot improves, but they were still
    problems at the time of this writing. Although the challenges in table 2.1 aren’t
    the only ones you might encounter, we hope our tips on how to address these common
    challenges will help you get up and running quickly. We’ll keep a running list
    at our book’s website, so feel free to reach out to us on the forums if you feel
    we’ve missed something.
  prefs: []
  type: TYPE_NORMAL
- en: Table 2.1 Common challenges working with Copilot
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '| Challenge | Description | Remedies |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Comments only  | If you give Copilot a prompt using the comment symbol (#),
    when you start a new line, it wants to just give you more comments rather than
    code. For example: **`# output "Hello Copilot" to the screen`**'
  prefs: []
  type: TYPE_NORMAL
- en: '`# print "Hello world" to the screen`'
  prefs: []
  type: TYPE_NORMAL
- en: We’ve seen Copilot generate line after line of comments, sometimes repeating
    itself! When this happens, remedy 3 in the column to the right (use docstrings)
    is sometimes the most effective.
  prefs: []
  type: TYPE_NORMAL
- en: '| 1\. Add a newline (press Enter) between your comment and Copilot’s suggestion
    to help it switch from comments to code. 2\. If a newline doesn’t work, you can
    type a letter or two of code (no comment symbol). A couple letters from a keyword
    in your prompt usually works. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`# output "Hello Copilot" to the screen`'
  prefs: []
  type: TYPE_NORMAL
- en: '`pr`'
  prefs: []
  type: TYPE_NORMAL
- en: A couple letters from a keyword typically causes Copilot to give a code suggestion.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Switch from using # comments to docstring comments like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"""`'
  prefs: []
  type: TYPE_NORMAL
- en: '`output "Hello Copilot" to the screen`'
  prefs: []
  type: TYPE_NORMAL
- en: '`"""`'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Use Ctrl-Enter to see if Copilot will give you suggestions that are code
    rather than comments.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Wrong code  | Sometimes Copilot just gives you obviously wrong code from
    the start. (You’ll learn throughout this book how to identify incorrect code!)
    In addition, sometimes Copilot seems to get stuck down wrong paths. For example,
    it might seem to be trying to solve a different problem than what you’ve asked
    it to solve. (Remedy 3, in particular, can help with getting Copilot to go down
    a new path.)'
  prefs: []
  type: TYPE_NORMAL
- en: '| Much of this book is about how to address this problem, but here are some
    quick tips to get Copilot to help: 1\. Change your prompt to see if you can better
    describe what you need.'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Try using Ctrl-Enter to find a suggestion from Copilot that is the correct
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Close the VS Code program, wait a little bit, and restart it. This can help
    clear the Copilot cache to get new suggestions.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Try breaking down the problem into smaller steps (see chapter 7 for more
    details).
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Debug the code (see chapter 8).
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Try asking ChatGPT for the code, and paste its suggestions into VS Code.
    A different large language model (LLM) can sometimes give suggestions that help
    the other LLM to get unstuck.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Copilot gives you `# YOUR CODE HERE`  | We’ve had Copilot seem to tell us
    to write our own code by generating this (or similar text) after a prompt: `#
    YOUR CODE HERE`'
  prefs: []
  type: TYPE_NORMAL
- en: '| We believe this is happening when we ask Copilot to solve a problem that
    has been given by an instructor to students to solve in the past. Why? Well, when
    we write our assignments for our students, we (as instructors) often write some
    code and then tell our students to write the rest by writing `# YOUR CODE HERE`'
  prefs: []
  type: TYPE_NORMAL
- en: where we want students to write their code. Students tend to leave that comment
    in their solution code, which means Copilot was trained to think this comment
    is an important part of the solution (it’s not). Often, we’re able to solve this
    problem by finding reasonable solutions in the Copilot suggestions with Ctrl-Enter,
    but please see the remedies for Wrong Code if that doesn’t work.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Missing modules  | Copilot gives you code, but it won’t work because there
    are modules missing. ( *Modules* are additional libraries that can be added to
    Python to provide prebuilt functionality.)  | In section 2.8.2, see the “Python
    Modules” sidebar for a description of modules, and see chapter 5 for instructions
    on how to use modules.  |'
  prefs: []
  type: TYPE_TB
- en: 2.8 Our path forward
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve already seen that Copilot can generate code for you. So, can we just
    ask Copilot to solve our tasks for us? We’re afraid not. We still need to learn
    some essential skills to be able to work effectively with Copilot and to design
    software that’s meaningful to us.
  prefs: []
  type: TYPE_NORMAL
- en: To help you appreciate the skills you’ll need to learn and to get you excited
    about where you’re headed, we’ll give you a larger example that represents what
    we hope you’ll be able to do on your own about halfway through reading and working
    through this book.
  prefs: []
  type: TYPE_NORMAL
- en: 2.8.1 How we’ll be working with Copilot throughout the book
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We’ll expand on this workflow in later chapters, but the core elements will
    be the same:'
  prefs: []
  type: TYPE_NORMAL
- en: Write a prompt to Copilot using comments (`#`) or docstrings (`"""`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let Copilot generate code for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check to see whether the code is correct by reading through it and by testing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it works, move to step 1 for the next thing you’d like it to do.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If it doesn’t work, delete the code from Copilot, go back to step 1, and modify
    the prompt (and see the remedies shown previously in table 2.1).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.8.2 Showcasing Copilot’s value in a data processing task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this bigger example, we want you to focus on how we’re interacting with
    the tools and the skills we need. We don’t expect you to understand the code until
    much later in the book. We provide the code solely so you can see what Copilot
    gave us, but you don’t need to try to understand the code in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: You’re welcome to follow through this example with us or just read through it.
    We haven’t given you the skills yet to progress if you get stuck, so feel free
    to wait to work through an example like this until a later chapter. We’ll assume
    for the rest of this section that you’ll just be reading along.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to start with some data processing as this is something that many of
    you have likely done in your personal or professional lives. To find a dataset,
    we went to a great website called Kaggle [4], which has tons of datasets freely
    available for use. Many of them include important data such as health statistics
    for different countries, information to help track the spread of disease, and
    so on. We’re not going to use those because we’d like to have something lighter
    for our first program. Because both of us are American football fans, we’ll play
    with the National Football League (NFL) offensive stats database. Here’s the link
    to the dataset we found if you want to look into it yourself: [https://mng.bz/86pw](https://mng.bz/86pw).
    The dataset has NFL information from 2019 to 2022 (figure 2.5).'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/2-5.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 The first few columns and rows of the nfl_offensive_stats.csv dataset
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Step 1: Understanding our dataset'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The nfl_offensive_stats.csv file is a comma-separated values (CSV) text file
    (refer to figure 2.5 for a portion of the file). This is a standard format for
    storing data. It has a header row at the top that explains what’s in every column.
    The way that we (or a computer) know the boundaries between columns is to use
    commas between cells. Also notice that each row is placed on its own line. Good
    news: Python has a bunch of tools for reading in CSV files.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by exploring what is stored in this file. To preview the file’s
    contents, you can look at it on the Kaggle webpage under Detail or download and
    open it in either VS Code or in spreadsheet software such as Microsoft Excel.
    Don’t worry about downloading and using this file just yet, that’s for later in
    the book. However, if you were to download and open it, here’s the start of the
    header (top) row (also shown earlier in figure 2.5):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: There are more columns, but these are enough for our first task. We’d like to
    know which quarterback has done the best over this time period.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: How well did all the quarterbacks do over that time period?'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you don’t follow American football, that’s okay. You don’t need to know the
    game to follow along. Quarterbacks are responsible for throwing the football.
    We’ll start then with looking at how many yards they passed for in that time period.
    We only want to compare against other quarterbacks because they are the players
    whose job is to throw the ball. Sure, a running back might throw the ball once
    a season, and it’s often fun when they do, but it’s not really their job. To include
    only the quarterbacks, we’ll need to tell Copilot to limit our results to just
    players whose *Position* (the third column) is *QB* (stands for Quarterback).
    To solve this task, we created a new Python file called nfl_stats.py and had a
    conversation with Copilot that you can see in listing 2.1.
  prefs: []
  type: TYPE_NORMAL
- en: Listing 2.1 Copilot’s code to analyze the top quarterbacks
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '#1 Our first prompt to read in the data'
  prefs: []
  type: TYPE_NORMAL
- en: '#2 Copilot’s responses sometimes include comments. Comments that we get from
    Copilot won’t be in bold, unlike our prompts, which are in bold.'
  prefs: []
  type: TYPE_NORMAL
- en: '#3 Our second prompt to analyze the data'
  prefs: []
  type: TYPE_NORMAL
- en: '#4 Our third prompt to print the results'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we gave Copilot three prompts. The first was to handle the input
    data, the second was to process the data, and the third was to output the response.
    This cycle of input data, process data, and output data is exceptionally common
    in programming tasks.
  prefs: []
  type: TYPE_NORMAL
- en: If you chose to follow along with us and gave these prompts to Copilot, you
    might have gotten back different code. That’s okay because Copilot is nondeterministic,
    so it won’t always give the same result. However, if it gave you different code,
    we haven’t equipped you with the tools to know if it’s correct yet. As such, feel
    free to just use our code if you’d like to follow along.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reminder: Copilot is nondeterministic'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'As mentioned in both chapter 1 and this chapter, Copilot is nondeterministic,
    so what Copilot gives you may not match what it gives us. This is going to be
    a challenge for the rest of the book: What do you do if you get a wrong result
    when we get a right result? We’re fairly confident that Copilot will give you
    a correct answer here, but if you get a *wrong answer* from Copilot, go ahead
    and read the remainder of this section rather than working along with Copilot
    in VS Code. We’ll absolutely give you all the tools you need to fix the code when
    Copilot gives you a wrong answer, but that skill will be taught over the remainder
    of the book, so we don’t want you to get stuck on this now.'
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the results from Copilot, we have to say this is quite impressive.
    You don’t need to worry about the code yet, but note that writing this code from
    scratch would be difficult for many new learners. The good news is that anyone
    can use this powerful tool to do so much more than is possible to do without it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Using Copilot to modify the code to exclude one player'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We can use Copilot not just to generate new code but to modify it as well.
    If we run that code from listing 2.1 on the dataset, here are the first five lines
    from the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If you follow football, these results shouldn’t be a surprise to you. Just to
    see how well Copilot can adapt to our wishes, let’s try to make a minor change.
    Suppose that because Tom Brady is already recognized as one of the best QBs of
    all time, you would rather omit him from this comparison.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this change, we’re just going to modify the prompt at the bottom. We
    went to the point in the code where it says the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We deleted the code, leaving just the comment, and added another line to the
    docstring:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Copilot then suggested the following to us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '#1 Code that excludes Tom Brady from the data'
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s exactly what we’d like to see changed in the code. (Thanks, Tom Brady,
    for being a good sport in this example.) The code excluded all data for Tom Brady
    at the point of printing the results. When we save the file and run it again,
    the first five lines now appear like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Reflecting on the example and the skills we need to write code with copilot
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Without writing any code ourselves, we were able to solve a large real-world
    task. However, you still need to learn some essential programming skills. We’ll
    teach you those skills in the upcoming chapters by solving a variety of tasks.
    By the end of chapter 7, you’ll be able to solve large tasks like these. We want
    you to take away the following from this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Copilot is a powerful tool.* We didn’t write any code ourselves, but we were
    able to get Copilot to generate the code needed to perform some initial analysis
    of the data. If you’ve used spreadsheets, you can probably think of a way to do
    this using spreadsheet applications such as Microsoft Excel, but it likely wouldn’t
    be as easy as writing code like this. Even if you haven’t used spreadsheets before,
    you’ve got to admit that it’s amazing that writing basic, human-readable prompts
    can produce correct code and output like this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Breaking problems into small tasks is important.* For this example, we tried
    writing this code with just a single large prompt (not shown) or by breaking it
    into smaller tasks. We found that Copilot was more apt to make mistakes when given
    one large task rather than multiple smaller tasks. In general, breaking the problem
    into smaller tasks significantly increases the likelihood of Copilot generating
    the right code. You’ll see how to break down larger problems into smaller tasks
    throughout the remainder of this book because this is one of the most important
    skills you’ll need. In fact, the upcoming chapter 3 will help you start understanding
    what are considered reasonable tasks to give to Copilot, and chapter 7 will be
    dedicated entirely to learning how to break down larger programs into smaller
    pieces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*We still need to understand code to some degree.* This is true for several
    reasons. One is that writing good prompts requires a basic understanding of what
    computers know and what they don’t. We can’t just give a prompt to Copilot that
    says, “Give me the number of passing yards for Tom Brady.” Copilot likely wouldn’t
    be able to figure out where the data is stored, the format of the data, which
    columns correspond to players and passing yards, or that Tom Brady is a player.
    We had to spell details like that out to Copilot for it to be successful. Another
    reason has to do with determining whether code from Copilot is reasonable. When
    the two of us read the response from Copilot, we could determine what the code
    is doing because we know how to read code. You’ll need to be able to do this to
    some degree, which is why chapters 4 and 5 are dedicated to reading code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Testing is important.* We need to know if the code Copilot gave us is correct
    or not! When programmers talk about testing, they’re referring to the practice
    of making sure that their code works correctly, even in possibly unexpected circumstances.
    We didn’t spend much time on this piece, other than checking whether Copilot’s
    answer is plausible using estimates on just one dataset, but, in general, we’ll
    need to spend more time on testing because this is a critical part of the code-writing
    process. It likely goes without saying, but errors in code range from embarrassing
    (if you tell your hard-core NFL fan friend the wrong number of passing yards for
    a player) to dangerous (if software in a car behaves incorrectly) to costly (if
    businesses make decisions on wrong analyses). After you’ve learned how to read
    code, we have first-hand experience that even if the code looks correct, it might
    not be! To address this, we must test every piece of code created by Copilot to
    ensure it does what it should. You’ll learn how to rigorously test Copilot’s code
    in later chapters, especially chapter 6, which is dedicated to the skill.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Python is powerful.* It’s okay if you missed this, but in listing 2.1, the
    code imported a module from Python’s libraries (`import` `csv`). Python has many
    built-in tools (called libraries) to help people accomplish their tasks. In this
    case, it was importing a library to make it easier to read and modify CSV files.
    We’ll harness more of these libraries in later chapters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python modules
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Python modules expand the capability of the programming language. There are
    many modules in Python, and they can help you do anything from data analysis to
    creating websites to writing video games. You can recognize when code wants to
    use a Python module by the `import` statement in the code. Some modules are built-in
    to Python, but there are thousands more that aren’t and that you need to manually
    install if you want to use them. Chapter 5 will show you how to use modules.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ve accomplished a great deal! If you’ve finished setting
    up your programming environment and gotten started writing code with Copilot,
    you should be proud. You’ve taken a huge step toward writing software! Beyond
    the details of setting up your environment, you’ve seen where we’re headed by
    working through an example together.
  prefs: []
  type: TYPE_NORMAL
- en: In the examples in this chapter, Copilot gave us the code we wanted without
    us needing to change the prompt or debug the code to figure out why it’s not working
    properly. That was a nice way to showcase the power of using an AI assistant to
    program, but you’ll often find yourself having to test the code, change the prompts,
    and sometimes try to understand why the code is wrong. This is the AI assistant
    programming process that you’ll learn more about in upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You installed Python and VS Code and set up Copilot so you can work along with
    the book and start writing code yourself.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The VS Code interface has areas for file management, code editing, and running
    code that will be used throughout the book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prompts are how we tell Copilot to generate code, which, when written carefully,
    can be a highly effective way of creating software.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data analysis is a common programming task, and using CSV files is a common
    way to store data to be processed by computers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copilot is a powerful tool that can produce sophisticated code under the proper
    human supervision.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
