- en: 1 Introducing AI-assisted programming with GitHub Copilot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: How AI assistants change how new programmers learn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why programming is never going to be the same
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How AI assistants such as GitHub Copilot work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Possible perils of AI-assisted programming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Computer programming has long been the domain of professionals with special
    training and advanced skills. After all, you want the applications running your
    bank, phone, car, and so on to work exactly right every time! Just as room-sized
    computers with stacks of paper cards and miles of magnetic tape have been replaced
    by modern devices, programming languages and tools have also become easier to
    use. And now, artificial intelligence (AI) tools such as ChatGPT put computer
    programming within the reach of almost everyone. We want to help open this door
    for you!
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to program, and you’ll be able to take on new tasks at work, create
    your own computer games, and put the computer to work for you at your job. In
    this book, we’ll show you how to write your own computer programs using ChatGPT
    and GitHub Copilot. Along the way, you’ll learn some skills in Python, one of
    the most popular programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 Improving how we talk to computers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start by asking a computer to count from 0 to 9\. Decades ago, a book
    about programming would have asked you to learn how to read and understand the
    following code (based on [https://mng.bz/EOdO](https://mng.bz/EOdO)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We’re glad that’s not how we program anymore. That monstrosity was written using
    code in assembly language, a low-level programming language. Low-level programming
    languages, as you can see, aren’t languages that humans can easily read and write.
    They’re designed for computers, not humans.
  prefs: []
  type: TYPE_NORMAL
- en: No one wants to write programs like that, but, especially in the past, it was
    sometimes necessary. Programmers could use it to define exactly what they wanted
    the computer to do, down to individual instructions. This level of control was
    needed to squeeze every bit of performance out of underpowered computers. For
    example, the most speed-critical pieces of 1990s computer games, such as Doom
    and Quake, were written in assembly language like the previous code example. It
    wouldn’t have been possible to make those games otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 1.1.1 Making it a little easier
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, let’s move on. Here’s a more modern computer program that also prints
    numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This code is in the Python language, which is what many programmers use these
    days. Unlike assembly language, which is a low-level language, Python is considered
    a high-level language because it’s much closer to natural language. Even though
    you don’t know about Python code yet, you might be able to guess what this program
    is trying to do. The first line looks like it’s doing something with the range
    of numbers from 0 to 9\. The second line is printing something. It’s not too hard
    to believe that this program, just like the assembly language monstrosity, is
    supposed to print the numbers 0 to 9\. Unfortunately, something is wrong, and
    it prints the numbers 0 to 8 instead.
  prefs: []
  type: TYPE_NORMAL
- en: While this code is closer to English, it isn’t English. It’s a programming language
    that, like assembly language, has specific rules. As in the previous code, misunderstanding
    the details of those rules can result in a broken program. If you’re curious,
    the misunderstood rule was that the `range` function stops one before the second
    number provided, so it doesn’t include the number 9\. If you wanted 0 through
    9, you’d need to say `range(0,10)`.
  prefs: []
  type: TYPE_NORMAL
- en: The holy grail of communicating with a computer is to do so in a natural language
    such as English. We’ve been talking to computers using various programming languages
    over the past 80 years not because we want to but because we have to. Computers
    were simply not powerful enough for the vagaries and idiosyncrasies of a language
    like English. Our programming languages improved—from symbol-soup assembly language
    to Python, for example—but they are still computer languages, not natural languages.
    This is changing.
  prefs: []
  type: TYPE_NORMAL
- en: 1.1.2 Making it a lot easier
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using an AI assistant, we can now ask for what we want in English and have
    the computer code written for us in response. To get a correct Python program
    that prints the numbers from 0 to 9, we can ask our AI assistant (Copilot) in
    normal English language like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Copilot might respond to this prompt by generating something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Unlike the example we showed you before, this piece of Python code actually
    works!
  prefs: []
  type: TYPE_NORMAL
- en: AI coding assistants can be used to help people write code. In this book, we’ll
    learn how to use Copilot to write code for us. We’ll ask for what we want in English
    and get the code back in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'More than that, we’ll be able to use Copilot as a seamless part of our workflow.
    Without tools like Copilot, programmers routinely have two windows open: the one
    to write code and the other to ask Google how to write code. This second window
    has Google search results, Python documentation, or forums of programmers talking
    about how to write code to solve that particular problem. They’re often pasting
    code from these results into their code, then tweaking it slightly for their context,
    trying alternatives, and so on. This has become a way of life for programmers,
    but you can imagine the inefficiency here. By some estimates, up to 35% of programmers’
    time is spent searching for code [1], and much of the code that is found isn’t
    readily usable. Copilot greatly improves this experience by helping us write our
    code.'
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 About the technology
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll use two main technologies in this book: Python and GitHub Copilot. Python
    is the programming language that we’ll use, and GitHub Copilot is our AI assistant
    that will help us work with the Python code.'
  prefs: []
  type: TYPE_NORMAL
- en: 1.2.1 Python, your programming language
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned, Python is a programming language, which is a way to communicate
    with a computer. People use it to write all kinds of programs that do useful things
    such as data analysis, games, interactive websites, visualizations, file organization
    apps, automating routine tasks, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: There are other programming languages as well, such as Java, C++, Rust, and
    many others. Copilot works with those, too, but at the time of this writing, it
    works really well with Python. Python code is a lot easier to write compared to
    many other languages (especially assembly code). Even more importantly, Python
    is easy to *read*. After all, we’re not going to be the ones writing the Python
    code—our AI assistant is!
  prefs: []
  type: TYPE_NORMAL
- en: Computers don’t know how to read and run Python code. The only thing computers
    can understand is something called *machine code*, which looks even more ridiculous
    than assembly code because it’s the binary representation of the assembly code
    (yep, just a bunch of 0s and 1s!). Behind the scenes, your computer takes any
    Python code that you provide and converts it into machine code before it runs,
    as shown in figure 1.1.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/1-1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 Your Python program goes through several steps before you see the
    output on your screen.
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: So, no one is writing code from scratch in the machine code language of computers
    anymore. Programmers are all picking the language that’s most convenient for their
    particular task at the time and using software to help them write, run, and debug
    (i.e., fix) the code, called an Integrated Development Environment (IDE). In the
    book, we’ll be using Visual Studio Code (VS Code) as our IDE because it works
    exceptionally well with GitHub Copilot.
  prefs: []
  type: TYPE_NORMAL
- en: 1.2.2 GitHub Copilot, your AI assistant
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What is an AI assistant? An AI assistant is an AI agent that helps you get work
    done. Maybe you have an Amazon Alexa device at home or an iPhone with Siri—these
    are AI assistants. They help you order groceries, be aware of the weather, or
    determine that, yes, the woman who played Bellatrix in the *Harry Potter* movies
    really was in *Fight Club*. An AI assistant is just a computer program that responds
    to typical human inputs such as speech and text with human-like answers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copilot is an AI assistant with a specific job: it converts English into computer
    programs (along with a whole lot more, as we’ll soon see). There are other AI
    assistants like Copilot, including Amazon Q Developer, Tabnine, and Ghostwriter.
    We chose Copilot for this book based on a combination of the quality of code that
    we’ve been able to produce, stability (it has never crashed for us!), and our
    own personal preferences. We encourage you to also check out other tools when
    you feel comfortable doing so.'
  prefs: []
  type: TYPE_NORMAL
- en: 1.2.3 How Copilot works behind the scenes—in 30 seconds
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can think of Copilot as a layer between you and the computer program you’re
    writing. Instead of writing the Python directly, you simply describe the program
    you want in words—this is called a *prompt *—and Copilot generates the program
    for you.
  prefs: []
  type: TYPE_NORMAL
- en: The brain behind Copilot is a fancy computer program called a *large language
    model* (LLM). An LLM stores information about relationships between words, including
    which words make sense in certain contexts, and uses this to predict the best
    sequence of words to respond to a prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine that we asked you what the next word should be in this sentence: “The
    person opened the ________.” There are many words that you could fill in here,
    like “door,” “box,” or “conversation,” but there are also many words that wouldn’t
    fit here, like “the,” “it,” or “open.” An LLM takes into account the current context
    of words to produce the next word, and it keeps doing this until it has completed
    the task. It does this in a way that is *nondeterministic*, which just means that
    its decisions are somewhat random, meaning if you ask it to fill in that word,
    sometimes it will give you the word “door,” and sometimes it will give you the
    word “box.” This means that if you ask Copilot to give you code, it may give you
    different answers each time you ask.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, notice that we didn’t say anything about Copilot having an understanding
    of what it’s doing. It just uses the current context to keep writing code. Keep
    this in mind throughout your journey: only we know whether the code that’s generated
    does what we intended it to do. Very often it does, but you should always exercise
    healthy skepticism regardless. Figure 1.2 gives you an idea of how Copilot goes
    from prompt to program.'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/1-2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 Going from prompt to program with Copilot
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You might wonder why Copilot writes Python code for us and not machine code
    directly. Isn’t Python an expendable intermediate step now? Well, no, and the
    reason is that Copilot is going to make mistakes. And if it’s going to make mistakes
    that we need to fix, it’s a lot easier to do that with Python than with machine
    code.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, virtually no one checks if the machine code produced from Python is
    correct. This is partially because of the determinism of the Python language specification.
    One could imagine a future where Copilot conversations are so accurate that inspecting
    the Python is unnecessary, but we’re a long way from that.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 How Copilot changes how we learn to program
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When learning how to program in the past, learners often spent most of their
    time working with the syntax and basic structure of programs. When we use the
    word *syn**tax*, we’re referring to the symbols and words that are valid in a
    given language. Programmers would need to write all of the syntax of a program
    from scratch (character by character, line by line). People learning to program
    used to spend weeks or months to get to a point where they could write even basic
    programs. Now, Copilot can immediately write those same basic programs and offers
    code that is almost always syntactically and structurally correct. As you’ll see
    in the rest of the book, we still need to verify that this code is correct because
    Copilot can make mistakes. However, we don’t need to write it from scratch anymore.
    We believe Copilot and similar tools signal the end of the old way that people
    learned to program.
  prefs: []
  type: TYPE_NORMAL
- en: You, as someone interested in learning how to program, simply don’t need to
    struggle with syntax, understanding exactly how to call a given Python function,
    and the host of other Python concepts needed to write code like you’d have had
    to in the past. Sure, we’re going to learn about those concepts in this book,
    but not so that you can demonstrate your understanding by writing code from scratch
    that Copilot can produce easily. No, we’ll learn those concepts only because they
    help us solve meaningful problems and interact productively with Copilot. Instead,
    you get to learn how to write larger, more meaningful software faster because
    of how an AI assistant fundamentally changes the skills needed to learn programming.
  prefs: []
  type: TYPE_NORMAL
- en: 1.4 What else can Copilot do for us?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we’ve seen, we can use Copilot to write Python code for us starting from
    an English description of what we want. So, we can say that Copilot takes a description
    in English syntax and gives us back code in Python syntax. That’s a big win because
    learning programming syntax has historically been a major stumbling block for
    new programmers. What kind of bracket—[, (, or {—am I supposed to use here? Do
    I need indentation here? What order are we supposed to write these things in:
    x and then y, or y and then x?'
  prefs: []
  type: TYPE_NORMAL
- en: Such questions abound, and—let’s be honest—it’s uninteresting stuff. Who cares
    about this when all we want to do is write a program to make something happen?
    Copilot can help free us from the tedium of syntax. We see this as an important
    step to help more people successfully write programs, and we look forward to the
    day when this artificial barrier is completely removed. For now, we still need
    Python syntax, but at least Copilot helps us with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'But that’s not all Copilot can do. Here are some associated—and no less important—tasks
    Copilot can help us with:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Explaining code —*When Copilot generates Python code for us, we’ll need to
    determine whether that code does what we want. Again, as we said previously, Copilot
    is going to make mistakes. Although we’re not interested in teaching you every
    nuance of how Python works (that’s the old model of programming), we’ll teach
    you how to read Python code to gain an overall understanding of what it does.
    We’ll also use the Copilot feature that explains code to you in English. When
    you finish with this book and our explanations, you’ll still have Copilot available
    to help you understand that next bit of gnarly code that it gives you.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Making code easier to understand —*There are different ways to write code
    to accomplish the same task. Some may be easier to understand than others. You
    can ask Copilot to reorganize your code to make it easier to work with. Code that’s
    easier to read is often easier to enhance or fix when needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Fixing bugs —*A *bug* is a mistake made when writing a program that can result
    in the program doing the wrong thing. Sometimes, your Python code almost works
    or works almost always but not in one specific circumstance. If you’ve listened
    to programmers talk, you may have heard the common story where a programmer would
    spend hours only to finally remove one = symbol that was making their program
    fail. That’s not a fun few hours! In these cases, you can try the Copilot feature
    that helps to automatically find and fix the bug in the program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Explaining errors —*If your code isn’t working correctly, you’ll often get
    an error report back from the Python runtime environment. Those errors can be
    fairly cryptic at times, but Copilot can help you interpret the error and guide
    you on how to fix it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Finding Python libraries —*Python is a mature language with many modules (libraries)
    that can aid particular tasks, such as data analysis, writing games, working with
    different image file formats, and so on. A quick conversation with Copilot can
    often help you find modules that will make your work easier and give you examples
    to get you started.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1.5 Risks and challenges when using Copilot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we’re all pumped up about getting Copilot to write code for us, we
    need to talk about the dangers inherent in using AI assistants (see references
    [2] and [3] for elaboration on some of these points):'
  prefs: []
  type: TYPE_NORMAL
- en: '*Copyright*—Copilot learned how to program using human-written code. (You’ll
    hear people use the word “train” when talking about AI tools like Copilot. In
    this context, training is another word for learning.) More specifically, it was
    trained using millions of GitHub repositories containing open-source code. One
    worry is that Copilot will “steal” that code and give it to us. In our experience,
    Copilot doesn’t often suggest a large chunk of someone else’s code, but that possibility
    is there. Even if the code that Copilot gives us is a melding and transformation
    of various bits of other people’s code, there may still be licensing problems.
    For example, who owns the code produced by Copilot? There is currently no consensus
    on the answer. The Copilot team is adding features to help; for example, Copilot
    can tell you whether the code that it produced is similar to already-existing
    code and what the license is on that code [4]. Learning and experimenting on your
    own is great, and we encourage that—but take care if you intend to use this code
    for purposes beyond your home. We’re intentionally a bit vague here because it
    may take some time for laws to catch up to this new technology. It’s best to play
    it safe while these debates are had within society.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Education —*As instructors of introductory programming courses ourselves,
    we’ve seen firsthand how well Copilot does on the types of assignments we’ve given
    our students in the past. In one study [5], Copilot was asked to solve 166 common
    introductory programming tasks. How well did it do? On its first attempt, it solved
    almost 50% of these problems. Give Copilot a little more information, and that
    number goes up to 80%. Education needs to change in light of tools like Copilot,
    and instructors are currently discussing how these changes may look. At some schools,
    students are allowed to use Copilot to aid in their learning and on their assignments.
    At other schools, Copilot isn’t allowed in some contexts (i.e., exams) or for
    some students (computer science majors). At many schools, LLMs are being allowed
    to act as tutors for students. In some cases, the LLM tutors are just regular
    LLMs like Copilot or ChatGPT, but, in other cases, the LLM interface has been
    changed to restrict the kind of answers students receive. It’s still too early
    to know how LLMs will affect computing education, but trends like these have already
    started to emerge.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Code quality*—We need to be careful not to trust Copilot, especially with
    sensitive code or code that needs to be secure. Code written for medical devices,
    for example, or code that handles sensitive user data must always be thoroughly
    understood. It’s tempting to ask Copilot for code, marvel at the code that it
    produces, and accept that code without scrutiny. But that code might be plain
    wrong. In this book, we’ll work on code that won’t be deployed at large, so, while
    we’ll focus on getting the correct code, we won’t worry about the implications
    of using this code for broader purposes. We’ll also build the foundations you’ll
    need to independently determine whether code is correct.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Code security*—As with code quality, code security is absolutely not assured
    when we get code from Copilot. For example, if we’re working with user data, getting
    code from Copilot isn’t enough. We would need to perform security audits and have
    expertise to determine that the code is secure. Again, though, we won’t be using
    code from Copilot in real-world scenarios, so we won’t focus on security concerns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Not an expert*—One of the markers of being an expert is awareness of what
    one knows and, equally important, what one doesn’t. Experts are also often able
    to state how confident they are in their response, and if they aren’t confident
    enough, they will learn further until they know that they know. Copilot and, more
    generally, LLMs, don’t do this. You ask them a question, and they answer, plain
    as that. They will confabulate if necessary: they will mix bits of truth with
    bits of garbage into a plausible-sounding but overall nonsensical response. For
    example, we’ve seen LLMs fabricate obituaries for people who are alive, which
    doesn’t make any sense, yet the “obituaries” do contain elements of truth about
    people’s lives. When asked why an abacus can perform math faster than a computer,
    we’ve seen LLMs come up with confident-sounding responses—including something
    about abacuses being mechanical and therefore necessarily the fastest. There is
    ongoing work in this area for LLMs to be able to say, “Sorry, no, I don’t know
    this,” but we’re not there yet. They don’t know what they don’t know, and that
    means they need supervision.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bias*—LLMs will reproduce the same biases present in the data on which they
    were trained. If you ask Copilot to generate a list of names, it will generate
    primarily English names. If you ask for a graph, it may produce a graph that doesn’t
    consider perceptual differences among humans. And, if you ask for code, it may
    produce code in a style reminiscent of how particular groups write code. (After
    all, the demographic groups that are well represented in computing wrote most
    of the code in the world, and Copilot is trained on that code.) Computer science
    and software engineering have long suffered from a lack of diversity. We can’t
    afford to stifle diversity further, and we need to reverse the trend. We need
    to let more people in and allow them to express themselves in their own ways.
    How this will be handled with tools like Copilot is currently being worked out
    and is crucially important to the future of programming. However, we believe Copilot
    has the potential to improve diversity by lowering barriers to entry into the
    field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1.6 The skills we need
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If Copilot can write our code, explain it, and fix bugs in it, are we just done?
    Do we just tell Copilot what to do and celebrate our pure awesomeness?
  prefs: []
  type: TYPE_NORMAL
- en: No. First, Copilot can make mistakes. The code it gives us might be syntactically
    correct, but sometimes it doesn’t do what we want it to do. We need to be vigilant
    to catch when Copilot makes these mistakes. Second, although some of the skills
    that programmers rely on (e.g., writing correct syntax) will decrease in importance,
    other skills remain critical. For example, you can’t throw a huge task at Copilot
    like, “Make a video game. Oh, and make it fun.” Copilot will fail. Instead, we
    need to break down such a large problem into smaller tasks that Copilot can help
    us with. How do we break a problem down like that? Not easily, it turns out. Humans
    need to develop this key skill when engaging in conversations with tools like
    Copilot, and we teach this skill throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: Other skills, believe it or not, may take on even more importance with Copilot.
    Testing code has always been a critical task in creating high-quality code. We
    know a lot about testing code written by humans because we know where to look
    for typical problems. We know that humans often make programming errors at the
    boundaries of values. For example, if we wrote a program to multiply two numbers,
    we’d likely get most values right but maybe not when one value is 0\. What about
    code written by AI, where 20 lines of flawless code could hide 1 line so absurd
    that we likely wouldn’t expect it there? We don’t have experience with that. We
    need to test even more carefully than before.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to know how to fix mistakes when the code is wrong. This process
    is called *debugging* and is still essential, particularly when Copilot gives
    you code that is close to correct but not quite there yet.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, some required skills are entirely new. The main one here is called
    *prompt engineering*, which involves how to tell Copilot what to do. As mentioned
    earlier, when we’re asking Copilot to write some code, we’re using a prompt to
    make the request. Although we can use English to write that prompt and ask for
    what we want, it’s not enough. We need to be very precise if we want Copilot to
    have any chance of doing the right thing. And, even when we’re precise, Copilot
    may still do the wrong thing. In that case, we need to first identify that Copilot
    has indeed made a mistake. Then, we can try to tweak our description to hopefully
    nudge it in the right direction. In our experience, seemingly minor changes to
    the prompt can have outsized effects on what Copilot produces. In this book, we’ll
    teach you all of these skills.
  prefs: []
  type: TYPE_NORMAL
- en: 1.7 Societal concerns about AI code assistants like Copilot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There’s societal uncertainty right now about AI code assistants like Copilot.
    We thought we’d end the chapter with a few questions and our current answers.
    Perhaps you’ve been wondering about some of these questions yourself! Our answers
    may turn out to be hilariously incorrect, but they do capture our current thoughts
    as two professors and researchers who have dedicated their careers to teaching
    programming:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Q:* Are there going to be fewer tech and programming jobs now that we have
    Copilot?'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*A:* Probably not. What we do expect to change is the nature of these jobs.
    For example, we see Copilot as being able to help with many tasks typically associated
    with entry-level programming jobs. This doesn’t mean that entry-level programming
    jobs go away, only that they change as programmers are able to get more done given
    increasingly sophisticated tools.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Q:* Will Copilot stifle human creativity? Will it just keep swirling around
    and recycling the same code that humans have already written, limiting the introduction
    of new ideas?'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*A:* We suspect not. Copilot helps us work at a higher level, further removed
    from the underlying machine code, assembly code, or Python code. Computer scientists
    use the term *abstraction* to refer to the extent that we can disconnect ourselves
    from the low-level details of computers. Abstraction has been happening since
    the dawn of computer science, and we don’t seem to have suffered for it. On the
    contrary, it enables us to ignore problems that have already been solved and focus
    on solving broader and broader problems. Indeed, it’s been the advent of better
    programming languages that have facilitated better software—software that powers
    Google search, Amazon shopping carts, and macOS weren’t written (and likely couldn’t
    have been written) when we only had assembly!'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Q:* I keep hearing about ChatGPT. What is it? Is it the same as Copilot?'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*A:* It’s not the same as Copilot, but it’s built on the same technology. Rather
    than focus on code, though, ChatGPT focuses on knowledge in general. As a result,
    it has insinuated itself into a wider variety of tasks than Copilot. For example,
    it can answer questions, write essays, and even do well on a Wharton MBA exam
    [6]. Education will need to change as a result: we can’t have people ChatGPTing
    their way to MBAs! The worthwhile ways in which we spend our time may change.
    Will humans keep writing books and, if so, in what ways? Will people want to read
    books knowing they were partially or fully written by AI? There will be effects
    across industries, including finance, health care, and publishing [7]. At the
    same time, there is unfettered hype right now, so it can be difficult to separate
    truth from fiction. This problem is compounded by the simple truth that no one
    knows what’s going to happen here in the long term. There’s an old adage coined
    by Roy Amara (known as Amara’s law ) that says, “We tend to overestimate the effect
    of a technology in the short run and underestimate the effect in the long run.”
    As such, we need to do our best to be tuned into the discussion so that we can
    adapt accordingly.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the next chapter, we’ll get you started using Copilot on your computer so
    you can get up and running writing software.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Copilot is an AI assistant, which is an AI agent that helps you get work done.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copilot changes how humans interact with computers, as well as the way we write
    programs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copilot changes the focus of skills we need to hone (less focus on syntax, more
    focus on problem decomposition and testing).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copilot is nondeterministic; sometimes it produces correct code, and sometimes
    it doesn’t. We need to be vigilant.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Problems around copyright of code, education and job training, and bias in Copilot
    results still need to be worked out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
