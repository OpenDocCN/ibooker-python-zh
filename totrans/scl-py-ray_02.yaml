- en: Chapter 1\. What Is Ray, and Where Does It Fit?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章 什么是 Ray，它在哪里？
- en: '*Ray* is primarily a Python tool for fast and simple distributed computing.
    Ray was created by the [RISELab](https://oreil.ly/aGtp8) at the University of
    California, Berkeley. An earlier iteration of this lab created the initial software
    that eventually became Apache Spark. Researchers from the RISELab started the
    company Anyscale to continue developing and to offer products and services around
    Ray.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*Ray* 主要是一个用于快速和简单分布式计算的 Python 工具。Ray 由加州大学伯克利分校的[RISELab](https://oreil.ly/aGtp8)创建。该实验室的早期版本创建了最初的软件，最终成为
    Apache Spark。RISELab 的研究人员成立了 Anyscale 公司，继续开发和提供围绕 Ray 的产品和服务。'
- en: Note
  id: totrans-2
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注
- en: You can also use Ray from Java. Like many Python applications, under the hood
    Ray uses a lot of C++ and some Fortran. Ray streaming also has some Java components.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以从 Java 使用 Ray。与许多 Python 应用程序一样，Ray 在底层使用大量的 C++ 和一些 Fortran。Ray 流处理还包含一些
    Java 组件。
- en: The goal of Ray is to solve a wider variety of problems than its predecessors,
    supporting various scalable programing models that range from actors to machine
    learning (ML) to data parallelism. Its remote function and actor models make it
    a truly general-purpose development environment instead of big data only.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Ray 的目标是解决比其前身更广泛的问题，支持从 actors 到机器学习（ML）到数据并行性等各种可扩展编程模型。其远程函数和 actor 模型使其成为一个真正通用的开发环境，而不仅仅是大数据环境。
- en: Ray automatically scales compute resources as needed, allowing you to focus
    on your code instead of managing servers. In addition to traditional horizontal
    scaling (e.g., adding more machines), Ray can schedule tasks to take advantage
    of different machine sizes and accelerators like graphics processing units (GPUs).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Ray 根据需要自动扩展计算资源，使您可以专注于代码而不是管理服务器。除了传统的水平扩展（例如增加更多机器），Ray 还可以安排任务以利用不同的机器规模和加速器，如图形处理单元（GPUs）。
- en: 'Since the introduction of Amazon Web Services (AWS) Lambda, interest in *serverless
    computing* has exploded. In this cloud computing model, the cloud provider allocates
    machine resources on demand, taking care of the servers on behalf of its customers.
    Ray provides a [great foundation for general-purpose serverless platforms](https://oreil.ly/BfxqQ)
    by providing the following features:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 自从引入亚马逊 Web 服务（AWS）Lambda 以来，对*无服务器计算*的兴趣激增。在这种云计算模型中，云提供商根据需求分配机器资源，并代表其客户管理服务器。Ray
    通过以下功能为[通用无服务器平台奠定了坚实基础](https://oreil.ly/BfxqQ)：
- en: It hides servers. Ray autoscaling transparently manages servers based on the
    application requirements.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ray 自动隐藏服务器。根据应用程序的需求，Ray 自动调整服务器规模。
- en: By supporting actors, Ray implements not only a stateless programming model
    (typical for the majority of serverless implementations) but also a stateful one.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过支持 actors，Ray 实现了不仅是状态无关的编程模型（对于大多数无服务器实现来说是典型的），还包括有状态的编程模型。
- en: It allows you to specify resources, including hardware accelerators required
    for the execution of your serverless functions.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许您指定资源，包括执行您的无服务器函数所需的硬件加速器。
- en: It supports direct communications between your tasks, thus providing support
    for not only simple functions but also complex distributed applications.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持任务之间的直接通信，因此不仅支持简单函数，还支持复杂的分布式应用程序。
- en: Ray provides a wealth of libraries that simplify the creation of applications
    that can fully take advantage of Ray’s serverless capabilities. Normally, you
    would need different tools for everything, from data processing to workflow management.
    By using a single tool for a larger portion of your application, you simplify
    not only development but also your operation management.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Ray 提供了丰富的库，简化了能够充分利用 Ray 无服务器功能的应用程序的创建。通常情况下，您需要不同的工具来处理从数据处理到工作流管理的所有内容。通过使用单一工具处理应用程序的较大部分，您不仅简化了开发，还简化了运营管理。
- en: In this chapter, we’ll look at where Ray fits in the ecosystem and help you
    decide whether it’s a good fit for your project.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 Ray 在生态系统中的定位，并帮助您决定它是否适合您的项目。
- en: Why Do You Need Ray?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么需要 Ray？
- en: We often need something like Ray when our problems get too big to handle in
    a single process. Depending on how large our problems get, this can mean scaling
    from multicore all the way through multicomputer, all of which Ray supports. If
    you find yourself wondering how you can handle next month’s growth in users, data,
    or complexity, our hope is you will take a look at Ray. Ray exists because scaling
    software is hard, and it tends to be the kind of problem that gets harder rather
    than simpler with time.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的问题变得太大，无法在单一进程中处理时，通常需要像 Ray 这样的工具。根据问题的规模，这可能意味着从多核到多台计算机的扩展，Ray 支持这些都支持。如果您发现自己在思考如何处理下个月的用户增长、数据或复杂性时，希望您能看看
    Ray。Ray 的存在是因为扩展软件很难，而且随着时间推移，这类问题往往变得更加复杂而不是更简单。
- en: Ray can scale not only to multiple computers but also without you having to
    directly manage servers. Computer scientist Leslie Lamport [has said](https://oreil.ly/QHxmt),
    “A distributed system is one in which the failure of a computer you didn’t even
    know existed can render your own computer unusable.” While this kind of failure
    is still possible, Ray is able to automatically recover from many types of failures.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Ray 不仅可以扩展到多台计算机，还可以在您无需直接管理服务器的情况下进行扩展。计算机科学家 Leslie Lamport [曾说过](https://oreil.ly/QHxmt)，“分布式系统是一种在其中您甚至不知道存在的计算机的故障可能导致您自己的计算机无法使用的系统。”尽管这种故障仍然可能发生，但
    Ray 能够自动从许多类型的故障中恢复。
- en: Ray runs cleanly on your laptop as well as at scale with the same APIs. This
    provides a simple starting option for using Ray that does not require you to go
    to the cloud to start experimenting. Once you feel comfortable with the APIs and
    application structure, you can simply move your code to the cloud for better scalability
    without needing to modify your code. This fills the needs that exist between a
    distributed system and a single-threaded application. Ray is able to manage multiple
    threads and GPUs with the same abstractions it uses for distributed computing.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Ray 可以在您的笔记本电脑上以及使用相同的 API 在大规模上运行。这为使用 Ray 提供了一个简单的起始选项，无需您去云端开始实验。一旦您对 API
    和应用程序结构感到满意，您可以简单地将代码移至云端，以获得更好的可扩展性，而无需修改代码。这填补了分布式系统和单线程应用程序之间存在的需求。Ray 能够使用相同的抽象来管理多线程和
    GPU。
- en: Where Can You Run Ray?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ray 可以运行在哪些地方？
- en: Ray can be deployed in a variety of environments, ranging from your laptop to
    the cloud, to cluster managers like Kubernetes or Yarn, to six Raspberry Pis hidden
    under your desk.^([1](ch01.html#idm45354786473328)) In local mode, getting started
    can be as simple as a `pip install` and a call to `ray.init`. Much of modern Ray
    will automatically initialize a context if one is not present, allowing you to
    skip even this part.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Ray 可以部署在各种环境中，从您的笔记本电脑到云端，再到像 Kubernetes 或 Yarn 这样的集群管理器，甚至可以部署在藏在桌子底下的六台树莓派上。^([1](ch01.html#idm45354786473328))
    在本地模式下，开始使用 Ray 可以简单到执行 `pip install` 和调用 `ray.init`。现代化的 Ray 大部分将在没有上下文的情况下自动初始化一个上下文，允许您甚至跳过这一步。
- en: 'The `ray up` command, which is included as part of Ray, allows you to create
    clusters and will do the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`ray up` 命令是 Ray 的一部分，允许您创建集群并执行以下操作：'
- en: Provision a new instance/machine (if running on the cloud or cluster manager)
    by using the provider’s software development kit (SDK) or access machines (if
    running directly on physical machines)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用提供商的软件开发工具包（SDK）或访问物理机器（如果直接在物理机器上运行）来配置新的实例/机器（如果在云端或集群管理器上运行）
- en: Execute shell commands to set up Ray with the desired options
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行 shell 命令以设置具有所需选项的 Ray
- en: Run any custom, user-defined setup commands (for example, setting environment
    variables and installing packages)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行任何自定义的用户定义设置命令（例如，设置环境变量和安装软件包）
- en: Initialize the Ray cluster
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化 Ray 集群
- en: Deploy an autoscaler if required
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署自动缩放器（autoscaler）（如有必要）
- en: In addition to `ray up`, if running on Kubernetes, you can use the Ray Kubernetes
    operator. Although `ray up` and the Kubernetes operator are preferred ways of
    creating Ray clusters, you can manually set up the Ray cluster if you have a set
    of existing machines—​either physical or virtual machines (VMs).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `ray up` 外，如果在 Kubernetes 上运行，还可以使用 Ray Kubernetes 运算符。虽然 `ray up` 和 Kubernetes
    运算符是创建 Ray 集群的首选方法，但如果您有一组现有的机器（物理或虚拟机器），您也可以手动设置 Ray 集群。
- en: Depending on the deployment option, the same Ray code will work, with large
    variances in speed. This can get more complicated when you need specific libraries
    or hardware for code, for example. We’ll look more at running Ray in local mode
    in the next chapter, and if you want to scale even more, we cover deploying to
    the cloud and resource managers in [Appendix B](app02.html#appB).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 根据部署选项的不同，相同的 Ray 代码将以不同的速度运行。例如，当您需要特定的库或硬件来运行代码时，情况可能变得更加复杂。我们将在下一章中更详细地讨论在本地模式下运行
    Ray，并且如果您希望进一步扩展，我们将在 [附录 B](app02.html#appB) 中涵盖云和资源管理器的部署。
- en: Running Your Code with Ray
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ray 运行您的代码
- en: 'Ray is more than just a library you import; it is also a cluster management
    tool. In addition to importing the library, you need to *connect* to a Ray cluster.
    You have three options for connecting your code to a Ray cluster:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Ray 不仅仅是一个要导入的库；它也是一个集群管理工具。除了导入库之外，您还需要*连接*到一个 Ray 集群。有三种选项可以将您的代码连接到 Ray 集群：
- en: Calling `ray.init` with no arguments
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `ray.init` 而不带任何参数
- en: This launches an embedded, single-node Ray instance that is immediately available
    to the application.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这启动了一个嵌入式的单节点 Ray 实例，可以立即供应用程序使用。
- en: Using the [Ray Client `ray.init("ray://*<head_node_host>*:10001")`](https://oreil.ly/7your)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [Ray 客户端 `ray.init("ray://*<head_node_host>*:10001")`](https://oreil.ly/7your)
- en: By default, each Ray cluster launches with a Ray client server running on the
    head node that can receive remote client connections. Note, however, that when
    the client is located remotely, some operations run directly from the client may
    be slower because of wide area network (WAN) latencies. Ray is not resilient to
    network failures between the head node and the client.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，每个 Ray 集群都会启动一个 Ray 客户端服务器在主节点上运行，可以接收远程客户端连接。然而，需要注意的是，当客户端位于远程位置时，一些直接从客户端运行的操作可能会因广域网（WAN）延迟而变慢。Ray
    在主节点和客户端之间的网络故障上不具有容错性。
- en: Using the Ray command-line API
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Ray 命令行 API
- en: You can use the `ray submit` command to execute Python scripts on clusters.
    This will copy the designated file onto the head node cluster and execute it with
    the given arguments. If you are passing the parameters, your code should use the
    Python `sys` module that provides access to any command-line arguments via `sys.argv`.
    This removes the potential networking point of failure when using the Ray Client.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `ray submit` 命令在集群上执行 Python 脚本。这将把指定的文件复制到主节点集群上，并使用给定的参数执行它。如果要传递参数，则您的代码应使用
    Python 的 `sys` 模块，该模块通过 `sys.argv` 提供对任何命令行参数的访问。这样做可以消除使用 Ray 客户端时的潜在网络故障点。
- en: Where Does It Fit in the Ecosystem?
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它在生态系统中的位置是什么？
- en: Ray sits at a unique intersection of problem spaces.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Ray 位于问题空间的一个独特交汇点。
- en: The first problem that Ray solves is scaling your Python code by managing resources,
    whether they are servers, threads, or GPUs. Ray’s core building blocks are a scheduler,
    distributed data storage, and an actor system. The powerful scheduler that Ray
    uses is general purpose enough to implement simple workflows, in addition to handling
    traditional problems of scale. Ray’s actor system gives you a simple way of handling
    resilient distributed execution state. Ray is therefore able to act as a *reactive
    system*, whereby its multiple components can react to their surroundings.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Ray 解决的第一个问题是通过管理资源（服务器、线程或 GPU）扩展您的 Python 代码。Ray 的核心构建模块包括调度器、分布式数据存储和一个 actor
    系统。Ray 使用的强大调度器通用到足以实现简单的工作流，同时处理传统的规模问题。Ray 的 actor 系统为您提供了一种处理分布式执行状态的简单方法。因此，Ray
    能够作为*反应式系统*，其多个组件能够对其周围环境作出反应。
- en: In addition to the scalable building blocks, Ray has higher-level libraries
    such as Serve, Datasets, Tune, RLlib, Train, and Workflows that exist in the ML
    problem space. These are designed to be used by folks with more of a data science
    background than necessarily a distributed systems background.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 除了可扩展的构建模块之外，Ray 还具有更高级别的库，如 Serve、Datasets、Tune、RLlib、Train 和 Workflows，这些库存在于机器学习问题领域。它们的设计面向的是具有数据科学背景而不一定是分布式系统背景的人员。
- en: Overall, the Ray ecosystem is presented in [Figure 1-2](#figure-ray-ecosystem).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，Ray 生态系统在 [图 1-2](#figure-ray-ecosystem) 中展示。
- en: '![spwr 0102](assets/spwr_0102.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![spwr 0102](assets/spwr_0102.png)'
- en: Figure 1-2\. The Ray ecosystem
  id: totrans-41
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-2\. Ray 生态系统
- en: 'Let’s take a look at some of these problem spaces and see how Ray fits in and
    compares with existing tools. The following list, adapted from the Ray team’s
    [“Ray 1.x Architecture” documentation](https://oreil.ly/VJFlK), compares Ray to
    several related system categories:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这些问题领域，看看 Ray 如何适应并与现有工具进行比较。以下列表，改编自 Ray 团队的[“Ray 1.x 架构”文档](https://oreil.ly/VJFlK)，比较了
    Ray 与几个相关的系统类别：
- en: Cluster orchestrators
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 集群编排器
- en: Cluster orchestrators like [Kubernetes](https://oreil.ly/OpVAA), [Slurm](https://oreil.ly/GAn27),
    and Yarn schedule containers. Ray can leverage these for allocating cluster nodes.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于[Kubernetes](https://oreil.ly/OpVAA)、[Slurm](https://oreil.ly/GAn27)和 Yarn
    的集群编排器安排容器。Ray 可以利用这些来分配集群节点。
- en: Parallelization frameworks
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 并行化框架
- en: Compared to Python parallelization frameworks such as [multiprocessing](https://oreil.ly/kij8j)
    or [Celery](https://oreil.ly/xwEYN), Ray offers a more general, higher-performance
    API. In addition, Ray’s distributed objects support data sharing across parallel
    executors.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Python 并行化框架（如[multiprocessing](https://oreil.ly/kij8j)或[Celery](https://oreil.ly/xwEYN)）相比，Ray
    提供了一个更通用、性能更高的 API。此外，Ray 的分布式对象支持跨并行执行器的数据共享。
- en: Data processing frameworks
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 数据处理框架
- en: Ray’s lower-level APIs are more flexible and better suited for a “distributed
    glue” framework than existing data processing frameworks such as [Spark](https://oreil.ly/7DSc3),
    [Mars](https://oreil.ly/ejcw4), or [Dask](https://oreil.ly/Ol4SQ). Although Ray
    has no inherent understanding of data schemas, relational tables, or streaming
    dataflow, it supports running many of these data processing frameworks—​for example,
    [Modin](https://oreil.ly/SZKkm), [Dask on Ray](https://oreil.ly/9O2RK), [Mars
    on Ray](https://oreil.ly/GjawU), and [Spark on Ray (RayDP)](https://oreil.ly/cSE1V).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Ray 的低级 API 比现有的数据处理框架如[Spark](https://oreil.ly/7DSc3)、[Mars](https://oreil.ly/ejcw4)或[Dask](https://oreil.ly/Ol4SQ)更灵活，更适合作为“分布式粘合”框架。虽然
    Ray 没有对数据模式、关系表或流数据流有固有的理解，但它支持运行许多这些数据处理框架，例如[Modin](https://oreil.ly/SZKkm)、[Dask
    on Ray](https://oreil.ly/9O2RK)、[Mars on Ray](https://oreil.ly/GjawU)和[Spark on
    Ray（RayDP）](https://oreil.ly/cSE1V)。
- en: Actor frameworks
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 演员框架
- en: Unlike specialized actor frameworks such as [Erlang](https://oreil.ly/uRUun),
    [Akka](https://oreil.ly/Y4O4S), and [Orleans](https://oreil.ly/7WOhb), Ray integrates
    the actor framework directly into programming languages. In addition, Ray’s distributed
    objects support data sharing across actors.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与[Erlang](https://oreil.ly/uRUun)、[Akka](https://oreil.ly/Y4O4S)和[Orleans](https://oreil.ly/7WOhb)等专门的演员框架不同，Ray
    将演员框架直接集成到编程语言中。此外，Ray 的分布式对象支持跨演员的数据共享。
- en: Workflows
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流程
- en: When most people talk about workflows, they talk about UI or script-driven low-code
    development. While this approach might be useful for nontechnical users, it frequently
    brings more pain than value to software engineers. Ray uses programmatic workflow
    implementation, similar to [Cadence](https://oreil.ly/w6pjl). This implementation
    combines the flexibility of Ray’s dynamic task graphs with strong durability guarantees.
    Ray Workflows offers subsecond overhead for task launch and supports workflows
    with hundreds of thousands of steps. It also takes advantage of the Ray object
    store to pass distributed datasets between steps.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人谈论工作流程时，讨论的是 UI 或脚本驱动的低代码开发。尽管这种方法对非技术用户可能有用，但它经常给软件工程师带来更多痛苦而非价值。Ray 使用编程化的工作流程实现，类似于[Cadence](https://oreil.ly/w6pjl)。这种实现结合了
    Ray 动态任务图的灵活性和强大的耐久性保证。Ray 工作流程在任务启动时的开销不到一秒，并支持数十万步的工作流程。它还利用 Ray 对象存储在步骤之间传递分布式数据集。
- en: HPC systems
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: HPC 系统
- en: Unlike Ray, which exposes task and actor APIs, a majority of high-performance
    computing (HPC) systems expose lower-level messaging APIs, providing a greater
    application flexibility. Additionally, many of the HPC implementations offer optimized
    collective communication primitives. Ray provides a collective communication library
    that implements many of these functionalities.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 不同于 Ray 的是，大多数高性能计算（HPC）系统暴露了任务和演员 API，提供了更大的应用程序灵活性。此外，许多 HPC 实现提供了优化的集体通信原语。Ray
    提供了一个集体通信库，实现了许多这些功能。
- en: Big Data / Scalable DataFrames
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大数据 / 可扩展数据帧
- en: Ray offers a few APIs for scalable DataFrames, a cornerstone of the big data
    ecosystem. Ray builds on top of the Apache Arrow project to provide a (limited)
    distributed DataFrame API called `ray.data.Dataset`. This is largely intended
    for the simplest of transformations and reading from cloud or distributed storage.
    Beyond that, Ray also provides support for a more pandas-like experience through
    Dask on Ray, which leverages the Dask interface on top of Ray.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Ray为可扩展DataFrame提供了几个API，这是大数据生态系统的基石。Ray建立在Apache Arrow项目之上，提供了一个（有限的）分布式DataFrame
    API，称为`ray.data.Dataset`。这主要用于最简单的转换和从云端或分布式存储中读取数据。此外，Ray还通过Dask on Ray提供了更类似于pandas的体验，后者利用Ray上的Dask接口。
- en: We cover scalable DataFrames in [Chapter 9](ch09.html#ch09).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第9章](ch09.html#ch09)中详细介绍了可扩展的DataFrame。
- en: Warning
  id: totrans-58
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: In addition to the libraries noted previously, you may find references to Mars
    on Ray or Ray’s (deprecated) built-in pandas support. These libraries do not support
    distributed mode, so they can limit your scalability. This is a rapidly evolving
    area and something to keep your eye on in the future.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 除了之前提到的库外，你可能会在Mars on Ray或Ray的（已弃用的）内置pandas支持中找到参考资料。这些库不支持分布式模式，因此可能会限制你的可扩展性。这是一个快速发展的领域，未来需要密切关注。
- en: Machine Learning
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机器学习
- en: Ray has multiple ML libraries, and for the most part, they serve to delegate
    much of the fancy parts of ML to existing tools like PyTorch, scikit-learn, and
    TensorFlow while using Ray’s distributed computing facilities to scale. *Ray Tune*
    implements hyperparameter tuning, using Ray’s ability to train many local Python-based
    models in parallel across a distributed set of machines. *Ray Train* implements
    distributed training with PyTorch or TensorFlow. Ray’s *RLlib* interface offers
    reinforcement learning with core algorithms.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Ray有多个ML库，大多数情况下，它们用于将ML的精彩部分委托给现有工具，如PyTorch、scikit-learn和TensorFlow，同时利用Ray的分布式计算功能进行扩展。*Ray
    Tune*实现了使用Ray能力在分布式机器组中并行训练多个本地Python模型的超参数调优。*Ray Train*实现了使用PyTorch或TensorFlow进行分布式训练。Ray的*RLlib*接口提供了带有核心算法的强化学习。
- en: Part of what allows Ray to stand out from pure data-parallel systems for ML
    is its actor model, which allows easier tracking of state (including parameters)
    and inter-worker communication. You can use this model to implement your own custom
    algorithms that are not a part of Ray Core.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Ray之所以在ML的纯数据并行系统中脱颖而出，部分原因在于其Actor模型，它允许更轻松地跟踪状态（包括参数）和工作进程间通信。你可以使用该模型实现自己的定制算法，这些算法不属于Ray核心的一部分。
- en: We cover ML in more detail in [Chapter 10](ch10.html#ch10).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第10章](ch10.html#ch10)中详细介绍了机器学习。
- en: Workflow Scheduling
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作流调度
- en: Workflow scheduling is one of these areas which, at first glance, can seem really
    simple. A workflow is “just” a graph of work that needs to be done. However, all
    programs can be expressed as “just” a graph of work that needs to be done. New
    in 2.0, Ray has a Workflows library to simplify expressing both traditional business
    logic workflows and large-scale (e.g., ML training) workflows.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流调度是一个乍看起来可能非常简单的领域之一。一个工作流“只是”需要完成的工作的图表。然而，所有程序都可以被表达为“只是”需要完成的工作的图表。在2.0版本中，Ray引入了一个工作流库，用于简化传统业务逻辑工作流和大规模（例如，ML训练）工作流的表达。
- en: Ray is unique in workflow scheduling because it allows tasks to schedule other
    tasks without having to call back to a central node. This allows for greater flexibility
    and throughput.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Ray在工作流调度中独具特色，因为它允许任务调度其他任务，而无需回调到中心节点。这样可以提供更大的灵活性和吞吐量。
- en: If you find Ray’s workflow engine too low-level, you can use Ray to run Apache
    Airflow. Airflow is one of the more popular workflow scheduling engines in the
    big data space. The [Apache Airflow Provider for Ray](https://oreil.ly/sxMC8)
    lets you use your Ray cluster as a worker pool for Airflow.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得Ray的工作流引擎过于低级，你可以使用Ray来运行Apache Airflow。Airflow是大数据领域中较受欢迎的工作流调度引擎之一。[Ray的Apache
    Airflow提供程序](https://oreil.ly/sxMC8)允许你将Ray集群用作Airflow的工作池。
- en: We cover workflow scheduling in [Chapter 8](ch08.html#ch08).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第8章](ch08.html#ch08)中详细介绍了工作流调度。
- en: Streaming
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流式处理
- en: Streaming is generally considered to be processing “real-time-ish” data, or
    data “as-it-arrives-ish.” Streaming adds another layer of complexity, especially
    the closer to real time you try to get, as not all of your data will always arrive
    in order or on time. Ray offers standard streaming primitives and can use Kafka
    as a streaming data source and sink. Ray uses its actor model APIs to interact
    with streaming data.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 流处理通常被认为是处理“准实时”数据或“随到随用”数据。流处理增加了另一层复杂性，特别是在尝试接近实时处理时，因为并非所有数据都会按顺序或按时到达。Ray
    提供标准的流处理基元，并可以使用 Kafka 作为流数据的来源和接收端。Ray 使用其 Actor 模型 API 与流数据进行交互。
- en: Ray streaming, like many streaming systems bolted on batch systems, has some
    interesting quirks. Ray streaming, notably, implements more of its logic in Java,
    unlike the rest of Ray. This can make debugging streaming applications more challenging
    than other components in Ray.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Ray 流处理，像许多将流处理系统附加到批处理系统的系统一样，具有一些有趣的怪癖。值得注意的是，Ray 流处理主要在 Java 中实现其逻辑，与 Ray
    的其他组件不同。这可能会使得调试流处理应用程序比 Ray 的其他组件更具挑战性。
- en: We cover how to build streaming applications with Ray in [Chapter 6](ch06.html#ch06).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第 6 章](ch06.html#ch06)中讨论如何使用 Ray 构建流式应用程序。
- en: Interactive
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交互式
- en: Not all “real-time-ish” applications are necessarily streaming applications.
    A common example is interactively exploring a dataset. Similarly, interacting
    with user input (e.g., serving models) can be considered an interactive rather
    than a batch process, but it is handled separately from the streaming libraries
    with Ray Serve.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有“准实时”应用程序都必然是流式应用程序。一个常见的例子是交互式地探索数据集。类似地，与用户输入进行交互（例如，服务模型）可以被视为交互式而不是批处理过程，但它与
    Ray Serve 的流处理库分开处理。
- en: What Ray Is Not
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ray 不是什么
- en: 'While Ray is a general-purpose distributed system, it’s important to note there
    are some things Ray is not (at least, not without your expending substantial effort):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Ray 是一个通用的分布式系统，但重要的是要注意 Ray 并非（至少在不付出大量努力的情况下）：
- en: Structured Query Language (SQL) or an analytics engine
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构化查询语言（SQL）或分析引擎
- en: A data storage system
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据存储系统
- en: Suitable for running nuclear reactors
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适合运行核反应堆
- en: Fully language independent
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全独立于语言
- en: Ray can be used to do a bit of all of these, but you’re likely better off using
    more specialized tooling. For example, while Ray does have a key/value store,
    it isn’t designed to survive the loss of the leader node. This doesn’t mean that
    if you find yourself working on a problem that needs a bit of SQL, or some non-Python
    libraries, Ray cannot meet your needs—​you just may need to bring in additional
    tools.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Ray 可以用来执行所有这些操作，但您可能更适合使用更专业的工具。例如，虽然 Ray 有一个键/值存储，但它并非设计用于生存领导节点的丢失。这并不意味着如果您发现自己的问题需要一点
    SQL 或一些非 Python 库，Ray 就不能满足您的需求——您可能只需引入额外的工具。
- en: Conclusion
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Ray has the potential to greatly simplify your development and operational overhead
    for medium- to large-scale problems. It achieves this by offering a unified API
    across a variety of traditionally separate problems while providing serverless
    scalability. If you have problems spanning the domains that Ray serves, or just
    are tired of the operational overhead of managing your own clusters, we hope you’ll
    join us on the adventure of learning Ray.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Ray 有潜力极大地简化中到大规模问题的开发和运维负担。它通过提供统一的 API 解决传统上分离的各种问题，同时提供无服务器可扩展性来实现这一目标。如果您的问题跨越
    Ray 服务的领域，或者您已经厌倦了管理自己集群的运维负担，我们希望您能加入我们，共同探索学习 Ray 的旅程。
- en: In the next chapter, we’ll show you how to get Ray installed in local mode on
    your machine. We’ll also look at a few Hello Worlds from some of the ecosystems
    that Ray supports (including actors and big data).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将向您展示如何在本地模式下在您的计算机上安装 Ray。我们还将查看 Ray 支持的生态系统中一些 Hello World 示例。
- en: ^([1](ch01.html#idm45354786473328-marker)) ARM support, including for Raspberry
    PIs, requires manual building for now.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.html#idm45354786473328-marker)) ARM 支持，包括树莓派，目前需要手动构建。
