["```py\ndef test_meal_recommendation_under_specific_calories():\n    calories = 900\n    meals = get_recommended_meal(Recommendation.BY_CALORIES, calories)\n    assert len(meals) == 3\n    assert is_appetizer(meals[0])\n    assert is_salad(meals[1])\n    assert is_main_dish(meals[2])\n    assert sum(meal.calories for meal in meals) < calories\n```", "```py\ndef test_meal_recommendation_under_specific_calories():\n    calories = 900\n    meals = get_recommended_meal(Recommendation.BY_CALORIES, calories)\n    assert meals == [Meal(\"Spring Roll\", 120),\n                     Meal(\"Green Papaya Salad\", 230),\n                     Meal(\"Larb Chicken\", 500)]\n```", "```py\npip install hypothesis\n```", "```py\nfrom hypothesis import given\nfrom hypothesis.strategies import integers\n\n@given(integers())\ndef test_meal_recommendation_under_specific_calories(calories):\n    meals = get_recommended_meal(Recommendation.BY_CALORIES, calories)\n    assert len(meals) == 3\n    assert is_appetizer(meals[0])\n    assert is_salad(meals[1])\n    assert is_main_dish(meals[2])\n    assert sum(meal.calories for meal in meals) < calories\n```", "```py\nFalsifying example: test_meal_recommendation_under_specific_calories(\n    calories=0,\n)\n============= short test summary info ======================\nFAILED code_examples/chapter23/test_basic_hypothesis.py::\n    test_meal_recommendation_under_specific_calories - assert 850 < 0\n```", "```py\n@given(integers(min_value=900))\ndef test_meal_recommendation_under_specific_calories(calories)\n    # ... snip ...\n```", "```py\npy.test code_examples/chapter23 --hypothesis-show-statistics\n```", "```py\ncode_examples/chapter23/test_basic_hypothesis.py::\n    test_meal_recommendation_under_specific_calories:\n\n  - during generate phase (0.19 seconds):\n    - Typical runtimes: 0-1 ms, ~ 48% in data generation\n    - 100 passing examples, 0 failing examples, 0 invalid examples\n\n  - Stopped because settings.max_examples=100\n```", "```py\n_________ test_meal_recommendation_under_specific_calories _________\n\n    @given(integers(min_value=900))\n>   def test_meal_recommendation_under_specific_calories(calories):\n\ncode_examples/chapter23/test_basic_hypothesis.py:33:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncalories = 5001\n\n    @given(integers(min_value=900))\n    def test_meal_recommendation_under_specific_calories(calories):\n        meals = get_recommended_meal(Recommendation.BY_CALORIES, calories)\n>       assert len(meals) == 3\nE       TypeError: object of type 'NoneType' has no len()\n\ncode_examples/chapter23/test_basic_hypothesis.py:35: TypeError\n------------------------ Hypothesis --------------------------------\nFalsifying example: test_meal_recommendation_under_specific_calories(\n    calories=5001,\n)\n=========== Hypothesis Statistics ========================\ncode_examples/chapter23/test_basic_hypothesis.py::\n   test_meal_recommendation_under_specific_calories:\n\n  - during reuse phase (0.00 seconds):\n    - Typical runtimes: ~ 1ms, ~ 43% in data generation\n    - 1 passing examples, 0 failing examples, 0 invalid examples\n\n  - during generate phase (0.08 seconds):\n    - Typical runtimes: 0-2 ms, ~ 51% in data generation\n    - 26 passing examples, 1 failing examples, 0 invalid examples\n    - Found 1 failing example in this phase\n\n  - during shrink phase (0.07 seconds):\n    - Typical runtimes: 0-2 ms, ~ 37% in data generation\n    - 22 passing examples, 12 failing examples, 1 invalid examples\n    - Tried 35 shrinks of which 11 were successful\n\n  - Stopped because nothing left to do\n```", "```py\n@given(integers(min_value=900))\n@example(5001)\ndef test_meal_recommendation_under_specific_calories(calories)\n    # ... snip ...\n```", "```py\nfrom hypothesis import given\nfrom hypothesis.strategies import dictionary, integers, text\n\n@given(dictionaries(text(), integers(min_value=100, max_value=2000)))\ndef test_calorie_count(ingredient_to_calorie_mapping : dict[str, int]):\n    # ... snip ...\n```", "```py\nfrom hypothesis import given\nfrom hypothesis.strategies import composite, integers\n\nThreeCourseMeal = tuple[Dish, Dish, Dish]\n\n@composite\ndef three_course_meals(draw) -> ThreeCourseMeal:\n    appetizer_calories = integers(min_value=100, max_value=900)\n    main_dish_calories = integers(min_value=550, max_value=1800)\n    dessert_calories = integers(min_value=500, max_value=1000)\n\n    return (Dish(\"Appetizer\", draw(appetizer_calories)),\n            Dish(\"Main Dish\", draw(main_dish_calories)),\n            Dish(\"Dessert\", draw(dessert_calories)))\n\n@given(three_course_meals)\ndef test_three_course_meal_substitutions(three_course_meal: ThreeCourseMeal):\n    # ... do something with three_course_meal\n```", "```py\nfrom functools import reduce\nfrom hypothesis.strategies import integers\nfrom hypothesis.stateful import Bundle, RuleBasedStateMachine, invariant, rule\n\nclass RecommendationChecker(RuleBasedStateMachine):\n    def __init__(self):\n        super().__init__()\n        self.recommender = MealRecommendationEngine()\n        self.filters = []\n\n    @rule(price_limit=integers(min_value=6, max_value=200))\n    def filter_by_price(self, price_limit):\n        self.recommender.apply_price_filter(price_limit)\n        self.filters = [f for f in self.filters if f[0] != \"price\"]\n        self.filters.append((\"price\", lambda m: m.price))\n\n    @rule(calorie_limit=integers(min_value=500, max_value=2000))\n    def filter_by_calories(self, calorie_limit):\n        self.recommender.apply_calorie_filter(calorie_limit)\n        self.filters = [f for f in self.filters if f[0] != \"calorie\"]\n        self.filters.append((\"calorie\", lambda m: m.calories))\n\n    @rule(distance_limit=integers(max_value=100))\n    def filter_by_distance(self, distance_limit):\n        self.recommender.apply_distance_filter(distance_limit)\n        self.filters = [f for f in self.filters if f[0] != \"distance\"]\n        self.filters.append((\"distance\", lambda m: m.distance))\n\n    @invariant()\n    def recommender_provides_three_unique_meals(self):\n        assert len(self.recommender.get_meals()) == 3\n        assert len(set(self.recommender.get_meals())) == 3\n\n    @invariant()\n    def meals_are_appropriately_ordered(self):\n        meals = self.recommender.get_meals()\n        ordered_meals = reduce(lambda meals, f: sorted(meals, key=f[1]),\n                               self.filters,\n                               meals)\n        assert ordered_meals == meals\n\nTestRecommender = RecommendationChecker.TestCase\n```", "```py\nfrom functools import reduce\nfrom hypothesis.strategies import integers\nfrom hypothesis.stateful import Bundle, RuleBasedStateMachine, invariant, rule\n\nclass RecommendationChecker(RuleBasedStateMachine):\n    def __init__(self):\n        super().__init__()\n        self.recommender = MealRecommendationEngine()\n        self.filters = []\n```", "```py\n    @rule(price_limit=integers(min_value=6, max_value=200))\n    def filter_by_price(self, price_limit):\n        self.recommender.apply_price_filter(price_limit)\n        self.filters = [f for f in self.filters if f[0] != \"price\"]\n        self.filters.append((\"price\", lambda m: m.price))\n\n    @rule(calorie_limit=integers(min_value=500, max_value=2000))\n    def filter_by_calories(self, calorie_limit):\n        self.recommender.apply_calorie_filter(calorie_limit)\n        self.filters = [f for f in self.filters if f[0] != \"calorie\"]\n        self.filters.append((\"calorie\", lambda m: m.calories))\n\n    @rule(distance_limit=integers(max_value=100))\n    def filter_by_distance(self, distance_limit):\n        self.recommender.apply_distance_filter(distance_limit)\n        self.filters = [f for f in self.filters if f[0] != \"distance\"]\n        self.filters.append((\"distance\", lambda m: m.distance))\n```", "```py\n    @invariant()\n    def recommender_provides_three_unique_meals(self):\n        assert len(self.recommender.get_meals()) == 3\n        # make sure all of the meals are unique - sets de-dupe elements\n        # so we should have three unique elements\n        assert len(set(self.recommender.get_meals())) == 3\n\n    @invariant()\n    def meals_are_appropriately_ordered(self):\n        meals = self.recommender.get_meals()\n        ordered_meals = reduce(lambda meals, f: sorted(meals, key=f[1]),\n                               self.filters,\n                               meals)\n        assert ordered_meals == meals\n```", "```py\nTestRecommender = RecommendationChecker.TestCase\n```", "```py\nstate = RecommendationChecker()\nstate.filter_by_distance(distance_limit=0)\nstate.filter_by_distance(distance_limit=0)\nstate.filter_by_distance(distance_limit=0)\nstate.filter_by_calories(calorie_limit=500)\nstate.filter_by_distance(distance_limit=0)\nstate.teardown()\n```", "```py\nstate = RecommendationChecker()\nstate.filter_by_price(price_limit=6)\nstate.filter_by_price(price_limit=6)\nstate.filter_by_price(price_limit=6)\nstate.filter_by_price(price_limit=6)\nstate.filter_by_distance(distance_limit=0)\nstate.filter_by_price(price_limit=16)\nstate.teardown()\n```"]