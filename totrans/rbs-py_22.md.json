["```py\n@dataclass\nclass PizzaCreationFunctions:\n    prepare_ingredients: Callable\n    add_pre_bake_toppings: Callable\n    add_post_bake_toppings: Callable\n\ndef create_pizza(pizza_creation_functions: PizzaCreationFunctions):\n    pizza_creation_functions.prepare_ingredients()\n    roll_out_pizza_base()\n    pizza_creation_functions.add_pre_bake_toppings()\n    bake_pizza()\n    pizza_creation_functions.add_post_bake_toppings()\n```", "```py\npizza_creation_functions = PizzaCreationFunctions(\n    prepare_ingredients=mix_zaatar,\n    add_pre_bake_toppings=add_meat_and_halloumi,\n    add_post_bake_toppings=drizzle_olive_oil\n)\n\ncreate_pizza(pizza_creation_functions)\n```", "```py\npizza_creation_functions = PizzaCreationFunctions(\n    prepare_ingredients=cook_bulgogi,\n    add_pre_bake_toppings=add_bulgogi_toppings,\n    add_post_bake_toppings=garnish_with_scallions_and_sesame\n)\n\ncreate_pizza(pizza_creation_functions)\n```", "```py\n@dataclass\nclass TexMexIngredients:\n    corn_tortilla_bin: int\n    flour_tortilla_bin: int\n    salsa_bin: int\n    ground_beef_bin: int\n    # ... snip ..\n    shredded_cheese_bin: int\n\ndef prepare_tex_mex_dish(tex_mex_recipe_maker: Callable[TexMexIngredients]);\n    tex_mex_ingredients = get_available_ingredients(\"Tex-Mex\")\n    dish = tex_mex_recipe_maker(tex_mex_ingredients)\n    serve(dish)\n```", "```py\nimport tex_mex_module as tmm\ndef make_soft_taco(ingredients: TexMexIngredients) -> tmm.Dish:\n    tortilla = tmm.get_ingredient_from_bin(ingredients.flour_tortilla_bin)\n    beef = tmm.get_ingredient_from_bin(ingredients.ground_beef_bin)\n    dish = tmm.get_plate()\n    dish.lay_on_dish(tortilla)\n    tmm.season(beef, tmm.CHILE_POWDER_BLEND)\n    # ... snip\n\nprepare_tex_mex_dish(make_soft_taco)\n```", "```py\ndef make_chimichanga(ingredients: TexMexIngredients):\n    # ... snip\n```", "```py\nfrom abc import abstractmethod\nfrom typing import runtime_checkable, Protocol\n\nfrom ultimate_kitchen_assistant import Amount, Dish, Ingredient, Recipe\n\n@runtime_checkable\nclass UltimateKitchenAssistantModule(Protocol):\n\n    ingredients: list[Ingredient]\n\n    @abstractmethod\n    def get_recipes() -> list[Recipe]:\n        raise NotImplementedError\n\n    @abstractmethod\n    def prepare_dish(inventory: dict[Ingredient, Amount],\n                     recipe: Recipe) -> Dish:\n        raise NotImplementedError\n```", "```py\nclass PastaModule(UltimateKitchenAssistantModule):\n    def __init__(self):\n        self.ingredients = [\"Linguine\",\n                             # ... snip ...\n                            \"Spaghetti\" ]\n\n    def get_recipes(self) -> list[Recipe]:\n        # ... snip returning all possible recipes ...\n\n    def prepare_dish(self, inventory: dict[Ingredient, Amount],\n                     recipe: Recipe) -> Dish:\n        # interact with Ultimate Kitchen Assistant to make recipe\n        # ... snip ...\n```", "```py\nfrom setuptools import setup\n\nsetup(\n    name='ultimate_kitchen_assistant',\n    version='1.0',\n    #.... snip ....\n\n    entry_points={\n        'ultimate_kitchen_assistant.recipe_maker': [\n            'pasta_maker = ultimate_kitchen_assistant.pasta_maker:PastaModule',\n            'tex_mex = ultimate_kitchen_assistant.tex_mex:TexMexModule'\n        ],\n    },\n)\n```", "```py\nimport itertools\nfrom stevedore import extension\nfrom ultimate_kitchen_assisstant import Recipe\n\ndef get_all_recipes() -> list[Recipe]:\n    mgr = extension.ExtensionManager(\n            namespace='ultimate_kitchen_assistant.recipe_maker',\n            invoke_on_load=True,\n        )\n\n    def get_recipes(extension):\n        return extension.obj.get_recipes()\n\n    return list(itertools.chain(mgr.map(get_recipes)))\n```", "```py\nfrom stevedore import driver\n\ndef make_dish(recipe: Recipe, module_name: str) -> Dish:\n    mgr = driver.DriverManager(\n        namespace='ultimate_kitchen_assistant.recipe_maker',\n        name=module_name,\n        invoke_on_load=True,\n    )\n\n    return mgr.driver.prepare_dish(get_inventory(), recipe)\n```"]