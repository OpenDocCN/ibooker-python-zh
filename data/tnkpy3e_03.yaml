- en: 1\. Programming as a way of thinking#
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 编程作为一种思维方式#
- en: 原文：[https://allendowney.github.io/ThinkPython/chap01.html](https://allendowney.github.io/ThinkPython/chap01.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://allendowney.github.io/ThinkPython/chap01.html](https://allendowney.github.io/ThinkPython/chap01.html)
- en: The first goal of this book is to teach you how to program in Python. But learning
    to program means learning a new way to think, so the second goal of this book
    is to help you think like a computer scientist. This way of thinking combines
    some of the best features of mathematics, engineering, and natural science. Like
    mathematicians, computer scientists use formal languages to denote ideas – specifically
    computations. Like engineers, they design things, assembling components into systems
    and evaluating trade-offs among alternatives. Like scientists, they observe the
    behavior of complex systems, form hypotheses, and test predictions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的第一个目标是教你如何使用Python编程。但是，学习编程意味着学习一种新的思维方式，因此本书的第二个目标是帮助你像计算机科学家一样思考。这种思维方式结合了数学、工程和自然科学的一些最佳特征。像数学家一样，计算机科学家使用形式化语言来表示思想——特别是表示计算。像工程师一样，他们设计事物，将组件组装成系统，并在替代方案之间进行权衡。像科学家一样，他们观察复杂系统的行为，提出假设，并测试预测。
- en: We will start with the most basic elements of programming and work our way up.
    In this chapter, we’ll see how Python represents numbers, letters, and words.
    And you’ll learn to perform arithmetic operations.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从编程的最基本元素开始，逐步深入。在本章中，我们将了解Python如何表示数字、字母和单词。你还将学会执行算术运算。
- en: You will also start to learn the vocabulary of programming, including terms
    like operator, expression, value, and type. This vocabulary is important – you
    will need it to understand the rest of the book, to communicate with other programmers,
    and to use and understand virtual assistants.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将开始学习编程的词汇，包括运算符、表达式、值和类型等术语。这个词汇非常重要——你需要它来理解本书的其他内容，与其他程序员沟通，并使用和理解虚拟助手。
- en: 1.1\. Arithmetic operators[#](#arithmetic-operators "Link to this heading")
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1\. 算术运算符[#](#arithmetic-operators "跳转到该标题")
- en: An **arithmetic operator** is a symbol that represents an arithmetic computation.
    For example, the plus sign, `+`, performs addition.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**算术运算符**是表示算术计算的符号。例如，加号`+`表示加法运算。'
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The minus sign, `-`, is the operator that performs subtraction.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 减号`-`是执行减法的运算符。
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The asterisk, `*`, performs multiplication.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 星号`*`表示乘法运算。
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And the forward slash, `/`, performs division:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 斜杠`/`表示除法运算：
- en: '[PRE6]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Notice that the result of the division is `42.0` rather than `42`. That’s because
    there are two types of numbers in Python:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，除法的结果是`42.0`而不是`42`。这是因为Python中有两种类型的数字：
- en: '**integers**, which represent numbers with no fractional or decimal part, and'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**整数**，表示没有分数或小数部分的数字，以及'
- en: '**floating-point numbers**, which represent integers and numbers with a decimal
    point.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浮点数**，表示整数和带有小数点的数字。'
- en: If you add, subtract, or multiply two integers, the result is an integer. But
    if you divide two integers, the result is a floating-point number. Python provides
    another operator, `//`, that performs **integer division**. The result of integer
    division is always an integer.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对两个整数进行加法、减法或乘法运算，结果是一个整数。但是如果你对两个整数进行除法运算，结果是一个浮动小数。Python提供了另一个运算符`//`，用于执行**整数除法**。整数除法的结果始终是一个整数。
- en: '[PRE8]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Integer division is also called “floor division” because it always rounds down
    (toward the “floor”).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 整数除法也被称为“地板除法”，因为它总是向下舍入（朝向“地板”）。
- en: '[PRE10]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, the operator `**` performs exponentiation; that is, it raises a number
    to a power:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，运算符`**`执行指数运算；也就是说，它将一个数字提升到一个幂：
- en: '[PRE12]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In some other languages, the caret, `^`, is used for exponentiation, but in
    Python it is a bitwise operator called XOR. If you are not familiar with bitwise
    operators, the result might be unexpected:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些其他语言中，插入符号`^`用于表示指数运算，但在Python中，它是一个位运算符，称为XOR。如果你不熟悉位运算符，结果可能会让你感到意外：
- en: '[PRE14]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: I won’t cover bitwise operators in this book, but you can read about them at
    [http://wiki.python.org/moin/BitwiseOperators](http://wiki.python.org/moin/BitwiseOperators).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会在本书中介绍位运算符，但你可以在[http://wiki.python.org/moin/BitwiseOperators](http://wiki.python.org/moin/BitwiseOperators)阅读相关内容。
- en: 1.2\. Expressions[#](#expressions "Link to this heading")
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2\. 表达式[#](#expressions "跳转到该标题")
- en: A collection of operators and numbers is called an **expression**. An expression
    can contain any number of operators and numbers. For example, here’s an expression
    that contains two operators.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 运算符和数字的集合叫做**表达式**。一个表达式可以包含任意数量的运算符和数字。例如，下面是一个包含两个运算符的表达式。
- en: '[PRE16]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Notice that exponentiation happens before addition. Python follows the order
    of operations you might have learned in a math class: exponentiation happens before
    multiplication and division, which happen before addition and subtraction.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，指数运算优先于加法。Python 遵循你在数学课上学到的运算顺序：指数运算优先于乘法和除法，而乘法和除法又优先于加法和减法。
- en: In the following example, multiplication happens before addition.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，乘法发生在加法之前。
- en: '[PRE18]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you want the addition to happen first, you can use parentheses.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望加法先发生，可以使用括号。
- en: '[PRE20]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Every expression has a **value**. For example, the expression `6 * 7` has the
    value `42`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 每个表达式都有一个**值**。例如，表达式 `6 * 7` 的值是 `42`。
- en: 1.3\. Arithmetic functions[#](#arithmetic-functions "Link to this heading")
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3\. 算术函数[#](#arithmetic-functions "Link to this heading")
- en: In addition to the arithmetic operators, Python provides a few **functions**
    that work with numbers. For example, the `round` function takes a floating-point
    number and rounds it off to the nearest integer.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 除了算术运算符，Python 还提供了一些**函数**，可以与数字一起使用。例如，`round` 函数接受一个浮动点数字，并将其四舍五入到最接近的整数。
- en: '[PRE22]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `abs` function computes the absolute value of a number. For a positive number,
    the absolute value is the number itself.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`abs` 函数计算一个数字的绝对值。对于正数，绝对值就是数字本身。'
- en: '[PRE26]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: For a negative number, the absolute value is positive.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于负数，绝对值是正数。
- en: '[PRE28]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: When we use a function like this, we say we’re **calling** the function. An
    expression that calls a function is a **function call**.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用像这样的函数时，我们说我们在**调用**该函数。调用函数的表达式叫做**函数调用**。
- en: When you call a function, the parentheses are required. If you leave them out,
    you get an error message.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调用函数时，括号是必须的。如果不加括号，会得到错误信息。
- en: '[PRE30]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: You can ignore the first line of this message; it doesn’t contain any information
    we need to understand right now. The second line is the code that contains the
    error, with a caret (`^`) beneath it to indicate where the error was discovered.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以忽略这条消息的第一行，它现在不包含任何我们需要理解的信息。第二行是包含错误的代码，下面有一个插入符号 (`^`)，指示发现错误的位置。
- en: The last line indicates that this is a **syntax error**, which means that there
    is something wrong with the structure of the expression. In this example, the
    problem is that a function call requires parentheses.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行表明这是一个**语法错误**，意味着表达式的结构有问题。在这个例子中，问题是函数调用需要括号。
- en: Let’s see what happens if you leave out the parentheses *and* the value.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如果你省略括号*以及*值会发生什么。
- en: '[PRE32]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: A function name all by itself is a legal expression that has a value. When it’s
    displayed, the value indicates that `abs` is a function, and it includes some
    additional information I’ll explain later.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 函数名本身就是一个合法的表达式，具有一个值。当它被显示时，值表示 `abs` 是一个函数，并包含一些稍后我会解释的附加信息。
- en: 1.4\. Strings[#](#strings "Link to this heading")
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.4\. 字符串[#](#strings "Link to this heading")
- en: In addition to numbers, Python can also represent sequences of letters, which
    are called **strings** because the letters are strung together like beads on a
    necklace. To write a string, we can put a sequence of letters inside straight
    quotation marks.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 除了数字，Python 还可以表示字母的序列，这些序列被称为**字符串**，因为字母像珠子一样串在一起。要写一个字符串，我们可以将字母序列放在直引号内。
- en: '[PRE34]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: It is also legal to use double quotation marks.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用双引号也是合法的。
- en: '[PRE36]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Double quotes make it easy to write a string that contains an apostrophe, which
    is the same symbol as a straight quote.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 双引号使得写包含撇号的字符串变得容易，因为撇号和直引号是相同的符号。
- en: '[PRE38]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Strings can also contain spaces, punctuation, and digits.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串也可以包含空格、标点符号和数字。
- en: '[PRE40]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `+` operator works with strings; it joins two strings into a single string,
    which is called **concatenation**
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`+` 运算符可以与字符串一起使用；它将两个字符串连接成一个字符串，这个操作称为**连接**。'
- en: '[PRE42]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The `*` operator also works with strings; it makes multiple copies of a string
    and concatenates them.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`*` 运算符也可以与字符串一起使用；它可以制作字符串的多个副本并将它们连接起来。'
- en: '[PRE44]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The other arithmetic operators don’t work with strings.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 其他的算术运算符不能与字符串一起使用。
- en: Python provides a function called `len` that computes the length of a string.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Python 提供了一个名为 `len` 的函数，用于计算字符串的长度。
- en: '[PRE46]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Notice that `len` counts the letters between the quotes, but not the quotes.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`len` 计算引号之间的字母数，但不包括引号本身。
- en: When you create a string, be sure to use straight quotes. The back quote, also
    known as a backtick, causes a syntax error.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个字符串时，请确保使用直引号。反引号，也称为反引号，会导致语法错误。
- en: '[PRE48]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Smart quotes, also known as curly quotes, are also illegal.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 智能引号，也称为卷曲引号，也是非法的。
- en: 1.5\. Values and types[#](#values-and-types "Link to this heading")
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.5\. 值和类型[#](#values-and-types "链接到此标题")
- en: 'So far we’ve seen three kinds of values:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了三种类型的值：
- en: '`2` is an integer,'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2` 是一个整数，'
- en: '`42.0` is a floating-point number, and'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`42.0` 是一个浮点数，而'
- en: '`''Hello''` is a string.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''Hello''` 是一个字符串。'
- en: A kind of value is called a **type**. Every value has a type – or we sometimes
    say it “belongs to” a type.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一种值被称为**类型**。每个值都有一个类型 - 或者我们有时说它“属于”一个类型。
- en: Python provides a function called `type` that tells you the type of any value.
    The type of an integer is `int`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Python 提供了一个名为 `type` 的函数，可以告诉你任何值的类型。整数的类型是 `int`。
- en: '[PRE50]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The type of a floating-point number is `float`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数的类型是 `float`。
- en: '[PRE52]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: And the type of a string is `str`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串的类型是 `str`。
- en: '[PRE54]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The types `int`, `float`, and `str` can be used as functions. For example, `int`
    can take a floating-point number and convert it to an integer (always rounding
    down).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 类型 `int`、`float` 和 `str` 可以被用作函数。例如，`int` 可以接受一个浮点数并将其转换为整数（总是向下取整）。
- en: '[PRE56]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: And `float` can convert an integer to a floating-point value.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 而 `float` 可以将整数转换为浮点数值。
- en: '[PRE58]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Now, here’s something that can be confusing. What do you get if you put a sequence
    of digits in quotes?
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这里有一些可能让人困惑的东西。如果你把一串数字放在引号中会得到什么呢？
- en: '[PRE60]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: It looks like a number, but it is actually a string.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来像一个数字，但实际上它是一个字符串。
- en: '[PRE62]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: If you try to use it like a number, you might get an error.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试像数字一样使用它，可能会得到一个错误。
- en: '[PRE64]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: This example generates a `TypeError`, which means that the values in the expression,
    which are called **operands**, have the wrong type. The error message indicates
    that the `/` operator does not support the types of these values, which are `str`
    and `int`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子会生成一个 `TypeError`，这意味着表达式中的值（称为**操作数**）具有错误的类型。错误消息表明 `/` 运算符不支持这些值的类型，它们分别为
    `str` 和 `int`。
- en: If you have a string that contains digits, you can use `int` to convert it to
    an integer.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个包含数字的字符串，你可以使用 `int` 将其转换为整数。
- en: '[PRE66]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: If you have a string that contains digits and a decimal point, you can use `float`
    to convert it to a floating-point number.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个包含数字和小数点的字符串，你可以使用 `float` 将其转换为浮点数。
- en: '[PRE68]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: When you write a large integer, you might be tempted to use commas between groups
    of digits, as in `1,000,000`. This is a legal expression in Python, but the result
    is not an integer.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当你写一个大整数时，你可能会尝试在数字组之间使用逗号，例如 `1,000,000`。这在 Python 中是一个合法的表达式，但结果不是一个整数。
- en: '[PRE70]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Python interprets `1,000,000` as a comma-separated sequence of integers. We’ll
    learn more about this kind of sequence later.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Python 解释 `1,000,000` 为一个逗号分隔的整数序列。我们稍后会学到更多关于这种序列的知识。
- en: You can use underscores to make large numbers easier to read.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用下划线使大数更易于阅读。
- en: '[PRE72]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 1.6\. Formal and natural languages[#](#formal-and-natural-languages "Link to
    this heading")
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.6\. 形式语言和自然语言[#](#formal-and-natural-languages "链接到此标题")
- en: '**Natural languages** are the languages people speak, like English, Spanish,
    and French. They were not designed by people; they evolved naturally.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**自然语言** 是人们说的语言，如英语、西班牙语和法语。它们不是由人类设计的；它们是自然演变而来的。'
- en: '**Formal languages** are languages that are designed by people for specific
    applications. For example, the notation that mathematicians use is a formal language
    that is particularly good at denoting relationships among numbers and symbols.
    Similarly, programming languages are formal languages that have been designed
    to express computations.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**形式语言** 是由人类设计用于特定应用的语言。例如，数学家使用的符号是一种形式语言，非常擅长表示数字和符号之间的关系。类似地，编程语言是被设计用来表达计算的形式语言。'
- en: 'Although formal and natural languages have some features in common there are
    important differences:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管形式语言和自然语言有一些共同点，但它们之间存在重要的区别：
- en: 'Ambiguity: Natural languages are full of ambiguity, which people deal with
    by using contextual clues and other information. Formal languages are designed
    to be nearly or completely unambiguous, which means that any program has exactly
    one meaning, regardless of context.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 歧义：自然语言充满了歧义，人们通过使用上下文线索和其他信息来处理它。形式语言旨在几乎或完全无歧义，这意味着任何程序具有完全确定的意义，无论上下文如何。
- en: 'Redundancy: In order to make up for ambiguity and reduce misunderstandings,
    natural languages use redundancy. As a result, they are often verbose. Formal
    languages are less redundant and more concise.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 冗余性：为了弥补歧义并减少误解，自然语言使用冗余。因此，它们通常很冗长。正式语言不那么冗余，更加简洁。
- en: 'Literalness: Natural languages are full of idiom and metaphor. Formal languages
    mean exactly what they say.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文字的字面性：自然语言充满成语和隐喻。正式语言确切地表达其意思。
- en: Because we all grow up speaking natural languages, it is sometimes hard to adjust
    to formal languages. Formal languages are more dense than natural languages, so
    it takes longer to read them. Also, the structure is important, so it is not always
    best to read from top to bottom, left to right. Finally, the details matter. Small
    errors in spelling and punctuation, which you can get away with in natural languages,
    can make a big difference in a formal language.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们都是用自然语言长大的，有时很难适应正式语言。正式语言比自然语言更为密集，因此阅读起来需要更多时间。此外，结构也很重要，所以不总是从上到下、从左到右阅读最佳。最后，细节至关重要。在自然语言中，你可以忽略拼写和标点的小错误，但在正式语言中，这可能造成很大差异。
- en: 1.7\. Debugging[#](#debugging "Link to this heading")
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.7\. 调试[#](#debugging "Link to this heading")
- en: Programmers make mistakes. For whimsical reasons, programming errors are called
    **bugs** and the process of tracking them down is called **debugging**.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员会犯错误。出于一些奇怪的原因，编程错误被称为**bug**，追踪它们的过程称为**debugging**。
- en: Programming, and especially debugging, sometimes brings out strong emotions.
    If you are struggling with a difficult bug, you might feel angry, sad, or embarrassed.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 编程，尤其是调试，有时会激发强烈的情绪。如果你在解决一个困难的bug，你可能会感到愤怒、悲伤或尴尬。
- en: Preparing for these reactions might help you deal with them. One approach is
    to think of the computer as an employee with certain strengths, like speed and
    precision, and particular weaknesses, like lack of empathy and inability to grasp
    the big picture.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好应对这些反应可能有助于你应对它们。一种方法是把计算机看作是一个具有某些优势（如速度和精度）和特定弱点（如缺乏同理心和无法把握全局图景）的员工。
- en: 'Your job is to be a good manager: find ways to take advantage of the strengths
    and mitigate the weaknesses. And find ways to use your emotions to engage with
    the problem, without letting your reactions interfere with your ability to work
    effectively.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 你的工作是成为一名优秀的经理：找到利用优势和减少弱点的方法。找到利用你的情绪参与问题解决的方法，同时不让你的反应影响你有效工作的能力。
- en: Learning to debug can be frustrating, but it is a valuable skill that is useful
    for many activities beyond programming. At the end of each chapter there is a
    section, like this one, with my suggestions for debugging. I hope they help!
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 学习调试可能很令人沮丧，但这是一种有价值的技能，对编程之外的许多活动都很有用。在每章的末尾，都会有一个像这样的部分，提供关于调试的建议。希望它们有所帮助！
- en: 1.8\. Glossary[#](#glossary "Link to this heading")
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.8\. 术语表[#](#glossary "Link to this heading")
- en: '**arithmetic operator:** A symbol, like `+` and `*`, that denotes an arithmetic
    operation like addition or multiplication.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**算术运算符:** 符号，如`+`和`*`，表示加法或乘法等算术运算。'
- en: '**integer:** A type that represents numbers with no fractional or decimal part.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**整数:** 一种表示没有分数或小数部分的数字的类型。'
- en: '**floating-point:** A type that represents integers and numbers with decimal
    parts.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**浮点数:** 一种表示整数和带小数部分的数字的类型。'
- en: '**integer division:** An operator, `//`, that divides two numbers and rounds
    down to an integer.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**整数除法:** 一个运算符，`//`，用于将两个数字相除并向下取整至整数。'
- en: '**expression:** A combination of variables, values, and operators.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**表达式:** 变量、值和运算符的组合。'
- en: '**value:** An integer, floating-point number, or string – or one of other kinds
    of values we will see later.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**值:** 整数、浮点数或字符串 - 或者我们稍后将看到的其他类型的值。'
- en: '**function:** A named sequence of statements that performs some useful operation.
    Functions may or may not take arguments and may or may not produce a result.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**函数:** 执行某些有用操作的一系列语句的命名序列。函数可能需要参数，也可能不需要，并且可能产生结果，也可能不产生。'
- en: '**function call:** An expression – or part of an expression – that runs a function.
    It consists of the function name followed by an argument list in parentheses.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**函数调用:** 一个表达式或表达式的一部分，运行一个函数。它由函数名后跟括号中的参数列表组成。'
- en: '**syntax error:** An error in a program that makes it impossible to parse –
    and therefore impossible to run.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法错误:** 程序中的错误，使其无法解析 - 因此也无法运行。'
- en: '**string:** A type that represents sequences of characters.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**字符串:** 一种表示字符序列的类型。'
- en: '**concatenation:** Joining two strings end-to-end.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**concatenation：** 将两个字符串连接在一起。'
- en: '**type:** A category of values. The types we have seen so far are integers
    (type `int`), floating-point numbers (type `float`), and strings (type `str`).'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**type：** 一类值。我们到目前为止见过的类型有整数（类型 `int`）、浮点数（类型 `float`）和字符串（类型 `str`）。'
- en: '**operand:** One of the values on which an operator operates.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**operand：** 操作符作用的值之一。'
- en: '**natural language:** Any of the languages that people speak that evolved naturally.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**natural language：** 人们说的自然演变而来的任何语言。'
- en: '**formal language:** Any of the languages that people have designed for specific
    purposes, such as representing mathematical ideas or computer programs. All programming
    languages are formal languages.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**formal language：** 人们为特定目的设计的任何语言，例如表示数学思想或计算机程序。所有编程语言都是形式语言。'
- en: '**bug:** An error in a program.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**bug：** 程序中的错误。'
- en: '**debugging:** The process of finding and correcting errors.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**debugging：** 查找和修正错误的过程。'
- en: 1.9\. Exercises[#](#exercises "Link to this heading")
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.9\. 练习[#](#exercises "链接到此标题")
- en: '[PRE74]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 1.9.1\. Ask a virtual assistant[#](#ask-a-virtual-assistant "Link to this heading")
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.9.1\. 向虚拟助手提问[#](#ask-a-virtual-assistant "链接到此标题")
- en: As you work through this book, there are several ways you can use a virtual
    assistant or chatbot to help you learn.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在你学习本书的过程中，有几种方式可以利用虚拟助手或聊天机器人帮助你学习。
- en: If you want to learn more about a topic in the chapter, or anything is unclear,
    you can ask for an explanation.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想了解章节中的某个主题，或者有任何不清楚的地方，可以请求解释。
- en: If you are having a hard time with any of the exercises, you can ask for help.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你在做任何练习时遇到困难，可以请求帮助。
- en: In each chapter, I’ll suggest exercises you can do with a virtual assistant,
    but I encourage you to try things on your own and see what works for you.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在每一章中，我都会建议你可以和虚拟助手一起做的练习，但我鼓励你自己尝试，看看什么方法最适合你。
- en: 'Here are some topics you could ask a virtual assistant about:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些你可以向虚拟助手提问的主题：
- en: Earlier I mentioned bitwise operators but I didn’t explain why the value of
    `7 ^ 2` is 5\. Try asking “What are the bitwise operators in Python?” or “What
    is the value of `7 XOR 2`?”
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 之前我提到了位运算符，但我没有解释为什么 `7 ^ 2` 的值是 5。试试问“Python 中的位运算符是什么？”或者“`7 XOR 2` 的值是多少？”
- en: I also mentioned the order of operations. For more details, ask “What is the
    order of operations in Python?”
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我还提到了运算顺序。想了解更多细节，可以问“Python 中的运算顺序是什么？”
- en: The `round` function, which we used to round a floating-point number to the
    nearest integer, can take a second argument. Try asking “What are the arguments
    of the round function?” or “How do I round pi off to three decimal places?”
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`round` 函数，我们用它来将浮点数四舍五入到最接近的整数，可以接受第二个参数。试试问“round 函数的参数是什么？”或者“如何将 pi 四舍五入到三位小数？”'
- en: There’s one more arithmetic operator I didn’t mention; try asking “What is the
    modulus operator in Python?”
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有一个我没提到的算术运算符；试试问“Python 中的取余运算符是什么？”
- en: Most virtual assistants know about Python, so they answer questions like this
    pretty reliably. But remember that these tools make mistakes. If you get code
    from a chatbot, test it!
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数虚拟助手都了解 Python，因此它们能比较可靠地回答类似这样的问题。但请记住，这些工具也会犯错。如果你从聊天机器人那里得到代码，一定要进行测试！
- en: 1.9.2\. Exercise[#](#exercise "Link to this heading")
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.9.2\. 练习[#](#exercise "链接到此标题")
- en: You might wonder what `round` does if a number ends in `0.5`. The answer is
    that it sometimes rounds up and sometimes rounds down. Try these examples and
    see if you can figure out what rule it follows.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，如果一个数字以 `0.5` 结尾，`round` 会做什么？答案是它有时会向上舍入，有时会向下舍入。试试这些例子，看看你能不能弄清楚它遵循什么规则。
- en: '[PRE76]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: If you are curious, ask a virtual assistant, “If a number ends in 0.5, does
    Python round up or down?”
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你感兴趣，可以问虚拟助手：“如果一个数字以 0.5 结尾，Python 会向上还是向下舍入？”
- en: 1.9.3\. Exercise[#](#id1 "Link to this heading")
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.9.3\. 练习[#](#id1 "链接到此标题")
- en: When you learn about a new feature, you should try it out and make mistakes
    on purpose. That way, you learn the error messages, and when you see them again,
    you will know what they mean. It is better to make mistakes now and deliberately
    than later and accidentally.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当你学习新特性时，应该尝试自己动手并故意犯错。这样，你会学到错误信息的含义，当你再次看到它们时就能理解它们。这比在后期偶然犯错要好。
- en: You can use a minus sign to make a negative number like `-2`. What happens if
    you put a plus sign before a number? What about `2++2`?
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用负号来表示负数，例如 `-2`。如果你在一个数字前面加上加号会发生什么？那 `2++2` 呢？
- en: What happens if you have two values with no operator between them, like `4 2`?
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你有两个值中间没有运算符，比如`4 2`，会发生什么？
- en: If you call a function like `round(42.5)`, what happens if you leave out one
    or both parentheses?
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你调用一个函数像`round(42.5)`，如果省略一个或两个括号会发生什么？
- en: 1.9.4\. Exercise[#](#id2 "Link to this heading")
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.9.4\. 练习[#](#id2 "链接到此标题")
- en: Recall that every expression has a value, every value has a type, and we can
    use the `type` function to find the type of any value.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 记住每个表达式都有一个值，每个值都有一个类型，我们可以使用`type`函数来查找任何值的类型。
- en: What is the type of the value of the following expressions? Make your best guess
    for each one, and then use `type` to find out.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表达式的值的类型是什么？请对每个做出最佳猜测，然后使用`type`来确认。
- en: '`765`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`765`'
- en: '`2.718`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2.718`'
- en: '`''2 pi''`'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''2 pi''`'
- en: '`abs(-7)`'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`abs(-7)`'
- en: '`abs(-7.0)`'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`abs(-7.0)`'
- en: '`abs`'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`abs`'
- en: '`int`'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int`'
- en: '`type`'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`'
- en: 1.9.5\. Exercise[#](#id3 "Link to this heading")
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.9.5\. 练习[#](#id3 "链接到此标题")
- en: The following questions give you a chance to practice writing arithmetic expressions.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 以下问题让你有机会练习编写算术表达式。
- en: How many seconds are there in 42 minutes 42 seconds?
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 42分钟42秒是多少秒？
- en: 'How many miles are there in 10 kilometers? Hint: there are 1.61 kilometers
    in a mile.'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 10公里是多少英里？提示：1英里等于1.61公里。
- en: If you run a 10 kilometer race in 42 minutes 42 seconds, what is your average
    pace in seconds per mile?
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在42分钟42秒内跑完10公里，你的平均配速是多少（单位：每英秒）？
- en: What is your average pace in minutes and seconds per mile?
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的平均配速是多少（单位：分钟和秒每英里）？
- en: What is your average speed in miles per hour?
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的平均速度是多少（单位：英里每小时）？
- en: If you already know about variables, you can use them for this exercise. If
    you don’t, you can do the exercise without them – and then we’ll see them in the
    next chapter.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经了解了变量，你可以在这个练习中使用它们。如果你不懂，也可以做这个练习，然后我们会在下一章介绍它们。
- en: '[Think Python: 3rd Edition](https://allendowney.github.io/ThinkPython/index.html)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '[Think Python: 第三版](https://allendowney.github.io/ThinkPython/index.html)'
- en: Copyright 2024 [Allen B. Downey](https://allendowney.com)
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 版权所有 2024 [Allen B. Downey](https://allendowney.com)
- en: 'Code license: [MIT License](https://mit-license.org/)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 代码许可：[MIT 许可](https://mit-license.org/)
- en: 'Text license: [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 文本许可：[知识共享署名-非商业性使用-相同方式共享 4.0 国际](https://creativecommons.org/licenses/by-nc-sa/4.0/)
