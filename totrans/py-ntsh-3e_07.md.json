["```py\n`import` *`modname`* [`as` *`varname`*][,...]\n```", "```py\n`import` mymodule\n```", "```py\n`import` mymodule `as` alias\n```", "```py\n`import` mymodule\na = mymodule.f()\n```", "```py\n`import` mymodule `as` alias\na = alias.f()\n```", "```py\n`def` __getattr__(name):\n    `if` name == 'first_million_primes':\n        `def` generate_n_primes(n):\n            *`# ... code to generate 'n' prime numbers ...`*\n\n        `import` sys\n        *`# Look up __name__ in sys.modules to get current module`*\n        this_module = sys.modules[__name__]\n        this_module.first_million_primes = generate_n_primes(1_000_000)\n        `return` this_module.first_million_primes\n\n    `raise` AttributeError(f'module {__name__!r}\n\t                  f' has no attribute {name!r}')\n```", "```py\n*`# abs takes a numeric argument; let's make it accept a string as well`*\n`import` builtins\n_abs = builtins.abs                       *`# save original built-in`*\n`def` abs(str_or_num):\n    `if` isinstance(str_or_num, str):       *`# if arg is a string`*\n        `return` ''.join(sorted(set(str_or_num)))  *`# get this instead`*\n    `return` _abs(str_or_num)               *`# call real built-in`*\nbuiltins.abs = abs                        *`# override built-in w/wrapper`*\n```", "```py\n`from` *`modname`* `import` *`attrname`* [`as` *`varname`*][,...]\n`from` *`modname`* `import` *\n```", "```py\n`from` mymodule `import` f\n```", "```py\n`from` mymodule `import` f `as` foo\n```", "```py\n`from` some_module_with_a_long_name `import` (\n    another_name, and_another `as` x, one_more, and_yet_another `as` y)\n```", "```py\n`from` mymodule `import` *\n```", "```py\ntry:\n `import` rich\n`except` ImportError`:`\n rich = `None`\n```", "```py\n`if` rich `is` `not` `None`:\n\t... output using rich module features ...\n`else`:\n\t... output using normal print() statements ...\n```", "```py\n`if` __name__ == '__main__':\n```", "```py\n`import` sys, types\n`class` ImporterAndLoader:\n     *`\"\"\"importer and loader can be a single class\"\"\"`*\n     fake_path = '!dummy!'\n     `def` __init__(self, path):\n         *`# only handle our own fake-path marker`*\n         `if` path != self.fake_path:\n             `raise` ImportError\n     `def` find_module(self, fullname):\n         *`# don't even try to handle any qualified module name`*\n         `if` '.' `in` fullname:\n             `return` `None`\n         `return` self\n     `def` create_module(self, spec):\n         *`# returning None will have Python fall back and`*\n *`# create the module \"the default way\"`*\n `return` `None`\n     `def` exec_module(self, mod):\n         *`# populate the already initialized module`*\n         *`# just print a message in this toy example`*\n         print(f'NOTE: module {mod!r} not yet written')\nsys.path_hooks.append(ImporterAndLoader)\nsys.path.append(ImporterAndLoader.fake_path)\n`if` __name__ == '__main__':      *`# self-test when run as main script`*\n    `import` missing_module       *`# importing a simple *missing* module`*\n    print(missing_module)       *`# ...should succeed`*\n    print(sys.modules.get('missing_module'))  *`# ...should also succeed`*\n```", "```py\nC:\\Temp\\MyPack> `python` `setup``.``py` `install`\n```", "```py\nC:\\Temp\\MyPack> `python` `setup``.``py` `-``-``help`\n```", "```py\n$ python3 -m venv /tmp/tempenv\n$ tree -dL 4 /tmp/tempenv\n/tmp/tempenv\n|--- bin\n|--- include\n|___ lib\n     |___ python3.5\n          |___ site-packages\n               |--- __pycache__\n               |--- pip\n               |--- pip-8.1.1.dist-info\n               |--- pkg_resources\n               |--- setuptools\n               |___ setuptools-20.10.1.dist-info\n\n11 directories\n$ ls -l /tmp/tempenv/bin/\ntotal 80\n-rw-r--r-- 1 sh wheel 2134 Oct 24 15:26 activate\n-rw-r--r-- 1 sh wheel 1250 Oct 24 15:26 activate.csh\n-rw-r--r-- 1 sh wheel 2388 Oct 24 15:26 activate.fish\n-rwxr-xr-x 1 sh wheel  249 Oct 24 15:26 easy_install\n-rwxr-xr-x 1 sh wheel  249 Oct 24 15:26 easy_install-3.5\n-rwxr-xr-x 1 sh wheel  221 Oct 24 15:26 pip\n-rwxr-xr-x 1 sh wheel  221 Oct 24 15:26 pip3\n-rwxr-xr-x 1 sh wheel  221 Oct 24 15:26 pip3.5\nlrwxr-xr-x 1 sh wheel    7 Oct 24 15:26 python->python3\nlrwxr-xr-x 1 sh wheel   22 Oct 24 15:26 python3->/usr/local/bin/python3\n```", "```py\n$ source *envpath*/bin/activate\n```", "```py\n$ *. envpath*/bin/activate\n```", "```py\nC:\\> *envpath*/Scripts/activate.bat\n```", "```py\nC:\\> `py` `-``3.7` `-``m` `venv` `C``:``\\``path``\\``to``\\``new_virtualenv`\n```", "```py\n(tempenv) $ pip freeze\nappnope==0.1.0\ndecorator==4.0.10\nipython==5.1.0\nipython-genutils==0.1.0\npexpect==4.2.1\npickleshare==0.7.4\nprompt-toolkit==1.0.8\nptyprocess==0.5.1\nPygments==2.1.3\nrequests==2.11.1\nsimplegeneric==0.8.1\nsix==1.10.0\ntraitlets==4.3.1\nwcwidth==0.1.7\n```"]