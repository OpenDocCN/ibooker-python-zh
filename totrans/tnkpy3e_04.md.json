["```py\nn = 17 \n```", "```py\npi = 3.141592653589793 \n```", "```py\nmessage = 'And now for something completely different' \n```", "```py\nmessage \n```", "```py\n'And now for something completely different' \n```", "```py\nn + 25 \n```", "```py\n42 \n```", "```py\n2 * pi \n```", "```py\n6.283185307179586 \n```", "```py\nround(pi) \n```", "```py\n3 \n```", "```py\nlen(message) \n```", "```py\n42 \n```", "```py\nmillion!  =  1000000 \n```", "```py\n Cell In[12], line 1\n    million!  =  1000000\n           ^\nSyntaxError: invalid syntax \n```", "```py\n76trombones = 'big parade' \n```", "```py\n Cell In[13], line 1\n  76trombones = 'big parade'\n     ^\nSyntaxError: invalid decimal literal \n```", "```py\nclass = 'Self-Defence Against Fresh Fruit' \n```", "```py\n Cell In[14], line 1\n    class = 'Self-Defence Against Fresh Fruit'\n          ^\nSyntaxError: invalid syntax \n```", "```py\nFalse      await      else       import     pass\nNone       break      except     in         raise\nTrue       class      finally    is         return\nand        continue   for        lambda     try\nas         def        from       nonlocal   while\nassert     del        global     not        with\nasync      elif       if         or         yield \n```", "```py\nimport math \n```", "```py\nmath.pi \n```", "```py\n3.141592653589793 \n```", "```py\nmath.sqrt(25) \n```", "```py\n5.0 \n```", "```py\nmath.pow(5, 2) \n```", "```py\n25.0 \n```", "```py\n19 + n + round(math.pi) * 2 \n```", "```py\n42 \n```", "```py\nn = 17 \n```", "```py\nimport math \n```", "```py\nn + 1 \n```", "```py\n18 \n```", "```py\nn + 2\nn + 3 \n```", "```py\n20 \n```", "```py\nprint(n+2)\nprint(n+3) \n```", "```py\n19\n20 \n```", "```py\nprint('The value of pi is approximately')\nprint(math.pi) \n```", "```py\nThe value of pi is approximately\n3.141592653589793 \n```", "```py\nprint('The value of pi is approximately', math.pi) \n```", "```py\nThe value of pi is approximately 3.141592653589793 \n```", "```py\nint('101') \n```", "```py\n101 \n```", "```py\nmath.pow(5, 2) \n```", "```py\n25.0 \n```", "```py\nint('101', 2) \n```", "```py\n5 \n```", "```py\nround(math.pi, 3) \n```", "```py\n3.142 \n```", "```py\nprint('Any', 'number', 'of', 'arguments') \n```", "```py\nAny number of arguments \n```", "```py\nfloat('123.0', 2) \n```", "```py\nTypeError: float expected at most 1 argument, got 2 \n```", "```py\nmath.pow(2) \n```", "```py\nTypeError: pow expected 2 arguments, got 1 \n```", "```py\nmath.sqrt('123') \n```", "```py\nTypeError: must be real number, not str \n```", "```py\n# number of seconds in 42:42\nseconds = 42 * 60 + 42 \n```", "```py\nmiles = 10 / 1.61     # 10 kilometers in miles \n```", "```py\nv = 8     # assign 8 to v \n```", "```py\nv = 8     # velocity in miles per hour \n```", "```py\nmillion!  =  1000000 \n```", "```py\n Cell In[40], line 1\n    million!  =  1000000\n           ^\nSyntaxError: invalid syntax \n```", "```py\n'126' / 3 \n```", "```py\nTypeError: unsupported operand type(s) for /: 'str' and 'int' \n```", "```py\n1 + 3 / 2 \n```", "```py\n2.5 \n```", "```py\n# This cell tells Jupyter to provide detailed debugging information\n# when a runtime error occurs. Run it before working on the exercises.\n\n%xmode Verbose \n```", "```py\nException reporting mode: Verbose \n```"]