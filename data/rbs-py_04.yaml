- en: Chapter 3\. Type Annotations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章。类型注解
- en: 'Python is a dynamically typed language; types aren’t known until runtime. This
    is an obstacle when trying to write robust code. Since types are embedded in the
    value itself, developers have a very tough time knowing what type they are working
    with. Sure, that name looks likes a `str` today, but what happens if someone makes
    it `bytes`? Assumptions about types are built on shaky ground with dynamically
    typed languages. Hope is not lost, though. In Python 3.5, a brand-new feature
    was introduced: type annotations.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种动态类型语言；类型直到运行时才知道。这在试图编写健壮代码时是一个障碍。由于类型嵌入在值本身中，开发人员很难知道他们正在处理的是什么类型。当然，今天这个名称看起来像是一个`str`，但如果有人将其改为`bytes`会发生什么呢？对于动态类型语言，类型的假设是建立在不稳定的基础上的。然而，希望并未失去。在
    Python 3.5 中，引入了一个全新的功能：类型注解。
- en: 'Type annotations bring your ability to write robust code to a whole new level.
    Guido van Rossum, creator of Python, says it best:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 类型注解将你编写健壮代码的能力提升到一个全新的水平。Python 的创造者 Guido van Rossum 表示得最好：
- en: I’ve learned a painful lesson that for small programs dynamic typing is great.
    For large programs you have to have a more disciplined approach and it helps if
    the language actually gives you that discipline, rather than telling you “Well,
    you can do whatever you want.”^([1](part0006_split_008.html#idm45644756802936))
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我已经学到了一个痛苦的教训，对于小程序来说，动态类型是很棒的。但对于大程序，你必须采取更严格的方法，如果语言实际上提供了这种纪律，而不是告诉你“好吧，你可以做任何你想做的事情”会更有帮助。^([1](part0006_split_008.html#idm45644756802936))
- en: Type annotations are the more disciplined approach, the extra bit of care you
    need to wrangle larger codebases. In this chapter, you’ll learn how to use type
    annotations, why they are so important, and how to utilize a tool called a typechecker
    to enforce your intentions throughout your codebase.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 类型注解是更严谨的方法，是你在处理更大代码库时所需的额外关注。在本章中，你将学习如何使用类型注解，它们为什么如此重要，以及如何利用一种称为类型检查器的工具来强制执行你在整个代码库中的意图。
- en: What Are Type Annotations?
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是类型注解？
- en: 'In [Chapter 2](part0005_split_000.html#types), you got your first glance at
    a type annotation:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第二章](part0005_split_000.html#types)，你首次瞥见了类型注解：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](../images/00002.gif)](part0006_split_001.html#co_type_annotations_CO1-1)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](../images/00002.gif)](part0006_split_001.html#co_type_annotations_CO1-1)'
- en: 'The type annotation here is `: datetime.datetime`'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '这里的类型注解是`: datetime.datetime`'
- en: Type annotations are an additional syntax notifying the user of an expected
    type of your variables. These annotations serve as *type hints*; they provide
    hints to the reader, but they are not actually used by the Python language at
    runtime. In fact, you are completely free to ignore the hints. Consider the following
    snippet of code, along with a comment written by the developer.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 类型注解是一种额外的语法，通知用户你的变量的预期类型。这些注解充当*类型提示*；它们为读者提供提示，但实际上 Python 语言在运行时并不使用它们。事实上，你完全可以忽略这些提示。考虑以下代码片段，以及开发人员写的评论。
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Warning
  id: totrans-12
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: It should be a rare case where you go against a type hint. The author very clearly
    intended a specific use case. If you aren’t going to follow the type annotation,
    you are setting yourself up for problems if the original code changes in a way
    that is incompatible with the types that you are using (such as expecting a certain
    function to work with that type).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在你违背类型提示的情况下，应该是一个罕见的案例。作者非常明确地打算了一个特定的用例。如果你不打算遵循类型注解，那么如果原始代码以不兼容你所使用的类型的方式发生更改，你将为自己设置问题。
- en: 'Python will not throw any error at runtime in this scenario. As a matter of
    fact, it won’t use the type annotations at all during runtime. There is no checking
    or cost for using these when Python executes. These type annotations still serve
    a crucial purpose: informing your readers of the expected type. Maintainers of
    code will know what types they are allowed to use when changing your implementation.
    Calling code will also benefit, as developers will know exactly what type to pass
    in. By implementing type annotations, you reduce friction.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Python 在这种情况下不会在运行时抛出任何错误。事实上，在 Python 执行时根本不使用这些类型注解。没有检查或成本用于使用这些类型注解。然而，这些类型注解仍然起到了至关重要的作用：通知你的读者预期的类型。代码的维护者将知道在更改你的实现时可以使用哪些类型。调用代码也会受益，因为开发人员将确切知道要传入的类型。通过实施类型注解，你减少了摩擦。
- en: Put yourself in your future maintainer’s shoes. Wouldn’t it be nice to come
    across code that is intuitive to use? You wouldn’t have to dig through function
    after function to determine usage. You wouldn’t assume a wrong type and then need
    to deal with the fallout of exceptions and wrong behavior.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 设想一下你未来的维护者的处境。遇到直观易用的代码会不会很棒？你不需要一行接着一行地挖掘函数来确定使用方法，也不会误用某种类型，然后需要处理异常和错误行为的后果。
- en: 'Consider another piece of code that takes in employees’ availability and a
    restaurant’s opening time, and then schedules available workers for that day.
    You want to use this piece of code and you see the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑另一段代码，它接收员工的可用时间和餐厅的营业时间，然后为那一天安排可用的工人。你想使用这段代码，看到了以下内容：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let’s ignore the implementation for a minute, because I want to focus on first
    impressions. What do you think can get passed into this? Stop, close your eyes,
    and ask yourself what are reasonable types that can be passed in before reading
    on. Is `open_time` a `datetime`, the number of seconds since epoch, or maybe a
    string containing an hour? Is `workers_needed` a list of names, a list of `Worker`
    objects, or something else? If you guess wrong, or aren’t sure, you need to go
    look at either the implementation or calling code, which I’ve established takes
    time and is frustrating.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们忽略实现一会儿，因为我想专注于第一印象。你认为可以传入什么？停下来，闭上眼睛，问问自己在阅读之前，什么是合理的传入类型。`open_time` 是
    `datetime` 类型，还是自纪元以来的秒数，或者是包含小时的字符串？`workers_needed` 是一个名字列表，一个 `Worker` 对象的列表，还是其他什么东西？如果你猜错了，或者不确定，你需要查看实现或调用代码，这我已经明确了需要时间，并且令人沮丧。
- en: Let me provide an implementation and you can see how close you were.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我提供一个实现，你可以看看你离正解有多近。
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You probably guessed that `open_time` is a `datetime`, but did you consider
    that `workers_needed` could have been an `int`? As soon as you see the type annotations,
    you get a much better picture of what’s happening. This reduces cognitive overhead
    and reduces friction for maintainers.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能猜到 `open_time` 是 `datetime` 类型，但你有没有考虑过 `workers_needed` 可能是一个 `int`？一旦你看到类型注解，你会更清楚地了解发生了什么。这减少了认知负担，降低了维护者的摩擦。
- en: Tip
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: This is certainly a step in the right direction, but don’t stop here. If you
    see code like this, consider renaming the variable to `number_of_workers_needed`
    to reflect just what the integer means. In the next chapter, I’ll also explore
    type aliases, which provide an alternate way of expressing yourself.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这无疑是朝着正确方向迈出的一步，但不要停在这里。如果你看到这样的代码，考虑将变量重命名为 `number_of_workers_needed`，以明确整数的含义。在下一章，我还将探讨类型别名，它提供了一种表达自己方式的替代方法。
- en: So far, all the examples I’ve shown have focused on parameters, but you’re also
    allowed to annotate *return types*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我展示的所有例子都集中在参数上，但你也可以注释 *返回类型*。
- en: Consider the `schedule_restaurant_open` function. In the middle of that snippet,
    I called `find_workers_available_for_time`. This returns to a variable named `workers`.
    Suppose you want to change the code to pick workers who have gone the longest
    without working, rather than random sampling? Do you have any indication what
    type `workers` is?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑 `schedule_restaurant_open` 函数。在那段代码中间，我调用了 `find_workers_available_for_time`。它返回一个名为
    `workers` 的变量。假设你想将代码更改为选择最长时间未工作的工人，而不是随机抽样？你有任何迹象表明 `workers` 的类型吗？
- en: 'If you were to just look at the function signature, you would see the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只看函数签名，你会看到以下内容：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Nothing in here helps us do your job more quickly. You could guess and the tests
    would tell us, right? Maybe it’s a list of names? Instead of letting the tests
    fail, maybe you should go look through the implementation.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有任何东西能帮助我们更快地完成工作。你可以猜测，测试会告诉我们，对吧？也许是一个名字列表？不如让测试失败，还是去看看实现吧。
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Oh no, there’s nothing in here that tells you what type you should be expecting.
    There are three different return statements throughout this code, and you hope
    that they all return the same type. (Surely every `if` statement is tested through
    unit tests to make sure they are consistent, right? Right?) You need to dig deeper.
    You need to look at `worker_database`. You need to look at `is_available` and
    `get_emergency_workers`. You need to look at the `OWNER` variable. Every one of
    these needs to be consistent, or else you’ll need to handle special cases in your
    original code.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 哦不，这里没有告诉你应该期望什么类型。这段代码中有三个不同的返回语句，而你希望它们都返回相同的类型。（当然，每个`if`语句都通过单元测试来确保它们一致，对吧？对吧？）你需要深入挖掘。你需要查看`worker_database`。你需要查看`is_available`和`get_emergency_workers`。你需要查看`OWNER`变量。这些都需要保持一致，否则你将需要在原始代码中处理特殊情况。
- en: And what if these functions also don’t tell you exactly what you need? What
    if you have to go deeper through multiple function calls? Every layer you have
    to go through is another layer of abstraction you need to keep in your brain.
    Every piece of information contributes to cognitive overload. The more cognitive
    overload you are burdened with, the more likely it is that a mistake will happen.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些函数也不能确切告诉你需要的东西怎么办？如果你不得不通过多个函数调用深入了解？你需要穿过的每一层都是你大脑中需要保持的抽象层。每一点信息都会增加认知负荷。你承受的认知负荷越多，出错的可能性就越大。
- en: 'All of this is avoided by annotating a return type. Return types are annotated
    by putting `-> <type>` at the end of the function declaration. Suppose you came
    across this function signature:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都可以通过对返回类型进行注解来避免。返回类型通过在函数声明的末尾放置`-> <type>`来注释。假设你遇到了这个函数签名：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You now know that you should indeed treat workers as a list of strings. No digging
    through databases, function calls, or modules needed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道应该把工作者确实看作是一个字符串列表。不需要深入数据库、函数调用或模块。
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'In Python 3.8 and earlier, built-in collection types such as `list`, `dict`,
    and `set` did not allow bracket syntax such as `list[Cookbook]` or `dict[str,int]`.
    Instead, you needed to use type annotations from the typing module:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3.8及更早版本中，内置的集合类型如`list`、`dict`和`set`不允许使用方括号语法，比如`list[Cookbook]`或`dict[str,int]`。相反，你需要使用typing模块中的类型注解：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can also annotate variables when needed:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 需要时你也可以对变量进行注释：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: While I will annotate all of my functions, I typically don’t bother annotating
    variables unless there is something specific I want to convey in my code (such
    as a type that is different than expected). I don’t want to get too into the realm
    of putting type annotations on literally everything—the lack of verbosity is what
    drew many developers to Python in the first place. The types can clutter your
    code, especially when it is blindingly obvious what the type is.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我会对所有的函数进行注释，但我通常不会打扰去对变量进行注释，除非我在代码中想传达的特定内容（比如一个与预期不同的类型）。我不想过分地在几乎所有地方都放置类型注解——Python的简洁性是吸引许多开发者的原因。类型可能会使你的代码变得混乱，特别是当类型显而易见时。
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: None of these type annotations provide more value than what is already provided
    by Python itself. Readers of this code know that `"useless"` is a `str`. Remember,
    type annotations are used for type hinting; you are providing notes for the future
    to improve communication. You don’t need to state the obvious everywhere.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型注解提供的价值并不比Python本身提供的更多。阅读这段代码的人知道`"useless"`是一个`str`。记住，类型注解用于类型提示；你为未来提供了改进沟通的注释。你不需要到处说明显而易见的事情。
- en: Benefits of Type Annotations
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型注解的好处
- en: As with every decision you make, you need to weigh the costs and benefits. Thinking
    about types up front helps your deliberate design process, but do type annotations
    provide other benefits? I’ll show you how type annotations really pull their weight
    through tooling.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你做出的每个决定一样，你需要权衡成本和收益。从一开始考虑类型有助于你的有意识的设计过程，但类型注解还提供其他的好处吗？我将向你展示类型注解如何通过工具发挥作用。
- en: Autocomplete
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动完成
- en: I’ve mainly talked about communication to other developers, but your Python
    environment benefits from type annotations as well. Since Python is dynamically
    typed, it is difficult to know what operations are available. With type annotations,
    many Python-aware code editors will autocomplete your variable’s operations.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我主要讨论了与其他开发人员的沟通，但你的Python环境也从类型注解中受益。由于Python是动态类型的，很难知道哪些操作是可用的。使用类型注解，许多Python感知代码编辑器将为你的变量自动完成操作。
- en: In [Figure 3-1](part0006_split_003.html#figure_3_1), you’ll see a screenshot
    that illustrates a popular code editor, VS Code, detecting a `datetime` and offering
    to autocomplete my variables.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [图 3-1](part0006_split_003.html#figure_3_1) 中，你会看到一个屏幕截图，展示了一个流行的代码编辑器 VS
    Code 检测到一个 `datetime` 并提供自动补全我的变量。
- en: '![VS Code showing autocompletion](../images/00003.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![VS Code 显示自动补全](../images/00003.jpeg)'
- en: Figure 3-1\. VS Code showing autocompletion
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-1\. VS Code 显示自动补全
- en: Typecheckers
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型检查器
- en: 'Throughout this book, I’ve been talking about how types communicate intent,
    but have been leaving out one key detail: no programmer has to honor these type
    annotations if they don’t want to. If your code contradicts a type annotation,
    it is probably an error and you’re still relying on humans to catch bugs. I want
    to do better. I want a computer to find these sorts of bugs for me.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我一直在讲述类型如何传达意图，但一直忽略了一个关键细节：如果开发人员不愿意遵循这些类型注解，那么没有程序员必须遵守它们。如果你的代码与类型注解相矛盾，那很可能是一个错误，你仍然依赖人类来捕获错误。我希望能做得更好。我希望计算机能够帮我找到这些类型错误。
- en: 'I showed this snippet when talking about dynamic typing back in [Chapter 2](part0005_split_000.html#types):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我在 [第 2 章](part0005_split_000.html#types) 谈论动态类型时展示了这个代码片段：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Herein lies the challenge: how do type annotations make your codebase robust,
    when you can’t trust that developers will follow their guidance? In order to be
    robust, you want your code to stand the test of time. To do that, you need some
    sort of tool that can check all your type annotations and flag if anything is
    amiss. That tool is called a typechecker.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这里面就是挑战所在：当你不能信任开发人员会遵循它们的指导时，类型注解如何使你的代码库更加健壮？为了做到健壮，你希望你的代码经得住时间的考验。为此，你需要一种工具来检查所有的类型注解，并在有问题时做出标记。这种工具就叫做类型检查器。
- en: Typecheckers are what allow the type annotations to transcend from communication
    method to a safety net. It is a form of static analysis. *Static analysis tools*
    are tools that run on your source code, and don’t impact your runtime at all.
    You’ll learn more about static analysis tools in [Chapter 20](part0026_split_000.html#static_analysis),
    but for now, I will just explain typecheckers.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 类型检查器使得类型注解从一种沟通方式转变为一种安全网。它是一种静态分析的形式。*静态分析工具* 是在你的源代码上运行的工具，完全不会影响你的运行时。在
    [第 20 章](part0026_split_000.html#static_analysis) 中，你将更多地了解静态分析工具，但现在我只解释类型检查器。
- en: First, I need to install one. I’ll use mypy, a very popular typechecker.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我需要安装一个类型检查器。我将使用 mypy，一个非常流行的类型检查工具。
- en: '`pip install mypy`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip install mypy`'
- en: 'Now I’ll create a file named *invalid_type.py* with incorrect behavior:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我将创建一个名为 *invalid_type.py* 的文件，其中有不正确的行为：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If I run `mypy` on the command line against that file, I will get an error:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我在命令行上运行 `mypy` 对那个文件进行检查，我会得到一个错误：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: And just like that, my type annotations become a first line of defense against
    errors. Anytime you make a mistake and go against the author’s intent, a type
    checker will find out and alert you. In fact, in most development environments,
    it’s possible to get this analysis in real time, notifying you of errors as you
    type. (Without reading your mind, this is about as early as a tool can catch errors,
    which is pretty great.)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 正如此时此刻，我的类型注解已成为错误的第一道防线。每当你犯错背离了作者的意图，类型检查器就会发现并警告你。实际上，在大多数开发环境中，你可以实时获取这种分析，随着你的输入即时通知你错误。（尽管它不会读懂你的思维，但它可以在最早的时候捕获到错误，这非常棒。）
- en: 'Exercise: Spot the Bug'
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习：找出 Bug
- en: Here are some more examples of mypy catching errors in my code. I want you to
    look for the error in each code snippet and time how long it takes you to find
    the bug or give up, and then check the output listed below the snippet to see
    if you got it right.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些在我的代码中由 mypy 捕捉到的错误示例。我希望你找出每个代码片段中的错误并计时，看你找到 Bug 或者放弃用了多长时间，然后检查下面列出的输出看看你找对了没有。
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here’s the mypy output showing the error:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 mypy 输出显示的错误信息：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Whoops, I’m returning `bytes`, not a `str`. I made a call to encode instead
    of decode, and got my return type all mixed up. I can’t even tell you how many
    times I made this mistake moving Python 2.7 code to Python 3\. Thank goodness
    for typecheckers.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 糟糕，我返回的是 `bytes`，而不是 `str`。我调用了 encode 而不是 decode，弄混了我的返回类型。我甚至都无法告诉你我把 Python
    2.7 代码迁移到 Python 3 时犯了多少次这个错误。幸好有类型检查器。
- en: 'Here’s another example:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是另一个例子：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The mypy error is as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: mypy 的错误如下：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Another innocent mistake I made by calling `update` on a list instead of `extend`.
    These sorts of mistakes can happen quite easily when moving between collection
    types (in this case from a `set`, which does offer an `update` method, to a `list`,
    which doesn’t).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我犯的无辜错误是在列表上调用`update`而不是`extend`。当在不同集合类型之间移动时（在这种情况下是从`set`到`list`），这类错误很容易发生。
- en: 'One more example to wrap it up:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 再举一个例子来总结一下：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The mypy error is as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: mypy的错误如下：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This one is subtle. I’m returning `None` when a string value is expected. If
    all the code is just checking conditionally for the restaurant name to make decisions,
    like I do above, tests will pass, and nothing will be amiss. This is true even
    for the negative case, because `None` is absolutely fine to check for in `if`
    statements (it is false-y). This is an example of Python’s dynamic typing coming
    back to bite us.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子有些微妙。当预期一个字符串值时，我却返回了`None`。如果所有的代码都只是条件性地检查餐厅名称来做决策，就像我之前做的那样，测试将会通过，一切看起来都没有问题。即使对于负面情况也是如此，因为在`if`语句中检查`None`是完全没问题的（它是假值）。这是Python动态类型的一个例子，回头来咬我们一口。
- en: However, a few months from now, some developer will start trying to use this
    return value as a string, and as soon as a new city needs to be added, the code
    starts trying to operate on `None` values, which causes exceptions to be raised.
    This is not very robust; there is a latent code bug just waiting to happen. But
    with typecheckers, you can stop worrying about this and catch these mistakes early.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，几个月后，某些开发人员将尝试将此返回值作为字符串使用，一旦需要添加新城市，代码就会尝试操作`None`值，这将导致异常抛出。这并不是很健壮；这里存在一个潜在的代码错误隐患。但是通过类型检查器，您可以停止担心这一点，并及早捕捉到这些错误。
- en: Warning
  id: totrans-80
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: 'With typecheckers available, do you even need tests? You certainly do. Typecheckers
    catch a specific class of errors: those of incompatible types. There are plenty
    of other classes of errors that you still need to test for. Treat typecheckers
    as just one tool in your arsenal of bug identification.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 有了类型检查器，你是否还需要测试？当然需要。类型检查器捕获一类特定的错误：不兼容类型的错误。还有许多其他类别的错误仍然需要测试。将类型检查器视为您在bug识别工具箱中的一种工具。
- en: In all of these examples, typecheckers found a bug just waiting to happen. It
    doesn’t matter if the bug would have been caught by tests, or by code review,
    or by customers; typecheckers catch it earlier, which saves time and money. Typecheckers
    start giving us the benefit of a statically typed language, while still allowing
    the Python runtime to remain dynamically typed. This truly is the best of both
    worlds.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些示例中，类型检查器都找到了一个潜在的即将发生的bug。无论这个bug是由测试、代码审查还是客户发现的，都无关紧要；类型检查器能更早地捕捉到它，从而节省时间和金钱。类型检查器开始为我们提供静态类型语言的好处，同时仍然允许Python运行时保持动态类型。这确实是两全其美的方式。
- en: At the beginning of the chapter, you’ll find a quote from Guido van Rossum.
    While working at Dropbox, he found that large codebases struggled without having
    a safety net. He became a huge proponent for driving type hinting into the language.
    If you want your code to communicate intent and catch errors, start adopting type
    annotations and typechecking today.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开头，你会找到Guido van Rossum的一句话。在Dropbox工作期间，他发现大型代码库在没有安全网的情况下存在困难。他成为驱动类型提示进入语言的强烈支持者。如果你希望你的代码传达意图并捕获错误，请立即开始采用类型注释和类型检查。
- en: Discussion Topic
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论主题
- en: Has your codebase had an error slip through that could have been caught by typecheckers?
    How much do those errors cost you? How many times has it been a code review or
    an integration test that caught the bug? How about bugs that made it to production?
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码库是否有过错误滑过，而这些错误可以被类型检查器捕获？这些错误给您造成了多大的损失？有多少次是代码审查或集成测试捕获了bug？那些进入生产环境的bug呢？
- en: When to Use Type Annotations
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时使用类型注解
- en: Now, before you go adding types to everything, I need to talk about the cost.
    Adding types is simple, but can be overdone. As users try to test and play around
    with code, they may start fighting the typechecker because they feel bogged down
    when writing all the type annotations. There is an adoption cost for users who
    are just getting started with type hinting. I also mentioned that I don’t type
    annotate everything. I won’t annotate all my variables, especially if the type
    is obvious. I also won’t typically type annotate parameters for every small private
    method in a class.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始将类型添加到所有内容之前，我需要谈谈成本问题。添加类型很简单，但可能会做得过火。当用户尝试测试和调试代码时，他们可能会开始与类型检查器作斗争，因为他们觉得在编写所有类型注释时被拖累。对于刚开始使用类型提示的用户来说，这是一个采用的成本。我还提到过我并不会对所有变量进行类型注释，特别是类型显而易见时。我也通常不会为类中的每个小私有方法的参数进行类型注释。
- en: When should you use typecheckers?
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 什么时候应该使用类型检查器？
- en: With functions that you expect other modules or users to call (e.g., public
    APIs, library entry points, etc.)
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于你期望其他模块或用户调用的函数（例如公共API、库入口点等）。
- en: When you want to highlight where a type is complicated (e.g., a dictionary of
    strings mapped to lists of objects) or unintuitive
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你想强调类型复杂（例如，将字符串映射到对象列表的字典）或不直观时。
- en: Areas where mypy complains that you need a type (typically when assigning to
    an empty collection—it’s easier to go along with the tool than against it)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当mypy提示你需要类型时的区域（通常在将空集合赋值时更容易遵循工具而不是反对它）
- en: A typechecker will infer types for any value that it can, so even if you don’t
    fill in all types, you still reap the benefits. I will cover configuring typecheckers
    in [Chapter 6](part0009_split_000.html#typechecker).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 类型检查器将推断任何可能的值的类型，因此即使你没有填写所有类型，你仍将获得收益。我将在[第6章](part0009_split_000.html#typechecker)中介绍配置类型检查器。
- en: Closing Thoughts
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结语
- en: There was consternation in the Python community when type hinting was introduced.
    Developers were afraid that Python was becoming a statically typed language like
    Java or C++. They worried that adding types everywhere would slow them down and
    destroy the benefits of the dynamically typed language they fell in love with.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当类型提示引入时，Python社区内部曾产生过疑虑。开发人员担心Python正在变成像Java或C++这样的静态类型语言。他们担心到处添加类型会减慢开发速度，并破坏他们喜爱的动态类型语言的好处。
- en: 'However, type hints are just that: hints. They are completely optional. I don’t
    recommend them for small scripts, or any piece of code that isn’t going to live
    a very long time. But if your code needs to be maintainable for the long term,
    type hints are invaluable. They serve as a communication method, make your environment
    smarter, and detect errors when combined with typecheckers. They protect the original
    author’s intent. When annotating types, you decrease the burden a reader has in
    understanding your code. You reduce the need to read the implementation of a function
    to know what its doing. Code is complicated, and you should be minimizing how
    much code a developer needs to read. By using well-thought-out types, you reduce
    surprise and increase reading comprehension.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，类型提示仅仅是提示而已。它们是完全可选的。我不推荐它们用于小型脚本，或者任何不会存在很长时间的代码片段。但是，如果你的代码需要长期维护，类型提示就是无价的。它们作为一种沟通方法，使你的环境更智能，并且与类型检查器结合使用时能检测错误。它们保护了原始作者的意图。在注释类型时，你减轻了读者理解你的代码的负担。你减少了需要阅读函数实现来了解其操作的需要。代码很复杂，你应该尽量减少开发人员需要阅读的代码量。通过使用经过深思熟虑的类型，你减少了意外并增加了阅读理解力。
- en: The typechecker is also a confidence builder. Remember, in order for your code
    to be robust, it has to be easy to change, rewrite, and delete if needed. The
    typechecker can allow developers to do that with less trepidation. If something
    was relying on a type or field that got changed or deleted, the typechecker will
    flag the offending code as incompatible. Automated tooling makes you and your
    future collaborators’ jobs simpler; fewer bugs will make it to production and
    features will get delivered quicker.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 类型检查器也是一种信心的增强器。记住，为了使你的代码更健壮，它必须易于更改、重写和删除（如果需要）。类型检查器可以让开发人员在这样做时更加放心。如果某些内容依赖于已更改或删除的类型或字段，类型检查器将标记不兼容的代码。自动化工具使您和未来的合作者的工作更简单；减少错误进入生产环境，并更快地提供功能。
- en: In the next chapter, you’re going to go beyond basic type annotations and learn
    how to build a vocabulary of all new types. These types will help you constrain
    behavior in your codebase, limiting the ways things can go wrong. I’ve only scratched
    the surface of how useful type annotations can be.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将超越基本类型注解，学习如何构建所有新类型的词汇表。这些类型将帮助你约束代码库中的行为，限制事物可能出错的方式。我仅仅触及了类型注解可能非常有用的表面。
- en: ^([1](part0006_split_000.html#idm45644756802936-marker)) Guido van Rossum. “A
    Language Creators’ Conversation.” PuPPy (Puget Sound Programming Python) Annual
    Benefit 2019\. [*https://oreil.ly/1xf01*](https://oreil.ly/1xf01).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](part0006_split_000.html#idm45644756802936-marker)) **Guido van Rossum**，《语言创作者的对话》，PuPPy（Puget
    Sound Programming Python）2019 年度慈善活动。[*https://oreil.ly/1xf01*](https://oreil.ly/1xf01)。
