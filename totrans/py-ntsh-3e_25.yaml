- en: Chapter 25\. Extending and Embedding Classic Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*The content of this chapter has been abbreviated for the print edition of
    this book. The full content is [available online](https://oreil.ly/python-nutshell-25),
    as described in [“Online Material”](#online_material).*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'CPython runs on a portable, C-coded virtual machine. Python’s built-in objects—such
    as numbers, sequences, dictionaries, sets, and files—are coded in C, as are several
    modules in Python’s standard library. Modern platforms support dynamically loaded
    libraries, with file extensions such as .*dll* on Windows, .*so* on Linux, and
    .*dylib* on Mac: building Python produces such binary files. You can code your
    own extension modules for Python in C (or any language that can produce C-callable
    libraries), using the Python C API covered in this chapter. With this API, you
    can produce and deploy dynamic libraries that Python scripts and interactive sessions
    can later use with the **import** statement, covered in [“The import Statement”](ch07.xhtml#the_import_statement).'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '*Extending* Python means building modules that Python code can **import** to
    access the features the modules supply. *Embedding* Python means executing Python
    code from an application coded in another language. For such execution to be useful,
    Python code must in turn be able to access some of your application’s functionality.
    In practice, therefore, embedding implies some extending, as well as a few embedding-specific
    operations. The three main reasons for wishing to extend Python can be summarized
    as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Reimplementing some functionality (originally coded in Python) in a lower-level
    language, hoping to get better performance
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Letting Python code access some existing functionality supplied by libraries
    coded in (or, at any rate, callable from) lower-level languages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Letting Python code access some existing functionality of an application that
    is in the process of embedding Python as the application’s scripting language
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedding and extending are covered in Python’s online documentation; there,
    you can find an in-depth [tutorial](https://oreil.ly/BMl4L) and an extensive [reference
    manual](https://oreil.ly/OQXBK). Many details are best studied in Python’s extensively
    documented C sources. Download Python’s source distribution and study the sources
    of Python’s core, C-coded extension modules, and the example extensions supplied
    for this purpose.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Online Material
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This Chapter Assumes Some Knowledge of C
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although we include some non-C extension options, to extend or embed Python
    using the C API you must know the C and/or C++ programming languages. We do not
    cover C and C++ in this book, but there are many print and online resources that
    you can consult to learn them. Most of the online content of this chapter assumes
    that you have at least some knowledge of C.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'In the [online version of this chapter](https://oreil.ly/python-nutshell-25),
    you will find the following sections:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: “Extending Python with Python’s C API”
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'Includes reference tables and examples for creating C-coded Python extension
    modules that you can import into your Python programs, showing how to code and
    build such modules. This section includes two complete examples:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 包括参考表格和示例，用于创建 C 代码 Python 扩展模块，可以导入到你的 Python 程序中，展示如何编码和构建这些模块。本节包含两个完整示例：
- en: An extension implementing custom methods for manipulating dicts
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个实现自定义方法以操作字典的扩展
- en: An extension defining a custom type
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个定义自定义类型的扩展
- en: “Extending Python Without Python’s C API”
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: “不使用 Python 的 C API 扩展 Python”
- en: Discusses (or, at least, mentions and links to) several utilities and libraries
    that support creating Python extensions that do not directly require C or C++
    programming,^([1](ch25.xhtml#ch01fn163)) including the third-party tools [F2PY](https://oreil.ly/JrP_4),
    [SIP](https://oreil.ly/1l5ub), [CLIF](https://google.github.io/clif), [cppyy](https://cppyy.readthedocs.io),
    [pybind11](https://pybind11.readthedocs.io), [Cython](https://cython.org), [CFFI](https://cffi.readthedocs.io),
    and [HPy](https://hpyproject.org), and standard library module [ctypes](https://oreil.ly/xS4bC).
    This section includes a complete example on how to create an extension using Cython.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论（或至少提到和链接到）几个工具和库，支持创建 Python 扩展，而无需直接使用 C 或 C++ 编程，^([1](ch25.xhtml#ch01fn163))
    包括第三方工具 [F2PY](https://oreil.ly/JrP_4), [SIP](https://oreil.ly/1l5ub), [CLIF](https://google.github.io/clif),
    [cppyy](https://cppyy.readthedocs.io), [pybind11](https://pybind11.readthedocs.io),
    [Cython](https://cython.org), [CFFI](https://cffi.readthedocs.io) 和 [HPy](https://hpyproject.org)，以及标准库模块
    [ctypes](https://oreil.ly/xS4bC)。本节包含一个使用 Cython 创建扩展的完整示例。
- en: “Embedding Python”
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “嵌入 Python”
- en: Includes reference tables and a conceptual overview of embedding a Python interpreter
    within a larger application, using Python’s C API for embedding.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 包括参考表格和嵌入 Python 解释器到更大应用中的概念概述，使用 Python 的 C API 进行嵌入。
- en: ^([1](ch25.xhtml#ch01fn163-marker)) There are many other such tools, but we
    tried to pick just the most popular and promising ones.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch25.xhtml#ch01fn163-marker)) 还有许多其他类似工具，但我们试图仅挑选最流行和有前景的工具。
