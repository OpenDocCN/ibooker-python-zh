- en: Chapter 3\. Lists and Tuples
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章\. 列表和元组
- en: One of the most important things in writing efficient programs is understanding
    the guarantees of the data structures you use. In fact, a large part of performant
    programming is knowing what questions you are trying to ask of your data and picking
    a data structure that can answer these questions quickly. In this chapter we will
    talk about the kinds of questions that lists and tuples can answer quickly, and
    how they do it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写高效程序时，了解所使用数据结构的保证是非常重要的事情。实际上，编写高性能程序的一个重要部分是了解你要向你的数据提出什么问题，并选择一个能够快速回答这些问题的数据结构。在本章中，我们将讨论列表和元组能够快速回答的问题类型及其实现方式。
- en: 'Lists and tuples are a class of data structures called *arrays*. An array is
    a flat list of data with some intrinsic ordering. Usually in these sorts of data
    structures, the relative ordering of the elements is as important as the elements
    themselves! In addition, this *a priori* knowledge of the ordering is incredibly
    valuable: by knowing that data in our array is at a specific position, we can
    retrieve it in `O(1)`!^([1](ch03.xhtml#idm46122430197320)) There are also many
    ways to implement arrays, and each solution has its own useful features and guarantees.
    This is why in Python we have two types of arrays: lists and tuples. *Lists* are
    dynamic arrays that let us modify and resize the data we are storing, while *tuples*
    are static arrays whose contents are fixed and immutable.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 列表和元组属于一类称为*数组*的数据结构。数组是一种带有某种内在顺序的扁平数据列表。通常在这类数据结构中，元素的相对顺序与元素本身一样重要！此外，对于这种*先验*的顺序知识非常有价值：通过知道数组中数据的特定位置，我们可以在`O(1)`的时间复杂度内检索它！^([1](ch03.xhtml#idm46122430197320))
    同时，有许多实现数组的方法，每种解决方案都有其自身的有用特性和保证。这就是为什么在Python中我们有两种类型的数组：列表和元组。*列表*是动态数组，允许我们修改和调整存储的数据，而*元组*是静态数组，其内容是固定且不可变的。
- en: Let’s unpack these previous statements a bit. System memory on a computer can
    be thought of as a series of numbered buckets, each capable of holding a number.
    Python stores data in these buckets *by reference*, which means the number itself
    simply points to, or refers to, the data we actually care about. As a result,
    these buckets can store any type of data we want (as opposed to `numpy` arrays,
    which have a static type and can store only that type of data).^([2](ch03.xhtml#idm46122430185928))
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细解释一下前面的声明。计算机系统内存可以被视为一系列编号的桶，每个桶可以容纳一个数字。Python通过*引用*的方式存储数据在这些桶中，这意味着数字本身只是指向或引用我们实际关心的数据。因此，这些桶可以存储我们想要的任何类型的数据（与`numpy`数组不同，后者具有静态类型，只能存储该类型的数据）^([2](ch03.xhtml#idm46122430185928))。
- en: When we want to create an array (and thus a list or tuple), we first have to
    allocate a block of system memory (where every section of this block will be used
    as an integer-sized pointer to actual data). This involves going to the system
    kernel and requesting the use of `N` *consecutive* buckets. [Figure 3-1](#FIG-array-allocation)
    shows an example of the system memory layout for an array (in this case, a list)
    of size 6.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要创建一个数组（因此是一个列表或元组），我们首先必须分配一块系统内存（其中这块区域的每个部分将被用作一个整数大小的指向实际数据的指针）。这涉及到向系统内核请求使用`N`
    *连续* 的桶。[图 3-1](#FIG-array-allocation)展示了大小为 6 的数组（在本例中是列表）的系统内存布局示例。
- en: Note
  id: totrans-5
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In Python, lists also store how large they are, so of the six allocated blocks,
    only five are usable—the zeroth element is the length.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，列表还存储其大小，因此在分配了六个块中，只有五个可用——第零个元素是长度。
- en: '![Array Allocation](Images/hpp2_0301.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![数组分配](Images/hpp2_0301.png)'
- en: Figure 3-1\. Example of system memory layout for an array of size 6
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-1\. 大小为 6 的数组系统内存布局示例
- en: In order to look up any specific element in our list, we simply need to know
    which element we want and remember which bucket our data started in. Since all
    of the data will occupy the same amount of space (one “bucket,” or, more specifically,
    one integer-sized pointer to the actual data), we don’t need to know anything
    about the type of data that is being stored to do this calculation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查找列表中的任何特定元素，我们只需知道我们想要的元素及我们的数据从哪个桶开始。因为所有的数据将占用相同的空间（一个“桶”，或者更具体地说，一个整数大小的指向实际数据的指针），我们不需要知道正在存储的数据类型来进行这个计算。
- en: Tip
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: If you knew where in memory your list of `N` elements started, how would you
    find an arbitrary element in the list?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你知道你的列表有`N`个元素并且它们在内存中的起始位置，你将如何找到列表中的任意元素？
- en: If, for example, we needed to retrieve the zeroth element in our array, we would
    simply go to the first bucket in our sequence, `M`, and read out the value inside
    it. If, on the other hand, we needed the fifth element in our array, we would
    go to the bucket at position `M + 5` and read its content. In general, if we want
    to retrieve element `i` from our array, we go to bucket `M + i`. So, by having
    our data stored in consecutive buckets, and having knowledge of the ordering of
    our data, we can locate our data by knowing which bucket to look at in one step
    (or `O(1)`), regardless of how big our array is ([Example 3-1](#list_lookup_timing)).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们需要检索数组中的第零个元素，我们只需转到我们序列中的第一个桶`M`，并读取其中的值。另一方面，如果我们需要数组中的第五个元素，我们将转到位置`M
    + 5`处的桶，并读取其内容。通常，如果我们要从数组中检索第`i`个元素，我们会去到桶`M + i`。因此，通过将数据存储在连续的桶中，并了解数据的排序方式，我们可以在一步（或`O(1)`）内定位我们的数据，无论数组有多大（[示例3-1](#list_lookup_timing)）。
- en: Example 3-1\. Timings for lookups in lists of different sizes
  id: totrans-13
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例3-1\. 不同大小列表中查找的时间
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What if we were given an array with an unknown order and wanted to retrieve
    a particular element? If the ordering were known, we could simply look up that
    particular value. However, in this case, we must do a `search` operation. The
    most basic approach to this problem is called a *linear search*, where we iterate
    over every element in the array and check if it is the value we want, as seen
    in [Example 3-2](#list_linear_search).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们得到一个未知顺序的数组，并想检索特定的元素怎么办？如果已知排序，我们可以简单地查找该特定值。然而，在这种情况下，我们必须进行一个`search`操作。解决这个问题的最基本方法称为*线性搜索*，在这种方法中，我们遍历数组中的每个元素，并检查它是否是我们想要的值，就像在[示例3-2](#list_linear_search)中看到的那样。
- en: Example 3-2\. A linear search through a list
  id: totrans-16
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例3-2\. 对列表进行线性搜索
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This algorithm has a worst-case performance of `O(n)`. This case occurs when
    we search for something that isn’t in the array. In order to know that the element
    we are searching for isn’t in the array, we must first check it against every
    other element. Eventually, we will reach the final `return -1` statement. In fact,
    this algorithm is exactly the algorithm that `list.index()` uses.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此算法的最坏情况性能为`O(n)`。当我们搜索不在数组中的内容时，就会发生这种情况。为了知道我们正在搜索的元素不在数组中，我们必须先将其与每个其他元素进行比较。最终，我们将达到最后的`return
    -1`语句。事实上，这个算法正是`list.index()`使用的算法。
- en: The only way to increase the speed is by having some other understanding of
    how the data is placed in memory, or of the arrangement of the buckets of data
    we are holding. For example, hash tables ([“How Do Dictionaries and Sets Work?”](ch04.xhtml#dict_set_how_work)),
    which are a fundamental data structure powering [Chapter 4](ch04.xhtml#section-dictionary-sets),
    solve this problem in `O(1)` by adding extra overhead to insertions/retrievals
    and enforcing a strict and peculiar sorting of the item. Alternatively, if your
    data is sorted so that every item is larger (or smaller) than its neighbor to
    the left (or right), then specialized search algorithms can be used that can bring
    your lookup time down to `O(log n)`. This may seem like an impossible step to
    take from the constant-time lookups we saw before, but sometimes it is the best
    option (especially since search algorithms are more flexible and allow you to
    define searches in creative ways).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要提高速度的唯一方法是对内存中数据的布局或我们持有的数据桶的排列有一些其他理解。例如，哈希表（[“字典和集合的工作原理？”](ch04.xhtml#dict_set_how_work)），这是支持[第4章](ch04.xhtml#section-dictionary-sets)的基本数据结构，通过增加额外的开销来解决这个问题，在插入/检索时强制执行严格而特殊的项目排序，从而以`O(1)`的时间复杂度解决了这个问题。或者，如果您的数据已排序，使得每个项目都比其左侧（或右侧）的邻居大（或小），则可以使用专门的搜索算法，将查找时间降至`O(log
    n)`。这看起来可能是从我们之前看到的常数时间查找中迈出的不可能步骤，但有时这是最佳选择（特别是因为搜索算法更灵活，允许您以创造性的方式定义搜索）。
- en: A More Efficient Search
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更高效的搜索
- en: As alluded to previously, we can achieve better search performance if we first
    sort our data so that all elements to the left of a particular item are smaller
    (or larger) than that item. The comparison is done through the `__eq__` and `__lt__`
    magic functions of the object and can be user-defined if using custom objects.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，如果我们首先对数据进行排序，使得所有位于特定项左侧的元素比该项小（或大），我们可以获得更好的搜索性能。比较是通过对象的`__eq__`和`__lt__`魔术函数进行的，如果使用自定义对象，则可以用户定义。
- en: Note
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Without the `__eq__` and `__lt__` methods, a custom object will compare only
    to objects of the same type, and the comparison will be done using the instance’s
    placement in memory. With those two magic functions defined, you can use the `functools.total_ordering`
    decorator from the standard library to automatically define all the other ordering
    functions, albeit at a small performance penalty.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个自定义对象没有定义`__eq__`和`__lt__`方法，它将只能与相同类型的对象进行比较，并且比较将使用实例在内存中的位置来进行。如果定义了这两个魔法函数，你可以使用标准库中的`functools.total_ordering`装饰器自动定义所有其他排序函数，尽管会略微降低性能。
- en: The two ingredients necessary are the sorting algorithm and the searching algorithm.
    Python lists have a built-in sorting algorithm that uses Tim sort. Tim sort can
    sort through a list in `O(n)` in the best case (and in `O(n log n)` in the worst
    case). It achieves this performance by utilizing multiple types of sorting algorithms
    and using heuristics to guess which algorithm will perform the best, given the
    data (more specifically, it hybridizes insertion and merge sort algorithms).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 两个必需的要素是排序算法和搜索算法。Python列表具有内置的排序算法，使用的是Tim排序。在最佳情况下，Tim排序可以在`O(n)`时间内对列表进行排序（在最坏情况下是`O(n
    log n)`）。它通过利用多种类型的排序算法和使用启发式算法来猜测在给定数据情况下哪种算法表现最佳（更具体地说，它混合了插入排序和归并排序算法），从而实现了这种性能。
- en: Once a list has been sorted, we can find our desired element using a binary
    search ([Example 3-3](#list_binary_search)), which has an average case complexity
    of `O(log n)`. It achieves this by first looking at the middle of the list and
    comparing this value with the desired value. If this midpoint’s value is less
    than our desired value, we consider the right half of the list, and we continue
    halving the list like this until the value is found, or until the value is known
    not to occur in the sorted list. As a result, we do not need to read all values
    in the list, as was necessary for the [linear search](#list_linear_search); instead,
    we read only a small subset of them.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦列表被排序，我们可以使用二分查找（[示例 3-3](#list_binary_search)）找到我们想要的元素，其平均情况下的复杂度为`O(log
    n)`。它通过首先查看列表的中间元素并将其值与所需值进行比较来实现。如果中间点的值小于我们想要的值，我们考虑列表的右半部分，并继续以这种方式对列表进行二分，直到找到值或者知道该值不会出现在排序的列表中。因此，我们不需要读取列表中的所有值，就像对于[线性搜索](#list_linear_search)是必要的那样；相反，我们只需要读取它们的一个小子集。
- en: Example 3-3\. Efficient searching through a sorted list—binary search
  id: totrans-26
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-3\. 通过排序列表进行高效搜索——二分查找
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This method allows us to find elements in a list without resorting to the potentially
    heavyweight solution of a dictionary. This is especially true when the list of
    data that is being operated on is intrinsically sorted. It is more efficient to
    do a binary search on the list to find an object rather than converting your data
    to a dictionary and then doing a lookup on it. Although a dictionary lookup takes
    only `O(1)`, converting the data to a dictionary takes `O(n)` (and a dictionary’s
    restriction of no repeating keys may be undesirable). On the other hand, the binary
    search will take `O(log n)`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法使我们能够在不使用字典这种可能笨重的解决方案的情况下，在列表中查找元素。当操作的数据列表本身就是有序的时候，这一点尤其显著。在列表上执行二分查找以查找对象比将数据转换为字典，然后在字典上进行查找更有效率。尽管字典查找只需`O(1)`时间，但将数据转换为字典需要`O(n)`时间（而且字典不能有重复的键可能是不可取的）。另一方面，二分查找将花费`O(log
    n)`时间。
- en: In addition, the `bisect` module from Python’s standard library simplifies much
    of this process by giving easy methods to add elements into a list while maintaining
    its sorting, in addition to finding elements using a heavily optimized binary
    search. It does this by providing alternative functions that add the element into
    the correct sorted placement. With the list always being sorted, we can easily
    find the elements we are looking for (examples of this can be found in the [documentation
    for the `bisect` module](https://oreil.ly/5ZSb7)). In addition, we can use `bisect`
    to find the closest element to what we are looking for very quickly ([Example 3-4](#list_bisect_example)).
    This can be extremely useful for comparing two datasets that are similar but not
    identical.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，Python标准库中的`bisect`模块通过提供简单的方法将元素添加到列表中并保持其排序，以及使用高度优化的二分查找来查找元素，大大简化了这个过程。它通过提供将元素添加到正确排序位置的替代函数来实现这一点。由于列表始终保持排序，我们可以轻松找到我们正在寻找的元素（可以在[bisect模块的文档](https://oreil.ly/5ZSb7)中找到示例）。此外，我们还可以使用`bisect`快速找到与我们寻找的内容最接近的元素（见[示例 3-4](#list_bisect_example)）。这对比较两个类似但不完全相同的数据集非常有用。
- en: Example 3-4\. Finding close values in a list with the `bisect` module
  id: totrans-30
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-4\. 使用`bisect`模块在列表中查找接近的值
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In general, this touches on a fundamental rule of writing efficient code: pick
    the right data structure and stick with it! Although there may be more efficient
    data structures for particular operations, the cost of converting to those data
    structures may negate any efficiency boost.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，这触及了编写高效代码的基本规则：选择正确的数据结构并坚持使用它！尽管对于特定操作可能存在更高效的数据结构，但转换到这些数据结构的成本可能会抵消任何效率提升。
- en: Lists Versus Tuples
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表与元组的比较
- en: 'If lists and tuples both use the same underlying data structure, what are the
    differences between the two? Summarized, the main differences are as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果列表和元组都使用相同的底层数据结构，它们之间有什么区别？总结来说，主要区别如下：
- en: Lists are *dynamic* arrays; they are mutable and allow for resizing (changing
    the number of elements that are held).
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表是*动态*数组；它们是可变的，并允许调整大小（更改保存的元素数量）。
- en: Tuples are *static* arrays; they are immutable, and the data within them cannot
    be changed after they have been created.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元组是*静态*数组；它们是不可变的，创建后其中的数据不能更改。
- en: Tuples are cached by the Python runtime, which means that we don’t need to talk
    to the kernel to reserve memory every time we want to use one.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元组由Python运行时缓存，这意味着每次使用时我们无需与内核通信来保留内存。
- en: 'These differences outline the philosophical difference between the two: tuples
    are for describing multiple properties of one unchanging thing, and lists can
    be used to store collections of data about completely disparate objects. For example,
    the parts of a telephone number are perfect for a tuple: they won’t change, and
    if they do, they represent a new object or a different phone number. Similarly,
    the coefficients of a polynomial fit a tuple, since different coefficients represent
    a different polynomial. On the other hand, the names of the people currently reading
    this book are better suited for a list: the data is constantly changing both in
    content and in size but is still always representing the same idea.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这些区别揭示了两者之间的哲学差异：元组用于描述一个不变物体的多个属性，而列表可用于存储关于完全不同对象的数据集合。例如，电话号码的各部分非常适合元组：它们不会改变，如果改变了，就代表一个新对象或不同的电话号码。同样地，多项式的系数适合元组，因为不同的系数代表不同的多项式。另一方面，正在阅读本书的人的姓名更适合列表：数据内容和大小都在不断变化，但始终代表相同的概念。
- en: 'It is important to note that both lists and tuples can take mixed types. This
    can, as you will see, introduce quite a bit of overhead and reduce some potential
    optimizations. This overhead can be removed if we force all our data to be of
    the same type. In [Chapter 6](ch06_split_000.xhtml#matrix_computation), we will
    talk about reducing both the memory used and the computational overhead by using
    `numpy`. In addition, tools like the standard library module `array` can reduce
    these overheads for other, nonnumerical situations. This alludes to a major point
    in performant programming that we will touch on in later chapters: generic code
    will be much slower than code specifically designed to solve a particular problem.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，列表和元组都可以接受混合类型的数据。正如你将看到的，这可能会引入相当大的开销，并减少一些潜在的优化。如果我们强制所有数据都是相同类型的，则可以消除这种开销。在[第6章](ch06_split_000.xhtml#matrix_computation)中，我们将讨论通过使用`numpy`来减少内存使用和计算开销。此外，像标准库模块`array`这样的工具可以减少其他非数值情况下的这些开销。这暗示了我们将在后续章节中接触的性能编程的一个重要点：通用代码比专门设计用来解决特定问题的代码要慢得多。
- en: In addition, the immutability of a tuple as opposed to a list, which can be
    resized and changed, makes it a lightweight data structure. This means that there
    isn’t much overhead in memory when storing tuples, and operations with them are
    quite straightforward. With lists, as you will learn, their mutability comes at
    the price of extra memory needed to store them and extra computations needed when
    using them.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，与列表相比不可变的元组使其成为轻量级数据结构。这意味着在存储元组时，内存开销不大，并且对它们的操作非常简单。而对于列表，正如你将学到的那样，它们的可变性是以需要更多的内存来存储它们以及在使用它们时需要更多计算的代价换来的。
- en: Lists as Dynamic Arrays
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态数组列表
- en: 'Once we create a list, we are free to change its contents as needed:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了列表，我们可以自由地根据需要更改其内容：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](Images/1.png)](#co_lists_and_tuples_CO1-1)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_lists_and_tuples_CO1-1)'
- en: As described previously, this operation is `O(1)` because we can find the data
    stored within the zeroth and second elements immediately.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，这个操作的时间复杂度为`O(1)`，因为我们可以立即找到存储在零到第二个元素中的数据。
- en: 'In addition, we can append new data to a list and grow its size:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们可以向列表中追加新数据并增大其大小：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is possible because dynamic arrays support a `resize` operation that increases
    the capacity of the array. When a list of size `N` is first appended to, Python
    must create a new list that is big enough to hold the original `N` items in addition
    to the extra one that is being appended. However, instead of allocating `N + 1`
    items, `M` items are actually allocated, where `M > N`, in order to provide extra
    headroom for future appends. Then the data from the old list is copied to the
    new list, and the old list is destroyed.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是可能的，因为动态数组支持`resize`操作来增加数组的容量。当首次向大小为`N`的列表追加时，Python必须创建一个足够大以容纳原始`N`个项目及额外追加的一个项目的新列表。但是，实际上分配了`M
    > N`个项目，以提供未来追加的额外空间。然后将旧列表中的数据复制到新列表中，并销毁旧列表。
- en: The philosophy is that one append is probably the beginning of many appends,
    and by requesting extra space, we can reduce the number of times this allocation
    must happen and thus the total number of memory copies that are necessary. This
    is important since memory copies can be quite expensive, especially when list
    sizes start growing. [Figure 3-2](#FIG-list-overallocation) shows what this overallocation
    looks like in Python 3.7\. The formula dictating this growth is given in [Example 3-5](#eq_list_M).^([3](ch03.xhtml#idm46122426718264))
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这种策略的哲学是一个追加操作可能是许多追加操作的开端，并且通过请求额外的空间，我们可以减少必须进行的分配次数，从而减少所需的总内存复制次数。这是非常重要的，因为内存复制可能非常昂贵，特别是当列表大小开始增长时。[图3-2](#FIG-list-overallocation)展示了Python
    3.7中这种过度分配的情况。规定这种增长的公式见[例3-5](#eq_list_M)。^([3](ch03.xhtml#idm46122426718264))
- en: '![hpp2 0302](Images/hpp2_0302.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![hpp2 0302](Images/hpp2_0302.png)'
- en: Figure 3-2\. Graph showing how many extra elements are being allocated to a
    list of a particular size. For example, if you create a list with 8,000 elements
    using `append`s, Python will allocate space for about 8,600 elements, overallocating
    600 elements!
  id: totrans-51
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3-2\. 显示了使用`append`创建包含8000个元素的列表时，Python分配了大约8600个元素的空间，多分配了600个元素！
- en: Example 3-5\. List allocation equation in Python 3.7
  id: totrans-52
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 例3-5\. Python 3.7中的列表分配方程
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '| **N** | 0 | 1-4 | 5-8 | 9-16 | 17-25 | 26-35 | 36-46 | … | 991-1120 |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| **N** | 0 | 1-4 | 5-8 | 9-16 | 17-25 | 26-35 | 36-46 | … | 991-1120 |'
- en: '| **M** | 0 | 4 | 8 | 16 | 25 | 35 | 46 | … | 1120 |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| **M** | 0 | 4 | 8 | 16 | 25 | 35 | 46 | … | 1120 |'
- en: As we append data, we utilize the extra space and increase the effective size
    of the list, `N`. As a result, `N` grows as we append new data, until `N == M`.
    At this point, there is no extra space to insert new data into, and we must create
    a *new* list with more extra space. This new list has extra headroom as given
    by the equation in [Example 3-5](#eq_list_M), and we copy the old data into the
    new space.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们添加数据，我们利用额外的空间并增加列表的有效大小 `N`。因此，随着添加新数据，`N` 增长，直到 `N == M`。在这一点上，没有额外的空间来插入新数据，我们必须创建一个
    *新* 列表，其中包含更多的额外空间。这个新列表具有由 [示例 3-5](#eq_list_M) 中的方程给出的额外的头部空间，并且我们将旧数据复制到新空间中。
- en: This sequence of events is shown visually in [Figure 3-3](#FIG-list-append).
    The figure follows the various operations being performed on list `l` in [Example 3-6](#code_list_resize).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这一系列事件在 [图 3-3](#FIG-list-append) 中以可视化方式展示。该图跟随在 [示例 3-6](#code_list_resize)
    中对列表 `l` 执行的各种操作。
- en: '![hpp2 0303](Images/hpp2_0303.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![hpp2 0303](Images/hpp2_0303.png)'
- en: Figure 3-3\. Example of how a list is mutated on multiple appends
  id: totrans-59
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-3\. 列表在多次追加时如何发生变异的示例
- en: Example 3-6\. Resizing a list
  id: totrans-60
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-6\. 调整列表大小
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-62
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注
- en: This extra allocation happens on the first `append`. When a list is directly
    created, as in the preceding example, only the number of elements needed is allocated.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这种额外的分配发生在第一次 `append`。当列表直接创建时，如前面的示例，只分配了所需数量的元素。
- en: 'While the amount of extra headroom allocated is generally quite small, it can
    add up. In [Example 3-7](#memory_time_append_vs_comprehension), we can see that
    even for 100,000 elements, we use 2.7× the memory by building the list with appends
    versus a list comprehension:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然分配的额外头部空间量通常相当小，但它可能会累积起来。在 [示例 3-7](#memory_time_append_vs_comprehension)
    中，我们可以看到即使对于 100,000 个元素，通过使用追加构建列表与使用列表理解相比，我们的内存使用量也增加了 2.7 倍：
- en: Example 3-7\. Memory and time consequences of appends versus list comprehensions
  id: totrans-65
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-7\. 追加与列表理解的内存和时间后果
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The overall runtime is also slower, because of the extra Python statements that
    must be run as well as the cost of reallocating memory. This effect becomes especially
    pronounced when you are maintaining many small lists or when keeping a particularly
    large list. If we are storing 1,000,000 lists, each containing 10 elements, we
    would suppose that 10,000,000 elements’ worth of memory is being used. In actuality,
    however, up to 16,000,000 elements could have been allocated if the `append` operator
    was used to construct the list. Similarly, for a large list of 100,000,000 elements,
    we actually have 112,500,007 elements allocated!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 总体运行时间也较慢，因为必须运行额外的 Python 语句以及重新分配内存的成本。当您维护许多小列表或保留特别大的列表时，这种影响尤为明显。假设我们存储了
    1,000,000 个包含 10 个元素的列表，我们会假定正在使用 10,000,000 个元素的内存。然而，实际上，如果使用 `append` 运算符来构建列表，最多可能会分配
    16,000,000 个元素。同样，对于包含 100,000,000 个元素的大列表，我们实际上分配了 112,500,007 个元素！
- en: Tuples as Static Arrays
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元组作为静态数组
- en: 'Tuples are fixed and immutable. This means that once a tuple is created, unlike
    a list, it cannot be modified or resized:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 元组是固定的且不可变的。这意味着一旦创建了元组，与列表不同，它就不能被修改或调整大小：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'However, although they don’t support resizing, we can concatenate two tuples
    together and form a new tuple. The operation is similar to the `resize` operation
    on lists, but we do not allocate any extra space for the resulting tuple:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尽管它们不支持调整大小，我们可以将两个元组连接在一起并形成一个新的元组。该操作类似于列表上的 `resize` 操作，但我们不会为结果元组分配任何额外的空间：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If we consider this to be comparable to the `append` operation on lists, we
    see that it performs in `O(n)` as opposed to the `O(1)` speed of lists. This is
    because we must allocate and copy the tuple every time something is added to it,
    as opposed to only when our extra headroom ran out for lists. As a result of this,
    there is no in-place `append`-like operation; adding two tuples always returns
    a new tuple that is in a new location in memory.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将其视为对列表的 `append` 操作进行比较，我们会发现它的执行速度为 `O(n)`，而不是列表的 `O(1)` 速度。这是因为每次添加元素时，我们都必须分配和复制元组，而不是只有当列表的额外头部空间用完时才复制。因此，没有类似于
    `append` 的就地操作；添加两个元组始终返回一个新的元组，该元组位于内存中的新位置。
- en: Not storing the extra headroom for resizing has the advantage of using fewer
    resources. A list of size 100,000,000 created with any `append` operation actually
    uses 112,500,007 elements’ worth of memory, while a tuple holding the same data
    will only ever use exactly 100,000,000 elements’ worth of memory. This makes tuples
    lightweight and preferable when data becomes static.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 不为重新调整大小存储额外的空间有利于节省资源。用任何`append`操作创建的大小为100,000,000的列表实际上使用了112,500,007个元素的内存空间，而持有相同数据的元组只会精确地使用100,000,000个元素的内存空间。这使得元组轻量且在数据变为静态时更可取。
- en: Furthermore, even if we create a list *without* `append` (and thus we don’t
    have the extra headroom introduced by an `append` operation), it will *still*
    be larger in memory than a tuple with the same data. This is because lists have
    to keep track of more information about their current state in order to efficiently
    resize. While this extra information is quite small (the equivalent of one extra
    element), it can add up if several million lists are in use.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，即使我们创建一个*没有*`append`（因此没有由`append`操作引入的额外预留空间）的列表，它在内存中仍然比持有相同数据的元组大。这是因为列表必须跟踪关于它们当前状态的更多信息，以便高效地调整大小。虽然这些额外信息非常小（相当于一个额外的元素），但如果有数百万个列表在使用，这些信息会累积起来。
- en: 'Another benefit of the static nature of tuples is something Python does in
    the background: resource caching. Python is garbage collected, which means that
    when a variable isn’t used anymore, Python frees the memory used by that variable,
    giving it back to the operating system for use in other applications (or for other
    variables). For tuples of sizes 1–20, however, when they are no longer in use,
    the space isn’t immediately given back to the system: up to 20,000 of each size
    are saved for future use. This means that when a new tuple of that size is needed
    in the future, we don’t need to communicate with the operating system to find
    a region in memory to put the data into, since we have a reserve of free memory
    already. However, this also means that the Python process will have some extra
    memory overhead.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 元组静态特性的另一个好处是Python在后台进行的资源缓存。Python具有垃圾回收功能，这意味着当变量不再使用时，Python会释放该变量使用的内存，并将其归还给操作系统供其他应用程序（或其他变量）使用。然而，对于大小为1–20的元组，当它们不再使用时，空间并不会立即归还给系统：每个大小的元组最多保存20,000个以供将来使用。这意味着当将来需要一个这种大小的新元组时，我们不需要与操作系统通信来找到一个内存区域来放置数据，因为我们已经有了一定的空闲内存储备。然而，这也意味着Python进程会有一些额外的内存开销。
- en: 'While this may seem like a small benefit, it is one of the fantastic things
    about tuples: they can be created easily and quickly since they can avoid communications
    with the operating system, which can cost your program quite a bit of time. [Example 3-8](#code_tuple_vs_list_init)
    shows that instantiating a list can be 5.1× slower than instantiating a tuple—which
    can add up quickly if this is done in a fast loop!'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这可能看起来是一个小优点，但这是元组的奇妙之处之一：它们可以很容易快速地创建，因为它们可以避免与操作系统的通信，而这可能会让你的程序付出相当多的时间成本。[示例 3-8](#code_tuple_vs_list_init)表明，实例化一个列表可能比实例化一个元组慢5.1倍——如果在快速循环中执行此操作，这些时间成本可能会迅速累积！
- en: Example 3-8\. Instantiation timings for lists versus tuples
  id: totrans-78
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-8\. 列表与元组的实例化时间对比
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Wrap-Up
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Lists and tuples are fast and low-overhead objects to use when your data already
    has an intrinsic ordering to it. This intrinsic ordering allows you to sidestep
    the search problem in these structures: if the ordering is known beforehand, lookups
    are `O(1)`, avoiding an expensive `O(n)` linear search. While lists can be resized,
    you must take care to properly understand how much overallocation is happening
    to ensure that the dataset can still fit in memory. On the other hand, tuples
    can be created quickly and without the added overhead of lists, at the cost of
    not being modifiable. In [“Aren’t Python Lists Good Enough?”](ch06_split_000.xhtml#arent_python_lists_good_enough),
    we discuss how to preallocate lists to alleviate some of the burden regarding
    frequent appends to Python lists, and we look at other optimizations that can
    help manage these problems.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 列表和元组是在数据本身已经有内在顺序时使用的快速且低开销的对象。这种内在顺序使得你可以在这些结构中避开搜索问题：如果顺序事先已知，查找是`O(1)`，避免了昂贵的`O(n)`线性搜索。虽然列表可以调整大小，但你必须小心理解过度分配量，以确保数据集仍然可以适应内存。另一方面，元组可以快速创建，而且没有列表的额外开销，代价是不可修改性。在[“Python列表足够好吗？”](ch06_split_000.xhtml#arent_python_lists_good_enough)中，我们讨论了如何预先分配列表以减轻对Python列表频繁附加的一些负担，并查看了其他可以帮助解决这些问题的优化方法。
- en: In the next chapter, we go over the computational properties of dictionaries,
    which solve the search/lookup problems with unordered data at the cost of overhead.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论字典的计算性质，它解决了无序数据的搜索/查找问题，但代价是额外开销。
- en: ^([1](ch03.xhtml#idm46122430197320-marker)) `O(1)` uses *Big-Oh Notation* to
    denote how efficient an algorithm is. A good introduction to the topic can be
    found in [this *dev.to* post by Sarah Chima](https://oreil.ly/qKUwZ) or in the
    introductory chapters of *Introduction to Algorithms* by Thomas H. Cormen et al.
    (MIT Press).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch03.xhtml#idm46122430197320-marker)) `O(1)`使用*大O符号*来表示算法的效率。关于这个主题的良好介绍可以在[Sarah
    Chima的这篇*dev.to*文章](https://oreil.ly/qKUwZ)或者*Thomas H. Cormen*等人的《算法导论》（MIT出版社）的介绍章节中找到。
- en: ^([2](ch03.xhtml#idm46122430185928-marker)) In 64-bit computers, having 12 KB
    of memory gives you 725 buckets, and having 52 GB of memory gives you 3,250,000,000
    buckets!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch03.xhtml#idm46122430185928-marker)) 在64位计算机上，拥有12 KB的内存可以给你725个桶，而拥有52
    GB的内存可以给你3,250,000,000个桶！
- en: ^([3](ch03.xhtml#idm46122426718264-marker)) The code responsible for this overallocation
    can be seen in the Python source code in [Objects/listobject.c:list_resize](https://bit.ly/3bFR5hd).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch03.xhtml#idm46122426718264-marker)) 负责这种过度分配的代码可以在Python源代码中的[Objects/listobject.c:list_resize](https://bit.ly/3bFR5hd)中看到。
