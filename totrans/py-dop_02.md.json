["```py\nIn [1]: file_path = 'bookofdreams.txt'\nIn [2]: open_file = open(file_path, 'r')\nIn [3]: text = open_file.read()\nIn [4]: len(text)\nOut[4]: 476909\n\nIn [5]: text[56]\nOut[5]: 's'\n\nIn [6]: open_file\nOut[6]: <_io.TextIOWrapper name='bookofdreams.txt' mode='r' encoding='UTF-8'>\n\nIn [7]: open_file.close()\n```", "```py\nIn [8]: open_file = open(file_path, 'r')\nIn [9]: text = open_file.readlines()\nIn [10]: len(text)\nOut[10]: 8796\n\nIn [11]: text[100]\nOut[11]: 'science, when it admits the possibility of occasional hallucinations\\n'\n\nIn [12]: open_file.close()\n```", "```py\nIn [13]: with open(file_path, 'r') as open_file:\n    ...:     text = open_file.readlines()\n    ...:\n\nIn [14]: text[101]\nOut[14]: 'in the sane and healthy, also admits, of course, the existence of\\n'\n\nIn [15]: open_file.closed\nOut[15]: True\n```", "```py\nIn [15]: file_path = 'bookofdreamsghos00lang.pdf'\nIn [16]: with open(file_path, 'rb') as open_file:\n    ...:     btext = open_file.read()\n    ...:\n\nIn [17]: btext[0]\nOut[17]: 37\n\nIn [18]: btext[:25]\nOut[18]: b'%PDF-1.5\\n%\\xec\\xf5\\xf2\\xe1\\xe4\\xef\\xe3\\xf5\\xed\\xe5\\xee\\xf4\\n18'\n```", "```py\nIn [19]: text = '''export STAGE=PROD\n ...: export TABLE_ID=token-storage-1234'''\n\nIn [20]: with open('.envrc', 'w') as opened_file:\n    ...:     opened_file.write(text)\n    ...:\n\nIn [21]: !cat .envrc\nexport STAGE=PROD\nexport TABLE_ID=token-storage-1234\n```", "```py\nIn [35]: import pathlib\n\nIn [36]: path = pathlib.Path(\n           \"/Users/kbehrman/projects/autoscaler/check_pending.py\")\n\nIn [37]: path.read_text()\n```", "```py\nIn [38]: path = pathlib.Path(\"/Users/kbehrman/sp.config\")\n\nIn [39]: path.write_text(\"LOG:DEBUG\")\nOut[39]: 9\n\nIn [40]: path = pathlib.Path(\"/Users/kbehrman/sp\")\nOut[41]: 8\n```", "```py\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": {\n        \"Effect\": \"Allow\",\n        \"Action\": \"service-prefix:action-name\",\n        \"Resource\": \"*\",\n        \"Condition\": {\n            \"DateGreaterThan\": {\"aws:CurrentTime\": \"2017-07-01T00:00:00Z\"},\n            \"DateLessThan\": {\"aws:CurrentTime\": \"2017-12-31T23:59:59Z\"}\n        }\n    }\n}\n```", "```py\nIn [8]: with open('service-policy.json', 'r') as opened_file:\n   ...:     policy = opened_file.readlines()\n   ...:\n   ...:\n```", "```py\nIn [9]: print(policy)\n['{\\n',\n '    \"Version\": \"2012-10-17\",\n\\n',\n '    \"Statement\": {\\n',\n '        \"Effect\": \"Allow\",\n\\n',\n '        \"Action\": \"service-prefix:action-name\",\n\\n',\n '        \"Resource\": \"*\",\n\\n',\n '        \"Condition\": {\\n',\n '            \"DateGreaterThan\": {\"aws:CurrentTime\": \"2017-07-01T00:00:00Z\"},\n\\n',\n '            \"DateLessThan\": {\"aws:CurrentTime\": \"2017-12-31T23:59:59Z\"}\\n',\n '        }\\n',\n '    }\\n',\n '}\\n']\n```", "```py\nIn [10]: import json\n\nIn [11]: with open('service-policy.json', 'r') as opened_file:\n    ...:     policy = json.load(opened_file)\n    ...:\n    ...:\n    ...:\n```", "```py\nIn [13]: from pprint import pprint\n\nIn [14]: pprint(policy)\n{'Statement': {'Action': 'service-prefix:action-name',\n               'Condition': {'DateGreaterThan':\n                                  {'aws:CurrentTime': '2017-07-01T00:00:00Z'},\n                             'DateLessThan':\n                                  {'aws:CurrentTime': '2017-12-31T23:59:59Z'}},\n               'Effect': 'Allow',\n               'Resource': '*'},\n 'Version': '2012-10-17'}\n```", "```py\nIn [15]: policy['Statement']['Resource'] = 'S3'\n\nIn [16]: pprint(policy)\n{'Statement': {'Action': 'service-prefix:action-name',\n               'Condition': {'DateGreaterThan':\n                                {'aws:CurrentTime': '2017-07-01T00:00:00Z'},\n                             'DateLessThan':\n                                {'aws:CurrentTime': '2017-12-31T23:59:59Z'}},\n               'Effect': 'Allow',\n               'Resource': 'S3'},\n 'Version': '2012-10-17'}\n```", "```py\nIn [17]: with open('service-policy.json', 'w') as opened_file:\n    ...:     policy = json.dump(policy, opened_file)\n    ...:\n    ...:\n    ...:\n```", "```py\n---\n- hosts: webservers\n  vars:\n    http_port: 80\n    max_clients: 200\n  remote_user: root\n  tasks:\n  - name: ensure apache is at the latest version\n    yum:\n      name: httpd\n      state: latest\n  ...\n```", "```py\n$ pip install PyYAML\n```", "```py\nIn [18]: import yaml\n\nIn [19]: with open('verify-apache.yml', 'r') as opened_file:\n    ...:     verify_apache = yaml.safe_load(opened_file)\n    ...:\n```", "```py\nIn [20]: pprint(verify_apache)\n[{'handlers': [{'name': 'restart apache',\n                'service': {'name': 'httpd', 'state': 'restarted'}}],\n  'hosts': 'webservers',\n  'remote_user': 'root',\n  'tasks': [{'name': 'ensure apache is at the latest version',\n             'yum': {'name': 'httpd', 'state': 'latest'}},\n            {'name': 'write the apache config file',\n             'notify': ['restart apache'],\n             'template': {'dest': '/etc/httpd.conf', 'src': '/srv/httpd.j2'}},\n            {'name': 'ensure apache is running',\n             'service': {'name': 'httpd', 'state': 'started'}}],\n  'vars': {'http_port': 80, 'max_clients': 200}}]\n```", "```py\nIn [22]: with open('verify-apache.yml', 'w') as opened_file:\n    ...:     yaml.dump(verify_apache, opened_file)\n    ...:\n    ...:\n    ...:\n```", "```py\nIn [1]: import xml.etree.ElementTree as ET\nIn [2]: tree = ET.parse('http_feeds.feedburner.com_oreilly_radar_atom.xml')\n\nIn [3]: root = tree.getroot()\n\nIn [4]: root\nOut[4]: <Element '{http://www.w3.org/2005/Atom}feed' at 0x11292c958>\n```", "```py\nIn [5]: for child in root:\n   ...:     print(child.tag, child.attrib)\n   ...:\n{http://www.w3.org/2005/Atom}title {}\n{http://www.w3.org/2005/Atom}id {}\n{http://www.w3.org/2005/Atom}updated {}\n{http://www.w3.org/2005/Atom}subtitle {}\n{http://www.w3.org/2005/Atom}link {'href': 'https://www.oreilly.com'}\n{http://www.w3.org/2005/Atom}link {'rel': 'hub',\n                                   'href': 'http://pubsubhubbub.appspot.com/'}\n{http://www.w3.org/2003/01/geo/wgs84_pos#}long {}\n{http://rssnamespace.org/feedburner/ext/1.0}emailServiceId {}\n...\n```", "```py\nIn [108]: ns = {'default':'http://www.w3.org/2005/Atom'}\nIn [106]: authors = root.findall(\"default:entry/default:author/default:name\", ns)\n\nIn [107]: for author in authors:\n     ...:     print(author.text)\n     ...:\nNat Torkington\nVM Brasseur\nAdam Jacob\nRoger Magoulas\nPete Skomoroch\nAdrian Cockcroft\nBen Lorica\nNat Torkington\nAlison McCauley\nTiffani Bell\nArun Gupta\n```", "```py\nIn [16]: import csv\nIn [17]: file_path = '/Users/kbehrman/Downloads/registered_user_count_ytd.csv'\n\nIn [18]: with open(file_path, newline='') as csv_file:\n    ...:     off_reader = csv.reader(csv_file, delimiter=',')\n    ...:     for _ in range(5):\n    ...:         print(next(off_reader))\n    ...:\n['Date', 'PreviousUserCount', 'UserCountTotal', 'UserCountDay']\n['2014-01-02', '61', '5336', '5275']\n['2014-01-03', '42', '5378', '5336']\n['2014-01-04', '26', '5404', '5378']\n['2014-01-05', '65', '5469', '5404']\n```", "```py\nIn [54]: import pandas as pd\n\nIn [55]: df = pd.read_csv('sample-data.csv')\n\nIn [56]: type(df)\nOut[56]: pandas.core.frame.DataFrame\n```", "```py\nIn [57]: df.head(3)\nOut[57]:\n   Attributes     open       high        low      close     volume\n0     Symbols        F          F          F          F          F\n1        date      NaN        NaN        NaN        NaN        NaN\n2  2018-01-02  11.3007    11.4271    11.2827    11.4271   20773320\n```", "```py\nIn [58]: df.describe()\nOut[58]:\n        Attributes    open      high    low     close     volume\ncount          357     356       356    356       356        356\nunique         357     290       288    297       288        356\ntop     2018-10-18  10.402    8.3363   10.2    9.8111   36298597\nfreq             1       5         4      3         4          1\n```", "```py\nIn [59]: df['close']\nOut[59]:\n0            F\n1          NaN\n2      11.4271\n3      11.5174\n4      11.7159\n        ...\n352       9.83\n353       9.78\n354       9.71\n355       9.74\n356       9.52\nName: close, Length: 357, dtype: object\n```", "```py\n<IP Address> <Client Id> <User Id> <Time> <Request> <Status> <Size>\n```", "```py\n127.0.0.1 - swills [13/Nov/2019:14:43:30 -0800] \"GET /assets/234 HTTP/1.0\" 200 2326\n```", "```py\nIn [1]: line = '127.0.0.1 - rj [13/Nov/2019:14:43:30] \"GET HTTP/1.0\" 200'\n\nIn [2]: re.search(r'(?P<IP>\\d+\\.\\d+\\.\\d+\\.\\d+)', line)\nOut[2]: <re.Match object; span=(0, 9), match='127.0.0.1'>\n\nIn [3]: m = re.search(r'(?P<IP>\\d+\\.\\d+\\.\\d+\\.\\d+)', line)\n\nIn [4]: m.group('IP')\nOut[4]: '127.0.0.1'\n```", "```py\nIn [5]: r = r'\\[(?P<Time>\\d\\d/\\w{3}/\\d{4}:\\d{2}:\\d{2}:\\d{2})\\]'\n\nIn [6]: m = re.search(r, line)\n\nIn [7]: m.group('Time')\nOut[7]: '13/Nov/2019:14:43:30'\n```", "```py\nIn [8]:  r = r'(?P<IP>\\d+\\.\\d+\\.\\d+\\.\\d+)'\n\nIn [9]: r += r' - (?P<User>\\w+) '\n\nIn [10]: r += r'\\[(?P<Time>\\d\\d/\\w{3}/\\d{4}:\\d{2}:\\d{2}:\\d{2})\\]'\n\nIn [11]: r += r' (?P<Request>\".+\")'\n\nIn [12]:  m = re.search(r, line)\n\nIn [13]: m.group('IP')\nOut[13]: '127.0.0.1'\n\nIn [14]: m.group('User')\nOut[14]: 'rj'\n\nIn [15]: m.group('Time')\nOut[15]: '13/Nov/2019:14:43:30'\n\nIn [16]: m.group('Request')\nOut[16]: '\"GET HTTP/1.0\"'\n```", "```py\nIn [62]: r = r'(?P<IP>\\d+\\.\\d+\\.\\d+\\.\\d+)'\nIn [63]: r += r'- (?P<User>\\w+)'\nIn [64]: r += r'\\[(?P<Time>08/Nov/\\d{4}:\\d{2}:\\d{2}:\\d{2} [-+]\\d{4})\\]'\nIn [65]: r += r' (?P<Request>\"GET .+\")'\n```", "```py\nIn [66]: matched = re.finditer(r, access_log)\n\nIn [67]: for m in matched:\n    ...:     print(m.group('IP'))\n    ...:\n127.0.0.1\n342.3.2.33\n```", "```py\nIn [23]: with open('big-data.txt', 'r') as source_file:\n    ...:     with open('big-data-corrected.txt', 'w') as target_file:\n    ...:         for line in source_file:\n    ...:             target_file.write(line)\n    ...:\n```", "```py\nIn [46]: def line_reader(file_path):\n    ...:     with open(file_path, 'r') as source_file:\n    ...:         for line in source_file:\n    ...:             yield line\n    ...:\n\nIn [47]: reader = line_reader('big-data.txt')\n\nIn [48]: with open('big-data-corrected.txt', 'w') as target_file:\n    ...:     for line in reader:\n    ...:         target_file.write(line)\n    ...:\n```", "```py\nIn [27]: with open('bb141548a754113e.jpg', 'rb') as source_file:\n    ...:     while True:\n    ...:         chunk = source_file.read(1024)\n    ...:         if chunk:\n    ...:             process_data(chunk)\n    ...:         else:\n    ...:             break\n    ...:\n```", "```py\nIn [62]: import hashlib\n\nIn [63]: secret = \"This is the password or document text\"\n\nIn [64]: bsecret = secret.encode()\n\nIn [65]: m = hashlib.md5()\n\nIn [66]: m.update(bsecret)\n\nIn [67]: m.digest()\nOut[67]: b' \\xf5\\x06\\xe6\\xfc\\x1c\\xbe\\x86\\xddj\\x96C\\x10\\x0f5E'\n```", "```py\nIn [1]: from cryptography.fernet import Fernet\n\nIn [2]: key = Fernet.generate_key()\n\nIn [3]: key\nOut[3]: b'q-fEOs2JIRINDR8toMG7zhQvVhvf5BRPx3mj5Atk5B8='\n```", "```py\nIn [4]: f = Fernet(key)\n\nIn [5]: message = b\"Secrets go here\"\n\nIn [6]: encrypted = f.encrypt(message)\n\nIn [7]: encrypted\nOut[7]: b'gAAAAABdPyg4 ... plhkpVkC8ezOHaOLIA=='\n```", "```py\nIn [1]: f = Fernet(key)\n\nIn [2]: f.decrypt(encrypted)\nOut[2]: b'Secrets go here'\n```", "```py\nIn [1]: from cryptography.hazmat.backends import default_backend\n\nIn [2]: from cryptography.hazmat.primitives.asymmetric import rsa\n\nIn [3]: private_key = rsa.generate_private_key(public_exponent=65537,\n                                               key_size=4096,\n                                               backend=default_backend())\n\nIn [4]: private_key\nOut[4]: <cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey at 0x10d377c18>\n\nIn [5]: public_key = private_key.public_key\n\nIn [6]: public_key = private_key.public_key()\n\nIn [7]: public_key\nOut[7]: <cryptography.hazmat.backends.openssl.rsa._RSAPublicKey at 0x10da642b0>\n```", "```py\nIn [8]: message = b\"More secrets go here\"\n\nIn [9]: from cryptography.hazmat.primitives.asymmetric import padding\nIn [11]: from cryptography.hazmat.primitives import hashes\n\nIn [12]: encrypted = public_key.encrypt(message,\n    ...:    padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()),\n    ...:    algorithm=hashes.SHA256(),\n    ...:    label=None))\n```", "```py\nIn [13]: decrypted = private_key.decrypt(encrypted,\n    ...:    padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()),\n    ...:    algorithm=hashes.SHA256(),\n    ...:    label=None))\n\nIn [14]: decrypted\nOut[14]: b'More secrets go here'\n```", "```py\nIn [1]: os.listdir('.') ![1](assets/1.png)\nOut[1]: ['__init__.py', 'os_path_example.py']\n\nIn [2]: os.rename('_crud_handler', 'crud_handler') ![2](assets/2.png)\n\nIn [3]: os.chmod('my_script.py', 0o777) ![3](assets/3.png)\n\nIn [4]: os.mkdir('/tmp/holding') ![4](assets/4.png)\n\nIn [5]: os.makedirs('/Users/kbehrman/tmp/scripts/devops') ![5](assets/5.png)\n\nIn [6]: os.remove('my_script.py') ![6](assets/6.png)\n\nIn [7]: os.rmdir('/tmp/holding') ![7](assets/7.png)\n\nIn [8]: os.removedirs('/Users/kbehrman/tmp/scripts/devops') ![8](assets/8.png)\n\nIn [9]: os.stat('crud_handler') ![9](assets/9.png)\nOut[9]: os.stat_result(st_mode=16877,\n                       st_ino=4359290300,\n                       st_dev=16777220,\n                       st_nlink=18,\n                       st_uid=501,\n                       st_gid=20,\n                       st_size=576,\n                       st_atime=1544115987,\n                       st_mtime=1541955837,\n                       st_ctime=1567266289)\n```", "```py\nIn [1]: import os\n\nIn [2]: cur_dir = os.getcwd() ![1](assets/1.png)\n\nIn [3]: cur_dir\nOut[3]: '/Users/kbehrman/Google-Drive/projects/python-devops/samples/chapter4'\n\nIn [4]: os.path.split(cur_dir) ![2](assets/2.png)\nOut[4]: ('/Users/kbehrman/Google-Drive/projects/python-devops/samples',\n         'chapter4')\n\nIn [5]: os.path.dirname(cur_dir) ![3](assets/3.png)\nOut[5]: '/Users/kbehrman/Google-Drive/projects/python-devops/samples'\n\nIn [6]: os.path.basename(cur_dir) ![4](assets/4.png)\nOut[6]: 'chapter4'\n```", "```py\nIn [7]: while os.path.basename(cur_dir):\n   ...:     cur_dir = os.path.dirname(cur_dir)\n   ...:     print(cur_dir)\n   ...:\n/Users/kbehrman/projects/python-devops/samples\n/Users/kbehrman/projects/python-devops\n/Users/kbehrman/projects\n/Users/kbehrman\n/Users\n/\n```", "```py\ndef find_rc(rc_name=\".examplerc\"):\n\n    # Check for Env variable\n    var_name = \"EXAMPLERC_DIR\"\n    if var_name in os.environ: ![1](assets/1.png)\n        var_path = os.path.join(f\"${var_name}\", rc_name) ![2](assets/2.png)\n        config_path = os.path.expandvars(var_path) ![3](assets/3.png)\n        print(f\"Checking {config_path}\")\n        if os.path.exists(config_path): ![4](assets/4.png)\n            return config_path\n\n    # Check the current working directory\n    config_path = os.path.join(os.getcwd(), rc_name)  ![5](assets/5.png)\n    print(f\"Checking {config_path}\")\n    if os.path.exists(config_path):\n        return config_path\n\n    # Check user home directory\n    home_dir = os.path.expanduser(\"~/\")  ![6](assets/6.png)\n    config_path = os.path.join(home_dir, rc_name)\n    print(f\"Checking {config_path}\")\n    if os.path.exists(config_path):\n        return config_path\n\n    # Check Directory of This File\n    file_path = os.path.abspath(__file__) ![7](assets/7.png)\n    parent_path = os.path.dirname(file_path) ![8](assets/8.png)\n    config_path = os.path.join(parent_path, rc_name)\n    print(f\"Checking {config_path}\")\n    if os.path.exists(config_path):\n        return config_path\n\n    print(f\"File {rc_name} has not been found\")\n```", "```py\n#!/usr/bin/env python\n\nimport fire\nimport os\n\ndef walk_path(parent_path):\n    print(f\"Checking: {parent_path}\")\n    childs = os.listdir(parent_path) ![1](assets/1.png)\n\n    for child in childs:\n        child_path = os.path.join(parent_path, child) ![2](assets/2.png)\n        if os.path.isfile(child_path): ![3](assets/3.png)\n            last_access = os.path.getatime(child_path) ![4](assets/4.png)\n            size = os.path.getsize(child_path) ![5](assets/5.png)\n            print(f\"File: {child_path}\")\n            print(f\"\\tlast accessed: {last_access}\")\n            print(f\"\\tsize: {size}\")\n        elif os.path.isdir(child_path): ![6](assets/6.png)\n            walk_path(child_path) ![7](assets/7.png)\n\nif __name__ == '__main__':\n    fire.Fire()\n```", "```py\ndef walk_path(parent_path):\n    for parent_path, directories, files in os.walk(parent_path):\n        print(f\"Checking: {parent_path}\")\n        for file_name in files:\n            file_path = os.path.join(parent_path, file_name)\n            last_access = os.path.getatime(file_path)\n            size = os.path.getsize(file_path)\n            print(f\"File: {file_path}\")\n            print(f\"\\tlast accessed: {last_access}\")\n            print(f\"\\tsize: {size}\")\n```", "```py\ndef find_rc(rc_name=\".examplerc\"):\n\n    # Check for Env variable\n    var_name = \"EXAMPLERC_DIR\"\n    example_dir = os.environ.get(var_name) ![1](assets/1.png)\n    if example_dir:\n        dir_path = pathlib.Path(example_dir) ![2](assets/2.png)\n        config_path = dir_path / rc_name ![3](assets/3.png)\n        print(f\"Checking {config_path}\")\n        if config_path.exists(): ![4](assets/4.png)\n            return config_path.as_postix() ![5](assets/5.png)\n\n    # Check the current working directory\n    config_path = pathlib.Path.cwd() / rc_name ![6](assets/6.png)\n    print(f\"Checking {config_path}\")\n    if config_path.exists():\n        return config_path.as_postix()\n\n    # Check user home directory\n    config_path = pathlib.Path.home() / rc_name ![7](assets/7.png)\n    print(f\"Checking {config_path}\")\n    if config_path.exists():\n        return config_path.as_postix()\n\n    # Check Directory of This File\n    file_path = pathlib.Path(__file__).resolve() ![8](assets/8.png)\n    parent_path = file_path.parent ![9](assets/9.png)\n    config_path = parent_path / rc_name\n    print(f\"Checking {config_path}\")\n    if config_path.exists():\n        return config_path.as_postix()\n\n    print(f\"File {rc_name} has not been found\")\n```"]