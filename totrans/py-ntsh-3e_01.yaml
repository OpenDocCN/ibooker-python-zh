- en: Chapter 1\. Introduction to Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章 介绍 Python
- en: Python is a well-established general-purpose programming language, first released
    by its creator, Guido van Rossum, in 1991\. This stable and mature language is
    high-level, dynamic, object-oriented, and cross-platform—all very attractive characteristics.
    Python runs on macOS, most current Unix variants including Linux, Windows, and,
    with some tweaks, mobile platforms.^([1](ch01.xhtml#ch01fn4))
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种经过良好建立的通用编程语言，由其创始人 Guido van Rossum 于 1991 年首次发布。这种稳定成熟的高级动态面向对象的跨平台语言具有非常吸引人的特性。Python
    可以运行在 macOS、包括 Linux、Windows 在内的大多数当前 Unix 变体，以及经过一些调整后的移动平台。^([1](ch01.xhtml#ch01fn4))
- en: 'Python offers high productivity for all phases of the software life cycle:
    analysis, design, prototyping, coding, testing, debugging, tuning, documentation,
    and, of course, maintenance. The language’s popularity has seen steadily increasing
    growth for many years, becoming the [TIOBE index](https://oreil.ly/qxdeK) leader
    in October 2021\. Today, familiarity with Python is a plus for every programmer:
    it has snuck into most niches, with useful roles to play in any software solution.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Python 在软件生命周期的所有阶段（分析、设计、原型、编码、测试、调试、调优、文档编写和当然还有维护）都能提供高生产力。多年来，这种语言的流行度稳步增长，2021
    年 10 月成为 [TIOBE 指数](https://oreil.ly/qxdeK) 领导者。如今，对 Python 的熟悉对每位程序员来说都是一个优势：它已经渗透到大多数领域，在任何软件解决方案中都能发挥有用的作用。
- en: Python provides a unique mix of elegance, simplicity, practicality, and sheer
    power. You’ll quickly become productive with Python, thanks to its consistency
    and regularity, its rich standard library, and the many third-party packages and
    tools that are readily available for it. Python is easy to learn, so it is quite
    suitable if you are new to programming, yet is also powerful enough for the most
    sophisticated expert.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Python 提供了优雅、简洁、实用和强大的独特结合。由于其一贯性和规律性、丰富的标准库以及众多第三方包和工具的可用性，你将会很快在 Python 上变得高效率。Python
    容易学习，因此如果你是新手，它非常适合，但它也足够强大，可以满足最复杂专家的需求。
- en: The Python Language
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 语言
- en: The Python language, while not minimalist, is spare, for good pragmatic reasons.
    Once a language offers one good way to express a design, adding other ways has,
    at best, modest benefits; the cost of language complexity, though, grows more
    than linearly with the number of features. A complicated language is harder to
    learn and master (and to implement efficiently and without bugs) than a simpler
    one. Complications and quirks in a language hamper productivity in software development,
    particularly in large projects, where many developers cooperate and, often, maintain
    code originally written by others.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Python 语言虽然不是极简主义的，但出于良好的实用原因而简洁。一种语言一旦提供了表达设计的良好方式，增加其他方式的好处最多是有限的；语言复杂度的成本却不仅线性增长，尤其是特性数量增加时更为明显。复杂的语言比简单的语言更难学习和掌握（也更难高效实现和无
    bug 地实施），在软件开发中尤其如此，特别是在许多开发者合作，并经常维护原本由他人编写的代码的大型项目中。
- en: Python is fairly simple, but not simplistic. It adheres to the idea that, if
    a language behaves a certain way in some contexts, it should ideally work similarly
    in all contexts. Python follows the principle that a language should not have
    “convenient” shortcuts, special cases, ad hoc exceptions, overly subtle distinctions,
    or mysterious and tricky under-the-covers optimizations. A good language, like
    any other well-designed artifact, must balance general principles with taste,
    common sense, and a lot of practicality.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Python 相当简单，但不是简单化。它遵循一种理念：如果一种语言在某些情境下表现一定的方式，那么在所有情境下都应该理想地以相似的方式工作。Python
    遵循的原则是语言不应该有“方便”的快捷方式、特例、临时例外、过于微妙的区别，或神秘和棘手的底层优化。一种好的语言，像任何其他设计良好的工件一样，必须在通用原则、品味、常识和大量实用性之间取得平衡。
- en: 'Python is a general-purpose programming language: its traits are useful in
    almost any area of software development. There is no area where Python cannot
    be part of a solution. “Part” is important here; while many developers find that
    Python fills all of their needs, it does not have to stand alone. Python programs
    can cooperate with a variety of other software components, making it the right
    language for gluing together components in other languages. A design goal of the
    language is, and has long been, to “play well with others.”'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种通用编程语言：它的特性几乎在软件开发的任何领域都非常有用。没有任何领域是 Python 不能成为解决方案的一部分的。这里“一部分”很重要；尽管许多开发者发现
    Python 能够满足他们的所有需求，但它并不必须单打独斗。Python 程序可以与多种其他软件组件合作，使其成为在其他语言中粘合组件的正确语言。语言的一个设计目标是长久以来一直是“与他人和谐相处”。
- en: Python is a very high-level language (VHLL). This means that it uses a higher
    level of abstraction, conceptually further away from the underlying machine, than
    classic compiled languages such as C, C++, and Rust, traditionally called “high-level
    languages.” Python is simpler, faster to process (both for humans and for tools),
    and more regular than classic high-level languages. This affords high programmer
    productivity, making Python a strong development tool. Good compilers for classic
    compiled languages can generate binary code that runs faster than Python. In most
    cases, however, the performance of Python-coded applications is sufficient. When
    it isn’t, apply the optimization techniques covered in [“Optimization”](ch17.xhtml#optimization)
    to improve your program’s performance while keeping the benefit of high productivity.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种非常高级的语言（VHLL）。这意味着它使用更高级的抽象级别，概念上比传统的编译语言如 C、C++ 和 Rust 更远离底层机器。“高级”在这里指的是这种概念。Python
    比经典的高级语言更简单，更快速（无论是对人还是对工具），并且更规则。这提高了程序员的生产力，使 Python 成为强大的开发工具。对于经典编译语言，优秀的编译器可以生成比
    Python 更快运行的二进制代码。然而，在大多数情况下，Python 编写的应用程序的性能是足够的。当不够时，可以应用 [“优化”](ch17.xhtml#optimization)
    中涵盖的优化技术来提高程序的性能，同时保持高生产力的好处。
- en: In terms of language level, Python is comparable to other powerful VHLLs like
    JavaScript, Ruby, and Perl. The advantages of simplicity and regularity, however,
    remain on Python’s side.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 就语言水平而言，Python 可与 JavaScript、Ruby 和 Perl 等其他强大的 VHLLs 相媲美。然而，简单性和规则性的优势仍然在 Python
    的一边。
- en: Python is an object-oriented programming language, but it lets you program in
    both object-oriented and procedural styles, with a touch of functional programming
    too, mixing and matching as your application requires. Python’s object-oriented
    features are conceptually similar to those of C++ but simpler to use.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种面向对象的编程语言，但它允许你以面向对象和过程化的风格编程，并且还可以根据应用程序的要求混合和匹配功能式编程。Python 的面向对象特性在概念上与
    C++ 相似，但使用起来更简单。
- en: The Python Standard Library and Extension Modules
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 标准库和扩展模块
- en: 'There is more to Python programming than just the language: the standard library
    and other extension modules are almost as important for Python use as the language
    itself. The Python standard library supplies many well-designed, solid Python
    modules for convenient reuse. It includes modules for such tasks as representing
    data, processing text, interacting with the operating system and filesystem, and
    web programming, and works on all platforms supported by Python.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Python 编程不仅仅是语言本身：标准库和其他扩展模块对于 Python 的使用几乎与语言本身一样重要。Python 标准库提供了许多设计良好、可靠的
    Python 模块，方便重复使用。它包括用于表示数据、处理文本、与操作系统和文件系统交互、以及 web 编程等任务的模块，并且可以在 Python 支持的所有平台上运行。
- en: Extension modules, from the standard library or elsewhere, let Python code access
    functionality supplied by the underlying operating system or other software components,
    such as graphical user interfaces (GUIs), databases, and networks. Extensions
    also afford great speed in computationally intensive tasks such as XML parsing
    and numeric array computations. Extension modules that are not coded in Python,
    however, do not necessarily enjoy the same cross-platform portability as pure
    Python code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展模块来自标准库或其他地方，让 Python 代码可以访问由底层操作系统或其他软件组件提供的功能，如图形用户界面（GUI）、数据库和网络。扩展模块还在计算密集型任务（如
    XML 解析和数值数组计算）中提供了很高的速度。然而，不是用 Python 编写的扩展模块并不一定具有与纯 Python 代码相同的跨平台可移植性。
- en: You can write extension modules in lower-level languages to optimize performance
    for small, computationally intensive parts that you originally prototyped in Python.
    You can also use tools such as Cython, ctypes, and CFFI to wrap existing C/C++
    libraries into Python extension modules, as covered in “Extending Python Without
    Python’s C API” in [Chapter 25](ch25.xhtml#extending_and_embedding_classic_python)
    (available [online](https://oreil.ly/python-nutshell-25)). You can also embed
    Python in applications coded in other languages, exposing application functionality
    to Python via app-specific Python extension modules.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用低级语言编写扩展模块，以优化在Python中原型设计的小型计算密集部分的性能。您还可以使用诸如Cython、ctypes和CFFI之类的工具，将现有的C/C++库包装为Python扩展模块，详细内容请参阅[第25章](ch25.xhtml#extending_and_embedding_classic_python)中的“无需使用Python的C
    API扩展Python”（在线获取：[https://oreil.ly/python-nutshell-25](https://oreil.ly/python-nutshell-25)）。您还可以将Python嵌入到使用其他语言编写的应用程序中，通过特定于应用程序的Python扩展模块向Python暴露应用程序功能。
- en: This book documents many modules, from the standard library and other sources,
    for client- and server-side network programming, databases, processing text and
    binary files, and interacting with operating systems.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本书记录了许多模块，包括来自标准库和其他来源的模块，用于客户端和服务器端网络编程、数据库、处理文本和二进制文件以及与操作系统交互。
- en: Python Implementations
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python的实现
- en: At the time of this writing, Python has two full production-quality implementations
    (CPython and PyPy) and several newer, high-performance ones in somewhat earlier
    stages of development, such as [Nuitka](https://nuitka.net), [RustPython](https://oreil.ly/1oUWk),
    [GraalVM Python](https://oreil.ly/1XRt_), and [Pyston](https://www.pyston.org),
    which we do not cover further. In [“Other Developments, Implementations, and Distributions”](#other_developmentscomma_implementations)
    we also mention some other, even earlier-stage implementations.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Python有两个完整的生产质量实现（CPython和PyPy），以及几个较早开发阶段的高性能实现，如[Nuitka](https://nuitka.net)，[RustPython](https://oreil.ly/1oUWk)，[GraalVM
    Python](https://oreil.ly/1XRt_)和[Pyston](https://www.pyston.org)，我们不会进一步介绍。在[“其他发展、实现和分发”](#other_developmentscomma_implementations)中，我们还提到了一些其他更早期的实现。
- en: This book primarily addresses CPython, the most widely used implementation,
    which we often call just “Python” for simplicity. However, the distinction between
    a language and its implementations is important!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书主要介绍CPython，这是最广泛使用的实现，我们通常简称为“Python”。然而，语言与其实现之间的区别非常重要！
- en: CPython
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CPython
- en: '[Classic Python](https://www.python.org)—also known as CPython, often just
    called Python—is the most up-to-date, solid, and complete production-quality implementation
    of Python. It is the “reference implementation” of the language. CPython is a
    bytecode compiler, interpreter, and set of built-in and optional modules, all
    coded in standard C.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[经典Python](https://www.python.org)——也称为CPython，通常简称为Python——是最新、稳定和完整的Python生产质量实现。它是该语言的“参考实现”。CPython是一个字节码编译器、解释器以及一组标准C编码的内置和可选模块。'
- en: CPython can be used on any platform where the C compiler complies with the ISO/IEC
    9899:1990 standard^([2](ch01.xhtml#ch01fn5)) (i.e., all modern, popular platforms).
    In [“Installation”](#installation), we explain how to download and install CPython.
    All of this book, except a few sections explicitly marked otherwise, applies to
    CPython. As of this writing, CPython’s current version, just released, is 3.11.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: CPython可以在符合ISO/IEC 9899:1990标准（即所有现代、流行平台）的任何平台上使用C编译器。在[“安装”](#installation)中，我们解释了如何下载和安装CPython。本书中的所有内容（除了明确标记为其他的几个部分）都适用于CPython。截至撰写本文时，CPython的当前版本刚刚发布，是3.11版本。
- en: PyPy
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PyPy
- en: '[PyPy](https://pypy.org) is a fast and flexible implementation of Python, coded
    in a subset of Python itself, able to target several lower-level languages and
    virtual machines using advanced techniques such as type inferencing. PyPy’s greatest
    strength is its ability to generate native machine code “just in time” as it runs
    your Python program; it has substantial advantages in execution speed. PyPy currently
    implements 3.8 (with 3.9 in beta).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[PyPy](https://pypy.org)是Python的快速灵活实现，使用Python本身的子集编码，能够针对多种低级语言和虚拟机进行优化，采用类型推断等先进技术。PyPy的最大优势在于能够在运行Python程序时即时生成本机机器代码，具有显著的执行速度优势。目前，PyPy实现了3.8版本（3.9版本处于测试阶段）。'
- en: Choosing Between CPython, PyPy, and Other Implementations
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在CPython、PyPy和其他实现之间做出选择
- en: 'If your platform, as most are, is able to run CPython, PyPy, and several of
    the other Python implementations we mention, how do you choose among them? First
    of all, don’t choose prematurely: download and install them all. They coexist
    without problems, and they’re all free (some of them also offer commercial versions
    with added value such as tech support, but the respective free versions are fine,
    too). Having them all on your development machine costs only some download time
    and a little disk space, and lets you compare them directly. That said, here are
    a few general tips.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的平台像大多数情况一样能够运行CPython、PyPy以及我们提到的其他几种Python实现，你该如何在它们之间进行选择？首先，不要过早地做出选择：下载并安装它们全部。它们可以无冲突共存，而且它们都是免费的（其中一些还提供附加值如技术支持的商业版本，但对应的免费版本也是可以的）。在你的开发机器上同时拥有它们只需一些下载时间和少量磁盘空间，并且让你可以直接比较它们。话虽如此，以下是一些一般性建议。
- en: If you need a custom version of Python, or high performance for long-running
    programs, consider PyPy (or, if you’re OK with versions that are not quite production-ready
    yet, one of the others we mention).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要定制版的Python，或者需要长时间运行程序的高性能，可以考虑PyPy（或者，如果你对尚未完全成熟的版本可以接受的话，可以考虑我们提到的其他一些版本）。
- en: To work mostly in a traditional environment, CPython is an excellent fit. If
    you don’t have a strong alternative preference, start with the standard CPython
    reference implementation, which is most widely supported by third-party add-ons
    and extensions and offers the most up-to-date version.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果主要在传统环境下工作，CPython是一个很好的选择。如果没有更强烈的替代偏好，可以从标准的CPython参考实现开始，它得到了第三方附加组件和扩展的广泛支持，并提供最新的版本。
- en: In other words, to experiment, learn, and try things out, use CPython. To develop
    and deploy, your best choice depends on the extension modules you want to use
    and how you want to distribute your programs. CPython, by definition, supports
    all Python extensions; however, PyPy supports most extensions, and it can often
    be faster for long-running programs thanks to just-in-time compilation to machine
    code—to check on that, benchmark your CPython code against PyPy (and, to be sure,
    other implementations as well).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，要进行实验、学习和尝试，使用CPython。要开发和部署，你最好的选择取决于你想要使用的扩展模块以及你想要分发程序的方式。CPython从定义上支持所有Python扩展；然而，PyPy支持大多数扩展，并且由于即时编译到机器代码，通常对长时间运行的程序来说速度更快——要确认这一点，请将你的CPython代码与PyPy进行基准测试（还有其他实现也要测试）。
- en: 'CPython is most mature: it has been around longer, while PyPy (and the others)
    are newer and less proven in the field. The development of CPython versions proceeds
    ahead of that of other implementations.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: CPython是最成熟的：它存在的时间更长，而PyPy（和其他的实现）则较为新颖，领域实践较少。CPython版本的开发超前于其他实现。
- en: PyPy, CPython, and other implementations we mention are all good, faithful implementations
    of Python, reasonably close to each other in terms of usability and performance.
    It is wise to become familiar with the strengths and weaknesses of each, and then
    choose optimally for each development task.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提到的PyPy、CPython和其他实现都是优秀的、忠实的Python实现，在可用性和性能上都相当接近。熟悉每个实现的优势和劣势，然后为每个开发任务做出最优选择是明智的。
- en: Other Developments, Implementations, and Distributions
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他发展、实现和分发
- en: Python has become so popular that several groups and individuals have taken
    an interest in its development and have provided features and implementations
    outside the core development team’s focus.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Python已经变得如此流行，以至于几个团体和个人对其开发表示了兴趣，并提供了核心开发团队关注外的功能和实现。
- en: Nowadays, most Unix-based systems include Python—typically version 3.*x* for
    some value of *x*—as the “system Python.” To get Python on Windows or macOS, you
    usually download and run an [installer](https://oreil.ly/c-TxU) (see also [“macOS”](#macos).)
    If you are serious about software development in Python, the first thing you should
    do is *leave your system-installed Python alone!* Quite apart from anything else,
    Python is increasingly used by some parts of the operating system itself, so tweaking
    the Python installation could lead to trouble.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，大多数基于Unix的系统都包括Python——通常是版本3.*x*，其中*x*是某个值——作为“系统Python”。要在Windows或macOS上获取Python，通常需要下载并运行一个[安装程序](https://oreil.ly/c-TxU)（参见[“macOS”](#macos)）。如果你对Python进行严肃的软件开发，第一件事就是*不要动你系统安装的Python*！与其他问题无关，Python正被操作系统的某些部分越来越多地使用，因此调整Python安装可能会导致麻烦。
- en: Thus, even if your system comes with a “system Python,” consider installing
    one or more Python implementations to freely use for your development convenience,
    safe in the knowledge that nothing you do will affect the operating system. We
    also strongly recommend the use of *virtual environments* (see [“Python Environments”](ch07.xhtml#python_environments))
    to isolate projects from each other, letting them have what might otherwise be
    conflicting dependencies (e.g., if two of your projects require different versions
    of the same third-party module). Alternatively, it is possible to locally install
    multiple Pythons side by side.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，即使您的系统配备了“系统 Python”，也请考虑安装一个或多个 Python 实现，以便您可以自由地用于您的开发方便，安全地知道您所做的一切都不会影响操作系统。我们还强烈推荐使用*虚拟环境*（参见[“Python
    环境”](ch07.xhtml#python_environments)）来隔离项目，让它们之间拥有可能会发生冲突的依赖关系（例如，如果您的两个项目需要同一个第三方模块的不同版本）。或者，也可以在本地并排安装多个
    Python。
- en: 'Python’s popularity has led to the creation of many active communities, and
    the language’s ecosystem is very active. The following sections outline some of
    the more interesting developments: note that our failure to include a project
    here reflects limitations of space and time, rather than implying any disapproval!'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的流行导致了许多活跃的社区的创建，语言的生态系统非常活跃。以下部分概述了一些更有趣的发展：请注意，我们未在此处包含某个项目，这反映了空间和时间的限制，而不是意味着不赞成！
- en: Jython and IronPython
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Jython 和 IronPython
- en: '[Jython](https://www.jython.org), supporting Python on top of a [JVM](https://oreil.ly/Q8EQB),
    and [IronPython](https://ironpython.net), supporting Python on top of [.NET](https://oreil.ly/o_MTn),
    are open source projects that, while offering production-level quality for the
    Python versions they support, appear to be “stalled” at the time of this writing,
    since the latest versions they support are substantially behind CPython’s. Any
    “stalled” open source project could, potentially, come back to life again: all
    it takes is one or more enthusiastic, committed developers to devote themselves
    to “reviving” it. As an alternative to Jython for the JVM, you might also consider
    GraalVM Python, mentioned earlier.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[Jython](https://www.jython.org)，支持在[JVM](https://oreil.ly/Q8EQB)上运行 Python，并且
    [IronPython](https://ironpython.net)，支持在[.NET](https://oreil.ly/o_MTn)上运行 Python，是两个开源项目，尽管它们支持的
    Python 版本具有生产级别的质量，但在撰写本文时似乎“停滞不前”，因为它们支持的最新版本明显落后于 CPython。任何“停滞不前”的开源项目都有可能再次复活：只需一个或多个热情、承诺的开发人员致力于“复苏”它。作为
    JVM 上的 Jython 的替代方案，您还可以考虑之前提到的 GraalVM Python。'
- en: Numba
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Numba
- en: '[Numba](https://numba.pydata.org) is an open source just-in-time (JIT) compiler
    that translates a subset of Python and NumPy. Given its strong focus on numeric
    processing, we mention it again in [Chapter 16](ch16.xhtml#numeric_processing).'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[Numba](https://numba.pydata.org) 是一个开源的即时（JIT）编译器，它将 Python 和 NumPy 的子集进行翻译。由于其对数字处理的强大关注，我们在[第
    16 章](ch16.xhtml#numeric_processing)中再次提到它。'
- en: Pyjion
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Pyjion
- en: '[Pyjion](https://oreil.ly/P7wKC) is an open source project, originally started
    by Microsoft, with the key goal of adding an API to CPython to manage JIT compilers.
    Secondary goals include offering a JIT compiler for Microsoft’s open source [CLR](https://oreil.ly/5zjOG)
    environment (which is part of .NET) and a framework to develop JIT compilers.
    Pyjion does not *replace* CPython; rather, it is a module that you import from
    CPython (it currently requires 3.10) that lets you translate CPython’s bytecode,
    “just in time,” into machine code for several different environments. Integration
    of Pyjion with CPython is enabled by [PEP 523](https://oreil.ly/lFDGw); however,
    since building Pyjion requires several tools in addition to a C compiler (which
    is all it takes to build CPython), the Python Software Foundation (PSF) will likely
    never bundle Pyjion into the CPython releases it distributes.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[Pyjion](https://oreil.ly/P7wKC) 是一个开源项目，最初由微软发起，其主要目标是向 CPython 添加一个 API 来管理
    JIT 编译器。其次目标包括提供一个 JIT 编译器，用于微软的开源 [CLR](https://oreil.ly/5zjOG) 环境（这是 .NET 的一部分）和一个用于开发
    JIT 编译器的框架。Pyjion 不是*取代* CPython；相反，它是一个你从 CPython 中导入的模块（目前需要 3.10），它允许你将 CPython
    的字节码“即时”地翻译成多个不同环境的机器码。Pyjion 与 CPython 的集成由 [PEP 523](https://oreil.ly/lFDGw)
    启用；但是，由于构建 Pyjion 需要除了 C 编译器之外的几个工具（这是构建 CPython 所需的全部工具），Python 软件基金会（PSF）可能永远不会将
    Pyjion 捆绑到它分发的 CPython 版本中。'
- en: IPython
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IPython
- en: '[IPython](https://ipython.org) enhances CPython’s interactive interpreter to
    make it more powerful and convenient. It allows abbreviated function call syntax,
    and extensible functionality known as *magics* introduced by the percent (%) character.
    It also provides shell escapes, allowing a Python variable to receive the result
    of a shell command. You can use a question mark to query an object’s documentation
    (or two question marks for extended documentation); all the standard features
    of the Python interactive interpreter are also available.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: IPython增强了CPython的交互式解释器，使其更加强大和便捷。它允许使用缩写的函数调用语法，并通过百分号（%）字符引入称为*magics*的可扩展功能。它还提供了shell转义功能，允许Python变量接收shell命令的结果。您可以使用问号查询对象的文档（或两个问号以获取扩展文档）；Python交互式解释器的所有标准功能也可用。
- en: IPython has made particular strides in the scientific and data-focused world,
    and has slowly morphed (through the development of IPython Notebook, now refactored
    and renamed Jupyter Notebook, discussed in [“Jupyter”](ch02.xhtml#jupyter)) into
    an interactive programming environment that, among snippets of code,^([3](ch01.xhtml#ch01fn6))
    also lets you embed commentary in [literate programming](https://oreil.ly/tx5B3)
    style (including mathematical notation) and show the output of executing code,
    optionally with advanced graphics produced by such subsystems as matplotlib and
    bokeh. An example of matplotlib graphics embedded in a Jupyter Notebook is shown
    in the bottom half of [Figure 1-1](#an_example_jupyter_notebook_with_embedd).
    Jupyter/IPython is one of Python’s prominent success stories.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[IPython](https://ipython.org)在科学和数据重点领域取得了特殊进展，并通过IPython Notebook（现在重构并更名为Jupyter
    Notebook，见[“Jupyter”](ch02.xhtml#jupyter)）的发展逐渐演变为一个交互式编程环境，除了代码片段外，还可以以[literate
    programming](https://oreil.ly/tx5B3)风格嵌入评论（包括数学符号），并展示执行代码的输出，可选地使用诸如matplotlib和bokeh等子系统生成的高级图形。Jupyter
    Notebook中嵌入matplotlib图形的示例如[图 1-1](#an_example_jupyter_notebook_with_embedd)的下半部分所示。Jupyter/IPython是Python的显著成功案例之一。'
- en: '![An example Jupyter Notebook with embedded matplotlib graph](assets/pns4_0101.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![一个示例Jupyter Notebook，嵌入了matplotlib图形](assets/pns4_0101.png)'
- en: Figure 1-1\. An example Jupyter Notebook with embedded matplotlib graph
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-1\. 一个示例Jupyter Notebook，嵌入了matplotlib图形
- en: MicroPython
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MicroPython
- en: The continued trend in miniaturization has brought Python well within the range
    of the hobbyist. Single-board computers like the [Raspberry Pi](https://www.raspberrypi.org)
    and [Beagle boards](https://beagleboard.org) let you run Python in a full Linux
    environment. Below this level, there is a class of devices known as *microcontrollers*—programmable
    chips with configurable hardware—that extend the scope of hobby and professional
    projects, for example by making analog and digital sensing easy, enabling such
    applications as light and temperature measurements with little additional hardware.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 小型化趋势持续推动着Python向业余爱好者的范围内发展。像[Raspberry Pi](https://www.raspberrypi.org)和[Beagle
    boards](https://beagleboard.org)这样的单板计算机让您在完整的Linux环境中运行Python。在此级别以下，有一类被称为*微控制器*的设备，它们是可编程的具有可配置硬件的芯片，通过简化模拟和数字传感器的使用，例如轻松实现光和温度测量等应用，使得业余和专业项目的范围扩大。
- en: Both hobbyists and professional engineers are making increasing use of these
    devices, which appear (and sometimes disappear) all the time. Thanks to the [MicroPython](https://micropython.org)
    project, the rich functionality of [many such devices](https://oreil.ly/6Ifug)
    ([micro:bit](https://microbit.org), [Arduino](https://www.arduino.cc/), [pyboard](https://store.micropython.org/product/PYBv1.1),
    [LEGO^Ⓡ MINDSTORMS^Ⓡ EV3](https://en.wikipedia.org/wiki/Lego_Mindstorms_EV3),
    [HiFive](https://www.hifiveinventor.com), etc.) can now be programmed in (limited
    dialects of) Python. Of note at the time of writing is the introduction of the
    [Raspberry Pi Pico](https://oreil.ly/6-s7Q). Given the success of the Raspberry
    Pi in the education world, and Pico’s ability to run MicroPython, it seems that
    Python is consolidating its position as the programming language with the broadest
    range of applications.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 业余爱好者和专业工程师都在越来越多地使用这些设备，这些设备时常出现（有时又会消失）。多亏了[MicroPython](https://micropython.org)项目，[许多这类设备](https://oreil.ly/6Ifug)（[micro:bit](https://microbit.org)，[Arduino](https://www.arduino.cc/)，[pyboard](https://store.micropython.org/product/PYBv1.1)，[LEGO^Ⓡ
    MINDSTORMS^Ⓡ EV3](https://en.wikipedia.org/wiki/Lego_Mindstorms_EV3)，[HiFive](https://www.hifiveinventor.com)，等等）现在可以用（有限的方言）Python进行编程。在撰写时值得注意的是[Raspberry
    Pi Pico](https://oreil.ly/6-s7Q)的推出。鉴于树莓派在教育领域的成功，以及Pico能够运行MicroPython，似乎Python正在巩固其作为拥有最广泛应用范围的编程语言的地位。
- en: MicroPython is a Python 3.4 implementation (“with selected features from later
    versions,” to quote [its docs](https://oreil.ly/Xe5YP)) producing bytecode or
    executable machine code (many users will be happily unaware of the latter fact).
    It fully implements Python 3.4’s syntax, but lacks most of the standard library.
    Special hardware driver modules let you control various parts of built-in hardware;
    access to Python’s socket library lets devices interact with network services.
    External devices and timer events can trigger code. Thanks to MicroPython, the
    Python language can fully play in the Internet of Things.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: MicroPython是Python 3.4的实现（“包括后续版本的某些特性”，引用自[其文档](https://oreil.ly/Xe5YP)），它能产生字节码或可执行的机器码（许多用户可能并不了解后一种情况）。它完全实现了Python
    3.4的语法，但缺少大部分标准库。特殊的硬件驱动模块可以让你控制内置硬件的各个部分；访问Python的socket库可以让设备与网络服务进行交互。外部设备和定时器事件可以触发代码执行。由于MicroPython，Python语言可以完全参与物联网。
- en: 'A device typically offers interpreter access through a USB serial port, or
    through a browser [using the WebREPL protocol](https://oreil.ly/sch3F) (we aren’t
    aware of any fully working ssh implementations yet, though, so, take care to firewall
    these devices properly: *they should **not** be directly accessible across the
    internet without proper, strong precautions!*). You can program the device’s power-on
    bootstrap sequence in Python by creating a *boot.py* file in the device’s memory,
    and this file can execute arbitrary MicroPython code of any complexity.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一个设备通常可以通过USB串行端口或通过浏览器[使用WebREPL协议](https://oreil.ly/sch3F)访问解释器（尽管目前我们还不知道任何完全可用的ssh实现，因此，请确保适当地配置防火墙：*不应该直接通过互联网访问这些设备，除非有适当的强化预防措施！*）。你可以通过在设备内存中创建一个*boot.py*文件来用Python编程设备的上电启动序列，而且这个文件可以执行任意复杂的MicroPython代码。
- en: Anaconda and Miniconda
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Anaconda和Miniconda
- en: 'One of the most successful Python distributions^([4](ch01.xhtml#ch01fn7)) in
    recent years is [Anaconda](https://www.anaconda.com). This open source package
    comes with a vast number^([5](ch01.xhtml#ch01fn8)) of preconfigured and tested
    extension modules in addition to the standard library. In many cases, you might
    find that it contains all the necessary dependencies for your work. If your dependencies
    aren’t supported, you can also install modules with pip. On Unix-based systems,
    it installs very simply in a single directory: to activate it, just add the Anaconda
    *bin* subdirectory at the front of your shell PATH.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来最成功的Python发行版之一^([4](ch01.xhtml#ch01fn7))是[Anaconda](https://www.anaconda.com)。这个开源软件包除了标准库外，还带有大量预配置和经过测试的扩展模块。在许多情况下，你可能会发现它包含了你工作所需的所有依赖项。如果你的依赖项不受支持，你也可以用pip安装模块。在基于Unix的系统上，它可以简单地安装在一个单独的目录中：只需将Anaconda的*bin*子目录添加到你的shell
    PATH的最前面即可激活它。
- en: Anaconda is based on a packaging technology called conda. A sister implementation,
    [Miniconda](https://oreil.ly/dfX4M), gives access to the same extensions but does
    not come with them preloaded; it instead downloads them as required, making it
    a better choice for creating tailored environments. conda does not use the standard
    virtual environments, but contains equivalent facilities to allow separation of
    the dependencies for multiple projects.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda 基于一种名为 conda 的包装技术。一个姐妹实现 [Miniconda](https://oreil.ly/dfX4M) 提供了相同扩展的访问权限，但不会预加载它们；相反，它会在需要时下载它们，因此更适合创建定制环境。conda
    不使用标准虚拟环境，但包含相应的功能以允许为多个项目分离依赖关系。
- en: 'pyenv: Simple support for multiple versions'
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pyenv：支持多版本的简单实现
- en: 'The basic purpose of [pyenv](https://oreil.ly/88o8b) is to make it easy to
    access as many different versions of Python as you need. It does so by installing
    so-called *shim* scripts for each executable, which dynamically compute the version
    required by looking at various sources of information in the following order:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[pyenv](https://oreil.ly/88o8b) 的基本目的是让您轻松访问所需的多个不同版本的 Python。它通过为每个可执行文件安装所谓的
    *shim* 脚本来实现这一点，这些脚本动态计算所需的版本，顺序如下查看各种信息源：'
- en: The PYENV_VERSION environment variable (if set).
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果设置了 PYENV_VERSION 环境变量。
- en: The *.pyenv_version* file in the current directory (if present)—you can set
    this with the **pyenv local** command.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前目录中的 *.pyenv_version* 文件（如果存在）— 您可以使用 **pyenv local** 命令设置此文件。
- en: The first *.pyenv_version* file found when climbing the directory tree (if one
    is found).
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当在目录树中向上查找第一个 *.pyenv_version* 文件（如果找到的话）。
- en: The *version* file in the pyenv installation root directory—you can set this
    with the **pyenv global** command.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 pyenv 安装根目录中的 *version* 文件— 您可以使用 **pyenv global** 命令设置此文件。
- en: pyenv installs its Python interpreters underneath its home directory (normally
    *~/.pyenv*), and, once available, a specific interpreter can be installed as the
    default Python in any project directory. Alternatively (e.g., when testing code
    under multiple versions), you can use scripting to change the interpreter dynamically
    as the script proceeds.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: pyenv 将其 Python 解释器安装在其主目录下（通常是 *~/.pyenv*），一旦可用，特定解释器可以安装为任何项目目录中的默认 Python。或者（例如，在多个版本下测试代码时），您可以使用脚本在脚本执行过程中动态更改解释器。
- en: The **pyenv install –list** command shows an impressive list of over 500 supported
    distributions, including PyPy, Miniconda, MicroPython, and several others, plus
    every official CPython implementation from 2.1.3 to (at the time of writing) 3.11.0rc1.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**pyenv install –list** 命令显示了一个令人印象深刻的列表，包括 PyPy、Miniconda、MicroPython 和其他几个官方
    CPython 实现（截至撰写本文时为止，从 2.1.3 到 3.11.0rc1）。'
- en: 'Transcrypt: Convert your Python to JavaScript'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Transcrypt：将您的 Python 转换为 JavaScript
- en: Many attempts have been made to make Python into a browser-based language, but
    JavaScript’s hold has been tenacious. The [Transcrypt](https://www.transcrypt.org)
    system is a pip-installable Python package to convert Python code (currently,
    up to version 3.9) into browser-executable JavaScript. You have full access to
    the browser’s DOM, allowing your code to dynamically manipulate window content
    and use JavaScript libraries.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多尝试将 Python 打造成为浏览器语言，但 JavaScript 的影响力十分顽强。[Transcrypt](https://www.transcrypt.org)
    系统是一个可通过 pip 安装的 Python 包，用于将 Python 代码（目前支持版本为 3.9）转换为浏览器可执行的 JavaScript。您可以完全访问浏览器的
    DOM，允许您的代码动态操作窗口内容并使用 JavaScript 库。
- en: Although it creates minified code, Transcrypt provides full [sourcemaps](https://oreil.ly/WjVAa)
    that allow you to debug with reference to the Python source rather than the generated
    JavaScript. You can write browser event handlers in Python, mixing it freely with
    HTML and JavaScript. Python may never replace JavaScript as the embedded browser
    language, but Transcrypt means you might no longer need to worry about that.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它创建了缩小的代码，但 Transcrypt 提供了完整的 [sourcemaps](https://oreil.ly/WjVAa)，允许您根据 Python
    源代码而不是生成的 JavaScript 进行调试。您可以用 Python 编写浏览器事件处理程序，自由混合 HTML 和 JavaScript。Python
    可能永远不会取代 JavaScript 作为嵌入式浏览器语言，但 Transcrypt 意味着您可能不再需要担心这个问题。
- en: 'Another very active project that lets you script your web pages with Python
    (up to 3.10) is [Brython](https://brython.info), and there are others yet: [Skulpt](https://skulpt.org),
    not quite up to Python 3 yet but moving in that direction; [PyPy.js](https://pypyjs.org),
    ditto; [Pyodide](https://oreil.ly/jb_US), currently supporting Python 3.10 and
    many scientific extensions, and centered on [Wasm](https://webassembly.org); and,
    most recently, Anaconda’s [PyScript](https://pyscript.net), built on top of Pyodide.
    We describe several of these projects in more detail in [“Running Python in the
    Browser”](ch02.xhtml#running_python_in_the_browser).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常活跃的项目让你可以用 Python 脚本编写网页（最多支持到 3.10）是 [Brython](https://brython.info)，还有其他一些项目：[Skulpt](https://skulpt.org)，还没有完全支持
    Python 3，但正在朝这个方向发展；[PyPy.js](https://pypyjs.org)，同样；[Pyodide](https://oreil.ly/jb_US)，目前支持
    Python 3.10 和许多科学扩展，中心是 [Wasm](https://webassembly.org)；以及最近的 Anaconda 的 [PyScript](https://pyscript.net)，建立在
    Pyodide 上。我们在 [“在浏览器中运行 Python”](ch02.xhtml#running_python_in_the_browser)中更详细地描述了这些项目中的几个。
- en: Licensing and Price Issues
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 许可和价格问题
- en: CPython is covered by the [Python Software Foundation License Version 2](https://oreil.ly/NjjDu),
    which is GNU Public License (GPL) compatible but lets you use Python for any proprietary,
    free, or other open source software development, similar to BSD/Apache/MIT licenses.
    Licenses for PyPy and other implementations are similarly liberal. Anything you
    download from the main Python and PyPy sites won’t cost you a penny. Further,
    these licenses do not constrain what licensing and pricing conditions you can
    use for software you develop using the tools, libraries, and documentation they
    cover.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: CPython 受到 [Python 软件基金会许可证第 2 版](https://oreil.ly/NjjDu)的保护，它与 GNU 通用公共许可证（GPL）兼容，但允许你将
    Python 用于任何专有、免费或其他开源软件开发，类似于 BSD/Apache/MIT 许可证。PyPy 和其他实现的许可证也类似宽松。你从主 Python
    和 PyPy 网站下载的任何内容都不会花费你一分钱。此外，这些许可证不会限制你在使用这些工具、库和文档开发的软件时可以使用的许可和定价条件。
- en: However, not everything Python-related is free from licensing costs or hassles.
    Many third-party Python sources, tools, and extension modules that you can freely
    download have liberal licenses, similar to that of Python itself. Others are covered
    by the GPL or Lesser GPL (LGPL), constraining the licensing conditions you can
    place on derived works. Some commercially developed modules and tools may require
    you to pay a fee, either unconditionally or if you use them for profit.^([6](ch01.xhtml#ch01fn9))
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并非所有与 Python 相关的内容都免于许可费用或麻烦。许多第三方 Python 来源、工具和扩展模块，你可以自由下载，拥有类似于 Python
    本身的宽松许可证。其他的则受到 GPL 或较小 GPL（LGPL）的保护，限制了你对衍生作品的许可条件。一些商业开发的模块和工具可能要求你支付费用，无论是无条件的还是如果你用它们盈利的情况下都需要支付费用。^([6](ch01.xhtml#ch01fn9))
- en: There is no substitute for careful examination of licensing conditions and prices.
    Before you invest time and energy into any software tool or component, check that
    you can live with its license. Often, especially in a corporate environment, such
    legal matters may involve consulting lawyers. Modules and tools covered in this
    book, unless we explicitly say otherwise, can be taken to be, at the time of this
    writing, freely downloadable, open source, and covered by a liberal license akin
    to Python’s. However, we claim no legal expertise, and licenses can change over
    time, so double-checking is always prudent.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许可条件和价格的细致检查没有替代品。在你投入时间和精力使用任何软件工具或组件之前，请确保你能接受它的许可证。通常，特别是在企业环境中，这些法律问题可能需要咨询律师。除非我们明确说明，否则本文中涉及的模块和工具在撰写本文时可以认为是自由下载的、开源的，并且采用类似于
    Python 的自由许可证。然而，我们声明不具备法律专业知识，许可证可能会随时间变化，因此始终需要仔细核查。
- en: Python Development and Versions
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 开发与版本
- en: Python is developed, maintained, and released by a team of core developers led
    by Guido van Rossum, Python’s inventor, architect, and now “ex” Benevolent Dictator
    for Life (BDFL). This title meant that Guido had the final say on what became
    part of the Python language and standard library. Once Guido decided to retire
    as BDFL, his decision-making role was taken over by a small “Steering Council,”
    elected for yearly terms by PSF members.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Python 由 Guido van Rossum（Python 的发明者、架构师，现在的“前”终身仁慈独裁者（BDFL））领导的核心开发团队开发、维护和发布。这个头衔意味着
    Guido 对 Python 语言和标准库的组成有最终决定权。一旦 Guido 决定辞去 BDFL 职位，他的决策角色由由 PSF 成员选举产生的一个小型“指导委员会”接管，任期一年。
- en: Python’s intellectual property is vested in the PSF, a nonprofit corporation
    devoted to promoting Python, described in [“Python Software Foundation”](#python_software_foundation).
    Many PSF Fellows and members have commit privileges to Python’s [reference source
    repositories](https://github.com/python), as documented in the [“Python Developer’s
    Guide”](https://oreil.ly/WKjXc), and most Python committers are members or Fellows
    of the PSF.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Python的知识产权归PSF所有，这是一个致力于推广Python的非营利性组织，描述在[“Python软件基金会”](#python_software_foundation)中。许多PSF院士和成员在Python的[参考源代码库](https://github.com/python)中有提交权限，如[“Python开发者指南”](https://oreil.ly/WKjXc)所述，大多数Python提交者都是PSF的成员或院士。
- en: Proposed changes to Python are detailed in public docs called [Python Enhancement
    Proposals (PEPs)](https://oreil.ly/HxHfs). PEPs are debated by Python developers
    and the wider Python community, and finally approved or rejected by the Steering
    Council. (The Steering Council may take debates and preliminary votes into account
    but are not bound by them.) Hundreds of people contribute to Python development
    through PEPs, discussion, bug reports, and patches to Python sources, libraries,
    and docs.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 提议对 Python 的更改详细说明在名为[Python Enhancement Proposals (PEPs)](https://oreil.ly/HxHfs)的公共文档中。PEPs由Python开发人员和更广泛的Python社区进行辩论，最终由指导委员会批准或拒绝。（指导委员会可能考虑辩论和初步投票，但并不受其约束。）数百人通过PEPs、讨论、错误报告和对Python源代码、库和文档的补丁为Python开发做出贡献。
- en: The Python core team releases minor versions of Python (3.*x* for growing values
    of *x*), also known as “feature releases,” currently at a pace of [once a year](https://oreil.ly/VYX-k).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Python核心团队以每年一次的速度发布Python的小版本（3.*x*，其中*x*为不断增长的值），也称为“特征发布”。
- en: Each minor release (as opposed to bug-fix microreleases) adds features that
    make Python more powerful, but also takes care to maintain backward compatibility.
    Python 3.0, which was allowed to break backward compatibility in order to remove
    redundant “legacy” features and simplify the language, was first released in December
    2008\. Python 3.11 (the most recent stable version at the time of publication)
    was first released in October 2022.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 每个小版本发布（与bug修复的微版本相对）都添加了使Python更强大的功能，但也会注意保持向后兼容性。Python 3.0首先于2008年12月发布，允许破坏向后兼容性以删除多余的“遗留”功能并简化语言。Python
    3.11（出版时的最新稳定版本）于2022年10月首次发布。
- en: Each minor release 3.*x* is first made available in alpha releases, tagged as
    3.*x*a0, 3.*x*a1, and so on. After the alphas comes at least one beta release,
    3.*x*b1, and after the betas, at least one release candidate, 3.*x*rc1\. By the
    time the final release of 3.*x* (3.*x*.0) comes out, it is solid, reliable, and
    tested on all major platforms. Any Python programmer can help ensure this by downloading
    alphas, betas, and release candidates, trying them out, and filing bug reports
    for any problems that emerge.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 每个小版本3.*x*首先以alpha版本发布，标记为3.*x*a0、3.*x*a1等等。在alpha版本之后，至少有一个beta版本，3.*x*b1，以及beta版本之后，至少有一个发布候选版本，3.*x*rc1。当3.*x*（3.*x*.0）的最终版本发布时，它是稳定的、可靠的，并在所有主要平台上经过测试。任何Python程序员都可以通过下载alpha版、beta版和发布候选版、尝试它们，并为出现的任何问题提交错误报告来确保这一点。
- en: Once a minor release is out, part of the attention of the core team switches
    to the next minor release. However, a minor release normally gets successive point
    releases (i.e., 3.*x*.1, 3.*x*.2, and so on), one every two months, that add no
    functionality but can fix errors, address security issues, port Python to new
    platforms, enhance documentation, and add tools and (100% backward compatible!)
    optimizations.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦一个小版本发布，核心团队的注意力部分转移到下一个小版本上。然而，一个小版本通常会有连续的点发布（即3.*x*.1、3.*x*.2等），每两个月发布一次，不添加功能，但可以修复错误、解决安全问题、将Python移植到新平台、增强文档，并添加工具和（100%向后兼容的！）优化。
- en: Python’s backward compatibility is fairly good within major releases. You can
    find code and documentation [online](https://oreil.ly/JbCv3) for all old releases
    of Python, and the [Appendix](app01.xhtml#new_features_and_changes_in) contains
    a summary list of changes in each of the releases covered in this book.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在主要版本内，Python的向后兼容性相当好。你可以在线找到所有旧版本的Python的代码和文档，[附录](app01.xhtml#new_features_and_changes_in)包含了本书涵盖的每个版本的变更摘要列表。
- en: Python Resources
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python资源
- en: 'The richest Python resource is the web: start at Python’s [home page](https://www.python.org),
    which is full of links to explore.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最丰富的Python资源在网络上：从Python的[主页](https://www.python.org)开始，这里有许多探索链接。
- en: Documentation
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档
- en: Both CPython and PyPy come with good documentation. You can read CPython’s manuals
    [online](https://docs.python.org/3) (we often refer to these as “the online docs”),
    and various downloadable formats suitable for offline viewing, searching, and
    printing are also available. The Python [documentation page](https://www.python.org/doc)
    contains additional pointers to a large variety of other documents. There is also
    a [documentation page](http://doc.pypy.org) for PyPy, and you can find online
    FAQs for both [Python](https://oreil.ly/-NU8p) and [PyPy](https://oreil.ly/ajNWC).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: CPython 和 PyPy 都配有良好的文档。你可以在 CPython 的在线手册 [阅读](https://docs.python.org/3)（我们经常称之为“在线文档”），并且也有适合离线查看、搜索和打印的各种可下载格式。Python
    的 [文档页面](https://www.python.org/doc) 包含了指向大量其他文档的附加指针。PyPy 也有一个 [文档页面](http://doc.pypy.org)，你可以在这里找到
    Python 和 PyPy 的在线常见问题解答。
- en: Python documentation for nonprogrammers
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 非程序员文档
- en: 'Most Python documentation (including this book) assumes some software development
    knowledge. However, Python is quite suitable for first-time programmers, so there
    are exceptions to this rule. Good introductory, free online texts for nonprogrammers
    include:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Python 文档（包括本书）都假设具有一定的软件开发知识。然而，Python 对于初学者来说非常适用，因此也有例外情况。非程序员的良好入门免费在线文本包括：
- en: Josh Cogliati’s [“Non-Programmers Tutorial for Python 3”](https://oreil.ly/HnXMA)
    (currently centered on Python 3.9)
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Josh Cogliati 的 [“Python 3 非程序员教程”](https://oreil.ly/HnXMA)（目前以 Python 3.9 为中心）。
- en: Alan Gauld’s [“Learning to Program”](https://oreil.ly/FQExV) (currently centered
    on Python 3.6)
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Alan Gauld 的 [“学习编程”](https://oreil.ly/FQExV)（目前以 Python 3.6 为中心）
- en: Allen Downey’s [*Think Python*, 2nd edition](https://oreil.ly/kg6Yd) (centered
    on an unspecified version of Python 3.*x*)
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Allen Downey 的 [*Think Python*，第二版](https://oreil.ly/kg6Yd)（以 Python 3.*x* 版本为中心）。
- en: An excellent resource for learning Python (for nonprogrammers, and for less
    experienced programmers too) is the [“Beginners’ Guide to Python” wiki](https://oreil.ly/Yf5cK),
    which includes a wealth of links and advice. It’s community curated, so it will
    stay up-to-date as available books, courses, tools, and so on keep evolving and
    improving.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一个学习 Python 的绝佳资源（适用于非程序员和经验较少的程序员）是 [“Python 初学者指南” wiki](https://oreil.ly/Yf5cK)，其中包含大量链接和建议。这是由社区共同维护的，因此随着可用的书籍、课程、工具等的不断进步和改进，它会保持最新。
- en: Extension modules and Python sources
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展模块和 Python 源码
- en: A good starting point to explore Python extension binaries and sources is the
    [Python Package Index](https://oreil.ly/PGIim) (still fondly known to a few of
    us old-timers as “The Cheese Shop,” but generally referred to now as PyPI), which
    at the time of this writing offers more than 400,000 packages, each with descriptions
    and pointers.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 Python 扩展二进制和源码的良好起点是 [Python Package Index](https://oreil.ly/PGIim)（我们这些老前辈中的一些人仍然喜欢称之为“奶酪商店”，但现在通常称为
    PyPI），在本文撰写时提供了超过 400,000 个包，每个包都有描述和指针。
- en: The standard Python source distribution contains excellent Python source code
    in the standard library and in the *Tools* directory, as well as C source for
    the many built-in extension modules. Even if you have no interest in building
    Python from source, we suggest you download and unpack the Python source distribution
    (e.g., the latest stable release of [Python 3.11](https://oreil.ly/rqYZ9)) for
    the sole purpose of studying it; or, if you so choose, peruse the current bleeding-edge
    version of Python’s standard library [online](https://oreil.ly/zDQ1Z).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的 Python 源码发布包含了在标准库和 *Tools* 目录中的优秀 Python 源代码，以及许多内置扩展模块的 C 源码。即使你对从源代码构建
    Python 没有兴趣，我们建议你下载和解压 Python 源码发布包（例如，最新稳定版本的 [Python 3.11](https://oreil.ly/rqYZ9)），只是为了学习它；或者，如果你选择的话，浏览当前最新的
    Python 标准库的 bleeding-edge 版本 [在线文档](https://oreil.ly/zDQ1Z)。
- en: Many Python modules and tools covered in this book also have dedicated sites.
    We include references to such sites in the appropriate chapters.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书涵盖的许多 Python 模块和工具也有专门的网站。我们在相应的章节中提供了这些网站的引用。
- en: Books
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 书籍
- en: 'Although the web is a rich source of information, books still have their place
    (if you didn’t agree with us on this, we wouldn’t have written this book, and
    you wouldn’t be reading it). Books about Python are numerous. Here are a few we
    recommend (some cover older Python 3 versions, rather than current ones):'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管网络是丰富的信息来源，但书籍仍然有其重要性（如果你对此意见不同，我们就不会写这本书，你也不会在读它）。关于 Python 的书籍很多。以下是我们推荐的一些（一些覆盖较旧的
    Python 3 版本，而不是当前版本）：
- en: If you know some programming but are just starting to learn Python, and you
    like graphical approaches to instruction, [*Head First Python*, 2nd edition](https://learning.oreilly.com/library/view/head-first-python/9781491919521/),
    by Paul Barry (O’Reilly) may serve you well. Like all the books in the Head First
    series, it uses graphics and humor to teach its subject.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您懂一些编程但刚开始学习Python，并且喜欢图形化的教学方法，[*Head First Python，第二版*](https://learning.oreilly.com/library/view/head-first-python/9781491919521/)，作者Paul
    Barry（O’Reilly），可能非常适合您。像Head First系列中的所有书籍一样，它使用图形和幽默来教授其主题。
- en: '[*Dive Into Python 3*](https://diveintopython3.net), by Mark Pilgrim (Apress),
    teaches by example in a fast-paced and thorough way that is quite suitable for
    people who are already expert programmers in other languages.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*深入Python 3*](https://diveintopython3.net)，作者Mark Pilgrim（Apress），通过快节奏和彻底的示例方式进行教学，非常适合已经是其他语言专家程序员的人。'
- en: '[*Beginning Python: From Novice to Professional*](https://oreil.ly/YtWRs),
    by Magnus Lie Hetland (Apress), teaches both via thorough explanations and by
    fully developing complete programs in various application areas.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*从初学到专业：Python起步*](https://oreil.ly/YtWRs)，作者Magnus Lie Hetland（Apress），通过详尽的解释和在各种应用领域中完整开发程序来进行教学。'
- en: '[*Fluent Python*](https://www.oreilly.com/library/view/fluent-python/9781491946237/),
    by Luciano Ramalho (O’Reilly), is an excellent book for more experienced developers
    who want to use more Pythonic idioms and features.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*流畅的Python*](https://www.oreilly.com/library/view/fluent-python/9781491946237/)，作者Luciano
    Ramalho（O’Reilly），是一本适合有经验的开发人员，希望使用更多Python风格惯用语和功能的优秀书籍。'
- en: Community
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 社区
- en: One of the greatest strengths of Python is its robust, friendly, welcoming community.
    Python programmers and contributors meet at conferences, “hackathons” (often known
    as [*sprints*](https://oreil.ly/oQceG) in the Python community), and local user
    groups; actively discuss shared interests; and help each other on mailing lists
    and social media. For a complete list of ways to connect, visit [*https://www.python.org/community*](https://www.python.org/community).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Python最大的优势之一是其强大、友好、包容的社区。Python程序员和贡献者在会议、“黑客马拉松”（在Python社区中通常称为[*sprints*](https://oreil.ly/oQceG)）、本地用户组相聚；积极讨论共同的兴趣；并在邮件列表和社交媒体上互相帮助。要获取连接方式的完整列表，请访问[*https://www.python.org/community*](https://www.python.org/community)。
- en: Python Software Foundation
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python软件基金会
- en: Besides holding the intellectual property rights for the Python programming
    language, the PSF promotes the Python community. It sponsors user groups, conferences,
    and sprints, and provides grants for development, outreach, and education, among
    other activities. The PSF has dozens of [Fellows](https://oreil.ly/maILY) (nominated
    for their contributions to Python, including all of the Python core team, as well
    as three of the authors of this book); hundreds of members who contribute time,
    work, and money (including many who’ve earned [Community Service Awards](https://oreil.ly/MiQRf));
    and dozens of [corporate sponsors](https://oreil.ly/FFOZ7). Anyone who uses and
    supports Python can become a member of the PSF.^([7](ch01.xhtml#idm44924591658208))
    Check out the [membership page](https://oreil.ly/MzdRK) for information on the
    various membership levels, and on how to become a member of the PSF. If you’re
    interested in contributing to Python itself, see the [“Python Developer’s Guide”](https://oreil.ly/1Jwwb).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 除了拥有Python编程语言的知识产权外，PSF还促进Python社区。它赞助用户组、会议和“sprints”，并为开发、外展和教育等活动提供资助。PSF有数十位[Fellows](https://oreil.ly/maILY)（因其对Python的贡献而提名，包括Python核心团队的所有成员，以及本书的三位作者）；数百名贡献了时间、工作和金钱的成员（包括许多获得[Community
    Service Awards](https://oreil.ly/MiQRf)的人）；以及数十家[企业赞助商](https://oreil.ly/FFOZ7)。任何使用和支持Python的人都可以成为PSF的成员。^([7](ch01.xhtml#idm44924591658208))查看[会员页面](https://oreil.ly/MzdRK)获取有关各种会员级别的信息，以及如何成为PSF的成员。如果您有兴趣为Python本身做贡献，请参阅[“Python开发者指南”](https://oreil.ly/1Jwwb)。
- en: Workgroups
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作组
- en: '[Workgroups](https://oreil.ly/0GmfI) are committees established by the PSF
    to do specific, important projects for Python. Here are some examples of active
    workgroups at the time of writing:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[工作组](https://oreil.ly/0GmfI)是由PSF成立的委员会，负责为Python进行特定而重要的项目。以下是写作时的一些活跃工作组的示例：'
- en: The [Python Packaging Authority (PyPA)](https://oreil.ly/0Zxm7) improves and
    maintains the Python packaging ecosystem and publishes the [“Python Packaging
    User Guide”](https://packaging.python.org).
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python打包管理局（PyPA）](https://oreil.ly/0Zxm7)改进和维护Python打包生态系统，并发布[“Python打包用户指南”](https://packaging.python.org)。'
- en: The [Python Education workgroup](https://oreil.ly/ZljIc) promotes education
    and learning with Python.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python教育工作组](https://oreil.ly/ZljIc)致力于推广使用Python进行教育和学习。'
- en: The [Diversity and Inclusion workgroup](https://oreil.ly/koEo4) supports and
    facilitates the growth of a diverse and international community of Python programmers.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[多样性与包容性工作组](https://oreil.ly/koEo4)支持和促进Python程序员多样化和国际化社区的增长。'
- en: Python conferences
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python会议
- en: There are lots of Python conferences worldwide. General Python conferences include
    international and regional ones, such as [PyCon](https://us.pycon.org) and [EuroPython](https://oreil.ly/nF74d),
    and other more local ones such as [PyOhio](http://www.pyohio.org) and [PyCon Italia](https://www.pycon.it/en).
    Topical conferences include [SciPy](https://www.scipy2022.scipy.org) and [PyData](http://pydata.org/events.xhtml).
    Conferences are often followed by coding sprints, where Python contributors get
    together for several days of coding focused on particular open source projects
    and abundant camaraderie. You can find a listing of conferences on the Community
    [Conferences and Workshops page](https://oreil.ly/asosj). More than 17,000 videos
    of talks about Python, from more than 450 conferences, are available at the [PyVideo
    site](https://pyvideo.org).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 世界各地有许多Python会议。一般的Python会议包括国际和地区性的会议，如[PyCon](https://us.pycon.org)和[EuroPython](https://oreil.ly/nF74d)，以及其他更本地化的会议，如[PyOhio](http://www.pyohio.org)和[PyCon
    Italia](https://www.pycon.it/en)。专题会议包括[SciPy](https://www.scipy2022.scipy.org)和[PyData](http://pydata.org/events.xhtml)。会议通常会跟随编程冲刺，Python贡献者们在几天内聚集在一起，专注于特定开源项目的编码，并享受友谊的互动。您可以在社区的[会议和研讨会页面](https://oreil.ly/asosj)上找到会议列表。超过450个会议的17,000多个关于Python的讲座视频可以在[PyVideo网站](https://pyvideo.org)上找到。
- en: User groups and organizations
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户组织和组织
- en: The Python community has local user groups on every continent except Antarctica^([8](ch01.xhtml#ch01fn10))—more
    than 1,600 of them, according to the list on the [LocalUserGroups wiki](https://oreil.ly/cY6Mk).
    There are Python [meetups](https://oreil.ly/h6oEs) around the world. [PyLadies](http://www.pyladies.com)
    is an international mentorship group, with local chapters, to promote women in
    Python; anyone with an interest in Python is welcome. [NumFOCUS](https://numfocus.org),
    a nonprofit charity promoting open practices in research, data, and scientific
    computing, sponsors the PyData conference and other projects.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Python社区在除南极洲外的每个大陆上都有本地用户组^([8](ch01.xhtml#ch01fn10))，根据[LocalUserGroups wiki](https://oreil.ly/cY6Mk)上的列表，超过1,600个用户组。世界各地都有Python
    [聚会](https://oreil.ly/h6oEs)。[PyLadies](http://www.pyladies.com)是一个国际性的导师组织，拥有本地分部，旨在促进Python中的女性；任何对Python感兴趣的人都欢迎加入。[NumFOCUS](https://numfocus.org)是一个非营利性慈善机构，致力于促进研究、数据和科学计算领域的开放实践，赞助了PyData会议和其他项目。
- en: Mailing lists
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 邮件列表
- en: The Community [Mailing Lists page](https://www.python.org/community/lists) has
    links to several Python-related mailing lists (and some Usenet groups, for those
    of us old enough to remember [Usenet](https://oreil.ly/5qYdq)!). Alternatively,
    search [Mailman](https://mail.python.org/archives) to find active mailing lists
    covering a wide variety of interests. Python-related official announcements are
    posted to the [python-announce list](https://oreil.ly/eg9Ft). To ask for help
    with specific problems, write to [*help@python.org*](mailto:help@python.org).
    For help learning or teaching Python, write to [*tutor@python.org*](mailto:tutor@python.org),
    or, better yet, join the [list](https://oreil.ly/iEQJF). For a useful weekly roundup
    of Python-related news and articles, subscribe to [Python Weekly](http://www.pythonweekly.com).
    You can also follow Python Weekly at *@python_discussions@mastodon.social*.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 社区[邮件列表页面](https://www.python.org/community/lists)包含多个与Python相关的邮件列表（还有一些我们足够老的人还记得的Usenet组）。或者，您可以在[Mailman](https://mail.python.org/archives)中搜索，找到涵盖各种兴趣领域的活跃邮件列表。Python相关的官方公告发布在[python-announce列表](https://oreil.ly/eg9Ft)上。要获取特定问题的帮助，请写信至[*help@python.org*](mailto:help@python.org)。如需Python的学习或教学帮助，请写信至[*tutor@python.org*](mailto:tutor@python.org)，或者更好地加入[列表](https://oreil.ly/iEQJF)。要获取有关Python新闻和文章的有用每周摘要，请订阅[Python
    Weekly](http://www.pythonweekly.com)。您也可以在*@python_discussions@mastodon.social*上关注Python
    Weekly。
- en: Social media
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 社交媒体
- en: 'For an [RSS feed](https://oreil.ly/pf4AS) of Python-related blogs, see [Planet
    Python](http://planetpython.org). If you’re interested in tracking language developments,
    check out [*discuss.python.org*](http://discuss.python.org)—it sends useful summaries
    if you don’t visit regularly. On Twitter, follow @ThePSF. [Libera.Chat](https://libera.chat)
    on [IRC](https://oreil.ly/AXMAf) hosts several Python-related channels: the main
    one is #python. [LinkedIn](https://www.linkedin.com) has many Python groups, including
    [Python Web Developers](https://oreil.ly/-LKFZ). On Slack, join the [PySlackers](https://pyslackers.com)
    community. On Discord, check out [Python Discord](https://pythondiscord.com).
    Technical questions and answers about Python programming can also be found and
    followed on [Stack Overflow](http://stackoverflow.com) under a variety of tags,
    including [[python]](https://oreil.ly/GHoVY). Python is currently the [most active](https://oreil.ly/K3oK3)
    programming language on Stack Overflow, and many useful answers with illuminating
    discussions can be found there. If you like podcasts, check out Python podcasts,
    such as [Python Bytes](https://pythonbytes.fm).'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '若要获取与 Python 相关的博客的 [RSS 订阅](https://oreil.ly/pf4AS)，请参阅 [Planet Python](http://planetpython.org)。如果您关注语言发展，可以查看
    [*discuss.python.org*](http://discuss.python.org)，它会发送有用的摘要，如果您不经常访问的话。在 Twitter
    上，请关注 @ThePSF。[IRC](https://oreil.ly/AXMAf) 上的 [Libera.Chat](https://libera.chat)
    主持多个与 Python 相关的频道：主要频道是 #python。在 LinkedIn 上有许多 Python 群组，包括 [Python Web Developers](https://oreil.ly/-LKFZ)。在
    Slack 上，加入 [PySlackers](https://pyslackers.com) 社区。在 Discord 上，请查看 [Python Discord](https://pythondiscord.com)。关于
    Python 编程的技术问题和答案也可以在 [Stack Overflow](http://stackoverflow.com) 上找到和跟踪，包括各种标签，如
    [[python]](https://oreil.ly/GHoVY)。Python 目前是 Stack Overflow 上活跃度最高的编程语言，并且那里可以找到许多有用的答案和启发性讨论。如果您喜欢播客，可以听听
    Python 相关的播客，例如 [Python Bytes](https://pythonbytes.fm)。'
- en: Installation
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: You can install the classic (CPython) and PyPy versions of Python on most platforms.
    With a suitable development system (C for CPython; PyPy, coded in Python itself,
    only needs CPython installed first), you can install Python versions from the
    respective source code distributions. On popular platforms, you also have the
    recommended alternative of installing prebuilt binary distributions.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上，您可以安装 Python 的经典（CPython）和 PyPy 版本。具备适当的开发系统（对于 CPython 是 C；而 PyPy 则由
    Python 自身编写，只需先安装 CPython），您可以从各自的源代码分发中安装 Python 版本。在流行的平台上，您也可以选择安装预构建的二进制分发版本。
- en: Installing Python if It Comes Preinstalled
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果 Python 已预装，如何安装
- en: 'If your platform comes with a preinstalled version of Python, you’re still
    best advised to install a separate up-to-date version for your own code development.
    When you do, do *not* remove or overwrite your platform’s original version: rather,
    install the new version alongside the first one. This way, you won’t disturb any
    other software that is part of your platform: such software might rely on the
    specific Python version that came with the platform itself.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的平台预装了 Python 的版本，建议您仍然安装一个独立的最新版本进行自己的代码开发。在这种情况下，请*不要*删除或覆盖平台原始版本：而是将新版本安装在原版本旁边。这样做可以避免干扰平台上的其他软件，因为这些软件可能依赖于平台自带的特定
    Python 版本。
- en: Installing CPython from a binary distribution is faster, saves you substantial
    work on some platforms, and is the only possibility if you have no suitable C
    compiler. Installing from source code gives you more control and flexibility,
    and is a must if you can’t find a suitable prebuilt binary distribution for your
    platform. Even if you install from binaries, it’s best to also download the source
    distribution, since it can include examples, demos, and tools that are usually
    missing from prebuilt binaries. We’ll look at how to do both next.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 从二进制分发安装 CPython 更快，可以在某些平台上节省大量工作，并且如果没有适当的 C 编译器，这是唯一的可能性。从源代码安装可以提供更多的控制和灵活性，如果找不到适合您平台的预构建二进制分发版本，这是必须的。即使您从二进制分发安装，最好也下载源代码分发，因为它可能包含通常在预构建二进制分发中缺失的示例、演示和工具。接下来我们将看看如何进行这两种安装方式。
- en: Installing Python from Binaries
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从二进制安装 Python
- en: If your platform is popular and current, you’ll easily find prebuilt, packaged
    binary versions of Python ready for installation. Binary packages are typically
    self-installing, either directly as executable programs or via appropriate system
    tools, such as the Red Hat Package Manager (RPM) on some versions of Linux, and
    the Microsoft Installer (MSI) on Windows. After downloading a package, install
    it by running the program and choosing installation parameters, such as the directory
    where Python is to be installed. In Windows, select the option labeled “Add Python
    3.10 to PATH” to have the installer add the install location into the PATH in
    order to easily use Python at a command prompt (see [“The python Program”](ch02.xhtml#the_python_program)).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的平台受欢迎且当前，你会很容易找到预先构建的、打包的Python二进制版本，可以立即安装。二进制包通常是自安装的，可以直接作为可执行程序安装，也可以通过适当的系统工具安装，如某些Linux版本上的Red
    Hat Package Manager (RPM)和Windows上的Microsoft Installer (MSI)。下载包后，通过运行程序并选择安装参数来安装它，例如Python的安装目录。在Windows中，选择标有“将Python
    3.10添加到PATH”选项，让安装程序将安装位置添加到PATH中，以便在命令提示符下轻松使用Python（参见[“python程序”](ch02.xhtml#the_python_program)）。
- en: 'You can get the “official” binaries from the [Downloads page](https://oreil.ly/b3AP7)
    on the Python website: click the button labeled “Download Python 3.11.x” to download
    the most recent binary suitable for your browser’s platform.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[Python网站的下载页面](https://oreil.ly/b3AP7)获取“官方”二进制文件：点击标有“下载 Python 3.11.x”的按钮，下载适合你浏览器平台的最新二进制文件。
- en: Many third parties supply free binary Python installers for other platforms.
    Installers exist for Linux distributions, whether your distribution is [RPM-based](http://rpmfind.net)
    (Red Hat, Fedora, Mandriva, SUSE, etc.) or [Debian-based](http://www.debian.org)
    (including Ubuntu, probably the most popular Linux distribution at the time of
    this writing). The [Other Platforms page](https://oreil.ly/xvFYV) provides links
    to binary distributions for now somewhat exotic platforms such as AIX, OS/2, RISC
    OS, IBM AS/400, Solaris, HP-UX, and so forth (often not the latest Python versions,
    given the now “quaint” nature of such platforms), as well as one for the very
    current [iOS platform](https://oreil.ly/gnJND), the operating system of the popular
    [iPhone](https://oreil.ly/RelC0) and [iPad](https://oreil.ly/Sb7_n) devices.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 许多第三方为其他平台提供免费的二进制Python安装程序。针对Linux发行版，无论你的发行版是[RPM-based](http://rpmfind.net)（如红帽、Fedora、曼德里维亚、SUSE等）还是[Debian-based](http://www.debian.org)（包括Ubuntu，在撰写本文时可能是最流行的Linux发行版）。[Other
    Platforms页面](https://oreil.ly/xvFYV)提供了链接到二进制发行版的链接，适用于现在有些略显陈旧的平台，如AIX、OS/2、RISC
    OS、IBM AS/400、Solaris、HP-UX等（通常不提供最新的Python版本，因为这些平台现在有些“过时”），以及非常流行的[iOS平台](https://oreil.ly/gnJND)，即流行的[iPhone](https://oreil.ly/RelC0)和[iPad](https://oreil.ly/Sb7_n)设备的操作系统。
- en: '[Anaconda](https://oreil.ly/DxmAG), mentioned earlier in this chapter, is a
    binary distribution including Python, plus the [conda](http://conda.pydata.org/docs)
    package manager, plus hundreds of third-party extensions, particularly for science,
    math, engineering, and data analysis. It’s available for Linux, Windows, and macOS.
    [Miniconda](https://oreil.ly/RrY5_), also mentioned earlier in this chapter, is
    the same package but without all of those extensions; you can selectively install
    subsets of them with conda.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[Anaconda](https://oreil.ly/DxmAG)，在本章前面提到过，是一个二进制发行版，包括Python、[conda](http://conda.pydata.org/docs)软件包管理器，以及数百个第三方扩展，特别适用于科学、数学、工程和数据分析。它适用于Linux、Windows和macOS。[Miniconda](https://oreil.ly/RrY5_)，在本章前面也提到过，是相同的软件包，但没有所有这些扩展；你可以使用conda选择性地安装它们的子集。'
- en: macOS
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: macOS
- en: The popular third-party macOS open source package manager [Homebrew](http://brew.sh)
    offers, among many other open source packages, excellent versions of [Python](https://oreil.ly/rnK6U).
    conda, mentioned in [“Anaconda and Miniconda”](#anaconda_and_miniconda), also
    works well in macOS.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 流行的第三方macOS开源软件包管理器[Homebrew](http://brew.sh)提供了众多其他开源软件包之外，优秀的[Python](https://oreil.ly/rnK6U)版本。在macOS中，如[“Anaconda和Miniconda”](#anaconda_and_miniconda)中提到的，conda也可以很好地工作。
- en: Installing Python from Source Code
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从源代码安装Python
- en: To install CPython from source code, you need a platform with an ISO-compliant
    C compiler and tools such as make. On Windows, the normal way to build Python
    is with Visual Studio (ideally [VS 2022](https://oreil.ly/eblTI), currently available
    to developers [for free](https://oreil.ly/2j1dK)).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要从源代码安装CPython，你需要一个具有ISO兼容的C编译器和像make这样的工具的平台。在Windows上，构建Python的常规方式是使用Visual
    Studio（最好是[VS 2022](https://oreil.ly/eblTI)，目前开发者可以[免费获取](https://oreil.ly/2j1dK)）。
- en: To download the Python source code, visit the [Python Source Releases](https://oreil.ly/HeGVY)
    page (on the Python website, hover over Downloads in the menu bar and select “Source
    code”) and choose your version.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载Python源代码，请访问[Python Source Releases](https://oreil.ly/HeGVY)页面（在Python网站上，悬停在菜单栏中的下载上，并选择“源代码”），然后选择您的版本。
- en: The file under the link labeled “Gzipped source tarball” has a *.tgz* file extension;
    this is equivalent to *.tar.gz* (i.e., a *tar* archive of files, compressed by
    the popular gzip compressor). Alternatively, you can use the link labeled “XZ
    compressed source tarball” to get a version with an extension of *.tar.xz* instead
    of *.tgz*, compressed with the even more powerful xz compressor, if you have all
    the needed tools to deal with XZ compression.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 标签为“Gzipped source tarball”的链接下的文件具有*.tgz*文件扩展名；这相当于*.tar.gz*（即通过流行的gzip压缩器压缩的文件*tar*归档）。或者，您可以使用标签为“XZ
    compressed source tarball”的链接，获取具有*.tar.xz*扩展名的版本，由更强大的xz压缩器压缩，如果您有处理XZ压缩所需的所有工具。
- en: Microsoft Windows
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Microsoft Windows
- en: On Windows, installing Python from source code can be a chore unless you are
    familiar with Visual Studio and used to working in the text-oriented window known
    as the *command prompt*^([9](ch01.xhtml#ch01fn11))—most Windows users prefer to
    simply download the prebuilt [Python from the Microsoft Store](https://oreil.ly/wNIMo).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，从源代码安装Python可能会很麻烦，除非您熟悉Visual Studio并习惯于在称为*命令提示符*的文本导向窗口中工作——大多数Windows用户更倾向于直接从Microsoft
    Store下载预构建的[Python](https://oreil.ly/wNIMo)。
- en: If the following instructions give you any trouble, stick with installing Python
    from binaries, as described in the previous section. It’s best to do a separate
    installation from binaries anyway, even if you also install from source. If you
    notice anything strange while using the version you installed from source, double-check
    with the installation from binaries. If the strangeness goes away, it must be
    due to some quirk in your installation from source, so you know you must double-check
    the details of how you chose to build the latter.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果以下说明给您带来任何麻烦，请坚持按照前一节描述的方式从二进制文件安装Python。即使您还从源代码安装，最好也单独进行二进制文件安装。如果您在使用您从源代码安装的版本时注意到任何奇怪的事情，请与从二进制文件安装双重检查。如果奇怪的事情消失了，那肯定是由于您在构建后者时选择的一些怪癖，因此您知道您必须双重检查您选择构建的详细信息。
- en: 'In the following sections, for clarity, we assume you have made a new folder
    called *%USERPROFILE%\py* (e.g., *c:\users\tim\py*), which you can do, for example,
    by typing the **mkdir** command in any command window. Download the source *.tgz*
    file—for example, *Python-3.11.0.tgz*—to that folder. Of course, you can name
    and place the folder as it best suits you: our name choice is just for expository
    purposes.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，为了清晰起见，我们假设您已经创建了一个名为*%USERPROFILE%\py*（例如，*c:\users\tim\py*）的新文件夹，您可以通过在任何命令窗口中键入**mkdir**命令来实现这一点。将源*.tgz*文件（例如*Python-3.11.0.tgz*）下载到该文件夹中。当然，您可以根据需要命名和放置该文件夹：我们的命名选择仅供解释用途。
- en: Uncompressing and unpacking the Python source code
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解压和展开Python源代码
- en: You can uncompress and unpack a *.tgz* or *.tar.xz* file with, for example,
    the free program [7-Zip](http://www.7-zip.org). Download the appropriate version
    from the [Download page](https://oreil.ly/Fwv5d), install it, and run it on the
    *.tgz* file (e.g., *c:\users\alex\py\Python-3.11.0.tgz*) that you downloaded from
    the Python website. Assuming you downloaded this file into your *%USERPROFILE%\py*
    folder (or moved it there from *%USERPROFILE%\downloads*, if necessary), you will
    now have a folder called *%USERPROFILE%\py\Python-3.11.0* or similar, depending
    on the version you downloaded. This is the root of a tree that contains the entire
    standard Python distribution in source form.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用例如免费程序[7-Zip](http://www.7-zip.org)来解压缩和展开*.tgz*或*.tar.xz*文件。从[下载页面](https://oreil.ly/Fwv5d)下载适当版本，安装并在您从Python网站下载的*.tgz*文件上运行它（例如，*c:\users\alex\py\Python-3.11.0.tgz*）。假设您将此文件下载到*%USERPROFILE%\py*文件夹中（或者如果需要，从*%USERPROFILE%\downloads*移动到那里），您现在将拥有一个名为*%USERPROFILE%\py\Python-3.11.0*或类似的文件夹，具体取决于您下载的版本。这是一个包含整个标准Python分发的源代码树的根。
- en: Building the Python source code
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建Python源代码
- en: Open the *readme.txt* file located in the *PCBuild* subdirectory of this root
    folder with any text editor, and follow the detailed instructions found there.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 用任何文本编辑器打开位于此根文件夹的*PCBuild*子目录中的*readme.txt*文件，并按照其中找到的详细说明操作。
- en: Unix-Like Platforms
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类Unix平台
- en: 'On Unix-like platforms, installing Python from source code is generally simple.^([10](ch01.xhtml#ch01fn12))
    In the following sections, for clarity, we assume you have created a new directory
    named *~/py* and downloaded the source *.tgz* file—for example, *Python-3.11.0.tgz*—to
    that directory. Of course, you can name and place the directory as it best suits
    you: our name choice is just for expository purposes.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在类 Unix 平台上，从源代码安装 Python 通常很简单。^([10](ch01.xhtml#ch01fn12)) 在接下来的章节中，为了清晰起见，假设您已经创建了一个名为
    *~/py* 的新目录，并下载了源码 *.tgz* 文件，例如 *Python-3.11.0.tgz* ——当然，您可以根据需要命名和放置目录：我们的命名选择仅供说明目的。
- en: Uncompressing and unpacking the Python source code
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解压和解包 Python 源代码
- en: 'You can uncompress and unpack a *.tgz* or *.tar.xz* file with the popular GNU
    version of tar. Just type the following at a shell prompt:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用流行的 GNU 版本的 tar 解压和解包 *.tgz* 或 *.tar.xz* 文件。只需在 shell 提示符下输入以下命令：
- en: '[PRE0]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You now have a directory called *~/py/Python-3.11.0* or similar, depending on
    the version you downloaded. This is the root of a tree that contains the entire
    standard Python distribution in source form.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您有一个名为 *~/py/Python-3.11.0* 或类似的目录，具体取决于您下载的版本。这是一个树的根，其中包含整个标准 Python 发布版的源代码形式。
- en: Configuring, building, and testing
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置、构建和测试
- en: 'You’ll find detailed notes in the *README* file inside this directory, under
    the heading “Build instructions,” and we recommend you study those notes. In the
    simplest case, however, all you need may be to give the following commands at
    a shell prompt:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在此目录下的 *README* 文件中找到详细的注释，位于“构建说明”标题下，我们建议您阅读这些注释。然而，在最简单的情况下，您可能只需在 shell
    提示符下输入以下命令：
- en: '[PRE1]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you run **make** without first running **./configure**, **make** implicitly
    runs **./configure**. When **make** finishes, check that the Python you have just
    built works as expected:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在运行 **make** 之前未先运行 **./configure**，**make** 隐式地运行 **./configure**。当 **make**
    完成时，请检查您刚刚构建的 Python 是否正常工作：
- en: '[PRE2]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Usually, **make test** confirms that your build is working, but also informs
    you that some tests have been skipped because optional modules were missing.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，**make test** 确认您的构建工作正常，但还会通知您由于缺少可选模块而跳过了一些测试。
- en: Some of the modules are platform-specific (e.g., some may work only on machines
    running SGI’s ancient [IRIX](https://oreil.ly/SsGHY) operating system); you don’t
    need to worry about them. However, other modules may be skipped because they depend
    on other open source packages that are currently not installed on your machine.
    For example, on Unix, the module _tkinter—needed to run the Tkinter GUI package
    and the IDLE integrated development environment, which come with Python—can be
    built only if **./configure** can find an installation of Tcl/Tk 8.0 or later
    on your machine. See the *README* file for more details and specific caveats about
    different Unix and Unix-like platforms.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一些模块是特定于平台的（例如，某些仅在运行 SGI 古老 [IRIX](https://oreil.ly/SsGHY) 操作系统的机器上工作的模块）；您无需担心它们。但是，其他模块可能会被跳过，因为它们依赖于当前未安装在您的机器上的其他开源软件包。例如，在
    Unix 上，模块 _tkinter —— 用于运行 Tkinter GUI 包和 IDLE 集成开发环境，它们与 Python 一起提供 —— 只有在 **./configure**
    可以在您的机器上找到 Tcl/Tk 8.0 或更高版本的安装时才能构建。有关更多细节和不同 Unix 及类 Unix 平台的特定注意事项，请参阅 *README*
    文件。
- en: Building from source code lets you tweak your configuration in several ways.
    For example, you can build Python in a special way that helps you debug memory
    leaks when you develop C-coded Python extensions, covered in “Building and Installing
    C-Coded Python Extensions” in [Chapter 25](https://oreil.ly/python-nutshell-25).
    **./configure --help** is a good source of information about the configuration
    options you can use.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 从源代码构建使您可以以多种方式调整配置。例如，您可以以特殊方式构建 Python，以帮助您在开发 C 代码的 Python 扩展时调试内存泄漏，详细内容请参阅“构建和安装
    C 编码的 Python 扩展”在 [第 25 章](https://oreil.ly/python-nutshell-25) 中。**./configure
    --help** 是了解可以使用的配置选项的良好信息来源。
- en: Installing after the build
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建后的安装
- en: 'By default, **./configure** prepares Python for installation in */usr/local/bin*
    and */usr/local/lib*. You can change these settings by running **./configure**
    with the option **--prefix** before running **make**. For example, if you want
    a private installation of Python in the subdirectory *py311* of your home directory,
    run:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，**./configure** 准备将 Python 安装在 */usr/local/bin* 和 */usr/local/lib* 中。您可以在运行
    **make** 之前通过在 **./configure** 中使用 **--prefix** 选项来更改这些设置。例如，如果您希望在家目录的子目录 *py311*
    中进行私有安装 Python，请运行：
- en: '[PRE3]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: and continue with **make** as in the previous section. Once you’re done building
    and testing Python, to perform the actual installation of all files, run the following
    command:^([11](ch01.xhtml#ch01fn13))
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 并按照前一节中的方法继续执行**make**。一旦构建和测试Python完成，要执行所有文件的实际安装，请运行以下命令：^([11](ch01.xhtml#ch01fn13))
- en: '[PRE4]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The user running **make install** must have write permissions on the target
    directories. Depending on your choice of target directories, and the permissions
    on those directories, you may need to **su** to *root, bin*, or some other user
    when you run **make install**. The common idiom for this purpose is **sudo make
    install**: if **sudo** prompts for a password, enter your current user’s password,
    not *root*’s. An alternative, and recommended, approach is to install into a virtual
    environment, as covered in [“Python Environments”](ch07.xhtml#python_environments).'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 运行**make install**的用户必须对目标目录具有写权限。根据您选择的目标目录及其权限，当您运行**make install**时，您可能需要**su**为*root*、*bin*或其他某个用户。用于此目的的常见习语是**sudo
    make install**：如果**sudo**提示输入密码，请输入当前用户的密码，而不是*root*的密码。另一种替代且推荐的方法是安装到虚拟环境中，如[“Python环境”](ch07.xhtml#python_environments)中所述。
- en: ^([1](ch01.xhtml#ch01fn4-marker)) For Android, see [*https://wiki.python.org/moin/Android*](https://wiki.python.org/moin/Android),
    and for iPhone and iPad, see [Python for iOS and iPadOS](https://oreil.ly/iYnk3).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.xhtml#ch01fn4-marker)) 对于Android，请参阅[*https://wiki.python.org/moin/Android*](https://wiki.python.org/moin/Android)，对于iPhone和iPad，请参阅[Python
    for iOS and iPadOS](https://oreil.ly/iYnk3)。
- en: ^([2](ch01.xhtml#ch01fn5-marker)) Python versions from 3.11 use “C11 without
    optional features” and specify that “the public API should be compatible with
    C++.”
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch01.xhtml#ch01fn5-marker)) Python 3.11版本开始使用“C11无可选功能”并指定“公共API应与C++兼容”。
- en: ^([3](ch01.xhtml#ch01fn6-marker)) Which can be in many programming languages,
    not just Python.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch01.xhtml#ch01fn6-marker)) 可以用许多编程语言编写，不仅仅是Python。
- en: ^([4](ch01.xhtml#ch01fn7-marker)) In fact, conda’s capabilities extend to other
    languages, and Python is simply another dependency.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch01.xhtml#ch01fn7-marker)) 实际上，conda的功能扩展到其他语言，并且Python只是另一个依赖项。
- en: ^([5](ch01.xhtml#ch01fn8-marker)) 250+ automatically installed with Anaconda,
    7,500+ explicitly installable with **conda install**.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch01.xhtml#ch01fn8-marker)) 通过Anaconda自动安装250+，可以使用**conda install**显式安装7500+。
- en: '^([6](ch01.xhtml#ch01fn9-marker)) A popular business model is *freemium*: releasing
    both a free version and a commercial “premium” version with tech support and,
    perhaps, extra features.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](ch01.xhtml#ch01fn9-marker)) 流行的商业模式是*免费增值*：同时发布免费版本和带有技术支持和可能的额外功能的商业“高级”版本。
- en: ^([7](ch01.xhtml#idm44924591658208-marker)) The Python Software Foundation runs
    significant infrastructure to support the Python ecosystem. Donations to the PSF
    are always welcome.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: ^([7](ch01.xhtml#idm44924591658208-marker)) Python软件基金会运行重要基础设施，支持Python生态系统。欢迎捐赠给PSF。
- en: ^([8](ch01.xhtml#ch01fn10-marker)) We need to mobilize to get more [penguins](https://en.wikipedia.org/wiki/Penguin)
    interested in our language!
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: ^([8](ch01.xhtml#ch01fn10-marker)) 我们需要鼓励更多的[企鹅](https://en.wikipedia.org/wiki/Penguin)对我们的语言感兴趣！
- en: ^([9](ch01.xhtml#ch01fn11-marker)) Or, in modern Windows versions, the vastly
    preferable [Windows Terminal](https://oreil.ly/_Cu97).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: ^([9](ch01.xhtml#ch01fn11-marker)) 或者，在现代Windows版本中，极力推荐使用[Windows Terminal](https://oreil.ly/_Cu97)。
- en: ^([10](ch01.xhtml#ch01fn12-marker)) Most problems with source installations
    concern the absence of various supporting libraries, which may cause some features
    to be missing from the built interpreter. The “Python Developers’ Guide” explains
    [how to handle dependencies on various platforms](https://oreil.ly/j3XJs). [*build-python-from-source.com*](https://oreil.ly/isww-)
    is a helpful site that shows you all the commands necessary to download, build,
    and install a specific version of Python, plus most of the needed supporting libraries
    on several Linux platforms.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: ^([10](ch01.xhtml#ch01fn12-marker)) 源安装的大多数问题涉及各种支持库的缺失，这可能导致构建解释器时某些功能丢失。“Python开发者指南”解释了如何处理各种平台上的依赖关系。[*build-python-from-source.com*](https://oreil.ly/isww-)是一个有用的网站，展示了在多个Linux平台上下载、构建和安装特定版本的Python以及大多数所需支持库的所有命令。
- en: ^([11](ch01.xhtml#ch01fn13-marker)) Or **make altinstall**, if you want to avoid
    creating links to the Python executable and manual pages.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: ^([11](ch01.xhtml#ch01fn13-marker)) 或者**make altinstall**，如果您希望避免创建Python可执行文件和手动页的链接。
