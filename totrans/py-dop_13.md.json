["```py\n$ npm install -g serverless\n```", "```py\n$ git clone https://github.com/serverless/examples.git\n$ cd aws-python-simple-http-endpoint\n$ export AWS_PROFILE=gheorghiu-net\n```", "```py\n$ cat handler.py\nimport json\nimport datetime\n\ndef endpoint(event, context):\n    current_time = datetime.datetime.now().time()\n    body = {\n        \"message\": \"Hello, the current time is \" + str(current_time)\n    }\n\n    response = {\n        \"statusCode\": 200,\n        \"body\": json.dumps(body)\n    }\n\n    return response\n```", "```py\n$ cat serverless.yml\nservice: aws-python-simple-http-endpoint\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: python2.7 # or python3.7, supported as of November 2018\n\nfunctions:\n  currentTime:\n    handler: handler.endpoint\n    events:\n      - http:\n          path: ping\n          method: get\n```", "```py\nprovider:\n  name: aws\n  runtime: python3.7\n```", "```py\n$ serverless deploy\nServerless: Packaging service...\nServerless: Excluding development dependencies...\nServerless: Uploading CloudFormation file to S3...\nServerless: Uploading artifacts...\nServerless:\nUploading service aws-python-simple-http-endpoint.zip file to S3 (1.95 KB)...\nServerless: Validating template...\nServerless: Updating Stack...\nServerless: Checking Stack update progress...\n..............\nServerless: Stack update finished...\nService Information\nservice: aws-python-simple-http-endpoint\nstage: dev\nregion: us-east-1\nstack: aws-python-simple-http-endpoint-dev\nresources: 10\napi keys:\n  None\nendpoints:\n  GET - https://3a88jzlxm0.execute-api.us-east-1.amazonaws.com/dev/ping\nfunctions:\n  currentTime: aws-python-simple-http-endpoint-dev-currentTime\nlayers:\n  None\nServerless:\nRun the \"serverless\" command to setup monitoring, troubleshooting and testing.\n```", "```py\n$ curl https://3a88jzlxm0.execute-api.us-east-1.amazonaws.com/dev/ping\n{\"message\": \"Hello, the current time is 23:16:30.479690\"}%\n```", "```py\n$ serverless invoke --function currentTime\n{\n    \"statusCode\": 200,\n    \"body\": \"{\\\"message\\\": \\\"Hello, the current time is 23:18:38.101006\\\"}\"\n}\n```", "```py\n$ serverless invoke --function currentTime --log\n{\n    \"statusCode\": 200,\n    \"body\": \"{\\\"message\\\": \\\"Hello, the current time is 23:17:11.182463\\\"}\"\n}\n--------------------------------------------------------------------\nSTART RequestId: 5ac3c9c8-f8ca-4029-84fa-fcf5157b1404 Version: $LATEST\nEND RequestId: 5ac3c9c8-f8ca-4029-84fa-fcf5157b1404\nREPORT RequestId: 5ac3c9c8-f8ca-4029-84fa-fcf5157b1404\nDuration: 1.68 ms Billed Duration: 100 ms   Memory Size: 1024 MB\nMax Memory Used: 56 MB\n```", "```py\n$ aws cloudformation describe-stack-resources \\\n  --stack-name aws-python-simple-http-endpoint-dev\n  --region us-east-1 | jq '.StackResources[].ResourceType'\n\"AWS::ApiGateway::Deployment\"\n\"AWS::ApiGateway::Method\"\n\"AWS::ApiGateway::Resource\"\n\"AWS::ApiGateway::RestApi\"\n\"AWS::Lambda::Function\"\n\"AWS::Lambda::Permission\"\n\"AWS::Lambda::Version\"\n\"AWS::Logs::LogGroup\"\n\"AWS::IAM::Role\"\n\"AWS::S3::Bucket\"\n```", "```py\n$ gcloud projects list\nPROJECT_ID                  NAME                        PROJECT_NUMBER\npulumi-gke-testing          Pulumi GKE Testing          705973980178\npythonfordevops-gke-pulumi  pythonfordevops-gke-pulumi  787934032650\n```", "```py\n$ gcloud projects create pythonfordevops-cloudfunction\n```", "```py\n$ gcloud init\nWelcome! This command will take you through the configuration of gcloud.\n\nSettings from your current configuration [pythonfordevops-gke-pulumi] are:\ncompute:\n  region: us-west1\n  zone: us-west1-c\ncore:\n  account: grig.gheorghiu@gmail.com\n  disable_usage_reporting: 'True'\n  project: pythonfordevops-gke-pulumi\n\nPick configuration to use:\n[1] Re-initialize this configuration with new settings\n[2] Create a new configuration\n[3] Switch to and re-initialize existing configuration: [default]\nPlease enter your numeric choice:  2\n\nEnter configuration name. Names start with a lower case letter and\ncontain only lower case letters a-z, digits 0-9, and hyphens '-':\npythonfordevops-cloudfunction\nYour current configuration has been set to: [pythonfordevops-cloudfunction]\n\nChoose the account you would like to use to perform operations for\nthis configuration:\n [1] grig.gheorghiu@gmail.com\n [2] Log in with a new account\nPlease enter your numeric choice:  1\n\nYou are logged in as: [grig.gheorghiu@gmail.com].\n\nPick cloud project to use:\n [1] pulumi-gke-testing\n [2] pythonfordevops-cloudfunction\n [3] pythonfordevops-gke-pulumi\n [4] Create a new project\nPlease enter numeric choice or text value (must exactly match list\nitem):  2\n\nYour current project has been set to: [pythonfordevops-cloudfunction].\n```", "```py\n$ gcloud auth login\n```", "```py\n$ serverless deploy\n\n  Serverless Error ---------------------------------------\n\n  Serverless plugin \"serverless-google-cloudfunctions\"\n  initialization errored: Cannot find module 'serverless-google-cloudfunctions'\nRequire stack:\n- /usr/local/lib/node_modules/serverless/lib/classes/PluginManager.js\n- /usr/local/lib/node_modules/serverless/lib/Serverless.js\n- /usr/local/lib/node_modules/serverless/lib/utils/autocomplete.js\n- /usr/local/lib/node_modules/serverless/bin/serverless.js\n\n  Get Support --------------------------------------------\n     Docs:          docs.serverless.com\n     Bugs:          github.com/serverless/serverless/issues\n     Issues:        forum.serverless.com\n\n  Your Environment Information ---------------------------\n     Operating System:          darwin\n     Node Version:              12.9.0\n     Framework Version:         1.50.0\n     Plugin Version:            1.3.8\n     SDK Version:               2.1.0\n```", "```py\n$ cat package.json\n{\n  \"name\": \"google-python-simple-http-endpoint\",\n  \"version\": \"0.0.1\",\n  \"description\":\n  \"Example demonstrates how to setup a simple HTTP GET endpoint with python\",\n  \"author\": \"Sebastian Borza <sebito91@gmail.com>\",\n  \"license\": \"MIT\",\n  \"main\": \"handler.py\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"dependencies\": {\n    \"serverless-google-cloudfunctions\": \"^2.1.0\"\n  }\n}\n```", "```py\n$ npm install\n```", "```py\n$ serverless deploy\n\n  Error --------------------------------------------------\n\n  Error: ENOENT: no such file or directory,\n  open '/Users/ggheo/.gcloud/keyfile.json'\n```", "```py\n$ cat serverless.yml\n\nservice: python-simple-http-endpoint\n\nframeworkVersion: \">=1.2.0 <2.0.0\"\n\npackage:\n  exclude:\n    - node_modules/**\n    - .gitignore\n    - .git/**\n\nplugins:\n  - serverless-google-cloudfunctions\n\nprovider:\n  name: google\n  runtime: python37\n  project: pythonfordevops-cloudfunction\n  credentials: ~/.gcloud/pythonfordevops-cloudfunction.json\n\nfunctions:\n  currentTime:\n    handler: endpoint\n    events:\n      - http: path\n```", "```py\n$ serverless deploy\nServerless: Packaging service...\nServerless: Excluding development dependencies...\nServerless: Compiling function \"currentTime\"...\nServerless: Uploading artifacts...\n\n  Error --------------------------------------------------\n\n  Error: Not Found\n  at createError\n  (/Users/ggheo/code/mycode/examples/google-python-simple-http-endpoint/\n  node_modules/axios/lib/core/createError.js:16:15)\n  at settle (/Users/ggheo/code/mycode/examples/\n  google-python-simple-http-endpoint/node_modules/axios/lib/\n  core/settle.js:18:12)\n  at IncomingMessage.handleStreamEnd\n  (/Users/ggheo/code/mycode/examples/google-python-simple-http-endpoint/\n  node_modules/axios/lib/adapters/http.js:202:11)\n  at IncomingMessage.emit (events.js:214:15)\n  at IncomingMessage.EventEmitter.emit (domain.js:476:20)\n  at endReadableNT (_stream_readable.js:1178:12)\n  at processTicksAndRejections (internal/process/task_queues.js:77:11)\n\n  For debugging logs, run again after setting the \"SLS_DEBUG=*\"\n  environment variable.\n```", "```py\nsls-python-simple-http-endpoint-dev failed to deploy\n\nsls-python-simple-http-endpoint-dev has resource warnings\nsls-python-simple-http-endpoint-dev-1566510445295:\n{\"ResourceType\":\"storage.v1.bucket\",\n\"ResourceErrorCode\":\"403\",\n\"ResourceErrorMessage\":{\"code\":403,\n\"errors\":[{\"domain\":\"global\",\"location\":\"Authorization\",\n\"locationType\":\"header\",\n\"message\":\"The project to be billed is associated\nwith an absent billing account.\",\n\"reason\":\"accountDisabled\"}],\n\"message\":\"The project to be billed is associated\n with an absent billing account.\",\n \"statusMessage\":\"Forbidden\",\n \"requestPath\":\"https://www.googleapis.com/storage/v1/b\",\n \"httpMethod\":\"POST\"}}\n```", "```py\n$ serverless deploy\n\nDeployed functions\nfirst\n  https://us-central1-pythonfordevops-cloudfunction.cloudfunctions.net/http\n```", "```py\n$ serverless invoke --function currentTime\nServerless: v1os7ptg9o48 {\n    \"statusCode\": 200,\n    \"body\": {\n        \"message\": \"Received a POST request at 03:46:39.027230\"\n    }\n}\n```", "```py\n$ serverless logs --function currentTime\nServerless: Displaying the 4 most recent log(s):\n\n2019-08-23T03:35:12.419846316Z: Function execution took 20 ms,\nfinished with status code: 200\n2019-08-23T03:35:12.400499207Z: Function execution started\n2019-08-23T03:34:27.133107221Z: Function execution took 11 ms,\nfinished with status code: 200\n2019-08-23T03:34:27.122244864Z: Function execution started\n```", "```py\n$ curl \\\nhttps://undefined-pythonfordevops-cloudfunction.cloudfunctions.net/endpoint\n<!DOCTYPE html>\n<html lang=en>\n  <p><b>404.</b> <ins>That’s an error.</ins>\n  <p>The requested URL was not found on this server.\n  <ins>That’s all we know.</ins>\n```", "```py\nprovider:\n  name: google\n  runtime: python37\n  region: us-central1\n  project: pythonfordevops-cloudfunction\n  credentials: /Users/ggheo/.gcloud/pythonfordevops-cloudfunction.json\n```", "```py\n$ curl \\\nhttps://us-central1-pythonfordevops-cloudfunction.cloudfunctions.net/endpoint\n{\n    \"statusCode\": 200,\n    \"body\": {\n        \"message\": \"Received a GET request at 03:51:02.560756\"\n    }\n}%\n```", "```py\n$ brew tap azure/functions\n$ brew install azure-functions-core-tools\n```", "```py\n$ mkdir azure-functions-python\n$ cd azure-functions-python\n```", "```py\n$ brew unlink python\n$ brew install \\\nhttps://raw.githubusercontent.com/Homebrew/homebrew-core/\nf2a764ef944b1080be64bd88dca9a1d80130c558/Formula/python.rb \\\n--ignore-dependencies\n\n$ python3 -V\nPython 3.6.5\n\n$ python3 -m venv .venv\n$ source .venv/bin/activate\n```", "```py\n$ func init python-simple-http-endpoint\nSelect a worker runtime:\n1\\. dotnet\n2\\. node\n3\\. python\n4\\. powershell (preview)\nChoose option: 3\n```", "```py\n$ cd python-simple-http-endpoint\n$ func new\nSelect a template:\n1\\. Azure Blob Storage trigger\n2\\. Azure Cosmos DB trigger\n3\\. Azure Event Grid trigger\n4\\. Azure Event Hub trigger\n5\\. HTTP trigger\n6\\. Azure Queue Storage trigger\n7\\. Azure Service Bus Queue trigger\n8\\. Azure Service Bus Topic trigger\n9\\. Timer trigger\nChoose option: 5\nHTTP trigger\nFunction name: [HttpTrigger] currentTime\nWriting python-simple-http-endpoint/currentTime/__init__.py\nWriting python-simple-http-endpoint/currentTime/function.json\nThe function \"currentTime\" was created successfully\nfrom the \"HTTP trigger\" template.\n```", "```py\n$ cat currentTime/__init__.py\nimport logging\n\nimport azure.functions as func\n\ndef main(req: func.HttpRequest) -> func.HttpResponse:\n    logging.info('Python HTTP trigger function processed a request.')\n\n    name = req.params.get('name')\n    if not name:\n        try:\n            req_body = req.get_json()\n        except ValueError:\n            pass\n        else:\n            name = req_body.get('name')\n\n    if name:\n        return func.HttpResponse(f\"Hello {name}!\")\n    else:\n        return func.HttpResponse(\n             \"Please pass a name on the query string or in the request body\",\n             status_code=400\n        )\n```", "```py\n$ func host start\n\n[8/24/19 12:21:35 AM] Host initialized (299ms)\n[8/24/19 12:21:35 AM] Host started (329ms)\n[8/24/19 12:21:35 AM] Job host started\n[8/24/19 12:21:35 AM]  INFO: Starting Azure Functions Python Worker.\n[8/24/19 12:21:35 AM]  INFO: Worker ID: e49c429d-9486-4167-9165-9ecd1757a2b5,\nRequest ID: 2842271e-a8fe-4643-ab1a-f52381098ae6, Host Address: 127.0.0.1:53952\nHosting environment: Production\nContent root path: python-simple-http-endpoint\nNow listening on: http://0.0.0.0:7071\nApplication started. Press Ctrl+C to shut down.\n[8/24/19 12:21:35 AM] INFO: Successfully opened gRPC channel to 127.0.0.1:53952\n\nHttp Functions:\n\n  currentTime: [GET,POST] http://localhost:7071/api/currentTime\n```", "```py\n$ curl http://127.0.0.1:7071/api/currentTime\\?name\\=joe\nHello joe!%\n```", "```py\nimport datetime\n\ndef main(req: func.HttpRequest) -> func.HttpResponse:\n    logging.info('Python HTTP trigger function processed a request.')\n\n    name = req.params.get('name')\n    if not name:\n        try:\n            req_body = req.get_json()\n        except ValueError:\n            pass\n        else:\n            name = req_body.get('name')\n\n    current_time = datetime.datetime.now().time()\n    if name:\n        return func.HttpResponse(f\"Hello {name},\n        the current time is {current_time}!\")\n    else:\n        return func.HttpResponse(\n             \"Please pass a name on the query string or in the request body\",\n             status_code=400\n        )\n```", "```py\n$ curl http://127.0.0.1:7071/api/currentTime\\?name\\=joe\nHello joe, the current time is 17:26:54.256060!%\n```", "```py\n$ pip install azure.cli\n```", "```py\n$ az interactive\naz>> login\naz>> az group create --name myResourceGroup --location westus2\naz>> az storage account create --name griggheorghiustorage --location westus2 \\\n--resource-group myResourceGroup --sku Standard_LRS\naz>> az functionapp create --resource-group myResourceGroup --os-type Linux \\\n--consumption-plan-location westus2 --runtime python \\\n--name pyazure-devops4all \\\n--storage-account griggheorghiustorage\naz>> exit\n```", "```py\n$ func azure functionapp publish pyazure-devops4all --build remote\nGetting site publishing info...\nCreating archive for current directory...\nPerform remote build for functions project (--build remote).\nUploading 2.12 KB\n\nOUTPUT OMITTED\n\nRunning post deployment command(s)...\nDeployment successful.\nApp container will begin restart within 10 seconds.\nRemote build succeeded!\nSyncing triggers...\nFunctions in pyazure-devops4all:\n    currentTime - [httpTrigger]\n      Invoke url:\n      https://pyazure-devops4all.azurewebsites.net/api/\n      currenttime?code=b0rN93O04cGPcGFKyX7n9HgITTPnHZiGCmjJN/SRsPX7taM7axJbbw==\n```", "```py\n$ curl \"https://pyazure-devops4all.azurewebsites.net/api/currenttime\\\n?code\\=b0rN93O04cGPcGFKyX7n9HgITTPnHZiGCmjJN/SRsPX7taM7axJbbw\\=\\=\\&name\\=joe\"\nHello joe, the current time is 01:20:32.036097!%\n```", "```py\n$ az group delete --name myResourceGroup\n```", "```py\n$ curl -sLS https://get.k3sup.dev | sh\n$ sudo cp k3sup-darwin /usr/local/bin/k3sup\n```", "```py\n$ ssh ubuntu@35.167.68.86 date\nSat Aug 24 21:38:57 UTC 2019\n```", "```py\n$ k3sup install --ip 35.167.68.86 --user ubuntu\nOUTPUT OMITTED\nSaving file to: kubeconfig\n```", "```py\n$ cat kubeconfig\napiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: BASE64_FIELD\n    server: https://35.167.68.86:6443\n  name: default\ncontexts:\n- context:\n    cluster: default\n    user: default\n  name: default\ncurrent-context: default\nkind: Config\npreferences: {}\nusers:\n- name: default\n  user:\n    password: OBFUSCATED\n    username: admin\n```", "```py\n$ export KUBECONFIG=./kubeconfig\n\n$ kubectl cluster-info\nKubernetes master is running at https://35.167.68.86:6443\nCoreDNS is running at\nhttps://35.167.68.86:6443/api/v1/namespaces/kube-system/\nservices/kube-dns:dns/proxy\n\nTo further debug and diagnose cluster problems, use\n'kubectl cluster-info dump'.\n\n$ kubectl get nodes\nNAME            STATUS   ROLES    AGE   VERSION\nip-10-0-0-185   Ready    master   10m   v1.14.6-k3s.1\n```", "```py\n$ brew install faas-cli\n```", "```py\n$ kubectl -n kube-system create sa tiller \\\n  && kubectl create clusterrolebinding tiller \\\n  --clusterrole cluster-admin \\\n  --serviceaccount=kube-system:tiller\nserviceaccount/tiller created\nclusterrolebinding.rbac.authorization.k8s.io/tiller created\n```", "```py\n$ helm init --skip-refresh --upgrade --service-account tiller\n```", "```py\n$ wget \\\nhttps://raw.githubusercontent.com/openfaas/faas-netes/master/namespaces.yml\n\n$ cat namespaces.yml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: openfaas\n  labels:\n    role: openfaas-system\n    access: openfaas-system\n    istio-injection: enabled\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: openfaas-fn\n  labels:\n    istio-injection: enabled\n    role: openfaas-fn\n\n$ kubectl apply -f namespaces.yml\nnamespace/openfaas created\nnamespace/openfaas-fn created\n\n$ helm repo add openfaas https://openfaas.github.io/faas-netes/\n\"openfaas\" has been added to your repositories\n```", "```py\n$ PASSWORD=$(head -c 12 /dev/urandom | shasum| cut -d' ' -f1)\n\n$ kubectl -n openfaas create secret generic basic-auth \\\n--from-literal=basic-auth-user=admin \\\n--from-literal=basic-auth-password=\"$PASSWORD\"\nsecret/basic-auth created\n```", "```py\n$ helm repo update \\\n && helm upgrade openfaas --install openfaas/openfaas \\\n    --namespace openfaas  \\\n    --set basic_auth=true \\\n    --set serviceType=LoadBalancer \\\n    --set functionNamespace=openfaas-fn\n\nOUTPUT OMITTED\n\nNOTES:\nTo verify that openfaas has started, run:\nkubectl --namespace=openfaas get deployments -l \"release=openfaas,app=openfaas\"\n```", "```py\n$ kubectl get service -nopenfaas\nNAME                TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)\nalertmanager        ClusterIP      10.43.193.61    <none>        9093/TCP\nbasic-auth-plugin   ClusterIP      10.43.83.12     <none>        8080/TCP\ngateway             ClusterIP      10.43.7.46      <none>        8080/TCP\ngateway-external    LoadBalancer   10.43.91.91     10.0.0.185    8080:31408/TCP\nnats                ClusterIP      10.43.33.153    <none>        4222/TCP\nprometheus          ClusterIP      10.43.122.184   <none>        9090/TCP\n```", "```py\n$ kubectl port-forward -n openfaas svc/gateway 8080:8080 &\n[1] 29183\nForwarding from 127.0.0.1:8080 -> 8080\n```", "```py\n$ faas-cli new --lang python hello-python\nFolder: hello-python created.\nFunction created in folder: hello-python\nStack file written: hello-python.yml\n```", "```py\n$ cat hello-python.yml\nversion: 1.0\nprovider:\n  name: openfaas\n  gateway: http://127.0.0.1:8080\nfunctions:\n  hello-python:\n    lang: python\n    handler: ./hello-python\n    image: hello-python:latest\n```", "```py\n$ ls -la hello-python\ntotal 8\ndrwx------  4 ggheo  staff  128 Aug 24 15:16 .\ndrwxr-xr-x  8 ggheo  staff  256 Aug 24 15:16 ..\n-rw-r--r--  1 ggheo  staff  123 Aug 24 15:16 handler.py\n-rw-r--r--  1 ggheo  staff    0 Aug 24 15:16 requirements.txt\n\n$ cat hello-python/handler.py\ndef handle(req):\n    \"\"\"handle a request to the function\n    Args:\n        req (str): request body\n    \"\"\"\n\n    return req\n```", "```py\n$ cat hello-python/handler.py\nimport json\nimport datetime\n\ndef handle(req):\n    \"\"\"handle a request to the function\n Args:\n req (str): request body\n \"\"\"\n\n    current_time = datetime.datetime.now().time()\n    body = {\n        \"message\": \"Received a {} at {}\".format(req, str(current_time))\n    }\n\n    response = {\n        \"statusCode\": 200,\n        \"body\": body\n    }\n    return json.dumps(response, indent=4)\n```", "```py\n$ faas-cli build -f ./hello-python.yml\n[0] > Building hello-python.\nClearing temporary build folder: ./build/hello-python/\nPreparing ./hello-python/ ./build/hello-python//function\nBuilding: hello-python:latest with python template. Please wait..\nSending build context to Docker daemon  8.192kB\nStep 1/29 : FROM openfaas/classic-watchdog:0.15.4 as watchdog\n\nDOCKER BUILD OUTPUT OMITTED\n\nSuccessfully tagged hello-python:latest\nImage: hello-python:latest built.\n[0] < Building hello-python done.\n[0] worker done.\n```", "```py\n$ docker images | grep hello-python\nhello-python                          latest\n05b2c37407e1        29 seconds ago      75.5MB\n```", "```py\n$ docker tag hello-python:latest griggheo/hello-python:latest\n```", "```py\nimage: griggheo/hello-python:latest\n```", "```py\n$ faas-cli push -f ./hello-python.yml\n[0] > Pushing hello-python [griggheo/hello-python:latest].\nThe push refers to repository [docker.io/griggheo/hello-python]\nlatest: digest:\nsha256:27e1fbb7f68bb920a6ff8d3baf1fa3599ae92e0b3c607daac3f8e276aa7f3ae3\nsize: 4074\n[0] < Pushing hello-python [griggheo/hello-python:latest] done.\n[0] worker done.\n```", "```py\n$ faas-cli deploy -f ./hello-python.yml\nDeploying: hello-python.\nWARNING! Communication is not secure, please consider using HTTPS.\nLetsencrypt.org offers free SSL/TLS certificates.\nHandling connection for 8080\n\nunauthorized access, run \"faas-cli login\"\nto setup authentication for this server\n\nFunction 'hello-python' failed to deploy with status code: 401\n```", "```py\n$ echo -n $PASSWORD | faas-cli login -g http://localhost:8080 \\\n-u admin --password-stdin\nCalling the OpenFaaS server to validate the credentials...\nHandling connection for 8080\nWARNING! Communication is not secure, please consider using HTTPS.\nLetsencrypt.org offers free SSL/TLS certificates.\ncredentials saved for admin http://localhost:8080\n```", "```py\ngateway: http://localhost:8080\n```", "```py\n    environment:\n      content_type: application/json\n```", "```py\n$ cat hello-python.yml\nversion: 1.0\nprovider:\n  name: openfaas\n  gateway: http://localhost:8080\nfunctions:\n  hello-python:\n    lang: python\n    handler: ./hello-python\n    image: griggheo/hello-python:latest\n    environment:\n      content_type: application/json\n```", "```py\n$ faas-cli deploy -f ./hello-python.yml\nDeploying: hello-python.\nWARNING! Communication is not secure, please consider using HTTPS.\nLetsencrypt.org offers free SSL/TLS certificates.\nHandling connection for 8080\nHandling connection for 8080\n\nDeployed. 202 Accepted.\nURL: http://localhost:8080/function/hello-python\n```", "```py\n$ faas-cli build -f ./hello-python.yml\n$ faas-cli push -f ./hello-python.yml\n$ faas-cli remove -f ./hello-python.yml\n$ faas-cli deploy -f ./hello-python.yml\n```", "```py\n$ curl localhost:8080/function/hello-python --data-binary 'hello'\nHandling connection for 8080\n{\n    \"body\": {\n        \"message\": \"Received a hello at 22:55:05.225295\"\n    },\n    \"statusCode\": 200\n}\n```", "```py\n$ echo -n \"hello\" | faas-cli invoke hello-python\nHandling connection for 8080\n{\n    \"body\": {\n        \"message\": \"Received a hello at 22:56:23.549509\"\n    },\n    \"statusCode\": 200\n}\n```", "```py\n$ npm install cdk -g\n```", "```py\n$ mkdir cdk-lambda-dynamodb-fargate\n$ cd cdk-lambda-dynamodb-fargate\n```", "```py\n$ cdk init app --language=python\nApplying project template app for python\nExecuting Creating virtualenv...\n\n# Welcome to your CDK Python project!\n\nThis is a blank project for Python development with CDK.\nThe `cdk.json` file tells the CDK Toolkit how to execute your app.\n```", "```py\n$ ls -la\ntotal 40\ndrwxr-xr-x   9 ggheo  staff   288 Sep  2 10:10 .\ndrwxr-xr-x  12 ggheo  staff   384 Sep  2 10:10 ..\ndrwxr-xr-x   6 ggheo  staff   192 Sep  2 10:10 .env\n-rw-r--r--   1 ggheo  staff  1651 Sep  2 10:10 README.md\n-rw-r--r--   1 ggheo  staff   252 Sep  2 10:10 app.py\n-rw-r--r--   1 ggheo  staff    32 Sep  2 10:10 cdk.json\ndrwxr-xr-x   4 ggheo  staff   128 Sep  2 10:10 cdk_lambda_dynamodb_fargate\n-rw-r--r--   1 ggheo  staff     5 Sep  2 10:10 requirements.txt\n-rw-r--r--   1 ggheo  staff  1080 Sep  2 10:10 setup.py\n```", "```py\n$ cat app.py\n#!/usr/bin/env python3\n\nfrom aws_cdk import core\n\nfrom cdk_lambda_dynamodb_fargate.cdk_lambda_dynamodb_fargate_stack \\\nimport CdkLambdaDynamodbFargateStack\n\napp = core.App()\nCdkLambdaDynamodbFargateStack(app, \"cdk-lambda-dynamodb-fargate\")\n\napp.synth()\n```", "```py\n$ cat cdk_lambda_dynamodb_fargate/cdk_lambda_dynamodb_fargate_stack.py\nfrom aws_cdk import core\n\nclass CdkLambdaDynamodbFargateStack(core.Stack):\n\n    def __init__(self, scope: core.Construct, id: str, **kwargs) -> None:\n        super().__init__(scope, id, **kwargs)\n\n        # The code that defines your stack goes here\n```", "```py\nfrom cdk_lambda_dynamodb_fargate.cdk_lambda_dynamodb_stack \\\nimport CdkLambdaDynamodbStack\n\nCdkLambdaDynamodbStack(app, \"cdk-lambda-dynamodb\")\n```", "```py\n$ source .env/bin/activate\n```", "```py\n$ pwd\n~/code/examples/aws-python-rest-api-with-dynamodb\n\n$ serverless deploy\nServerless: Stack update finished...\nService Information\nservice: serverless-rest-api-with-dynamodb\nstage: dev\nregion: us-east-1\nstack: serverless-rest-api-with-dynamodb-dev\nresources: 34\napi keys:\n  None\nendpoints:\nPOST - https://tbst34m2b7.execute-api.us-east-1.amazonaws.com/dev/todos\nGET - https://tbst34m2b7.execute-api.us-east-1.amazonaws.com/dev/todos\nGET - https://tbst34m2b7.execute-api.us-east-1.amazonaws.com/dev/todos/{id}\nPUT - https://tbst34m2b7.execute-api.us-east-1.amazonaws.com/dev/todos/{id}\nDELETE - https://tbst34m2b7.execute-api.us-east-1.amazonaws.com/dev/todos/{id}\nfunctions:\n  create: serverless-rest-api-with-dynamodb-dev-create\n  list: serverless-rest-api-with-dynamodb-dev-list\n  get: serverless-rest-api-with-dynamodb-dev-get\n  update: serverless-rest-api-with-dynamodb-dev-update\n  delete: serverless-rest-api-with-dynamodb-dev-delete\nlayers:\n  None\nServerless: Run the \"serverless\" command to setup monitoring, troubleshooting and\n            testing.\n```", "```py\n$ pwd\n~/code/devops/serverless/cdk-lambda-dynamodb-fargate\n\n$ cat cdk_lambda_dynamodb_fargate/cdk_lambda_dynamodb_stack.py\nfrom aws_cdk import core\nfrom aws_cdk import aws_dynamodb\n\nclass CdkLambdaDynamodbStack(core.Stack):\n\n    def __init__(self, scope: core.Construct, id: str, **kwargs) -> None:\n        super().__init__(scope, id, **kwargs)\n\n        # define the table stores Todo items\n        table = aws_dynamodb.Table(self, \"Table\",\n                                    partition_key=aws_dynamodb.Attribute(\n                                      name=\"id\",\n                                      type=aws_dynamodb.AttributeType.STRING),\n                                    read_capacity=10,\n                                    write_capacity=5)\n```", "```py\n$ cat requirements.txt\n-e .\naws-cdk.core\naws-cdk.aws-dynamodb\n\n$ pip install -r requirements.txt\n```", "```py\n$ export AWS_PROFILE=gheorghiu-net\n$ cdk synth\n```", "```py\napp_env = {\"region\": \"us-east-2\"}\nCdkLambdaDynamodbStack(app, \"cdk-lambda-dynamodb\", env=app_env)\n```", "```py\n$ cdk synth\nResources:\n  TableCD117FA1:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      KeySchema:\n        - AttributeName: id\n          KeyType: HASH\n      AttributeDefinitions:\n        - AttributeName: id\n          AttributeType: S\n      ProvisionedThroughput:\n        ReadCapacityUnits: 10\n        WriteCapacityUnits: 5\n    UpdateReplacePolicy: Retain\n    DeletionPolicy: Retain\n    Metadata:\n      aws:cdk:path: cdk-lambda-dynamodb-fargate/Table/Resource\n  CDKMetadata:\n    Type: AWS::CDK::Metadata\n    Properties:\n      Modules: aws-cdk=1.6.1,\n      @aws-cdk/aws-applicationautoscaling=1.6.1,\n      @aws-cdk/aws-autoscaling-common=1.6.1,\n      @aws-cdk/aws-cloudwatch=1.6.1,\n      @aws-cdk/aws-dynamodb=1.6.1,\n      @aws-cdk/aws-iam=1.6.1,\n      @aws-cdk/core=1.6.1,\n      @aws-cdk/cx-api=1.6.1,@aws-cdk/region-info=1.6.1,\n      jsii-runtime=Python/3.7.4\n```", "```py\n$ cdk deploy\ncdk-lambda-dynamodb-fargate: deploying...\ncdk-lambda-dynamodb-fargate: creating CloudFormation changeset...\n 0/3 | 11:12:25 AM | CREATE_IN_PROGRESS   | AWS::DynamoDB::Table |\n Table (TableCD117FA1)\n 0/3 | 11:12:25 AM | CREATE_IN_PROGRESS   | AWS::CDK::Metadata   |\n CDKMetadata\n 0/3 | 11:12:25 AM | CREATE_IN_PROGRESS   | AWS::DynamoDB::Table |\n Table (TableCD117FA1) Resource creation Initiated\n 0/3 | 11:12:27 AM | CREATE_IN_PROGRESS   | AWS::CDK::Metadata   |\n CDKMetadata Resource creation Initiated\n 1/3 | 11:12:27 AM | CREATE_COMPLETE      | AWS::CDK::Metadata   |\n CDKMetadata\n 2/3 | 11:12:56 AM | CREATE_COMPLETE      | AWS::DynamoDB::Table |\n Table (TableCD117FA1)\n 3/3 | 11:12:57 AM | CREATE_COMPLETE      | AWS::CloudFormation::Stack |\n cdk-lambda-dynamodb-fargate\n\nStack ARN:\narn:aws:cloudformation:us-east-2:200562098309:stack/\ncdk-lambda-dynamodb/3236a8b0-cdad-11e9-934b-0a7dfa8cb208\n```", "```py\n$ pwd\n~/code/devops/serverless/cdk-lambda-dynamodb-fargate\n\n$ mkdir lambda\n$ cp ~/code/examples/aws-python-rest-api-with-dynamodb/todos/* lambda\n$ ls -la lambda\ntotal 48\ndrwxr-xr-x   9 ggheo  staff   288 Sep  2 10:41 .\ndrwxr-xr-x  10 ggheo  staff   320 Sep  2 10:19 ..\n-rw-r--r--   1 ggheo  staff     0 Sep  2 10:41 __init__.py\n-rw-r--r--   1 ggheo  staff   822 Sep  2 10:41 create.py\n-rw-r--r--   1 ggheo  staff   288 Sep  2 10:41 decimalencoder.py\n-rw-r--r--   1 ggheo  staff   386 Sep  2 10:41 delete.py\n-rw-r--r--   1 ggheo  staff   535 Sep  2 10:41 get.py\n-rw-r--r--   1 ggheo  staff   434 Sep  2 10:41 list.py\n-rw-r--r--   1 ggheo  staff  1240 Sep  2 10:41 update.py\n```", "```py\n$ cat requirements.txt\n-e .\naws-cdk.core\naws-cdk.aws-dynamodb\naws-cdk.aws-lambda\naws-cdk.aws-apigateway\n\n$ pip install -r requirements.txt\n```", "```py\n$ cat cdk_lambda_dynamodb_fargate/cdk_lambda_dynamodb_stack.py\nfrom aws_cdk import core\nfrom aws_cdk.core import App, Construct, Duration\nfrom aws_cdk import aws_dynamodb, aws_lambda, aws_apigateway\n\nclass CdkLambdaDynamodbStack(core.Stack):\n\n    def __init__(self, scope: core.Construct, id: str, **kwargs) -> None:\n        super().__init__(scope, id, **kwargs)\n\n        # define the table stores Todo todos\n        table = aws_dynamodb.Table(self, \"Table\",\n            partition_key=aws_dynamodb.Attribute(\n                name=\"id\",\n                type=aws_dynamodb.AttributeType.STRING),\n            read_capacity=10,\n            write_capacity=5)\n\n        # define the Lambda functions\n        list_handler = aws_lambda.Function(self, \"TodoListFunction\",\n            code=aws_lambda.Code.asset(\"./lambda\"),\n            handler=\"list.list\",\n            timeout=Duration.minutes(5),\n            runtime=aws_lambda.Runtime.PYTHON_3_7)\n\n        create_handler = aws_lambda.Function(self, \"TodoCreateFunction\",\n            code=aws_lambda.Code.asset(\"./lambda\"),\n            handler=\"create.create\",\n            timeout=Duration.minutes(5),\n            runtime=aws_lambda.Runtime.PYTHON_3_7)\n\n        get_handler = aws_lambda.Function(self, \"TodoGetFunction\",\n            code=aws_lambda.Code.asset(\"./lambda\"),\n            handler=\"get.get\",\n            timeout=Duration.minutes(5),\n            runtime=aws_lambda.Runtime.PYTHON_3_7)\n\n        update_handler = aws_lambda.Function(self, \"TodoUpdateFunction\",\n            code=aws_lambda.Code.asset(\"./lambda\"),\n            handler=\"update.update\",\n            timeout=Duration.minutes(5),\n            runtime=aws_lambda.Runtime.PYTHON_3_7)\n\n        delete_handler = aws_lambda.Function(self, \"TodoDeleteFunction\",\n            code=aws_lambda.Code.asset(\"./lambda\"),\n            handler=\"delete.delete\",\n            timeout=Duration.minutes(5),\n            runtime=aws_lambda.Runtime.PYTHON_3_7)\n\n        # pass the table name to each handler through an environment variable\n        # and grant the handler read/write permissions on the table.\n        handler_list = [\n            list_handler,\n            create_handler,\n            get_handler,\n            update_handler,\n            delete_handler\n        ]\n        for handler in handler_list:\n            handler.add_environment('DYNAMODB_TABLE', table.table_name)\n            table.grant_read_write_data(handler)\n\n        # define the API endpoint\n        api = aws_apigateway.LambdaRestApi(self, \"TodoApi\",\n            handler=list_handler,\n            proxy=False)\n\n        # define LambdaIntegrations\n        list_lambda_integration = \\\n            aws_apigateway.LambdaIntegration(list_handler)\n        create_lambda_integration = \\\n            aws_apigateway.LambdaIntegration(create_handler)\n        get_lambda_integration = \\\n            aws_apigateway.LambdaIntegration(get_handler)\n        update_lambda_integration = \\\n            aws_apigateway.LambdaIntegration(update_handler)\n        delete_lambda_integration = \\\n            aws_apigateway.LambdaIntegration(delete_handler)\n\n        # define REST API model and associate methods with LambdaIntegrations\n        api.root.add_method('ANY')\n\n        todos = api.root.add_resource('todos')\n        todos.add_method('GET', list_lambda_integration)\n        todos.add_method('POST', create_lambda_integration)\n\n        todo = todos.add_resource('{id}')\n        todo.add_method('GET', get_lambda_integration)\n        todo.add_method('PUT', update_lambda_integration)\n        todo.add_method('DELETE', delete_lambda_integration)\n```", "```py\n$ cdk deploy\ncdk-lambda-dynamodb-fargate failed: Error:\nThis stack uses assets, so the toolkit stack must be deployed\nto the environment\n(Run \"cdk bootstrap aws://unknown-account/us-east-2\")\n```", "```py\n$ cdk bootstrap\nBootstrapping environment aws://ACCOUNTID/us-east-2...\nCDKToolkit: creating CloudFormation changeset...\nEnvironment aws://ACCOUNTID/us-east-2 bootstrapped.\n```", "```py\n$ cdk deploy\nOUTPUT OMITTED\n\nOutputs:\ncdk-lambda-dynamodb.TodoApiEndpointC1E16B6C =\nhttps://k6ygy4xw24.execute-api.us-east-2.amazonaws.com/prod/\n\nStack ARN:\narn:aws:cloudformation:us-east-2:ACCOUNTID:stack/cdk-lambda-dynamodb/\n15a66bb0-cdba-11e9-aef9-0ab95d3a5528\n```", "```py\n$ curl -X \\\nPOST https://k6ygy4xw24.execute-api.us-east-2.amazonaws.com/prod/todos \\\n--data '{ \"text\": \"Learn CDK\" }'\n{\"id\": \"19d55d5a-cdb4-11e9-9a8f-9ed29c44196e\", \"text\": \"Learn CDK\",\n\"checked\": false,\n\"createdAt\": \"1567450902.262834\",\n\"updatedAt\": \"1567450902.262834\"}%\n```", "```py\n$ curl -X \\\nPOST https://k6ygy4xw24.execute-api.us-east-2.amazonaws.com/prod/todos \\\n--data '{ \"text\": \"Learn CDK with Python\" }'\n{\"id\": \"58a992c6-cdb4-11e9-9a8f-9ed29c44196e\", \"text\": \"Learn CDK with Python\",\n\"checked\": false,\n\"createdAt\": \"1567451007.680936\",\n\"updatedAt\": \"1567451007.680936\"}%\n```", "```py\n$ curl \\\nhttps://k6ygy4xw24.execute-api.us-east-2.amazonaws.com/\nprod/todos/58a992c6-cdb4-11e9-9a8f-9ed29c44196e\n{\"message\": \"Internal server error\"}%\n```", "```py\n[ERROR] Runtime.ImportModuleError:\nUnable to import module 'get': No module named 'todos'\n```", "```py\nfrom todos import decimalencoder\n```", "```py\nimport decimalencoder\n```", "```py\n$ curl \\\nhttps://k6ygy4xw24.execute-api.us-east-2.amazonaws.com/\nprod/todos/58a992c6-cdb4-11e9-9a8f-9ed29c44196e\n{\"checked\": false, \"createdAt\": \"1567451007.680936\",\n\"text\": \"Learn CDK with Python\",\n\"id\": \"58a992c6-cdb4-11e9-9a8f-9ed29c44196e\",\n\"updatedAt\": \"1567451007.680936\"}\n```", "```py\n$ curl \\\nhttps://k6ygy4xw24.execute-api.us-east-2.amazonaws.com/prod/todos | jq\n[\n  {\n    \"checked\": false,\n    \"createdAt\": \"1567450902.262834\",\n    \"text\": \"Learn CDK\",\n    \"id\": \"19d55d5a-cdb4-11e9-9a8f-9ed29c44196e\",\n    \"updatedAt\": \"1567450902.262834\"\n  },\n  {\n    \"checked\": false,\n    \"createdAt\": \"1567451007.680936\",\n    \"text\": \"Learn CDK with Python\",\n    \"id\": \"58a992c6-cdb4-11e9-9a8f-9ed29c44196e\",\n    \"updatedAt\": \"1567451007.680936\"\n  }\n]\n```", "```py\n$ curl -X DELETE \\\nhttps://k6ygy4xw24.execute-api.us-east-2.amazonaws.com/prod/todos/\n19d55d5a-cdb4-11e9-9a8f-9ed29c44196e\n\n$ curl https://k6ygy4xw24.execute-api.us-east-2.amazonaws.com/prod/todos | jq\n[\n  {\n    \"checked\": false,\n    \"createdAt\": \"1567451007.680936\",\n    \"text\": \"Learn CDK with Python\",\n    \"id\": \"58a992c6-cdb4-11e9-9a8f-9ed29c44196e\",\n    \"updatedAt\": \"1567451007.680936\"\n  }\n]\n```", "```py\n$ curl -X \\\nPUT https://k6ygy4xw24.execute-api.us-east-2.amazonaws.com/prod/todos/\n58a992c6-cdb4-11e9-9a8f-9ed29c44196e \\\n--data '{ \"text\": \"Learn CDK with Python by reading the PyForDevOps book\" }'\n{\"message\": \"Internal server error\"}%\n```", "```py\n[ERROR] Exception: Couldn't update the todo item.\nTraceback (most recent call last):\n  File \"/var/task/update.py\", line 15, in update\n    raise Exception(\"Couldn't update the todo item.\")\n```", "```py\n    data = json.loads(event['body'])\n    if 'text' not in data:\n        logging.error(\"Validation Failed\")\n        raise Exception(\"Couldn't update the todo item.\")\n```", "```py\nExpressionAttributeValues={\n         ':text': data['text'],\n         ':checked': True,\n         ':updatedAt': timestamp,\n       },\n```", "```py\n$ curl -X \\\nPUT https://k6ygy4xw24.execute-api.us-east-2.amazonaws.com/prod/todos/\n58a992c6-cdb4-11e9-9a8f-9ed29c44196e \\\n--data '{ \"text\": \"Learn CDK with Python by reading the PyForDevOps book\"}'\n{\"checked\": true, \"createdAt\": \"1567451007.680936\",\n\"text\": \"Learn CDK with Python by reading the PyForDevOps book\",\n\"id\": \"58a992c6-cdb4-11e9-9a8f-9ed29c44196e\", \"updatedAt\": 1567453288764}%\n```", "```py\n$ curl https://k6ygy4xw24.execute-api.us-east-2.amazonaws.com/prod/todos | jq\n[\n  {\n    \"checked\": true,\n    \"createdAt\": \"1567451007.680936\",\n    \"text\": \"Learn CDK with Python by reading the PyForDevOps book\",\n    \"id\": \"58a992c6-cdb4-11e9-9a8f-9ed29c44196e\",\n    \"updatedAt\": 1567453288764\n  }\n]\n```", "```py\n$ mkdir loadtest; cd loadtest\n$ cat Dockerfile\nFROM blazemeter/taurus\n\nCOPY scripts /scripts\nCOPY taurus.yaml /bzt-configs/\n\nWORKDIR /bzt-configs\nENTRYPOINT [\"sh\", \"-c\", \"bzt -l /tmp/artifacts/bzt.log /bzt-configs/taurus.yaml\"]\n```", "```py\n$ cat taurus.yaml\nexecution:\n- executor: molotov\n  concurrency: 10  # number of Molotov workers\n  iterations: 5  # iteration limit for the test\n  ramp-up: 30s\n  hold-for: 5m\n  scenario:\n    script: /scripts/loadtest.py  # has to be valid Molotov script\n```", "```py\n$ cat scripts/loadtest.py\nimport os\nimport json\nimport random\nimport molotov\nfrom molotov import global_setup, scenario\n\n@global_setup()\ndef init_test(args):\n    BASE_URL=os.getenv('BASE_URL', '')\n    molotov.set_var('base_url', BASE_URL)\n\n@scenario(weight=50)\nasync def _test_list_todos(session):\n    base_url= molotov.get_var('base_url')\n    async with session.get(base_url + '/todos') as resp:\n        assert resp.status == 200, resp.status\n\n@scenario(weight=30)\nasync def _test_create_todo(session):\n    base_url= molotov.get_var('base_url')\n    todo_data = json.dumps({'text':\n      'Created new todo during Taurus/molotov load test'})\n    async with session.post(base_url + '/todos',\n      data=todo_data) as resp:\n        assert resp.status == 200\n\n@scenario(weight=10)\nasync def _test_update_todo(session):\n    base_url= molotov.get_var('base_url')\n    # list all todos\n    async with session.get(base_url + '/todos') as resp:\n        res = await resp.json()\n        assert resp.status == 200, resp.status\n        # choose random todo and update it with PUT request\n        todo_id = random.choice(res)['id']\n        todo_data = json.dumps({'text':\n          'Updated existing todo during Taurus/molotov load test'})\n        async with session.put(base_url + '/todos/' + todo_id,\n          data=todo_data) as resp:\n            assert resp.status == 200\n\n@scenario(weight=10)\nasync def _test_delete_todo(session):\n    base_url= molotov.get_var('base_url')\n    # list all todos\n    async with session.get(base_url + '/todos') as resp:\n        res = await resp.json()\n        assert resp.status == 200, resp.status\n        # choose random todo and delete it with DELETE request\n        todo_id = random.choice(res)['id']\n        async with session.delete(base_url + '/todos/' + todo_id) as resp:\n            assert resp.status == 200\n```", "```py\n$ docker build -t cdk-loadtest .\n```", "```py\n$ mkdir artifacts\n```", "```py\n$ docker run --rm -d \\\n--env BASE_URL=https://k6ygy4xw24.execute-api.us-east-2.amazonaws.com/prod \\\n-v `pwd`/artifacts:/tmp/artifacts cdk-loadtest\n```", "```py\n$ docker logs -f a228f8f9a2bc\n19:26:26 INFO: Taurus CLI Tool v1.13.8\n19:26:26 INFO: Starting with configs: ['/bzt-configs/taurus.yaml']\n19:26:26 INFO: Configuring...\n19:26:26 INFO: Artifacts dir: /tmp/artifacts\n19:26:26 INFO: Preparing...\n19:26:27 INFO: Starting...\n19:26:27 INFO: Waiting for results...\n19:26:32 INFO: Changed data analysis delay to 3s\n19:26:32 INFO: Current: 0 vu  1 succ  0 fail  0.546 avg rt  /\nCumulative: 0.546 avg rt, 0% failures\n19:26:39 INFO: Current: 1 vu  1 succ  0 fail  1.357 avg rt  /\nCumulative: 0.904 avg rt, 0% failures\nETC\n19:41:00 WARNING: Please wait for graceful shutdown...\n19:41:00 INFO: Shutting down...\n19:41:00 INFO: Post-processing...\n19:41:03 INFO: Test duration: 0:14:33\n19:41:03 INFO: Samples count: 1857, 0.00% failures\n19:41:03 INFO: Average times: total 6.465, latency 0.000, connect 0.000\n19:41:03 INFO: Percentiles:\n+---------------+---------------+\n| Percentile, % | Resp. Time, s |\n+---------------+---------------+\n|           0.0 |          0.13 |\n|          50.0 |          1.66 |\n|          90.0 |        14.384 |\n|          95.0 |         26.88 |\n|          99.0 |        27.168 |\n|          99.9 |        27.584 |\n|         100.0 |        27.792 |\n+---------------+---------------+\n```", "```py\n        table = aws_dynamodb.Table(self, \"Table\",\n            partition_key=aws_dynamodb.Attribute(\n                name=\"id\",\n                type=aws_dynamodb.AttributeType.STRING),\n            billing_mode = aws_dynamodb.BillingMode.PAY_PER_REQUEST)\n```", "```py\n+---------------+---------------+\n| Percentile, % | Resp. Time, s |\n+---------------+---------------+\n|           0.0 |         0.136 |\n|          50.0 |         0.505 |\n|          90.0 |         1.296 |\n|          95.0 |         1.444 |\n|          99.0 |         1.806 |\n|          99.9 |         2.226 |\n|         100.0 |          2.86 |\n+---------------+---------------+\n```", "```py\n$ cat cdk_lambda_dynamodb_fargate/cdk_fargate_stack.py\nfrom aws_cdk import core\nfrom aws_cdk import aws_ecs, aws_ec2\n\nclass FargateStack(core.Stack):\n    def __init__(self, scope: core.Construct, id: str, **kwargs) -> None:\n        super().__init__(scope, id, **kwargs)\n\n        vpc = aws_ec2.Vpc(\n            self, \"MyVpc\",\n            cidr= \"10.0.0.0/16\",\n            max_azs=3\n        )\n        # define an ECS cluster hosted within the requested VPC\n        cluster = aws_ecs.Cluster(self, 'cluster', vpc=vpc)\n\n        # define our task definition with a single container\n        # the image is built & published from a local asset directory\n        task_definition = aws_ecs.FargateTaskDefinition(self, 'LoadTestTask')\n        task_definition.add_container('TaurusLoadTest',\n            image=aws_ecs.ContainerImage.from_asset(\"loadtest\"),\n            environment={'BASE_URL':\n            \"https://k6ygy4xw24.execute-api.us-east-2.amazonaws.com/prod/\"})\n\n        # define our fargate service. TPS determines how many instances we\n        # want from our task (each task produces a single TPS)\n        aws_ecs.FargateService(self, 'service',\n            cluster=cluster,\n            task_definition=task_definition,\n            desired_count=1)\n```", "```py\n$ cat app.py\n#!/usr/bin/env python3\n\nfrom aws_cdk import core\n\nfrom cdk_lambda_dynamodb_fargate.cdk_lambda_dynamodb_stack \\\nimport CdkLambdaDynamodbStack\nfrom cdk_lambda_dynamodb_fargate.cdk_fargate_stack import FargateStack\n\napp = core.App()\napp_env = {\n    \"region\": \"us-east-2\",\n}\n\nCdkLambdaDynamodbStack(app, \"cdk-lambda-dynamodb\", env=app_env)\nFargateStack(app, \"cdk-fargate\", env=app_env)\n\napp.synth()\n```", "```py\n$ cdk deploy cdk-fargate\n```", "```py\n       aws_ecs.FargateService(self, 'service',\n           cluster=cluster,\n           task_definition=task_definition,\n           desired_count=5)\n```", "```py\n$ cdk deploy cdk-fargate\n```", "```py\n$ cdk destroy cdk-fargate\n$ cdk destroy cdk-lambda-dynamodb\n```"]