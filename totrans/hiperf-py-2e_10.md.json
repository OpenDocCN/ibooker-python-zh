["```py\nIn [1]: import ipyparallel as ipp\n\nIn [2]: c = ipp.Client()\n\nIn [3]: print(c.ids)\n[0, 1, 2, 3]\n\nIn [4]: c[:].apply_sync(lambda: \"Hello High Performance Pythonistas!\")\nOut[4]:\n['Hello High Performance Pythonistas!',\n 'Hello High Performance Pythonistas!',\n 'Hello High Performance Pythonistas!',\n 'Hello High Performance Pythonistas!']\n```", "```py\nIn [5]: dview=c[:]  # this is a direct view (not a load-balanced view)\n\nIn [6]: with dview.sync_imports():\n   ....:     import os\n   ....:\nimporting os on engine(s)\n\nIn [7]: dview.apply_sync(lambda:os.getpid())\nOut[7]: [16158, 16159, 16160, 16163]\n\nIn [8]: dview.execute(\"import sys\")  # another way to execute commands remotely\n```", "```py\nIn [9]: dview.push({'shared_data':[50, 100]})\nOut[9]: <AsyncResult: _push>\n\nIn [10]: dview.apply_sync(lambda:len(shared_data))\nOut[10]: [2, 2, 2, 2]\n```", "```py\nimport time\nimport ipyparallel as ipp\nfrom ipyparallel import require\n\n@require('random')\ndef estimate_nbr_points_in_quarter_circle(nbr_estimates):\n    ...\n    return nbr_trials_in_quarter_unit_circle\n\nif __name__ == \"__main__\":\n    c = ipp.Client()\n    nbr_engines = len(c.ids)\n    print(\"We're using {} engines\".format(nbr_engines))\n    nbr_samples_in_total = 1e8\n    nbr_parallel_blocks = 4\n\n    dview = c[:]\n\n    nbr_samples_per_worker = nbr_samples_in_total / nbr_parallel_blocks\n    t1 = time.time()\n    nbr_in_quarter_unit_circles = \\\n\n\t     dview.apply_sync(estimate_nbr_points_in_quarter_circle,\n                         nbr_samples_per_worker)\n    print(\"Estimates made:\", nbr_in_quarter_unit_circles)\n\n    nbr_jobs = len(nbr_in_quarter_unit_circles)\n    pi_estimate = sum(nbr_in_quarter_unit_circles) * 4 / nbr_samples_in_total\n    print(\"Estimated pi\", pi_estimate)\n    print(\"Delta:\", time.time() - t1)\n```", "```py\nIn [1]: %run pi_ipython_cluster.py\nWe're using 4 engines\nEstimates made: [19636752, 19634225, 19635101, 19638841]\nEstimated pi 3.14179676\nDelta: 20.68650197982788\n```", "```py\nimport dask.dataframe as dd\n\nN_PARTITIONS = 8\nddf = dd.from_pandas(df, npartitions=N_PARTITIONS, sort=False)\nSCHEDULER = \"processes\"\n\nresults = ddf.apply(ols_lstsq, axis=1, meta=(None, 'float64',)). \\\n              compute(scheduler=SCHEDULER)\n```", "```py\nresults = ddf.apply(ols_lstsq_raw, axis=1, meta=(None, 'float64',), raw=True). \\\n              compute(scheduler=SCHEDULER)\n```", "```py\nimport swifter\n\nresults = df.swifter.progress_bar(False).apply(ols_lstsq_raw, axis=1, raw=True)\n```", "```py\nimport json\nfrom functools import partial\nfrom math import sqrt\n\nimport nsq\n\ndef is_prime(number):\n    if number % 2 == 0:\n        return False\n    for i in range(3, int(sqrt(number)) + 1, 2):\n        if number % i == 0:\n            return False\n    return True\n\ndef write_message(topic, data, writer):\n    response = writer.pub(topic, data)\n    if isinstance(response, nsq.Error):\n        print(\"Error with Message: {}: {}\".format(data, response))\n        return write_message(data, writer)\n    else:\n        print(\"Published Message: \", data)\n\ndef calculate_prime(message, writer):\n    data = json.loads(message.body)\n\n    prime = is_prime(data[\"number\"])\n    data[\"prime\"] = prime\n    if prime:\n        topic = \"prime\"\n    else:\n        topic = \"non_prime\"\n\n    output_message = json.dumps(data).encode(\"utf8\")\n    write_message(topic, output_message, writer)\n    message.finish()  ![1](Images/1.png)\n\nif __name__ == \"__main__\":\n    writer = nsq.Writer([\"127.0.0.1:4150\"])\n    handler = partial(calculate_prime, writer=writer)\n    reader = nsq.Reader(\n        message_handler=handler,\n        nsqd_tcp_addresses=[\"127.0.0.1:4150\"],\n        topic=\"numbers\",\n        channel=\"worker_group_a\",\n    )\n    nsq.run()\n```", "```py\n$ nsqd\n[nsqd] 2020/01/25 13:36:39.333097 INFO: nsqd v1.2.0 (built w/go1.12.9)\n[nsqd] 2020/01/25 13:36:39.333141 INFO: ID: 235\n[nsqd] 2020/01/25 13:36:39.333352 INFO: NSQ: persisting topic/channel metadata\n                                             to nsqd.dat\n[nsqd] 2020/01/25 13:36:39.340583 INFO: TCP: listening on [::]:4150\n[nsqd] 2020/01/25 13:36:39.340630 INFO: HTTP: listening on [::]:4151\n```", "```py\n$ for i in `seq 10000`\n> do\n>   echo {\\\"number\\\": $i} | curl -d@- \"http://127.0.0.1:4151/pub?topic=numbers\"\n> done\n```", "```py\n$ curl \"http://127.0.0.1:4151/stats\"\nnsqd v1.2.0 (built w/go1.12.9)\nstart_time 2020-01-25T14:16:35Z\nuptime 26.087839544s\n\nHealth: OK\n\nMemory:\n   heap_objects                 25973\n   heap_idle_bytes              61399040\n   heap_in_use_bytes            4661248\n   heap_released_bytes          0\n   gc_pause_usec_100            43\n   gc_pause_usec_99             43\n   gc_pause_usec_95             43\n   next_gc_bytes                4194304\n   gc_total_runs                6\n\nTopics:\n   [non_prime      ] depth: 902   be-depth: 0     msgs: 902      e2e%:\n\n   [numbers        ] depth: 0     be-depth: 0     msgs: 3009     e2e%:\n      [worker_group_a           ] depth: 1926  be-depth: 0     inflt: 1\n                                  def: 0    re-q: 0     timeout: 0\n                                  msgs: 3009     e2e%:\n        [V2 electron             ] state: 3 inflt: 1    rdy: 1    fin: 1082\n                                   re-q: 0    msgs: 1083     connected: 15s\n\n   [prime          ] depth: 180   be-depth: 0     msgs: 180      e2e%:\n\nProducers:\n   [V2 electron             ] msgs: 1082     connected: 15s\n      [prime          ] msgs: 180\n      [non_prime      ] msgs: 902\n\n```", "```py\n$ nsq_tail --topic prime -n 5 --nsqd-tcp-address=127.0.0.1:4150\n2020/01/25 14:34:17 Adding consumer for topic: prime\n2020/01/25 14:34:17 INF    1 [prime/tail574169#ephemeral] (127.0.0.1:4150)\n                    connecting to nsqd\n{\"number\": 1, \"prime\": true}\n{\"number\": 3, \"prime\": true}\n{\"number\": 5, \"prime\": true}\n{\"number\": 7, \"prime\": true}\n{\"number\": 11, \"prime\": true}\n```", "```py\n$ python diffusion_numpy_memory2.py\nRuntime for 100 iterations with grid size (256, 256): 1.4418s\n```", "```py\n$ ls\ndiffusion_numpy_memory2.py\nDockerfile\nrequirements.txt\n\n$ cat requirements.txt\nnumpy>=1.18.0\n\n$ cat Dockerfile\nFROM python:3.7\n\nWORKDIR /usr/src/app\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\nCMD python ./diffusion_numpy_memory2.py\n```", "```py\n$ docker build -t high_performance/diffusion2d:numpy-memory2 \\\n               -t high_performance/diffusion2d:latest .\nSending build context to Docker daemon  5.632kB\nStep 1/6 : FROM python:3.7\n ---> 3624d01978a1\nStep 2/6 : WORKDIR /usr/src/app\n ---> Running in 04efc02f2ddf\nRemoving intermediate container 04efc02f2ddf\n ---> 9110a0496749\nStep 3/6 : COPY requirements.txt ./\n ---> 45f9ecf91f74\nStep 4/6 : RUN pip install --no-cache-dir -r requirements.txt\n ---> Running in 8505623a9fa6\nCollecting numpy>=1.18.0 (from -r requirements.txt (line 1))\n  Downloading https://.../numpy-1.18.0-cp37-cp37m-manylinux1_x86_64.whl (20.1MB)\nInstalling collected packages: numpy\nSuccessfully installed numpy-1.18.0\nYou are using pip version 18.1, however version 19.3.1 is available.\nYou should consider upgrading via the 'pip install --upgrade pip' command.\nRemoving intermediate container 8505623a9fa6\n ---> 5abc2df1116f\nStep 5/6 : COPY . .\n ---> 52727a6e9715\nStep 6/6 : CMD python ./diffusion_numpy_memory2.py\n ---> Running in c1e885b926b3\nRemoving intermediate container c1e885b926b3\n ---> 892a33754f1d\nSuccessfully built 892a33754f1d\nSuccessfully tagged high_performance/diffusion2d:numpy-memory2\nSuccessfully tagged high_performance/diffusion2d:latest\n\n$ docker run high_performance/diffusion2d:numpy-memory2\nRuntime for 100 iterations with grid size (256, 256): 1.4493s\n```", "```py\n$ docker images -a\nREPOSITORY                        TAG                 IMAGE ID\nhighperformance/diffusion2d       latest              ceabe8b555ab\nhighperformance/diffusion2d       numpy-memory2       ceabe8b555ab\nhighperformance/diffusion2d       numpy-memory1       66523a1a107d\nhighperformance/diffusion2d       python-memory       46381a8db9bd\nhighperformance/diffusion2d       python              4cac9773ca5e\n```"]