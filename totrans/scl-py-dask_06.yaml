- en: 'Chapter 6\. Advanced Task Scheduling: Futures and Friends'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Dask’s computational flow follows these four main logical steps, which can
    happen concurrently and recursively for each task:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Collect and read the input data.
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define and build the compute graph representing the set of computations that
    needs to be performed on the data.
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the computation (this happens when you run `.compute()`).
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pass the result as data to the next step.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we introduce more ways to control this flow with futures. So far, you have
    mostly seen lazy operations in Dask, where Dask doesn’t do the work until something
    forces the computation. This pattern has a number of benefits, including allowing
    Dask’s optimizer to combine steps when doing so makes sense. However, not all
    tasks are well suited to lazy evaluation. One common pattern not well suited to
    lazy evaluation is *fire-and-forget*, where we call a function for its side effect^([1](ch06.xhtml#id660))
    and necessarily care about the output. Trying to express this with lazy evaluation
    (e.g., `dask.delayed`) results in unnecessary blocking to force computation. When
    lazy evaluation is not what you need, you can explore Dask’s futures. Futures
    can be used for much more than just fire-and-forget, and you can return results
    from them. This chapter will explore a number of common use cases for futures.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-7
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You may already be familiar with futures from Python. Dask’s futures are an
    extension of Python’s concurrent.futures library, allowing you to use them in
    its place. Similar to using Dask DataFrames in place of pandas DataFrames, the
    behavior can be a bit different (although the differences here are smaller).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Dask futures are a part of Dask’s distributed client library, so you will get
    started by importing it with `from dask.distributed import Client`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Despite the name, you can use Dask’s distributed client locally. Refer to [“Distributed
    (Dask Client and Scheduler)”](ch03.xhtml#distributed_ch03_1687438078727) for different
    local deployment types.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Lazy and Eager Evaluation Revisited
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Eager evaluation is the most common form of evaluation in programming, including
    in Python. While most eager evaluation is blocking—that is, the program will not
    move to the next statement until the result is completed—you can still have asynchronous/non-blocking
    eager evaluation. Futures are one way of representing non-blocking eager computation.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'Non-blocking eager evaluation still has some potential downsides compared to
    lazy evaluation. Some of these challenges include:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: The inability to combine adjacent stages (sometimes known as pipelining)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unnecessary computation:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repeated subgraphs cannot be detected by Dask’s optimizer.
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if nothing depends on the result of the future, it may be computed.^([2](ch06.xhtml#id666))
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Potential excessive blocking when futures launch and block on other futures
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A need for more careful memory management
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not all Python code is eagerly evaluated. In Python 3 some built-in functions
    use lazy evaluation, with operators like `map` returning iterators and evaluating
    elements only on request.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Use Cases for Futures
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Many common use cases can be made faster with careful application of futures:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with other async servers (like Tornado)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Although we generally believe that most of the time Dask is not the right solution
    for the “hot path,” there are exceptions, such as dynamically computed analytic
    dashboards.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Request/response pattern
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Make a call to a remote service and (later) block on its result. This can include
    querying services like databases, remote procedure calls, or even websites.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: IO
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Input/output can often be slow, but you know you want them to start happening
    as soon as possible.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Timeouts
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes you care about a result only if you can get it within a certain period
    of time. For example, think of a boosted ML model where you need to make a decision
    within a certain time frame, collecting all scores from available models quickly
    and then skipping any that take too long.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Fire-and-forget
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes you might not care about the result of a function call, but you do
    want to ensure it is called. Futures allow you to ensure a computation occurs
    without having to block on the result.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Actors
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: The results from calling actors are futures. We cover actors in the next chapter.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Launching futures in Dask is non-blocking, whereas computing tasks in Dask is
    blocking. This means that when you submit a future to Dask, while it begins work
    right away, it does not stop (or block) your program from continuing.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Launching Futures
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The syntax for launching Dask futures is a little different than that for `dask.delayed`.
    Dask futures are launched from the Dask distributed client with either `submit`
    for single futures or `map` for multiple futures, as shown in [Example 6-1](#launching_futures_ch06_1686239180753).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-1\. Launching futures
  id: totrans-39
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Unlike with `dask.delayed`, as soon as the future is launched, Dask begins to
    compute the value.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: While this `map` is somewhat similar to the `map` on Dask bags, each item results
    in a separate task, whereas bags are able to group together tasks into partitions
    to reduce the overhead (although they are lazily evaluated).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Some actions in Dask, like `persist()` on Dask collections, use futures under
    the hood. You can get the futures of the persisted collection by calling `futures_of`.
    These futures follow the same life cycle as the futures that you launch yourself.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Future Life Cycle
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Futures have a different life cycle from `dask.delayed` beyond eager computation.
    With `dask.delayed`, intermediate computations are automatically cleaned up; however,
    Dask futures results are stored until either the future is explicitly canceled
    or the reference to it is garbage collected in Python. If you no longer need the
    value of a future, you can cancel it and free any storage space or cores used
    by calling `.cancel`. The future life cycle is illustrated in [Example 6-2](#future_lifecycle_ch06_1686239207398).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 期货与`dask.delayed`有着不同的生命周期，超出了急切计算。使用`dask.delayed`时，中间计算会自动清理；然而，Dask期货的结果会一直保存，直到期货显式取消或其引用在Python中被垃圾回收。如果你不再需要期货的值，你可以取消它并释放任何存储空间或核心，方法是调用`.cancel`。期货的生命周期在[示例 6-2](#future_lifecycle_ch06_1686239207398)中有所说明。
- en: Example 6-2\. Future life cycle
  id: totrans-47
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-2\. 期货生命周期
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Canceling a future behaves differently than deleting or depending on garbage
    collection. If there is another reference to the future, then deleting or setting
    the individual reference to None will not cancel the future. This means the result
    will remain stored in Dask. On the other hand, canceling futures has the downside
    that if you are incorrect and the futures value is needed, this will cause an
    error.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 取消期货的行为与删除或依赖垃圾回收不同。如果有其他引用指向期货，则删除或将单个引用设置为`None`将不会取消期货。这意味着结果将继续存储在Dask中。另一方面，取消期货的缺点是，如果你错误地需要期货的值，这将导致错误。
- en: Warning
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: When using Dask in a Jupyter notebook, the notebook may “hold on to” the result
    of any previous cell, so even if the future is unnamed, it will remain present
    in Dask. There is a [discussion on Discourse](https://oreil.ly/zyy2H) with more
    context for those interested.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在Jupyter笔记本中使用Dask时，笔记本可能会“保留”任何先前单元格的结果，因此即使期货未命名，它也将保留在Dask中。有一个关于此的[讨论](https://oreil.ly/zyy2H)，对于有兴趣的人来说，可以了解更多背景。
- en: 'The string representation of a future will show you where it is in its life
    cycle (e.g., `Future: slow status: cancelled,`).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '期货的字符串表示将向你展示它在生命周期中的位置（例如，`Future: slow status: cancelled,`）。'
- en: Fire-and-Forget
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 火而忘之
- en: Sometimes you no longer need a future, but you also don’t want it to be canceled.
    This pattern is called fire-and-forget. This is most useful for things like writing
    data out, updating a database, or other side effects. If all reference to a future
    is lost, garbage collection can result in the future being canceled. To work around
    this, Dask has the aptly named `fire_and_forget` method, which allows you to take
    advantage of this pattern, as shown in [Example 6-3](#fire_and_forget_ch06_1686239249531),
    without needing to keep references around.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你不再需要一个期货，但你也不希望它被取消。这种模式称为火而忘之。这在像写数据、更新数据库或其他副作用的情况下最有用。如果所有对期货的引用都丢失了，垃圾回收可能导致期货被取消。为了解决这个问题，Dask有一个名为`fire_and_forget`的方法，可以让你利用这种模式，就像在[示例 6-3](#fire_and_forget_ch06_1686239249531)中展示的那样，而不需要保留引用。
- en: Example 6-3\. Fire-and-forget
  id: totrans-55
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-3\. 火而忘之
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Retrieving Results
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索结果
- en: More commonly, you will eventually want to know what the future has computed
    (or even just if it encountered an error). For futures that are not just side
    effects, you’ll eventually want to get the return value (or error) from the futures.
    Futures have the blocking method `result`, as shown in [Example 6-4](#get_result_ch06_1686239283618),
    which gives you back the value computed in the future or raises the exception
    from the future.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 更常见的是，你最终会想知道期货计算了什么（甚至只是是否遇到了错误）。对于不仅仅是副作用的期货，你最终会想要从期货获取返回值（或错误）。期货有阻塞方法`result`，如[示例 6-4](#get_result_ch06_1686239283618)所示，它会将期货中计算的值返回给你，或者从期货中引发异常。
- en: Example 6-4\. Getting the result
  id: totrans-59
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-4\. 获取结果
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can extend this to multiple futures, as in [Example 6-5](#get_a_list_of_results_ch06_1686239329136),
    but there are ways to do it faster.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以扩展到多个期货，如[示例 6-5](#get_a_list_of_results_ch06_1686239329136)，但有更快的方法可以做到。
- en: Example 6-5\. Getting a list of results
  id: totrans-62
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-5\. 获取结果列表
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you’ve got multiple futures together—say, you created them with `map`—you
    can get the results back as they become available (see [Example 6-6](#get_list_results_as_avail_ch06_1686239357228)).
    If you can process the results out of order, this can greatly improve your processing
    time.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你同时拥有多个期货（例如通过`map`创建），你可以在它们逐步可用时获取结果（参见[示例 6-6](#get_list_results_as_avail_ch06_1686239357228)）。如果可以无序处理结果，这可以极大地提高处理时间。
- en: Example 6-6\. Getting a list of results as they become available
  id: totrans-65
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-6\. 当结果逐步可用时获取结果列表
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding example, by processing futures as they complete you can have
    the main thread do its “business logic” (similar to `combine` step for an aggregate)
    for each element as it becomes available. If the futures finish at different times,
    this can be a large speed increase.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，通过处理完成的 futures，你可以让主线程在每个元素变得可用时执行其“业务逻辑”（类似于聚合的 `combine` 步骤）。如果 futures
    在不同的时间完成，这可能会大大提高速度。
- en: If you have a deadline, like scoring a model for ad serving^([3](ch06.xhtml#id675))
    or doing something funky with the stock market, you might not want to wait for
    all of your futures. Instead, the `wait` function allows you to fetch results
    with a timeout, as shown in [Example 6-7](#get_the_first_future_ch06_1686239413080).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个截止期限，比如为广告服务评分^([3](ch06.xhtml#id675)) 或者与股票市场进行一些奇特的操作，你可能不想等待所有的 futures。相反，`wait`
    函数允许你在超时后获取结果，如 [示例 6-7](#get_the_first_future_ch06_1686239413080) 所示。
- en: Example 6-7\. Getting the first future (within a time limit)
  id: totrans-69
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-7\. 获取第一个 future（在时间限制内）
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This time limit can apply either to the entire set or to one future at a time.
    If you want all features finished by a given time, then you need a bit more work,
    as shown in [Example 6-8](#get_any_futures_that_finish_ch06_1686239442955).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个时间限制可以应用于整个集合，也可以应用于一个 future。如果你想要所有的特性在给定时间内完成，那么你需要做更多的工作，如 [示例 6-8](#get_any_futures_that_finish_ch06_1686239442955)
    所示。
- en: Example 6-8\. Getting any futures that finish within a time limit
  id: totrans-72
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-8\. 获取在时间限制内完成的任何 futures
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now that you can get the results from futures, you can compare the execution
    time of `dask.delayed` versus Dask futures, as shown in [Example 6-9](#how_futures_faster_ch06_1686239467057).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以从 futures 中获取结果了，你可以比较 `dask.delayed` 与 Dask futures 的执行时间，如 [示例 6-9](#how_futures_faster_ch06_1686239467057)
    所示。
- en: Example 6-9\. Seeing that futures can be faster
  id: totrans-75
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-9\. 查看 futures 可能更快
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this (albeit contrived) example, you can see how, by starting the work as
    soon as possible, the future is completed by the time you get the result, whereas
    the `dask.delayed` starts only when you get there.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个（虽然有些牵强的）例子中，你可以看到，通过尽早开始工作，future 在你得到结果时已经完成了，而 `dask.delayed` 则是在你到达时才开始的。
- en: Nested Futures
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套 Futures
- en: As with `dask.delayed`, you can also launch futures from inside futures. The
    syntax is a bit different, as you need to get an instance of the `client` object,
    which is not serializable, so `dask.distributed` has the special function `get_client`
    to get the client inside a distributed function. Once you have the client, you
    can then launch the future like normal, as shown in [Example 6-10](#ex_nested).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `dask.delayed` 一样，你也可以从内部启动 futures。语法略有不同，因为你需要获取 `client` 对象的实例，它不可序列化，所以
    `dask.distributed` 有一个特殊函数 `get_client` 来在分布式函数中获取 client。一旦你有了 client，你就可以像平常一样启动
    future，如 [示例 6-10](#ex_nested) 所示。
- en: Example 6-10\. Launching a nested future
  id: totrans-80
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-10\. 启动一个嵌套 future
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that since Dask uses a centralized scheduler, the client is communicating
    with that centralized scheduler to determine where to place the future.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，由于 Dask 使用集中式调度程序，客户端正在与该集中式调度程序通信，以确定在哪里放置 future。
- en: Conclusion
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: While Dask’s primary building block is `dask.delayed`, it’s not the only option.
    You can control more of your execution flow by using Dask’s futures. Futures are
    ideal for I/O, model inference, and deadline-sensitive applications. In exchange
    for this additional control, you are responsible for managing the life cycle of
    your futures and the data they produce in a way that you are not with `dask.delayed`.
    Dask also has a number of distributed data structures, including queues, variables,
    and locks. While these distributed data structures are more expensive than their
    local counterparts, they also give you another layer of flexibility around controlling
    your task scheduling.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Dask 的主要构建块是 `dask.delayed`，但它并不是唯一的选择。你可以通过使用 Dask 的 futures 来控制更多的执行流程。Futures
    非常适合 I/O、模型推断和对截止日期敏感的应用程序。作为对这种额外控制的交换，你需要负责管理 futures 的生命周期以及它们产生的数据，这是使用 `dask.delayed`
    时不需要的。Dask 还有许多分布式数据结构，包括队列、变量和锁。虽然这些分布式数据结构比它们的本地对应物更昂贵，但它们也为你在控制任务调度方面提供了另一层灵活性。
- en: ^([1](ch06.xhtml#id660-marker)) Like writing a file to disk or updating a database
    record.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch06.xhtml#id660-marker)) 就像写入磁盘文件或更新数据库记录一样。
- en: ^([2](ch06.xhtml#id666-marker)) Although if the only reference to it gets garbage
    collected, it may not.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch06.xhtml#id666-marker)) 不过，如果它的唯一引用被垃圾回收了，可能就不行了。
- en: ^([3](ch06.xhtml#id675-marker)) We believe that this is one of the areas in
    which Dask has more room for growth, and if you do want to implement a microservice
    for deadline-critical events, you may want to explore using Dask in conjunction
    with other systems, like Ray.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch06.xhtml#id675-marker)) 我们认为这是 Dask 在发展空间较大的领域之一，如果你想要为截止日期关键事件实现微服务，可能需要考虑将
    Dask 与 Ray 等其他系统结合使用。
