["```py\ndef create_word_list(filename):   #1\n **'''** #2\n **filename is the name of a file that has one English word per line.**\n\n **Return a list of the words in the file.**\n    '''\n    file = open(filename)        #3\n    words = []\n    for line in file:              #4\n        words.append(line.strip())    #5\n    file.close()\n    return words\n```", "```py\ndef add_letter(word):\n '''\n word is a string with at least one letter.\n\n Return a list of all the strings that can be obtained by\n adding one letter to word.\n '''\n    words = []\n    for i in range(len(word) + 1):         #1\n        for c in 'abcdefghijklmnopqrstuvwxyz':  #2\n            new_word = word[:i] + c + word[i:]    #3\n            words.append(new_word)       #4\n    return words\n```", "```py\n>>> add_letter('cu')\n```", "```py\ndef delete_letter(word):\n '''\n word is a string with at least one letter.\n\n Return a list of all the strings that can be obtained by\n deleting one letter from word.\n\n >>> delete_letter('carf')\n ['arf', 'crf', 'caf', 'car']\n >>> delete_letter('a')\n ['']\n '''\n    words = []\n    for i in range(len(word)):        #1\n            new_word = word[:i] + word[i + 1:]      #2\n            words.append(new_word)     #3\n    return words\n```", "```py\ndef change_letter(word):\n '''\n word is a string with at least one letter.\n\n Return a list of all the strings that can be obtained by\n changing one letter to another letter in word.\n '''\n    words = []\n    for i in range(len(word)):          #1\n        for c in 'abcdefghijklmnopqrstuvwxyz':       #2\n            if c != word[i]:                             #3\n                new_word = word[:i] + c + word[i + 1:]    #4\n                words.append(new_word)    #5\n    return words\n```", "```py\ndef all_possible_words(word):\n '''\n word is a string with at least one letter.\n\n Return a list of all the strings that can be obtained by\n adding one letter to word, deleting one letter from word,\n or changing one letter in word.\n '''\n    return add_letter(word) + delete_letter(word) \\    #1\n             + change_letter(word)    #2\n```", "```py\ndef all_real_words(word_list, possible_words):\n '''\n word_list is a list of English words.\n possible_words is a list of possible words.\n\n Return a list of words from possible_words that are in word_list.\n >>> english_words = ['scarf', 'cat', 'card', 'cafe']\n >>> possible_words = ['carfe', 'card', 'cat', 'cafe']\n >>> all_real_words(english_words, possible_words)\n ['card', 'cat', 'cafe']\n '''\n    real_words = []\n    for word in possible_words:       #1\n        if word in word_list:           #2\n            real_words.append(word)    #3\n    return real_words\n```", "```py\ndef get_spelling_suggestions(word_file, possible_word):\n '''\n word_file is the name of a file that has one English word per line.\n possible_word is a string that may or may not be a real word.\n\n Return the list of all possible unique corrections \n for possible_word.\n '''\n    word_list = create_word_list(word_file)        #1\n    possible_words = all_possible_words(possible_word)        #2\n    real_words = all_real_words(word_list, possible_words)    #3\n    return list(set(real_words))    #4\n```", "```py\ndef spell_check(word_file):\n '''\n word_file is the name of a file that has one English word per line.\n Ask user for a word.\n Print all possible corrections for the word, one per line.\n '''\n    word = input('Enter a word: ')                          #1\n    suggestions = get_spelling_suggestions(word_file, word)    #2\n    for suggestion in suggestions:     #3\n        print(suggestion)    #4\n```", "```py\nspell_check('wordlist.txt')\n```", "```py\nEnter a word: sucessful\nsuccessful\n```", "```py\ndef process_orders(orders):\n    total_price = 0\n    for order in orders:\n        price = order['price']\n        quantity = order['quantity']\n        total_price += price * quantity\n    tax = total_price * 0.08\n    total_price_with_tax = total_price + tax\n    report = f\"Total price: ${total_price:.2f}\\n\"\n    report += f\"Tax: ${tax:.2f}\\n\"\n    if total_price_with_tax > 100:\n        discount = total_price_with_tax * 0.1\n        total_price_with_tax -= discount\n        report += f\"Discount: ${discount:.2f}\\n\"\n    report += f\"Total price with tax: ${total_price_with_tax:.2f}\\n\"\n    print(report)\n\na = {'price': 20, 'quantity': 5}\nlst = [a]\nprocess_orders(lst)\n```", "```py\ndef calculate_average(numbers):\n    total = sum(numbers)\n    count = len(numbers)\n    return total / count\n\ndef process_numbers(data):\n    valid_numbers = [n for n in data if isinstance(n, int)]\n    average = calculate_average(valid_numbers)\n    print(f\"The average of the valid numbers is: {average}\")\n\n# Test Case 1\ndata = [10, 20, 'a', 30, 'b', 40]\nprocess_numbers(data)\n\n# Test Case 2\ndata = ['a', 'b']\nprocess_numbers(data)\n```"]