- en: Chapter 2\. Modern Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。现代Python
- en: It’s all in a day’s work for Confuse-a-Cat.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这都是Confuse-a-Cat每天的工作内容。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Monty Python
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Monty Python
- en: Preview
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预览
- en: 'Python evolves to keep up with our changing technical world. This chapter discusses
    specific Python features that apply to issues in the previous chapter, and a few
    extras:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Python在与我们变化的技术世界保持同步时在进化。本章讨论了适用于前一章问题的具体Python功能，以及一些额外的：
- en: Tools
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具
- en: APIs and services
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API和服务
- en: Variables and type hinting
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量和类型提示
- en: Data structures
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据结构
- en: Web frameworks
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web框架
- en: Tools
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具
- en: 'Every computing language has the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每种计算语言都有以下内容：
- en: The core language and built-in standard packages
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心语言和内置标准包
- en: Ways to add external packages
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加外部包的方法
- en: Recommended external packages
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推荐的外部包
- en: An environment of development tools
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发工具环境
- en: The following sections list the Python tools required or recommended for this
    book.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的章节列出了本书所需或推荐的Python工具。
- en: These may change over time! Python packaging and development tools are moving
    targets, and better solutions come along now and then.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可能随时间而改变！Python的打包和开发工具是移动的目标，时不时会有更好的解决方案出现。
- en: Getting Started
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: You should be able to write and run a Python program like [Example 2-1](#ex-2-1).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够编写和运行像[示例 2-1](#ex-2-1)这样的Python程序。
- en: 'Example 2-1\. The Python program that goes like this: this.py'
  id: totrans-21
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例2-1。这个Python程序是这样的：this.py
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To execute this program from the command line in a text window or terminal,
    I’ll use the convention of a `$` *prompt* (your system begging you to type something,
    already). What you type after the prompt is shown in **`bold print`**. If you
    saved [Example 2-1](#ex-2-1) to a file named *this.py*, you can run it as shown
    in [Example 2-2](#ex-2-2).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要在文本窗口或终端命令行中执行此程序，我将使用一个`$` *提示*（系统请求您输入一些内容）。您在提示后键入的内容显示为**`bold print`**。如果您已将[示例 2-1](#ex-2-1)保存为*this.py*文件，则可以像在[示例 2-2](#ex-2-2)中显示的那样运行它。
- en: Example 2-2\. Test this.py
  id: totrans-24
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例2-2。测试this.py
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Some code examples use the interactive Python interpreter, which is what you
    get if you just type **`python`**:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一些代码示例使用交互式的Python解释器，只需键入**`python`**即可获得：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The first few lines are specific to your operating system and Python version.
    The `>>>` is your prompt here. A handy extra feature of the interactive interpreter
    is that it will print the value of a variable for you if you type its name:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 前几行是特定于您的操作系统和Python版本。这里的`>>>`是您的提示符。交互解释器的一个方便额外功能是，如果您键入其名称，它将为您打印变量的值：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This also works for expressions:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这也适用于表达式：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you’re fairly new to Python or would like a quick review, read the next few
    sections.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对Python比较陌生或想要快速复习，可以阅读接下来的几节。
- en: Python Itself
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python本身
- en: You will need, as a bare minimum, Python 3.7. This includes features like type
    hints and asyncio, which are core requirements for FastAPI. I recommend using
    at least Python 3.9, which will have a longer support lifetime. The standard source
    for Python is the [Python Software Foundation](https://www.python.org).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你至少需要Python 3.7作为基本要求。这包括像类型提示和asyncio这样的功能，这些是FastAPI的核心要求。我建议至少使用Python 3.9，它将有更长的支持周期。Python的标准来源是[Python软件基金会](https://www.python.org)。
- en: Package Management
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包管理
- en: You will want to download external Python packages and install them safely on
    your computer. The classic tool for this is [pip](https://pip.pypa.io).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你会想要在计算机上安全下载外部的Python包并将其安装。这方面的经典工具是[pip](https://pip.pypa.io)。
- en: But how do you download this downloader? If you installed Python from the Python
    Software Foundation, you should already have pip. If not, follow the instructions
    at the pip site to get it. Throughout this book, as I introduce a new Python package,
    I’ll include the pip command to download it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 但是你如何下载这个下载器呢？如果你从Python软件基金会安装了Python，你应该已经有了pip。如果没有，请按照pip网站上的说明获取它。在本书中，当我介绍一个新的Python包时，我会包括下载它的pip命令。
- en: Although you can do a lot with plain old pip, you’ll likely also want to use
    virtual environments and consider an alternative tool like Poetry.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以用普通的pip做很多事情，但你可能也想使用虚拟环境，并考虑像Poetry这样的替代工具。
- en: Virtual Environments
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚拟环境
- en: Pip will download and install packages, but where should it put them? Although
    standard Python and its included libraries are usually installed in a standard
    place on your operating system, you may not (and probably should not) be able
    to change anything there. Pip uses a default directory other than the system one,
    so you won’t step on your system’s standard Python files. You can change this;
    see the pip site for details for your operating system.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Pip将下载和安装软件包，但它们应该放在哪里？尽管标准Python及其包含的库通常安装在操作系统的标准位置，但您可能（并且可能不应该）能够在那里进行任何更改。Pip使用除系统目录之外的默认目录，因此您不会覆盖系统的标准Python文件。您可以更改此设置；有关详细信息，请参阅pip网站，了解适用于您操作系统的详情。
- en: But it’s common to work with multiple versions of Python, or make installations
    specific to a project, so you know exactly which packages are in there. To do
    this, Python supports *virtual environments*. These are just directories (*folders*
    in the non-Unix world) into which pip writes downloaded packages. When you *activate*
    a virtual environment, your shell (main system command interpreter) looks there
    first when loading Python modules.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但是通常会使用多个版本的Python，或者为项目安装特定的版本，这样你就能确切地知道其中包含哪些软件包。为此，Python支持*虚拟环境*。这些只是目录（在非Unix世界中称为*文件夹*），pip将下载的软件包写入其中。当你*激活*一个虚拟环境时，你的Shell（主系统命令解释器）在加载Python模块时首先查找这些目录。
- en: The program for this is [venv](https://oreil.ly/9kv5T), and it’s been included
    with standard Python since version 3.4.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序就是[venv](https://oreil.ly/9kv5T)，自Python 3.4版本起就已经包含在标准Python中。
- en: 'Let’s make a virtual environment called `venv1`. You can run the venv module
    as a standalone program:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`venv1`的虚拟环境。您可以像独立程序一样运行venv模块：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Or as a Python module:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 或作为Python模块：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To make this your current Python environment, run this shell command (on Linux
    or Mac; see the venv docs for Windows and others):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要使这成为您当前的Python环境，请运行此Shell命令（在Linux或Mac上；有关Windows和其他系统的详情，请参阅venv文档）：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, anytime you run `pip install`, it will install packages under `venv1`.
    And when you run Python programs, that’s where your Python interpreter and modules
    will be found.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每次你运行`pip install`，它将在`venv1`下安装软件包。当你运行Python程序时，Python解释器和模块就在那里。
- en: To *de*activate your virtual environment, press Control-D (Linux or Mac), or
    type `**deactivate**` (Windows).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要*停用*你的虚拟环境，请按Control-D（Linux或Mac），或者键入`**deactivate**`（Windows）。
- en: You can create alternative environments like `venv2`, and deactivate/activate
    to step between them (although I hope you have more naming imagination than me).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以创建像`venv2`这样的备选环境，并在它们之间进行停用/激活操作（尽管我希望你的命名想象力比我更强）。
- en: Poetry
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Poetry
- en: This combination of pip and venv is so common that people started combining
    them to save steps and avoid that `source` shell wizardry. One such package is
    [Pipenv](https://pipenv.pypa.io), but a newer rival called [Poetry](https://python-poetry.org)
    is becoming more popular.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: pip和venv的这种组合非常常见，人们开始将它们组合在一起以节省步骤，并避免那些`source`命令的复杂性。其中一个这样的包是[Pipenv](https://pipenv.pypa.io)，但一个更新的竞争对手叫做[Poetry](https://python-poetry.org)正在变得更加流行。
- en: Having used pip, Pipenv, and Poetry, I now prefer Poetry. Get it with `pip install
    poetry`. Poetry has many subcommands, such as `poetry add` to add a package to
    your virtual environment, `poetry install` to actually download and install it,
    and so on. Check the Poetry site or run the `poetry` command for help.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用了pip、Pipenv和Poetry之后，我现在更喜欢Poetry。用`pip install poetry`来获取它。Poetry有许多子命令，比如`poetry
    add`用于向您的虚拟环境添加软件包，`poetry install`用于实际下载和安装它等等。查看Poetry网站或运行`poetry`命令以获取帮助。
- en: 'Besides downloading single packages, pip and Poetry manage multiple packages
    in configuration files: *requirements.txt* for pip, and *pyproject.toml* for Poetry.
    Poetry and pip don’t just download packages, but also manage the tricky dependencies
    that packages may have on other packages. You can specify desired package versions
    as minima, maxima, ranges, or exact values (also known as *pinning*). This can
    be important as your project grows and the packages that it depends on change.
    You may need a minimum version of a package if a feature that you use first appeared
    there, or a maximum if a feature was dropped.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 除了下载单个软件包外，pip和Poetry还管理配置文件中的多个软件包：*requirements.txt*用于pip，*pyproject.toml*用于Poetry。Poetry和pip不仅下载软件包，还管理软件包可能对其他软件包的复杂依赖关系。您可以指定所需软件包的版本，如最小值、最大值、范围或确切值（也称为*固定版本*）。随着项目的增长和所依赖的软件包发生变化，这可能很重要。如果您使用的功能首次出现在某个版本中，您可能需要该软件包的最小版本，或者如果删除了某个功能，则可能需要该软件包的最大版本。
- en: Source Formatting
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 源代码格式化
- en: Source formatting is less important than the topics of the previous sections
    but still helpful. Avoid code formatting (*bikeshedding*) arguments with a tool
    that massages source into a standard, nonweird format. One good choice is [Black](https://black.readthedocs.io).
    Install it with `pip install black`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码格式化比前几节的主题不那么重要，但仍然有帮助。避免使用工具对源代码进行格式化（*小工具论*）争论。一个不错的选择是 [Black](https://black.readthedocs.io)。使用
    `pip install black` 安装它。
- en: Testing
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试
- en: Testing is covered in detail in [Chapter 12](ch12.html#ch12). Although the standard
    Python test package is unittest, the industrial-strength Python test package used
    by most Python developers is [pytest](https://docs.pytest.org). Install it with
    `pip install pytest`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 测试在[第 12 章](ch12.html#ch12)中有详细说明。尽管标准的 Python 测试包是 unittest，但大多数 Python 开发人员使用的产业强度
    Python 测试包是 [pytest](https://docs.pytest.org)。使用 `pip install pytest` 安装它。
- en: Source Control and Continuous Integration
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 源代码控制和持续集成
- en: The almost-universal solution for source control now is *Git*, with storage
    repositories (*repos*) at sites like GitHub and GitLab. Using Git isn’t specific
    to Python or FastAPI, but you’ll likely spend a lot of your development time with
    Git. The [pre-commit](https://pre-commit.com) tool runs various tests on your
    local machine (such as `black` and `pytest`) before committing to Git. After pushing
    to a remote Git repo, more continuous integration (CI) tests may be run there.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在几乎普遍的源代码控制解决方案是*Git*，使用像 GitHub 和 GitLab 这样的存储库（*repos*）。使用 Git 不限于 Python
    或 FastAPI，但你可能会在开发中花费大量时间使用 Git。[pre-commit](https://pre-commit.com) 工具在提交到 Git
    之前在本地运行各种测试（如 `black` 和 `pytest`）。推送到远程 Git 存储库后，可能会在那里运行更多的持续集成（CI）测试。
- en: '[Chapter 12](ch12.html#ch12) and [“Troubleshooting”](ch13.html#troubleshooting)
    have more details.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 12 章](ch12.html#ch12) 和 [“故障排除”](ch13.html#troubleshooting) 有更多细节。'
- en: Web Tools
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web 工具
- en: '[Chapter 3](ch03.html#ch03) shows how to install and use the main Python web
    tools used in this book:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 3 章](ch03.html#ch03) 展示了如何安装和使用本书中使用的主要 Python Web 工具：'
- en: FastAPI
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI
- en: The web framework itself
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Web 框架本身
- en: Uvicorn
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Uvicorn
- en: An asynchronous web server
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 异步 Web 服务器
- en: HTTPie
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: HTTPie
- en: A text web client, similar to curl
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类似于 curl 的文本 Web 客户端
- en: Requests
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Requests
- en: A synchronous web client package
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 同步 Web 客户端包
- en: HTTPX
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: HTTPX
- en: A synchronous/asynchronous web client package
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 同步/异步 Web 客户端包
- en: APIs and Services
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API 和服务
- en: Python’s modules and packages are essential for creating large applications
    that don’t become [“big balls of mud”](https://oreil.ly/zzX5T). Even in a single-process
    web service, you can maintain the separation discussed in [Chapter 1](ch01.html#ch01)
    by the careful design of modules and imports.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 'Python 的模块和包对于创建不会成为[“大块泥巴”](https://oreil.ly/zzX5T)的大型应用程序至关重要。即使在单进程 Web
    服务中，通过模块和导入的精心设计，你也可以保持第一章中讨论的分离。 '
- en: Python’s built-in data structures are extremely flexible, and very tempting
    to use everywhere. But in the coming chapters, you’ll see that we can define higher-level
    *models* to make our interlayer communication cleaner. These models rely on a
    fairly recent Python addition called *type hinting*. Let’s get into that, but
    first with a brief aside on how Python handles *variables*. This won’t hurt.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的内置数据结构非常灵活，非常诱人，可以在各处使用。但在接下来的章节中，你会看到我们可以定义更高级的*模型*来使我们的层间通信更清洁。这些模型依赖于一个相对较新的
    Python 添加功能称为*类型提示*。让我们深入了解一下，但首先简要了解 Python 如何处理*变量*。这不会伤害到你。
- en: Variables Are Names
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量是名称
- en: 'The term *object* has many definitions in the software world—maybe too many.
    In Python, an object is a data structure that wraps every distinct piece of data
    in the program, from an integer like `5`, to a function, to anything that you
    might define. It specifies, among other bookkeeping info, the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件世界中，术语*对象*有许多定义——也许太多了。在 Python 中，对象是程序中每个不同数据的数据结构，从像 `5` 这样的整数，到函数，到你可能定义的任何东西。它指定了，除其他事务信息外，以下内容：
- en: A unique *identity* value
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个独特的*标识*值
- en: The low-level *type* that matches the hardware
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与硬件匹配的低级*类型*
- en: The specific *value* (physical bits)
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定的*值*（物理位）
- en: A *reference count* of the number of variables that refer to it
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量的*引用计数*，即指向它的变量数目
- en: Python is *strongly typed* at the object level (its *type* doesn’t change, although
    its *value* might). An object is termed *mutable* if its value may be changed,
    *immutable* if not.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Python 在对象级别上是*强类型*的（它的*类型*不会改变，尽管其*值*可能会）。如果一个对象的值可以被改变，则称其为*可变*的，否则称其为*不可变*的。
- en: But at the *variable* level, Python differs from many other computing languages,
    and this can be confusing. In many other languages, a *variable* is essentially
    a direct pointer to an area of memory that contains a raw *value*, stored in bits
    that follow the computer’s hardware design. If you assign a new value to that
    variable, the language overwrites the previous value in memory with the new one.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 但在*变量*层面上，Python与许多其他计算语言不同，这可能令人困惑。在许多其他语言中，*变量*本质上是指向内存区域的直接指针，该区域包含按照计算机硬件设计存储的原始*值*的位。如果您给该变量赋予一个新值，语言将会用新值覆盖内存中的旧值。
- en: That’s direct and fast. The compiler keeps track of what goes where. It’s one
    reason languages like C are faster than Python. As a developer, you need to ensure
    that you assign only values of the correct type to each variable.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是直接且快速的。编译器跟踪了每个东西的位置。这是C等语言比Python更快的一个原因。作为开发者，您需要确保每个变量只分配正确类型的值。
- en: 'Now, here’s the big difference with Python: a Python variable is just a *name*
    that is temporarily associated with a higher-level *object* in memory. If you
    assign a new value to a variable that refers to an immutable object, you’re actually
    creating a new object that contains that value, and then getting the name to refer
    to that new object. The old object (that the name used to refer to) is then free,
    and its memory can be reclaimed if no other names are still referring to it (i.e.,
    its reference count is 0).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这里是Python的一个重要区别：Python变量只是一个*名称*，暂时关联到内存中的一个更高级的*对象*。如果你给一个引用不可变对象的变量赋予一个新值，实际上你创建了一个包含该值的新对象，然后让该名称指向这个新对象。旧对象（名称曾经引用的对象）随后变为自由状态，并且如果没有其他名称仍然引用它（即其引用计数为0），其内存可以被回收。
- en: In *Introducing Python* (O’Reilly), I compare objects to plastic boxes sitting
    on memory shelves, and names/variables to sticky notes on these boxes. Or you
    can picture names as tags attached by strings to those boxes.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在*Introducing Python*（O’Reilly）中，我将对象比作坐在内存架子上的塑料盒子，而名称/变量则是粘在这些盒子上的便签。或者你可以将名称想象为附在这些盒子上的带有字符串的标签。
- en: Usually, when you use a name, you assign it to one object, and it stays attached.
    Such simple consistency helps you understand your code. A variable’s *scope* is
    the area of code in which a name refers to the same object—such as within a function.
    You can use the same name in different scopes, but each one refers to a different
    object.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，当你使用一个名称时，你将其分配给一个对象，并且它会保持附着状态。这种简单的一致性有助于你理解你的代码。变量的*作用域*是名称在其中引用相同对象的代码区域，例如在函数内部。你可以在不同的作用域中使用相同的名称，但每个作用域都引用不同的对象。
- en: Although you can make a variable refer to different objects throughout a Python
    program, that isn’t necessarily a good practice. Without looking, you don’t know
    if name `x` on line 100 is in the same scope as name `x` on line 20. (By the way,
    `x` is a terrible name. We should pick names that actually confer some meaning.)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在Python程序中，您可以使一个变量引用不同的对象，但这并不一定是一个好的实践。如果不查看，您无法确定第100行的名称`x`是否与第20行的名称`x`在相同的作用域内。（顺便说一句，`x`是一个糟糕的名称。我们应该选择那些实际上有意义的名称。）
- en: Type Hints
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型提示
- en: All of this background has a point.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些背景都有一个重点。
- en: Python 3.6 added *type hints* to declare the type of object to which a variable
    refers. These are *not* enforced by the Python interpreter as it’s running! Instead,
    they can be used by various tools to ensure that your use of a variable is consistent.
    The standard type checker is called *mypy*, and I’ll show you how it’s used later.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3.6增加了*类型提示*，用于声明变量引用的对象的类型。这些提示**并不**由Python解释器在运行时强制执行！相反，它们可以被各种工具用来确保您对变量的使用是一致的。标准类型检查器称为*mypy*，我稍后会展示给你看。
- en: A type hint may seem like just a nice thing, like many lint tools used by programmers
    to avoid mistakes. For instance, it may remind you that your variable `count`
    refers to a Python object of type `int`. But hints, although they’re optional
    and unenforced notes (literally, hints), turn out to have unexpected uses. Later
    in this book, you’ll see how FastAPI adapted the Pydantic package to make clever
    use of type hinting.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 类型提示可能看起来只是一件好事，就像程序员使用的许多lint工具，用于避免错误。例如，它可能提醒您，您的变量`count`引用了一个Python类型为`int`的对象。但是提示，尽管它们是可选的并且是未强制执行的注释（字面上是提示），却有意想不到的用途。在本书的后面，您将看到FastAPI如何调整Pydantic包以巧妙利用类型提示。
- en: The addition of type declarations may be a trend in other, formerly typeless,
    languages. For example, many JavaScript developers have moved to [TypeScript](https://www.typescriptlang.org).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 类型声明的添加可能是其他以前无类型语言的趋势。例如，许多JavaScript开发人员已转向[TypeScript](https://www.typescriptlang.org)。
- en: Data Structures
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据结构
- en: You’ll get details on Python and data structures in [Chapter 5](ch05.html#ch05).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第五章](ch05.html#ch05)中，您将了解有关Python和数据结构的详细信息。
- en: Web Frameworks
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web框架
- en: Among other things, a web framework translates between HTTP bytes and Python
    data structures. It can save you a lot of effort. On the other hand, if part of
    it doesn’t work as you need it to, you may need to hack a solution. As the saying
    goes, don’t reinvent the wheel—unless you can’t get a round one.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 作为其他功能之一，Web框架在HTTP字节和Python数据结构之间进行转换。它可以节省大量精力。另一方面，如果其中一部分不按您的需求工作，则可能需要入侵解决方案。俗话说，不要重复造轮子——除非您不能获得圆形的。
- en: The [Web Server Gateway Interface (WSGI)](https://wsgi.readthedocs.io) is a
    synchronous Python [standard specification](https://peps.python.org/pep-3333)
    to connect application code to web servers. Traditional Python web frameworks
    are all built on WSGI. But synchronous communication may mean busy waiting for
    something that’s *much* slower than the CPU, like a disk or network. Then you’ll
    look for better *concurrency*. Concurrency has become more important in recent
    years. As a result, the Python [Asynchronous Server Gateway Interface (ASGI) specification](https://asgi.readthedocs.io)
    was developed. [Chapter 4](ch04.html#ch04) talks about this.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[Web服务器网关接口（WSGI）](https://wsgi.readthedocs.io)是将应用程序代码连接到Web服务器的同步Python[标准规范](https://peps.python.org/pep-3333)。传统的Python
    Web框架都建立在WSGI之上。但同步通信可能意味着等待一些比CPU慢得多的东西，如磁盘或网络。然后您将寻找更好的*并发性*。近年来，并发性变得更加重要。因此，开发了Python的[异步服务器网关接口（ASGI）规范](https://asgi.readthedocs.io)。[第四章](ch04.html#ch04)详细讨论了这一点。'
- en: Django
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django
- en: '[Django](https://www.djangoproject.com) is a full-featured web framework that
    tags itself as “the web framework for perfectionists with deadlines.” It was announced
    by Adrian Holovaty and Simon Willison in 2003, and named after Django Reinhardt,
    a 20th-century Belgian jazz guitarist. Django is often used for database-backed
    corporate sites. I include more details on Django in [Chapter 7](ch07.html#ch07).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[Django](https://www.djangoproject.com)是一个全功能的Web框架，自称为“完美主义者的截止日期Web框架”。它由Adrian
    Holovaty和Simon Willison于2003年宣布，并以20世纪比利时爵士吉他手Django Reinhardt命名。Django经常用于数据库支持的企业网站。在[第七章](ch07.html#ch07)中，我将更多地详细介绍Django。'
- en: Flask
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Flask
- en: In contrast, [Flask](https://flask.palletsprojects.com), introduced by Armin
    Ronacher in 2010, is a *microframework*. [Chapter 7](ch07.html#ch07) has more
    information on Flask and how it compares with Django and FastAPI.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，由Armin Ronacher在2010年推出的[Flask](https://flask.palletsprojects.com)是一个*微框架*。[第七章](ch07.html#ch07)更多地讨论了Flask及其与Django和FastAPI的比较。
- en: FastAPI
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FastAPI
- en: After meeting other suitors at the ball, we finally encounter the intriguing
    FastAPI, the subject of this book. Although FastAPI was published by Sebastián
    Ramírez in 2018, it has already climbed to the third place of Python web frameworks,
    behind Flask and Django, and is growing faster. A 2022 [comparison](https://oreil.ly/36WTQ)
    shows that it may pass them at some point.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在舞会上与其他求婚者见面后，我们最终遇到了引人入胜的FastAPI，这本书的主题。尽管FastAPI由Sebastián Ramírez于2018年发布，但它已经攀升至Python
    Web框架的第三位，仅次于Flask和Django，并且增长速度更快。2022年的[比较](https://oreil.ly/36WTQ)显示它可能在某个时候超过它们。
- en: Note
  id: totrans-107
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'As of the end of October 2023, here are the GitHub star counts:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 截至2023年10月底，GitHub上的星标数如下：
- en: 'Django: 73.8 thousand'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django：73.8千
- en: 'Flask: 64.8 thousand'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask：64.8千
- en: 'FastAPI: 64 thousand'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FastAPI：64千
- en: 'After careful investigation into [alternatives](https://oreil.ly/JDDOm), Ramírez
    came up with a [design](https://oreil.ly/zJFTX) that was heavily based on two
    third-party Python packages:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 经过对[替代方案](https://oreil.ly/JDDOm)的仔细调查，Ramírez提出了一个[设计](https://oreil.ly/zJFTX)，该设计主要基于两个第三方Python包：
- en: '*Starlette* for web details'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Starlette* 用于Web的详细信息'
- en: '*Pydantic* for data details'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Pydantic* 的数据详情'
- en: And he added his own ingredients and special sauces to the final product. You’ll
    see what I mean in the next chapter.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 他还为最终产品添加了自己的成分和特殊酱汁。您将在下一章中看到我所指的。
- en: Review
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾
- en: 'This chapter covered a lot of ground related to today’s Python:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了与今天的Python相关的许多内容：
- en: Useful tools for a Python web developer
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python Web开发者的有用工具
- en: The prominence of APIs and services
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API和服务的显著性
- en: Python’s type hinting, objects, and variables
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python的类型提示、对象和变量
- en: Data structures for web services
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web服务的数据结构
- en: Web frameworks
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web框架
