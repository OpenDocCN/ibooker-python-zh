["```py\nimport asyncio\n\nclass CoroBot():  ![1](assets/1.png)\n  def __init__(self):\n    self.cutlery = Cutlery(knives=0, forks=0)\n    self.tasks = asyncio.Queue()  ![2](assets/2.png)\n\n  async def manage_table(self):\n    while True:\n      task = await self.tasks.get()  ![3](assets/3.png)\n      if task == 'prepare table':\n        kitchen.give(to=self.cutlery, knives=4, forks=4)\n      elif task == 'clear table':\n        self.cutlery.give(to=kitchen, knives=4, forks=4)\n      elif task == 'shutdown':\n        return\n\nfrom attr import attrs, attrib\n\n@attrs\nclass Cutlery:\n    knives = attrib(default=0)\n    forks = attrib(default=0)\n\n    def give(self, to: 'Cutlery', knives=0, forks=0):\n        self.change(-knives, -forks)\n        to.change(knives, forks)\n\n    def change(self, knives, forks):\n            self.knives += knives\n            self.forks += forks\n\nkitchen = Cutlery(knives=100, forks=100)\nbots = [CoroBot() for i in range(10)]\n\nimport sys\nfor b in bots:\n    for i in range(int(sys.argv[1])):\n        b.tasks.put_nowait('prepare table')\n        b.tasks.put_nowait('clear table')\n    b.tasks.put_nowait('shutdown')\n\nprint('Kitchen inventory before service:', kitchen)\n\nloop = asyncio.get_event_loop()\ntasks = []\nfor b in bots:\n    t = loop.create_task(b.manage_table())\n    tasks.append(t)\n\ntask_group = asyncio.gather(*tasks)\nloop.run_until_complete(task_group)\nprint('Kitchen inventory after service:', kitchen)\n```", "```py\n$ python cutlery_test_corobot.py 100000\nKitchen inventory before service: Cutlery(knives=100, forks=100)\nKitchen inventory after service: Cutlery(knives=100, forks=100)\n\n```", "```py\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>The News</title>\n    <style>\n        .wrapper {\n            display: grid;\n            grid-template-columns: 300px 300px 300px;\n            grid-gap: 10px;\n            width: 920px;\n            margin: 0 auto;\n        }\n\n        .box {\n            border-radius: 40px;\n            padding: 20px;\n            border: 1px solid slategray;\n        }\n\n        .cnn {\n            background-color: #cef;\n        }\n\n        .aljazeera {\n            background-color: #fea;\n        }\n\n        h1 {\n            text-align: center;\n            font-size: 60pt;\n        }\n\n        a {\n            color: black;\n            text-decoration: none;\n        }\n        span {\n            text-align: center;\n            font-size: 15pt;\n            color: black;\n        }\n    </style>\n</head>\n<body>\n<h1>The News</h1>\n<div class=\"wrapper\">\n    $body\n</div>\n</body>\n</html>\n```", "```py\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Server Performance</title>\n    <script src=\"smoothie.min.js\"></script>\n    <script type=\"text/javascript\">\n        function createTimeline() {\n            var cpu = {};  ![1](assets/1.png)\n            var mem = {};\n\n            var chart_props = {\n                responsive: true,\n                enableDpiScaling: false,\n                millisPerPixel:100,\n                grid: {\n                    millisPerLine: 4000,\n                    fillStyle: '#ffffff',\n                    strokeStyle: 'rgba(0,0,0,0.08)',\n                    verticalSections: 10\n                },\n                labels:{fillStyle:'#000000',fontSize:18},\n                timestampFormatter:SmoothieChart.timeFormatter,\n                maxValue: 100,\n                minValue: 0\n            };\n\n            var cpu_chart = new SmoothieChart(chart_props);  ![2](assets/2.png)\n            var mem_chart = new SmoothieChart(chart_props);\n\n            function add_timeseries(obj, chart, color) {  ![3](assets/3.png)\n                obj[color] = new TimeSeries();\n                chart.addTimeSeries(obj[color], {\n                    strokeStyle: color,\n                    lineWidth: 4\n                })\n            }\n\n            var evtSource = new EventSource(\"/feed\");  ![4](assets/4.png)\n            evtSource.onmessage = function(e) {\n                var obj = JSON.parse(e.data);  ![5](assets/5.png)\n                if (!(obj.color in cpu)) {\n                    add_timeseries(cpu, cpu_chart, obj.color);\n                }\n                if (!(obj.color in mem)) {\n                    add_timeseries(mem, mem_chart, obj.color);\n                }\n                cpu[obj.color].append(\n                    Date.parse(obj.timestamp), obj.cpu);  ![6](assets/6.png)\n                mem[obj.color].append(\n                    Date.parse(obj.timestamp), obj.mem);\n            };\n\n            cpu_chart.streamTo(\n                document.getElementById(\"cpu_chart\"), 1000\n            );\n            mem_chart.streamTo(\n                document.getElementById(\"mem_chart\"), 1000\n            );\n        }\n    </script>\n    <style>\n        h1 {\n            text-align: center;\n            font-family: sans-serif;\n        }\n    </style>\n</head>\n<body onload=\"createTimeline()\">\n    <h1>CPU (%)</h1>\n    <canvas id=\"cpu_chart\" style=\"width:100%; height:300px\">\n    </canvas>\n    <hr>\n    <h1>Memory usage (MB)</h1>\n    <canvas id=\"mem_chart\" style=\"width:100%; height:300px\">\n    </canvas>\n```", "```py\n# triggers.py\nfrom asyncpg.connection import Connection  ![1](assets/1.png)\n\nasync def create_notify_trigger(  ![2](assets/2.png)\n        conn: Connection,\n        trigger_name: str = 'table_update_notify',\n        channel: str = 'table_change') -> None:\n    await conn.execute(\n        'CREATE EXTENSION IF NOT EXISTS hstore')  ![3](assets/3.png)\n    await conn.execute(\n            SQL_CREATE_TRIGGER.format(\n                trigger_name=trigger_name,\n                channel=channel))  ![4](assets/4.png)\n\nasync def add_table_triggers(  ![5](assets/5.png)\n        conn: Connection,\n        table: str,\n        trigger_name: str = 'table_update_notify',\n        schema: str = 'public') -> None:\n    templates = (SQL_TABLE_INSERT, SQL_TABLE_UPDATE,\n                 SQL_TABLE_DELETE)  ![6](assets/6.png)\n    for template in templates:\n        await conn.execute(\n            template.format(\n                table=table,\n                trigger_name=trigger_name,\n                schema=schema))  ![7](assets/7.png)\n\nSQL_CREATE_TRIGGER = \"\"\"\\ CREATE OR REPLACE FUNCTION {trigger_name}()\n RETURNS trigger AS $$\nDECLARE\n id integer; -- or uuid\n data json;\nBEGIN\n data = json 'null';\n IF TG_OP = 'INSERT' THEN\n id = NEW.id;\n data = row_to_json(NEW);\n ELSIF TG_OP = 'UPDATE' THEN\n id = NEW.id;\n data = json_build_object(\n      'old', row_to_json(OLD),\n      'new', row_to_json(NEW),\n      'diff', hstore_to_json(hstore(NEW) - hstore(OLD))\n );\n ELSE\n id = OLD.id;\n data = row_to_json(OLD);\n END IF;\n PERFORM\n pg_notify(\n      '{channel}',\n json_build_object(\n        'table', TG_TABLE_NAME,\n        'id', id,\n        'type', TG_OP,\n        'data', data\n )::text\n );\n RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\"\"\"  ![8](assets/8.png)\n\nSQL_TABLE_UPDATE = \"\"\"\\ DROP TRIGGER IF EXISTS\n  {table}_notify_update ON {schema}.{table};\nCREATE TRIGGER {table}_notify_update\n AFTER UPDATE ON {schema}.{table}\n FOR EACH ROW\n EXECUTE PROCEDURE {trigger_name}();\n\"\"\"  ![9](assets/9.png)\n\nSQL_TABLE_INSERT = \"\"\"\\ DROP TRIGGER IF EXISTS\n  {table}_notify_insert ON {schema}.{table};\nCREATE TRIGGER {table}_notify_insert\n AFTER INSERT ON {schema}.{table}\n FOR EACH ROW\n EXECUTE PROCEDURE {trigger_name}();\n\"\"\"\n\nSQL_TABLE_DELETE = \"\"\"\\ DROP TRIGGER IF EXISTS\n  {table}_notify_delete ON {schema}.{table};\nCREATE TRIGGER {table}_notify_delete\n AFTER DELETE ON {schema}.{table}\n FOR EACH ROW\n EXECUTE PROCEDURE {trigger_name}();\n\"\"\"\n```", "```py\n# perf.py\nimport logging\nfrom time import perf_counter\nfrom inspect import iscoroutinefunction\n\nlogger = logging.getLogger('perf')\n\ndef aelapsed(corofn, caption=''):  ![1](assets/1.png)\n    async def wrapper(*args, **kwargs):\n        t0 = perf_counter()\n        result = await corofn(*args, **kwargs)\n        delta = (perf_counter() - t0) * 1e3\n        logger.info(\n            f'{caption} Elapsed: {delta:.2f} ms')\n        return result\n    return wrapper\n\ndef aprofiler(cls, bases, members):  ![2](assets/2.png)\n    for k, v in members.items():\n        if iscoroutinefunction(v):\n            members[k] = aelapsed(v, k)\n    return type.__new__(type, cls, bases, members)\n```"]