- en: Chapter 10\. Data Layer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。数据层
- en: If I’m not mistaken, I think Data was the comic relief on the show.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果我没记错，我认为Data是该节目中的喜剧缓解角色。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Brent Spiner, *Star Trek: The Next Generation*'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Brent Spiner，《星际迷航：下一代》
- en: Preview
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预览
- en: This chapter finally creates a persistent home for our site’s data, at last
    connecting the three layers. It uses the relational database SQLite and introduces
    Python’s database API, aptly named DB-API. [Chapter 14](ch14.html#ch14) goes into
    much more detail on databases, including the SQLAlchemy package and nonrelational
    databases.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章最终为我们网站的数据创建了一个持久的家，最终连接了三个层次。它使用关系数据库SQLite，并引入了Python的数据库API，名为DB-API。[第14章](ch14.html#ch14)更详细地介绍了数据库，包括SQLAlchemy包和非关系数据库。
- en: DB-API
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DB-API
- en: 'For over 20 years, Python has included a basic definition for a relational
    database interface called DB-API: [PEP 249](https://oreil.ly/4Gp9T). Anyone who
    writes a Python driver for a relational database is expected to at least include
    support for DB-API, although other features may be included.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 20多年来，Python已经包含了一个名为DB-API的关系数据库接口的基本定义：[PEP 249](https://oreil.ly/4Gp9T)。任何编写Python关系数据库驱动程序的人都应至少包括对DB-API的支持，尽管可能包括其他特性。
- en: 'These are the main DB-API functions:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是主要的DB-API函数：
- en: Create a connection `conn` to the database with `connect()`.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`connect()`创建到数据库的连接`conn`。
- en: Create a cursor `curs` with `conn.cursor()`.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`conn.cursor()`创建一个游标`curs`。
- en: Execute a SQL string `stmt` with `curs.execute(stmt)`.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`curs.execute(stmt)`执行SQL字符串`stmt`。
- en: 'The `execute...()` functions run a SQL statement `*stmt*` string with optional
    parameters, listed here:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`execute...()`函数运行一个带有可选参数的SQL语句`*stmt*`字符串，列在此处：'
- en: '`execute(*stmt*)` if there are no parameters'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有参数，则使用`execute(*stmt*)`
- en: '`execute(*stmt*, *params*)`, with parameters `*params*` in a single sequence
    (list or tuple) or dict'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execute(*stmt*, *params*)`，使用单个序列（列表或元组）或字典中的参数`*params*`'
- en: '`executemany(*stmt*, *params_seq*)`, with multiple parameter groups in the
    sequence `*params_seq*`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`executemany(*stmt*, *params_seq*)`，在序列`*params_seq*`中有多个参数组。'
- en: There are five ways of specifying parameters, and not all are supported by all
    database drivers. If we have a statement `*stmt*` that begins with `"select *
    from creature where"`, and we want to specify string parameters for the creature’s
    `name` *or* `country`, the rest of the `*stmt*` string and its parameters would
    look like those in [Table 10-1](#table-10-1).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有五种指定参数的方法，并非所有数据库驱动程序都支持。如果我们有一个以`"select * from creature where"`开头的语句`*stmt*`，并且我们想要为生物的`name`或`country`指定字符串参数，那么剩余的`*stmt*`字符串及其参数看起来像[表10-1](#table-10-1)中的那些。
- en: Table 10-1\. Specifying the statement and parameters
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 表10-1。指定语句和参数
- en: '| Type | Statement part | Parameters part |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 语句部分 | 参数部分 |'
- en: '| --- | --- | --- |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| qmark | `name=? or country=?` | `(*name*, *country*)` |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| qmark | `name=? or country=?` | `(*name*, *country*)` |'
- en: '| numeric | `name=:0 or country=:1` | `(*name*, *country*)` |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| numeric | `name=:0 or country=:1` | `(*name*, *country*)` |'
- en: '| format | `name=%s or country=%s` | `(*name*, *country*)` |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| format | `name=%s or country=%s` | `(*name*, *country*)` |'
- en: '| named | `name=:name or country=:country` | `{"name": *name*, "country": *​coun⁠try*}`
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| named | `name=:name or country=:country` | `{"name": *name*, "country": *​coun⁠try*}`
    |'
- en: '| pyformat | `name=%(name)s or country=%(country)s` | `{"name": *name*, "country":
    *​coun⁠try*}` |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| pyformat | `name=%(name)s or country=%(country)s` | `{"name": *name*, "country":
    *​coun⁠try*}` |'
- en: The first three take a tuple argument, where the parameter order matches the
    `?`, `:N`, or `%s` in the statement. The last two take a dictionary, where the
    keys match the names in the statement.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个采用元组参数，其中参数顺序与语句中的`?`，`:N`或`%s`匹配。最后两个采用字典，其中键与语句中的名称匹配。
- en: So, the full call for the *named* style would look like [Example 10-1](#ex-10-1).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，命名样式的完整调用将如[示例10-1](#ex-10-1)所示。
- en: Example 10-1\. Using named-style parameters.
  id: totrans-27
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例10-1。使用命名样式参数。
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For SQL `INSERT`, `DELETE`, and `UPDATE` statements, the returned value from
    `execute()` tells you how it worked. For `SELECT`, you iterate over returned data
    row(s), as Python tuples, with a `fetch` method:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于SQL `INSERT`，`DELETE`和`UPDATE`语句，`execute()`的返回值告诉您它的工作原理。对于`SELECT`，您遍历返回的数据行（作为Python元组），使用`fetch`方法：
- en: '`fetchone()` returns one tuple, or `None`.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fetchone()`返回一个元组，或者`None`。'
- en: '`fetchall()` returns a sequence of tuples.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fetchall()`返回一个元组序列。'
- en: '`fetchmany(*num*)` returns up to `*num*` tuples.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fetchmany(*num*)`最多返回`*num*`个元组。'
- en: SQLite
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLite
- en: Python includes support for one database ([SQLite](https://www.sqlite.org))
    with the module [sqlite3](https://oreil.ly/CcYtJ) in its standard packages.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Python 包括对一个数据库（[SQLite](https://www.sqlite.org)）的支持，使用其标准包中的 [sqlite3](https://oreil.ly/CcYtJ)
    模块。
- en: 'SQLite is unusual: it has no separate database server. All the code is in a
    library, and storage is in a single file. Other databases run separate servers,
    and clients communicate with them over TCP/IP, using specific protocols. Let’s
    use SQLite as the first physical data store for this website. [Chapter 14](ch14.html#ch14)
    will include other databases, relational and not, as well as more advanced packages
    like SQLAlchemy and techniques like ORMs.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 是不寻常的：它没有单独的数据库服务器。所有的代码都在一个库中，并且存储在一个单独的文件中。其他数据库运行独立的服务器，客户端通过特定的协议通过
    TCP/IP 与它们通信。让我们将 SQLite 作为这个网站的第一个物理数据存储。[第14章](ch14.html#ch14) 将包括其他数据库，关系型和非关系型，以及更高级的包如
    SQLAlchemy 和像 ORM 这样的技术。
- en: 'First, we need to define how the data structures we’ve been using in the website
    (*models*) can be represented in the database. So far, our only models have been
    simple and similar, but not identical: `Creature` and `Explorer`. They will change
    as we think of more things to do with them and let the data evolve without massive
    code changes.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要定义我们在网站中使用的数据结构（*模型*）如何在数据库中表示。到目前为止，我们唯一的模型是简单而相似的，但并非完全相同：`Creature`
    和 `Explorer`。随着我们考虑到更多要处理的事物并允许数据不断演变而无需大规模的代码更改，它们将会改变。
- en: '[Example 10-2](#ex-10-2) shows the bare DB-API code and SQL to create and work
    with the first tables. It uses *named* argument strings (values are represented
    like `*name*`), which are supported by the sqlite3 package.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 10-2](#ex-10-2) 显示了裸的 DB-API 代码和 SQL 来创建和处理第一个表。它使用了 `*name*` 形式的命名参数字符串（值被表示为
    `*name*`），这是 sqlite3 包支持的。'
- en: Example 10-2\. Create the file data/creature.py using sqlite3
  id: totrans-38
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-2\. 使用 sqlite3 创建文件 data/creature.py
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Near the top, the `init()` function makes the connection to sqlite3 and the
    database fake *cryptid.db*. It stores this in the variable `conn`; this is global
    within the *data/creature.py* module. Next, the `curs` variable is a *cursor*
    for iterating over data returned by executing a SQL `SELECT` statement; it’s also
    global to the module.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶部附近，`init()` 函数连接到 sqlite3 和数据库假的 *cryptid.db*。它将此存储在变量 `conn` 中；这在 *data/creature.py*
    模块内是全局的。接下来，`curs` 变量是用于迭代通过执行 SQL `SELECT` 语句返回的数据的 *cursor*；它也是该模块的全局变量。
- en: 'Two utility functions translate between Pydantic models and DB-API:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 两个实用函数在 Pydantic 模型和 DB-API 之间进行转换：
- en: '`row_to_model()` converts a tuple returned by a *fetch* function to a model
    object.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`row_to_model()` 将由 *fetch* 函数返回的元组转换为模型对象。'
- en: '`model_to_dict()` translates a Pydantic model to a dictionary, suitable for
    use as a *named* query parameter.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_to_dict()` 将 Pydantic 模型转换为字典，适合用作 *named* 查询参数。'
- en: The fake CRUD functions that have been present so far in each layer down (Web
    → Service → Data) will now be replaced. They use only plain SQL and the DB-API
    methods in sqlite3.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在每一层下（Web → Service → Data）存在的虚假的 CRUD 函数现在将被替换。它们仅使用纯 SQL 和 sqlite3 中的
    DB-API 方法。
- en: Layout
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布局
- en: 'So far, (fake) data has been modified in steps:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，（虚假的）数据已经被分步修改：
- en: In [Chapter 8](ch08.html#ch08), we made the fake `*creatures*` list in *web/creature.py*.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 [第8章](ch08.html#ch08)，我们在 *web/creature.py* 中制作了虚假的 `*creatures*` 列表。
- en: In [Chapter 8](ch08.html#ch08), we made the fake `*explorers*` list in *web/explorer.py*.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 [第8章](ch08.html#ch08)，我们在 *web/explorer.py* 中制作了虚假的 `*explorers*` 列表。
- en: In [Chapter 9](ch09.html#ch09), we moved fake `*creatures*` to *service/creature.py*.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 [第9章](ch09.html#ch09)，我们将假的 `*creatures*` 移动到 *service/creature.py*。
- en: In [Chapter 9](ch09.html#ch09), we moved fake `*explorers*` to *service/explorer.py*.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 [第9章](ch09.html#ch09)，我们将假的 `*explorers*` 移动到 *service/explorer.py*。
- en: 'Now the data has moved for the last time, down to *data/creature.py*. But it’s
    not fake anymore: it’s real live data, persisting in the SQLite database file
    *cryptids.db*. Creature data, again by lack of imagination, is stored in the SQL
    table `creature` in this database.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数据已经最后一次移动，到 *data/creature.py*。但它不再是虚假的：它是真实的数据，存储在 SQLite 数据库文件 *cryptids.db*
    中。生物数据，由于缺乏想象力，再次存储在此数据库中的 SQL 表 `creature` 中。
- en: Once you save this new file, Uvicorn should restart from your top *main.py*,
    which calls *web/creature.py*, which calls *service/creature.py*, and finally
    down to this new *data/creature.py*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦保存了这个新文件，Uvicorn 应该从你的顶级 *main.py* 重新启动，它调用 *web/creature.py*，这将调用 *service/creature.py*，最终到这个新的
    *data/creature.py*。
- en: Making It Work
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让它工作
- en: 'We have one small problem: this module never calls its `init()` function, so
    there’s no SQLite `conn` or `curs` for the other functions to use. This a configuration
    issue: how do we provide the database information at startup time? Possibilities
    include the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个小问题：这个模块从未调用它的 `init()` 函数，因此没有 SQLite 的 `conn` 或 `curs` 可供其他函数使用。这是一个配置问题：如何在启动时提供数据库信息？可能的解决方案包括以下几种：
- en: Hardwiring the database info in the code, as in [Example 10-2](#ex-10-2).
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据库信息硬编码到代码中，就像 [Example 10-2](#ex-10-2) 中那样。
- en: Passing the info down through the layers. But this would violate the separation
    of layers; the Web and Service layers should not know the internals of the Data
    layer.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将信息传递到各层。但这样做会违反层次间的分离原则；Web 层和服务层不应了解数据层的内部。
- en: Passing the info from a different external source, such as
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从不同的外部源传递信息，比如
- en: A config file
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件
- en: An environment variable
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个环境变量
- en: The environment variable is simple and is endorsed by recommendations like the
    [Twelve-Factor App](https://12factor.net/config). The code can include a default
    value if the environment variable isn’t specified. This approach can also be used
    in testing, to provide a separate test database from the production one.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量很简单，并且得到了像 [Twelve-Factor App](https://12factor.net/config) 这样的建议的支持。如果环境变量未指定，代码可以包含一个默认值。这种方法也可以用于测试，以提供一个与生产环境不同的测试数据库。
- en: In [Example 10-3](#ex-10-3), let’s define an environment variable called `CRYPTID_SQLITE_DB`,
    with the default value `cryptid.db`. Make a new file called *data/init.py* for
    the new database initialization code so it can also be reused for the explorer
    code.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [Example 10-3](#ex-10-3) 中，让我们定义一个名为 `CRYPTID_SQLITE_DB` 的环境变量，默认值为 `cryptid.db`。创建一个名为
    *data/init.py* 的新文件用于新数据库初始化代码，以便它也可以在探险者代码中重用。
- en: Example 10-3\. New data initialization module data/init.py
  id: totrans-62
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 10-3\. 新数据初始化模块 data/init.py
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A Python module is a *singleton*, called only once despite multiple imports.
    So, the initialization code in *init.py* is run only once, when the first import
    of it occurs.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Python 模块是一个 *单例*，即使多次导入也只调用一次。因此，当首次导入 *init.py* 时，初始化代码只会运行一次。
- en: 'Last, modify *data/creature.py* in [Example 10-4](#ex-10-4) to use this new
    module instead:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 [Example 10-4](#ex-10-4) 中修改 *data/creature.py* 使用这个新模块：
- en: Mainly, drop lines 4 through 8.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要是，删除第 4 至 8 行代码。
- en: Oh, and create the `creature` table in the first place!
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哦，还要在第一次创建 `creature` 表的时候！
- en: The table fields are all SQL `text` strings. This is the default column type
    in SQLite (unlike most SQL databases), so you didn’t need to include `text` earlier,
    but being explicit doesn’t hurt.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表字段都是 SQL 的 `text` 字符串。这是 SQLite 的默认列类型（不像大多数 SQL 数据库），所以之前不需要显式包含 `text`，但明确写出来也无妨。
- en: The `if not exists` avoids clobbering the table after it’s been created.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if not exists` 避免在表已创建后覆盖它。'
- en: The `name` field is the explicit `primary key` for this table. If this table
    ever houses lots of explorer data, that key will be necessary for fast lookups.
    The alternative is the dreaded *table scan*, where the database code needs to
    look at every row until it finds a match for `name`.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` 字段是该表的显式 `primary key`。如果该表存储了大量探险者数据，这个键将对快速查找至关重要。另一种选择是可怕的 *表扫描*，在这种情况下，数据库代码需要查看每一行，直到找到
    `name` 的匹配项。'
- en: Example 10-4\. Add database configuration to data/creature.py
  id: totrans-71
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 10-4\. 将数据库配置添加到 data/creature.py
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By importing `conn` and `curs` from *init.py*, it’s no longer necessary for
    *data/creature.py* to import sqlite3 itself—unless someday it’s necessary to call
    another sqlite3 method that isn’t a method of the `conn` or `curs` objects.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从 *init.py* 中导入 `conn` 和 `curs`，就不再需要 *data/creature.py* 自己导入 sqlite3 —— 除非有一天需要调用
    `conn` 或 `curs` 对象之外的另一个 sqlite3 方法。
- en: Again, these changes should goose Uvicorn into reloading everything. From now
    on, testing with any of the methods that you’ve seen so far (HTTPie and friends,
    or the automated */docs* forms) will show data that persists. If you add a creature,
    it will be there the next time you get all of them.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，这些更改应该能够促使 Uvicorn 重新加载所有内容。从现在开始，使用迄今为止看到的任何方法进行测试（如 HTTPie 和其他工具，或自动化的
    */docs* 表单），都将显示持久化的数据。如果你添加了一个生物，下次获取所有生物时它将会存在。
- en: Let’s do the same for explorers in [Example 10-5](#ex-10-5).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对 [Example 10-5](#ex-10-5) 中的探险者做同样的事情。
- en: Example 10-5\. Add database configuration to data/explorer.py
  id: totrans-76
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 10-5\. 将数据库配置添加到 data/explorer.py
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Test!
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试！
- en: That’s a lot of code with no tests. Does everything work? I’d be surprised if
    it all did. So let’s set up some tests.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是大量没有测试的代码。一切都有效吗？如果一切都有效，我会感到惊讶。所以，让我们设置一些测试。
- en: 'Make these subdirectories under the *test* directory:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *test* 目录下创建这些子目录：
- en: unit
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 单元
- en: Within a layer
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个层内
- en: full
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 完整
- en: Across all layers
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 跨所有层
- en: 'Which type should you write and run first? Most people write automated unit
    tests first; they’re smaller, and all the other layer pieces may not exist yet.
    In this book, development has been top-down, and we’re now completing the last
    layer. Also, we did manual tests (with HTTPie and friends) in Chapters [8](ch08.html#ch08)
    and [9](ch09.html#ch09). Those helped to expose bugs and omissions quickly; automated
    tests ensure that you don’t keep making the same errors later. So, I recommend
    the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该先写和运行哪种类型的测试？大多数人先写自动化单元测试；它们规模较小，而且其他所有层的组件可能尚不存在。本书的开发是自顶向下的，现在我们正在完成最后一层。此外，我们在第
    [8](ch08.html#ch08) 和 [9](ch09.html#ch09) 章节做了手动测试（使用 HTTPie 和朋友们）。这些测试帮助快速暴露出错误和遗漏；自动化测试确保你以后不会反复犯同样的错误。因此，我建议以下操作：
- en: Some manual tests as you’re first writing the code
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你第一次编写代码时进行一些手动测试
- en: Unit tests after you’ve fixed Python syntax errors
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你修复了 Python 语法错误之后的单元测试
- en: Full tests after you have a full data flow across all layers
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的数据流经过所有层后进行完整测试
- en: Full Tests
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完整测试
- en: These call the web endpoints, which take the code elevator down through Service
    to Data, and back up again. Sometimes these are called *end-to-end* or *contract*
    tests.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这些调用 web 端点，通过 Service 到 Data 的代码电梯，然后再次上升。有时这些被称为 *端到端* 或 *合同* 测试。
- en: Get all explorers
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取所有探险家
- en: Dipping a toe in the test waters, not yet knowing if they’re infested with piranhas,
    is brave volunteer [Example 10-6](#ex-10-6).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在还不知道测试是否会被食人鱼侵袭的情况下，勇敢的志愿者是 [示例 10-6](#ex-10-6)。
- en: Example 10-6\. The Get All Explorers test
  id: totrans-93
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-6\. 获取所有探险家的测试
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Eek! What happened?
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 唉呀！发生了什么事？
- en: 'Oh. The test asked for `/explorer`, not `/explorer/`, and there’s no `GET`-method
    path function for the URL */explorer* (with no final slash). In *web/explorer.py*,
    the path decorator for the `get_all()` path function is this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 哦。测试要求 `/explorer`，而不是 `/explorer/`，并且没有适用于 URL */explorer*（没有最终斜杠的情况下）的 `GET`
    方法路径函数。在 *web/explorer.py* 中，`get_all()` 路径函数的路径装饰器如下所示：
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: That, plus the earlier code
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这，再加上之前的代码
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: means this `get_all()` path function serves a URL containing */explorer/*.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 意味着这个 `get_all()` 路径函数提供了一个包含 */explorer/* 的 URL。
- en: '[Example 10-7](#ex-10-7) happily shows that you can have more than one path
    decorator per path function.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 10-7](#ex-10-7) 高兴地展示，你可以为一个路径函数添加多个路径装饰器。'
- en: Example 10-7\. Add a nonslash path decorator for the `get_all()` path function
  id: totrans-102
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-7\. 为 `get_all()` 路径函数添加一个非斜杠路径装饰器
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Test with both URLs in Examples [10-8](#ex-10-8) and [10-9](#ex-10-9).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 [10-8](#ex-10-8) 和 [10-9](#ex-10-9) 中的两个网址的测试。
- en: Example 10-8\. Test the nonslash endpoint
  id: totrans-105
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-8\. 测试非斜杠端点
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Example 10-9\. Test the slash endpoint
  id: totrans-107
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-9\. 测试斜杠端点
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now that both of these work, create an explorer, and retry the Get All test
    after. [Example 10-10](#ex-10-10) attempts this, but with a plot twist.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这两者都正常工作后，创建一个探险家，并在之后重新测试。[示例 10-10](#ex-10-10) 尝试这样做，但有一个情节转折。
- en: Example 10-10\. Test explorer creation, with an input error
  id: totrans-110
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-10\. 测试创建探险家时的输入错误
- en: '[PRE11]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'I misspelled `country`, although my speling is usually impeckable. Pydantic
    caught this in the Web layer, returning a `422` HTTP status code and a description
    of the problem. Generally, if FastAPI returns a `422`, the odds are that Pydantic
    fingered the perpetrator. The `"loc"` part says where the error occurred: the
    field `"country"` is missing, because I’m such an inept typist.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我拼错了 `country`，虽然我的拼写通常是无可挑剔的。Pydantic 在 Web 层捕获了这个错误，返回了 `422` 的 HTTP 状态码和问题的描述。一般来说，如果
    FastAPI 返回 `422`，那么 Pydantic 找到了问题的源头。`"loc"` 部分指出了错误发生的位置：字段 `"country"` 丢失，因为我是一个笨拙的打字员。
- en: Fix the spelling and retest in [Example 10-11](#ex-10-11).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 修正拼写并在 [示例 10-11](#ex-10-11) 中重新测试。
- en: Example 10-11\. Create an explorer with the corrected value
  id: totrans-114
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-11\. 使用正确的值创建一个探险家
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This time the call returns a `201` status code, which is traditional when a
    resource is created (all `2*xx*` status codes are considered to indicate success,
    with plain `200` being the most generic). The response also contains the JSON
    version of the `Explorer` object that was just created.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这次调用返回了 `201` 状态码，这在资源创建时是传统的（所有 `2*xx*` 状态码都被认为表示成功，其中最通用的是 `200`）。响应还包含刚刚创建的
    `Explorer` 对象的 JSON 版本。
- en: 'Now back to the initial test: will Beau turn up in the Get All Explorers test?
    [Example 10-12](#ex-10-12) answers this burning question.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在回到最初的测试：Beau 会出现在获取所有探险家的测试中吗？[示例 10-12](#ex-10-12) 回答了这个激动人心的问题。
- en: Example 10-12\. Did the latest `create()` work?
  id: totrans-118
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-12\. 最新的`create()`工作了吗？
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Yay.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 耶。
- en: Get one explorer
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取一个资源管理器
- en: Now, what happens if you try to look up Beau with the Get One endpoint ([Example 10-13](#ex-10-13))?
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您尝试使用 Get One 端点（[示例 10-13](#ex-10-13)）查找 Beau 会发生什么？
- en: Example 10-13\. Test the Get One endpoint
  id: totrans-123
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-13\. 测试获取单个端点
- en: '[PRE14]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: I used the quotes to preserve that space between the first and last names. In
    URLs, you could also use `Beau%20Buffette`; the `%20` is the hex code for the
    space character in ASCII.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用引号保留了名字中的第一个和最后一个名字之间的空格。在 URL 中，您也可以使用`Beau%20Buffette`；`%20`是空格字符在 ASCII
    中的十六进制代码。
- en: Missing and duplicate data
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缺少和重复的数据
- en: 'I’ve ignored two main error classes so far:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我忽略了两个主要的错误类别：
- en: Missing data
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 缺少数据
- en: If you try to get, modify, or delete an explorer by a name that isn’t in the
    database.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试通过数据库中不存在的名称获取、修改或删除资源管理器。
- en: Duplicate data
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 重复数据
- en: If you try to create an explorer with the same name more than once.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试多次使用相同的名称创建资源管理器。
- en: So, what if you ask for a nonexistent or duplicate explorer? So far, the code
    has been too optimistic, and exceptions will bubble up from the abyss.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果您请求一个不存在的或重复的资源管理器会发生什么？到目前为止，代码过于乐观，异常将从深渊中冒出。
- en: Our friend Beau was just added to the database. Imagine his evil clone (who
    shares his name) plots to replace him some dark night, using [Example 10-14](#ex-10-14).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的朋友 Beau 刚刚被添加到数据库中。想象一下，他的邪恶克隆人（与他同名）密谋在一个黑暗的夜晚替换他，使用 [示例 10-14](#ex-10-14)。
- en: 'Example 10-14\. Duplicate error: try to create an explorer more than once'
  id: totrans-134
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-14\. 重复错误：尝试多次创建资源管理器
- en: '[PRE15]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'I omitted most of the lines in that error trace (and replaced some parts with
    ellipses), because it contained mostly internal calls made by FastAPI and the
    underlying Starlette. But that last line: a SQLite exception in the Web layer!
    Where is the fainting couch?'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我省略了错误跟踪中的大部分行（并用省略号替换了一些部分），因为它主要包含 FastAPI 和底层 Starlette 进行的内部调用。但是最后一行：Web
    层中的一个 SQLite 异常！晕厥沙发在哪里？
- en: 'Right on the heels of this, yet another horror in [Example 10-15](#ex-10-15):
    a missing explorer.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 紧随其后，另一个恐怖在 [示例 10-15](#ex-10-15) 中出现：一个缺少的资源管理器。
- en: Example 10-15\. Get a nonexistent explorer
  id: totrans-138
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-15\. 获取一个不存在的资源管理器
- en: '[PRE16]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'What’s a good way to catch these at the bottom (Data) layer, and communicate
    the details to the top (Web)? Possibilities include the following:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是在底层（数据）层捕获这些异常并将详细信息传达给顶层（Web）的好方法？可能的方法包括以下几种：
- en: Let SQLite cough up a hairball (exception) and deal with it in the Web layer.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让 SQLite 吐出一个毛球（异常），并在 Web 层处理它。
- en: 'But: this mixes the layers, which is *Bad*. The Web layer should not know anything
    about specific databases.'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但是：这混淆了各个层级，这是*不好*的。Web 层不应该知道任何关于具体数据库的信息。
- en: Make every function in the Service and Data layers return `Explorer | None`
    where they used to return `Explorer`. Then a `None` indicates failure. (You can
    shorten this by defining `OptExplorer = Explorer | None` in *model/explorer.py*.)
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让服务和数据层中的每个函数返回`Explorer | None`，而不是返回`Explorer`。然后，`None`表示失败。（您可以通过在*model/explorer.py*中定义`OptExplorer
    = Explorer | None`来缩短这个过程。）
- en: 'But: the function may have failed for more than one reason, and you might want
    details. And this requires lots of code editing.'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但是：函数可能因多种原因失败，您可能需要详细信息。这需要大量的代码编辑。
- en: Define exceptions for `Missing` and `Duplicate` data, including details of the
    problem. These will flow up through the layers with no code changes until the
    Web path functions catch them. They’re also application specific rather than database
    specific, preserving the sanctity of the layers.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为`Missing`和`Duplicate`数据定义异常，包括问题的详细信息。这些异常将通过各个层级传播，无需更改代码，直到 Web 路径函数捕获它们。它们也是应用程序特定的，而不是数据库特定的，保持了各个层级的独立性。
- en: 'But: actually, I like this one, so it goes in [Example 10-16](#ex-10-16).'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但是：实际上，我喜欢这个，所以它放在 [示例 10-16](#ex-10-16) 中。
- en: Example 10-16\. Define a new top-level errors.py
  id: totrans-147
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-16\. 定义一个新的顶级 errors.py
- en: '[PRE17]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Each of these exceptions has a `msg` string attribute that can inform the higher-level
    code of what happened.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 每个异常都有一个`msg`字符串属性，可以通知高级别代码发生了什么。
- en: To implement this, in [Example 10-17](#ex-10-17), have *data/init.py* import
    the DB-API exception that SQLite would raise for a duplicate.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这一点，在 [示例 10-17](#ex-10-17) 中，让*data/init.py*导入 SQLite 会为重复操作引发的异常。
- en: Example 10-17\. Add a SQLite exception import into data/init.py
  id: totrans-151
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-17\. 在 data/init.py 中添加一个 SQLite 异常导入
- en: '[PRE18]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Import and catch this error in [Example 10-18](#ex-10-18).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [示例 10-18](#ex-10-18) 中导入和捕获此错误。
- en: Example 10-18\. Modify data/explorer.py to catch and raise these exceptions
  id: totrans-154
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-18\. 修改 data/explorer.py 以捕获并引发这些异常
- en: '[PRE19]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This drops the need to declare that any functions return `Explorer | None` or
    `Optional[Explorer]`. You indicate type hints only for normal return types, not
    exceptions. Because exceptions flow upward independent of the call stack until
    someone catches them, for once you don’t have to change anything in the Service
    layer. But here’s the new *web/explorer.py* in [Example 10-19](#ex-10-19), with
    exception handlers and appropriate HTTP status code returns.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这消除了需要声明任何函数返回`Explorer | None`或`Optional[Explorer]`的需要。你只为正常的返回类型指定类型提示，而不是异常。因为异常独立于调用堆栈向上传播，直到有人捕获它们，所以你不必在服务层更改任何内容。但是这是在[示例 10-19](#ex-10-19)中的新的*web/explorer.py*，带有异常处理程序和适当的
    HTTP 状态代码返回。
- en: Example 10-19\. Handle `Missing` and `Duplicate` exceptions in web/explorer.py
  id: totrans-157
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-19\. 在 web/explorer.py 中处理`Missing`和`Duplicate`异常
- en: '[PRE20]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Test these changes in [Example 10-20](#ex-10-20).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例 10-20](#ex-10-20)中测试这些更改。
- en: Example 10-20\. Test Get One nonexisting explorer again, with new `Missing`
    exception
  id: totrans-160
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-20\. 再次测试不存在的一次性探索者，使用新的`Missing`异常
- en: '[PRE21]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Good. Now, try the evil clone attempt again in [Example 10-21](#ex-10-21).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。现在，在[示例 10-21](#ex-10-21)中再次尝试邪恶的克隆尝试。
- en: Example 10-21\. Test duplicate fix
  id: totrans-163
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-21\. 测试重复修复
- en: '[PRE22]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The missing checks would also apply to the Modify and Delete endpoints. You
    can try writing similar tests for them.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 缺失检查也将适用于修改和删除端点。你可以尝试为它们编写类似的测试。
- en: Unit Tests
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元测试
- en: 'Unit tests deal only with the Data layer, checking the database calls and SQL
    syntax. I’ve put this section after the full tests because I wanted to have the
    `Missing` and `Duplicate` exceptions already defined, explained, and coded into
    *data/creature.py*. [Example 10-22](#ex-10-22) lists the test script *test/unit/data/test_creature.py*.
    Here are some points to note:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试仅涉及数据层，检查数据库调用和 SQL 语法。我将此部分放在完整测试之后，因为我希望已经定义、解释和编码了`Missing`和`Duplicate`异常，存储在*data/creature.py*中。[示例 10-22](#ex-10-22)列出了测试脚本*test/unit/data/test_creature.py*。以下是一些需要注意的点：
- en: You set the environment variable `CRYPTID_SQLITE_DATABASE` to `":memory:"` *before*
    importing `init` or `creature` from `data`. This value makes SQLite work completely
    in memory, not stomping any existing database file, or even creating a file on
    disk. It’s checked in *data/init.py* when that module is first imported.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在导入`data`中的`init`或`creature`之前，将环境变量`CRYPTID_SQLITE_DATABASE`设置为`":memory:"`。这个值使
    SQLite 完全在内存中运行，不会覆盖任何现有的数据库文件，甚至不会在磁盘上创建文件。在首次导入该模块时，*data/init.py*会检查它。
- en: The *fixture* named `sample` is passed to the functions that need a `Creature`
    object.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名为`sample`的*fixture*被传递给需要`Creature`对象的函数。
- en: 'The tests run in order. In this case, the same database stays up the whole
    time, instead of being reset between functions. The reason is to allow changes
    from previous functions to persist. With pytest, a fixture can have on the following:'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试按顺序运行。在本例中，相同的数据库在整个过程中保持开启状态，而不是在函数之间重置。原因是允许前一个函数的更改保持持久化。使用 pytest，fixture
    可能具有以下内容：
- en: Function scope (the default)
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数范围（默认）
- en: It’s called anew before every test function.
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个测试函数之前都会调用它。
- en: Session scope
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会话范围
- en: It’s called only once, at the start.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它仅在开始时被调用一次。
- en: Some tests force the `Missing` or `Duplicate` exceptions, and verify that they
    caught them.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些测试强制引发`Missing`或`Duplicate`异常，并验证它们是否被捕获。
- en: So, each of the tests in [Example 10-22](#ex-10-22) gets a brand-new, unchanged
    `Creature` object named `sample`.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，[示例 10-22](#ex-10-22)中的每个测试都会获得一个全新的、未更改的名为`sample`的`Creature`对象。
- en: Example 10-22\. Unit tests for data/creature.py
  id: totrans-177
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-22\. data/creature.py 的单元测试
- en: '[PRE23]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Hint: you can make your own version of *test/unit/data/test_explorer.py*.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：你可以制作自己版本的*test/unit/data/test_explorer.py*。
- en: Review
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾
- en: This chapter presented a simple data-handling layer, with a few trips up and
    down the layer stack as needed. [Chapter 12](ch12.html#ch12) contains unit tests
    for each layer, as well as cross-layer integration and full end-to-end tests.
    [Chapter 14](ch14.html#ch14) goes into more database depth and detailed examples.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了一个简单的数据处理层，根据需要在层栈中上下移动几次。[第 12 章](ch12.html#ch12)包含每个层的单元测试，以及跨层集成和完整的端到端测试。[第
    14 章](ch14.html#ch14)深入探讨了数据库的更多细节和详细示例。
