["```py\nanimal,bites,stitches,hush\nbear,1,35,300\nmarmoset,1,2,250\nbear,2,42,500\nelk,1,30,100\nweasel,4,7,50\nduck,2,0,10\n```", "```py\nimport csv\nfrom collections import Counter\n\ncounts = Counter()\nwith open('zoo.csv', 'rt') as fin:\n    cin = csv.reader(fin)\n    for num, row in enumerate(cin):\n        if num > 0:\n            counts[row[0]] += int(row[-1])\nfor animal, hush in counts.items():\n    print(\"%10s %10s\" % (animal, hush))\n```", "```py\n$ python zoo_counts.py\n      duck         10\n       elk        100\n      bear        800\n    weasel         50\n  marmoset        250\n```", "```py\n$ pip install bubbles\n```", "```py\nimport bubbles\n\np = bubbles.Pipeline()\np.source(bubbles.data_object('csv_source', 'zoo.csv', infer_fields=True))\np.aggregate('animal', 'hush')\np.pretty_print()\n```", "```py\n$ python bubbles1.py\n2014-03-11 19:46:36,806 DEBUG calling aggregate(rows)\n2014-03-11 19:46:36,807 INFO called aggregate(rows)\n2014-03-11 19:46:36,807 DEBUG calling pretty_print(records)\n+--------+--------+------------+\n|animal  |hush_sum|record_count|\n+--------+--------+------------+\n|duck    |      10|           1|\n|weasel  |      50|           1|\n|bear    |     800|           2|\n|elk     |     100|           1|\n|marmoset|     250|           1|\n+--------+--------+------------+\n2014-03-11 19:46:36,807 INFO called pretty_print(records)\n```", "```py\nne_110m_admin_1_states_provinces_shp.README.html\nne_110m_admin_1_states_provinces_shp.sbn\nne_110m_admin_1_states_provinces_shp.VERSION.txt\nne_110m_admin_1_states_provinces_shp.sbx\nne_110m_admin_1_states_provinces_shp.dbf\nne_110m_admin_1_states_provinces_shp.shp\nne_110m_admin_1_states_provinces_shp.prj\nne_110m_admin_1_states_provinces_shp.shx\n```", "```py\n$ pip install pyshp\n```", "```py\ndef display_shapefile(name, iwidth=500, iheight=500):\n    import shapefile\n    from PIL import Image, ImageDraw\n    r = shapefile.Reader(name)\n    mleft, mbottom, mright, mtop = r.bbox\n    # map units\n    mwidth = mright - mleft\n    mheight = mtop - mbottom\n    # scale map units to image units\n    hscale = iwidth/mwidth\n    vscale = iheight/mheight\n    img = Image.new(\"RGB\", (iwidth, iheight), \"white\")\n    draw = ImageDraw.Draw(img)\n    for shape in r.shapes():\n        pixels = [\n            (int(iwidth - ((mright - x) * hscale)), int((mtop - y) * vscale))\n            for x, y in shape.points]\n        if shape.shapeType == shapefile.POLYGON:\n            draw.polygon(pixels, outline='black')\n        elif shape.shapeType == shapefile.POLYLINE:\n            draw.line(pixels, fill='black')\n    img.show()\n\nif __name__ == '__main__':\n    import sys\n    display_shapefile(sys.argv[1], 700, 700)\n```", "```py\n$ python map1.py ne_110m_admin_1_states_provinces_shp\n```", "```py\nimport geopandas\nimport matplotlib.pyplot as plt\n\nworld_file = geopandas.datasets.get_path('naturalearth_lowres')\nworld = geopandas.read_file(world_file)\ncities_file = geopandas.datasets.get_path('naturalearth_cities')\ncities = geopandas.read_file(cities_file)\nbase = world.plot(color='orchid')\ncities.plot(ax=base, color='black', markersize=2)\nplt.show()\n```"]