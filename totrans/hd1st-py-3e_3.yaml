- en: 'Chapter 3\. Lists of Numbers: *Processing List Data*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-1-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The more code you write, the better you get. It’s that simple.** In this
    chapter, you continue to create Python code to help the Coach. You learn how to
    **read** data from a Coach-supplied data **file**, slurping its lines into a **list**,
    one of Python’s most-powerful built-in **data structures**. As well as creating
    lists from the file’s data, you’ll also learn how to create lists from scratch,
    **growing** your list **dynamically** as needs be. And you’ll process lists using
    one of Python’s most popular looping constructs: the **for** loop. You’ll **convert**
    values from one data format to another, and you’ll even make a new best friend
    (your very own Python **BFF**). You’ve had your fill of coffee and pie, so it’s
    time to roll up your sleeves and get back to work.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Task #2: Process the data in the file'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With Task #1 complete, it’s time to move onto Task #2\. There’s a bit of work
    to do but, as with the previous chapter’s activities, you can approach things
    bit-by-bit as detailed in the last chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Read the lines from the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ignore the second line
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Break the first line apart by “,” to produce a list of times
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take each of the times and convert them to a number from the “mins:secs.hundredths”
    format
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate the average time, then convert it back to the “mins:secs.hundredths”
    format (for display purposes)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Display the variables from Task #1, then the list of times and the calculated
    average from Task #2'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-2-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**It’s time to get to work.**'
  prefs: []
  type: TYPE_NORMAL
- en: You won’t be done by the time the Coach is finished his warm-up, but you’ll
    definitely make progress by the end of today’s swim session.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started by grabbing a copy of this chapter’s data before learning
    how Python reads data from a file.
  prefs: []
  type: TYPE_NORMAL
- en: Grab a copy of the Coach’s data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There’s no point learning how to read data from a file if you have no data
    to work with. So, head on over to this book’s support website and grab the latest
    copy of the Coach’s data files. There are 61 individual data files packaged as
    a ZIP archive. Grab a copy from here::'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-3-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Once your download completes, unzip the file then copy the resulting swimdata
    folder into your `Learning` folder. This ensures the code which follows can find
    the data as it’ll be in a known place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each file in the `swimdata` folder contains the recorded times for one swimmer’s
    attempts at a specific youth distance/stroke pairing. Recall the data file from
    the start of the previous chapter which shows Darius’s under-13 times for the
    100m fly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-3-02.png)![Image](assets/ch02-3-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Yes, it does.**'
  prefs: []
  type: TYPE_NORMAL
- en: There’s a BIF called **open** which can work with files, opening them for reading,
    writing, appending, or any combination of the above.
  prefs: []
  type: TYPE_NORMAL
- en: The **open** BIF is powerful on it’s own, but it shines when combined with Python’s…
    em, eh… **with** statement.
  prefs: []
  type: TYPE_NORMAL
- en: The open BIF works with files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether your file contains textual or binary data, the **open** BIF can open
    the file to read, write, or append data to/from it. By default, **open** reads
    from a text file, which is perfect as that’s what you want to do with the Darius’s
    data file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-4-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can call **open** directly in your code, opening a named file, processing
    its data, then closing the file when you’re done. This open-process-close pattern
    is very common, regardless of the programming language you use. In fact, Python
    has a language statement which makes working with the open-process-close pattern
    especially convenient: the **with** statement.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Although there’s a bit more to the **with** statement than initially meets
    the eye, there’s only one thing that you need to know about it right now: If you
    open your file with **with**, Python arranges to *automatically* close your file
    when you’re done, regardless of what happens during whatever processing you perform
    on the file.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-4-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**As always, follow along.**'
  prefs: []
  type: TYPE_NORMAL
- en: Not much code, but there’s lots happening...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code is not very long, but – as the annotations at the bottom of the last
    page indicate – there’s a lot going on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-6-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s highlight three important take-aways:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/1-circle.png) **The with statement opens the file** *before*
    **its code block runs.**'
  prefs: []
  type: TYPE_NORMAL
- en: You may well be asking “Which code block?”, and you’d be right to. We haven’t
    told you yet, but the **with** statement’s code block is all the code indented
    under it. In this case, the code block is only one line long and that’s OK (code
    blocks can be of any length).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**If you are coming to Python from one of those programming languages which
    uses curly-braces to delimit blocks of code, using indentation in this way may
    unnerve you. Don’t let it, as it’s really not that big a deal.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-6-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**It not that we don’t want to talk about indentation.**'
  prefs: []
  type: TYPE_NORMAL
- en: It’s just we feel there’s much more to Python than its use of indentation (or,
    more correctly, *whitespace*) to delimit code blocks. Yes, it’s an important aspect
    of the language, but it’s something most Python newbies get used to quickly. When
    we need to, we’ll call it out, otherwise we’ll just get on with things. And with
    that said, let’s get back to the take-aways.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/2-circle.png) **The with statement closes the file** *after*
    **its code block runs.**'
  prefs: []
  type: TYPE_NORMAL
- en: This is a cool feature, as we’d forgotten to do this. It’s nice to know the
    **with** statement has your back, tidying up after your code block executes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/3-circle.png) **Two variables are created by the code:** `df`
    **and** `data`**.**'
  prefs: []
  type: TYPE_NORMAL
- en: The `df` variable refers to a *file object* created by the successful execution
    of the **open** BIF. The `data` variable refers to the list of lines read from
    the `df` file object by the **readlines** method. Both variables continue to exist
    after the code block ends, although the `df` variable now refers to a *closed*
    file object.
  prefs: []
  type: TYPE_NORMAL
- en: Variables are created dynamically, as needed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `df` and `data` variables were created as a result of assignment. Although
    it’s easy to see how `data` came into being, thanks to the use of the assignment
    operator (`=`), it’s less clear what’s going on with `df`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-7-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The key word is “as”.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Thanks to that **with**, the **as** keyword takes the **open** BIF’s return
    value and assigns it to the identified variable name, which is `df` in your code.
    It’s as if this code ran:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The **as** keyword, together with **with**, does the same thing (and looks nicer,
    too).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a closer look at what `df` is, as well as learn a bit about what
    it can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-7-02.png)![Image](assets/ch02-7-03.png)'
  prefs: []
  type: TYPE_IMG
- en: It’s not that file objects aren’t exciting...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It’s just, in this case, the file object is merely a means to an end: loading
    the file’s lines into the `data` variable. So, what’s `data` and what can you
    do with it?'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-8-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You already know (from the previous chapter) that Python lists understand the
    square bracket notation. Before you get to that, let’s take a look at what `data`
    contains:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**You may have thought about executing the combo mambo on “data” here, but
    you don’t need to just yet. For now, all you need is the square bracket notation.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-8-02.png)![Image](assets/ch02-8-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Don’t forget to press Shift+Enter to execute code cells.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-9-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Yes, with some help from “with”.**'
  prefs: []
  type: TYPE_NORMAL
- en: Despite being a one-line code block, a lot’s happening here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Not only has your list been created, assigned to your `data` variable *and*
    populated with the data contained within the swimmer’s file, but that `with` statement
    has managed to complete the first two subtasks for Task #2\. How *cool* is that?'
  prefs: []
  type: TYPE_NORMAL
- en: Take a look (on the next page).
  prefs: []
  type: TYPE_NORMAL
- en: 'Work has started on Task #2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Those two lines of code pack a punch. Here they are again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-10-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The data value in the first slot in the `data` list is a string representing
    the swimmer’s times:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-10-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can safely ignore anything else in the file, as the data you need is in
    the above string. It’s time for a couple checkmarks to indicate your progress
    with Task #2:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-10-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The third sub-task should not be hard for anyone who has spent any amount of
    time working with Python’s string technology. As luck would have it, you’ve just
    worked through the string material in the previous chapter, so you’re all set
    to have a go. But before you get to that sub-task, we need to talk a little about
    one specific part of that **with** statement: the **colon**.'
  prefs: []
  type: TYPE_NORMAL
- en: Your new best friend, Python’s colon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The colon (`**:**`) indicates a code block is about to *begin*.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike a lot of other programming languages, Python does not use curly braces
    (`**{**` and `**}**`) to delimit blocks. Instead Python uses **indentation** (or,
    to be more accurate, *whitespace*). In fact, in Python, curly braces delimited
    data, *not* code.
  prefs: []
  type: TYPE_NORMAL
- en: A code block in Python ends when the indentation ends.
  prefs: []
  type: TYPE_NORMAL
- en: In your **with** statement, the block contains only one line of code, but it
    could potentially contain any number of lines of code. Code indented to the same
    level as the immediately preceding line of code belongs to the *same* block.
  prefs: []
  type: TYPE_NORMAL
- en: The use of the colon is critical here (which is why it’s your new best friend).
    Like in real life, if you forget your best friend, bad things happen. If you forget
    the colon at the end of that line, Python refuses to run your code!
  prefs: []
  type: TYPE_NORMAL
- en: 'Think of the colon and indentation as *going together*: you can’t have one
    without the other.'
  prefs: []
  type: TYPE_NORMAL
- en: '**FYI: the Python docs refer to a “code block” as a “suite”.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**We think this is weird, too.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-11-02.png)![Image](assets/ch02-13-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Yes, to both questions.**'
  prefs: []
  type: TYPE_NORMAL
- en: Yes, we did indeed introduce strings in the previous chapter and, yes, we’re
    concentrating on lists in this one.
  prefs: []
  type: TYPE_NORMAL
- en: Recall the **split** method produces a list from a string, which is precisely
    why you need to use it now. If your `times` variable, above, isn’t a list, you’re
    likely doing something wrong.
  prefs: []
  type: TYPE_NORMAL
- en: When you’re ready, flip the page to see the code we came up with.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-14-03.png)'
  prefs: []
  type: TYPE_IMG
- en: That was almost too easy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With your prior experience of working with strings from the previous chapter,
    we’re hoping that most recent *Sharpen* wasn’t too taxing.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to call **strip** *before* **split**, producing a new list
    from the data value in the `data`’s first slot (`data[0]`). In fact, your latest
    chain code is very similar to the code from the previous chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-15-01.png)![Image](assets/ch02-15-02.png)'
  prefs: []
  type: TYPE_IMG
- en: With the result of your latest chain assigned to the `times` variable, you’ve
    completed sub-task (c). It’s time for another checkmark.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-15-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Pause to review this task’s code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s how you can combine the code so far in a single code cell within VS
    Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-16-01.png)'
  prefs: []
  type: TYPE_IMG
- en: If you go ahead and try both of these `with` statements in your notebook you’ll
    learn that both populate the list `times` refers to with the same collection of
    strings. So, why not use the two-line version of the code as opposed to the three-line
    version? After all, just like with the `parts` list in the previous chapter, the
    `data` list is no longer needed once it’s been used that one time...
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-16-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**No, it’s not hard to read. It’s a nightmare.**'
  prefs: []
  type: TYPE_NORMAL
- en: Three methods are chained here, with the first one creating a list, from which
    you take the first slot’s data (using the square bracket notation), then you strip
    it before splitting it... but, what does “it” refer to again?!?
  prefs: []
  type: TYPE_NORMAL
- en: This single line of code is hard to read, understand, explain, *and* maintain.
    We pity the poor programmer asked to “fix” this code at some point in the future
    (who, most likely, will be *you*).
  prefs: []
  type: TYPE_NORMAL
- en: Converting a time string into a time value
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After the code from the previous page runs, the `times` variable refers to
    a list of strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-17-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The values in each of the slots in the `times` list certainly look like swim
    times, but they are not. They are strings. To perform any numeric calculation
    on this list, such as working out an average, these strings need to be converted
    into numeric values.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a closer look at just on value (the first). If you can come up with
    a strategy for converting this first time, you can then apply it to the rest of
    the list.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-17-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**There’s more than one way to do this, so don’t worry if what you think up
    isn’t the same method as ours (which is detailed over the page).**'
  prefs: []
  type: TYPE_NORMAL
- en: Convert the times to hundredths of seconds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the moment, all the swim times are *strings* even though our brains see
    them as *times*. Not so for our computers, though (let alone Python). Our digital
    buddies need a little help with the conversion, and here’s how we’d suggest it
    can be done:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-18-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Turning this conversion strategy into Python code is *remarkably* straightforward.
    Let’s take a look.
  prefs: []
  type: TYPE_NORMAL
- en: To hundredths of seconds with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We went all out with that visual on the previous page, and converting the visual’s
    steps to Python code is a near one-for-one match. The code shown below performs
    the calculation for the first swim time taken from your `times` list, with the
    code typed into a single cell in the `Average.ipynb` notebook.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-19-01.png)'
  prefs: []
  type: TYPE_IMG
- en: To help keep you straight, we’ve added some comments to this code. When Python
    sees the `#` character, it *ignores* everything which follows the `#` until the
    end of the current line. (Note how VS Code helpfully displays the comments in
    **green**).
  prefs: []
  type: TYPE_NORMAL
- en: Type this code into your notebook, and don’t feel guilty if you decide to exclude
    the comments (don’t worry, we won’t tell). We put them in to match up the code
    with the conversion steps from the preview page’s visual.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-19-02.png)'
  prefs: []
  type: TYPE_IMG
- en: With this code typed into an empty cell in your notebook, press **Shift+Enter**
    to run it. The value `8795` appears on screen. Sweet.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-20-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**If you can convert one swim time...**'
  prefs: []
  type: TYPE_NORMAL
- en: You can convert them all. And, there’s no extra credit for guessing you need
    a loop here.
  prefs: []
  type: TYPE_NORMAL
- en: Like most programming languages, Python provides many ways to loop, with the
    **for** loop being a favorite. Let’s look at a simple loop which takes each of
    the strings from the `times` list and displays them on screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-20-02.png)![Image](assets/ch02-21-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Cool, isn’t it?**'
  prefs: []
  type: TYPE_NORMAL
- en: The **for** loop is smart enough to know all about the length of the list it
    is processing.
  prefs: []
  type: TYPE_NORMAL
- en: There’s always a temptation to use the **len** BIF to work out how big your
    list is before it’s looped over, but with **for** this is an unnecessary step.
    The **for** loop starts with the first value in the list, takes each value in
    order, processes the value, then moves onto the next. When the list is exhausted,
    the **for** loop terminates.
  prefs: []
  type: TYPE_NORMAL
- en: This is the sort of magic we love.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-22-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Python does indeed support while.**'
  prefs: []
  type: TYPE_NORMAL
- en: But, the **while** loop in Python is used much less than an equivalent **for**.
  prefs: []
  type: TYPE_NORMAL
- en: Before getting to our solution code for the above exercise, let’s take a moment
    to compare **for** loops against **while** loops.
  prefs: []
  type: TYPE_NORMAL
- en: The gloves are off... for loops vs. while loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the **for** loop from earlier, together with its output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-23-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And here’s an equivalent **while** loop which does exactly the same thing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-23-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Not only is the **while** loop’s code twice the number of lines as the **for**
    loop, but look at all the extra stuff you have to concern yourself with! There’s
    so many places where the **while** loop can go wrong, unlike the **for** loop.
    It’s not that **while** loops shouldn’t be used, just remember to reach for the
    **for** loop *first* in most cases.
  prefs: []
  type: TYPE_NORMAL
- en: You’re motoring now!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You are now past the mid-point of your sub-tasks for Task #2:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-25-01.png)'
  prefs: []
  type: TYPE_IMG
- en: With the first part of sub-task (e), you have choices.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-25-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Either approach works.**'
  prefs: []
  type: TYPE_NORMAL
- en: However, if you think the converted times might be needed later, perhaps creating
    a new list of converted times is the way to go...
  prefs: []
  type: TYPE_NORMAL
- en: What do you think?
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-26-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s keep a copy of the conversions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To be honest, *either* of the two approaches from the bottom of the last page
    would work for the first part of sub-task (e) of Task #2: *Calculate the average
    time*. However, we’re guessing those converted values will be needed at least
    once more, so best if we put them in another list as we perform the conversions.'
  prefs: []
  type: TYPE_NORMAL
- en: To do this, you need to learn a bit more about lists. Specifically, how to create
    a new, empty list, and how to incrementally add data values to your list as you
    iterate over the `times` list.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new, empty list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Step 1: think up a meaningful variable name for your list. Step 2: assign an
    empty list to your new variable name.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s call your new list `converts`. Here’s how to perform Step 1 and 2 in
    a single line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-26-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Recall that the `type` BIF is used to determine what *type* a variable refers
    to. A quick call to `type` confirms you’re working with a list, and a call to
    the `len` BIF confirms your new list is *empty*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-26-03.png)![Image](assets/ch02-26-04.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Can you remember what you need to do to display your new list’s built-in
    methods?**'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a list of your list’s methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s combo mambo time!
  prefs: []
  type: TYPE_NORMAL
- en: As with any object in Python, the **print dir** combination lists the object’s
    built-in attributes and methods. And as everything in Python is an object, lists
    are objects too!
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-27-01.png)![Image](assets/ch02-27-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first non-dunder method name is **append**. You can likely guess what it
    does, but let’s use the **help** BIF to confirm:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-27-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Ah ha!
  prefs: []
  type: TYPE_NORMAL
- en: That final line of output (*“Append object to the end of the list.”*) is all
    you need to know, even though it’s tempting to take some time to experiment with
    those other methods, some of which sound cool. But, let’s not do that right now.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Of course, if you feel the need to experiment with those other methods, don’t
    let us stop you.**'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s stick to the task of building a new list of converted swim time values
    as you go.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-28-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**No, you do not need to worry.**'
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we made a big deal about lists in Python being *like*
    arrays in other programming languages. This let us introduce the use of the square
    bracket notation with lists, which is a common technique when working with arrays
    *and* lists.
  prefs: []
  type: TYPE_NORMAL
- en: However, *unlike* with arrays, where you typically have to say how big your
    array is likely to get (e.g., 1000 slots) and what type of data it’s going to
    contain (e.g., integers), there’s no need to declare either of these with your
    Python lists.
  prefs: []
  type: TYPE_NORMAL
- en: Python lists are *dynamic*, which means they grow as needed (so there’s no need
    to pre-declare the number of slots beforehand). And Python lists don’t contain
    data values, they contain **object references**, so you can put any data of any
    type in a Python list. You can even mix’n’match types.
  prefs: []
  type: TYPE_NORMAL
- en: It’s time to calculate the average
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You don’t need to be a programmer to know how to calculate an average when
    given a list of numbers. The code is not difficult, but this fact alone does not
    justify your decision to actually write it. When you happen upon a coding need
    which feels like someone else may have already coded it, ask yourself this question:
    *I wonder if there’s anything in the Python Standard Library which might help?*'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is no shame in reusing existing code, even for something you consider
    *simple*. With that in mind, here’s how to calculate the average from the `converts`
    list with some help from the PSL:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hey, remember that handy PSL? No, not the delicious seasonal latte, the other
    PSL!**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-32-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Although calculating the average is easy, as shown above you haven’t had to
    write a loop, maintain a count, keep a running total, nor perform the average
    calculation. All you do is pass the name of the list of numbers into the **mean**
    function which returns the arithmetic mean (i.e., the average) of your data. Cool.
    That’ll do.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-32-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Yes, as mins:secs.hundredths.**'
  prefs: []
  type: TYPE_NORMAL
- en: In effect, you need to reverse the process from earlier which converted the
    original swim time string into it’s numeric equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: It can’t be that hard, can it?
  prefs: []
  type: TYPE_NORMAL
- en: Convert the average to a swim time string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Experienced Python programmers knows enough to apply a few “tricks” to the problem
    of converting your hundredths of seconds back into the *mins:secs.hundredths*
    string format. You’ll learn about these techniques later in this book, as showing
    them to you now would likely double the size of this chapter. So, for now, let’s
    (mostly) stick with the Python you already know to perform this task.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-33-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Follow along in your notebook while you’re walked through the five steps to
    perform the conversion. Here’s what you’re trying to do:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-33-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](assets/1-circle.png) **Begin by converting the hundredths value to
    its seconds equivalent.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-33-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](assets/2-circle.png) **Break the rounded average into it’s component
    parts.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-34-01.png)![Image](assets/ch02-34-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](assets/3-circle.png) **Calculate the number of minutes.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-34-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](assets/4-circle.png) **Calculate the number of seconds.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-35-01.png)![Image](assets/ch02-35-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](assets/5-circle.png) **With minutes, seconds, and hundredths now
    known, build the swim time string.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-35-03.png)![Image](assets/ch02-36-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Yes, and it’s easier than you think.**'
  prefs: []
  type: TYPE_NORMAL
- en: You could go off and learn how to write automated tests in Python, then code-up
    any number of tests to check your calculations...
  prefs: []
  type: TYPE_NORMAL
- en: Or you could simply take another look at the swim coach’s spreadsheet to confirm
    your calculated swim time of ‘`1:26.58`’ matches the average as calculated by
    the Coach’s spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: And it does, as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-36-02.png)'
  prefs: []
  type: TYPE_IMG
- en: It’s been a while since your last checkmark...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You are finally able to place a well-deserved tick against
    sub-task (e).
  prefs: []
  type: TYPE_NORMAL
- en: 'All that remains is to combine the code from the previous chapter with the
    code seen so far in this chapter. Once that’s done, sub-task (f) will be done
    too:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-37-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Task #2 (finally) gets over the line!'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well done! With the creation (and execution) of the `Times.ipynb` notebook,
    the two tasks identified at the start of the previous chapter are now complete.
    It’s a case of checkmarks all around!
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/1-circle.png) **Extract data from the file’s name**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-40-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Images](assets/2-circle.png) **Process the data in the file**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-40-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Of course, getting to this point doesn’t necessarily mean you’re done...
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch02-41-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**No, we haven’t forgotten.**'
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter lays the groundwork for getting to the point where you can
    tackle the charting requirement, so we’ve ask the Coach to bear with us.
  prefs: []
  type: TYPE_NORMAL
- en: At the moment, your code only works with the data for one specific data file.
    There are another 60+ files in the Coach’s dataset. It would be nice if there
    was a way to use this code with *any* of them on demand, and as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Doing so is something you can mull over on your way to the next chapter when
    we’ll work through a solution to this problem *together*.
  prefs: []
  type: TYPE_NORMAL
- en: For now, let’s conclude this chapter with another summary and a super-topical
    crossword puzzle. Enjoy!
  prefs: []
  type: TYPE_NORMAL
