- en: Appendix D. Answers to Exercises
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 D. 练习答案
- en: 1\. A Taste of Py
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. Python 的味道
- en: 1.1 If you don’t already have Python 3 installed on your computer, do it now.
    Read [Appendix B](app02.html#app_install) for the details for your computer system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 1.1 如果你的计算机上还没有安装 Python 3，请立即安装。参见[附录 B](app02.html#app_install)获取详细的安装信息。
- en: 1.2 Start the Python 3 interactive interpreter. Again, details are in [Appendix B](app02.html#app_install).
    It should print a few lines about itself and then a single line starting with
    `>>>`. That’s your prompt to type Python commands.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 1.2 启动 Python 3 交互式解释器。关于如何做的详细信息在[附录 B](app02.html#app_install)中。它应该打印几行关于自身的信息，然后一行以`>>>`开头。这是你输入
    Python 命令的提示符。
- en: '1.3 Play with the interpreter a little. Use it like a calculator and type this:
    `8 * 9`. Press the Enter key to see the result. Python should print `72`.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3 用解释器玩一会儿。像计算器一样使用它，输入`8 * 9`。按 Enter 键查看结果。Python 应该打印`72`。
- en: 1.4 Type the number `47` and press the Enter key. Did it print 47 for you on
    the next line?
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 输入数字`47`并按 Enter 键。它是否在下一行为你打印了 47？
- en: 1.5 Now type `print(47)` and press Enter. Did that also print 47 for you on
    the next line?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 1.5 现在输入`print(47)`并按 Enter 键。这会在下一行也打印出 47 吗？
- en: '2\. Data: Types, Values, Variables, and Names'
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 数据：类型、值、变量和名称
- en: 2.1 Assign the integer value `99` to the variable `prince`, and print it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 2.1 将整数值`99`赋给变量`prince`，并打印出来。
- en: 2.2 What type is the value `5`?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 2.2 值`5`的类型是什么？
- en: 2.3 What type is the value `2.0`?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 2.3 值`2.0`的类型是什么？
- en: 2.4 What type is the expression `5 + 2.0`?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 2.4 表达式`5 + 2.0`的类型是什么？
- en: 3\. Numbers
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 数字
- en: 3.1 How many seconds are in an hour? Use the interactive interpreter as a calculator
    and multiply the number of seconds in a minute (`60`) by the number of minutes
    in an hour (also `60`).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 3.1 一个小时有多少秒？将秒钟数（`60`）乘以小时数（同样是`60`），使用交互式解释器作为计算器。
- en: 3.2 Assign the result from the previous task (seconds in an hour) to a variable
    called `seconds_per_hour`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 3.2 将前一个任务（一个小时的秒数）的结果赋给名为`seconds_per_hour`的变量。
- en: 3.3 How many seconds are in a day? Use your `seconds_per_hour` variable.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 3.3 一天有多少秒？使用你的`seconds_per_hour`变量。
- en: 3.4 Calculate seconds per day again, but this time save the result in a variable
    called `seconds_per_day`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 3.4 再次计算一天的秒数，但这次将结果保存在名为`seconds_per_day`的变量中。
- en: 3.5 Divide `seconds_per_day` by `seconds_per_hour`. Use floating-point (`/`)
    division.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 3.5 将`seconds_per_day`除以`seconds_per_hour`。使用浮点数（`/`）除法。
- en: 3.6 Divide `seconds_per_day` by `seconds_per_hour`, using integer (`//`) division.
    Did this number agree with the floating-point value from the previous question,
    aside from the final `.0`?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 3.6 使用整数（`//`）除法将`seconds_per_day`除以`seconds_per_hour`。这个数值与前一个问题中的浮点数值是否一致，除了最后的`.0`？
- en: 4\. Choose with if
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 选择`if`
- en: 4.1 Choose a number between 1 and 10 and assign it to the variable `secret`.
    Then, select another number between 1 and 10 and assign it to the variable `guess`.
    Next, write the conditional tests (`if`, `else`, and `elif`) to print the string
    `'too low'` if `guess` is less than `secret`, `'too high'` if greater than `secret`,
    and `'just right'` if equal to `secret`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 4.1 选择一个介于 1 到 10 之间的数字，并将其赋给变量`secret`。然后，再选择另一个介于 1 到 10 之间的数字，并赋给变量`guess`。接下来，编写条件测试（`if`、`else`和`elif`）来打印字符串`'too
    low'`（如果`guess`小于`secret`）、`'too high'`（如果大于`secret`）和`'just right'`（如果等于`secret`）。
- en: '4.2 Assign `True` or `False` to the variables `small` and `green`. Write some
    `if`/`else` statements to print which of these matches those choices: cherry,
    pea, watermelon, pumpkin.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 4.2 将`True`或`False`分配给变量`small`和`green`。编写一些`if`/`else`语句来打印与这些选择匹配的水果：cherry、pea、watermelon、pumpkin。
- en: 5\. Text Strings
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. 文本字符串
- en: '5.1 Capitalize the word starting with `m`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 5.1 将以`m`开头的单词大写：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '5.2 Print each list question with its correctly matching answer, in the form:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 5.2 按正确的匹配打印每个列表问题和它们的答案，格式如下：
- en: 'Q: *question*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 'Q: *问题*'
- en: 'A: *answer*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 'A: *答案*'
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '5.3 Write the following poem by using old-style formatting. Substitute the
    strings `''roast beef''`, `''ham''`, `''head''`, and `''clam''` into this string:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 5.3 使用旧式格式编写以下诗歌。将字符串`'roast beef'`、`'ham'`、`'head'`和`'clam'`替换到这个字符串中：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '5.4 Write a form letter by using new-style formatting. Save the following string
    as `letter` (you’ll use it in the next exercise):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 5.4 使用新式格式编写一封表格信。将以下字符串保存为`letter`（你将在下一个练习中使用它）：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 5.5 Assign values to variable strings named `'salutation'`, `'name'`, `'product'`,
    `'verbed'` (past tense verb), `'room'`, `'animals'`, `'percent'`, `'spokesman'`,
    and `'job_title'`. Print `letter` with these values, using `letter.format()`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 5.5 为名为`'salutation'`、`'name'`、`'product'`、`'verbed'`（过去式动词）、`'room'`、`'animals'`、`'percent'`、`'spokesman'`和`'job_title'`的字符串变量分配值。使用`letter.format()`打印`letter`与这些值。
- en: '5.6 After public polls to name things, a pattern emerged: an English submarine
    (Boaty McBoatface), an Australian racehorse (Horsey McHorseface), and a Swedish
    train (Trainy McTrainface). Use `%` formatting to print the winning name at the
    state fair for a prize duck, gourd, and spitz.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 5.6 在公众投票中命名事物后，出现了一种模式：英国潜艇（Boaty McBoatface）、澳大利亚赛马（Horsey McHorseface）和瑞典火车（Trainy
    McTrainface）。使用`%`格式化打印国家博览会上的获奖名字，用于鸭子、葫芦和斯皮茨。
- en: 5.7 Do the same, with `format()` formatting.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 5.7 使用`format()`格式化相同。
- en: 5.8 Once more, with feeling, and *f strings*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 5.8 再来一次，使用*f字符串*。
- en: 6\. Loop with while and for
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6\. 使用while和for循环
- en: 6.1 Use a `for` loop to print the values of the list `[3, 2, 1, 0]`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 6.1 使用`for`循环打印列表`[3, 2, 1, 0]`的值。
- en: 6.2 Assign the value `7` to the variable `guess_me`, and the value `1` to the
    variable `number`. Write a `while` loop that compares `number` with `guess_me`.
    Print `'too low'` if `number` is less than `guess me`. If `number` equals `guess_me`,
    print `'found it!'` and then exit the loop. If `number` is greater than `guess_me`,
    print `'oops'` and then exit the loop. Increment `number` at the end of the loop.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 6.2 将值`7`赋给变量`guess_me`，将值`1`赋给变量`number`。编写一个`while`循环，将`number`与`guess_me`进行比较。如果`number`小于`guess_me`，则打印`'too
    low'`。如果`number`等于`guess_me`，则打印`'found it!'`，然后退出循环。如果`number`大于`guess_me`，则打印`'oops'`，然后退出循环。在循环结束时增加`number`。
- en: 6.3 Assign the value `5` to the variable `guess_me`. Use a `for` loop to iterate
    a variable called `number` over `range(10)`. If `number` is less than `guess_me`,
    print `'too low'`. If it equals `guess_me`, print `found it!` and then break out
    of the for loop. If `number` is greater than `guess_me`, print `'oops'` and then
    exit the loop.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 6.3 将值`5`赋给变量`guess_me`。使用`for`循环迭代名为`number`的变量，范围为`range(10)`。如果`number`小于`guess_me`，则打印`'too
    low'`。如果等于`guess_me`，则打印`'found it!'`，然后退出循环。如果`number`大于`guess_me`，则打印`'oops'`，然后退出循环。
- en: 7\. Tuples and Lists
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7\. 元组和列表
- en: 7.1 Create a list called `years_list`, starting with the year of your birth,
    and each year thereafter until the year of your fifth birthday. For example, if
    you were born in 1980, the list would be `years_list = [1980, 1981, 1982, 1983,
    1984, 1985]`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 7.1 创建名为`years_list`的列表，以你的出生年份开始，直到你五岁生日的年份。例如，如果你是1980年出生，列表将是`years_list
    = [1980, 1981, 1982, 1983, 1984, 1985]`。
- en: 7.2 In which of these years was your third birthday? Remember, you were 0 years
    of age for your first year.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 7.2 在这些年份中，哪一年是你的第三个生日？请记住，你的第一年是0岁。
- en: 7.3 In which year in `years_list` were you the oldest?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 7.3 在`years_list`中哪一年你最年长？
- en: '7.4 Make and print a list called `things` with these three strings as elements:
    `"mozzarella"`, `"cinderella"`, `"salmonella"`.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 7.4 创建并打印一个名为`things`的列表，其中包含这三个字符串作为元素：`"mozzarella"`、`"cinderella"`、`"salmonella"`。
- en: 7.5 Capitalize the element in `things` that refers to a person and then print
    the list. Did it change the element in the list?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 7.5 将`things`中指向人的元素大写，然后打印列表。它改变了列表中的元素吗？
- en: 7.6 Make the cheesy element of `things` all uppercase and then print the list.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 7.6 将`things`中的奶酪元素全部大写，然后打印列表。
- en: 7.7 Delete the disease element, collect your Nobel Prize, and then print the
    list.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 7.7 删除疾病元素，领取你的诺贝尔奖，然后打印列表。
- en: 7.8 Create a list called `surprise` with the elements `"Groucho"`, `"Chico"`,
    and `"Harpo"`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 7.8 创建名为`surprise`的列表，元素为`"Groucho"`、`"Chico"`和`"Harpo"`。
- en: 7.9 Lowercase the last element of the `surprise` list, reverse it, and then
    capitalize it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 7.9 将`surprise`列表的最后一个元素小写，反转它，然后大写它。
- en: 7.10 Use a list comprehension to make a list called `even` of the even numbers
    in `range(10)`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 7.10 使用列表推导创建一个名为`even`的列表，其中包含`range(10)`中的偶数。
- en: '7.11 Let’s create a jumprope rhyme maker. You’ll print a series of two-line
    rhymes. Start with this program fragment:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 7.11 让我们创建一个跳绳童谣生成器。你将打印一系列两行押韵的诗句。从这个程序片段开始：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For each string pair (`first`, `second`) in `rhymes`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`rhymes`中的每对字符串（`first`、`second`）：
- en: 'For the first line:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一行：
- en: Print each string in `start1`, capitalized and followed by an exclamation point
    and a space.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印`start1`中的每个字符串，大写并后跟感叹号和空格。
- en: Print `first`, also capitalized and followed by an exclamation point.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印大写的`first`，后跟感叹号。
- en: 'For the second line:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第二行：
- en: Print `start2` and a space.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印`start2`和一个空格。
- en: Print `second` and a period.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印`second`和一个句号。
- en: 8\. Dictionaries
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8\. 字典
- en: '8.1 Make an English-to-French dictionary called `e2f` and print it. Here are
    your starter words: `dog` is `chien`, `cat` is `chat`, and `walrus` is `morse`.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 8.1 创建一个英语到法语的字典`e2f`并打印它。这是你的起始词汇：`dog`是`chien`，`cat`是`chat`，`walrus`是`morse`。
- en: 8.2 Using your three-word dictionary `e2f`, print the French word for `walrus`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 8.2 使用你的三词字典`e2f`，打印`walrus`的法语单词。
- en: 8.3 Make a French-to-English dictionary called `f2e` from `e2f`. Use the `items`
    method.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 8.3 从`e2f`创建一个法语到英语的字典`f2e`。使用`items`方法。
- en: 8.4 Print the English equivalent of the French word `chien`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 8.4 打印法语单词`chien`的英语对应词。
- en: 8.5 Print the set of English words from `e2f`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 8.5 打印`e2f`中的英语单词集合。
- en: '8.6 Make a multilevel dictionary called `life`. Use these strings for the topmost
    keys: `''animals''`, `''plants''`, and `''other''`. Make the `''animals''` key
    refer to another dictionary with the keys `''cats''`, `''octopi''`, and `''emus''`.
    Make the `''cats''` key refer to a list of strings with the values `''Henri''`,
    `''Grumpy''`, and `''Lucy''`. Make all the other keys refer to empty dictionaries.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 8.6 创建一个名为`life`的多级字典。使用以下字符串作为顶层键：`'animals'`、`'plants'`和`'other'`。使`'animals'`键参考另一个字典，其中包含键`'cats'`、`'octopi'`和`'emus'`。使`'cats'`键参考一个包含值`'Henri'`、`'Grumpy'`和`'Lucy'`的字符串列表。使所有其他键参考空字典。
- en: 8.7 Print the top-level keys of `life`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 8.7 打印`life`的顶层键。
- en: 8.8 Print the keys for `life['animals']`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 8.8 打印`life['animals']`的键。
- en: 8.9 Print the values for `life['animals']['cats']`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 8.9 打印`life['animals']['cats']`的值。
- en: 8.10 Use a dictionary comprehension to create the dictionary `squares`. Use
    `range(10)` to return the keys, and use the square of each key as its value.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 8.10 使用字典推导式创建字典`squares`。使用`range(10)`返回键，并使用每个键的平方作为其值。
- en: 8.11 Use a set comprehension to create the set `odd` from the odd numbers in
    `range(10)`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 8.11 使用集合推导式从`range(10)`中的奇数创建集合`odd`。
- en: 8.12 Use a generator comprehension to return the string `'Got '` and a number
    for the numbers in `range(10)`. Iterate through this by using a `for` loop.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 8.12 使用生成器推导式返回字符串`'Got '`和`range(10)`中的数字。通过使用`for`循环来迭代这个。
- en: 8.13 Use `zip()` to make a dictionary from the key tuple `('optimist', 'pessimist',
    'troll')` and the values tuple `('The glass is half full',` `'The glass is half
    empty',` `'How did you get a glass?')`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 8.13 使用`zip()`从键元组`('optimist', 'pessimist', 'troll')`和值元组`('The glass is half
    full', 'The glass is half empty', 'How did you get a glass?')`创建一个字典。
- en: '8.14 Use `zip()` to make a dictionary called `movies` that pairs these lists:
    `titles =` `[''Creature of Habit'',` `''Crewel Fate'',` `''Sharks On a Plane'']`
    and `plots =` `[''A nun turns into a monster'',` `''A haunted yarn shop'',` `''Check
    your exits'']`'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 8.14 使用`zip()`创建一个名为`movies`的字典，将这些列表配对：`titles = ['Creature of Habit', 'Crewel
    Fate', 'Sharks On a Plane']`和`plots = ['A nun turns into a monster', 'A haunted
    yarn shop', 'Check your exits']`
- en: 9\. Functions
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9\. 函数
- en: '9.1 Define a function called `good()` that returns the following list: `[''Harry'',
    ''Ron'', ''Hermione'']`.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 9.1 定义一个名为`good()`的函数，返回以下列表：`['Harry', 'Ron', 'Hermione']`。
- en: 9.2 Define a generator function called `get_odds()` that returns the odd numbers
    from `range(10)`. Use a `for` loop to find and print the third value returned.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 9.2 定义一个生成器函数`get_odds()`，返回`range(10)`中的奇数。使用`for`循环找到并打印第三个返回的值。
- en: 9.3 Define a decorator called `test` that prints `'start'` when a function is
    called, and `'end'` when it finishes.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 9.3 定义一个名为`test`的装饰器。当调用函数时，打印`'start'`，当函数完成时，打印`'end'`。
- en: 9.4 Define an exception called `OopsException`. Raise this exception to see
    what happens. Then, write the code to catch this exception and print `'Caught
    an oops'`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 9.4 定义一个名为`OopsException`的异常。引发此异常以查看发生了什么。然后编写代码来捕获此异常并打印`'Caught an oops'`。
- en: '10\. Oh Oh: Objects and Classes'
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10\. Oh Oh：对象和类
- en: 10.1 Make a class called `Thing` with no contents and print it. Then, create
    an object called `example` from this class and also print it. Are the printed
    values the same or different?
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 10.1 创建一个名为`Thing`的类，没有内容并打印它。然后，从这个类创建一个名为`example`的对象并打印它。打印出的值是相同的还是不同的？
- en: 10.2 Make a new class called `Thing2` and assign the value `'abc'` to a class
    variable called `letters`. Print `letters`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 10.2 创建一个名为`Thing2`的新类，并将值`'abc'`分配给一个名为`letters`的类变量。打印`letters`。
- en: 10.3 Make yet another class called (of course) `Thing3`. This time, assign the
    value `'xyz'` to an instance (object) variable called `letters`. Print `letters`.
    Do you need to make an object from the class to do this?
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 10.3 再次创建一个名为`Thing3`的类。这次，将值`'xyz'`赋给一个名为`letters`的实例（对象）变量。打印`letters`。你需要创建一个类的对象来执行这个操作吗？
- en: 10.4 Make a class called `Element`, with instance attributes `name`, `symbol`,
    and `number`. Create an object called `hydrogen` of this class with the values
    `'Hydrogen'`, `'H'`, and `1`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 10.4 创建一个名为`Element`的类，具有实例属性`name`、`symbol`和`number`。使用值`'Hydrogen'`、`'H'`和`1`创建该类的对象`hydrogen`。
- en: '10.5 Make a dictionary with these keys and values: `''name'': ''Hydrogen'',
    ''symbol'': ''H'', ''number'': 1`. Then, create an object called `hydrogen` from
    class `Element` using this dictionary.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '10.5 创建一个具有这些键和值的字典：`''name'': ''Hydrogen''`、`''symbol'': ''H''`、`''number'':
    1`。然后，使用这个字典从`Element`类创建一个名为`hydrogen`的对象。'
- en: 10.6 For the `Element` class, define a method called `dump()` that prints the
    values of the object’s attributes (`name`, `symbol`, and `number`). Create the
    `hydrogen` object from this new definition and use `dump()` to print its attributes.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 10.6 对于`Element`类，定义一个名为`dump()`的方法，打印对象属性`name`、`symbol`和`number`的值。从这个新定义创建`hydrogen`对象，并使用`dump()`打印其属性。
- en: 10.7 Call `print(hydrogen)`. In the definition of `Element`, change the name
    of the method `dump` to `__str__`, create a new `hydrogen` object, and call `print(hydrogen)`
    again.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 10.7 调用`print(hydrogen)`。在`Element`的定义中，将方法`dump`的名称更改为`__str__`，创建一个新的`hydrogen`对象，并再次调用`print(hydrogen)`。
- en: 10.8 Modify `Element` to make the attributes `name`, `symbol`, and `number`
    private. Define a getter property for each to return its value.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 10.8 将`Element`修改为使`name`、`symbol`和`number`属性私有化。为每个属性定义一个getter属性以返回其值。
- en: '10.9 Define three classes: `Bear`, `Rabbit`, and `Octothorpe`. For each, define
    only one method: `eats()`. This should return `''berries''` (`Bear`), `''clover''`
    (`Rabbit`), and `''campers''` (`Octothorpe`). Create one object from each and
    print what it eats.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 10.9 定义三个类：`Bear`、`Rabbit`和`Octothorpe`。对于每个类，只定义一个方法：`eats()`。分别返回`'berries'`（`Bear`）、`'clover'`（`Rabbit`）和`'campers'`（`Octothorpe`）。分别创建一个对象并打印它吃的东西。
- en: '10.10 Define these classes: `Laser`, `Claw`, and `SmartPhone`. Each has only
    one method: `does()`. This returns `''disintegrate''` (`Laser`), `''crush''` (`Claw`),
    or `''ring''` (`SmartPhone`). Then, define the class `Robot` that has one instance
    (object) of each of these. Define a `does()` method for the `Robot` that prints
    what its component objects do.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 10.10 定义这些类：`Laser`、`Claw`和`SmartPhone`。每个类只有一个方法：`does()`。分别返回`'disintegrate'`（`Laser`）、`'crush'`（`Claw`）或`'ring'`（`SmartPhone`）。然后定义一个`Robot`类，该类包含这三个组件对象的一个实例。为`Robot`定义一个`does()`方法，打印其组件对象的功能。
- en: 11\. Modules, Packages, and Goodies
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11\. 模块、包和好东西
- en: 11.1 Make a file called *zoo.py*. In it, define a function called `hours` that
    prints the string `'Open 9-5 daily'`. Then, use the interactive interpreter to
    import the `zoo` module and call its `hours` function.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 11.1 创建一个名为*zoo.py*的文件。在其中定义一个名为`hours`的函数，打印字符串`'Open 9-5 daily'`。然后，在交互式解释器中导入`zoo`模块并调用其`hours`函数。
- en: 11.2 In the interactive interpreter, import the `zoo` module as `menagerie`
    and call its `hours()` function.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 11.2 在交互式解释器中，将`zoo`模块作为`menagerie`导入，并调用其`hours()`函数。
- en: 11.3 Staying in the interpreter, import the `hours()` function from `zoo` directly
    and call it.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 11.3 在解释器中保持不变，直接从`zoo`导入`hours()`函数并调用它。
- en: 11.4 Import the `hours()` function as `info` and call it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 11.4 将`hours()`函数作为`info`导入并调用。
- en: 11.6 Make an `OrderedDict` called `fancy` from the same pairs and print it.
    Did it print in the same order as `plain`?
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 11.6 创建一个名为`fancy`的`OrderedDict`，使用相同的键值对并打印它。它和`plain`打印出来的顺序一样吗？
- en: 11.7 Make a `defaultdict` called `dict_of_lists` and pass it the argument `list`.
    Make the list `dict_of_lists['a']` and append the value `'something for a'` to
    it in one assignment. Print `dict_of_lists['a']`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 11.7 创建一个名为`dict_of_lists`的`defaultdict`，并传递`list`作为参数。创建列表`dict_of_lists['a']`并通过一次赋值将值`'something
    for a'`附加到其中。打印`dict_of_lists['a']`。
- en: 12\. Wrangle and Mangle Data
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12\. 数据处理与管理
- en: 12.1 Create a Unicode string called `mystery` and assign it the value `'\U0001f984'`.
    Print `mystery` and its Unicode name.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 12.1 创建一个名为`mystery`的Unicode字符串，并将其赋值为`'\U0001f984'`。打印`mystery`及其Unicode名称。
- en: 12.2 Encode `mystery`, this time using UTF-8, into the `bytes` variable `popbytes`.
    Print `pop_bytes`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 12.2 使用UTF-8对`mystery`进行编码，将结果存入名为`popbytes`的`bytes`变量中。打印`pop_bytes`。
- en: 12.3 Using UTF-8, decode `popbytes` into the string variable `pop_string`. Print
    `pop_string`. Is `pop_string` equal to `mystery`?
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 12.3 使用UTF-8解码`popbytes`，将结果存入名为`pop_string`的字符串变量中。打印`pop_string`。`pop_string`等于`mystery`吗？
- en: 12.4 When you’re working with text, regular expressions come in very handy.
    We’ll apply them in a number of ways to our featured text sample. It’s a poem
    titled “Ode on the Mammoth Cheese,” written by James McIntyre in 1866 in homage
    to a seven-thousand-pound cheese that was crafted in Ontario and sent on an international
    tour. If you’d rather not type all of it, use your favorite search engine and
    cut and paste the words into your Python program, or just grab it from [Project
    Gutenberg](http://bit.ly/mcintyre-poetry). Call the text string `mammoth`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 12.4 当你处理文本时，正则表达式非常方便。我们将以多种方式应用它们到我们特选的文本样本中。这是一首名为《关于庞大奶酪的颂歌》的诗，由詹姆斯·麦金泰尔在1866年创作，以向安大略州制造的一块七千磅重的奶酪致敬，并送往国际巡回演出。如果你不想全部输入，可以使用你喜欢的搜索引擎复制并粘贴这些词到你的Python程序中，或者直接从[Project
    Gutenberg](http://bit.ly/mcintyre-poetry)中获取。将文本字符串命名为 `mammoth`。
- en: 12.5 Import the `re` module to use Python’s regular expression functions. Use
    the `re.findall()` to print all the words that begin with `c`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 12.5 导入`re`模块以使用Python的正则表达式功能。使用`re.findall()`打印所有以`c`开头的单词。
- en: 12.6 Find all four-letter words that begin with `c`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 12.6 查找所有以`c`开头且长度为四个字母的单词。
- en: 12.7 Find all the words that end with `r`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 12.7 找出所有以`r`结尾的单词。
- en: 12.8 Find all the words that contain exactly three vowels in a row.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 12.8 找出所有包含恰好三个连续元音字母的单词。
- en: '12.9 Use `unhexlify()` to convert this hex string (combined from two strings
    to fit on a page) to a `bytes` variable called `gif`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 12.9 使用`unhexlify()`将这个十六进制字符串（由两个字符串组合以适应一页）转换为名为`gif`的`bytes`变量：
- en: '[PRE5]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 12.10 The bytes in `gif` define a one-pixel transparent GIF file, one of the
    most common graphics file formats. A legal GIF starts with the string *GIF89a*.
    Does `gif` match this?
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 12.10 `gif`中的字节定义了一个像素的透明GIF文件，这是最常见的图形文件格式之一。一个合法的GIF以字符串*GIF89a*开始。`gif`是否匹配这个？
- en: 12.11 The pixel width of a GIF is a 16-bit little-endian integer starting at
    byte offset 6, and the height is the same size, starting at offset 8. Extract
    and print these values for `gif`. Are they both `1`?
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 12.11 GIF的像素宽度是从字节偏移6开始的16位小端整数，高度也是同样大小，从偏移8开始。提取并打印这些值到变量`gif`中。它们都是`1`吗？
- en: 13\. Calendars and Clocks
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13\. 日历与时钟
- en: 13.1 Write the current date as a string to the text file *today.txt*.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 13.1 将当前日期作为字符串写入名为*today.txt*的文本文件。
- en: 13.2 Read the text file *today.txt* into the string `today_string`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 13.2 将名为*today.txt*的文本文件读入字符串`today_string`。
- en: 13.3 Parse the date from `today_string`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 13.3 从`today_string`中解析日期。
- en: 13.4 Create a date object of your day of birth.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 13.4 创建一个你出生日期的日期对象。
- en: 13.5 What day of the week was your day of birth?
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 13.5 你出生的那一天是星期几？
- en: 13.6 When will you be (or when were you) 10,000 days old?
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 13.6 你什么时候会（或者你何时）满10000天？
- en: 14\. Files and Directories
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14\. 文件与目录
- en: 14.1 List the files in your current directory.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 14.1 列出当前目录中的文件。
- en: 14.2 List the files in your parent directory.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 14.2 列出你的父目录中的文件。
- en: 14.3 Assign the string `'This is a test of the emergency text system'` to the
    variable `test1`, nd write `test1` to a file called *test.txt*.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 14.3 将字符串`'This is a test of the emergency text system'`赋给变量`test1`，并将`test1`写入名为*test.txt*的文件。
- en: 14.4 Open the file *test.txt* and read its contents into the string `test2`.
    Are `test1` and `test2` the same?
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 14.4 打开名为*test.txt*的文件并将其内容读入字符串`test2`。`test1`和`test2`相同吗？
- en: '15\. Data in Time: Processes and Concurrency'
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15\. 时间中的数据：进程与并发
- en: 15.1 Use `multiprocessing` to create three separate processes. Make each one
    wait a random number of seconds between zero and one, print the current time,
    and then exit.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 15.1 使用`multiprocessing`创建三个单独的进程。每个进程在0到1秒之间等待一个随机数，打印当前时间，然后退出。
- en: '16\. Data in a Box: Persistent Storage'
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 16\. 数据盒子：持久存储
- en: '16.1 Save the following text lines to a file called *books.csv* (notice that
    if the fields are separated by commas, you need to surround a field with quotes
    if it contains a comma):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 16.1 将以下文本行保存到名为*books.csv*的文件中（注意，如果字段用逗号分隔，如果包含逗号，则需要用引号括起来）：
- en: '[PRE6]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 16.2 Use the `csv` module and its `DictReader` method to read *books.csv* to
    the variable `books`. Print the values in `books`. Did `DictReader` handle the
    quotes and commas in the second book’s title?
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 16.2 使用`csv`模块及其`DictReader`方法将*books.csv*读取到变量`books`中。打印`books`的值。`DictReader`处理了第二本书标题中的引号和逗号吗？
- en: '16.3 Create a CSV file called *books2.csv* by using these lines:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 16.3 通过以下行创建名为*books2.csv*的CSV文件：
- en: '[PRE7]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '16.4 Use the `sqlite3` module to create a SQLite database called *books.db*
    and a table called `books` with these fields: `title` (text), `author` (text),
    and `year` (integer).'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 16.4 使用`sqlite3`模块创建一个名为*books.db*的SQLite数据库，并创建一个名为`books`的表，包含以下字段：`title`（文本）、`author`（文本）和`year`（整数）。
- en: 16.5 Read *books2.csv* and insert its data into the `book` table.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 16.5 读取*books2.csv*并将其数据插入`book`表中。
- en: 16.6 Select and print the `title` column from the `book` table in alphabetical
    order.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 16.6 按字母顺序选择并打印`book`表中的`title`列。
- en: 16.7 Select and print all columns from the `book` table in order of publication.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 16.7 按出版顺序选择并打印`book`表中的所有列。
- en: 16.8 Use the `sqlalchemy` module to connect to the sqlite3 database *books.db*
    that you just made in exercise 8.6. As in 8.8, select and print the `title` column
    from the `book` table in alphabetical order.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 16.8 使用`sqlalchemy`模块连接到您刚刚在练习8.6中创建的sqlite3数据库*books.db*。像8.8中一样，按字母顺序选择并打印`book`表中的`title`列。
- en: 16.9 Install the Redis server (see [Appendix B](app02.html#app_install)) and
    the Python `redis` library (`pip install redis`) on your machine. Create a Redis
    hash called `test` with the fields `count` (`1`) and `name` (`'Fester Bestertester'`).
    Print all the fields for `test`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 16.9 在您的机器上安装Redis服务器（参见[附录 B](app02.html#app_install)）和Python的`redis`库（`pip
    install redis`）。创建一个名为`test`的Redis哈希，具有字段`count`（`1`）和`name`（`'Fester Bestertester'`）。打印`test`的所有字段。
- en: 16.10 Increment the `count` field of `test` and print it.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 16.10 增加`test`的`count`字段并打印它。
- en: '17\. Data in Space: Networks'
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17\. 空间数据：网络
- en: 17.1 Use a plain `socket` to implement a current-time service. When a client
    sends the string `'time'` to the server, return the current date and time as an
    ISO string.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 17.1 使用普通的`socket`实现一个当前时间服务。当客户端向服务器发送字符串`'time'`时，返回当前日期和时间的ISO字符串。
- en: 17.2\. Use ZeroMQ REQ and REP sockets to do the same thing.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 17.2 使用ZeroMQ的REQ和REP套接字来执行相同的操作。
- en: 17.3\. Try the same with XMLRPC.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 17.3\. 尝试使用XMLRPC做同样的事情。
- en: 17.4 You may have seen the classic *I Love Lucy* television episode in which
    Lucy and Ethel worked in a chocolate factory. The duo fell behind as the conveyor
    belt that supplied the confections for them to process began operating at an ever-faster
    rate. Write a simulation that pushes different types of chocolates to a Redis
    list, and Lucy is a client doing blocking pops of this list. She needs 0.5 seconds
    to handle a piece of chocolate. Print the time and type of each chocolate as Lucy
    gets it, and how many remain to be handled.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 17.4 你可能看过经典的*I Love Lucy*电视剧集，其中Lucy和Ethel在巧克力工厂工作。随着供应他们加工的糖果的传送带速度越来越快，二人开始落后。编写一个模拟程序，将不同类型的巧克力推送到Redis列表中，Lucy作为客户端进行阻塞弹出这个列表。她需要0.5秒处理一块巧克力。打印每块巧克力到达Lucy手中的时间和类型，以及剩余待处理的数量。
- en: 17.5 Use ZeroMQ to publish the poem from exercise 12.4 (from [Example 12-1](ch12.html#mammoth)),
    one word at a time. Write a ZeroMQ consumer that prints every word that starts
    with a vowel, and another that prints every word that contains five letters. Ignore
    punctuation characters.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 17.5 使用ZeroMQ发布从练习12.4（来自[示例 12-1](ch12.html#mammoth)）的诗歌，逐字发布。编写一个ZeroMQ消费者，打印以元音字母开头的每个单词，以及包含五个字母的每个单词。忽略标点符号字符。
- en: 18\. The Web, Untangled
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 18\. 解析Web
- en: 18.1 If you haven’t installed `flask` yet, do so now. This will also install
    `werkzeug`, `jinja2`, and possibly other packages.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 18.1 如果您还没有安装`flask`，请立即安装。这也将安装`werkzeug`、`jinja2`和可能其他包。
- en: 18.2 Build a skeleton website, using Flask’s debug/reload development web server.
    Ensure that the server starts up for hostname `localhost` on default port `5000`.
    If your machine is already using port 5000 for something else, use another port
    number.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 18.2 使用Flask的调试/重载开发Web服务器构建一个骨架网站。确保服务器在默认端口`5000`上启动，主机名为`localhost`。如果您的机器已经在使用端口5000做其他事情，请使用其他端口号。
- en: 18.3 Add a `home()` function to handle requests for the home page. Set it up
    to return the string `It's alive!`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 18.3 添加一个`home()`函数来处理对主页的请求。设置它返回字符串`It's alive!`。
- en: '18.4 Create a Jinja2 template file called *home.html* with the following contents:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 18.4 创建一个名为*home.html*的Jinja2模板文件，内容如下：
- en: '[PRE8]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Make a directory called *templates* and create the file *home.html* with the
    contents just shown. If your Flask server is still running from the previous examples,
    it will detect the new content and restart itself.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为*templates*的目录，并创建文件*home.html*，其内容如上所示。如果您之前的Flask服务器仍在运行，它将检测到新内容并重新启动自身。
- en: '18.5 Modify your server’s `home()` function to use the *home.html* template.
    Provide it with three `GET` parameters: `thing`, `height`, and `color`.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 18.5 修改您服务器的`home()`函数以使用*home.html*模板。为其提供三个`GET`参数：`thing`、`height`和`color`。
- en: 19\. Be a Pythonista
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 19\. 成为Pythonista
- en: (Pythonistas don’t have homework today.)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: (Pythonistas 今天没有作业。)
- en: 20\. Py Art
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 20\. Py艺术
- en: '20.1 Install `matplotlib`. Draw a scatter diagram of these (x, y) pairs: `(
    (0, 0), (3, 5), (6, 2), (9, 8), (14, 10) )`.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 20.1 安装`matplotlib`。绘制这些(x, y)对的散点图：`( (0, 0), (3, 5), (6, 2), (9, 8), (14,
    10) )`。
- en: 20.2 Draw a line graph of the same data.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 20.2 绘制相同数据的折线图。
- en: 20.3 Draw a plot (a line graph with markers) of the same data
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 20.3 绘制相同数据的图表（带有标记的折线图）。
- en: 21\. Py at Work
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 21\. Py at Work
- en: 21.1 Install `geopandas` and run [Example 21-1](ch21.html#geopandas_example).
    Try modifying things like colors and marker sizes.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 21.1 安装`geopandas`并运行 [示例 21-1](ch21.html#geopandas_example)。尝试修改颜色和标记大小。
- en: 22\. PySci
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 22\. PySci
- en: 22.1 Install Pandas. Get the CSV file in [Example 16-1](ch16.html#villains_csv).
    Run the program in [Example 16-2](ch16.html#pandas_csv_example). Experiment with
    some of the Pandas commands.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 22.1 安装Pandas。获取 [示例 16-1](ch16.html#villains_csv) 中的CSV文件。运行 [示例 16-2](ch16.html#pandas_csv_example)
    中的程序。尝试使用一些Pandas命令。
