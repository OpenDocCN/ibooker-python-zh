["```py\n>>> def do_nothing():\n...     pass\n```", "```py\n>>> do_nothing()\n>>>\n```", "```py\n>>> def make_a_sound():\n...     print('quack')\n...\n>>> make_a_sound()\nquack\n```", "```py\n>>> def agree():\n...    return True\n...\n```", "```py\n>>> if agree():\n...     print('Splendid!')\n... else:\n...     print('That was unexpected.')\n...\nSplendid!\n```", "```py\n>>> def echo(anything):\n...    return anything + ' ' + anything\n...\n>>>\n```", "```py\n>>> echo('Rumplestiltskin')\n'Rumplestiltskin Rumplestiltskin'\n```", "```py\n>>> def commentary(color):\n...     if color == 'red':\n...         return \"It's a tomato.\"\n...     elif color == \"green\":\n...         return \"It's a green pepper.\"\n...     elif color == 'bee purple':\n...         return \"I don't know what it is, but only bees can see it.\"\n...     else:\n...         return \"I've never heard of the color \"  + color +  \".\"\n...\n>>>\n```", "```py\n>>> comment = commentary('blue')\n```", "```py\n>>> print(comment)\nI've never heard of the color blue.\n```", "```py\n>>> print(do_nothing())\nNone\n```", "```py\n>>> thing = None\n>>> if thing:\n...     print(\"It's some thing\")\n... else:\n...     print(\"It's no thing\")\n...\nIt's no thing\n```", "```py\n>>> thing = None\n>>> if thing is None:\n...     print(\"It's nothing\")\n... else:\n...     print(\"It's something\")\n...\nIt's nothing\n```", "```py\n>>> def whatis(thing):\n...     if thing is None:\n...         print(thing, \"is None\")\n...     elif thing:\n...         print(thing, \"is True\")\n...     else:\n...         print(thing, \"is False\")\n...\n```", "```py\n>>> whatis(None)\nNone is None\n>>> whatis(True)\nTrue is True\n>>> whatis(False)\nFalse is False\n```", "```py\n>>> whatis(0)\n0 is False\n>>> whatis(0.0)\n0.0 is False\n>>> whatis('')\n is False\n>>> whatis(\"\")\n is False\n>>> whatis('''''')\n is False\n>>> whatis(())\n() is False\n>>> whatis([])\n[] is False\n>>> whatis({})\n{} is False\n>>> whatis(set())\nset() is False\n```", "```py\n>>> whatis(0.00001)\n1e-05 is True\n>>> whatis([0])\n[0] is True\n>>> whatis([''])\n[''] is True\n>>> whatis(' ')\n is True\n```", "```py\n>>> def menu(wine, entree, dessert):\n...     return {'wine': wine, 'entree': entree, 'dessert': dessert}\n...\n>>> menu('chardonnay', 'chicken', 'cake')\n{'wine': 'chardonnay', 'entree': 'chicken', 'dessert': 'cake'}\n```", "```py\n>>> menu('beef', 'bagel', 'bordeaux')\n{'wine': 'beef', 'entree': 'bagel', 'dessert': 'bordeaux'}\n```", "```py\n>>> menu(entree='beef', dessert='bagel', wine='bordeaux')\n{'wine': 'bordeaux', 'entree': 'beef', 'dessert': 'bagel'}\n```", "```py\n>>> menu('frontenac', dessert='flan', entree='fish')\n{'wine': 'frontenac', 'entree': 'fish', 'dessert': 'flan'}\n```", "```py\n>>> def menu(wine, entree, dessert='pudding'):\n...     return {'wine': wine, 'entree': entree, 'dessert': dessert}\n```", "```py\n>>> menu('chardonnay', 'chicken')\n{'wine': 'chardonnay', 'entree': 'chicken', 'dessert': 'pudding'}\n```", "```py\n>>> menu('dunkelfelder', 'duck', 'doughnut')\n{'wine': 'dunkelfelder', 'entree': 'duck', 'dessert': 'doughnut'}\n```", "```py\n>>> def buggy(arg, result=[]):\n...     result.append(arg)\n...     print(result)\n...\n>>> buggy('a')\n['a']\n>>> buggy('b')   # expect ['b']\n['a', 'b']\n```", "```py\n>>> def works(arg):\n...     result = []\n...     result.append(arg)\n...     return result\n...\n>>> works('a')\n['a']\n>>> works('b')\n['b']\n```", "```py\n>>> def nonbuggy(arg, result=None):\n...     if result is None:\n...         result = []\n...     result.append(arg)\n...     print(result)\n...\n>>> nonbuggy('a')\n['a']\n>>> nonbuggy('b')\n['b']\n```", "```py\n>>> def print_args(*args):\n...     print('Positional tuple:', args)\n...\n```", "```py\n>>> print_args()\nPositional tuple: ()\n```", "```py\n>>> print_args(3, 2, 1, 'wait!', 'uh...')\nPositional tuple: (3, 2, 1, 'wait!', 'uh...')\n```", "```py\n>>> def print_more(required1, required2, *args):\n...     print('Need this one:', required1)\n...     print('Need this one too:', required2)\n...     print('All the rest:', args)\n...\n>>> print_more('cap', 'gloves', 'scarf', 'monocle', 'mustache wax')\nNeed this one: cap\nNeed this one too: gloves\nAll the rest: ('scarf', 'monocle', 'mustache wax')\n```", "```py\n>>> print_args(2, 5, 7, 'x')\nPositional tuple: (2, 5, 7, 'x')\n>>> args = (2,5,7,'x')\n>>> print_args(args)\nPositional tuple: ((2, 5, 7, 'x'),)\n>>> print_args(*args)\nPositional tuple: (2, 5, 7, 'x')\n```", "```py\n>>> *args\n  File \"<stdin>\", line 1\nSyntaxError: can't use starred expression here\n```", "```py\n>>> def print_kwargs(**kwargs):\n...     print('Keyword arguments:', kwargs)\n...\n```", "```py\n>>> print_kwargs()\nKeyword arguments: {}\n>>> print_kwargs(wine='merlot', entree='mutton', dessert='macaroon')\nKeyword arguments: {'dessert': 'macaroon', 'wine': 'merlot',\n'entree': 'mutton'}\n```", "```py\n>>> **kwparams\n  File \"<stdin>\", line 1\n    **kwparams\n     ^\nSyntaxError: invalid syntax\n```", "```py\n>>> def print_data(data, *, start=0, end=100):\n...     for value in (data[start:end]):\n...         print(value)\n...\n>>> data = ['a', 'b', 'c', 'd', 'e', 'f']\n>>> print_data(data)\na\nb\nc\nd\ne\nf\n>>> print_data(data, start=4)\ne\nf\n>>> print_data(data, end=2)\na\nb\n```", "```py\n>>> outside = ['one', 'fine', 'day']\n>>> def mangle(arg):\n...    arg[1] = 'terrible!'\n...\n>>> outside\n['one', 'fine', 'day']\n>>> mangle(outside)\n>>> outside\n['one', 'terrible!', 'day']\n```", "```py\n>>> def echo(anything):\n...     'echo returns its input argument'\n...     return anything\n```", "```py\ndef print_if_true(thing, check):\n '''\n Prints the first argument if a second argument is true.\n The operation is:\n 1\\. Check whether the *second* argument is true.\n 2\\. If it is, print the *first* argument.\n '''\n if check:\n print(thing)\n```", "```py\n>>> help(echo)\nHelp on function echo in module __main__:\n\necho(anything)\n echo returns its input argument\n```", "```py\n>>> print(echo.__doc__)\necho returns its input argument\n```", "```py\n>>> def answer():\n...     print(42)\n```", "```py\n>>> answer()\n42\n```", "```py\n>>> def run_something(func):\n...     func()\n```", "```py\n>>> run_something(answer)\n42\n```", "```py\n>>> type(run_something)\n<class 'function'>\n```", "```py\n>>> def add_args(arg1, arg2):\n...     print(arg1 + arg2)\n```", "```py\n>>> type(add_args)\n<class 'function'>\n```", "```py\n>>> def run_something_with_args(func, arg1, arg2):\n...     func(arg1, arg2)\n```", "```py\n>>> run_something_with_args(add_args, 5, 9)\n14\n```", "```py\nadd_args(5, 9)\n```", "```py\n>>> def sum_args(*args):\n...    return sum(args)\n```", "```py\n>>> def run_with_positional_args(func, *args):\n...    return func(*args)\n```", "```py\n>>> run_with_positional_args(sum_args, 1, 2, 3, 4)\n10\n```", "```py\n>>> def outer(a, b):\n...     def inner(c, d):\n...         return c + d\n...     return inner(a, b)\n...\n>>>\n>>> outer(4, 7)\n11\n```", "```py\n>>> def knights(saying):\n...     def inner(quote):\n...         return \"We are the knights who say: '%s'\" % quote\n...     return inner(saying)\n...\n>>> knights('Ni!')\n\"We are the knights who say: 'Ni!'\"\n```", "```py\n    >>> def knights2(saying):\n    ...     def inner2():\n    ...         return \"We are the knights who say: '%s'\" % saying\n    ...     return inner2\n    ...\n    ```", "```py\n>>> a = knights2('Duck')\n>>> b = knights2('Hasenpfeffer')\n```", "```py\n>>> type(a)\n<class 'function'>\n>>> type(b)\n<class 'function'>\n```", "```py\n>>> a\n<function knights2.<locals>.inner2 at 0x10193e158>\n>>> b\n<function knights2.<locals>.inner2 at 0x10193e1e0>\n```", "```py\n>>> a()\n\"We are the knights who say: 'Duck'\"\n>>> b()\n\"We are the knights who say: 'Hasenpfeffer'\"\n```", "```py\n>>> def edit_story(words, func):\n...     for word in words:\n...         print(func(word))\n```", "```py\n>>> stairs = ['thud', 'meow', 'thud', 'hiss']\n```", "```py\n>>> def enliven(word):   # give that prose more punch\n...     return word.capitalize() + '!'\n```", "```py\n>>> edit_story(stairs, enliven)\nThud!\nMeow!\nThud!\nHiss!\n```", "```py\n>>> edit_story(stairs, lambda word: word.capitalize() + '!')\nThud!\nMeow!\nThud!\nHiss!\n```", "```py\n>>> sum(range(1, 101))\n5050\n```", "```py\n>>> def my_range(first=0, last=10, step=1):\n...     number = first\n...     while number < last:\n...         yield number\n...         number += step\n...\n```", "```py\n>>> my_range\n<function my_range at 0x10193e268>\n```", "```py\n>>> ranger = my_range(1, 5)\n>>> ranger\n<generator object my_range at 0x101a0a168>\n```", "```py\n>>> for x in ranger:\n...     print(x)\n...\n1\n2\n3\n4\n```", "```py\n>>> for try_again in ranger:\n...     print(try_again)\n...\n>>>\n```", "```py\n>>> genobj = (pair for pair in zip(['a', 'b'], ['1', '2']))\n>>> genobj\n<generator object <genexpr> at 0x10308fde0>\n>>> for thing in genobj:\n...     print(thing)\n...\n('a', '1')\n('b', '2')\n```", "```py\n>>> def document_it(func):\n...     def new_function(*args, **kwargs):\n...         print('Running function:', func.__name__)\n...         print('Positional arguments:', args)\n...         print('Keyword arguments:', kwargs)\n...         result = func(*args, **kwargs)\n...         print('Result:', result)\n...         return result\n...     return new_function\n```", "```py\n>>> def add_ints(a, b):\n...    return a + b\n...\n>>> add_ints(3, 5)\n8\n>>> cooler_add_ints = document_it(add_ints)  # manual decorator assignment\n>>> cooler_add_ints(3, 5)\nRunning function: add_ints\nPositional arguments: (3, 5)\nKeyword arguments: {}\nResult: 8\n8\n```", "```py\n>>> @document_it\n... def add_ints(a, b):\n...     return a + b\n...\n>>> add_ints(3, 5)\nStart function add_ints\nPositional arguments: (3, 5)\nKeyword arguments: {}\nResult: 8\n8\n```", "```py\n>>> def square_it(func):\n...     def new_function(*args, **kwargs):\n...         result = func(*args, **kwargs)\n...         return result * result\n...     return new_function\n...\n```", "```py\n>>> @document_it\n... @square_it\n... def add_ints(a, b):\n...     return a + b\n...\n>>> add_ints(3, 5)\nRunning function: new_function\nPositional arguments: (3, 5)\nKeyword arguments: {}\nResult: 64\n64\n```", "```py\n>>> @square_it\n... @document_it\n... def add_ints(a, b):\n...     return a + b\n...\n>>> add_ints(3, 5)\nRunning function: add_ints\nPositional arguments: (3, 5)\nKeyword arguments: {}\nResult: 8\n64\n```", "```py\n>>> animal = 'fruitbat'\n>>> def print_global():\n...     print('inside print_global:', animal)\n...\n>>> print('at the top level:', animal)\nat the top level: fruitbat\n>>> print_global()\ninside print_global: fruitbat\n```", "```py\n>>> def change_and_print_global():\n...     print('inside change_and_print_global:', animal)\n...     animal = 'wombat'\n...     print('after the change:', animal)\n...\n>>> change_and_print_global()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in change_and_print_global\nUnboundLocalError: local variable 'animal' referenced before assignment\n```", "```py\n>>> def change_local():\n...     animal = 'wombat'\n...     print('inside change_local:', animal, id(animal))\n...\n>>> change_local()\ninside change_local: wombat 4330406160\n>>> animal\n'fruitbat'\n>>> id(animal)\n4330390832\n```", "```py\n>>> animal = 'fruitbat'\n>>> def change_and_print_global():\n...     global animal\n...     animal = 'wombat'\n...     print('inside change_and_print_global:', animal)\n...\n>>> animal\n'fruitbat'\n>>> change_and_print_global()\ninside change_and_print_global: wombat\n>>> animal\n'wombat'\n```", "```py\n>>> animal = 'fruitbat'\n>>> def change_local():\n...     animal = 'wombat'  # local variable\n...     print('locals:', locals())\n...\n>>> animal\n'fruitbat'\n>>> change_local()\nlocals: {'animal': 'wombat'}\n>>> print('globals:', globals()) # reformatted a little for presentation\nglobals: {'animal': 'fruitbat',\n'__doc__': None,\n'change_local': <function change_local at 0x1006c0170>,\n'__package__': None,\n'__name__': '__main__',\n'__loader__': <class '_frozen_importlib.BuiltinImporter'>,\n'__builtins__': <module 'builtins'>}\n>>> animal\n'fruitbat'\n```", "```py\n>>> def amazing():\n...     '''This is the amazing function.\n...     Want to see it again?'''\n...     print('This function is named:', amazing.__name__)\n...     print('And its docstring is:', amazing.__doc__)\n...\n>>> amazing()\nThis function is named: amazing\nAnd its docstring is: This is the amazing function.\n Want to see it again?\n```", "```py\n>>> def dive():\n...     return dive()\n...\n>>> dive()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in dive\n  File \"<stdin>\", line 2, in dive\n  File \"<stdin>\", line 2, in dive\n [Previous line repeated 996 more times]\nRecursionError: maximum recursion depth exceeded\n```", "```py\n>>> def flatten(lol):\n...     for item in lol:\n...         if isinstance(item, list):\n...             for subitem in flatten(item):\n...                 yield subitem\n...         else:\n...             yield item\n...\n>>> lol = [1, 2, [3,4,5], [6,[7,8,9], []]]\n>>> flatten(lol)\n<generator object flatten at 0x10509a750>\n>>> list(flatten(lol))\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "```py\n>>> def flatten(lol):\n...     for item in lol:\n...         if isinstance(item, list):\n...             yield from flatten(item)\n...         else:\n...             yield item\n...\n>>> lol = [1, 2, [3,4,5], [6,[7,8,9], []]]\n>>> list(flatten(lol))\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "```py\n>>> short_list = [1, 2, 3]\n>>> position = 5\n>>> short_list[position]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: list index out of range\n```", "```py\n>>> short_list = [1, 2, 3]\n>>> position = 5\n>>> try:\n...     short_list[position]\n... except:\n...     print('Need a position between 0 and', len(short_list)-1, ' but got',\n...            position)\n...\nNeed a position between 0 and 2 but got 5\n```", "```py\nexcept *`exceptiontype`* as *`name`*\n```", "```py\n>>> short_list = [1, 2, 3]\n>>> while True:\n...     value = input('Position [q to quit]? ')\n...     if value == 'q':\n...         break\n...     try:\n...         position = int(value)\n...         print(short_list[position])\n...     except IndexError as err:\n...         print('Bad index:', position)\n...     except Exception as other:\n...         print('Something else broke:', other)\n...\nPosition [q to quit]? 1\n2\nPosition [q to quit]? 0\n1\nPosition [q to quit]? 2\n3\nPosition [q to quit]? 3\nBad index: 3\nPosition [q to quit]? 2\n3\nPosition [q to quit]? two\nSomething else broke: invalid literal for int() with base 10: 'two'\nPosition [q to quit]? q\n```", "```py\n>>> class UppercaseException(Exception):\n...     pass\n...\n>>> words = ['eenie', 'meenie', 'miny', 'MO']\n>>> for word in words:\n...     if word.isupper():\n...         raise UppercaseException(word)\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 3, in <module>\n__main__.UppercaseException: MO\n```", "```py\n>>> try:\n...     raise OopsException('panic')\n... except OopsException as exc:\n...     print(exc)\n...\npanic\n```"]