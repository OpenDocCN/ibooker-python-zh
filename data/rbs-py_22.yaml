- en: Chapter 19\. Pluggable Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第19章. 可插拔的Python
- en: The greatest challenge in building a robust codebase is predicting the future.
    You will never completely guess what a future developer will do. The best strategy
    is not being perfectly prescient, but instead creating flexibility so that future
    collaborators can hook into your system with minimal work. In this chapter, I
    will focus on creating *pluggable* code. Pluggable code allows you to define behaviors
    that are to be supplied later. You define a framework with *extension points*,
    or parts of your system that other developers will use to extend functionality.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 建立稳健代码库最大的挑战在于预测未来。你永远不可能完全猜透未来的开发者会做什么。最好的策略不是完全精准地预见，而是创建灵活性，使未来的合作者可以用最少的工作接入你的系统。在本章中，我将专注于创建*可插拔*代码。可插拔的代码允许你定义稍后提供的行为。你可以定义一个带有*扩展点*的框架，或者是系统中其他开发者将用来扩展功能的部分。
- en: 'Think about a stand mixer sitting on a kitchen counter. You can select a variety
    of attachments to use with your mixer: a hook for mixing bread, a whisk for beating
    eggs and cream, and a flat beater to do general-purpose mixing. Each attachment
    serves a specific purpose. What’s great is that you can detach and attach hooks
    or blades as the situation calls for it. You don’t need to buy an entire new mixer
    for each use case; you *plug in* whatever you need when you need it.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一台放在厨房台面上的搅拌机。你可以选择各种附件与你的搅拌机一起使用：揉面包的钩子、打蛋和奶油的打蛋器，以及通用搅拌的扁平搅拌器。每个附件都有特定的用途。很棒的是，你可以根据情况拆卸和安装钩子或刀片。你不需要为每个用例购买全新的搅拌机；你在需要时*插入*你需要的东西即可。
- en: This is the goal for pluggable Python. You don’t need to rebuild entire applications
    when new functionality is needed. You build extensions or attachments that snap
    onto a solid foundation. You pick the functionality you need for your specific
    use case and you plug that into your system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是可插拔Python的目标。当需要新功能时，你无需重建整个应用程序。你构建扩展或附件，它们可以轻松地连接到坚实的基础上。你选择你特定用例所需的功能，然后将其插入你的系统中。
- en: In most of this book, I’ve been illustrating examples with automated food makers
    of some sort or another. In this chapter, I will perform the mother of mergers
    and design a system that can combine them all. I want to build a system that can
    take any of the recipes I’ve talked about and cook them. I call it the “Ultimate
    Kitchen Assistant” (if you think this is a terrible name, you now know why I don’t
    work in marketing).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的大部分内容中，我一直在用各种自动食品制造器做例子。在本章中，我将执行各种合并并设计一个可以结合它们所有的系统。我想要构建一个可以接受我讲过的任何食谱并烹饪它们的系统。我称之为“终极厨房助手”（如果你认为这是个糟糕的名字，现在你知道为什么我不从事市场营销工作了）。
- en: The Ultimate Kitchen Assistant contains all the instructions and gear you will
    need for working around the kitchen. It knows how to slice, dice, fry, sauté,
    bake, broil, and blend any ingredient. It comes with some premade recipes, but
    the real magic is that customers can buy off-the-shelf modules to extend its functionality
    (such as a “Pasta-Making Module” for sating Italian cuisine cravings).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 终极厨房助手包含了你在厨房工作所需的所有指示和装备。它知道如何切片、切块、炸、煎、烘烤、烧烤和混合任何食材。它附带了一些预制的食谱，但真正的魔力在于顾客可以购买现成的模块来扩展其功能（比如“意大利面条制作模块”，满足意大利菜的需求）。
- en: The problem is, I don’t want the code to become burdensome to maintain. There
    are a lot of different dishes to make, and I want to give the system some sort
    of flexibility without oodles of physical dependencies turning the system into
    spaghetti code (although your system making spaghetti itself in the kitchen is
    highly encouraged!). Just like plugging a new attachment onto the stand mixer,
    I want developers to affix different attachments to solve their use cases. I even
    want other organizations to build modules for the Ultimate Kitchen Assistant.
    I want this codebase to be extensible and composable.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于，我不希望代码变得难以维护。有很多不同的菜需要做，我希望系统具有某种灵活性，而不是因为大量物理依赖而使系统变成意大利面条代码（尽管你的系统自己在厨房制作意大利面条非常鼓励！）。就像给搅拌机插上新附件一样，我希望开发者能够连接不同的附件来解决他们的用例。我甚至希望其他组织为终极厨房助手构建模块。我希望这个代码库具有可扩展性和可组合性。
- en: I’ll use this example to illustrate three separate ways of plugging into different
    Python constructs. First, I’ll focus on how to plug in specific parts of an algorithm
    with the Template Method Pattern. Then, I’ll talk through plugging in an entire
    class with the Strategy Pattern. Finally, I’ll introduce you to an incredibly
    useful library, stevedore, to do plug-ins at a much larger architectural scale.
    All of these techniques will help you give future developers the extensibility
    they need.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我将用这个例子来说明三种不同的插入不同 Python 结构的方法。首先，我将专注于如何使用模板方法模式插入算法的特定部分。然后，我将讲解如何使用策略模式插入整个类。最后，我将向您介绍一个非常有用的库，stevedore，以在更大的架构规模上进行插件。所有这些技术都将帮助您为未来的开发人员提供所需的可扩展性。
- en: The Template Method Pattern
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板方法模式
- en: The *Template Method Pattern* is a pattern for filling in the blanks of an algorithm.^([1](part0024_split_005.html#idm45644729667576))
    The idea is that you define an algorithm as a series of steps, but you force the
    caller to override some of those steps, as shown in [Figure 19-1](part0024_split_001.html#template_method).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*模板方法模式* 是一种填充算法空白的设计模式。^([1](part0024_split_005.html#idm45644729667576)) 思想是你定义一个算法为一系列步骤，但强制调用者重写其中的一些步骤，如
    [图 19-1](part0024_split_001.html#template_method) 所示。'
- en: '![ropy 1901](../images/00035.gif)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![ropy 1901](../images/00035.gif)'
- en: Figure 19-1\. The Template Method Pattern
  id: totrans-11
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 19-1\. 模板方法模式
- en: First up for the Ultimate Kitchen Assistant is a pizza-making module. While
    traditional sauce-and-cheese pizzas are great, I want the Ultimate Kitchen Assistant
    to be more flexible. I want it to handle all sorts of pizza-like entities, from
    a Lebanese manoush to a Korean bulgogi pizza. To make any of these pizza-like
    dishes, I want the machinery to perform a similar set of steps, but let developers
    tweak certain operations to make their style of pizza. [Figure 19-2](part0024_split_001.html#pizza_template)
    describes such a pizza-making algorithm.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 终极厨房助手首先介绍的是一个披萨制作模块。虽然传统的酱和奶酪披萨很棒，但我希望终极厨房助手更加灵活。我希望它能处理各种类似披萨的实体，从黎巴嫩马努什到韩国烤牛肉披萨。为了制作这些类似披萨的菜肴中的任何一种，我希望机制执行一系列类似的步骤，但让开发人员调整某些操作，以制作他们自己风格的披萨。
    [图 19-2](part0024_split_001.html#pizza_template) 描述了这样一个披萨制作算法。
- en: '![ropy 1902](../images/00036.gif)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![ropy 1902](../images/00036.gif)'
- en: Figure 19-2\. Pizza-making algorithm
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 19-2\. 披萨制作算法
- en: Each pizza will use the same basic steps, but I want to be able to tweak certain
    steps (preparing ingredients, adding prebake toppings, and adding postbake toppings).
    My goal in applying the Template Method Pattern is to make these steps pluggable.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 每个披萨将使用相同的基本步骤，但我希望能够调整某些步骤（准备配料、添加预烘烤配料和添加后烘烤配料）。我在应用模板方法模式时的目标是使这些步骤可插拔。
- en: 'In its simplest incarnation, I can pass functions into the template method:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在最简单的情况下，我可以将函数传递给模板方法：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, if you want to create a pizza, you just pass in your own functions:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您想要制作披萨，您只需传入自己的函数：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is incredibly convenient for any pizza, now or in the future. As new pizza-making
    capabilities come online, developers need to pass their new functions into the
    template method. These developers can plug in specific parts of the pizza-making
    algorithm to suit their needs. They don’t need to know anything about their use
    case at all; they are free to grow the system without being bogged down with changing
    legacy code. Suppose they want to create the bulgogi pizza. Instead of changing
    `create_pizza`, I simply need to pass in a new `PizzaCreationFunctions`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这对任何披萨来说都非常方便，现在或将来。随着新的披萨制作能力上线，开发人员需要将他们的新函数传递到模板方法中。这些开发人员可以插入披萨制作算法的特定部分，以满足他们的需求。他们根本不需要了解他们的用例；他们可以自由地扩展系统，而不会被改变旧代码所困扰。假设他们想要创建烤牛肉披萨。我只需传入一个新的
    `PizzaCreationFunctions`，而不是改变 `create_pizza`：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The Strategy Pattern
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 策略模式
- en: 'The Template Method Pattern is great for swapping out select parts of an algorithm,
    but what if you want to swap out the *entire* algorithm? A very similar design
    pattern exists for this use case: the Strategy Pattern.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 模板方法模式非常适合交换算法中的某些部分，但如果您想要替换整个算法呢？对于这种情况，存在一个非常类似的设计模式：策略模式。
- en: The Strategy Pattern is for plugging entire algorithms into a context.^([2](part0024_split_005.html#idm45644729415976))
    For the Ultimate Kitchen Assistant, consider a module that specializes in Tex-Mex
    (a regional American cuisine that blends southwestern US and northern Mexican
    cuisines). A large variety of dishes can be made from a common set of items; you
    mix and match the different ingredients in new ways.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 策略模式用于将整个算法插入到上下文中。^([2](part0024_split_005.html#idm45644729415976)) 对于最终的厨房助手，考虑专门从事
    Tex-Mex 的模块（一种将美国西南部和墨西哥北部菜肴混合的美国地区菜肴）。可以从一组共同的食材制作出各种各样的菜肴；你可以通过不同方式混搭这些不同的配料。
- en: 'For instance, you will find the following ingredients on most Tex-Mex menus:
    tortillas (corn or flour), beans, ground beef, chicken, lettuce, tomato, guacamole,
    salsa, and cheese. From these ingredients, you can create tacos, flautas, chimichangas,
    enchiladas, taco salads, nachos, gorditas…the list goes on. I don’t want the system
    to restrict all the different Tex-Mex dishes; I want different groups of developers
    to supply *how* to make the dish.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你会在大多数 Tex-Mex 菜单上找到以下配料：玉米或小麦面粉的玉米饼，豆类，碎牛肉，鸡肉，生菜，番茄，鳄梨酱，莎莎酱和奶酪。从这些配料中，你可以制作出塔科斯、弗劳塔斯、奇米昌加斯、恩奇拉达、塔科沙拉、玉米片、戈迪塔……种类繁多。我不希望系统限制所有不同的
    Tex-Mex 菜肴；我希望不同的开发团队提供如何制作这些菜肴的信息。
- en: To do this with the Strategy Pattern, I need to define what the Ultimate Kitchen
    Assistant does and what the strategy does. In this case, the Ultimate Kitchen
    Assistant should provide the mechanisms for interacting with ingredients, but
    future developers are free to keep adding new Tex-Mex concoctions with a `TexMexStrategy`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用策略模式做到这一点，我需要定义最终的厨房助手所做的事情以及策略所做的事情。在这种情况下，最终的厨房助手应提供与配料交互的机制，但未来的开发人员可以自由添加新的
    Tex-Mex 调配方案，如`TexMexStrategy`。
- en: As with any code designed to be extensible, I need to make sure that the interaction
    between my Ultimate Kitchen Assistant and the Tex-Mex module agrees on the pre-
    and postconditions, namely what gets passed into the Tex-Mex module and what comes
    out.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何设计为可扩展的代码一样，我需要确保我最终的厨房助手和 Tex-Mex 模块之间的交互符合前置条件和后置条件，即传递给 Tex-Mex 模块的内容以及输出的内容。
- en: Suppose the Ultimate Kitchen Assistant has numbered bins to put ingredients
    in. The Tex-Mex module needs to know what bins the common Tex-Mex ingredients
    are in, so it can use the Ultimate Kitchen Assistant to actually do the prepping
    and cooking.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 假设最终的厨房助手有编号的箱子用于放置食材。Tex-Mex 模块需要知道常见的 Tex-Mex 食材放在哪些箱子里，以便可以利用最终的厨房助手进行准备和烹饪。
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The function `prepare_tex_mex_dish` collects ingredients, then delegates to
    the actual `tex_mex_recipe_maker` to create the dish to serve. The `tex_mex_recipe_maker`
    is the strategy. It’s very similar to the Template Method Pattern, but you typically
    are just passing a single function rather than a collection of functions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`prepare_tex_mex_dish`收集配料，然后委托给实际的`tex_mex_recipe_maker`来创建要服务的菜肴。`tex_mex_recipe_maker`就是策略。这与模板方法模式非常相似，但通常只传递单个函数而不是一组函数。
- en: 'A future developer just has to write a function that does the actual preparation,
    given the ingredients. They could write:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 未来的开发人员只需编写一个根据配料实际进行准备的函数。他们可以编写：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If they decide they want to provide support for a different dish at some point
    in the future, they just have to write a new function:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果他们决定未来某个时候提供对不同菜肴的支持，他们只需编写一个新的函数：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Developers can continue to define functions however they want, whenever they
    want. Just like the Template Method Pattern, they can plug in new functionality
    with minimal impact to the original code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员可以随时随地继续定义函数。就像模板方法模式一样，他们可以在对原始代码影响最小的情况下插入新功能。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: As with the Template Method, the implementation I’ve shown is a bit different
    than what was originally described in the Gang of Four book. The original implementation
    involved classes and subclasses that wrap a single method. In Python, it’s far
    easier to just pass the single function.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 与模板方法一样，我展示的实现与《四人组设计模式》中最初描述的有些不同。原始实现涉及包装单个方法的类和子类。在 Python 中，仅传递单个函数要简单得多。
- en: Plug-in Architectures
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件架构
- en: 'The Strategy and Template Method Patterns are great for plugging in small bits
    of functionality: a class here or a function there. However, the same patterns
    apply to your architecture as well. Being able to inject classes, modules, or
    subsystems is just as important. A Python library called [stevedore](https://oreil.ly/AybtZ)
    is an incredibly useful tool for managing *plug-ins*.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 策略模式和模板方法模式非常适合插入小功能块：在这里是一个类或一个函数。然而，同样的模式也适用于你的架构。能够注入类、模块或子系统同样重要。一个名为[stevedore](https://oreil.ly/AybtZ)的Python库是管理*插件*的一个非常有用的工具。
- en: A plug-in is a piece of code that can be dynamically loaded at runtime. Code
    can scan for installed plug-ins, select an appropriate one, and delegate responsibilities
    to that plug-in. This is another example of extensibility; developers can focus
    on specific plug-ins without touching the core codebase.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 插件是可以在运行时动态加载的代码片段。代码可以扫描已安装的插件，选择合适的插件，并将责任委派给该插件。这是另一个可扩展性的例子；开发人员可以专注于特定的插件而不用触及核心代码库。
- en: 'There are a number of benefits beyond extensibility to a plug-in architecture:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 插件架构不仅具有可扩展性的优点：
- en: You can deploy plug-ins independently from the core, giving you more granularity
    for rolling out updates.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以独立部署插件，而不影响核心，这使得您在推出更新时拥有更多的粒度。
- en: Third parties can write plug-ins without modifying your codebase.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三方可以编写插件，而无需修改您的代码库。
- en: Plug-ins are able to be developed in isolation from the core codebase, reducing
    the chances of creating tightly coupled code.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件可以在与核心代码库隔离的环境中开发，减少创建紧密耦合代码的可能性。
- en: To demonstrate how plug-ins work, say I want to support an ecosystem for the
    Ultimate Kitchen Assistant where users can buy and install modules (such as the
    Tex-Mex module in the last section) separately from the main kitchen assistant.
    Each module provides a set of recipes, special equipment, and storage of ingredients
    for the Ultimate Kitchen Assistant to do work. The real benefit is that each module
    can be developed separately from the Ultimate Kitchen Assistant core; each module
    is a plug-in.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示插件的工作原理，假设我想支持终极厨房助手的生态系统，用户可以单独购买和安装模块（例如上一节中的Tex-Mex模块）。每个模块为终极厨房助手提供一组食谱、特殊设备和食材存储。真正的好处在于，每个模块都可以与终极厨房助手核心分开开发；每个模块都是一个插件。
- en: The first thing to do when designing plug-ins is determine the contract between
    the core and the various plug-ins. Ask yourself what services the core platform
    provides and what you expect the plug-ins to provide. In the case of the Ultimate
    Kitchen Assistant, [Figure 19-3](part0024_split_003.html#plugin_contract) demonstrates
    the contract I will be using in the following examples.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 设计插件时的第一步是确定核心与各种插件之间的契约。问问自己核心平台提供了哪些服务，您期望插件提供什么。在终极厨房助手的情况下，[Figure 19-3](part0024_split_003.html#plugin_contract)展示了我将在接下来的示例中使用的契约。
- en: '![ropy 1903](../images/00037.gif)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![ropy 1903](../images/00037.gif)'
- en: Figure 19-3\. Contract between core and plug-in
  id: totrans-48
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图19-3\. 核心与插件之间的契约
- en: 'I want to put this contract into code, so that it is unambiguous what I expect
    out of a plug-in:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我想将这个契约放入代码中，以便清楚地表达我对插件的期望：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This serves as the definition of what the plug-in looks like. To create a plug-in
    that satisfies my expectations, I just need to create a class that inherits from
    my base class.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是插件的定义。要创建符合我的期望的插件，我只需创建一个从我的基类继承的类。
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once you have created the plug-in, you need to register it with stevedore. stevedore
    matches plug-ins to a *namespace*, or an identifier that groups plug-ins together.
    It does so by using Python’s *entry points*, which allow Python to discover components
    at runtime.^([3](part0024_split_005.html#idm45644729009512))
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您创建了插件，您需要使用stevedore将其注册。stevedore将插件与一个*命名空间*或将插件分组在一起的标识符进行匹配。它通过使用Python的*入口点*在运行时发现组件来实现这一点。^([3](part0024_split_005.html#idm45644729009512))
- en: 'You register plug-ins with the help of `setuptools` and `setup.py`. Many Python
    packages use `setup.py` to define packaging rules, one of which being entry points.
    In the `setup.py` for `ultimate_kitchen_assistant`, I would register my plug-in
    as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过`setuptools`和`setup.py`注册插件。许多Python包使用`setup.py`来定义打包规则，其中之一就是入口点。在`ultimate_kitchen_assistant`的`setup.py`中，我将我的插件注册如下：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-56
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you are having trouble linking your plug-ins, check out the [`entry-point-inspector`
    package](https://oreil.ly/kbMro) for debugging help.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在链接插件时遇到问题，请查看 [`entry-point-inspector` 包](https://oreil.ly/kbMro) 获取调试帮助。
- en: I am binding my `PastaMaker` class (in the `ultimate_kitchen_assis⁠tant.pasta_maker`
    package) to a plug-in with the namespace `ultimate_⁠kitchen_assis⁠tant.recipe_maker`.
    I’ve created another hypothetical plug-in called `TexMexModule`, as well.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在将我的 `PastaMaker` 类（在 `ultimate_kitchen_assistant.pasta_maker` 包中）绑定到命名空间为
    `ultimate_kitchen_assistant.recipe_maker` 的插件上。我还创建了另一个名为 `TexMexModule` 的假设性插件。
- en: 'Once the plug-ins are registered as entry points, you can use stevedore to
    load them dynamically at runtime. For instance, if I wanted to collect all recipes
    from all plug-ins, I could write the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦插件被注册为入口点，你可以在运行时使用 stevedore 动态加载它们。例如，如果我想从所有插件中收集所有的菜谱，我可以编写以下代码：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: I use `stevedore.extension.ExtensionManager` to find and load all plug-ins in
    the namespace `ultimate_kitchen_assistant.recipe_maker`. I can then map (or apply)
    a function to every plug-in that gets found to get their recipes. Lastly, I use
    `itertools` to chain them all together. It doesn’t matter how many plug-ins I
    have set up; I can load them all with this code.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用 `stevedore.extension.ExtensionManager` 查找和加载命名空间为 `ultimate_kitchen_assistant.recipe_maker`
    的所有插件。然后，我可以对找到的每个插件映射（或应用）一个函数以获取它们的菜谱。最后，我使用 `itertools` 将它们全部连接在一起。无论我设置了多少个插件，都可以用这段代码加载它们。
- en: Let’s say a user wants to make something from the pasta maker, such as “Pasta
    with Sausage.” All the calling code needs to do is ask for a plug-in named `pasta_maker`.
    I can load the specific plug-in with a `stevedore.driver.DriverManager`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 假设用户想要从意大利面机制造一些东西，比如“意式香肠意面”。所有调用代码需要做的就是请求一个名为 `pasta_maker` 的插件。我可以通过 `stevedore.driver.DriverManager`
    加载特定的插件。
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Discussion Topic
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论主题
- en: What parts of your system could use a plug-in architecture? How would this benefit
    your codebase?
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你的系统哪些部分可以使用插件架构？这如何使你的代码库受益？
- en: stevedore provides a great way to decouple code; separating the code into plug-ins
    keeps it flexible and extensible. Remember, the goal of extensible programs is
    to limit the number of modifications needed in the core system. Developers can
    create plug-ins in isolation, test them, and integrate them into your core seamlessly.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: stevedore 提供了一种很好的方式来解耦代码；将代码分离成插件使其保持灵活和可扩展。记住，可扩展程序的目标是限制对核心系统所需的修改次数。开发者可以独立创建插件，测试它们，并将其无缝集成到你的核心中。
- en: My favorite part about stevedore is that it actually can work *across* packages.
    You can write plug-ins in a completely separate Python package than the core.
    As long as the same namespace is used for the plug-in, stevedore can stitch everything
    together. stevedore has a load of other features that are worth checking out,
    such as event notifications, enabling plug-ins through a variety of methods, and
    automatic plug-in documentation generation. If a plug-in architecture meets your
    needs, I highly recommend checking out more of stevedore.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我最喜欢的 stevedore 的部分是它实际上可以跨包工作。你可以在完全独立的 Python 包中编写插件，而不是核心包。只要插件使用相同的命名空间，stevedore
    就可以把所有东西组合起来。stevedore 还有许多其他值得一探的功能，比如事件通知、通过多种方法启用插件以及自动生成插件文档。如果插件架构符合你的需求，我强烈建议多了解
    stevedore。
- en: Warning
  id: totrans-68
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: You can technically register any class as a plug-in, regardless of whether it
    is substitutable for the base class or not. Because the code is separated by an
    abstract layer with stevedore, your typechecker will not be able to detect this.
    Consider checking the interface at runtime to catch any mismatches before using
    the plug-in.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你实际上可以注册任何类作为插件，无论它是否可替换基类。因为代码被 stevedore 分离到一个抽象层中，你的类型检查器将无法检测到这一点。在使用插件之前，考虑在运行时检查接口以捕捉任何不匹配。
- en: Closing Thoughts
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结思考
- en: When you create pluggable Python, you give your collaborators the ability to
    isolate new functionality but still easily integrate it into an existing codebase.
    Developers can plug into an existing algorithm with the Template Method Pattern,
    an entire class or algorithm with the Strategy Pattern, or even entire subsystems
    with stevedore. stevedore is especially useful when you want to split your plug-ins
    across discrete Python packages.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 创建可插拔的 Python 程序时，你赋予了合作者隔离新功能的能力，同时仍然可以轻松地将其集成到现有的代码库中。开发者可以使用模板方法模式（Template
    Method Pattern）插入现有算法，使用策略模式（Strategy Pattern）插入整个类或算法，或者使用 stevedore 插入整个子系统。当你想将插件跨离散的
    Python 包中分布时，stevedore 尤为有用。
- en: 'This concludes [Part III](part0019.html#part_3), which was all about extensibility.
    Writing extensible code is adhering to the Open-Closed Principle, where you make
    it easy to add onto your code without requiring modifications to existing code.
    Event-driven architectures and plug-in architectures are fantastic examples of
    designing with extensibility in mind. All of these architectural patterns require
    you to be aware of dependencies: physical, logical, and temporal. As you find
    ways to minimize physical dependencies, you’ll find that your code becomes composable,
    and can be rearranged in new compositions at will.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了关于[第 III 部分](part0019.html#part_3)的内容，重点是可扩展性。编写可扩展的代码遵循开闭原则，使得您可以轻松添加代码而无需修改现有代码。事件驱动架构和插件架构是设计可扩展性的绝佳例子。所有这些架构模式都要求您了解依赖关系：物理、逻辑和时间依赖。当您找到减少物理依赖的方法时，您会发现您的代码变得可组合，并可以随意重新组合成新的组合形式。
- en: The first three parts of this book focused on changes that can make your code
    more maintainable and readable and reduce the chance of errors. However, errors
    still have a chance of showing up; they are an unavoidable part of developing
    software. To combat this, you need to make it easy to detect errors before they
    hit production. You’ll learn how to do just that with tools like linters and tests
    in [Part IV, *Building a Safety Net*](part0025.html#part_4).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的前三部分着重于可以使您的代码更易于维护和阅读，并减少错误发生的几率。然而，错误仍然可能会出现；它们是软件开发中不可避免的一部分。为了应对这一点，您需要使错误在进入生产环境之前易于检测。您将学会如何使用诸如linter和测试工具来实现这一点，详见[第 IV 部分，*构建安全网络*](part0025.html#part_4)。
- en: '^([1](part0024_split_001.html#idm45644729667576-marker)) Erich Gamma, Richard
    Helm, Ralph E. Johnson, and John Vlissides. *Design Patterns: Elements of Reusable
    Object-Oriented Software*. Boston, MA: Addison-Wesley Professional, 1994.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '^([1](part0024_split_001.html#idm45644729667576-marker)) Erich Gamma, Richard
    Helm, Ralph E. Johnson, and John Vlissides. *设计模式：可复用面向对象软件的元素*. 波士顿, MA: Addison-Wesley
    Professional, 1994.'
- en: '^([2](part0024_split_002.html#idm45644729415976-marker)) Erich Gamma, Richard
    Helm, Ralph E. Johnson, and John Vlissides. *Design Patterns: Elements of Reusable
    Object-Oriented Software*. Boston, MA: Addison-Wesley Professional, 1994.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '^([2](part0024_split_002.html#idm45644729415976-marker)) Erich Gamma, Richard
    Helm, Ralph E. Johnson, and John Vlissides. *设计模式：可复用面向对象软件的元素*. 波士顿, MA: Addison-Wesley
    Professional, 1994.'
- en: ^([3](part0024_split_003.html#idm45644729009512-marker)) Entry points can be
    complex in how they interact with Python packaging, but that’s beyond the scope
    of this book. You can learn more at [*https://oreil.ly/bMyJS*](https://oreil.ly/bMyJS).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](part0024_split_003.html#idm45644729009512-marker)) 入口点在与Python包装互动方面可能会很复杂，但这超出了本书的范围。您可以在[*https://oreil.ly/bMyJS*](https://oreil.ly/bMyJS)了解更多信息。
