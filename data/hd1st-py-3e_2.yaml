- en: 'Chapter 2\. Diving in: *Let’s Make a Splash*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章. 深入：*让我们一起做个浪花*
- en: '![Image](assets/ch01-1-01.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-1-01.png)'
- en: '**The best way to learn a new language is to write some code.** And if you’re
    going to write some code, you’ll need a **real** problem. As luck would have it,
    we have one of those. In this chapter, you’ll start your Python application development
    journey by making a splash with our friendly, neighborhood, **Swim Coach**. You’ll
    begin with Python **strings**, learning how to **manipulate** them to your heart’s
    desire, all the while working your way towards producing a Python-based solution
    to the Coach’s problem. You’ll also see more of Python’s built-in **list** data
    structure, learn how **variables** work, as well as discover how to read Python’s
    **error messages** without going off the deep-end, all while solving a *real*
    problem with *real* Python code. Let’s dive in (head first)...'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**学习新语言的最佳方式是编写一些代码。** 如果你打算写一些代码，你将需要一个**真实**的问题。碰巧我们正好有一个这样的问题。在本章中，你将以我们友好的、邻里的**游泳教练**开始你的Python应用开发之旅。你将从Python
    **字符串**开始，学习如何按照你的意愿**操作**它们，同时朝着用Python解决教练问题的方向前进。你还将看到更多Python内置的**列表**数据结构，了解**变量**的工作原理，并学会如何阅读Python的**错误信息**，而不会深陷其中，所有这些都是通过解决一个*真实*问题和*真实*的Python代码来实现的。让我们（冒头）深入…'
- en: '![Image](assets/ch01-2-01.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-2-01.png)'
- en: '**This sounds interesting.**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**这听起来很有趣。**'
- en: Your subsequent chat with the Coach starts to tease out some of the details...
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你随后与教练的聊天开始逐渐揭示一些细节…
- en: When it comes to monitoring the progress of his young swimmers, the Coach does
    everything *manually*. During a training session, he records each swimmer’s training
    times on his trusty clipboard then, later at home, *manually* types each swimmer’s
    times into his favorite spreadsheet program in order to perform a simple performance
    analysis.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及监控年轻游泳者的进展时，教练*手动*完成所有操作。在训练过程中，他在可靠的剪贴板上记录每位游泳者的训练时间，然后在家里*手动*将每位游泳者的时间输入到他最喜爱的电子表格程序中，以进行简单的性能分析。
- en: For now, this analysis is straightforward. The times for the session are averaged,
    and a simple bar chart allows for a quick visual check of the swimmer’s performance.
    The Coach readily admits to being a computer neophyte, stating that he’s much
    better at Coaching young swimmers than “mucking about with spreadsheets”.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 就目前而言，这个分析是直接的。会话时间被平均，简单的条形图允许快速视觉检查游泳者的表现。教练坦言自己是电脑新手，称他在“折腾电子表格方面”比教小游泳者要好得多。
- en: '![Image](assets/ch01-2-02.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-2-02.png)'
- en: How do things work right now?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现在的工作情况是怎样的？
- en: At the moment, the Coach can’t expand his swim club membership, as his administrative
    overhead is too burdensome.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，教练无法扩展他的游泳俱乐部会员，因为他的行政开销太大。
- en: 'To get a feel for why this is, take a look at one of the Coach’s spreadsheets
    for *Darius*, who is currently 12 years old, so swims in the Under 13 age group:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解为什么会这样，请看一下教练为目前12岁的达里乌斯（Darius）准备的电子表格，他目前处于13岁以下年龄组中游泳：
- en: '![Image](assets/ch01-3-01.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-3-01.png)'
- en: On the face of things, this doesn’t look all that bad. Until, that is, you consider
    the Coach has over *sixty* such spreadsheets to create after *each* training session.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 乍看之下，这看起来并不那么糟糕。直到你考虑到，每次训练后教练都要创建*六十多*这样的电子表格。
- en: There are only twenty-two swimmers enrolled in the club, but as each can swim
    different distance/stroke combinations, twenty-two swimmers turns into sixty-plus
    spreadsheets very easily. That’s a lot of manual spreadsheet work.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 俱乐部只有二十二名游泳者，但由于每个人可以游不同的距离/泳姿组合，二十二名游泳者很容易变成超过六十张电子表格。这是大量手动处理电子表格工作。
- en: As you can imagine, this whole process is *painfully* slow...
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可以想象的那样，整个过程*极其*缓慢…
- en: Fortune decides to smile on you
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命运决定对你微笑。
- en: 'A quick search of the world’s largest online shopping site uncovers a new device
    described as an *internet-connected digital smart stopwatch*. As product names
    go, that’s a bit of a mouthful, but the smart stopwatch let’s the Coach record
    swim times for an identified swimmer, which are then transferred to the cloud
    as a CSV file (with a `.txt` extension). As an example of one of these files,
    here’s the contents of the file which contains matching data to the spreadsheet
    page you saw for Darius a few pages back:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对世界上最大的在线购物网站进行快速搜索，发现了一个描述为*互联网连接的数字智能秒表*的新设备。作为产品名称，这有点啰嗦，但这款智能秒表允许教练记录识别游泳者的游泳时间，然后将其作为带有`.txt`扩展名的CSV文件传输到云端。作为这些文件中匹配到达里乌斯的电子表格页面的示例，这里是文件内容：
- en: '![Image](assets/ch01-4-01.png)![Image](assets/ch01-4-02.png)![Image](assets/ch01-5-01.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/ch01-4-01.png)![Image](assets/ch01-4-02.png)![Image](assets/ch01-5-01.png)'
- en: '**The previous page’s data looks promising.**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**上一页的数据看起来很有希望。**'
- en: If you can work out how to process one file, you can then repeat for any number
    of similarly formatted files.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能够解决如何处理一个文件，那么你就可以重复处理任意数量格式相似的文件。
- en: '**The big question is:** ***Where do you start?***'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要问题是：** ***你从哪里开始？***'
- en: '![Image](assets/ch01-6-01.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/ch01-6-01.png)'
- en: Cubicle Conversation
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 书房谈话
- en: '**Mara:** OK, folks, let’s offer some suggestions on how best to process this
    data file.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**Mara:** 好的，伙计们，让我们就如何最佳处理这个数据文件提供一些建议。'
- en: '**Sam:** I guess there are two parts to this, right?'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sam:** 我猜这有两个部分，对吧？'
- en: '**Alex:** How so?'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**Alex:** 怎么说？'
- en: '**Sam:** Well, firstly, I think there’s some useful data embedded in the filename,
    so that needs to be processed. And, secondly, there’s the timing data in the file
    itself, which needs to be extracted, converted, and processed, too.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sam:** 首先，我认为文件名中包含一些有用的数据，所以需要处理一下。其次，文件本身中包含的计时数据也需要提取、转换和处理。'
- en: '**Mara:** What do you mean by “converted”?'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**Mara:** “转换”是什么意思？'
- en: '**Alex:** That was my question, too.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**Alex:** 这也是我的问题。'
- en: '**Sam:** I checked with the Coach, and “1:27.95” represents one minute, 27
    seconds, and 95 one-hundredths of a second. That needs to be taken into consideration
    when working with these values, especially when calculating averages. So, some
    sort of value conversion is needed here. Remember, too, that the data in the file
    is *textual.*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sam:** 我和教练核实过，“1:27.95”表示一分27秒95百分之一秒。在处理这些数值时，特别是计算平均值时，需要考虑这一点。因此，需要进行某种数值转换。还要记住文件中的数据是*文本*。'
- en: '**Alex:** I’ll add “conversion” to the to-do list.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**Alex:** 我会把“转换”加到待办事项列表上。'
- en: '**Mara:** And I guess the filename needs to be somehow broken apart to get
    at the swimmer’s details?'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**Mara:** 我猜文件名需要分解以获取游泳者的详细信息？'
- en: '**Sam:** Yes. The “Darius-13-100m-Fly” prefix can be broken apart on the “-”
    character, giving us the swimmer’s name (Darius), their age group (under 13),
    the distance swam (100m), and the stroke (Fly).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sam:** 是的。“Darius-13-100m-Fly”前缀可以在“-”字符上分解，从而得到游泳者的姓名（Darius）、他们的年龄组（13岁以下）、游泳距离（100米）和泳姿（蝶泳）。'
- en: '**Alex:** That’s assuming we can read the filename?'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**Alex:** 那是假设我们能读取文件名吗？'
- en: '**Sam:** Isn’t that a given?'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sam:** 那不是理所当然的吗？'
- en: '**Mara:** Not really, so we’ll still have to code for it, although I’m pretty
    sure the PSL can help here.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**Mara:** 不是很确定，所以我们仍然需要为此编写代码，尽管我很确定PSL可以在这方面提供帮助。'
- en: '**Alex:** This is getting a little complex…'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**Alex:** 情况变得有点复杂了……'
- en: '**Sam:** Not if we take things bit-by-bit.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sam:** 只要我们一点点来就好了。'
- en: '**Mara:** We just need a plan of action.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**Mara:** 我们只需要一个行动计划。'
- en: '**Alex:** If we’re going to do all this work in Python, we’ll also have a bit
    more learning to do.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**Alex:** 如果我们打算用Python完成所有这些工作，我们还需要多学习一点。'
- en: '**Sam:** I can recommend a great book… ![Image](assets/smile.png)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sam:** 我可以推荐一本很棒的书…… ![Image](assets/smile.png)'
- en: The file and the spreadsheet are “related”
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件和电子表格是“相关的”
- en: 'Before we dive into Task #1, take a moment to review how the data embedded
    in the file’s name, together with the file’s data, relates to the Coach’s spreadsheet:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们着手处理第一项任务之前，花点时间回顾一下文件名中嵌入的数据，以及文件数据如何与教练的电子表格相关联：
- en: '![Image](assets/ch01-9-01.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/ch01-9-01.png)'
- en: 'Our first task: Extract the filename’s data'
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一个任务：提取文件名中的数据
- en: For now, the plan is to concentrate on one file, specifically the file which
    contains the data for the 100m Fly times for Darius, who is swimming in the under
    13 age group.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的计划是专注于一个文件，具体来说，这个文件包含了达里乌斯在13岁以下组别的100米蝶泳成绩数据。
- en: Recall the file containing the data you need is called `Darius-13-100m-Fly.txt.`
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，包含你需要的数据的文件名叫做 `Darius-13-100m-Fly.txt.`
- en: 'Let’s create a Jupyter Notebook using VS Code called `Darius.ipynb`, which
    you can create in your **Learning** folder. Follow along in your notebook as,
    together, we work through Task #1.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们使用 VS Code 创建一个名为 `Darius.ipynb` 的 Jupyter 笔记本，你可以在你的 **Learning** 文件夹中创建它。随着我们一起完成任务
    #1，在你的笔记本中跟随着操作。'
- en: 'Remember: To create a new notebook in VS Code, select **File** then **New File...**
    from the main menu, then select the **Notebook option.**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 记住：要在 VS Code 中创建一个新的笔记本，请从主菜单中选择 **文件**，然后选择 **新建文件...**，然后选择 **笔记本选项。**
- en: '![Image](assets/ch01-10-01.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch01-10-01.png)'
- en: A string is not really a string…
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个字符串并不真的是一个字符串...
- en: The value to the right of the assignment operator (=) in the above line of code
    certainly *looks* like a string. After all, it’s a sequence of characters enclosed
    within quotes which, in most other programming languages, is the very *definition*
    of a string. This is not the case in Python.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码行中赋值运算符（=）右侧的值看起来确实像一个字符串。毕竟，它是用引号括起来的字符序列，在大多数其他编程语言中，这正是字符串的 *定义*。但在
    Python 中不是这样。
- en: In Python, the value to the right of assignment operator is a **string object**,
    which isn’t really that far off what a string is. However, the difference is important,
    as objects in Python are not just data values.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，赋值运算符右侧的值是一个 **字符串对象**，这与字符串相差无几。但是，对象在 Python 中不仅仅是数据值。
- en: To see what we’re on about here, you’ll need to resort to the combo mambo.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解我们在这里谈论的是什么，你需要借助 combo mambo。
- en: '**In Python, everything is an object.**'
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**在 Python 中，一切都是对象。**'
- en: '![Image](assets/ch01-10-02.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch01-10-02.png)'
- en: A string is an object with attributes
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个字符串是一个带有属性的对象
- en: 'You already know how to list any object’s attributes: use the **print dir**
    combo mambo.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经知道如何列出任何对象的属性：使用 **print dir** combo mambo。
- en: '![Image](assets/ch01-11-01.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch01-11-01.png)'
- en: Take a moment to appreciate what you’re looking at here
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 看看这里你所看到的东西，花点时间欣赏一下
- en: 'If you are looking at that long list of attributes and thinking there’s an
    awful lot to learn here, consider this instead: there’s an awful lot of functionality
    built into strings that you *don’t* have to write code for.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看着那长长的属性列表，觉得这里有很多东西要学习，不妨考虑一下这个：字符串内建了很多功能，你*不需要*为其编写代码。
- en: '![Image](assets/ch01-12-01.png)![Image](assets/ch01-13-02.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch01-12-01.png)![图像](assets/ch01-13-02.png)'
- en: '**No problem. Great question, by the way.**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**没问题。顺便问一下，问题很棒。**'
- en: This is Python’s **dot** operator, which allows you to invoke a method on an
    object. This means `fn.upper()` calls the **upper** method on the string referenced
    by the `fn` variable.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Python 的 **dot** 运算符，允许你在对象上调用方法。这意味着 `fn.upper()` 调用了变量 `fn` 引用的字符串的 **upper**
    方法。
- en: This is a little different from the BIFs which are invoked like functions. For
    instance, `len(fn)` returns the size of the object referred to by the `fn` variable.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这与像函数一样调用的 BIFs 有些不同。例如，`len(fn)` 返回由变量 `fn` 引用的对象的大小。
- en: It’s an error to invoke `fn.len()` (as there’s no such method), just as it’s
    an error to try `upper(fn)` (as there’s no such BIF).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `fn.len()` 是错误的（因为没有这样的方法），就像尝试 `upper(fn)` 一样是错误的（因为没有这样的 BIF）。
- en: 'Think of things this way: The methods are object-specific, whereas the BIFs
    provide *generic* functionality which can be applied to objects of *any* type.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 想一下这个：方法是对象特定的，而 BIFs 提供了可应用于*任何*类型对象的*通用*功能。
- en: '![Image](assets/ch01-15-01.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch01-15-01.png)'
- en: '**Yes, that’s right.**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**是的，没错。**'
- en: The values returned by the **upper** and **lower** methods are both *new* string
    objects, which have their own a value-part and a methods-part. Although created
    from the data referred to by the `fn` variable, the new strings are *copies* of
    the string `fn` refers to.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**upper** 和 **lower** 方法返回的值都是 *new* 字符串对象，它们有自己的 value 部分和 methods 部分。虽然是从变量
    `fn` 所引用的数据创建的，但新字符串是 `fn` 引用的字符串的 *copies*。'
- en: 'This is all by design: Python is supposed to work this way.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都是有意设计的：Python 就是应该这样工作。
- en: Extract the swimmer’s data from the filename
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从文件名中提取游泳者的数据
- en: 'Recall the three sub-tasks identified earlier for Task #1:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '回想一下为任务 #1 提出的三个子任务：'
- en: '![Image](assets/ch01-16-01.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch01-16-01.png)'
- en: As you’ve already got the filename in the `fn` variable, let’s take it as given
    that sub-task (a) is done for now.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经把文件名存储在变量 `fn` 中，我们暂时把子任务（a）视为已完成。
- en: Breaking the filename apart by the “`-`” character is sub-task (b), and you’d
    be right to guess one of the string methods might help. But, which one? There’s
    47 of them!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通过“`-`”字符分解文件名是子任务（b），你猜想其中的一个字符串方法可能会有所帮助。但是，是哪一个呢？总共有47个！
- en: '[PRE0]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-78
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**This is a big list of string methods. Whereas it’s easy to guess what “upper”
    and “lower” do, it’s not so clear what some of the others do, such as “casefold”,
    “format_map”, or “zfill”. What you’re looking for is a method to help with sub-task
    (b).**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**这是一个很长的字符串方法列表。虽然“upper”和“lower”方法的作用很容易猜到，但像“casefold”、“format_map”或“zfill”这些方法的作用就不那么清楚了。你需要的是一个能帮助完成子任务（b）的方法。**'
- en: '![Image](assets/ch01-16-03.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch01-16-03.png)'
- en: '**Sounds interesting.**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**听起来很有趣。**'
- en: 'Let’s see what the **split** method does to strings. You have a choice: You
    can run **split** and see what happens, or you can read **split**’s documentation.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 **split** 方法对字符串做了什么。你有两个选择：你可以运行 **split** 看看会发生什么，或者你可以阅读 **split**
    的文档。
- en: Don’t try to guess what a method does...
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不要试图猜测方法的作用...
- en: Read the method’s documentation!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读方法的文档！
- en: Now, granted, most programmers would rather eat glass than look-up and read
    documentation, claiming life is too short especially when there’s code to be written.
    Typically, the big annoyance with this activity is the looking-up part. So, Python
    makes finding and displaying relevant documentation easy thanks to the **help**
    BIF.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，大多数程序员宁愿吃玻璃片也不愿意查阅和阅读文档，他们认为生命太短暂，尤其是在需要编写代码时。通常，这项活动最令人讨厌的是查找部分。因此，Python
    通过 **help** BIF 实现了方便查找和显示相关文档。
- en: Regrettably, Python can’t read the documentation for you, so you’ll still have
    to do that bit yourself. But the **help** BIF let’s you avoid the context-shift
    of leaving VS Code, opening up your web browser, then searching for the docs.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是，Python 不能替你阅读文档，所以你还是得自己动手。但是 **help** BIF 能够帮你避免离开 VS Code，打开浏览器，然后搜索文档的过程。
- en: 'To view the documentation for any method use the **help** BIF, like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看任何方法的文档，请使用 **help** BIF，就像这样：
- en: '![Image](assets/ch01-17-01.png)![Image](assets/ch01-17-02.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch01-17-01.png)![图像](assets/ch01-17-02.png)'
- en: Based on a quick read of this documentation, it sounds like the **split** method
    is what you need here. Let’s take it for a quick spin.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 根据对文档的快速阅读，似乎 **split** 方法就是你需要的。让我们快速试一试。
- en: '![Image](assets/ch01-18-04.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch01-18-04.png)'
- en: '**You did read the “split” method’s documentation, didn’t you? The answer’s
    right there...**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**你确实阅读了“split”方法的文档，对吧？答案就在那里...**'
- en: The split method returns a list of words...
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: split 方法返回一个单词列表...
- en: In this context, you can think of a “word” as being a synonym for “string object”.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你可以将“单词”视为“字符串对象”的同义词。
- en: Lists in Python are data *enclosed* in **square brackets**.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，列表是用 **方括号** 括起来的数据。
- en: 'Let’s review what just happened with the two calls to **split** shown in your
    most-recent *Test Drive*. We just can resist suggesting that doing so is as easy
    as 1-2-3:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下刚刚在你最近 *试驾* 中展示的两次调用 **split** 方法的情况。我们不禁要建议你，这样做就像数1-2-3那样简单：
- en: '![Image](assets/ch01-19-01.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch01-19-01.png)'
- en: Is it time for another checkmark?
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候再做一次勾选了吗？
- en: It’s tempting to look at your list of sub-tasks, grab your pen, then put a satisfying
    checkmark beside sub-task (b), isn’t it?
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 看着你的子任务列表，拿起笔，在子任务（b）旁边画一个令人满意的勾，这是很诱人的想法，不是吗？
- en: '![Image](assets/ch01-20-01.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch01-20-01.png)'
- en: 'But doing so would be *premature*. Take a closer look at the list produced
    by your call to the **split** method:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 但这样做可能还为时过早。仔细查看你调用 **split** 方法后得到的列表：
- en: '![Image](assets/ch01-20-02.png)![Image](assets/ch01-20-03.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch01-20-02.png)![图像](assets/ch01-20-03.png)'
- en: '**Emmm, maybe...**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**嗯，也许吧...**'
- en: Let’s spend a moment or two with **split** to ensure you understand how it works
    its magic.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花一两分钟时间了解一下 **split**，确保你理解它的工作原理。
- en: Read error message from the bottom-up
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从底向上读取错误信息
- en: 'The last example in your most-recent *Exercise* produced a run-time error message
    which likely has you scratching your head:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你最近 *练习* 中的最后一个示例出现了运行时错误信息，可能让你百思不得其解：
- en: '![Image](assets/ch01-24-01.png)![Image](assets/ch01-24-02.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch01-24-01.png)![图像](assets/ch01-24-02.png)'
- en: '**Err... Okay.**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**哦... 好吧。**'
- en: Whatever wets your whistle.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 随你喜欢。
- en: Just remember to always read Python’s error messages from the *bottom-up*, and
    you’ll be fine (magic potions, notwithstanding). Also, note that Python refers
    to its error messages by the name **traceback**.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 只需记住始终从*底部向上*阅读Python的错误消息，你就会没事的（魔法药水除外）。此外，请注意Python通过名称**traceback**引用它的错误消息。
- en: Now... just what is this particular traceback trying to tell you?
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在... 这个特定的回溯想要告诉你什么？
- en: Be careful when chaining method calls
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在链式方法调用时要小心
- en: 'The idea behind that last example is solid: specify a *chain* of calls to **split**
    to break the string object on “`-`” then again on “`.`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个例子背后的想法是稳固的：指定一个**split**调用链，在“`-`”和“`.`”处分割字符串对象。
- en: '![Image](assets/ch01-25-01.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-25-01.png)'
- en: 'Of course, this line of code failed, which is a bummer because the idea was
    sound, in that you want to split your string *twice* in an attempt to break the
    strings “`Fly`” and “`txt`” apart. But, look at the error message you’re getting:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这行代码失败了，这有点令人沮丧，因为这个想法是正确的，你想要尝试将你的字符串*两次*分割，试图分开字符串“`Fly`”和“`txt`”。但是，请看你收到的错误消息：
- en: '![Image](assets/ch01-25-02.png)![Image](assets/ch01-25-03.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-25-02.png)![图片](assets/ch01-25-03.png)'
- en: '**Yes, that’s exactly what’s happening.**'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**是的，这确实是发生的情况。**'
- en: The first **split** works fine, breaking the string object using “`-`”, producing
    a list. This list is then passed onto the next method in the chain which is *also*
    **split**. The trouble is lists do *not* have a **split** method, so trying to
    invoke **split** on a list makes no sense, resulting in Python throwing it’s hands
    up in the air with an `**AttributeError**`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个**split**正常工作，使用“`-`”分割字符串对象，生成一个列表。然后将此列表传递给链中的下一个方法，这也是**split**。问题是列表没有**split**方法，因此尝试在列表上调用**split**毫无意义，导致Python放弃了它的尝试并抛出`**AttributeError**`。
- en: Now that you know this, how do you fix it?
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道了，你要如何修复它？
- en: Fixing broken chains
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复破碎的链条
- en: Let’s see what the *Head First Coders* think your options are.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 看看*Head First Coders*认为你的选择是什么。
- en: '![Image](assets/ch01-26-01.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-26-01.png)'
- en: Cubicle Conversation
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小隔间谈话
- en: '**Alex**: I think we should pause development while we learn all about lists...'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**Alex**：我认为我们应该暂停开发，同时学习所有关于列表的知识...'
- en: '**Sam**: Well, lists are important in Python, but I’m not so sure this is a
    list issue, despite what that traceback is telling us.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sam**：嗯，列表在Python中很重要，但我不确定这是一个列表问题，尽管回溯告诉我们这样。'
- en: '**Mara**: I agree. We’re trying to manipulate the `fn` *string*, not a list.
    The fact the traceback references a list is a little confusing, and it’s happening
    because **split** always returns a list.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**Mara**：我同意。我们正在尝试操作`fn`的*字符串*，而不是列表。回溯提到列表有点令人困惑，因为**split**总是返回一个列表。'
- en: '**Alex**: And we can’t call **split** on a list, right?'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**Alex**：而且我们不能在列表上调用**split**，对吧？'
- en: '**Sam**: No, you can’t, due to the fact that lists don’t include a built-in
    **split** method, whereas strings so. That’s what the traceback is telling you:
    there’s no such thing as a list **split** method.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sam**：不，你不能，因为列表不包括内置的**split**方法，而字符串则包括。这就是回溯告诉你的：列表没有**split**方法。'
- en: '**Alex**: So, we’re out of luck?'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**Alex**：所以，我们运气不佳？'
- en: '**Mara**: No, we just need to rethink things a little...'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**Mara**：不，我们只需要稍微重新思考一下...'
- en: '**Sam**: Remember: `fn` is a string. So start by asking yourself if there’s
    anything else built into strings which might help.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sam**：记住：`fn`是一个字符串。所以首先问问自己字符串中是否有其他有用的东西。'
- en: '**Alex**: How do I do that again?'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**Alex**：我怎么再次做到这一点？'
- en: '**Sam**: With your old friend, the **print dir** combo mambo.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sam**：与你的老朋友**print dir**组合起舞吧。'
- en: Strings can do more than just split
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串可以做更多事情
- en: 'As Python has trained us to always read from the bottom-up, the first method
    to catch our eye is **rstrip**. Use the **help** BIF to learn a bit about **rstrip**
    right from within your VS Code notebook:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 正如Python训练我们总是从底部向上阅读一样，第一个引起我们注意的方法是**rstrip**。使用**help** BIF可以在你的VS Code笔记本内部了解一些关于**rstrip**的内容：
- en: '![Image](assets/ch01-27-01.png)![Image](assets/ch01-27-02.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-27-01.png)![图片](assets/ch01-27-02.png)'
- en: Let’s try another string method
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们尝试另一个字符串方法
- en: 'Undaunted, let’s return to the list of string methods to continue your search:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 不屈不挠，让我们回到字符串方法列表继续搜索：
- en: '![Image](assets/ch01-28-01.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-28-01.png)'
- en: 'As with the **rstrip** method, ask the **help** BIF for details on what **removesuffix**
    does:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 与**rstrip**方法一样，询问**help** BIF以了解**removesuffix**的详细信息：
- en: '![Image](assets/ch01-28-02.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-28-02.png)'
- en: '**Let’s take this method for a spin in your notebook.**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**让我们在你的笔记本上试试这种方法。**'
- en: '![Image](assets/ch01-29-04.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-29-04.png)'
- en: All that remains is to create some variables
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 唯一剩下的就是创建一些变量
- en: 'There’s one last sub-task to complete, namely part (c):'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个最后的子任务要完成，即第（c）部分：
- en: '![Image](assets/ch01-31-01.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-31-01.png)'
- en: Your last line of code produced a list with the four values you need, but how
    do you assign each of these four values to individual variables?
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你上一行代码生成了一个包含你需要的四个值的列表，但是如何将这四个值分配给各个单独的变量？
- en: '![Image](assets/ch01-31-02.png)![Image](assets/ch01-31-03.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-31-02.png)![图片](assets/ch01-31-03.png)'
- en: '**Indeed they do.**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**确实如此。**'
- en: When working with lists, it is possible to use the familiar square bracket notation.
    And, as in most other programming languages, Python starts counting from zero,
    so `[0]` refers to the first element in the list, `[1]` the second, `[2]` the
    third, and so on.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理列表时，可以使用熟悉的方括号表示法。而且，与大多数其他编程语言一样，Python从零开始计数，因此`[0]`指的是列表中的第一个元素，`[1]`指第二个，`[2]`指第三个，依此类推。
- en: Let’s put this new-found list knowledge to immediate use.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们立即将这些新学到的列表知识付诸实践。
- en: Note
  id: totrans-151
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注
- en: '**Don’t forget to follow along!**'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**不要忘记跟进！**'
- en: 'It looks like Task #1 is complete. But is it?'
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 看起来任务＃1已经完成。但真的吗？
- en: 'Let’s remind ourselves of the sub-tasks for Task #1, which was to extract the
    data you need from the file’s name:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下任务＃1的子任务，即从文件名中提取所需的数据：
- en: '![Image](assets/ch01-33-01.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-33-01.png)'
- en: 'Considering the code from your last *Test Drive*, you’re likely done with Task
    #1.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到你上次*测试驱动*的代码，你可能已经完成了任务＃1。
- en: 'Having used VS Code and Jupyter to work out the code you need, it’s a simple
    task to copy’n’paste the code for Task #1 into a new cell. And the amount of code
    you need to copy isn’t overwhelming, is it?'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 使用VS Code和Jupyter解决了你需要的代码后，将任务＃1的代码复制粘贴到一个新单元格中就变得很简单。而且你需要复制的代码量并不多，是吗？
- en: '![Image](assets/ch01-33-02.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-33-02.png)'
- en: We were all set to begin celebrating getting to this point, but it looks like
    someone has a question...
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都准备好开始庆祝达到这一点了，但看起来有人有问题...
- en: '![Image](assets/ch01-34-01.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-34-01.png)'
- en: '**The** `**parts**` **variable feels kind of integral.**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**`**parts**`**变量感觉有点关键。**'
- en: That said, it’s a valid question, in that `parts` is created to *temporarily*
    hold the list of data items, which is then combined with the square bracket notation
    to extract the individual data items. Once that’s done, the `parts` list is no
    longer needed.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这么说吧，这是一个合理的问题，因为`parts`被创建来*临时*保存数据项列表，然后与方括号表示法结合使用，以提取单个数据项。完成这些操作后，`parts`列表就不再需要了。
- en: So, can you do without `parts`?
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，你能不用`parts`吗？
- en: Note
  id: totrans-164
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注
- en: '**And if the “parts” variable is not needed, does this mean it’s spare?!? (Sorry).**'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果“parts”变量不需要，这是否意味着它是多余的？！？（抱歉）。**'
- en: Can you do without the parts list?
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你能不用parts列表吗？
- en: 'Short answer: yes.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 简短回答：是的。
- en: Of course, getting to the point where you understand the short answer is a bit
    more involved. But, don’t worry, it’ll all make sense in a bit.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，要理解简短答案背后的意义会更复杂一些。但是，别担心，一会儿一切都会明了的。
- en: 'The first thing to remember is that the **split** method at the end of the
    chain of calls on the `fn` variable produces a list:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要记住的是，调用链末尾的**split**方法会生成一个列表：
- en: '![Image](assets/ch01-35-01.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-35-01.png)'
- en: 'The list is then assigned to the `parts` variable name, allowing you to use
    the square bracket notation to access the data you need:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将列表分配给`parts`变量名，使你能够使用方括号表示法访问所需的数据：
- en: '![Image](assets/ch01-35-02.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-35-02.png)'
- en: 'The **split** method always produces a list, so you could do what’s shown below
    to achieve the same thing as what’s shown above, removing the `parts` variable
    from the code:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**split**方法始终会生成一个列表，因此你可以像下面所示那样做，以达到与上面所示相同的效果，从代码中删除`parts`变量：'
- en: '![Image](assets/ch01-35-03.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-35-03.png)'
- en: '**Although the** `**parts**` **variable is no more, can you think of a reason
    why this version of your code may not be optimal?**'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**虽然**`**parts**`**变量不再存在，你能想到为什么这个版本的代码可能不是最优的吗？**'
- en: We can think of three reasons
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们可以想到三个原因
- en: The latest code *does* work, but at a cost.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 最新的代码*确实*可以工作，但代价高昂。
- en: '![Images](assets/1-circle.png) **The latest code is slow**'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](assets/1-circle.png) **最新的代码速度很慢**'
- en: The original code generated the list *once*, assigned it to the parts list,
    then used the list as needed. This is efficient. The latest code generates the
    list *four times*, which is hugely inefficient.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 原始代码生成列表*一次*，将其分配给 parts 列表，然后根据需要使用该列表。这是高效的。最新的代码生成列表*四次*，这是非常低效的。
- en: '![Images](assets/2-circle.png) **The latest code is harder to read**'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](assets/2-circle.png) **最新的代码更难阅读**'
- en: It’s clear what the original code is doing, but the same can’t be said for the
    latest code, which – despite being a clever bit of Python – does require a bit
    of mental gymnastics to work out what’s going on. The code looks (and is) more
    complex as a result.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 原始代码在做什么是很清楚的，但对于最新的代码来说就不一定了，尽管它是 Python 的一个聪明之处，但需要一些脑力体操才能弄清楚发生了什么。结果是代码看起来更加复杂。
- en: '![Images](assets/3-circle.png) **The latest code is a maintenance nightmare**'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](assets/3-circle.png) **最新的代码是维护的噩梦**'
- en: If you’re asked to change the suffix from `".txt"` to say, `".py"`, it’s an
    easy change when working with the original code (as it’s a single edit). With
    the latest code, you have to apply the edit four times (multiple edits) which
    can be fraught with danger.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要求你将后缀从 `".txt"` 改为 `".py"`，在处理原始代码时这很容易（因为这只需一次编辑）。而对于最新的代码，你需要进行四次编辑（多次编辑），这可能充满风险。
- en: '![Image](assets/ch01-36-01.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-36-01.png)'
- en: '**Let’s not be too hasty.**'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们不要太仓促。**'
- en: Yes, the latest code is more trouble than it’s worth, but the idea of removing
    the `parts` variable from your code still has merit, as it’s of no use once the
    assignment to `swimmer`, `age`, `distance`, and `stroke` have occurred.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，最新的代码不值得那么多麻烦，但是从代码中删除 `parts` 变量的想法仍然有其价值，因为一旦对 `swimmer`、`age`、`distance`
    和 `stroke` 进行了赋值，它就再也没有用处了。
- en: There may be another way to do this...
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能还有另一种方法来做这件事……
- en: Multiple assignment (aka unpacking)
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多重赋值（也称为展开）
- en: Although the concept is not unique to Python, the notion of *multiple assignment*
    is a powerful feature of the language. Also know as **unpacking** within the Python
    world, this feature lets you assign to more than one variable on the left of the
    assignment operator with a matching number of data values to the right of the
    assignment operator.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个概念不是 Python 独有的，但*多重赋值*的概念是该语言的一个强大特性。在 Python 的世界中，也被称为**展开**，该特性允许你在赋值操作符的左侧同时赋值给多个变量，并且右侧的数据值数量要与左侧变量数量相匹配。
- en: 'Here’s some example code which demonstrates how this works:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些示例代码，演示了这个工作原理：
- en: '![Image](assets/ch01-37-01.png)![Image](assets/ch01-37-02.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-37-01.png)![图片](assets/ch01-37-02.png)'
- en: 'Note the following: You can match *any number* of variable names against values
    (as long as the number of each on both sides of the assignment operator match).
    Python treats the data values on the right as if they are a list, but does not
    require you to enclose the list within square brackets.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意以下内容：你可以将*任意数量*的变量名与值匹配（只要赋值操作符两侧的数量相等）。Python 将右侧的数据值视为一个列表，但不要求你将列表放在方括号中。
- en: '![Image](assets/ch01-38-01.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-38-01.png)'
- en: '**Yes, that’s what this means.**'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**是的，这就是它的含义。**'
- en: Python programmers describe the list as being “unpacked” prior to the assignment,
    which is their way of saying the list’s data values are taken one-by-one and assigned
    to the variable names one-by-one.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Python 程序员描述列表在赋值之前被“展开”，这是他们的说法，即列表的数据值逐一取出，并逐一分配给变量名。
- en: The single list is *unpacked* and its values are *assigned* to *multiple* variable
    names, one at a time.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 单个列表被*展开*，其值被*逐一*分配给*多个*变量名。
- en: 'Task #1 is done!'
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Task #1 完成了！'
- en: 'Recall the list of sub-tasks once more:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 再次回顾一下子任务清单：
- en: '![Image](assets/ch01-41-01.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-41-01.png)'
- en: That’s a pretty powerful line of code. We’ve told the Coach that work is progressing.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一行非常强大的代码。我们告诉教练工作正在进展。
- en: '![Image](assets/ch01-41-02.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-41-02.png)'
- en: '**Yes, they are. We are on our way!**'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**是的，他们是。我们在路上！**'
- en: 'Of course, we’ve neglected to tell the Coach that there’s still a bit of work
    to do. Let’s remind everyone what Task #2 entails (shown on the next page).'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '当然，我们忘了告诉教练还有一点工作要做。让我们提醒大家 Task #2 包含了哪些内容（在下一页显示）。'
- en: 'Task #2: Process the data in the file'
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Task #2：处理文件中的数据'
- en: 'At first glance, it looks like there’s a bit of work here. But, don’t fret:
    we’ll work though all of these sub-tasks *together* in the next chapter:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，这里似乎有些工作要做。但是，别担心：我们将在下一章节一起处理所有这些子任务：
- en: Read the lines from the file
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文件中读取行
- en: Ignore the second line
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 忽略第二行
- en: Break the first line apart by “,” to produce a list of times
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按“,”拆分第一行以生成时间列表
- en: Take each of the times and convert them to a number from the “mins:secs.hundredths”
    format
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取每个时间并将其转换为“mins:secs.hundredths”格式的数字
- en: Calculate the average time, then convert it back to the “mins:secs.hundredths”
    format (for display purposes)
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算平均时间，然后将其转换回“mins:secs.hundredths”格式（用于显示目的）
- en: 'Display the variables from Task #1, then the list of times and the calculated
    average from Task #2'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示来自任务＃1的变量，然后显示来自任务＃2的时间列表和计算出的平均值
- en: You’ve just enough time to do a few things before diving into your third chapter.
    Go make yourself a cup of your favorite brew, grab a piece of pie, read through
    the chapter summary, then work through this chapter’s crossword *at your leisure*.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在你深入研读第三章之前，你有足够的时间去做一些事情。去泡一杯你最喜欢的茶，吃一块派，浏览一下章节摘要，然后悠闲地解决本章的填字游戏。
- en: '![Image](assets/ch01-42-02.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-42-02.png)'
- en: The String Crossword
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串填字游戏
- en: '![Image](assets/ch01-43-01.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-43-01.png)'
- en: '*All of the answers to the clues are found in this chapter’s pages, and the
    solution is on the next page. Have fun!*'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '*本章的所有线索答案都可以在这章的页面找到，并且解决方案在下一页。祝你玩得愉快！*'
- en: '![Image](assets/ch01-43-02.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-43-02.png)'
- en: '**Across**'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '**横向**'
- en: 3\. Comes in handy when breaking apart strings.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 在拆分字符串时非常方便。
- en: 6\. Another name for multiple assignment.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 多重赋值的另一个名称。
- en: 11\. To be a variable, it has to have one of these.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 11\. 要成为变量，必须具备其中之一。
- en: 12\. Everything is one of these.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 12\. 万物皆属于此。
- en: 13\. Can be used to get rid of a filename’s extension.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 13\. 可用于去除文件名的扩展名。
- en: '**Down**'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '**纵向**'
- en: 1\. Removes a set of characters from the end of a string.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 从字符串末尾删除一组字符。
- en: 2\. Like an array in other languages.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 就像其他语言中的数组。
- en: 4\. More than one.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 多于一个。
- en: 5\. The swim coach mucks about with one of these.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 游泳教练用这个做手脚。
- en: 7\. Ball and ________.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 球和________。
- en: 8\. Short for “double underscore”.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. “双下划线”的简称。
- en: 9\. Our favorite brackets.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 9\. 我们喜欢的括号。
- en: 10\. The plural name given to an object’s built-in functions.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 10\. 对象的内置函数的复数名称。
- en: The String Crossword Solution
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串填字游戏解答
- en: '![Image](assets/ch01-44-01.png)![Image](assets/ch01-44-02.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch01-44-01.png)![图片](assets/ch01-44-02.png)'
- en: '**Across**'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '**横向**'
- en: 3\. Comes in handy when breaking apart strings.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 在拆分字符串时非常方便。
- en: 6\. Another name for multiple assignment.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 多重赋值的另一个名称。
- en: 11\. To be a variable, it has to have one of these.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 11\. 要成为变量，必须具备其中之一。
- en: 12\. Everything is one of these.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 12\. 万物皆属于此。
- en: 13\. Can be used to get rid of a filename’s extension.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 13\. 可用于去除文件名的扩展名。
- en: '**Down**'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '**纵向**'
- en: 1\. Removes a set of characters from the end of a string.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 从字符串末尾删除一组字符。
- en: 2\. Like an array in other languages.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 就像其他语言中的数组。
- en: 4\. More than one.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 多于一个。
- en: 5\. The swim coach mucks about with one of these.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 游泳教练用这个做手脚。
- en: 7\. Ball and ________.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 球和________。
- en: 8\. Short for “double underscore”.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. “双下划线”的简称。
- en: 9\. Our favorite brackets.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 9\. 我们喜欢的括号。
- en: 10\. The plural name given to an object’s built-in functions.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 10\. 对象的内置函数的复数名称。
