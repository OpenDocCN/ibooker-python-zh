- en: Chapter 1\. The Modern Web
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。现代网络
- en: The Web as I envisaged it, we have not seen it yet. The future is still so much
    bigger than the past.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我所设想的网络，我们还没有见到。未来比过去要大得多。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Tim Berners-Lee
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Tim Berners-Lee
- en: Preview
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预览
- en: Once upon a time, the web was small and simple. Developers had such fun throwing
    PHP, HTML, and MySQL calls into single files and proudly telling everyone to check
    out their website. But the web grew over time to zillions, nay, squillions of
    pages—and the early playground became a metaverse of theme parks.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经，互联网小而简单。开发者们喜欢在单个文件中混合使用 PHP、HTML 和 MySQL 调用，并自豪地告诉每个人去查看他们的网站。但随着时间的推移，网络变得庞大无比，页面数达到数不清、甚至是数不尽的数量——早期的游乐场成为了一个主题公园的元宇宙。
- en: 'In this chapter, I’ll point out some areas that have become ever more relevant
    to the modern web:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将指出一些对现代网络越来越重要的领域：
- en: Services and APIs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务和API
- en: Concurrency
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并发
- en: Layers
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 层次
- en: Data
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据
- en: The next chapter will show what Python offers in these areas. After that, we’ll
    dive into the FastAPI web framework and see what it has to offer.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将展示Python在这些领域提供了什么。之后，我们将深入了解FastAPI Web框架及其提供的功能。
- en: Services and APIs
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务和API
- en: The web is a great connecting fabric. Although much activity still occurs on
    the *content* side—HTML, JavaScript, images, and so on—there’s an increasing emphasis
    on the application programming interfaces (APIs) that connect things.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 网络是一个连接的伟大结构。虽然大量活动仍然发生在*内容*方面——HTML、JavaScript、图片等，但越来越重视连接这些内容的应用程序接口（APIs）。
- en: Commonly, a web *service* handles low-level database access and middle-level
    business logic (often lumped together as a *backend*), while JavaScript or mobile
    apps provide a rich top-level *frontend* (interactive user interface). These fore
    and aft worlds have become more complex and divergent, usually requiring developers
    to specialize in one or the other. It’s harder to be a *full stack* developer
    than it used to be.^([1](ch01.html#id336))
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，一个网络*服务*负责低级数据库访问和中级业务逻辑（通常被合称为*后端*），而 JavaScript 或移动应用程序提供丰富的顶级*前端*（交互式用户界面）。这两个世界已变得更加复杂和分化，通常需要开发人员专注于其中之一。比以往更难成为*全栈*开发者了。^([1](ch01.html#id336))
- en: These two worlds talk to each other using APIs. In the modern web, API design
    is as important as the design of websites themselves. An API is a contract, similar
    to a database schema. Defining and modifying APIs is now a major job.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个世界通过API彼此交流。在现代网络中，API设计与网站设计同样重要。API是一种合同，类似于数据库模式。定义和修改API现在是一项主要工作。
- en: Kinds of APIs
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API的种类
- en: 'Each API defines the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 每个API定义如下内容：
- en: Protocol
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 协议
- en: The control structure
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 控制结构
- en: Format
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 格式
- en: The content structure
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 内容结构
- en: 'Multiple API methods have developed as technology has evolved from isolated
    machines, to multitasking systems, to networked servers. You’ll probably run across
    one or more of these at some point, so the following is a brief summary before
    getting to *HTTP* and its friends, which are featured in this book:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 随着技术的发展，多种API方法已经发展，从孤立的机器到多任务系统，再到网络服务器。在某些时候，您可能会遇到其中的一种或多种，因此以下是在*HTTP*及其朋友中特别介绍的简要总结：
- en: Before networking, an API usually meant a very close connection, like a function
    call to a *library* in the same language as your application—say, calculating
    a square root in a math library.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在网络出现之前，API通常意味着非常紧密的连接，就像在应用程序中与*库*中的函数调用一样——比如在数学库中计算平方根。
- en: '*Remote procedure calls (RPCs)* were invented to call functions in other processes,
    on the same machine or others, as though they were in the calling application.
    A popular current example is [gRPC](https://grpc.io).'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*远程过程调用（RPCs）*的发明是为了在调用应用程序时调用其他进程中的函数，无论是在同一台机器上还是其他机器上。一个流行的现代例子是[gRPC](https://grpc.io)。'
- en: '*Messaging* sends small chunks of data in pipelines among processes. Messages
    may be verb-like commands or may just indicate noun-like *events* of interest.
    Current popular messaging solutions, which vary broadly from toolkits to full
    servers, include [Apache Kafka](https://kafka.apache.org), [RabbitMQ](https://www.rabbitmq.com),
    [NATS](https://nats.io), and [ZeroMQ](https://zeromq.org). Communication can follow
    different patterns:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*消息传递*在进程之间的管道中发送小块数据。消息可能是类似动词的命令，也可能仅仅是感兴趣的名词*事件*。当前流行的消息传递解决方案广泛变化，从工具包到完整的服务器，包括[Apache
    Kafka](https://kafka.apache.org)，[RabbitMQ](https://www.rabbitmq.com)，[NATS](https://nats.io)和[ZeroMQ](https://zeromq.org)。通信可以遵循不同的模式：'
- en: Request-response
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请求-响应
- en: 'One: one, like a web browser calling a web server.'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一对一，如Web浏览器调用Web服务器。
- en: Publish-subscribe, or *pub-sub*
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 发布-订阅，或 *pub-sub*
- en: A *publisher* emits messages, and *subscribers* act on each according to some
    data in the message, like a subject.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*发布者* 发布消息，*订阅者* 根据消息中的某些数据（如主题）对每条消息作出响应。'
- en: Queues
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 队列
- en: Like pub-sub, but only one of a pool of subscribers grabs the message and acts
    on it.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类似于 pub-sub，但仅有一个池中的订阅者获取消息并对其作出响应。
- en: Any of these may be used alongside a web service—for example, performing a slow
    backend task like sending an email or creating a thumbnail image.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 任何这些都可以与 Web 服务一起使用，例如执行像发送电子邮件或创建缩略图图像这样的慢速后端任务。
- en: HTTP
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTP
- en: 'Berners-Lee proposed three components for his World Wide Web:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 伯纳斯-李为他的万维网提出了三个组件：
- en: HTML
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: HTML
- en: A language for displaying data
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一种用于显示数据的语言
- en: HTTP
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP
- en: A client-server protocol
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端-服务器协议
- en: URLs
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: URL
- en: An addressing scheme for web resources
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 用于 Web 资源的寻址方案
- en: Although these seem obvious in retrospect, they turned out to be a ridiculously
    useful combination. As the web evolved, people experimented, and some ideas, like
    the `IMG` tag, survived the Darwinian struggle. And as needs became clearer, people
    got serious about defining standards.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些在回顾中显而易见，但它们事实上是一个极其有用的组合。随着 Web 的发展，人们进行了各种尝试，一些想法，如 `IMG` 标签，经历了达尔文式的竞争。随着需求变得更加清晰，人们开始严格定义标准。
- en: REST(ful)
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: REST（ful）
- en: One chapter in Roy Fielding’s Ph.D. [thesis](https://oreil.ly/TwGmX) defined
    *Representational State Transfer (REST)*—an *architectural style* for HTTP use.^([2](ch01.html#id357))
    Although often referenced, it’s been largely [misunderstood](https://oreil.ly/bsSry).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Roy Fielding 博士论文中的一个章节定义了 *表现状态转移（REST）* —— 一种用于 HTTP 的 *架构风格*。^([2](ch01.html#id357))
    尽管经常被引用，但它往往被广泛 [误解](https://oreil.ly/bsSry)。
- en: 'A roughly shared adaptation has evolved and dominates the modern web. It’s
    called *RESTful*, with these characteristics:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一个粗略共享的适应已经演变并主导了现代网络。它被称为 *RESTful*，具有以下特点：
- en: Uses HTTP and client-server protocol
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 HTTP 和客户端-服务器协议
- en: Stateless (each connection is independent)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无状态（每个连接都是独立的）
- en: Cacheable
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可缓存的
- en: Resource-based
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于资源的
- en: A *resource* is data that you can distinguish and perform operations on. A web
    service provides an *endpoint*—a distinct URL and HTTP *verb* (action)—for each
    feature that it wants to expose. An endpoint is also called a *route*, because
    it routes the URL to a function.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*资源* 是可以区分并执行操作的数据。Web 服务为每个要公开的功能提供一个 *终端点* —— 一个独特的 URL 和 HTTP *动词*（操作）。终端点也被称为
    *路由*，因为它将 URL 路由到一个功能。'
- en: 'Database users are familiar with the *CRUD* acronym of procedures: create,
    read, update, delete. The HTTP verbs are pretty CRUDdy:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库用户熟悉 *CRUD* 缩写的过程：创建、读取、更新、删除。HTTP 动词非常 CRUD：
- en: '`POST`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`POST`'
- en: Create (write)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 创建（写入）
- en: '`PUT`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`PUT`'
- en: Modify completely (replace)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 完全修改（替换）
- en: '`PATCH`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`PATCH`'
- en: Modify partially (update)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 部分修改（更新）
- en: '`GET`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`GET`'
- en: Um, get (read, retrieve)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，获取（读取、检索）
- en: '`DELETE`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`DELETE`'
- en: Uh, delete
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，删除
- en: 'A client sends a *request* to a RESTful endpoint with data in one of the following
    areas of an HTTP message:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端通过 RESTful 终端点向服务器发送 *请求*，数据位于 HTTP 消息的以下区域之一：
- en: Headers
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 头部信息
- en: The URL string
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL 字符串
- en: Query parameters
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询参数
- en: Body values
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主体数值
- en: 'In turn, an HTTP *response* returns these:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，HTTP *响应* 返回这些内容：
- en: 'An integer [*status code*](https://oreil.ly/oBena) indicating the following:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个整数 [*状态码*](https://oreil.ly/oBena) 指示以下内容：
- en: 100s
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 100s
- en: Info, keep going
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 信息，请继续
- en: 200s
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 200s
- en: Success
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 成功
- en: 300s
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 300s
- en: Redirection
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重定向
- en: 400s
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 400s
- en: Client error
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 客户端错误
- en: 500s
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 500s
- en: Server error
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 服务器错误
- en: Various headers
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种头部信息
- en: A body, which may be empty, single, or *chunked* (in successive pieces)
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可能为空、单一或 *分块* 的主体（以连续的片段）
- en: 'At least one status code is an Easter egg: `418` (I’m a [teapot](https://www.google.com/teapot))
    is supposed to be returned by a web-connected teapot, if asked to brew coffee.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 至少有一个状态码是一个复活节彩蛋：`418`（我是 [茶壶](https://www.google.com/teapot)）应该由一个连接到网络的茶壶返回，如果被要求煮咖啡。
- en: '![fapi 01in01](assets/fapi_01in01.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![fapi 01in01](assets/fapi_01in01.png)'
- en: You’ll find many websites and books on RESTful API design, all with useful rules
    of thumb. This book will dole some out on the way.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您将会发现很多关于 RESTful API 设计的网站和书籍，它们都有有用的经验法则。本书将在途中提供一些。
- en: JSON and API Data Formats
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSON 和 API 数据格式
- en: Frontend applications can exchange plain ASCII text with backend web services,
    but how can you express data structures like lists of things?
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 前端应用程序可以与后端 Web 服务交换纯 ASCII 文本，但如何表示像列表这样的数据结构呢？
- en: Just about when we really started to need it, along came *JavaScript Object
    Notation (JSON)*—another simple idea that solves an important problem and seems
    obvious with hindsight. Although the *J* stands for *JavaScript*, the syntax looks
    a lot like Python too.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正是在我们真正需要的时候，*JavaScript 对象表示法（JSON）*横空出世——又一个简单的想法解决了一个重要问题，在事后看来显得显而易见。尽管
    *J* 代表 *JavaScript*，其语法看起来也很像 Python。
- en: JSON has largely replaced older attempts like XML and SOAP. In the rest of this
    book, you’ll see that JSON is the default web service input and output format.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 已经大量取代了像 XML 和 SOAP 这样的旧尝试。在本书的其余部分，你会看到 JSON 是默认的 Web 服务输入和输出格式。
- en: JSON:API
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSON:API
- en: The combination of RESTful design and JSON data formats is common now. But some
    wiggle room still remains for ambiguity and nerd tussles. The recent [JSON:API](https://jsonapi.org)
    proposal aims to tighten specs a bit. This book will use the loose RESTful approach,
    but JSON:API or something similarly rigorous may be useful if you have significant
    tussles.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful 设计与 JSON 数据格式的结合现在很常见。但在模糊性和书呆子之间仍然有一些余地。最近的[JSON:API](https://jsonapi.org)提案旨在稍微加强规范。本书将使用宽松的
    RESTful 方法，但如果你有重大争论，JSON:API 或类似严格的方法可能会有所帮助。
- en: GraphQL
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GraphQL
- en: RESTful interfaces can be cumbersome for some purposes. Facebook (now Meta)
    designed [Graph Query Language (*GraphQL*)](https://graphql.org) to specify more
    flexible service queries. I won’t go into GraphQL in this book, but you may want
    to look into it if you find RESTful design inadequate for your application.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些目的来说，RESTful 接口可能很笨重。Facebook（现在是 Meta）设计了[图形查询语言（*GraphQL*）](https://graphql.org)来指定更灵活的服务查询。本书不会深入讲解
    GraphQL，但如果你觉得 RESTful 设计对你的应用不足够，你可能需要深入了解一下。
- en: Concurrency
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并发
- en: Besides the growth of service orientation, the rapid expansion of the number
    of connections to web services requires ever better efficiency and scale.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 除了服务导向的增长外，连接到 Web 服务的数量的快速扩展要求更好的效率和规模。
- en: 'We want to reduce the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望减少以下内容：
- en: Latency
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟
- en: The up-front wait time
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 前期等待时间
- en: Throughput
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 吞吐量
- en: The number of bytes per second between the service and its callers
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 服务与其调用者之间每秒传输的字节数
- en: In the old web days,^([3](ch01.html#id369)) people dreamed of supporting hundreds
    of simultaneous connections, then fretted about the “10K problem,” and now assume
    millions at a time.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期的网络时代，^([3](ch01.html#id369)) 人们梦想支持数百个同时连接，后来又担心“10K 问题”，现在却假定可以同时处理数百万个连接。
- en: The term *concurrency* doesn’t mean full parallelism. Multiple processing isn’t
    occurring in the same nanosecond, in a single CPU. Instead, concurrency mostly
    avoids *busy waiting* (idling the CPU until a response is delivered). CPUs are
    zippy, but networks and disks are thousands to millions of times slower. So, whenever
    we talk to a network or disk, we don’t want to just sit there with a blank stare
    until it responds.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '*并发*并不意味着完全的并行处理。多个处理不会在同一微秒内在单个 CPU 上发生。相反，并发主要避免*忙等*（即空闲 CPU 直到收到响应）。CPU
    是很快的，但网络和磁盘慢了成千上万倍。所以，每当我们与网络或磁盘通信时，我们不希望只是一动不动地等待响应。'
- en: 'Normal Python execution is *synchronous*: one thing at a time, in the order
    specified by the code. Sometimes we want to be *asynchronous*: do a little of
    one thing, then a little of another thing, back to the first thing, and so on.
    If all our code uses the CPU to calculate things (*CPU bound*), there’s really
    no spare time to be asynchronous. But if we perform something that makes the CPU
    wait for an external thing to complete (I/O bound), we can be asynchronous.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 正常的 Python 执行是*同步*的：按代码指定的顺序一次处理一件事。有时我们希望是*异步*的：一会儿做一件事，然后做另一件事，再回到第一件事，依此类推。如果我们所有的代码都用
    CPU 来计算事物（*CPU bound*），那么没有多余的时间去异步。但是如果我们执行某些让 CPU 等待外部事物完成的操作（*I/O bound*），我们就可以异步执行。
- en: 'Asynchronous systems provide an *event loop*: requests for slow operations
    are sent and noted, but we don’t hold up the CPU waiting for their responses.
    Instead, some immediate processing is done on each pass through the loop, and
    any responses that came in during that time are handled in the next pass.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 异步系统提供一个*事件循环*：将慢操作的请求发送并记录下来，但我们不会阻塞 CPU 等待它们的响应。相反，每次循环通过时都会进行一些即时处理，接下来处理在这段时间内收到的任何响应。
- en: The effects can be dramatic. Later in this book, you’ll see how FastAPI’s support
    of asynchronous processing makes it much faster than typical web frameworks.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这些效果可能非常显著。本书后面会介绍，FastAPI 支持异步处理，使其比典型的 Web 框架快得多。
- en: Asynchronous processing isn’t magic. You still have to be careful to avoid doing
    too much CPU-intensive work during the event loop, because that will slow down
    everything. Later in this book, you’ll see the uses of Python’s `async` and `await`
    keywords, and how FastAPI lets you mix both synchronous and asynchronous processing.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 异步处理并不是魔法。在事件循环中仍需小心，避免进行过多的 CPU 密集型工作，因为那会拖慢一切。在本书的后面，你将看到 Python 的`async`和`await`关键字的用法，以及
    FastAPI 如何让你混合使用同步和异步处理。
- en: Layers
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 层次
- en: '*Shrek* fans may remember he noted his layers of personality, to which Donkey
    replied, “Like an onion?”'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*绿巨人*的粉丝可能还记得他提到自己的层次性格，对此驴子回答道：“像洋葱一样？”'
- en: '![fapi 01in02](assets/fapi_01in02.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![fapi 01in02](assets/fapi_01in02.png)'
- en: 'Well, if ogres and tearful vegetables can have layers, then so can software.
    To manage size and complexity, many applications have long used a so-called *three-tier
    model*.^([4](ch01.html#id377)) This isn’t terribly new. Terms differ,^([5](ch01.html#id378))
    but for this book I’m using the following simple separation of terms (see [Figure 1-1](#fig-vert-layers)):'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，如果食人魔和泪眼汪汪的蔬菜都有层次，那么软件也可以有。为了管理大小和复杂性，许多应用程序长期以来一直使用所谓的*三层模型*。^([4](ch01.html#id377))
    这并不是特别新鲜。术语可能有所不同，^([5](ch01.html#id378)) 但在本书中，我使用以下简单的术语分离（见[图 1-1](#fig-vert-layers)）：
- en: Web
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Web
- en: Input/output layer over HTTP, which assembles client requests, calls the Service
    Layer, and returns responses
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 上的输入/输出层，组装客户端请求，调用服务层，并返回响应
- en: Service
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 服务
- en: The business logic, which calls the Data layer when needed
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 业务逻辑在需要时调用数据层
- en: Data
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 数据
- en: Access to data stores and other services
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 访问数据存储和其他服务
- en: Model
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 模型
- en: Data definitions shared by all layers
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 所有层共享的数据定义
- en: Web client
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Web 客户端
- en: Web browser or other HTTP client-side software
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Web 浏览器或其他 HTTP 客户端软件
- en: Database
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库
- en: The data store, often an SQL or NoSQL server
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 数据存储，通常是 SQL 或 NoSQL 服务器
- en: '![fapi 0101](assets/fapi_0101.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![fapi 0101](assets/fapi_0101.png)'
- en: Figure 1-1\. Vertical layers
  id: totrans-121
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-1\. 垂直层次
- en: These components will help you scale your site without having to start from
    scratch. They’re not laws of quantum mechanics, so consider them guidelines for
    this book’s exposition.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件将帮助你在无需从头开始的情况下扩展你的站点。它们不是量子力学的法则，所以请将它们视作本书阐述的指南。
- en: The layers talk to one another via APIs. These can be simple function calls
    to separate Python modules, but could access external code via any method. As
    I showed earlier, this could include RPCs, messages, and so on. In this book,
    I’m assuming a single web server, with Python code importing other Python modules.
    The separation and information hiding is handled by the modules.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 各层通过 API 进行通信。这些可以是简单的函数调用到分离的 Python 模块，也可以通过任何方法访问外部代码。如前所述，这可能包括 RPC、消息等。在本书中，我假设一个单一的
    Web 服务器，Python 代码导入其他 Python 模块。模块处理分离和信息隐藏。
- en: The *Web layer* is the one that users see, via *client* applications and APIs.
    We’re usually talking about a RESTful web interface, with URLs, and JSON-encoded
    requests and responses. But alternative text (or command-line interface, CLI)
    clients also could be built alongside the Web layer. Python Web code may import
    Service-layer modules but should not import Data modules.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*Web 层*是用户通过*客户端*应用程序和 API 看到的层面。通常我们讨论的是一个符合 RESTful 标准的 Web 接口，包括 URL 和 JSON
    编码的请求与响应。但也可以在 Web 层之外构建替代文本（或命令行界面，CLI）客户端。Python Web 代码可以导入服务层模块，但不应导入数据模块。'
- en: The *Service layer* contains the actual details of whatever this website provides.
    This layer essentially looks like a *library*. It imports Data modules to access
    databases and external services but should not know the details.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*服务层*包含这个网站提供的实际细节。这一层本质上看起来像一个*库*。它导入数据模块来访问数据库和外部服务，但不应知道具体细节。'
- en: The *Data layer* provides the Service layer access to data, through files or
    client calls to other services. Alternative Data layers may also exist, communicating
    with a single Service layer.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*数据层*通过文件或客户端调用其他服务为服务层提供数据访问。还可能存在替代的数据层，与单一的服务层通信。'
- en: The *Model box* isn’t an actual layer but a source of data definitions shared
    by the layers. This isn’t needed if you’re passing built-in Python data structures
    among them. As you will see, FastAPI’s inclusion of Pydantic enables the definition
    of data structures with many useful features.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*模型框*并不是实际的层，而是各层共享的数据定义来源。如果你在它们之间传递内置的 Python 数据结构，则不需要这一层。正如你将看到的，FastAPI
    包含 Pydantic，可以定义具有许多有用特性的数据结构。'
- en: 'Why make these divisions? Among many reasons, each layer can be:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要进行这些分层？有很多原因，其中之一是每个层次可以：
- en: Written by specialists.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由专家撰写。
- en: Tested in isolation.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在隔离环境中进行测试。
- en: 'Replaced or supplemented: you might add a second Web layer, using a different
    API such as gRPC, alongside a web one.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 替换或补充：你可以添加第二个 Web 层，使用不同的 API，比如 gRPC，与一个 Web 层并行使用。
- en: 'Follow one rule from *Ghostbusters*: Don’t cross the streams. That is, don’t
    let web details leak out of the Web layer, or database details out of the Data
    layer.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循*幽灵剧组*的一条规则：不要交叉流动。也就是说，不要让 Web 层的细节泄露到 Web 外，或者数据库层的细节泄露到数据层外。
- en: You can visualize *layers* as a vertical stack, like a cake in the Great British
    Bake Off.^([6](ch01.html#id392))
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将*层次*想象成一个垂直堆叠，就像英国烘焙大赛中的蛋糕^（[6](ch01.html#id392)）。
- en: '![fapi 01in03](assets/fapi_01in03.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![fapi 01in03](assets/fapi_01in03.png)'
- en: 'Here are some reasons for separation of the layers:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有分层分离的一些原因：
- en: 'If you don’t separate the layers, expect a hallowed web meme: *Now you have
    two problems*.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你不分离这些层，预期将会出现一个广为传播的网络模因：*现在你有两个问题*。
- en: Once the layers are mixed, later separation will be *very* difficult.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦层次混合，稍后分离将会非常*困难*。
- en: You’ll need to know two or more specialties to understand and write tests if
    code logic gets muddled.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果代码逻辑混乱，你需要了解两个或更多专业知识来理解和编写测试将会很困难。
- en: By the way, even though I call them *layers*, you don’t need to assume that
    one layer is “above” or “below” another, and that commands flow with gravity.
    Vertical chauvinism! You could also view layers as sideways-communicating boxes
    ([Figure 1-2](#fig-horiz-layers)).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，虽然我称它们为*层*，但你不需要假设一个层次是“高于”或“低于”另一个，并且命令是沿着重力流动的。垂直沙文主义！你也可以将层次视为侧向通信的盒子（[图 1-2](#fig-horiz-layers)）。
- en: '![fapi 0102](assets/fapi_0102.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![fapi 0102](assets/fapi_0102.png)'
- en: Figure 1-2\. Sideways-communicating boxes
  id: totrans-141
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-2\. 侧向通信的盒子
- en: However you visualize them, the *only* communication paths between the boxes/layers
    are the arrows (APIs). This is important for testing and debugging. If undocumented
    doors exist in a factory, the night watchman will inevitably be surprised.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你如何想象它们，盒子/层之间唯一的通信路径是箭头（API）。这对于测试和调试非常重要。如果工厂中存在未记录的门，夜间看守员将不可避免地感到惊讶。
- en: The arrows between the web client and Web layer use HTTP or HTTPS to transport
    mostly JSON text. The arrows between the Data layer and database use a database-specific
    protocol and carry SQL (or other) text. The arrows between the layers themselves
    are function calls carrying data models.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Web 客户端与 Web 层之间的箭头使用 HTTP 或 HTTPS 传输大多数 JSON 文本。数据层与数据库之间的箭头使用特定于数据库的协议，并携带
    SQL（或其他）文本。层之间的箭头是传递数据模型的函数调用。
- en: 'Also, the recommended data formats flowing through the arrows are as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，通过箭头流动的推荐数据格式如下：
- en: Client ⇔ Web
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端 ⇔ Web
- en: RESTful HTTP with JSON
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 JSON 的 RESTful HTTP
- en: Web ⇔ Service
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Web ⇔ 服务
- en: Models
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 模型
- en: Service ⇔ Data
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 服务 ⇔ 数据
- en: Models
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 模型
- en: Data ⇔ Databases and services
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 数据 ⇔ 数据库和服务
- en: Specific APIs
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 特定的 API
- en: 'Based on my own experience, this is how I’ve chosen to structure the topics
    in this book. It’s workable and has scaled to fairly complex sites, but isn’t
    sacred. You may have a better design! However you do it, these are the important
    points:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我自己的经验，这是我选择在本书中构建主题结构的方式。它是可行的，并且已经扩展到相当复杂的站点，但并不是神圣不可侵犯的。你可能有更好的设计！不管你如何做，以下是重要的几点：
- en: Separate domain-specific details.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分开领域特定的细节。
- en: Define standard APIs between the layers.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义层次之间的标准 API。
- en: Don’t cheat; don’t leak.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不作弊；不泄露。
- en: Sometimes deciding which layer is the best home for code is a challenge. For
    example, [Chapter 11](ch11.html#ch11) looks at authentication and authorization
    requirements and how to implement them—as an extra layer between Web and Service,
    or within one of them. Software development is sometimes as much art as science.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候决定代码的最佳归属层次是一个挑战。例如，[第 11 章](ch11.html#ch11) 讨论了认证和授权需求以及如何实现它们——作为 Web 和服务之间的额外层，或者在其中一个中。软件开发有时与艺术同样重要。
- en: Data
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据
- en: The web has often been used as a frontend to relational databases, although
    many other ways of storing and accessing data have evolved, such as NoSQL or NewSQL
    databases.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Web 经常被用作关系数据库的前端，但随着 NoSQL 或 NewSQL 数据库等多种存储和访问数据的方式的发展，其它方式也在增多。
- en: But beyond databases, *machine learning (ML)*—or *deep learning* or just *AI*—is
    fundamentally remaking the technology landscape. The development of large models
    requires *lots* of messing with data, which has traditionally been called extract,
    transform, load (ETL).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 但除了数据库外，*机器学习（ML）* — 或者 *深度学习* 或仅仅 *AI* — 正在从根本上改变技术景观。开发大型模型需要 *大量* 处理数据，这在传统上被称为提取、转换、加载（ETL）。
- en: As a general-purpose service architecture, the web can help with many of the
    fiddly bits of ML systems.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种通用的服务架构，网络可以帮助解决许多ML系统的琐碎问题。
- en: Review
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习
- en: The web uses many APIs, but especially RESTful ones. Asynchronous calls allow
    better concurrency, which speeds up the overall process. Web service applications
    are often large enough to divide into layers. Data has become a major area in
    its own right. All these concepts are addressed in the Python programming language,
    coming in the next chapter.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 网络使用许多API，特别是RESTful的API。异步调用允许更好的并发性，这加快了整体过程。Web服务应用通常足够大，可以划分为多个层次。数据已经成为一个独立的重要领域。所有这些概念都在Python编程语言中得到了解决，在下一章中详细介绍。
- en: ^([1](ch01.html#id336-marker)) I gave up trying a few years ago.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.html#id336-marker)) 几年前我放弃了尝试。
- en: ^([2](ch01.html#id357-marker)) *Style* means a higher-level pattern, like *client-server*,
    rather than a specific design.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch01.html#id357-marker)) *风格* 意味着一个更高级别的模式，如 *客户端-服务器*，而不是一个特定的设计。
- en: ^([3](ch01.html#id369-marker)) Around when caveman played hacky sack with giant
    ground sloths.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch01.html#id369-marker)) 大约在穴居人与巨型地懒一起踢毽子的时候。
- en: '^([4](ch01.html#id377-marker)) Choose your own dialect: tier/layer, tomato/tomahto/arigato.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch01.html#id377-marker)) 选择你自己的方言：层/层次，番茄/番茄/感谢。
- en: ^([5](ch01.html#id378-marker)) You’ll often see the term *Model-View-Controller
    (MVC)* and variations. Commonly accompanied by religious wars, toward which I’m
    agnostic.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch01.html#id378-marker)) 你经常会看到 *模型-视图-控制器（MVC）* 及其变体。通常伴随着宗教战争，我对此持不可知论立场。
- en: ^([6](ch01.html#id392-marker)) As viewers know, if your layers get sloppy, you
    may not return to the tent the next week.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](ch01.html#id392-marker)) 正如观众所知，如果你的层次结构松散，可能下周就不会回到帐篷了。
