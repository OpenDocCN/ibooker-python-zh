- en: Chapter 1\. A Taste of Py
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章\. Python 的一点味道
- en: Only ugly languages become popular. Python is the one exception.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 只有丑陋的语言才会流行。Python是唯一的例外。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Don Knuth
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 唐纳德·克努斯
- en: Mysteries
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谜
- en: Let’s begin with two mini-mysteries and their solutions. What do you think the
    following two lines mean?
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从两个迷你谜题及其解决方案开始。你认为以下两行文字是什么意思？
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It looks technical, like some kind of computer program. Actually, it’s a *knitting
    pattern*; specifically, a fragment describing how to turn the heel of a sock,
    like the one in [Figure 1-1](#fig_socks).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来很技术化，像某种计算机程序。实际上，它是一个*编织图案*；具体来说，是一个描述如何转弯袜子的脚后跟的片段，就像[图 1-1](#fig_socks)中的那只袜子一样。
- en: '![socks](assets/inp2_0101.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![袜子](assets/inp2_0101.png)'
- en: Figure 1-1\. Knitted socks
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-1\. 针织袜子
- en: This makes as much sense to me as a Sudoku puzzle does to one of my cats, but
    my wife understands it perfectly. If you’re a knitter, you do, too.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这对我来说一点都不合理，就像数独对我的猫一样，但我的妻子完全理解。如果你是一个编织者，你也会的。
- en: 'Let’s try another mysterious text, found on an index card. You’ll figure out
    its purpose right away, although you might not know its final product:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试另一个神秘的文本，发现在一张索引卡上。你会立即理解它的目的，尽管你可能不知道它的最终产品：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Even if you don’t cook, you probably recognized that it’s a *recipe*^([1](ch01.html#idm45795040338904)):
    a list of food ingredients followed by directions for preparation. But what does
    it make? It’s *lefse*, a Norwegian delicacy that resembles a tortilla ([Figure 1-2](#fig_lefse)).
    Slather on some butter and jam or whatever you like, roll it up, and enjoy.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你不会做饭，你可能也认出了它是一个*食谱*^([1](ch01.html#idm45795040338904))：一份食物配料列表，后面是制作指南。但它制作的是什么？这是*lefse*，一种类似于玉米饼的挪威美食（见[图 1-2](#fig_lefse)）。涂上一些黄油和果酱或你喜欢的任何东西，卷起来，享受吧。
- en: '![lefse](assets/inp2_0102.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![lefse](assets/inp2_0102.png)'
- en: Figure 1-2\. Lefse
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-2\. Lefse
- en: 'The knitting pattern and the recipe share some features:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 编织图案和食谱共享一些特征：
- en: A regular *vocabulary* of words, abbreviations, and symbols. Some might be familiar,
    others mystifying.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种常规的*词汇*，包括单词、缩写和符号。有些可能很熟悉，其他的可能令人困惑。
- en: Rules about what can be said, and where—*syntax*.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于可以说什么和在哪里说的*语法*规则。
- en: A *sequence of operations* to be performed in order.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要按顺序执行的*操作序列*。
- en: Sometimes, a repetition of some operations (a *loop*), such as the method for
    frying each piece of lefse.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时，会重复执行一些操作（一个*循环*），比如油煎每片lefse的方法。
- en: Sometimes, a reference to another sequence of operations (in computer terms,
    a *function*). In the recipe, you might need to refer to another recipe for ricing
    potatoes.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时，参考另一个操作序列（在计算机术语中，是一个*函数*）。在食谱中，你可能需要参考另一个关于土豆泥的食谱。
- en: Assumed knowledge about the *context*. The recipe assumes you that know what
    water is and how to boil it. The knitting pattern assumes that you can knit and
    purl without stabbing yourself too often.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设你对*上下文*有所了解。这个配方假设你知道水是什么，以及如何把它煮沸。这个编织图案假设你能够编织和针织而不经常刺伤自己。
- en: Some *data* to be used, created, or modified—potatoes and yarn.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些要使用、创建或修改的*数据*——土豆和纱线。
- en: The *tools* used to work with the data—pots, mixers, ovens, knitting sticks.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于处理数据的*工具*——锅、搅拌机、烤箱、编织棒。
- en: An expected *result*. In our examples, something for your feet and something
    for your stomach. Just don’t mix them up.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个预期的*结果*。在我们的例子中，是给你的脚和你的胃的东西。只是别把它们搞混了。
- en: Whatever you call them—idioms, jargon, little languages—you see examples of
    them everywhere. The lingo saves time for people who know it, while mystifying
    the rest of us. Try deciphering a newspaper column about bridge if you don’t play
    the game, or a scientific paper if you’re not a scientist (or even if you are,
    but in a different field).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你如何称呼它们——成语、行话、小语言——你都会在各处看到它们的例子。这些行话为懂它的人节省了时间，而对我们其他人则使事情变得神秘。试着解密一篇关于桥牌的报纸专栏，如果你不玩这个游戏，或者解释一篇科学论文，如果你不是科学家（甚至如果你是，但在不同领域）。
- en: Little Programs
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小程序
- en: You’ll see all of these ideas in computer programs, which are themselves like
    little languages, specialized for humans to tell computers what to do. I used
    the knitting pattern and recipe to demonstrate that programming isn’t that mysterious.
    It’s largely a matter of learning the right words and the rules.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在计算机程序中看到所有这些想法，它们本身就像小语言，专门为人类告诉计算机要做什么而设计。我用编织图案和食谱来说明编程并不神秘。这在很大程度上取决于学习正确的词汇和规则。
- en: Now, it helps greatly if there aren’t too many words and rules, and if you don’t
    need to learn too many of them at once. Our brains can hold only so much at one
    time.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果单词和规则不多，并且你不需要一次学习太多东西，这会帮助很多。我们的大脑一次只能记住那么多东西。
- en: Let’s finally see a real computer program ([Example 1-1](#ch01_ex1)). What do
    you think this does?
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们最终看一个真正的计算机程序（[示例 1-1](#ch01_ex1)）。你觉得这个程序做什么？
- en: Example 1-1\. countdown.py
  id: totrans-31
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-1\. countdown.py
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you guessed that it’s a Python program that prints the lines
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你猜测这是一个Python程序，它打印以下行
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: then you know that Python can be easier to learn than a recipe or knitting pattern.
    And you can practice writing Python programs from the comfort and safety of your
    desk, far from the hazards of hot water and pointy sticks.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 那么你就知道Python比食谱或编织图案更容易学习。而且你可以在舒适和安全的桌子旁练习编写Python程序，远离热水和尖锐的棍子的危险。
- en: The Python program has some special words and symbols—`for`, `in`, `print`,
    commas, colons, parentheses, and so on—that are important parts of the language’s
    *syntax* (rules). The good news is that Python has a nicer syntax, and less of
    it to remember, than most computer languages. It seems more natural—almost like
    a recipe.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Python程序有一些特殊的单词和符号——`for`、`in`、`print`、逗号、冒号、括号等等，这些是语言*语法*（规则）的重要部分。好消息是，Python具有更好的语法，而且需要记住的东西比大多数计算机语言少。它似乎更自然——几乎像一个食谱。
- en: '[Example 1-2](#ch01_ex2) is another tiny Python program; it selects one Harry
    Potter spell from a Python *list* and prints it.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 1-2](#ch01_ex2)是另一个微小的Python程序；它从一个Python *列表* 中选择一个哈利波特法术并打印它。'
- en: Example 1-2\. spells.py
  id: totrans-38
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-2\. spells.py
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The individual spells are Python *strings* (sequences of text characters, enclosed
    in quotes). They’re separated by commas and enclosed in a Python *list* that’s
    defined by enclosing square brackets (`[` and `]`). The word `spells` is a *variable*
    that gives the list a name so that we can do things with it. In this case, the
    program would print the fourth spell:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 个体法术是Python *字符串*（文本字符序列，用引号括起来）。它们由逗号分隔，并且放在由方括号（`[`和`]`）定义的Python *列表*中。单词`spells`是一个*变量*，给列表命名，这样我们就可以对其进行操作。在这种情况下，程序会打印第四个法术：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Why did we say `3` if we wanted the fourth? A Python list such as `spells` is
    a sequence of values, accessed by their *offset* from the beginning of the list.
    The first value is at offset `0`, and the fourth value is at offset `3`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们说`3`，如果我们想要第四个？Python列表（如`spells`）是从列表开始的值的序列，通过它们从列表开始的*偏移量*来访问。第一个值在偏移量`0`处，第四个值在偏移量`3`处。
- en: Note
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: People count from 1, so it might seem weird to count from 0. It helps to think
    in terms of offsets instead of positions. Yes, this is an example of how computer
    programs sometimes differ from common language usage.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 人们从1开始计数，所以从0开始计数可能看起来很奇怪。以偏移量而不是位置来思考有助于理解。是的，这是计算机程序有时与普通语言用法不同的示例。
- en: Lists are very common *data structures* in Python, and [Chapter 7](ch07.html#ch_lists)
    shows how to use them.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 列表在Python中是非常常见的*数据结构*，并且[第7章](ch07.html#ch_lists)展示了如何使用它们。
- en: The program in [Example 1-3](#ch01_ex3) prints a quote from one of the Three
    Stooges, but referenced by who said it rather than its position in a list.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 1-3](#ch01_ex3)中的程序打印了一个Three Stooges的引用，但是通过说它的人而不是在列表中的位置来引用。'
- en: Example 1-3\. quotes.py
  id: totrans-47
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-3\. quotes.py
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you were to run this little program, it would print the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行这个小程序，它会打印以下内容：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`quotes` is a variable that names a Python *dictionary*—a collection of unique
    *keys* (in this example, the name of the Stooge) and associated *values* (here,
    a notable saying of that Stooge). Using a dictionary, you can store and look up
    things by name, which is often a useful alternative to a list.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`quotes`是一个变量，它命名了一个Python *字典*——一组唯一的*键*（在这个示例中是三个小丑的名字）和相关的*值*（这里是这些小丑的著名说法）。使用字典，你可以通过名称存储和查找东西，这通常是列表的有用替代方法。'
- en: The `spells` example used square brackets (`[` and `]`) to make a Python list,
    and the `quotes` example uses curly brackets (`{` and `}`, which are no relation
    to Curly), to make a Python dictionary. Also, a colon (`:`) is used to associate
    each key in the dictionary with its value. You can read much more about dictionaries
    in [Chapter 8](ch08.html#ch_dicts).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`spells`示例使用方括号（`[`和`]`）创建了一个Python列表，而`quotes`示例使用花括号（`{`和`}`，与Curly无关）创建了一个Python字典。此外，冒号（`:`）用于将字典中的每个键与其值关联起来。你可以在[第8章](ch08.html#ch_dicts)中读到更多关于字典的内容。'
- en: That wasn’t too much syntax at once, I hope. In the next few chapters, you’ll
    encounter more of these little rules, a bit at a time.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这不会让你一下子记住太多语法规则。在接下来的几章中，你将逐步了解更多这些小规则。
- en: A Bigger Program
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更大的程序
- en: 'And now for something completely different: [Example 1-4](#ch01_ex4) presents
    a Python program performing a more complex series of tasks. Don’t expect to understand
    how the program works yet; that’s what this book is for! The intent is to introduce
    you to the look and feel of a typical nontrivial Python program. If you know other
    computer languages, evaluate how Python compares. Even without knowing Python
    yet, can you roughly figure out what each line does before reading the explanation
    after the program? You’ve already seen examples of a Python list and a dictionary,
    and this throws in a few more features.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们完全不同的内容：[示例 1-4](#ch01_ex4) 展示了一个执行更复杂任务的 Python 程序。暂时不要期望能理解程序的工作原理；这正是本书的目的！它的目的是让你了解典型的非平凡
    Python 程序的外观和感觉。如果你懂其他编程语言，可以评估一下 Python 的差异。即使还不了解 Python，你能在阅读程序解释之前大致猜到每行代码的作用吗？你已经见过
    Python 列表和字典的示例，这里还包含了更多功能。
- en: In earlier printings of this book, the sample program connected to a YouTube
    website and retrieved information on its most highly rated videos, like “Charlie
    Bit My Finger.” It worked well until shortly after the ink was dry on the second
    printing. That’s when Google dropped support for this service and the marquee
    sample program stopped working. Our new [Example 1-4](#ch01_ex4) goes to another
    site which should be around longer—the *Wayback Machine* at the [Internet Archive](http://archive.org),
    a free service that has saved billions of web pages (and movies, TV shows, music,
    games, and other digital artifacts) over 20 years. You’ll see more examples of
    such *web APIs* in [Chapter 18](ch18.html#ch_web).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书早期版本中，示例程序连接到 YouTube 网站并获取其最受欢迎视频的信息，如“查理咬我的手指”。这个功能在第二版印刷后不久停止工作。那时，Google
    停止支持此服务，导致标志性的示例程序无法继续运行。我们的新 [示例 1-4](#ch01_ex4) 前往另一个网站，这个网站应该能持续更长时间——位于 [互联网档案馆](http://archive.org)
    的 *Wayback Machine*，这是一个免费服务，保存了二十年来数十亿个网页（以及电影、电视节目、音乐、游戏和其他数字文物）。你将在 [第 18 章](ch18.html#ch_web)
    中看到更多这样的 *网络 API* 示例。
- en: The program will ask you to type a URL and a date. Then, it asks the Wayback
    Machine if it has a copy of that website around that date. If it found one, it
    returns the information to this Python program, which prints the URL and displays
    it in your web browser. The point is to show how Python handles a variety of tasks—get
    your typed input, communicate across the internet to a website, get back some
    content, extract a URL from it, and convince your web browser to display that
    URL.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 程序会要求你输入一个 URL 和一个日期。然后，它询问 Wayback Machine 是否在那个日期左右保存了该网站的副本。如果找到了，它将把信息返回给
    Python 程序，打印出 URL 并在你的网络浏览器中显示。这个例子展示了 Python 如何处理各种任务：获取你输入的内容、通过互联网与网站进行通信、获取一些内容、从中提取一个
    URL，并说服你的网络浏览器显示该 URL。
- en: If we got back a normal web page full of HTML-formatted text, we would need
    to figure out how to display it, which is a lot of work that we happily entrust
    to web browsers. We could also try to extract the parts that we want (see more
    details about *web scraping* in [Chapter 18](ch18.html#ch_web)). Either choice
    would be more work and a larger program. Instead, the Wayback Machine returns
    data in *JSON* format. JSON (JavaScript Object Notation) is a human-readable text
    format that describes the types, values, and order of the data within it. It’s
    another little language, and it has become a popular way to exchange data among
    different computer languages and systems. You’ll read more about JSON in [Chapter 12](ch12.html#ch_munging).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们得到一个充满 HTML 格式文本的普通网页，我们需要弄清如何显示它，这是一项需要交给网络浏览器处理的大量工作。我们也可以尝试提取我们想要的部分（详见
    [第 18 章](ch18.html#ch_web) 关于 *网页抓取* 的更多细节）。无论选择哪种方式，都会增加工作量和程序的复杂度。相反，Wayback
    Machine 返回的数据是 *JSON* 格式。JSON（JavaScript 对象表示法）是一种人类可读的文本格式，描述了其中数据的类型、值和顺序。它是另一种小语言，已成为不同计算机语言和系统之间交换数据的流行方式。你将在
    [第 12 章](ch12.html#ch_munging) 进一步了解 JSON。
- en: Python programs can translate JSON text into Python *data structures*—the kind
    you’ll see in the next few chapters—as though you wrote a program to create them
    yourself. Our little program just selects one piece (the URL of the old page from
    the Internet Archive website). Again, this is a complete Python program that you
    can run yourself. We’ve included only a little error-checking, just to keep the
    example short. The line numbers are not part of the program; they are included
    to help you follow the description that we provide after the program.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Python程序可以将JSON文本转换为Python *数据结构* —— 就像你自己编写程序创建它们一样。我们的小程序只选择了一部分（来自Internet
    Archive网站的旧页面的URL）。再次说明，这是一个完整的Python程序，你可以自己运行。我们只包含了少量的错误检查，只是为了保持示例的简洁。行号不是程序的一部分；它们包含在内，以帮助你跟随我们在程序后提供的描述。
- en: Example 1-4\. archive.py
  id: totrans-60
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-4\. archive.py
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This little Python program did a lot in a few fairly readable lines. You don’t
    know all these terms yet, but you will within the next few chapters. Here’s what’s
    going on in each line:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个小Python程序在几行中做了很多事情，而且相当易读。你现在还不知道所有这些术语，但在接下来的几章中你会了解到。以下是每一行正在发生的事情：
- en: '*Import* (make available to this program) all the code from the Python *standard
    library* module called `webbrowser`.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*导入*（使这个程序可用）来自Python *标准库*模块名为`webbrowser`的所有代码。'
- en: Import all the code from the Python standard library module called `json`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入Python标准库模块`json`的所有代码。
- en: Import only the `urlopen` *function* from the standard library module `urllib.request`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅从标准库模块`urllib.request`中导入`urlopen` *函数*。
- en: A blank line, because we don’t want to feel crowded.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个空行，因为我们不想感到拥挤。
- en: Print some initial text to your display.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一些初始文本打印到您的显示器上。
- en: Print a question about a URL, read what you type, and save it in a program *variable*
    called `site`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印一个关于URL的问题，读取你输入的内容，并保存在一个名为`site`的程序 *变量* 中。
- en: Print another question, this time reading a year, month, and day, and then save
    it in a variable called `era`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印另一个问题，这次读取年、月和日，并将其保存在名为`era`的变量中。
- en: Construct a string variable called `url` to make the Wayback Machine look up
    its copy of the site and date that you typed.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构造一个名为`url`的字符串变量，以使Wayback Machine查找您输入的站点和日期的副本。
- en: Connect to the web server at that URL and request a particular *web service*.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到该URL的Web服务器并请求特定的*Web服务*。
- en: Get the response data and assign to the variable `contents`.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取响应数据并将其分配给变量`contents`。
- en: '*Decode* `contents` to a text string in JSON format, and assign to the variable
    `text`.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*解码* `contents`为JSON格式的文本字符串，并将其分配给变量`text`。'
- en: Convert `text` to `data`—Python data structures.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`text`转换为`data` —— Python数据结构。
- en: 'Error-checking: `try` to run the next four lines, and if any fail, run the
    last line of the program (after the `except`).'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误检查：`try`运行接下来的四行，如果任何一个失败，则运行程序的最后一行（在`except`之后）。
- en: If we got back a match for this site and date, extract its value from a three-level
    Python *dictionary*. Notice that this line and the next two are indented. That’s
    how Python knows that they go with the preceding `try` line.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们找到了这个站点和日期的匹配项，则从一个三级Python *字典*中提取其值。注意，这一行和接下来的两行是缩进的。这就是Python如何知道它们属于前面的`try`行。
- en: Print the URL that we found.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印我们找到的URL。
- en: Print what will happen after the next line executes.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印下一行执行后会发生什么。
- en: Display the URL we found in your web browser.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的浏览器中显示我们找到的URL。
- en: If anything failed in the previous four lines, Python jumps down to here.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果前面的四行有任何失败，Python跳到这里。
- en: If it failed, print a message and the site that we were looking for. This is
    indented because it should be run only if the preceding `except` line runs.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果失败了，打印一条消息和我们正在查找的站点。这是缩进的，因为它只能在前面的`except`行运行时运行。
- en: 'When I ran this in a terminal window, I typed a site URL and a date, and got
    this text output:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在终端窗口中运行这个命令时，我输入了一个站点URL和一个日期，并得到了这段文本输出：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: And [Figure 1-3](#img_archive) shows what appeared in my browser.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 并且[图 1-3](#img_archive)显示了在我的浏览器中显示的内容。
- en: '![inp2 0103](assets/inp2_0103.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![inp2 0103](assets/inp2_0103.png)'
- en: Figure 1-3\. From the Wayback Machine
  id: totrans-86
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-3\. 来自Wayback Machine
- en: In the previous example, we used some of Python’s *standard library* modules
    (programs that are included with Python when it’s installed), but there’s nothing
    sacred about them. Python has a trove of excellent third-party software. [Example 1-5](#ch01_ex5)
    is a rewrite that accesses the Internet Archive website with an external Python
    software package called `requests`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用了Python的一些*标准库*模块（安装Python时包含的程序），但它们并非神圣不可侵犯。Python还拥有大量优秀的第三方软件。[示例1-5](#ch01_ex5)
    是一个重写，使用名为`requests`的外部Python软件包访问Internet Archive网站。
- en: Example 1-5\. archive2.py
  id: totrans-88
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例1-5\. archive2.py
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The new version is shorter, and I’d guess it’s more readable for most people.
    You’ll read more about `requests` in [Chapter 18](ch18.html#ch_web), and externally
    authored Python software in general in [Chapter 11](ch11.html#ch_modules).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本更短，我猜对大多数人来说更易读。您将在 [第18章](ch18.html#ch_web) 中详细了解`requests`，以及在 [第11章](ch11.html#ch_modules)
    中了解Python的外部编写软件。
- en: Python in the Real World
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python在现实世界中
- en: So, is learning Python worth the time and effort? Python has been around since
    1991 (older than Java, younger than C), and is consistently in the top five most
    popular computing languages. People are paid to write Python programs—serious
    stuff that you use every day, such as Google, YouTube, Instagram, Netflix, and
    Hulu. I’ve used it for production applications in many areas. Python has a reputation
    for productivity that appeals to fast-moving organizations.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，学习Python是否值得时间和精力？Python自1991年以来就存在（比Java老，比C新），一直稳居最受欢迎的五大计算机语言之列。人们受雇编写Python程序——比如您每天使用的严肃内容，如Google、YouTube、Instagram、Netflix和Hulu。我在许多领域的生产应用中都使用了它。Python以其高效率而著称，适合快节奏的组织。
- en: 'You’ll find Python in many computing environments, including these:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您会发现Python存在于许多计算环境中，包括以下几种：
- en: The command line in a monitor or terminal window
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监视器或终端窗口中的命令行
- en: Graphical user interfaces (GUIs), including the web
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括Web在内的图形用户界面（GUI）
- en: The web, on the client and server sides
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web的客户端和服务器端
- en: Backend servers supporting large popular sites
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持大型流行站点的后端服务器
- en: The *cloud* (servers managed by third parties)
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*云*（由第三方管理的服务器）'
- en: Mobile devices
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动设备
- en: Embedded devices
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入式设备
- en: Python programs range from one-off *scripts*—such as those you’ve seen so far
    in this chapter—to million-line systems.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Python程序从一次性*脚本*（比如本章中到目前为止看到的那些）到百万行系统都有。
- en: '[The 2018 Python Developers’ Survey](https://oreil.ly/8vK7y) has numbers and
    graphs on Python’s current place in the computing world.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[2018年Python开发者调查](https://oreil.ly/8vK7y) 提供了有关Python在计算世界中当前地位的数据和图表。'
- en: We’ll look at its uses in websites, system administration, and data manipulation.
    In the final chapters, we’ll see specific uses of Python in the arts, science,
    and business.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到它在网站、系统管理和数据处理中的应用。在最后的章节中，我们将看到Python在艺术、科学和商业中的具体用途。
- en: Python Versus the Language from Planet X
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python与来自X星球的语言相比
- en: How does Python compare against other languages? Where and when would you choose
    one over the other? In this section, I show code samples from other languages,
    just so you can see what the competition looks like. You are *not* expected to
    understand these if you haven’t worked with them. (By the time you get to the
    final Python sample, you might be relieved that you haven’t had to work with some
    of the others.)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Python与其他语言相比如何？在何时何地选择一种而不是另一种？在本节中，我展示了其他语言的代码示例，这样您就可以看到竞争情况。如果您没有使用过这些语言，您不*需要*理解它们。（当您看到最后的Python示例时，您可能会因为没有必要与其他语言一起工作而感到宽慰。）
- en: Each program is supposed to print a number and say a little about the language.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 每个程序都应打印一个数字，并对语言做简要介绍。
- en: 'If you use a terminal or terminal window, the program that reads what you type,
    runs it, and displays the results is called the *shell* program. The Windows shell
    is called [`cmd`](https://en.wikipedia.org/wiki/Cmd.exe); it runs *batch* files
    with the suffix `.bat`. Linux and other Unix-like systems (including macOS) have
    many shell programs. The most popular is called [`bash`](https://www.gnu.org/software/bash)
    or `sh`. The shell has simple abilities, such as simple logic and expanding wildcard
    symbols such as `*` into filenames. You can save commands in files called *shell
    scripts* and run them later. These might be the first programs you encountered
    as a programmer. The problem is that shell scripts don’t scale well beyond a few
    hundred lines, and they are much slower than the alternative languages. The next
    snippet shows a little shell program:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用终端或终端窗口，那么读取您输入的内容并运行它并显示结果的程序称为*shell*程序。Windows的shell称为[`cmd`](https://en.wikipedia.org/wiki/Cmd.exe)，它运行带有后缀`.bat`的*批处理*文件。Linux和其他类Unix系统（包括macOS）有许多shell程序。最流行的称为[`bash`](https://www.gnu.org/software/bash)或`sh`。Shell具有简单的功能，如简单逻辑和将通配符符号如`*`扩展为文件名。您可以将命令保存在称为*shell脚本*的文件中，以后运行它们。这些可能是您作为程序员遇到的第一个程序。问题在于shell脚本在超过几百行后不容易扩展，并且比其他语言慢得多。下一段显示了一个小的shell程序：
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you saved this in a file as `test.sh` and ran it with `sh test.sh`, you
    would see the following on your display:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将这段代码保存为`test.sh`并用`sh test.sh`运行它，您会在显示器上看到以下内容：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Old stalwarts [C](https://oreil.ly/7QKsf) and [C++](https://oreil.ly/iOJPN)
    are fairly low-level languages, used when speed is most important. Your operating
    system and many of its programs (including the `python` program on your computer)
    are probably written in C or C++.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 旧有的[C](https://oreil.ly/7QKsf)和[C++](https://oreil.ly/iOJPN)是相当底层的语言，当速度最重要时使用。您的操作系统及其许多程序（包括计算机上的`python`程序）可能是用C或C++编写的。
- en: 'These two are harder to learn and maintain. You need to keep track of many
    details like *memory management*, which can lead to program crashes and problems
    that are difficult to diagnose. Here’s a little C program:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种语言更难学习和维护。您需要注意许多细节，如*内存管理*，这可能导致程序崩溃和难以诊断的问题。这是一个小的C程序：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'C++ has the C family resemblance but has evolved some distinctive features:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: C++具有C家族的特征，但也发展了一些独特的功能：
- en: '[PRE14]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[Java](https://www.java.com) and [C#](https://oreil.ly/1wo5A) are successors
    to C and C++ that avoid some of their forebears’ problems—especially memory management—but
    can be somewhat verbose. The example that follows shows some Java:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[Java](https://www.java.com)和[C#](https://oreil.ly/1wo5A)是C和C++的继任者，避免了它们前辈的一些问题——特别是内存管理问题——但有时会显得有些冗长。接下来的示例展示了一些Java：'
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you haven’t written programs in any of these languages, you might wonder:
    what is all that *stuff*? We only wanted to print a simple line. Some languages
    carry substantial syntactic baggage. You’ll learn more about this in [Chapter 2](ch02.html#ch_names).'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有用过这些语言编写程序，您可能会想知道：所有那些*东西*是什么？我们只想打印一行简单的代码。一些语言带有大量的语法装备。您将在[第2章](ch02.html#ch_names)中了解更多信息。
- en: C, C++, and Java are examples of *static languages*. They require you to specify
    some low-level details like data types for the computer. [Appendix A](app01.html#app_computers)
    shows how a data type like an integer has a specific number of bits in your computer,
    and can only do integer-ey things. In contrast, *dynamic languages* (also called
    *scripting languages*) do not force you to declare variable types before using
    them.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: C、C++和Java是*静态语言*的示例。它们要求您在使用变量之前指定一些低级细节，如数据类型。[附录A](app01.html#app_computers)显示了像整数这样的数据类型在计算机中有特定数量的位，并且只能执行整数操作。相比之下，*动态语言*（也称为*脚本语言*）在使用变量之前不强制您声明变量类型。
- en: 'The all-purpose dynamic language for many years was [Perl](http://www.perl.org).
    Perl is very powerful and has extensive libraries. Yet, its syntax can be awkward,
    and the language seems to have lost momentum in the past few years to Python and
    Ruby. This example regales you with a Perl bon mot:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，通用的动态语言是[Perl](http://www.perl.org)。Perl非常强大，拥有广泛的库。然而，它的语法可能有些笨拙，在过去几年中似乎失去了向Python和Ruby的势头。这个例子向您展示了Perl的一个名言：
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[Ruby](http://www.ruby-lang.org) is a more recent language. It borrows a little
    from Perl, and is popular mostly because of *Ruby on Rails*, a web development
    framework. It’s used in many of the same areas as Python, and the choice of one
    or the other might boil down to a matter of taste, or available libraries for
    your particular application. Here’s a Ruby snippet:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[Ruby](http://www.ruby-lang.org)是一种较新的语言。它从Perl借鉴了一些，主要因为*Ruby on Rails*，一个Web开发框架而流行。它在很多和Python相同的领域中使用，选择其中之一可能归结为品味或者您特定应用程序的可用库。这是一个Ruby片段：'
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PHP](http://www.php.net), which you can see in the example that follows, is
    very popular for web development because it makes it easy to combine HTML and
    code. However, the PHP language itself has a number of gotchas, and PHP has not
    caught on as a general language outside of the web. Here’s what it looks like:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[PHP](http://www.php.net)，如下例所示，非常流行于Web开发，因为它方便地结合了HTML和代码。然而，PHP语言本身有一些陷阱，并且在Web之外的通用语言中并不流行。这是它的样子：'
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[Go](https://golang.org) (or *Golang*, if you’re trying to Google it) is a
    recent language that tries to be both efficient and friendly:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[Go](https://golang.org)（或者*Golang*，如果你想要在Google中搜索）是一种近来的语言，试图在高效和友好之间找到平衡：'
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Another modern alternative to C and C++ is [Rust](https://doc.rust-lang.org):'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种现代的C和C++的替代品是[Rust](https://doc.rust-lang.org)：
- en: '[PRE20]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Who’s left? Oh yes, [Python](https://python.org):'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 还剩下谁？哦对了，[Python](https://python.org)：
- en: '[PRE21]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Why Python?
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择Python？
- en: 'One reason, not necessarily the most important, is popularity. By various measures,
    Python is:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个原因，虽然不一定是最重要的，是它的流行度。通过各种指标来看，Python是：
- en: The [fastest-growing](https://oreil.ly/YHqqD) major programming language, as
    you can see in [Figure 1-4](#fig_1_4).
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为最快增长的主要编程语言，正如你在[图1-4](#fig_1_4)中看到的那样。
- en: 'The editors of the June 2019 [TIOBE Index](https://www.tiobe.com/tiobe-index)
    say: “This month Python has reached again an all time high in TIOBE index of 8.5%.
    If Python can keep this pace, it will probably replace C and Java in 3 to 4 years
    time, thus becoming the most popular programming language of the world.”'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2019年6月的[TIOBE指数](https://www.tiobe.com/tiobe-index)的编辑们说：“本月Python在TIOBE指数中再次达到了历史新高的8.5%。如果Python能保持这样的增长速度，它可能在3到4年内取代C和Java，成为世界上最流行的编程语言。”
- en: Programming language of the year for 2018 (TIOBE), and top ranking by [IEEE
    Spectrum](https://oreil.ly/saRgb) and [PyPL](http://pypl.github.io/PYPL.html).
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2018年的年度编程语言（TIOBE），并且在[IEEE Spectrum](https://oreil.ly/saRgb)和[PyPL](http://pypl.github.io/PYPL.html)中排名靠前。
- en: The most popular language for introductory computer science courses at the top
    [American colleges](http://bit.ly/popular-py).
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在顶级[美国学院](http://bit.ly/popular-py)中，最流行的初级计算机科学课程语言。
- en: The official teaching language for high schools in France.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 法国高中的官方教学语言。
- en: '![inp2 0104](assets/inp2_0104.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![inp2 0104](assets/inp2_0104.png)'
- en: Figure 1-4\. Python leads in major programming language growth
  id: totrans-140
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-4\. Python在主要编程语言增长中处于领先地位
- en: More recently, it’s become extremely popular in the data science and machine
    learning worlds. If you want to land a well-paying programming job in an interesting
    area, Python is a good choice now. And if you’re hiring, there’s a growing pool
    of experienced Python developers.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，在数据科学和机器学习领域变得极其流行。如果你想在一个有趣的领域找到一份高薪的编程工作，Python现在是一个不错的选择。而且，如果你在招聘，有越来越多经验丰富的Python开发人员。
- en: But *why* is it popular? Programming languages don’t exactly exude charisma.
    What are some underlying reasons?
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 但是*为什么*它如此流行？编程语言并不是非常有吸引力。有哪些潜在原因呢？
- en: Python is a good general-purpose, high-level language. Its design makes it very
    *readable*, which is more important than it sounds. Every computer program is
    written only once, but read and revised many times, often by many people. Being
    readable also makes it easier to learn and remember; hence, more *writable*. Compared
    with other popular languages, Python has a gentle learning curve that makes you
    productive sooner, yet it has depths that you can explore as you gain expertise.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种优秀的通用高级语言。其设计使得它非常*可读*，这比听起来更重要。每个计算机程序只写一次，但要被多次阅读和修订，通常由多人完成。可读性高使得它更容易学习和记忆；因此，更*可写*。与其他流行的语言相比，Python具有渐进的学习曲线，使您更快进入生产状态，但它又有深度，您可以随着经验的积累探索。
- en: Python’s relative terseness makes it possible for you to write programs that
    are smaller than their equivalents in a static language. Studies have shown that
    programmers tend to produce roughly the same number of lines of code per day—regardless
    of the language—so, halving the lines of code doubles your productivity, just
    like that. Python is the not-so-secret weapon of many companies that think this
    is important.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Python相对简洁的语法使你能够写出比静态语言中等价程序更小的程序。研究表明，无论使用何种语言，程序员每天产生的代码行数大致相同，因此，减半代码行数就会使你的生产力翻倍，就这么简单。Python是许多公司的“不那么秘密武器”，这些公司认为这很重要。
- en: And of course, Python is free, as in beer (price) and speech (liberty). Write
    anything you want with Python, and use it anywhere, freely. No one can read your
    Python program and say, “That’s a nice little program you have there. It would
    be a shame if something happened to it.”
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Python是免费的，无论是像啤酒（价格）还是言论（自由）。用Python写任何你想要的东西，在任何地方都可以自由使用。没有人能读懂你的Python程序然后说，“你写的这个小程序不错啊，要是出了什么问题就太可惜了。”
- en: Python runs almost everywhere and has “batteries included”—a metric boatload
    of useful software in its standard library. This book presents many examples of
    the standard library and useful third-party Python code.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Python几乎可以在任何地方运行，并且“电池已包括”——其标准库中包含大量有用的软件。本书介绍了许多标准库和有用的第三方Python代码示例。
- en: 'But, maybe the best reason to use Python is an unexpected one: people generally
    *enjoy* programming with it rather than seeing it as a necessary evil to get stuff
    done. It doesn’t get in the way. A familiar quote is that it “fits your brain.”
    Often, developers will say that they miss some Python design when they need to
    work in another language. And that separates Python from most of its peers.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，也许使用Python的最好理由是一个意外的理由：人们通常*享受*使用它进行编程，而不是把它看作是必要的恶来完成工作。它不会妨碍你。一个常见的说法是它“符合你的思维方式”。通常，开发人员会说，在需要使用其他语言时，他们会错过一些Python的设计。这将Python与其大多数同行区分开来。
- en: Why Not Python?
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择Python？
- en: Python isn’t the best language for every situation.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Python并不是适合每种情况的最佳语言。
- en: It is not installed everywhere by default. [Appendix B](app02.html#app_install)
    shows you how to install Python if you don’t already have it on your computer.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Python并非默认安装在所有地方。[附录B](app02.html#app_install)向您展示如何在计算机上安装Python（如果您尚未安装）。
- en: It’s fast enough for most applications, but it might not be fast enough for
    some of the more demanding ones. If your program spends most of its time calculating
    things (the technical term is *CPU-bound*), a program written in C, C++, C#, Java,
    Rust, or Go will generally run faster than its Python equivalent. But not always!
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数应用来说，Python的速度已经足够快，但对于一些要求更高的应用来说可能还不够快。如果你的程序大部分时间都在计算东西（技术术语是*CPU-bound*），那么用C、C++、C#、Java、Rust或Go写的程序通常会比Python等效程序运行得更快。但并非总是如此！
- en: 'Here are some solutions:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些解决方案：
- en: Sometimes a better *algorithm* (a stepwise solution) in Python beats an inefficient
    one in C. The greater speed of development in Python gives you more time to experiment
    with alternatives.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时在Python中，一个更好的*算法*（逐步解决方案）胜过C中的一个低效算法。Python更快的开发速度让你有更多时间尝试不同的解决方案。
- en: In many applications (notably, the web), a program twiddles its gossamer thumbs
    while awaiting a response from some server across a network. The CPU (central
    processing unit, the computer’s *chip* that does all the calculating) is barely
    involved; consequently, end-to-end times between static and dynamic programs will
    be close.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在许多应用程序中（特别是Web应用程序），程序在等待来自网络上某个服务器的响应时会无所事事。CPU（中央处理单元，计算机的*芯片*，负责所有计算）几乎没有参与；因此，静态和动态程序的端到端时间会非常接近。
- en: The standard Python interpreter is written in C and can be extended with C code.
    I discuss this a little in [Chapter 19](ch19.html#ch_pythonista).
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准Python解释器是用C编写的，可以通过C代码进行扩展。我在[第19章](ch19.html#ch_pythonista)中稍作讨论。
- en: Python interpreters are becoming faster. Java was terribly slow in its infancy,
    and a lot of research and money went into speeding it up. Python is not owned
    by a corporation, so its enhancements have been more gradual. In [“PyPy”](ch19.html#pypy),
    I talk about the *PyPy* project and its implications.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python解释器变得越来越快。Java在早期非常慢，进行了大量的研究和资金投入来加快速度。Python不归任何公司所有，因此其改进更为渐进。在[“PyPy”](ch19.html#pypy)中，我谈到了*PyPy*项目及其影响。
- en: You might have an extremely demanding application, and no matter what you do,
    Python doesn’t meet your needs. The usual alternatives are C, C++, and Java. [Go](http://golang.org)
    (which feels like Python but performs like C) or Rust could also be worth a look.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能有一个非常苛刻的应用程序，无论你做什么，Python 都无法满足你的需求。通常的替代方案是 C、C++ 和 Java。[Go](http://golang.org)（感觉像
    Python，但性能像 C）或 Rust 也值得一试。
- en: Python 2 Versus Python 3
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 2 与 Python 3
- en: 'One medium-sized complication is that there are two versions of Python out
    there. Python 2 has been around forever and is preinstalled on Linux and Apple
    computers. It has been an excellent language, but nothing’s perfect. In computer
    languages, as in many other areas, some mistakes are cosmetic and easy to fix,
    whereas others are hard. Hard fixes are *incompatible*: new programs written with
    them will not work on the old Python system, and old programs written before the
    fix will not work on the new system.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 一个中等大小的复杂性是 Python 有两个版本。Python 2 已经存在很长时间，预装在 Linux 和 Apple 计算机上。它是一种优秀的语言，但没有十全十美。在计算机语言中，像许多其他领域一样，有些错误是表面的，容易修复，而其他则很难。难以修复的问题是*不兼容*的：用这些问题编写的新程序将无法在旧的
    Python 系统上工作，而在修复之前编写的旧程序将无法在新系统上工作。
- en: Python’s creator ([Guido van Rossum](https://www.python.org/~guido)) and others
    decided to bundle the hard fixes together, and introduced them as Python 3 in
    2008. Python 2 is the past, and Python 3 is the future. The final version of Python
    2 is 2.7, and it will be around for while, but it’s the end of the line; there
    will be no Python 2.8. The end of Python 2 language support is in January of 2020.
    Security and other fixes will no longer be made, and many prominent Python packages
    will [drop support](https://python3statement.org) for Python 2 by then. Operating
    systems will soon either drop Python 2 or make 3 their new default. Conversion
    of popular Python software to Python 3 had been gradual, but we’re now well past
    the tipping point. All new development will be in Python 3.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的创始人（[Guido van Rossum](https://www.python.org/~guido)）和其他人决定将难以修复的问题一起打包，并在
    2008 年作为 Python 3 引入。Python 2 是过去，Python 3 是未来。Python 2 的最终版本是 2.7，它将在一段时间内存在，但这是终点；不会有
    Python 2.8。Python 2 的语言支持终止日期是 2020 年 1 月。安全和其他修复将不再进行，许多知名的 Python 软件包将在那时放弃对
    Python 2 的支持。操作系统很快将放弃 Python 2 或将 Python 3 设为默认版本。流行的 Python 软件向 Python 3 的转换是逐步进行的，但现在我们已经远远超过了临界点。所有新的开发将使用
    Python 3。
- en: This book is about Python 3. It looks almost identical to Python 2. The most
    obvious change is that `print` is a function in Python 3, so you need to call
    it with parentheses surrounding its arguments. The most important change is the
    handling of *Unicode* characters, which is covered in [Chapter 12](ch12.html#ch_munging).
    I point out other significant differences as they come up.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 本书关注的是 Python 3。它几乎与 Python 2 相同。最明显的变化是在 Python 3 中`print`是一个函数，因此你需要用括号将其参数括起来。最重要的变化是对*Unicode*字符的处理，这在[第
    12 章](ch12.html#ch_munging)中有详细介绍。我会在其他重要的不同点出现时指出它们。
- en: Installing Python
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Python
- en: Rather than cluttering this chapter, you can find the details on how to install
    Python 3 in [Appendix B](app02.html#app_install). If you don’t have Python 3,
    or aren’t sure, go there and see what you need to do for your computer. Yes, this
    is a pain in the wazoo (specifically, the right-anterior wazoo), but you’ll need
    to do it only once.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 为了不使本章混乱，你可以在[附录 B](app02.html#app_install) 中找到关于如何安装 Python 3 的详细信息。如果你没有 Python
    3，或者不确定，去那里看看你需要为你的计算机做什么。是的，这有点麻烦（具体来说，是右前部的麻烦），但你只需做一次。
- en: Running Python
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 Python
- en: 'After you have installed a working copy of Python 3, you can use it to run
    the Python programs in this book as well as your own Python code. How do you actually
    run a Python program? There are two main ways:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了 Python 3 的工作副本后，你可以用它来运行本书中的 Python 程序以及你自己的 Python 代码。你到底如何运行 Python 程序？主要有两种方式：
- en: Python’s built-in *interactive interpreter* (also called its *shell*) is the
    easy way to experiment with small programs. You type commands line by line and
    see the results immediately. With the tight coupling between typing and seeing,
    you can experiment faster. I’ll use the interactive interpreter to demonstrate
    language features, and you can type the same commands in your own Python environment.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 的内置*交互解释器*（也称为*shell*）是尝试小型程序的简便方法。你逐行输入命令并立即看到结果。由于输入和显示紧密耦合，你可以更快地进行实验。我将使用交互解释器演示语言特性，你也可以在自己的
    Python 环境中输入相同的命令。
- en: For everything else, store your Python programs in text files, normally with
    the *.py* extension, and run them by typing `python` followed by those filenames.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于其他所有内容，将你的Python程序存储在文本文件中，通常使用*.py*扩展名，并通过输入`python`后跟这些文件名来运行它们。
- en: Let’s try both methods now.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在尝试这两种方法。
- en: Using the Interactive Interpreter
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用交互式解释器
- en: Most of the code examples in this book use the built-in interactive interpreter.
    When you type the same commands as you see in the examples and get the same results,
    you’ll know you’re on the right track.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的大多数代码示例使用内置的交互式解释器。当你输入与示例中相同的命令并获得相同的结果时，你就知道你走在正确的道路上了。
- en: 'You start the interpreter by typing just the name of the main Python program
    on your computer: it should be `python`, `python3`, or something similar. For
    the rest of this book, we assume it’s called `python`; if yours has a different
    name, type that wherever you see `python` in a code example.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在计算机上输入主Python程序的名称来启动解释器：它应该是`python`、`python3`或类似的名称。在本书的其余部分，我们假设它称为`python`；如果你的命名不同，请在代码示例中看到`python`时输入那个名称。
- en: 'The interactive interpreter works almost exactly the same as Python works on
    files, with one exception: when you type something that has a value, the interactive
    interpreter prints its value for you automatically. This isn’t a part of the Python
    language, just a feature of the interpreter to save you from typing `print()`
    all the time. For example, if you start Python and type the number `27` in the
    interpreter, it will be echoed to your terminal (if you have the line `27` in
    a file, Python won’t get upset, but you won’t see anything print when you run
    the program):'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 交互式解释器几乎与Python文件的工作方式完全相同，只有一个例外：当你输入有值的东西时，交互式解释器会自动为你打印其值。这不是Python语言的一部分，只是解释器的一个特性，可以帮助你省去每次都输入`print()`的麻烦。例如，如果你在解释器中输入数字`27`，它将被回显到你的终端（如果你在文件中有一行`27`，Python不会感到沮丧，但当你运行程序时不会看到任何打印输出）：
- en: '[PRE22]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-174
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In the preceding example, `$` is a sample system *prompt* for you to type a
    command like `python` in the terminal window. We use it for the code examples
    in this book, although your prompt might be different.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，`$`是一个样本系统*提示符*，用于在终端窗口中输入类似`python`的命令。我们在本书的代码示例中使用它，尽管你的提示符可能不同。
- en: 'By the way, `print()` also works within the interpreter whenever you want to
    print something:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，在解释器中随时使用`print()`也可以打印输出：
- en: '[PRE23]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If you tried these examples with the interactive interpreter and saw the same
    results, you just ran some real (though tiny) Python code. In the next few chapters,
    you’ll graduate from one-liners to longer Python programs.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在交互式解释器中尝试了这些示例，并看到了相同的结果，那么你刚刚运行了一些真实（虽然很小）的Python代码。在接下来的几章中，你将从一行代码逐步过渡到更长的Python程序。
- en: Using Python Files
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Python文件
- en: 'If you put `27` in a file by itself and run it through Python, it will run,
    but it won’t print anything. In normal noninteractive Python programs, you need
    to call the `print` function to print things:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将`27`单独放在一个文件中并通过Python运行它，它会运行，但不会打印任何东西。在正常的非交互式Python程序中，你需要调用`print`函数来打印输出：
- en: '[PRE24]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let’s make a Python program file and run it:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个Python程序文件并运行它：
- en: Open your text editor.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的文本编辑器。
- en: Type the line `print(27)`, as it appears here.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`print(27)`这一行，就像这里显示的一样。
- en: Save this to a file called *test.py*. Make sure you save it as plain text rather
    than a “rich” format such as RTF or Word. You don’t need to use the *.py* suffix
    for your Python program files, but it does help you remember what they are.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此保存为名为*test.py*的文件。确保将其保存为纯文本而不是RTF或Word等“丰富”格式。你不需要为Python程序文件使用*.py*后缀，但这有助于你记住它们的类型。
- en: If you’re using a GUI—that’s almost everyone—open a terminal window.^([2](ch01.html#idm45795033687224))
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用的是GUI——几乎所有人都是——打开一个终端窗口。^([2](ch01.html#idm45795033687224))
- en: 'Run your program by typing the following:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入以下内容来运行你的程序：
- en: '[PRE25]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You should see a single line of output:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一行输出：
- en: '[PRE26]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Did that work? If it did, congratulations on running your first standalone Python
    program.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 成功了吗？如果是这样，恭喜你运行了你的第一个独立Python程序。
- en: What’s Next?
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下一步是什么？
- en: You’ll be typing commands to an actual Python system, and they need to follow
    legal Python syntax. Rather than dumping the syntax rules on you all at once,
    we stroll through them over the next few chapters.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 你将向一个真实的Python系统输入命令，它们需要遵循合法的Python语法。与一次性倾泻语法规则不同，我们将在接下来的几章中逐步介绍它们。
- en: The basic way to develop Python programs is by using a plain-text editor and
    a terminal window. I use plain-text displays in this book, sometimes showing interactive
    terminal sessions and sometimes pieces of Python files. You should know that there
    are also many good *integrated development environments* (IDEs) for Python. These
    may feature GUIs with advanced text editing and help displays. You can learn about
    details for some of these in [Chapter 19](ch19.html#ch_pythonista).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 开发 Python 程序的基本方法是使用纯文本编辑器和终端窗口。我在本书中使用纯文本显示，有时显示交互式终端会话，有时显示 Python 文件片段。你应该知道还有许多优秀的
    *集成开发环境*（IDE）适用于 Python。这些可能具有带有高级文本编辑和帮助显示的 GUI。你可以在[第 19 章](ch19.html#ch_pythonista)中了解其中一些的详细信息。
- en: Your Moment of Zen
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的禅意时刻
- en: 'Each computing language has its own style. In the Preface, I mentioned that
    there is often a *Pythonic* way to express yourself. Embedded in Python is a bit
    of free verse that expresses the Python philosophy succinctly (as far as I know,
    Python is the only language to include such an Easter egg). Just type `import
    this` into your interactive interpreter and then press the Enter key whenever
    you need this moment of Zen:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 每种计算机语言都有自己的风格。在前言中，我提到过表达自己的 *Pythonic* 方法通常会有。Python 中嵌入了一点自由诗，简洁地表达了 Python
    的哲学（据我所知，Python 是唯一一个包含这样一个彩蛋的语言）。只需在交互式解释器中键入 `import this`，然后在需要这个禅意时按下回车键：
- en: '[PRE27]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: I’ll bring up examples of these sentiments throughout the book.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我会在整本书中举例说明这些情感。
- en: Coming Up
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 即将发生的事情
- en: The next chapter talks about Python data types and variables. This will prepare
    you for the following chapters, which delve into Python’s data types and code
    structures in detail.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将讨论 Python 的数据类型和变量。这将为接下来的章节做准备，这些章节将详细介绍 Python 的数据类型和代码结构。
- en: Things to Do
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要做的事情
- en: This chapter was an introduction to the Python language—what it does, how it
    looks, and where it fits in the computing world. At the end of each chapter, I
    suggest some mini-projects to help you remember what you just read and prepare
    you for what’s to come.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是 Python 语言的介绍——它的功能、外观以及它在计算世界中的位置。在每章末尾，我建议一些迷你项目，帮助你记住你刚刚阅读的内容，并为即将到来的内容做好准备。
- en: 1.1 If you don’t already have Python 3 installed on your computer, do it now.
    Read [Appendix B](app02.html#app_install) for the details for your computer system.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 1.1 如果你的计算机上还没有安装 Python 3，请立即安装。阅读[附录 B](app02.html#app_install)获取有关你的计算机系统的详细信息。
- en: 1.2 Start the Python 3 interactive interpreter. Again, details are in [Appendix B](app02.html#app_install).
    It should print a few lines about itself and then a single line starting with
    `>>>`. That’s your prompt to type Python commands.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 1.2 启动 Python 3 交互式解释器。同样的详情请参阅[附录 B](app02.html#app_install)。它应该打印几行关于自身的信息，然后是一行以
    `>>>` 开头的单行。这就是你输入 Python 命令的提示。
- en: '1.3 Play with the interpreter a little. Use it like a calculator and type this:
    `8 * 9`. Press the Enter key to see the result. Python should print `72`.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3 与解释器玩一会儿。像使用计算器一样使用它，键入 `8 * 9`。按回车键查看结果。Python 应该打印 `72`。
- en: 1.4 Type the number `47` and press the Enter key. Did it print `47` for you
    on the next line?
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 输入数字 `47`，然后按回车键。下一行是否打印出 `47`？
- en: 1.5 Now, type `print(47)` and press Enter. Did that also print `47` for you
    on the next line?
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 1.5 现在，键入 `print(47)`，然后按 Enter 键。这也在下一行为你打印出 `47` 吗？
- en: ^([1](ch01.html#idm45795040338904-marker)) Usually only found in cookbooks and
    cozy mysteries.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.html#idm45795040338904-marker)) 通常只在食谱书和舒适的推理小说中找到。
- en: ^([2](ch01.html#idm45795033687224-marker)) If you’re not sure what this means,
    see [Appendix B](app02.html#app_install) for details for different operating systems.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch01.html#idm45795033687224-marker)) 如果你不确定这意味着什么，请参阅[附录 B](app02.html#app_install)获取不同操作系统的详细信息。
