["```py\nclass Time:\n  \"\"\"Represents the time of day.\"\"\"\n\ndef print_time(time):\n    s = f'{time.hour:02d}:{time.minute:02d}:{time.second:02d}'\n    print(s) \n```", "```py\nclass Time:\n  \"\"\"Represents the time of day.\"\"\"    \n\n    def print_time(self):\n        s = f'{self.hour:02d}:{self.minute:02d}:{self.second:02d}'\n        print(s) \n```", "```py\ndef make_time(hour, minute, second):\n    time = Time()\n    time.hour = hour\n    time.minute = minute\n    time.second = second\n    return time \n```", "```py\nstart = make_time(9, 40, 0) \n```", "```py\nTime.print_time(start) \n```", "```py\n09:40:00 \n```", "```py\nstart.print_time() \n```", "```py\n09:40:00 \n```", "```py\ndef time_to_int(time):\n    minutes = time.hour * 60 + time.minute\n    seconds = minutes * 60 + time.second\n    return seconds \n```", "```py\n%%add_method_to Time\n\n    def time_to_int(self):\n        minutes = self.hour * 60 + self.minute\n        seconds = minutes * 60 + self.second\n        return seconds \n```", "```py\nstart.time_to_int() \n```", "```py\n34800 \n```", "```py\ndef int_to_time(seconds):\n    minute, second = divmod(seconds, 60)\n    hour, minute = divmod(minute, 60)\n    return make_time(hour, minute, second) \n```", "```py\n%%add_method_to Time\n\n    def int_to_time(seconds):\n        minute, second = divmod(seconds, 60)\n        hour, minute = divmod(minute, 60)\n        return make_time(hour, minute, second) \n```", "```py\nstart = Time.int_to_time(34800) \n```", "```py\nstart.print_time() \n```", "```py\n09:40:00 \n```", "```py\ndef add_time(time, hours, minutes, seconds):\n    duration = make_time(hours, minutes, seconds)\n    seconds = time_to_int(time) + time_to_int(duration)\n    return int_to_time(seconds) \n```", "```py\n%%add_method_to Time\n\n    def add_time(self, hours, minutes, seconds):\n        duration = make_time(hours, minutes, seconds)\n        seconds = time_to_int(self) + time_to_int(duration)\n        return Time.int_to_time(seconds) \n```", "```py\nend = start.add_time(1, 32, 0)\nprint_time(end) \n```", "```py\n11:12:00 \n```", "```py\ndef is_after(t1, t2):\n    return time_to_int(t1) > time_to_int(t2) \n```", "```py\n%%add_method_to Time\n\n    def is_after(self, other):\n        return self.time_to_int() > other.time_to_int() \n```", "```py\nend.is_after(start) \n```", "```py\nTrue \n```", "```py\n%%add_method_to Time\n\n    def __str__(self):\n        s = f'{self.hour:02d}:{self.minute:02d}:{self.second:02d}'\n        return s \n```", "```py\nend.__str__() \n```", "```py\n'11:12:00' \n```", "```py\nstr(end) \n```", "```py\n'11:12:00' \n```", "```py\nprint(end) \n```", "```py\n11:12:00 \n```", "```py\n%%add_method_to Time\n\n    def __init__(self, hour=0, minute=0, second=0):\n        self.hour = hour\n        self.minute = minute\n        self.second = second \n```", "```py\ntime = Time(9, 40, 0)\nprint(time) \n```", "```py\n09:40:00 \n```", "```py\ntime = Time()\nprint(time) \n```", "```py\n00:00:00 \n```", "```py\ntime = Time(9)\nprint(time) \n```", "```py\n09:00:00 \n```", "```py\ntime = Time(9, 45)\nprint(time) \n```", "```py\n09:45:00 \n```", "```py\n%%add_method_to Time\n\n    def __add__(self, other):\n        seconds = self.time_to_int() + other.time_to_int()\n        return Time.int_to_time(seconds) \n```", "```py\nduration = Time(1, 32)\nend = start + duration\nprint(end) \n```", "```py\n11:12:00 \n```", "```py\n%%add_method_to Time\n\n    def is_valid(self):\n        if self.hour < 0 or self.minute < 0 or self.second < 0:\n            return False\n        if self.minute >= 60 or self.second >= 60:\n            return False\n        if not isinstance(self.hour, int):\n            return False\n        if not isinstance(self.minute, int):\n            return False\n        return True \n```", "```py\n%%add_method_to Time\n\n    def is_after(self, other):\n        assert self.is_valid(), 'self is not a valid Time'\n        assert other.is_valid(), 'self is not a valid Time'\n        return self.time_to_int() > other.time_to_int() \n```", "```py\nduration = Time(minute=132)\nprint(duration) \n```", "```py\n00:132:00 \n```", "```py\nstart.is_after(duration) \n```", "```py\nAssertionError: self is not a valid Time \n```", "```py\n# This cell tells Jupyter to provide detailed debugging information\n# when a runtime error occurs. Run it before working on the exercises.\n\n%xmode Verbose \n```", "```py\ndef subtract_time(t1, t2):\n    return time_to_int(t1) - time_to_int(t2) \n```"]