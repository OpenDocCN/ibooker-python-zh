- en: Part III. Extensible Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Robust code is maintainable code. In order to be maintainable, code must be
    easy to read, easy to check for errors, and easy to change. Parts [I](part0004.html#part_1)
    and [II](part0011.html#part_2) of this book focused on readability and error detection,
    but not necessarily how to extend or modify existing code. Type annotations and
    typecheckers provide confidence to maintainers when interacting with individual
    types, but what about larger changes in a codebase, such as introducing new workflows
    or switching out a key component?
  prefs: []
  type: TYPE_NORMAL
- en: '[Part III](part0019.html#part_3) examines larger changes and shows you how
    to enable future developers to make them. You’ll learn about extensibility and
    composability, both core principles that improve robustness. You’ll learn how
    to manage dependencies, to make sure that simple changes don’t create a ripple
    effect of bugs and errors. You’ll then apply these concepts to architectural models,
    such as plug-in-based systems, reactive programming, and task-oriented programs.'
  prefs: []
  type: TYPE_NORMAL
