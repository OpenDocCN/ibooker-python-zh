["```py\nt = 'l', 'u', 'p', 'i', 'n'\ntype(t) \n```", "```py\ntuple \n```", "```py\nt = ('l', 'u', 'p', 'i', 'n')\ntype(t) \n```", "```py\ntuple \n```", "```py\nt1 = 'p',\ntype(t1) \n```", "```py\ntuple \n```", "```py\nt2 = ('p')\ntype(t2) \n```", "```py\nstr \n```", "```py\nt = tuple()\nt \n```", "```py\n() \n```", "```py\nt = tuple('lupin')\nt \n```", "```py\n('l', 'u', 'p', 'i', 'n') \n```", "```py\nt[0] \n```", "```py\n'l' \n```", "```py\nt[1:3] \n```", "```py\n('u', 'p') \n```", "```py\ntuple('lup') + ('i', 'n') \n```", "```py\n('l', 'u', 'p', 'i', 'n') \n```", "```py\ntuple('spam') * 2 \n```", "```py\n('s', 'p', 'a', 'm', 's', 'p', 'a', 'm') \n```", "```py\nsorted(t) \n```", "```py\n['i', 'l', 'n', 'p', 'u'] \n```", "```py\nreversed(t) \n```", "```py\n<reversed at 0x7f23a9a32b60> \n```", "```py\ntuple(reversed(t)) \n```", "```py\n('n', 'i', 'p', 'u', 'l') \n```", "```py\nt[0] = 'L' \n```", "```py\nTypeError: 'tuple' object does not support item assignment \n```", "```py\nt.remove('l') \n```", "```py\nAttributeError: 'tuple' object has no attribute 'remove' \n```", "```py\nd = {}\nd[1, 2] = 3\nd[3, 4] = 7 \n```", "```py\nd[1, 2] \n```", "```py\n3 \n```", "```py\nt = (3, 4)\nd[t] \n```", "```py\n7 \n```", "```py\nt = tuple('abc')\nd = {'key': t}\nd \n```", "```py\n{'key': ('a', 'b', 'c')} \n```", "```py\na, b = 1, 2 \n```", "```py\na, b \n```", "```py\n(1, 2) \n```", "```py\nemail = 'monty@python.org'\nusername, domain = email.split('@') \n```", "```py\nusername, domain \n```", "```py\n('monty', 'python.org') \n```", "```py\na, b = 1, 2, 3 \n```", "```py\nValueError: too many values to unpack (expected 2) \n```", "```py\ntemp = a\na = b\nb = temp \n```", "```py\na, b = b, a \n```", "```py\nd = {'one': 1, 'two': 2}\n\nfor item in d.items():\n    key, value = item\n    print(key, '->', value) \n```", "```py\none -> 1\ntwo -> 2 \n```", "```py\nfor key, value in d.items():\n    print(key, '->', value) \n```", "```py\none -> 1\ntwo -> 2 \n```", "```py\ndivmod(7, 3) \n```", "```py\n(2, 1) \n```", "```py\nquotient, remainder = divmod(7, 3)\nquotient \n```", "```py\n2 \n```", "```py\nremainder \n```", "```py\n1 \n```", "```py\ndef min_max(t):\n    return min(t), max(t) \n```", "```py\nmin_max([2, 4, 1, 3]) \n```", "```py\n(1, 4) \n```", "```py\nlow, high = min_max([2, 4, 1, 3])\nlow, high \n```", "```py\n(1, 4) \n```", "```py\ndef mean(*args):\n    return sum(args) / len(args) \n```", "```py\nmean(1, 2, 3) \n```", "```py\n2.0 \n```", "```py\nt = (7, 3)\ndivmod(t) \n```", "```py\nTypeError: divmod expected 2 arguments, got 1 \n```", "```py\ndivmod(*t) \n```", "```py\n(2, 1) \n```", "```py\ndef trimmed_mean(*args):\n    low, high = min_max(args)\n    trimmed = list(args)\n    trimmed.remove(low)\n    trimmed.remove(high)\n    return mean(*trimmed) \n```", "```py\nmean(1, 2, 3, 10) \n```", "```py\n4.0 \n```", "```py\ntrimmed_mean(1, 2, 3, 10) \n```", "```py\n2.5 \n```", "```py\nscores1 = [1, 2, 4, 5, 1, 5, 2]\nscores2 = [5, 5, 2, 2, 5, 2, 3] \n```", "```py\nzip(scores1, scores2) \n```", "```py\n<zip at 0x7f23a9a7bdc0> \n```", "```py\nfor pair in zip(scores1, scores2):\n     print(pair) \n```", "```py\n(1, 5)\n(2, 5)\n(4, 2)\n(5, 2)\n(1, 5)\n(5, 2)\n(2, 3) \n```", "```py\nwins = 0\nfor team1, team2 in zip(scores1, scores2):\n    if team1 > team2:\n        wins += 1\n\nwins \n```", "```py\n3 \n```", "```py\nt = list(zip(scores1, scores2))\nt \n```", "```py\n[(1, 5), (2, 5), (4, 2), (5, 2), (1, 5), (5, 2), (2, 3)] \n```", "```py\nt[-1] \n```", "```py\n(2, 3) \n```", "```py\nletters = 'abcdefghijklmnopqrstuvwxyz'\nnumbers = range(len(letters))\nletter_map = dict(zip(letters, numbers)) \n```", "```py\nletter_map['a'], letter_map['z'] \n```", "```py\n(0, 25) \n```", "```py\nenumerate('abc') \n```", "```py\n<enumerate at 0x7f23a808afc0> \n```", "```py\nfor index, element in enumerate('abc'):\n    print(index, element) \n```", "```py\n0 a\n1 b\n2 c \n```", "```py\n(0, 1, 2) < (0, 3, 4) \n```", "```py\nTrue \n```", "```py\n(0, 1, 2000000) < (0, 3, 4) \n```", "```py\nTrue \n```", "```py\ndef value_counts(string):\n    counter = {}\n    for letter in string:\n        if letter not in counter:\n            counter[letter] = 1\n        else:\n            counter[letter] += 1\n    return counter \n```", "```py\ncounter = value_counts('banana')\ncounter \n```", "```py\n{'b': 1, 'a': 3, 'n': 2} \n```", "```py\nitems = counter.items()\nitems \n```", "```py\ndict_items([('b', 1), ('a', 3), ('n', 2)]) \n```", "```py\nsorted(items) \n```", "```py\n[('a', 3), ('b', 1), ('n', 2)] \n```", "```py\ndef second_element(t):\n    return t[1] \n```", "```py\nsorted_items = sorted(items, key=second_element)\nsorted_items \n```", "```py\n[('b', 1), ('n', 2), ('a', 3)] \n```", "```py\nsorted_items[-1] \n```", "```py\n('a', 3) \n```", "```py\nmax(items, key=second_element) \n```", "```py\n('a', 3) \n```", "```py\nd =  value_counts('parrot')\nd \n```", "```py\n{'p': 1, 'a': 1, 'r': 2, 'o': 1, 't': 1} \n```", "```py\ndef invert_dict(d):\n    new = {}\n    for key, value in d.items():\n        if value not in new:\n            new[value] = [key]\n        else:\n            new[value].append(key)\n    return new \n```", "```py\ninvert_dict(d) \n```", "```py\n{1: ['p', 'a', 'o', 't'], 2: ['r']} \n```", "```py\nfrom structshape import structshape \n```", "```py\nt = [1, 2, 3]\nstructshape(t) \n```", "```py\n'list of 3 int' \n```", "```py\nt2 = [[1,2], [3,4], [5,6]]\nstructshape(t2) \n```", "```py\n'list of 3 list of 2 int' \n```", "```py\nt3 = [1, 2, 3, 4.0, '5', '6', [7], [8], 9]\nstructshape(t3) \n```", "```py\n'list of (3 int, float, 2 str, 2 list of int, int)' \n```", "```py\ns = 'abc'\nlt = list(zip(t, s))\nstructshape(lt) \n```", "```py\n'list of 3 tuple of (int, str)' \n```", "```py\nd = dict(lt) \nstructshape(d) \n```", "```py\n'dict of 3 int->str' \n```", "```py\n# This cell tells Jupyter to provide detailed debugging information\n# when a runtime error occurs. Run it before working on the exercises.\n\n%xmode Verbose \n```", "```py\nException reporting mode: Verbose \n```", "```py\nlist0 = [1, 2, 3]\nlist1 = [4, 5]\n\nt = (list0, list1)\nt \n```", "```py\n([1, 2, 3], [4, 5]) \n```", "```py\nd = {t: 'this tuple contains two lists'} \n```", "```py\n---------------------------------------------------------------------------\nTypeError  Traceback (most recent call last)\nCell In[77], line 1\n----> 1 d = {t: 'this tuple contains two lists'}\n        d = {1: 'a', 2: 'b', 3: 'c'}\n        t = ([1, 2, 3], [4, 5, 6])\n\nTypeError: unhashable type: 'list' \n```", "```py\nletters = 'abcdefghijklmnopqrstuvwxyz'\nnumbers = range(len(letters))\nletter_map = dict(zip(letters, numbers)) \n```", "```py\nletter_map['a'] \n```", "```py\n0 \n```", "```py\nletters[1] \n```", "```py\n'b' \n```", "```py\n['deltas', 'desalt', 'lasted', 'salted', 'slated', 'staled']\n['retainers', 'ternaries']\n['generating', 'greatening']\n['resmelts', 'smelters', 'termless'] \n```"]