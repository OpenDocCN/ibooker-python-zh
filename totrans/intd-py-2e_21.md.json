["```py\n$ pip install flask\n```", "```py\n$ pip install flask==0.9.0\n```", "```py\n$ pip install 'flaskâ‰¥0.9.0'\n```", "```py\n$ pip -r requirements.txt\n```", "```py\nflask==0.9.0\ndjango\npsycopg2\n```", "```py\n$ pip install pipenv\n```", "```py\n$ ipython\nPython 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 16:39:00)\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.3.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]:\n\n```", "```py\nIn [1]: print(\"Hello? World?\")\nHello? World?\n\nIn [2]:\n```", "```py\nIn [4]: answer = 42\n\nIn [5]: answer?\n```", "```py\nType:       int\nString Form:42\nDocstring:\nint(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10\\.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4\n```", "```py\nIn [6]: fee = 1\n\nIn [7]: fie = 2\n\nIn [8]: fo = 3\n\nIn [9]: fum = 4\n\nIn [10]: f*tab*\n%%file    fie       finally   fo        format    frozenset\nfee       filter    float     for       from      fum\n```", "```py\nIn [11]: fee\nOut[11]: 1\n```", "```py\n>>> # I'm going to assign 10 to the variable \"num\" here:\n... num = 10\n>>> # I hope that worked\n... print(num)\n10\n>>> # Whew.\n```", "```py\ndef ftoc(f_temp):\n    \"Convert Fahrenheit temperature <f_temp> to Celsius and return it.\"\n    f_boil_temp = 212.0\n    f_freeze_temp = 32.0\n    c_boil_temp = 100.0\n    c_freeze_temp = 0.0\n    f_range = f_boil_temp - f_freeze_temp\n    c_range = c_boil_temp - c_freeze_temp\n    f_c_ratio = c_range / f_range\n    c_temp = (f_temp - f_freeze_temp) * f_c_ratio + c_freeze_temp\n    return c_temp\n\nif __name__ == '__main__':\n    for f_temp in [-40.0, 0.0, 32.0, 100.0, 212.0]:\n        c_temp = ftoc(f_temp)\n        print('%f F => %f C' % (f_temp, c_temp))\n```", "```py\n$ python ftoc1.py\n```", "```py\n-40.000000 F => -40.000000 C\n0.000000 F => -17.777778 C\n32.000000 F => 0.000000 C\n100.000000 F => 37.777778 C\n212.000000 F => 100.000000 C\n```", "```py\nF_BOIL_TEMP = 212.0\nF_FREEZE_TEMP = 32.0\nC_BOIL_TEMP = 100.0\nC_FREEZE_TEMP = 0.0\nF_RANGE = F_BOIL_TEMP - F_FREEZE_TEMP\nC_RANGE = C_BOIL_TEMP - C_FREEZE_TEMP\nF_C_RATIO = C_RANGE / F_RANGE\n\ndef ftoc(f_temp):\n    \"Convert Fahrenheit temperature <f_temp> to Celsius and return it.\"\n    c_temp = (f_temp - F_FREEZE_TEMP) * F_C_RATIO + C_FREEZE_TEMP\n    return c_temp\n\nif __name__ == '__main__':\n    for f_temp in [-40.0, 0.0, 32.0, 100.0, 212.0]:\n        c_temp = ftoc(f_temp)\n        print('%f F => %f C' % (f_temp, c_temp))\n```", "```py\ndef num_to_str(num: int) -> str:\n    return str(num)\n```", "```py\n$ pip install pylint\n$ pip install pyflakes\n```", "```py\na = 1\nb = 2\nprint(a)\nprint(b)\nprint(c)\n```", "```py\n$ pylint style1.py\nNo config file found, using default configuration\n************* Module style1\nC:  1,0: Missing docstring\nC:  1,0: Invalid name \"a\" for type constant\n  (should match (([A-Z_][A-Z0-9_]*)|(__.*__))$)\nC:  2,0: Invalid name \"b\" for type constant\n  (should match (([A-Z_][A-Z0-9_]*)|(__.*__))$)\nE:  5,6: Undefined variable 'c'\n```", "```py\nYour code has been rated at -3.33/10\n```", "```py\na = 1\nb = 2\nc = 3\nprint(a)\nprint(b)\nprint(c)\n```", "```py\n$ pylint style2.py\n```", "```py\nNo config file found, using default configuration\n************* Module style2\nC:  1,0: Missing docstring\nC:  1,0: Invalid name \"a\" for type constant\n  (should match (([A-Z_][A-Z0-9_]*)|(__.*__))$)\nC:  2,0: Invalid name \"b\" for type constant\n  (should match (([A-Z_][A-Z0-9_]*)|(__.*__))$)\nC:  3,0: Invalid name \"c\" for type constant\n  (should match (([A-Z_][A-Z0-9_]*)|(__.*__))$)\n```", "```py\nYour code has been rated at 4.29/10\n```", "```py\n\"Module docstring goes here\"\n\ndef func():\n    \"Function docstring goes here. Hi, Mom!\"\n    first = 1\n    second = 2\n    third = 3\n    print(first)\n    print(second)\n    print(third)\n\nfunc()\n```", "```py\n$ pylint style3.py\nNo config file found, using default configuration\n```", "```py\nYour code has been rated at 10.00/10\n```", "```py\n$ pip install pep8\n```", "```py\n$ pep8 style3.py\nstyle3.py:3:1: E302 expected 2 blank lines, found 1\n```", "```py\ndef just_do_it(text):\n    return text.capitalize()\n```", "```py\nimport unittest\nimport cap\n\nclass TestCap(unittest.TestCase):\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def test_one_word(self):\n        text = 'duck'\n        result = cap.just_do_it(text)\n        self.assertEqual(result, 'Duck')\n\n    def test_multiple_words(self):\n        text = 'a veritable flock of ducks'\n        result = cap.just_do_it(text)\n        self.assertEqual(result, 'A Veritable Flock Of Ducks')\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\n$ python test_cap.py\n```", "```py\n F.\n ======================================================================\n FAIL: test_multiple_words (__main__.TestCap)\n ----------------------------------------------------------------------\n Traceback (most recent call last):\n   File \"test_cap.py\", line 20, in test_multiple_words\n  self.assertEqual(result, 'A Veritable Flock Of Ducks')\n AssertionError: 'A veritable flock of ducks' != 'A Veritable Flock Of Ducks'\n - A veritable flock of ducks\n ?   ^         ^     ^  ^\n + A Veritable Flock Of Ducks\n ?   ^         ^     ^  ^\n\n ----------------------------------------------------------------------\n Ran 2 tests in 0.001s\n\n FAILED (failures=1)\n```", "```py\ndef just_do_it(text):\n    return text.title()\n```", "```py\n$ python test_cap.py\n```", "```py\n ..\n ----------------------------------------------------------------------\n Ran 2 tests in 0.000s\n\n OK\n```", "```py\n    def test_words_with_apostrophes(self):\n        text = \"I'm fresh out of ideas\"\n        result = cap.just_do_it(text)\n        self.assertEqual(result, \"I'm Fresh Out Of Ideas\")\n```", "```py\n$ python test_cap.py\n```", "```py\n ..F\n ======================================================================\n FAIL: test_words_with_apostrophes (__main__.TestCap)\n ----------------------------------------------------------------------\n Traceback (most recent call last):\n   File \"test_cap.py\", line 25, in test_words_with_apostrophes\n     self.assertEqual(result, \"I'm Fresh Out Of Ideas\")\n AssertionError: \"I'M Fresh Out Of Ideas\" != \"I'm Fresh Out Of Ideas\"\n - I'M Fresh Out Of Ideas\n ?   ^\n + I'm Fresh Out Of Ideas\n ?   ^\n\n ----------------------------------------------------------------------\n Ran 3 tests in 0.001s\n\n FAILED (failures=1)\n```", "```py\ndef just_do_it(text):\n    from string import capwords\n    return capwords(text)\n```", "```py\n$ python test_cap.py\n```", "```py\n...\n----------------------------------------------------------------------\nRan 3 tests in 0.004s\n\nOK\n```", "```py\n    def test_words_with_quotes(self):\n        text = \"\\\"You're despicable,\\\" said Daffy Duck\"\n        result = cap.just_do_it(text)\n        self.assertEqual(result, \"\\\"You're Despicable,\\\" Said Daffy Duck\")\n```", "```py\n$ python test_cap.py\n```", "```py\n...F\n======================================================================\nFAIL: test_words_with_quotes (__main__.TestCap)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"test_cap.py\", line 30, in test_words_with_quotes\n    self.assertEqual(result, \"\\\"You're\n    Despicable,\\\" Said Daffy Duck\") AssertionError: '\"you\\'re Despicable,\"\n        Said Daffy Duck'\n != '\"You\\'re Despicable,\" Said Daffy Duck' - \"you're Despicable,\"\n        Said Daffy Duck\n?  ^ + \"You're Despicable,\" Said Daffy Duck\n?  ^\n----------------------------------------------------------------------\nRan 4 tests in 0.004s\n\nFAILED (failures=1)\n```", "```py\ndef just_do_it(text):\n    \"\"\"\n >>> just_do_it('duck')\n 'Duck'\n >>> just_do_it('a veritable flock of ducks')\n 'A Veritable Flock Of Ducks'\n >>> just_do_it(\"I'm fresh out of ideas\")\n \"I'm Fresh Out Of Ideas\"\n \"\"\"\n    from string import capwords\n    return capwords(text)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n```", "```py\n$ python cap2.py\n```", "```py\n$ python cap2.py -v\n```", "```py\nTrying:\n    just_do_it('duck')\n    Expecting:\n    'Duck'\nok\nTrying:\n     just_do_it('a veritable flock of ducks')\nExpecting:\n     'A Veritable Flock Of Ducks'\nok\nTrying:\n     just_do_it(\"I'm fresh out of ideas\")\nExpecting:\n     \"I'm Fresh Out Of Ideas\"\nok\n1 items had no tests:\n     __main__\n1 items passed all tests:\n    3 tests in __main__.just_do_it\n3 tests in 2 items.\n3 passed and 0 failed.\nTest passed.\n```", "```py\n$ pip install nose\n```", "```py\nimport cap2\nfrom nose.tools import eq_\n\ndef test_one_word():\n    text = 'duck'\n    result = cap.just_do_it(text)\n    eq_(result, 'Duck')\n\ndef test_multiple_words():\n    text = 'a veritable flock of ducks'\n    result = cap.just_do_it(text)\n    eq_(result, 'A Veritable Flock Of Ducks')\n\ndef test_words_with_apostrophes():\n    text = \"I'm fresh out of ideas\"\n    result = cap.just_do_it(text)\n    eq_(result, \"I'm Fresh Out Of Ideas\")\n\ndef test_words_with_quotes():\n    text = \"\\\"You're despicable,\\\" said Daffy Duck\"\n    result = cap.just_do_it(text)\n    eq_(result, \"\\\"You're Despicable,\\\" Said Daffy Duck\")\n```", "```py\n$ nosetests test_cap_nose.py\n```", "```py\n...F\n======================================================================\nFAIL: test_cap_nose.test_words_with_quotes\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/Users/.../site-packages/nose/case.py\", line 198, in runTest\n    self.test(*self.arg)\n  File \"/Users/.../book/test_cap_nose.py\", line 23, in test_words_with_quotes\n    eq_(result, \"\\\"You're Despicable,\\\" Said Daffy Duck\")\nAssertionError: '\"you\\'re Despicable,\" Said Daffy Duck'      !=\n'\"You\\'re Despicable,\" Said Daffy Duck'\n----------------------------------------------------------------------\nRan 4 tests in 0.005s\n\nFAILED (failures=1)\n```", "```py\n>>> def func(*args, **kwargs):\n...     print(vars())\n...\n>>> func(1, 2, 3)\n{'args': (1, 2, 3), 'kwargs': {}}\n>>> func(['a', 'b', 'argh'])\n{'args': (['a', 'b', 'argh'],), 'kwargs': {}}\n```", "```py\ndef dump(func):\n    \"Print input arguments and output value(s)\"\n    def wrapped(*args, **kwargs):\n        print(\"Function name:\", func.__name__)\n        print(\"Input arguments:\", ' '.join(map(str, args)))\n        print(\"Input keyword arguments:\", kwargs.items())\n        output = func(*args, **kwargs)\n        print(\"Output:\", output)\n        return output\n    return wrapped\n```", "```py\nfrom dump import dump\n\n@dump\ndef double(*args, **kwargs):\n    \"Double every argument\"\n    output_list = [ 2 * arg for arg in args ]\n    output_dict =  { k:2*v for k,v in kwargs.items() }\n    return output_list, output_dict\n\nif __name__ == '__main__':\n    output = double(3, 5, first=100, next=98.6, last=-40)\n```", "```py\n$ python test_dump.py\n```", "```py\nFunction name: double\nInput arguments: 3 5\nInput keyword arguments: dict_items([('first', 100), ('next', 98.6),\n    ('last', -40)])\nOutput: ([6, 10], {'first': 200, 'next': 197.2, 'last': -80})\n```", "```py\nFrance, Paris\nvenuzuela,caracas\n  LithuaniA,vilnius\n     quit\n```", "```py\nfor each line in the text file:\n    read the line\n    strip leading and trailing spaces\n    if `quit` occurs in the lower-case copy of the line:\n        stop\n    else:\n        split the country and capital by the comma character\n        trim any leading and trailing spaces\n        convert the country and capital to titlecase\n        print the capital, a comma, and the country\n```", "```py\ndef process_cities(filename):\n    with open(filename, 'rt') as file:\n        for line in file:\n            line = line.strip()\n            if 'quit' in line.lower():\n                return\n            country, city = line.split(',')\n            city = city.strip()\n            country = country.strip()\n            print(city.title(), country.title(), sep=',')\n\nif __name__ == '__main__':\n    import sys\n    process_cities(sys.argv[1])\n```", "```py\n$ python capitals.py cities.csv\nParis,France\nCaracas,Venuzuela\nVilnius,Lithuania\n```", "```py\nargentina,buenos aires\nbolivia,la paz\nbrazil,brasilia\nchile,santiago\ncolombia,BogotÃ¡\necuador,quito\nfalkland islands,stanley\nfrench guiana,cayenne\nguyana,georgetown\nparaguay,AsunciÃ³n\nperu,lima\nsuriname,paramaribo\nuruguay,montevideo\nvenezuela,caracas\nquit\n```", "```py\n$ python capitals.py cities2.csv\nBuenos Aires,Argentina\nLa Paz,Bolivia\nBrazilia,Brazil\nSantiago,Chile\nBogotÃ¡,Colombia\n```", "```py\n$ python -m pdb capitals.py cities2.csv\n```", "```py\n> /Users/williamlubanovic/book/capitals.py(1)<module>()\n-> def process_cities(filename):\n(Pdb)\n```", "```py\n(Pdb) c\n```", "```py\nBuenos Aires,Argentina\nLa Paz,Bolivia\nBrazilia,Brazil\nSantiago,Chile\nBogotÃ¡,Colombia\nThe program finished and will be restarted\n> /Users/williamlubanovic/book/capitals.py(1)<module>()\n-> def process_cities(filename):\n```", "```py\n(Pdb) s\n```", "```py\n> /Users/williamlubanovic/book/capitals.py(12)<module>()\n -> if __name__ == '__main__':</pre>\n```", "```py\n(Pdb) s\n```", "```py\n > /Users/williamlubanovic/book/capitals.py(13)<module>()\n -> import sys\n```", "```py\n(Pdb) s\n```", "```py\n > /Users/williamlubanovic/book/capitals.py(14)<module>()\n -> process_cities(sys.argv[1])\n```", "```py\n(Pdb) s\n```", "```py\n --Call--\n > /Users/williamlubanovic/book/capitals.py(1)process_cities()\n -> def process_cities(filename):\n```", "```py\n(Pdb) s\n```", "```py\n > /Users/williamlubanovic/book/capitals.py(2)process_cities()\n -> with open(filename, 'rt') as file:\n```", "```py\n(Pdb) l\n```", "```py\n  1      def process_cities(filename):\n  2  ->     with open(filename, 'rt') as file:\n  3             for line in file:\n  4                 line = line.strip()\n  5                 if 'quit' in line.lower():\n  6                     return\n  7                 country, city = line.split(',')\n  8                 city = city.strip()\n  9                 country = country.strip()\n 10                 print(city.title(), country.title(), sep=',')\n 11\n (Pdb)\n```", "```py\n(Pdb) b 6\n```", "```py\nBreakpoint 1 at /Users/williamlubanovic/book/capitals.py:6\n```", "```py\n(Pdb) c\n```", "```py\n Buenos Aires,Argentina\n La Paz,Bolivia\n Brasilia,Brazil\n Santiago,Chile\n BogotÃ¡,Colombia\n > /Users/williamlubanovic/book/capitals.py(6)process_cities()\n -> return\n```", "```py\n(Pdb) p line\n```", "```py\n'ecuador,quito'\n```", "```py\n(Pdb) b\n```", "```py\nNum Type         Disp Enb   Where\n1   breakpoint   keep yes   at /Users/williamlubanovic/book/capitals.py:6\n    breakpoint already hit 1 time\n```", "```py\n(Pdb) l 1\n```", "```py\n  1      def process_cities(filename):\n  2         with open(filename, 'rt') as file:\n  3             for line in file:\n  4                 line = line.strip()\n  5                 if 'quit' in line.lower():\n  6 B->                 return\n  7                 country, city = line.split(',')\n  8                 city = city.strip()\n  9                 country = country.strip()\n 10                 print(city.title(), country.title(), sep=',')\n 11\n```", "```py\ndef process_cities(filename):\n    with open(filename, 'rt') as file:\n        for line in file:\n            line = line.strip()\n            if 'quit' == line.lower():\n                return\n            country, city = line.split(',')\n            city = city.strip()\n            country = country.strip()\n            print(city.title(), country.title(), sep=',')\n\nif __name__ == '__main__':\n    import sys\n    process_cities(sys.argv[1])\n```", "```py\n$ python capitals2.py cities2.csv\n```", "```py\nBuenos Aires,Argentina\nLa Paz,Bolivia\nBrasilia,Brazil\nSantiago,Chile\nBogotÃ¡,Colombia\nQuito,Ecuador\nStanley,Falkland Islands\nCayenne,French Guiana\nGeorgetown,Guyana\nAsunciÃ³n,Paraguay\nLima,Peru\nParamaribo,Suriname\nMontevideo,Uruguay\nCaracas,Venezuela\n```", "```py\n$ export PYTHONBREAKPOINT='web_pdb.set_trace'\n```", "```py\n>>> import logging\n>>> logging.debug(\"Looks like rain\")\n>>> logging.info(\"And hail\")\n>>> logging.warn(\"Did I hear thunder?\")\nWARNING:root:Did I hear thunder?\n>>> logging.error(\"Was that lightning?\")\nERROR:root:Was that lightning?\n>>> logging.critical(\"Stop fencing and get inside!\")\nCRITICAL:root:Stop fencing and get inside!\n```", "```py\n>>> import logging\n>>> logging.basicConfig(level=logging.DEBUG)\n>>> logging.debug(\"It's raining again\")\nDEBUG:root:It's raining again\n>>> logging.info(\"With hail the size of hailstones\")\nINFO:root:With hail the size of hailstones\n```", "```py\n>>> import logging\n>>> logging.basicConfig(level='DEBUG')\n>>> logger = logging.getLogger('bunyan')\n>>> logger.debug('Timber!')\nDEBUG:bunyan:Timber!\n```", "```py\n>>> import logging\n>>> logging.basicConfig(level='DEBUG', filename='blue_ox.log')\n>>> logger = logging.getLogger('bunyan')\n>>> logger.debug(\"Where's my axe?\")\n>>> logger.warn(\"I need my axe\")\n>>>\n```", "```py\nDEBUG:bunyan:Where's my axe?\nWARNING:bunyan:I need my axe\n```", "```py\nWARNING:root:Message...\n```", "```py\n>>> import logging\n>>> fmt = '%(asctime)s %(levelname)s %(lineno)s %(message)s'\n>>> logging.basicConfig(level='DEBUG', format=fmt)\n>>> logger = logging.getLogger('bunyan')\n>>> logger.error(\"Where's my other plaid shirt?\")\n2014-04-08 23:13:59,899 ERROR 1 Where's my other plaid shirt?\n```", "```py\nfrom time import time\n\nt1 = time()\nnum = 5\nnum *= 2\nprint(time() - t1)\n```", "```py\n$ python time1.py\n2.1457672119140625e-06\n$ python time1.py\n2.1457672119140625e-06\n$ python time1.py\n2.1457672119140625e-06\n$ python time1.py\n1.9073486328125e-06\n$ python time1.py\n3.0994415283203125e-06\n```", "```py\nfrom time import time, sleep\n\nt1 = time()\nsleep(1.0)\nprint(time() - t1)\n```", "```py\n$ python time2.py\n1.000797986984253\n$ python time2.py\n1.0010130405426025\n$ python time2.py\n1.0010390281677246\n```", "```py\nfrom timeit import timeit\nprint(timeit('num = 5; num *= 2', number=1))\n```", "```py\n$ python timeit1.py\n2.5600020308047533e-06\n$ python timeit1.py\n1.9020008039660752e-06\n$ python timeit1.py\n1.7380007193423808e-06\n```", "```py\nfrom timeit import repeat\nprint(repeat('num = 5; num *= 2', number=1, repeat=3))\n```", "```py\n$ python timeit2.py\n[1.691998477326706e-06, 4.070025170221925e-07, 2.4700057110749185e-07]\n```", "```py\n>>> import time\n>>> from timeit import timeit\n>>>\n>>> def snooze():\n...     time.sleep(1)\n...\n>>> seconds = timeit('snooze()', globals=globals(), number=1)\n>>> print(\"%.4f\" % seconds)\n1.0035\n```", "```py\n>>> import time\n>>>\n>>> def snooze():\n...     time.sleep(1)\n...\n>>> def time_decorator(func):\n...     def inner(*args, **kwargs):\n...         t1 = time.time()\n...         result = func(*args, **kwargs)\n...         t2 = time.time()\n...         print(f\"{(t2-t1):.4f}\")\n...         return result\n...     return inner\n...\n>>> @time_decorator\n... def naptime():\n...     snooze()\n...\n>>> naptime()\n1.0015\n```", "```py\n>>> import time\n>>>\n>>> def snooze():\n...     time.sleep(1)\n...\n>>> class TimeContextManager:\n...     def __enter__(self):\n...         self.t1 = time.time()\n...         return self\n...     def __exit__(self, type, value, traceback):\n...         t2 = time.time()\n...         print(f\"{(t2-self.t1):.4f}\")\n...\n>>>\n>>> with TimeContextManager():\n...     snooze()\n...\n1.0019\n```", "```py\nfrom timeit import timeit\n\ndef make_list_1():\n    result = []\n    for value in range(1000):\n        result.append(value)\n    return result\n\ndef make_list_2():\n    result = [value for value in range(1000)]\n    return result\n\nprint('make_list_1 takes', timeit(make_list_1, number=1000), 'seconds')\nprint('make_list_2 takes', timeit(make_list_2, number=1000), 'seconds')\n```", "```py\n$ python time_lists.py\n```", "```py\nmake_list_1 takes 0.14117428699682932 seconds\nmake_list_2 takes 0.06174145900149597 seconds\n```", "```py\n$ pip install numba\n```", "```py\n>>> import math\n>>> from timeit import timeit\n>>> from numba import jit\n>>>\n>>> def hypot(a, b):\n...     return math.sqrt(a**2 + b**2)\n...\n>>> timeit('hypot(5, 6)', globals=globals())\n0.6349189280000189\n>>> timeit('hypot(5, 6)', globals=globals())\n0.6348589239999853\n```", "```py\n>>> @jit\n... def hypot_jit(a, b):\n...     return math.sqrt(a**2 + b**2)\n...\n>>> timeit('hypot_jit(5, 6)', globals=globals())\n0.5396156099999985\n>>> timeit('hypot_jit(5, 6)', globals=globals())\n0.1534771130000081\n```", "```py\n>>> @jit(nopython=True)\n... def hypot_jit_nopy(a, b):\n...     return math.sqrt(a**2 + b**2)\n...\n>>> timeit('hypot_jit_nopy(5, 6)', globals=globals())\n0.18343535700000757\n>>> timeit('hypot_jit_nopy(5, 6)', globals=globals())\n0.15387067300002855\n```", "```py\n$ git clone https://github.com/madscheme/introducing-python\n```", "```py\n$ mkdir newdir\n$ cd newdir\n```", "```py\n$ git init\n```", "```py\nInitialized empty Git repository in /Users/williamlubanovic/newdir/.git/\n```", "```py\nprint('Oops')\n```", "```py\n$ git add test.py\n```", "```py\n$ git status\n```", "```py\nOn branch master\n\nInitial commit\n\nChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n\n    new file:   test.py\n```", "```py\n$ git commit -m \"simple print program\"\n```", "```py\n [master (root-commit) 52d60d7] my first commit\n  1 file changed, 1 insertion(+)\n  create mode 100644 test.py\n```", "```py\n$ git status\n```", "```py\n On branch master\n nothing to commit, working directory clean\n```", "```py\nprint('Ops!')\n```", "```py\n$ git status\n```", "```py\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    modified:   test.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```", "```py\n$ git diff\n```", "```py\ndiff --git a/test.py b/test.py\nindex 76b8c39..62782b2 100644\n--- a/test.py\n+++ b/test.py\n@@ -1 +1 @@\n-print('Oops')\n+print('Ops!')\n```", "```py\n$ git commit -m \"change the print string\"\n```", "```py\nOn branch master\nChanges not staged for commit:\n    modified:   test.py\n\nno changes added to commit\n```", "```py\n$ git add test.py\n```", "```py\n$ git commit -m \"my first change\"\n```", "```py\n [master e1e11ec] my first change\n  1 file changed, 1 insertion(&plus;), 1 deletion(-)\n```", "```py\n$ git log test.py\n```", "```py\n commit e1e11ecf802ae1a78debe6193c552dcd15ca160a\n Author: William Lubanovic <bill@madscheme.com>\n Date:   Tue May 13 23:34:59 2014 -0500\n\n     change the print string\n\n commit 52d60d76594a62299f6fd561b2446c8b1227cfe1\n Author: William Lubanovic <bill@madscheme.com>\n Date:   Tue May 13 23:26:14 2014 -0500\n\n     simple print program\n```"]