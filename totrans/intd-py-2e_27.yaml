- en: 'Appendix C. Something Completely Different: Async'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 C. 完全不同的东西：异步
- en: Our first two appendixes were for beginning programmers, but this one is for
    those who are a bit advanced.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的前两个附录是为初学者编写的，但这个是为那些有些进阶的人准备的。
- en: Like most programming languages, Python has been *synchronous*. It runs through
    code linearly, a line at a time, from top to bottom. When you call a function,
    Python jumps into its code, and the caller waits until the function returns before
    resuming what it was doing.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 和大多数编程语言一样，Python 一直以来都是*同步*的。它按顺序线性地运行代码，逐行从头到尾。当你调用一个函数时，Python 跳到其代码中，并且调用者会等待函数返回后才能恢复其原来的工作。
- en: Your CPU can do only one thing at a time, so synchronous execution makes perfect
    sense. But it turns out that often a program is not actually running any code,
    but waiting for something, like data from a file or a network service. This is
    like us staring at a browser screen while waiting for a site to load. If we could
    avoid this “busy waiting,” we might shorten the total time of our programs. This
    is also called improving *throughput*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 CPU 一次只能做一件事情，因此同步执行是完全合理的。但事实证明，一个程序实际上并不总是在运行代码，而是在等待某些东西，比如来自文件或网络服务的数据。这就像我们盯着浏览器屏幕等待网站加载一样。如果我们能避免这种“忙等待”，我们可能会缩短程序的总运行时间。这也被称为提高*吞吐量*。
- en: In [Chapter 15](ch15.html#ch_systems), you saw that if you want some concurrency,
    your choices included threads, processes, or a third-party solution like `gevent`
    or `twisted`. But there are now a growing number of *asynchronous* answers, both
    built in to Python and third-party solutions. These coexist with the usual synchronous
    Python code, but, to borrow a Ghostbusters warning, you can’t cross the streams.
    I’ll show you how to avoid any ectoplasmic side effects.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 15 章](ch15.html#ch_systems)中，你看到如果需要并发处理，你可以选择线程、进程或者像`gevent`或`twisted`这样的第三方解决方案。但现在有越来越多的*异步*答案，既内置于
    Python 中，也有第三方解决方案。这些与通常的同步 Python 代码并存，但借用一句《捉鬼敢死队》中的警告，不能混用。我会向你展示如何避免任何幽灵般的副作用。
- en: Coroutines and Event Loops
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 协程和事件循环
- en: 'In Python 3.4, Python added a standard *asynchronous* module called `asyncio`.
    Python 3.5 then added the keywords `async` and `await`. These implement some new
    concepts:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 3.4 中，Python 加入了一个标准的*异步*模块，名为`asyncio`。Python 3.5 随后添加了关键字`async`和`await`。这些实现了一些新概念：
- en: '*Coroutines* are functions that pause at various points'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*协程*是在各种点暂停的函数'
- en: An *event loop* that schedules and runs coroutines
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个*事件循环*，用于调度和运行协程
- en: These let us write asynchronous code that looks something like the normal synchronous
    code that we’re used to. Otherwise, we’d need to use one of the methods mentioned
    in [Chapter 15](ch15.html#ch_systems) and [Chapter 17](ch17.html#ch_networks),
    and summarized later in [“Async Versus…”](#async_versus).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些让我们编写看起来像我们习惯的普通同步代码的异步代码。否则，我们需要使用[第 15 章](ch15.html#ch_systems)和[第 17 章](ch17.html#ch_networks)中提到的方法，并在后面总结为[“异步与…”](#async_versus)。
- en: Normal multitasking is what your operating system does to your processes. It
    decides what’s fair, who’s being a CPU hog, when to open the I/O spigots, and
    so on. The event loop, however, provides *cooperative multitasking*, in which
    coroutines indicate when they’re able to start and stop. They run in a single
    thread, so you don’t have the potential issues that I mentioned in [“Threads”](ch15.html#threads).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正常的多任务处理是你的操作系统对你的进程所做的事情。它决定什么是公平的，谁是 CPU 食量巨大者，何时打开 I/O 水龙头等等。然而，事件循环提供了*协作式多任务处理*，其中协程指示何时能够开始和停止。它们在单个线程中运行，因此你不会遇到我在[“线程”](ch15.html#threads)中提到的潜在问题。
- en: 'You *define* a coroutine by putting `async` before its initial `def`. You *call*
    a coroutine by:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在初始的`def`前加上`async`来*定义*一个协程。你通过以下方式*调用*一个协程：
- en: Putting `await` before it, which quietly adds the coroutine to an existing event
    loop. You can do this only within another coroutine.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`await`放在前面，悄悄地将协程添加到现有的事件循环中。你只能在另一个协程内部这样做。
- en: Or by using `asyncio.run()`, which explicitly starts an event loop.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者通过`asyncio.run()`来使用，它显式地启动一个事件循环。
- en: Or by using `asyncio.create_task()` or `asyncio.ensure_future()`.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者使用`asyncio.create_task()`或`asyncio.ensure_future()`。
- en: 'This example uses the first two calling methods:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子使用了前两种调用方法：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'These was a dramatic two-second wait in there that you can’t see on a printed
    page. To prove that we didn’t cheat (see [Chapter 19](ch19.html#ch_pythonista)
    for `timeit` details):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个戏剧性的两秒等待，在打印页上你看不到。为了证明我们没有作弊（详见[第 19 章](ch19.html#ch_pythonista)中的`timeit`详细信息）：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: That `asyncio.sleep(2)` call was itself a coroutine, just an example here to
    fake something time consuming like an API call.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`asyncio.sleep(2)` 的调用本身就是一个协程，在这里只是一个示例，模拟像 API 调用这样的耗时操作。'
- en: The line `asyncio.run(wicked())` is a way of running a coroutine from synchronous
    Python code (here, the top level of the program).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`asyncio.run(wicked())` 这一行是从同步 Python 代码中运行协程的一种方式（这里是程序的顶层）。'
- en: The difference from a standard synchronous counterpart (using `time.sleep()`)
    is that the caller of `wicked()` is not blocked for two seconds while it runs.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 与标准同步对应的区别（使用`time.sleep()`）是，在运行`wicked()`时，调用者不会被阻塞两秒钟。
- en: 'The third way to run a coroutine is to create a *task* and `await` it. This
    example shows the task approach along with the previous two methods:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 运行协程的第三种方式是创建一个*任务*并`await`它。此示例展示了任务方法以及前两种方法：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you run this, you’ll see that there was no delay between the two lines printing
    this time. That’s because they were separate tasks. `task_1` paused two seconds
    after printing `Surrender`, but that didn’t affect `task_2`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行这个代码，你会发现这次两行打印之间没有延迟。这是因为它们是独立的任务。`task_1`在打印`Surrender`后暂停了两秒，但这并不影响`task_2`。
- en: An `await` is similar to a `yield` in a generator, but rather than returning
    a value, it marks a spot where the event loop can pause it if needed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`await`类似于生成器中的`yield`，但是它不返回值，而是标记一个在需要时事件循环可以暂停它的位置。'
- en: There’s lots more where this came from in the [docs](https://oreil.ly/Cf_hd).
    Synchronous and asynchronous code can coexist in the same program. Just remember
    to put `async` before the `def` and `await` before the call of your asynchronous
    function.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在[文档](https://oreil.ly/Cf_hd)中可以找到更多相关信息。同步和异步代码可以在同一个程序中共存。只需记住在函数定义前加上`async`，在调用异步函数前加上`await`即可。
- en: 'Some more information:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一些更多信息：
- en: A [list](https://oreil.ly/Vj0yD) of `asyncio` links.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个[`asyncio`链接列表](https://oreil.ly/Vj0yD)。
- en: Code for an `asyncio` [web crawler](https://oreil.ly/n4FVx).
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于`asyncio`的[网络爬虫](https://oreil.ly/n4FVx)的代码。
- en: Asyncio Alternatives
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Asyncio 替代方案
- en: 'Although `asyncio` is a standard Python package, you can use `async` and `await`
    without it. Coroutines and the event loop are independent. The design of `asyncio`
    is sometimes [criticized](https://oreil.ly/n4FVx), and third-party alternatives
    have appeared:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`asyncio`是标准的 Python 包，但是你可以在没有它的情况下使用`async`和`await`。协程和事件循环是独立的。`asyncio`的设计有时会受到[批评](https://oreil.ly/n4FVx)，并且出现了第三方替代品：
- en: '[`curio`](https://curio.readthedocs.io)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`curio`](https://curio.readthedocs.io)'
- en: '[`trio`](https://trio.readthedocs.io)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`trio`](https://trio.readthedocs.io)'
- en: Let’s show a real example using `trio` and [`asks`](https://asks.readthedocs.io)
    (an async web framework, modeled on the `requests` API). [Example C-1](#exC1)
    shows a concurrent web-crawling example using `trio` and `asks`, adapted from
    a stackoverflow [answer](https://oreil.ly/CbINS). To run this, first `pip install`
    both `trio` and `asks`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们展示一个使用`trio`和[`asks`](https://asks.readthedocs.io)(一个类似于`requests`API的异步
    Web 框架)的真实例子。[示例 C-1](#exC1)展示了一个使用`trio`和`asks`进行并发 Web 爬虫的例子，这个例子改编自 stackoverflow
    的一个[答案](https://oreil.ly/CbINS)。要运行这个例子，首先要安装`trio`和`asks`。
- en: Example C-1\. trio_asks_sites.py
  id: totrans-35
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '[示例 C-1](#exC1)\. trio_asks_sites.py'
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here’s what I got:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我得到的：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You’ll notice that `trio` did not use `asyncio.run()`, but instead its own `trio.open_nursery()`.
    If you’re curious, you can read an [essay](https://oreil.ly/yp1-r) and [discussion](https://oreil.ly/P21Ra)
    of the design decisions behind `trio`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到`trio`没有使用`asyncio.run()`，而是使用了自己的`trio.open_nursery()`。如果你感兴趣，可以阅读关于`trio`背后设计决策的[文章](https://oreil.ly/yp1-r)和[讨论](https://oreil.ly/P21Ra)。
- en: A new package called [`AnyIO`](https://anyio.readthedocs.io/en/latest) provides
    a single interface to `asyncio`, `curio`, and `trio`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为[`AnyIO`](https://anyio.readthedocs.io/en/latest)的新包提供了对`asyncio`、`curio`和`trio`的单一接口。
- en: In the future, you can expect more async approaches, both in standard Python
    and from third-party developers.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 未来，你可以期待更多的异步方法，无论是在标准 Python 中还是来自第三方开发者。
- en: Async Versus…
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步对比…
- en: As you’ve seen in many places in this book, there are many techniques for concurrency.
    How does the async stuff compare with them?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在本书中许多地方看到的那样，有许多并发技术。异步处理与它们相比如何？
- en: Processes
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 进程
- en: This is a good solution if you want to use all the CPU cores on your machine,
    or multiple machines. But processes are heavy, take a while to start, and require
    serialization for interprocess communication.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要使用机器上的所有 CPU 核心或多台机器，这是一个很好的解决方案。但是进程比较重，启动时间长，并且需要序列化进行进程间通信。
- en: Threads
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 线程
- en: Although threads were designed as a “lightweight” alternative to processes,
    each thread uses a good chunk of memory. Coroutines are much lighter than threads;
    you can create hundreds of thousands of coroutines on a machine that might only
    support a few thousand threads.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然线程被设计为进程的“轻量级”替代方案，但每个线程使用大量内存。协程比线程轻得多；在仅支持几千个线程的机器上，可以创建数十万个协程。
- en: Green threads
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 绿色线程
- en: Green threads like `gevent` work well and look like synchronous code, but they
    require *monkey-patching* standard Python functions, such as socket libraries.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 绿色线程像`gevent`一样表现良好，并且看起来像是同步代码，但是需要*猴子补丁*标准的Python函数，例如套接字库。
- en: Callbacks
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 回调
- en: 'Libraries like `twisted` rely on *callbacks*: functions that are called when
    when certain events occur. This is familiar to GUI and JavaScript programmers.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 像`twisted`这样的库依赖于*回调*：当某些事件发生时调用的函数。这对GUI和JavaScript程序员来说很熟悉。
- en: Queues—These tend to be a large-scale solution, when your data or processes
    really need more than one machine.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 队列—当你的数据或进程确实需要多台机器时，这些通常是一个大规模的解决方案。
- en: Async Frameworks and Servers
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步框架和服务器
- en: The async additions to Python are recent, and it’s taking time for developers
    to create async versions of frameworks like Flask.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Python的异步新增功能是最近才有的，开发者们需要时间来创建像Flask这样的异步框架版本。
- en: The [ASGI](https://asgi.readthedocs.io) standard is an async version of WSGI,
    discussed further [here](https://oreil.ly/BnEXT).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[ASGI](https://asgi.readthedocs.io)标准是WSGI的异步版本，详细讨论请参见[这里](https://oreil.ly/BnEXT)。'
- en: 'Here are some ASGI web servers:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些ASGI Web服务器：
- en: '[`hypercorn`](https://pgjones.gitlab.io/hypercorn)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`hypercorn`](https://pgjones.gitlab.io/hypercorn)'
- en: '[`sanic`](https://sanic.readthedocs.io)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`sanic`](https://sanic.readthedocs.io)'
- en: '[`uvicorn`](https://www.uvicorn.org)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`uvicorn`](https://www.uvicorn.org)'
- en: 'And some async web frameworks:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些异步Web框架：
- en: '[`aiohttp`](https://aiohttp.readthedocs.io)—Client *and* server'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`aiohttp`](https://aiohttp.readthedocs.io)—客户端 *和* 服务器'
- en: '[`api_hour`](https://pythonhosted.org/api_hour)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`api_hour`](https://pythonhosted.org/api_hour)'
- en: '[`asks`](https://asks.readthedocs.io)—Like `requests`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`asks`](https://asks.readthedocs.io)—类似于`requests`'
- en: '[`blacksheep`](https://github.com/RobertoPrevato/BlackSheep)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`blacksheep`](https://github.com/RobertoPrevato/BlackSheep)'
- en: '[`bocadillo`](https://github.com/bocadilloproject/bocadillo)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`bocadillo`](https://github.com/bocadilloproject/bocadillo)'
- en: '[`channels`](https://channels.readthedocs.io)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`channels`](https://channels.readthedocs.io)'
- en: '[`fastapi`](https://fastapi.tiangolo.com)—Uses type annotations'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`fastapi`](https://fastapi.tiangolo.com)—使用类型注解'
- en: '[`muffin`](https://muffin.readthedocs.io)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`muffin`](https://muffin.readthedocs.io)'
- en: '[`quart`](https://gitlab.com/pgjones/quart)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`quart`](https://gitlab.com/pgjones/quart)'
- en: '[`responder`](https://python-responder.org)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`responder`](https://python-responder.org)'
- en: '[`sanic`](https://sanic.readthedocs.io)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`sanic`](https://sanic.readthedocs.io)'
- en: '[`starlette`](https://www.starlette.io)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`starlette`](https://www.starlette.io)'
- en: '[`tornado`](https://www.tornadoweb.org)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`tornado`](https://www.tornadoweb.org)'
- en: '[`vibora`](https://vibora.io)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`vibora`](https://vibora.io)'
- en: 'Finally, some async database interfaces:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一些异步数据库接口：
- en: '[`aiomysql`](https://aiomysql.readthedocs.io)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`aiomysql`](https://aiomysql.readthedocs.io)'
- en: '[`aioredis`](https://aioredis.readthedocs.io)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`aioredis`](https://aioredis.readthedocs.io)'
- en: '[`asyncpg`](https://github.com/magicstack/asyncpg)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`asyncpg`](https://github.com/magicstack/asyncpg)'
