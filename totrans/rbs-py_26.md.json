["```py\ndef test_chili_has_correct_ingredients():\n    assert make_chili().ingredients() == [\n        \"Ground Beef\",\n        \"Chile Blend\",\n        \"Onion\",\n        ...\n        \"Tomatoes\",\n        \"Pinto Beans\"\n    ]\n```", "```py\nFeature: Name of test suite\n\n  Scenario: A test case\n    Given some precondition\n    When I take some action\n    Then I expect this result\n```", "```py\nFeature: Vegan-friendly menu\n\n  Scenario: Can substitute for vegan alternative\n    Given an order containing a Cheeseburger with Fries\n    When I ask for vegan substitutions\n    Then I receive the meal with no animal products\n```", "```py\n  Scenario: Cannot substitute vegan alternatives for certain meals\n    Given an order containing Meatloaf\n    When I ask for vegan substitutions\n    Then an error shows up stating the meal is not vegan substitutable\n```", "```py\n  Scenario: Texas-Style Chili\n    Given a Chili-Making Machine\n    When a Chili is dispensed\n    Then that dish does not contain beans\n    And that dish does not contain tomatoes\n```", "```py\nScenario: Chili order takes less than two minutes\nGiven a Chili-Making Machine\nWhen a Chili is ordered\nThen the Chili is dispensed to the customer within two minutes\n```", "```py\nFeature: Vegan-friendly menu\n\n  Scenario: Can substitute for vegan alternative\n    Given an order containing a Cheeseburger with Fries\n    When I ask for vegan substitutions\n    Then I receive the meal with no animal products\n```", "```py\nfrom behave import given, when, then\n\n@given(\"an order containing a Cheeseburger with Fries\")\ndef setup_order(ctx):\n    ctx.dish = CheeseburgerWithFries()\n\n@when(\"I ask for vegan substitutions\")\ndef substitute_vegan(ctx):\n    ctx.dish.substitute_vegan_ingredients()\n\n@then(\"I receive the meal with no animal products\")\ndef check_all_vegan(ctx):\n    assert all(is_vegan(ing) for ing in ctx.dish.ingredients())\n```", "```py\nfrom behave.runner import Context\ncontext = Context()\nsetup_order(context)\nsubstitute_vegan(context)\ncheck_all_vegan(context)\n```", "```py\npip install behave\n```", "```py\nbehave code_examples/chapter22/features\n```", "```py\nFeature: Vegan-friendly menu\n\n  Scenario: Can substitute for vegan alternatives\n    Given an order containing a Cheeseburger with Fries\n    When I ask for vegan substitutions\n    Then I receive the meal with no animal products\n\n1 feature passed, 0 failed, 0 skipped\n1 scenario passed, 0 failed, 0 skipped\n3 steps passed, 0 failed, 0 skipped, 0 undefined\nTook 0m0.000s\n```", "```py\nGiven an order containing a Cheeseburger with Fries\n```", "```py\nGiven an order containing Meatloaf\n```", "```py\n@given(\"an order containing {dish_name}\")\ndef setup_order(ctx, dish_name):\n    if dish_name == \"a Cheeseburger with Fries\":\n        ctx.dish = CheeseburgerWithFries()\n    elif dish_name == \"Meatloaf\":\n        ctx.dish = Meatloaf()\n```", "```py\n@given(\"an order containing a Cheeseburger with Fries\")\n@given(\"a typical drive-thru order\")\ndef setup_order(context):\n    ctx.dish = CheeseBurgerWithFries()\n```", "```py\nFeature: Vegan-friendly menu\n\nScenario Outline: Vegan Substitutions\n  Given an order containing <dish_name>,\n  When I ask for vegan substitutions\n  Then <result>\n\n Examples: Vegan Substitutable\n   | dish_name                  | result |\n   | a Cheeseburger with Fries  | I receive the meal with no animal products  |\n   | Cobb Salad                 | I receive the meal with no animal products  |\n   | French Fries               | I receive the meal with no animal products  |\n   | Lemonade                   | I receive the meal with no animal products  |\n\n Examples: Not Vegan Substitutable\n   | dish_name     | result |\n   | Meatloaf      | a non-vegan-substitutable error shows up |\n   | Meatballs     | a non-vegan-substitutable error shows up |\n   | Fried Shrimp  | a non-vegan-substitutable error shows up |\n```", "```py\nfrom behave import use_context_matcher\n\nuse_step_matcher(\"re\")\n\n@given(\"an order containing [a |an ]?(?P<dish_name>.*)\")\ndef setup_order(ctx, dish_name):\n    ctx.dish = create_dish(dish_name)\n```", "```py\ndef before_all(ctx):\n    ctx.database = setup_database()\n\ndef before_feature(ctx, feature):\n    ctx.database.empty_tables()\n\ndef after_all(ctx):\n    ctx.database.cleanup()\n```", "```py\nFeature: Vegan-friendly Menu\n\n  @smoke\n  @wip\n  Scenario: Can substitute for vegan alternatives\n    Given an order containing a Cheeseburger with Fries\n    When I ask for vegan substitutions\n    Then I receive the meal with no animal products\n```", "```py\nbehave code_examples/chapter22 --tags=smoke\n```", "```py\npip install junit2html\nbehave code_examples/chapter22/features/ --junit\n# xml files are in the reports folder\njunit2html <filename>\n```"]