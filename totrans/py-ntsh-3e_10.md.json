["```py\n`import` re\nprint(re.findall(r'\\w+', 'cittá'))            *`# prints: ['cittá']`*\nprint(re.findall(rb'\\w+', 'cittá'.encode())) *`# prints: [b'citt']`*\n```", "```py\nr'pre.*post'\n```", "```py\nr'pre.+post'\n```", "```py\nr'pre.*post\\Z'\n```", "```py\nr'\\bhis\\b'\n```", "```py\nr'\\bher'\n```", "```py\nr'its\\b'\n```", "```py\nr'\\bher\\w*'\n```", "```py\nr'\\bher\\B'\n```", "```py\nr'\\w*its\\b'\n```", "```py\nr\"[a-zA-Z'\\-]+\"\n```", "```py\n'|'.join(rf'\\b{word}\\b' `for` word `in` L)\n```", "```py\n'|'.join(re.escape(s) `for` s `in` sorted(\n         L, key=len, reverse=`True`))\n```", "```py\nr'(.+)\\1+\\Z'\n```", "```py\n`import` re\nr1 = re.compile(r'(?i)hello')\nr2 = re.compile(r'hello', re.I)\nr3 = re.compile(r'hello', re.IGNORECASE)\n```", "```py\nrepat_num1 = r'(0o[0-7]*|0x[\\da-fA-F]+|[1-9]\\d*)\\Z'\nrepat_num2 = r'''(?x) *`# (re.VERBOSE) pattern matching int literals`*\n (  0o [0-7]* *`# octal: leading 0o, 0+ octal digits`*\n | 0x [\\da-fA-F]+ *`# hex: 0x, then 1+ hex digits`*\n | [1-9] \\d* *`# decimal: leading non-0, 0+ digits`*\n )\\Z *`# end of string`*\n              '''\n```", "```py\n`import` re\nr1 = re.compile(r'box')\n`if` r1.match('inbox'):\n    print('match succeeds')\n`else`:\n    print('match fails')          *`# prints: match fails`*\n\n`if` r1.search('inbox'):\n    print('search succeeds')      *`# prints: search succeeds`*\n`else`:\n    print('search fails')\n```", "```py\n`import` re\ndigatend = re.compile(r'\\d$', re.MULTILINE)\n`with` open('afile.txt') `as` f:\n    `if` digatend.search(f.read()):\n        print('some lines end with digits')\n    `else`:\n        print('no line ends with digits')\n```", "```py\n`import` re\nreword = re.compile(r'\\w+')\n`with` open('afile.txt') `as` f:\n    `for` aword `in` reword.findall(f.read()):\n        print(aword)\n```", "```py\nreword = re.compile('(\\w+)\\s')\n```", "```py\n`import` re\nfirst_last = re.compile(r'^\\W*(\\w+)\\b.*\\b(\\w+)\\W*$', \n                        re.MULTILINE)\n`with` open('afile.txt') `as` f:\n    `for` first, last `in` first_last.findall(f.read()):\n        print(first, last)\n```", "```py\n`import` re\ndigs = re.compile(r'\\d')\n`with` open('afile.txt') `as` f:\n    `for` line `in` f:\n        `if` digs.match(line):\n            print(line, end='')\n```", "```py\n`import` re\ndigs = re.compile(r'\\d')\n`with` open('afile.txt') `as` f:\n    `for` line in f:\n        `if` digs.search(line):\n            print(line, end='')\n```", "```py\n`import` re\nrehello = re.compile(r'hello', re.IGNORECASE)\nastring = ''.join(rehello.split(astring))\n```", "```py\n`import` re\nre_col_ws_dig = re.compile(r'(:)\\s+(\\d)')\nastring = ''.join(re_col_ws_dig.split(astring))\n```", "```py\nastring=''.join(rehello.split(astring, 1))\n```", "```py\n`import` re\nrehello = re.compile(r'hello', re.IGNORECASE)\nastring = rehello.sub('', astring, 1)\n```", "```py\n`import` re\nh_word = re.compile(r'\\bh\\w*o\\b', re.IGNORECASE)\n`def` up(mo):\n    `return` mo.group(0).upper()\nastring = h_word.sub(up, astring)\n```", "```py\n`import` re\ngrouped_word = re.compile('(\\w+)')\nastring = grouped_word.sub(r'{\\1}', astring)\n```", "```py\n`import` re\nrehello = re.compile(r'hello', re.IGNORECASE)\n_, count = rehello.subn('', astring)\nprint(f'Found {count} occurrences of \"hello\"') \n```", "```py\n`import` re\n_, count = re.subn(r'hello', '', astring, flags=re.I)\nprint(f'Found {count} occurrences of \"hello\"')\n```", "```py\nif    ($statement =~ /I love (\\w+)/) {\n  print \"He loves $1\\n\";\n}\nelsif ($statement =~ /Ich liebe (\\w+)/) {\n  print \"Er liebt $1\\n\";\n}\nelsif ($statement =~ /Je t\\'aime (\\w+)/) {\n  print \"Il aime $1\\n\";\n}\n```", "```py\nm = re.match('I love (\\w+)', statement)\n`if` m:\n    print(f'He loves {m.group(1)}')\n`else`:\n    m = re.match('Ich liebe (\\w+)', statement)\n    `if` m:\n        print(f'Er liebt {m.group(1)}')\n    `else`:\n         m = re.match('J'aime (\\w+)', statement)\n        `if` m:\n            print(f'Il aime {m.group(1)}')\n```", "```py\n`if` m := re.match(r'I love (\\w+)', statement):\n    print(f'He loves {m.group(1)}')\n\n`elif` m := re.match(r'Ich liebe (\\w+)', statement):\n    print(f'Er liebt {m.group(1)}') \n\n`elif` m := re.match(r'J'aime (\\w+)', statement):\n    print(f'Il aime {m.group(1)}')\n```"]