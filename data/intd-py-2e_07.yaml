- en: Chapter 6\. Loop with while and for
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。使用 while 和 for 循环
- en: For a’ that, an’ a’ that, Our toils obscure, an’ a’ that …
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对于所有的事情，我们辛劳工作，我们辛劳工作，我们所有的努力都被忽视……
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Robert Burns, For a’ That and a’ That
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 罗伯特·彭斯，《为了那些，为了那些》
- en: 'Testing with `if`, `elif`, and `else` runs from top to bottom. Sometimes, we
    need to do something more than once. We need a *loop*, and Python gives us two
    choices: `while` and `for`.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `if`、`elif` 和 `else` 进行测试时，从上到下执行。有时，我们需要执行多次操作。我们需要一个*循环*，而 Python 给了我们两个选择：`while`
    和 `for`。
- en: Repeat with while
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 while 重复
- en: 'The simplest looping mechanism in Python is `while`. Using the interactive
    interpreter, try this example, which is a simple loop that prints the numbers
    from 1 to 5:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中最简单的循环机制是 `while`。使用交互式解释器，尝试这个例子，这是一个简单的循环，打印从 1 到 5 的数字：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We first assigned the value `1` to `count`. The `while` loop compared the value
    of `count` to `5` and continued if `count` was less than or equal to `5`. Inside
    the loop, we printed the value of `count` and then *incremented* its value by
    one with the statement `count += 1`. Python goes back to the top of the loop,
    and again compares `count` with `5`. The value of `count` is now `2`, so the contents
    of the `while` loop are again executed, and `count` is incremented to `3`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将值 `1` 赋给了 `count`。`while` 循环将 `count` 的值与 `5` 进行比较，如果 `count` 小于或等于 `5`，则继续。在循环内部，我们打印了
    `count` 的值，然后使用语句 `count += 1` 将其值*增加*了一。Python 返回循环顶部，再次将 `count` 与 `5` 进行比较。此时
    `count` 的值为 `2`，因此再次执行 `while` 循环的内容，并将 `count` 增加到 `3`。
- en: This continues until `count` is incremented from `5` to `6` at the bottom of
    the loop. On the next trip to the top, `count <= 5` is now `False`, and the `while`
    loop ends. Python moves on to the next lines.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这将持续到在循环底部将 `count` 从 `5` 增加到 `6` 为止。在下一次回到顶部时，`count <= 5` 现在为 `False`，`while`
    循环结束。Python 继续执行下一行。
- en: Cancel with break
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 break 取消
- en: 'If you want to loop until something occurs, but you’re not sure when that might
    happen, you can use an *infinite loop* with a `break` statement. This time, let’s
    read a line of input from the keyboard via Python’s `input()` function and then
    print it with the first letter capitalized. We break out of the loop when a line
    containing only the letter `q` is typed:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想循环直到某些事情发生，但不确定什么时候会发生，可以使用带有 `break` 语句的*无限循环*。这次，让我们通过 Python 的 `input()`
    函数从键盘读取一行输入，然后将其打印为首字母大写。当键入仅包含字母 `q` 的行时，我们跳出循环：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Skip Ahead with continue
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 continue 跳过
- en: 'Sometimes, you don’t want to break out of a loop but just want to skip ahead
    to the next iteration for some reason. Here’s a contrived example: let’s read
    an integer, print its square if it’s odd, and skip it if it’s even. We even added
    a few comments. Again, we use `q` to stop the loop:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您不想中断循环，而只是想因某种原因跳到下一个迭代。这是一个牵强的例子：让我们读取一个整数，如果它是奇数，则打印它的平方，并在它是偶数时跳过。我们甚至添加了一些注释。同样，我们使用
    `q` 来停止循环。
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Check break Use with else
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 break 检查与 else 一起使用
- en: 'If the `while` loop ended normally (no `break` call), control passes to an
    optional `else`. You use this when you’ve coded a `while` loop to check for something,
    and breaking as soon as it’s found. The `else` would be run if the `while` loop
    completed but the object was not found:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `while` 循环正常结束（没有调用 `break`），控制将传递给可选的 `else`。当您已编写了一个 `while` 循环来检查某些内容，并在找到时立即中断时，您会使用它。如果
    `while` 循环完成但未找到对象，则会运行 `else`：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-19
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This use of `else` might seem nonintuitive. Consider it a *break checker*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`else`的这种用法可能看起来不直观。将其视为*中断检查器*。
- en: Iterate with for and in
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 for 和 in 进行迭代
- en: Python makes frequent use of *iterators*, for good reason. They make it possible
    for you to traverse data structures without knowing how large they are or how
    they are implemented. You can even iterate over data that is created on the fly,
    allowing processing of data *streams* that would otherwise not fit in the computer’s
    memory all at once.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Python 经常使用*迭代器*，有很好的理由。它们使您能够遍历数据结构，而无需知道其大小或实现方式。您甚至可以迭代即时创建的数据，允许处理否则无法一次性放入计算机内存中的数据*流*。
- en: To show iteration, we need something to iterate over. You’ve already seen strings
    in [Chapter 5](ch05.html#ch_strings), but have not yet read the details on other
    *iterables* like lists and tuples ([Chapter 7](ch07.html#ch_lists)) or dictionaries
    ([Chapter 8](ch08.html#ch_dicts)). I’ll show two ways to walk through a string
    here, and show iteration for the other types in their own chapters.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要展示迭代，我们需要一个可以迭代的对象。你已经在[第五章](ch05.html#ch_strings)看到了字符串，但还没有详细了解其他*可迭代对象*，比如列表和元组（见[第七章](ch07.html#ch_lists)）或字典（见[第八章](ch08.html#ch_dicts)）。这里我将展示两种遍历字符串的方法，并在它们各自的章节中展示其他类型的迭代。
- en: 'It’s legal Python to step through a string like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，通过以下方式逐步遍历字符串是合法的：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'But there’s a better, more Pythonic way:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但有一个更好、更符合Python风格的方法：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: String iteration produces one character at a time.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串迭代每次产生一个字符。
- en: Cancel with break
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过`break`取消
- en: 'A `break` in a `for` loop breaks out of the loop, as it does for a `while`
    loop:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环中的`break`会跳出循环，就像在`while`循环中一样：'
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Skip with continue
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`continue`跳过
- en: Inserting a `continue` in a `for` loop jumps to the next iteration of the loop,
    as it does for a `while` loop.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在`for`循环中插入`continue`会跳到下一个迭代，就像在`while`循环中一样。
- en: Check break Use with else
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查`break`与`else`的用法
- en: Similar to `while`, `for` has an optional `else` that checks whether the `for`
    completed normally. If `break` was *not* called, the `else` statement is run.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于`while`，`for`也有一个可选的`else`语句，用于检查`for`是否正常完成。如果没有调用`break`，则会执行`else`语句。
- en: 'This is useful when you want to verify that the previous `for` loop ran to
    completion instead of being stopped early with a `break`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当你希望确认前一个`for`循环是否完全执行而不是因为`break`而提前停止时，这是非常有用的：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-38
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: As with `while`, the use of `else` with `for` might seem nonintuitive. It makes
    more sense if you think of the `for` as looking for something, and `else` being
    called if you didn’t find it. To get the same effect without `else`, use some
    variable to indicate whether you found what you wanted in the `for` loop.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 与`while`一样，使用`for`和`else`可能看起来不直观。如果你把`for`看作在寻找某些东西，那么当你没有找到时，`else`会被调用。如果想要在没有`else`的情况下达到相同的效果，可以使用某个变量来指示在`for`循环中是否找到了想要的内容。
- en: Generate Number Sequences with range()
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`range()`生成数字序列
- en: The `range()` function returns a stream of numbers within a specified range.
    without first having to create and store a large data structure such as a list
    or tuple. This lets you create huge ranges without using all the memory in your
    computer and crashing your program.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`range()`函数返回在指定范围内的一系列数字。无需首先创建和存储大数据结构（如列表或元组），就可以创建大范围，避免占用计算机所有内存并导致程序崩溃。'
- en: 'You use `range()` similar to how to you use slices: `range(` *`start`*, *`stop`*,
    *`step`* `)`. If you omit *`start`*, the range begins at `0`. The only required
    value is *`stop`*; as with slices, the last value created will be just before
    *`stop`*. The default value of *`step`* is `1`, but you can go backward with `-1`.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`range()`与使用切片类似：`range(` *`start`*, *`stop`*, *`step`* `)`。如果省略*`start`*，范围将从`0`开始。与切片一样，创建的最后一个值将恰好在*`stop`*之前。*`step`*的默认值是`1`，但可以使用`-1`向后遍历。
- en: 'Like `zip()`, `range()` returns an *iterable* object, so you need to step through
    the values with `for ... in`, or convert the object to a sequence like a list.
    Let’s make the range `0, 1, 2`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于`zip()`，`range()`返回一个*可迭代对象*，因此你需要用`for ... in`逐个遍历其值，或者将该对象转换为像列表这样的序列。让我们创建一个范围为`0,
    1, 2`的示例：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here’s how to make a range from `2` down to `0`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何从`2`到`0`生成一个范围：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following snippet uses a step size of `2` to get the even numbers from
    `0` to `10`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下片段使用步长为`2`来获取从`0`到`10`的偶数：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Other Iterators
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他迭代器
- en: '[Chapter 14](ch14.html#ch_files) shows iteration over files. In [Chapter 10](ch10.html#ch_objects),
    you can see how to enable iteration over objects that you’ve defined yourself.
    Also, [Chapter 11](ch11.html#ch_modules) talks about `itertools`—a standard Python
    module with many useful shortcuts.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[第十四章](ch14.html#ch_files)展示了如何迭代文件。在[第十章](ch10.html#ch_objects)，你可以看到如何启用对自定义对象的迭代。此外，[第十一章](ch11.html#ch_modules)讨论了`itertools`——一个带有许多有用快捷方式的标准Python模块。'
- en: Coming Up
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 即将到来
- en: Chain individual data into *lists* and *tuples*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 将各个数据链入*列表*和*元组*中。
- en: Things to Do
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 待完成的事情
- en: 6.1 Use a `for` loop to print the values of the list `[3, 2, 1, 0]`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 6.1 使用`for`循环打印列表`[3, 2, 1, 0]`的值。
- en: 6.2 Assign the value `7` to the variable `guess_me`, and the value `1` to the
    variable `number`. Write a `while` loop that compares `number` with `guess_me`.
    Print `'too low'` if `number` is less than `guess me`. If `number` equals `guess_me`,
    print `'found it!'` and then exit the loop. If `number` is greater than `guess_me`,
    print `'oops'` and then exit the loop. Increment `number` at the end of the loop.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 将值`7`赋给变量`guess_me`，并将值`1`赋给变量`number`。编写一个`while`循环，比较`number`与`guess_me`。如果`number`小于`guess
    me`，则打印`'too low'`。如果`number`等于`guess_me`，则打印`'found it!'`，然后退出循环。如果`number`大于`guess_me`，则打印`'oops'`，然后退出循环。在循环结束时增加`number`。
- en: 6.3 Assign the value `5` to the variable `guess_me`. Use a `for` loop to iterate
    a variable called `number` over `range(10)`. If `number` is less than `guess_me`,
    print `'too low'`. If it equals `guess_me`, print `found it!` and then break out
    of the for loop. If `number` is greater than `guess_me`, print `'oops'` and then
    exit the loop.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 将值`5`赋给变量`guess_me`。使用`for`循环迭代名为`number`的变量在`range(10)`上。如果`number`小于`guess_me`，则打印`'too
    low'`。如果它等于`guess_me`，则打印`'found it!'`，然后退出for循环。如果`number`大于`guess_me`，则打印`'oops'`，然后退出循环。
