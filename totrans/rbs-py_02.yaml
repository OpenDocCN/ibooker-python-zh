- en: Part I. Annotating Your Code with Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to [Part I](part0004.html#part_1), where I will focus on *types* in
    Python. Types model the behavior of your program. Beginner programmers understand
    that there are different types in Python, such as `float` or `str`. But what is
    a type? How does mastering types make your codebase stronger? Types are a fundamental
    underpinning of any programming language, but, unfortunately, most introductory
    texts gloss over just how types benefit your codebase (or if misused, those same
    types increase complexity).
  prefs: []
  type: TYPE_NORMAL
- en: 'Tell me if you’ve seen this before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This could be pulled from almost any beginner’s guide to Python. You will learn
    about the `int`, `str`, `float`, and `bool` data types, and all sorts of other
    things the language offers. Then, boom, you move on, because let’s face it, this
    Python is not flashy. You want to dive into the cool stuff, like functions and
    loops and dictionaries, and I don’t blame you. But it’s a shame that many tutorials
    never revisit types and give them their proper due. As users dig deeper, they
    may discover type annotations (which I cover in the next chapter) or start writing
    classes, but often miss out on the fundamental discussion about when to use types
    appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: That’s where I’ll start.
  prefs: []
  type: TYPE_NORMAL
