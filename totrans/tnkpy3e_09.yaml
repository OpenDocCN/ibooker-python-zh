- en: 7\. Iteration and Search#
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7\. 迭代与搜索#
- en: 原文：[https://allendowney.github.io/ThinkPython/chap07.html](https://allendowney.github.io/ThinkPython/chap07.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://allendowney.github.io/ThinkPython/chap07.html](https://allendowney.github.io/ThinkPython/chap07.html)
- en: In 1939 Ernest Vincent Wright published a 50,000 word novel called *Gadsby*
    that does not contain the letter “e”. Since “e” is the most common letter in English,
    writing even a few words without using it is difficult. To get a sense of how
    difficult, in this chapter we’ll compute the fraction of English words have at
    least one “e”.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 1939年，厄尼斯特·文森特·赖特（Ernest Vincent Wright）出版了一本名为*《盖兹比》*的小说，这本小说有50,000个单词，却不包含字母“e”。因为“e”是英语中最常见的字母，甚至写几个不使用它的单词也是困难的。为了感受它的难度，在本章中我们将计算英语单词中至少包含一个“e”的比例。
- en: For that, we’ll use `for` statements to loop through the letters in a string
    and the words in a file, and we’ll update variables in a loop to count the number
    of words that contain an “e”. We’ll use the `in` operator to check whether a letter
    appears in a word, and you’ll learn a programming pattern called a “linear search”.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将使用`for`语句循环遍历字符串中的字母和文件中的单词，并在循环中更新变量以统计包含字母“e”的单词数量。我们将使用`in`运算符来检查字母是否出现在单词中，你将学习一种叫做“线性搜索”的编程模式。
- en: As an exercise, you’ll use these tools to solve a word puzzle called “Spelling
    Bee”.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 作为练习，你将使用这些工具来解决一个叫做“拼字蜂”（Spelling Bee）的字谜。
- en: 7.1\. Loops and strings[#](#loops-and-strings "Link to this heading")
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.1\. 循环与字符串[#](#loops-and-strings "跳转到此标题")
- en: In Chapter 3 we saw a `for` loop that uses the `range` function to display a
    sequence of numbers.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3章中，我们看到一个使用`range`函数的`for`循环来显示一系列数字。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This version uses the keyword argument `end` so the `print` function puts a
    space after each number rather than a newline.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本使用了关键字参数`end`，因此`print`函数在每个数字后面添加一个空格，而不是换行符。
- en: We can also use a `for` loop to display the letters in a string.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`for`循环来显示字符串中的字母。
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that I changed the name of the variable from `i` to `letter`, which provides
    more information about the value it refers to. The variable defined in a `for`
    loop is called the **loop variable**.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我将变量名从`i`更改为`letter`，这样可以提供更多关于它所代表的值的信息。在`for`循环中定义的变量称为**循环变量**。
- en: Now that we can loop through the letters in a word, we can check whether it
    contains the letter “e”.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以遍历单词中的字母，检查它是否包含字母“e”。
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Before we go on, let’s encapsulate that loop in a function.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们将把这个循环封装成一个函数。
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And let’s make it a pure function that return `True` if the word contains an
    “e” and `False` otherwise.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们让它成为一个纯函数，如果单词包含“e”则返回`True`，否则返回`False`。
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We can generalize it to take the word as a parameter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将其推广为以单词作为参数。
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we can test it like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以这样测试：
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 7.2\. Reading the word list[#](#reading-the-word-list "Link to this heading")
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.2\. 阅读单词列表[#](#reading-the-word-list "跳转到此标题")
- en: To see how many words contain an “e”, we’ll need a word list. The one we’ll
    use is a list of about 114,000 official crosswords; that is, words that are considered
    valid in crossword puzzles and other word games.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查看有多少单词包含字母“e”，我们需要一个单词列表。我们将使用一个包含约114,000个官方填字游戏单词的列表；即那些被认为在填字游戏和其他字谜游戏中有效的单词。
- en: The word list is in a file called `words.txt`, which is downloaded in the notebook
    for this chapter. To read it, we’ll use the built-in function `open`, which takes
    the name of the file as a parameter and returns a **file object** we can use to
    read the file.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 单词列表保存在一个名为`words.txt`的文件中，该文件已在本章的笔记本中下载。为了读取它，我们将使用内置函数`open`，它接受文件名作为参数，并返回一个**文件对象**，我们可以用它来读取文件。
- en: '[PRE12]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The file object provides a function called `readline`, which reads characters
    from the file until it gets to a newline and returns the result as a string:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 文件对象提供了一个叫做`readline`的函数，它从文件中读取字符，直到遇到换行符，并将结果作为字符串返回：
- en: '[PRE13]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Notice that the syntax for calling `readline` is different from functions we’ve
    seen so far. That’s because it is a **method**, which is a function associated
    with an object. In this case `readline` is associated with the file object, so
    we call it using the name of the object, the dot operator, and the name of the
    method.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，调用`readline`的语法与我们到目前为止看到的函数不同。这是因为它是一个**方法**，即与对象相关联的函数。在这种情况下，`readline`与文件对象相关联，因此我们使用对象的名称、点操作符和方法名称来调用它。
- en: The first word in the list is “aa”, which is a kind of lava. The sequence `\n`
    represents the newline character that separates this word from the next.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的第一个单词是“aa”，它是一种岩浆。序列`\n`代表换行符，分隔这个单词与下一个单词。
- en: 'The file object keeps track of where it is in the file, so if you call `readline`
    again, you get the next word:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 文件对象会记录它在文件中的位置，因此如果你再次调用`readline`，就会得到下一个单词：
- en: '[PRE15]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: To remove the newline from the end of the word, we can use `strip`, which is
    a method associated with strings, so we can call it like this.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了去掉单词结尾的换行符，我们可以使用`strip`，它是一个与字符串关联的方法，因此我们可以这样调用它。
- en: '[PRE17]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`strip` removes whitespace characters – including spaces, tabs, and newlines
    – from the beginning and end of the string.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`strip`方法会去除字符串开头和结尾的空白字符——包括空格、制表符和换行符。'
- en: 'You can also use a file object as part of a `for` loop. This program reads
    `words.txt` and prints each word, one per line:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在`for`循环中使用文件对象。这个程序读取`words.txt`并打印每个单词，每行一个：
- en: '[PRE19]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now that we can read the word list, the next step is to count them. For that,
    we will need the ability to update variables.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以读取单词列表，下一步是统计它们的数量。为此，我们需要能够更新变量。
- en: 7.3\. Updating variables[#](#updating-variables "Link to this heading")
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.3\. 更新变量[#](#updating-variables "链接到此标题")
- en: As you may have discovered, it is legal to make more than one assignment to
    the same variable. A new assignment makes an existing variable refer to a new
    value (and stop referring to the old value).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经发现的，给同一个变量做多个赋值是合法的。新的赋值语句会使一个已存在的变量指向新的值（并停止指向旧值）。
- en: For example, here is an initial assignment that creates a variable.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下面是一个创建变量的初始赋值。
- en: '[PRE20]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: And here is an assignment that changes the value of a variable.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个改变变量值的赋值语句。
- en: '[PRE22]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The following figure shows what these assignments looks like in a state diagram.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了这些赋值在状态图中的样子。
- en: '![_images/5f2c6acf2632453c84d4a58782db35679dedcd804dd1683fca0560ccb15d92ea.png](../Images/20c498abf4d329b6904ae1a2d4c15efa.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![_images/5f2c6acf2632453c84d4a58782db35679dedcd804dd1683fca0560ccb15d92ea.png](../Images/20c498abf4d329b6904ae1a2d4c15efa.png)'
- en: The dotted arrow indicates that `x` no longer refers to `5`. The solid arrow
    indicates that it now refers to `7`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虚线箭头表示`x`不再指向`5`。实线箭头表示它现在指向`7`。
- en: A common kind of assignment is an **update**, where the new value of the variable
    depends on the old.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一种常见的赋值类型是**更新**，其中变量的新值依赖于旧值。
- en: '[PRE24]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This statement means “get the current value of `x`, add one, and assign the
    result back to `x`.”
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这条语句的意思是：“获取`x`的当前值，增加1，然后将结果重新赋值给`x`。”
- en: If you try to update a variable that doesn’t exist, you get an error, because
    Python evaluates the expression on the right before it assigns a value to the
    variable on the left.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你试图更新一个不存在的变量，会得到一个错误，因为 Python 在赋值给变量之前会先计算右边的表达式。
- en: '[PRE26]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Before you can update a variable, you have to **initialize** it, usually with
    a simple assignment:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在你更新变量之前，你必须**初始化**它，通常通过简单的赋值来实现：
- en: '[PRE28]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Increasing the value of a variable is called an **increment**; decreasing the
    value is called a **decrement**. Because these operations are so common, Python
    provides **augmented assignment operators** that update a variable more concisely.
    For example, the `+=` operator increments a variable by the given amount.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 增加变量值的操作称为**增量**；减少变量值的操作称为**减量**。由于这些操作非常常见，Python 提供了**增强赋值运算符**，使得更新变量变得更加简洁。例如，`+=`
    运算符会将变量增加给定的数值。
- en: '[PRE30]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: There are augmented assignment operators for the other arithmetic operators,
    including `-=` and `*=`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 其他算术运算符也有增强赋值运算符，包括`-=`和`*=`。
- en: 7.4\. Looping and counting[#](#looping-and-counting "Link to this heading")
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.4\. 循环与计数[#](#looping-and-counting "链接到此标题")
- en: The following program counts the number of words in the word list.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序计算单词列表中单词的数量。
- en: '[PRE32]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: It starts by initializing `total` to `0`. Each time through the loop, it increments
    `total` by `1`. So when the loop exits, `total` refers to the total number of
    words.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 它首先将`total`初始化为`0`。每次循环时，它会将`total`增加`1`。因此，当循环结束时，`total`表示单词的总数。
- en: '[PRE33]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: A variable like this, used to count the number of times something happens, is
    called a **counter**.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这种用来计算某件事情发生次数的变量叫做**计数器**。
- en: We can add a second counter to the program to keep track of the number of words
    that contain an “e”.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在程序中添加第二个计数器，用来追踪包含字母“e”的单词数量。
- en: '[PRE35]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Let’s see how many words contain an “e”.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一看有多少个单词包含字母“e”。
- en: '[PRE36]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: As a percentage of `total`, about two-thirds of the words use the letter “e”.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 作为`total`的百分比，大约三分之二的单词使用了字母“e”。
- en: '[PRE38]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: So you can understand why it’s difficult to craft a book without using any such
    words.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可以理解为什么在不使用这些词的情况下构造一本书是多么困难。
- en: 7.5\. The in operator[#](#the-in-operator "Link to this heading")
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.5\. `in` 运算符[#](#the-in-operator "跳转到该章节")
- en: The version of `has_e` we wrote in this chapter is more complicated than it
    needs to be. Python provides an operator, `in`, that checks whether a character
    appears in a string.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章编写的 `has_e` 版本比实际需要的要复杂。Python 提供了一个运算符 `in`，它检查一个字符是否出现在字符串中。
- en: '[PRE40]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: So we can rewrite `has_e` like this.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们可以将 `has_e` 改写为这样。
- en: '[PRE42]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: And because the conditional of the `if` statement has a boolean value, we can
    eliminate the `if` statement and return the boolean directly.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `if` 语句的条件有布尔值，我们可以省略 `if` 语句，直接返回布尔值。
- en: '[PRE43]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: We can simplify this function even more using the method `lower`, which converts
    the letters in a string to lowercase. Here’s an example.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用 `lower` 方法进一步简化这个函数，`lower` 会将字符串中的字母转换为小写。这里是一个例子。
- en: '[PRE44]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '`lower` makes a new string – it does not modify the existing string – so the
    value of `word` is unchanged.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`lower` 会创建一个新的字符串——它不会修改现有的字符串——所以 `word` 的值不会改变。'
- en: '[PRE46]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Here’s how we can use `lower` in `has_e`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在 `has_e` 中如何使用 `lower` 的方法。
- en: '[PRE48]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 7.6\. Search[#](#search "Link to this heading")
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.6\. 搜索[#](#search "跳转到该章节")
- en: Based on this simpler version of `has_e`, let’s write a more general function
    called `uses_any` that takes a second parameter that is a string of letters. It
    returns `True` if the word uses any of the letters and `False` otherwise.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这个简化版的 `has_e`，我们可以编写一个更通用的函数 `uses_any`，它接受第二个参数，该参数是一个字母的字符串。如果单词中使用了这些字母中的任何一个，它返回
    `True`，否则返回 `False`。
- en: '[PRE53]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Here’s an example where the result is `True`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个结果为 `True` 的例子。
- en: '[PRE54]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: And another where it is `False`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子中结果是 `False`。
- en: '[PRE56]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '`uses_any` converts `word` and `letters` to lowercase, so it works with any
    combination of cases.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`uses_any` 会将 `word` 和 `letters` 转换为小写，因此它可以处理任何大小写组合。'
- en: '[PRE58]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The structure of `uses_any` is similar to `has_e`. It loops through the letters
    in `word` and checks them one at a time. If it finds one that appears in `letters`,
    it returns `True` immediately. If it gets all the way through the loop without
    finding any, it returns `False`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`uses_any` 的结构类似于 `has_e`。它会循环遍历 `word` 中的字母并逐个检查。如果找到一个出现在 `letters` 中的字母，它会立即返回
    `True`。如果循环结束都没有找到任何字母，它会返回 `False`。'
- en: This pattern is called a **linear search**. In the exercises at the end of this
    chapter, you’ll write more functions that use this pattern.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式称为**线性搜索**。在本章末的练习中，你将编写更多使用这种模式的函数。
- en: 7.7\. Doctest[#](#doctest "Link to this heading")
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.7\. Doctest[#](#doctest "跳转到该章节")
- en: In [Chapter 4](chap04.html#section-docstring) we used a docstring to document
    a function – that is, to explain what it does. It is also possible to use a docstring
    to *test* a function. Here’s a version of `uses_any` with a docstring that includes
    tests.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](chap04.html#section-docstring)中，我们使用了文档字符串来记录函数——即解释它的作用。也可以使用文档字符串来*测试*一个函数。这里是包含测试的
    `uses_any` 函数版本。
- en: '[PRE60]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Each test begins with `>>>`, which is used as a prompt in some Python environments
    to indicate where the user can type code. In a doctest, the prompt is followed
    by an expression, usually a function call. The following line indicates the value
    the expression should have if the function works correctly.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 每个测试都以 `>>>` 开头，这是一些 Python 环境中用来表示用户可以输入代码的提示符。在 doctest 中，提示符后跟一个表达式，通常是一个函数调用。接下来的一行表示如果函数正确工作，表达式应具有的值。
- en: In the first example, `'banana'` uses `'a'`, so the result should be `True`.
    In the second example, `'apple'` does not use any of `'xyz'`, so the result should
    be `False`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个例子中，`'banana'` 使用了 `'a'`，所以结果应该是 `True`。在第二个例子中，`'apple'` 没有使用 `'xyz'` 中的任何字符，所以结果应该是
    `False`。
- en: To run these tests, we have to import the `doctest` module and run a function
    called `run_docstring_examples`. To make this function easier to use, I wrote
    the following function, which takes a function object as an argument.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行这些测试，我们必须导入 `doctest` 模块，并运行一个名为 `run_docstring_examples` 的函数。为了让这个函数更容易使用，我编写了以下函数，它接受一个函数对象作为参数。
- en: '[PRE61]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: We haven’t learned about `globals` and `__name__` yet – you can ignore them.
    Now we can test `uses_any` like this.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有学习 `globals` 和 `__name__`，可以忽略它们。现在我们可以像这样测试 `uses_any`。
- en: '[PRE62]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '`run_doctests` finds the expressions in the docstring and evaluates them. If
    the result is the expected value, the test **passes**. Otherwise it **fails**.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`run_doctests` 会找到文档字符串中的表达式并对其进行评估。如果结果是预期的值，则测试**通过**。否则，它**失败**。'
- en: If all tests pass, `run_doctests` displays no output – in that case, no news
    is good news. To see what happens when a test fails, here’s an incorrect version
    of `uses_any`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有测试都通过，`run_doctests`将不显示任何输出——在这种情况下，无消息即好消息。若要查看测试失败时发生的情况，下面是`uses_any`的一个错误版本。
- en: '[PRE63]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: And here’s what happens when we test it.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们测试时发生的情况。
- en: '[PRE64]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The output includes the example that failed, the value the function was expected
    to produce, and the value the function actually produced.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 输出包括失败的示例、函数预期生成的值和函数实际生成的值。
- en: If you are not sure why this test failed, you’ll have a chance to debug it as
    an exercise.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不确定为什么这个测试失败，你将有机会作为练习进行调试。
- en: 7.8\. Glossary[#](#glossary "Link to this heading")
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.8\. 词汇表[#](#glossary "Link to this heading")
- en: '**loop variable:** A variable defined in the header of a `for` loop.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**循环变量：** 在`for`循环头部定义的变量。'
- en: '**file object:** An object that represents an open file and keeps track of
    which parts of the file have been read or written.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件对象：** 一个表示已打开文件的对象，负责追踪文件的哪些部分已被读取或写入。'
- en: '**method:** A function that is associated with an object and called using the
    dot operator.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**方法：** 与对象关联的函数，并通过点操作符调用。'
- en: '**update:** An assignment statement that give a new value to a variable that
    already exists, rather than creating a new variables.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**更新：** 一种赋值语句，用于给已存在的变量赋新值，而不是创建新变量。'
- en: '**initialize:** Create a new variable and give it a value.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**初始化：** 创建一个新变量并为其赋值。'
- en: '**increment:** Increase the value of a variable.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**增量：** 增加变量的值。'
- en: '**decrement:** Decrease the value of a variable.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**递减：** 减少变量的值。'
- en: '**counter:** A variable used to count something, usually initialized to zero
    and then incremented.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**计数器：** 用于计数的变量，通常初始化为零，然后递增。'
- en: '**linear search:** A computational pattern that searches through a sequence
    of elements and stops when it finds what it is looking for.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**线性搜索：** 一种计算模式，它通过一系列元素进行搜索，并在找到目标时停止。'
- en: '**pass:** If a test runs and the result is as expected, the test passes.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**通过：** 如果测试运行并且结果符合预期，则该测试通过。'
- en: '**fail:** If a test runs and the result is not as expected, the test fails.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**失败：** 如果测试运行后结果与预期不符，则该测试失败。'
- en: 7.9\. Exercises[#](#exercises "Link to this heading")
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.9\. 练习[#](#exercises "Link to this heading")
- en: '[PRE66]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 7.9.1\. Ask a virtual assistant[#](#ask-a-virtual-assistant "Link to this heading")
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.9.1\. 向虚拟助手询问[#](#ask-a-virtual-assistant "Link to this heading")
- en: In `uses_any`, you might have noticed that the first `return` statement is inside
    the loop and the second is outside.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在`uses_any`中，你可能注意到第一个`return`语句在循环内部，而第二个在外部。
- en: '[PRE68]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: When people first write functions like this, it is a common error to put both
    `return` statements inside the loop, like this.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们第一次编写像这样的函数时，通常会犯一个错误，就是将两个`return`语句放在循环内部，像这样。
- en: '[PRE69]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Ask a virtual assistant what’s wrong with this version.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 向虚拟助手询问这个版本有什么问题。
- en: 7.9.2\. Exercise[#](#exercise "Link to this heading")
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.9.2\. 练习[#](#exercise "Link to this heading")
- en: Write a function named `uses_none` that takes a word and a string of forbidden
    letters, and returns `True` if the word does not use any of the forbidden letters.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`uses_none`的函数，它接受一个单词和一个禁用字母的字符串，如果该单词不包含任何禁用字母，则返回`True`。
- en: Here’s an outline of the function that includes two doctests. Fill in the function
    so it passes these tests, and add at least one more doctest.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个包含两个文档测试的函数大纲。填写函数代码以通过这些测试，并添加至少一个文档测试。
- en: '[PRE70]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 7.9.3\. Exercise[#](#id1 "Link to this heading")
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.9.3\. 练习[#](#id1 "Link to this heading")
- en: Write a function called `uses_only` that takes a word and a string of letters,
    and that returns `True` if the word contains only letters in the string.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`uses_only`的函数，它接受一个单词和一个字母字符串，如果该单词仅包含字符串中的字母，则返回`True`。
- en: Here’s an outline of the function that includes two doctests. Fill in the function
    so it passes these tests, and add at least one more doctest.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个包含两个文档测试的函数大纲。填写函数代码以通过这些测试，并添加至少一个文档测试。
- en: '[PRE71]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 7.9.4\. Exercise[#](#id2 "Link to this heading")
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.9.4\. 练习[#](#id2 "Link to this heading")
- en: Write a function called `uses_all` that takes a word and a string of letters,
    and that returns `True` if the word contains all of the letters in the string
    at least once.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`uses_all`的函数，它接受一个单词和一个字母字符串，如果该单词包含该字符串中的所有字母至少一次，则返回`True`。
- en: Here’s an outline of the function that includes two doctests. Fill in the function
    so it passes these tests, and add at least one more doctest.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个包含两个文档测试的函数大纲。填写函数代码以通过这些测试，并添加至少一个文档测试。
- en: '[PRE72]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 7.9.5\. Exercise[#](#id3 "Link to this heading")
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.9.5\. 练习[#](#id3 "跳转到此标题")
- en: '*The New York Times* publishes a daily puzzle called “Spelling Bee” that challenges
    readers to spell as many words as possible using only seven letters, where one
    of the letters is required. The words must have at least four letters.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '*纽约时报*每天发布一个名为“拼字蜂”的谜题，挑战读者使用七个字母拼尽可能多的单词，其中一个字母是必需的。单词必须至少有四个字母。'
- en: For example, on the day I wrote this, the letters were `ACDLORT`, with `R` as
    the required letter. So “color” is an acceptable word, but “told” is not, because
    it does not use `R`, and “rat” is not because it has only three letters. Letters
    can be repeated, so “ratatat” is acceptable.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我写这篇文章的那一天，字母是`ACDLORT`，其中`R`是必需的字母。所以“color”是一个合法的单词，但“told”不是，因为它没有使用`R`，而“rat”也不是，因为它只有三个字母。字母可以重复，因此“ratatat”是合法的。
- en: Write a function called `check_word` that checks whether a given word is acceptable.
    It should take as parameters the word to check, a string of seven available letters,
    and a string containing the single required letter. You can use the functions
    you wrote in previous exercises.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`check_word`的函数，用于检查给定的单词是否符合要求。它应该接受三个参数：要检查的单词、一个包含七个可用字母的字符串，以及一个包含单个必需字母的字符串。你可以使用你在之前练习中写的函数。
- en: Here’s an outline of the function that includes doctests. Fill in the function
    and then check that all tests pass.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是包含文档测试的函数大纲。填写函数并检查所有测试是否通过。
- en: '[PRE73]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: According to the “Spelling Bee” rules,
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 根据“拼字蜂”的规则，
- en: Four-letter words are worth 1 point each.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个字母的单词值1分。
- en: Longer words earn 1 point per letter.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 较长的单词每个字母得1分。
- en: Each puzzle includes at least one “pangram” which uses every letter. These are
    worth 7 extra points!
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个谜题至少包含一个“全字母句”（pangram），即包含所有字母的句子。这些可以获得7个额外分数！
- en: Write a function called `score_word` that takes a word and a string of available
    letters and returns its score. You can assume that the word is acceptable.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`score_word`的函数，接受一个单词和一串可用字母，并返回该单词的得分。你可以假设这个单词是合法的。
- en: Again, here’s an outline of the function with doctests.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，这是包含文档测试的函数大纲。
- en: '[PRE74]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 7.9.6\. Exercise[#](#id4 "Link to this heading")
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.9.6\. 练习[#](#id4 "跳转到此标题")
- en: You might have noticed that the functions you wrote in the previous exercises
    had a lot in common. In fact, they are so similar you can often use one function
    to write another.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到你在之前练习中写的函数有很多相似之处。实际上，它们如此相似，以至于你可以经常用一个函数来写另一个。
- en: For example, if a word uses none of a set forbidden letters, that means it doesn’t
    use any. So we can write a version of `uses_none` like this.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果一个单词没有使用任何一组禁止字母，这意味着它根本没有使用任何字母。所以我们可以这样写一个`uses_none`的版本。
- en: '[PRE75]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: There is also a similarity between `uses_only` and `uses_all` that you can take
    advantage of. If you have a working version of `uses_only`, see if you can write
    a version of `uses_all` that calls `uses_only`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`uses_only`和`uses_all`之间也有相似之处，你可以加以利用。如果你已经有了`uses_only`的工作版本，看看你能否写出一个调用`uses_only`的`uses_all`版本。'
- en: 7.9.7\. Exercise[#](#id5 "Link to this heading")
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.9.7\. 练习[#](#id5 "跳转到此标题")
- en: If you got stuck on the previous question, try asking a virtual assistant, “Given
    a function, `uses_only`, which takes two strings and checks that the first uses
    only the letters in the second, use it to write `uses_all`, which takes two strings
    and checks whether the first uses all the letters in the second, allowing repeats.”
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在前一个问题上卡住了，试着向虚拟助手提问：“给定一个函数，`uses_only`，它接受两个字符串并检查第一个字符串是否只使用第二个字符串中的字母，用它来写`uses_all`，它接受两个字符串并检查第一个字符串是否使用了第二个字符串中的所有字母，允许重复字母。”
- en: Use `run_doctests` to check the answer.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`run_doctests`检查答案。
- en: 7.9.8\. Exercise[#](#id6 "Link to this heading")
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.9.8\. 练习[#](#id6 "跳转到此标题")
- en: Now let’s see if we can write `uses_all` based on `uses_any`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看是否能基于`uses_any`写出`uses_all`。
- en: Ask a virtual assistant, “Given a function, `uses_any`, which takes two strings
    and checks whether the first uses any of the letters in the second, can you use
    it to write `uses_all`, which takes two strings and checks whether the first uses
    all the letters in the second, allowing repeats.”
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 向虚拟助手提问：“给定一个函数，`uses_any`，它接受两个字符串并检查第一个字符串是否使用了第二个字符串中的任何字母，你能否用它来写`uses_all`，它接受两个字符串并检查第一个字符串是否使用了第二个字符串中的所有字母，允许重复字母。”
- en: If it says it can, be sure to test the result!
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它说可以，确保测试结果！
- en: '[PRE76]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[Think Python: 3rd Edition](https://allendowney.github.io/ThinkPython/index.html)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '[Think Python: 第3版](https://allendowney.github.io/ThinkPython/index.html)'
- en: Copyright 2024 [Allen B. Downey](https://allendowney.com)
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 版权所有 2024 [Allen B. Downey](https://allendowney.com)
- en: 'Code license: [MIT License](https://mit-license.org/)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 代码许可证：[MIT 许可证](https://mit-license.org/)
- en: 'Text license: [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 文本许可证：[创作共用署名-非商业性使用-相同方式共享 4.0 国际版](https://creativecommons.org/licenses/by-nc-sa/4.0/)
