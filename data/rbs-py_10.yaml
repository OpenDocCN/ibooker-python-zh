- en: 'Chapter 8\. User-Defined Types: Enums'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第八章。用户定义类型：枚举
- en: 'In this chapter, I’m going to focus on what a user-defined type is and cover
    the simplest user-defined data type: enumerations. I’ll discuss how to create
    an enumeration that will protect your code from common programming mistakes. I’ll
    then go over advanced features that allow you to express your ideas more clearly,
    such as creating aliases, making enumerations unique, or providing automatically
    generated values.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将专注于用户定义类型是什么，并涵盖最简单的用户定义数据类型：枚举。我将讨论如何创建一个能够防止常见编程错误的枚举。然后我会介绍一些高级特性，允许你更清晰地表达你的想法，比如创建别名、使枚举唯一，或提供自动生成的值。
- en: User-Defined Types
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户定义类型
- en: A user-defined type is a type that you, as a developer, create. You define what
    data is associated with the type and what behaviors are associated with your type.
    Each of these types should tie to a singular concept. This will help other developers
    build mental models about your codebase.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义类型是你作为开发者创建的一种类型。你定义与类型关联的数据和行为。这些类型中的每一个都应该与一个独特的概念相关联。这将帮助其他开发人员在你的代码库中建立心智模型。
- en: For instance, if I am writing restaurant point-of-sale systems, I would expect
    to come across concepts about the restaurant domain in your codebase. Concepts
    like restaurants, menu items, and tax calculations should all be naturally represented
    in code. If I were to use lists, dictionaries, and tuples instead, I’d force my
    readers to constantly reinterpret the meaning of variables to their more natural
    mappings.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我正在编写餐厅销售点系统，我期望在你的代码库中找到关于餐厅领域的概念。像餐厅、菜单项和税收计算这样的概念应该自然地在代码中表示出来。如果我使用列表、字典和元组，我会迫使读者不断重新解释变量的含义以符合其更自然的映射。
- en: Consider a simple function that calculates a total with tax. Which function
    would you rather work with?
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个简单的计算带税总额的函数。你宁愿使用哪个函数？
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: or
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By using the custom type `Restaurant`, you give readers crucial knowledge about
    the behavior of your code. Simple as it may be, it is incredibly powerful to build
    out these domain concepts. Eric Evans, author of *Domain-Driven Design*, wrote,
    “The heart of software is its ability to solve domain-related problems for its
    user.”^([1](part0012_split_011.html#idm45644744508088)) If the heart of software
    is the ability to solve domain-related problems, domain-specific abstractions
    are the blood vessels. They are the support system, the network that flows through
    your codebase, all tying back to the central life giver that is the reason your
    code exists. By building up great domain-related types, you build a healthier
    system.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用自定义类型`Restaurant`，你为读者提供了关于代码行为的重要知识。尽管它可能很简单，但构建这些领域概念是非常强大的。埃里克·埃文斯，《领域驱动设计》的作者写道：“软件的核心是解决用户的领域相关问题。”^([1](part0012_split_011.html#idm45644744508088))
    如果软件的核心是解决领域相关问题，那么领域特定的抽象就是血管。它们是支持系统，是流经你的代码库的网络，所有这些都与作为你的代码存在原因的中心生命赋予者紧密联系在一起。通过建立出色的领域相关类型，你建立了一个更健康的系统。
- en: The most readable codebases are those that can be reasoned about, and it’s easiest
    to reason about the concepts that you encounter in your day to day. Newcomers
    to the codebase will already have a leg up if they are familiar with the core
    business concepts. You’ve spent the first part of this book focusing on expressing
    intent through annotations; this next part will focus on communicating intentions
    by building a shared vocabulary and making that vocabulary available to every
    developer working in the codebase.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最可读的代码库是那些可以推理的代码库，而且最容易推理的是你日常遇到的概念。对于代码库的新手来说，如果他们熟悉核心业务概念，他们将已经占据了先机。你在本书的第一部分中专注于通过注释表达意图；接下来的部分将专注于通过建立共享词汇和使该词汇对每个在代码库中工作的开发者可用来传达意图。
- en: 'The first way you’ll learn how to map a domain concept to a type is through
    Python’s enumeration type: `Enum`.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学习如何将领域概念映射到类型的第一种方式是通过Python的枚举类型：`Enum`。
- en: Enumerations
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 枚举
- en: In some scenarios, you want a developer to pick one value from a list. Colors
    of a traffic light, pricing plans of a web service, and HTTP methods are all great
    examples of this type of relationship. To express that relationship in Python,
    you should use *enumerations*. Enumerations are a construct that let you define
    the list of values, and developers pick the specific value they want. Python first
    supported enumerations in Python 3.4.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你希望开发者从列表中选择一个值。交通灯的颜色、网络服务的定价计划和HTTP方法都是这种关系的绝佳例子。为了在Python中表达这种关系，你应该使用*枚举*。枚举是一种构造，让你定义值的列表，开发者可以选择他们想要的具体值。Python在Python
    3.4中首次支持了枚举。
- en: To illustrate what makes enumerations so special, let’s suppose you are developing
    an application that makes French cooking more accessible by providing a home-delivery
    network, from baguettes to beignets. It features a menu from which hungry users
    can select and then receive all the ingredients and cooking instructions by mail.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明列举的特殊之处，假设你正在开发一个应用程序，通过提供送货上门网络来使法国烹饪更加可访问，从长棍面包到甜甜圈。它提供了一个菜单，让饥饿的用户可以选择，然后通过邮件收到所有的配料和烹饪说明。
- en: One of the most popluar offerings in this app is the customization. Users can
    pick which meat they want, which side, and which sauce to prepare. One of the
    most essential parts of French cooking is its *mother sauces*. These five well-known
    sauces are building blocks for countless other sauces, and I want to programmatically
    add new ingredients to these, creating what’s known as *daughter sauces*. This
    way, users can learn how French sauces are categorized when they order their food.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用程序中最受欢迎的服务之一是定制化。用户可以选择他们想要的肉类、配菜和调料来准备食物。法国烹饪最重要的部分之一是*母酱汁*。这五种广为人知的酱汁是无数其他酱汁的基础，我希望能够通过程序向其中添加新的成分，创造出所谓的*女儿酱汁*。这样，用户在点餐时就可以了解法国酱汁的分类。
- en: 'Let’s suppose I represent the mother sauces as a Python tuple:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我用 Python 元组表示母酱汁：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What does this tuple communicate to other developers?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个元组向其他开发者传达了什么信息？
- en: This collection is immutable.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个集合是不可变的。
- en: They can iterate over this collection to get all the sauces.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们可以遍历这个集合来获取所有的酱汁。
- en: They can retrieve a specific element through static indexing.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们可以通过静态索引检索特定的元素。
- en: 'The immutability and retrieval properties are important for my application.
    I don’t want to add or subtract any mother sauces at runtime (such would be culinary
    blasphemy). Using a tuple makes it clear to future developers that they should
    not change these values. Retrieval lets me choose just one sauce, although it
    is a bit clunky. Every time I need to reference an element, I can do so through
    static indexing:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 不可变性和检索属性对我的应用程序很重要。我不希望在运行时添加或删除任何母酱汁（这样做将是烹饪的亵渎）。使用元组清楚地告诉未来的开发者，他们不应该更改这些值。检索让我可以选择只有一个酱汁，尽管有点笨拙。每次我需要引用一个元素时，我可以通过静态索引来做到：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This unfortunately does not communicate intent. Every time a developer sees
    this, they must remember that `2` means `"Espagnole"`. Constantly correlating
    numbers to sauces wastes time. This is fragile and will invariably cause mistakes.
    Should somebody alphabetically sort the sauces, the indices will change, breaking
    the code. Statically indexing into this tuple will not help the robustness of
    this code.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这并没有传达出意图。每次开发者看到这个，他们必须记住`2`代表着`"Espagnole"`。不断将数字与酱汁对应会浪费时间。这是脆弱的，必然会导致错误。如果有人对酱汁进行字母排序，索引将会改变，破坏代码。通过静态索引访问这个元组也不会增强代码的健壮性。
- en: 'To combat this, I’ll make aliases for each of these:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应对这个问题，我将为每一个添加别名：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That’s a bit more code, and still doesn’t make it any easier to index into that
    tuple. Furthermore, there is still a lingering issue in calling code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是更多的代码，但仍然不能使索引到这个元组变得更容易。此外，调用代码仍然存在一个潜在的问题。
- en: 'Consider a function that creates a daughter sauce:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个创建女儿酱汁的函数：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: I want you to pause a moment and consider what this function tells future developers.
    I’m purposely leaving out the implementation, because I want to talk about first
    impressions; the function signature is the first thing a developer will see. Based
    on the function signature alone, does this function properly convey what is allowed?
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你停顿一下，考虑这个函数告诉未来开发者什么。我特意省略了实现部分，因为我想讨论的是第一印象；函数签名是开发者看到的第一件事。仅仅基于函数签名，这个函数是否适当地传达了允许什么？
- en: 'Future developers would come across code like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 未来的开发者可能会遇到类似这样的代码：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Or:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: And here lies the crux of the problem. On the happy path, a developer can use
    the predefined variables. But if somebody accidentally were to use the wrong sauce
    (after all, `create_daughter_sauce` expects a string, which could be anything),
    you soon get unwanted behavior. Remember, I am talking about developers looking
    at this months (or potentially years) later. They have been tasked to add a feature
    to the codebase, even though they are not familiar with it. By choosing a string
    type, I’m just inviting the wrong values to be supplied later.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是问题的关键所在。在正常情况下，开发人员可以使用预定义的变量。但是，如果有人意外地使用了错误的酱料（毕竟，`create_daughter_sauce`期望一个字符串，它可以是任何东西），很快就会出现意外的行为。请记住，我说的是几个月甚至几年后的开发人员。他们被要求向代码库添加一个功能，尽管他们对其不熟悉。通过选择字符串类型，我只是在邀请以后提供错误的值。
- en: Warning
  id: totrans-36
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Even honest mistakes have ramifications. Did you catch that I left an accent
    off of the “e” in `Velouté`? Have fun debugging that in production.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是诚实的错误也会产生后果。你有没有注意到我在`Velouté`的“e”上漏掉了重音符号？在生产环境中调试这个问题会很有趣。
- en: Instead, you want to find a way to communicate that you want a very specific,
    restricted set of values in specific locations. Since you’re in a chapter about
    “enumerations” and I haven’t shown them yet, I’m sure you can guess what the solution
    is.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，你希望找到一种方式来传达你希望在特定位置使用非常具体和受限制的一组值。既然你现在在“枚举”章节中，而我还没有展示它们，我相信你可以猜到解决方案是什么。
- en: Enum
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 枚举
- en: 'Here’s an example of Python’s enumeration, `Enum`, in action:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是Python枚举`Enum`的示例：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To access specific instances, you can just do:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问特定的实例，你只需：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is near identical to the string aliases, but there are a few extra benefits.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这与字符串别名几乎相同，但有一些额外的好处。
- en: 'You cannot accidentally create a `MotherSauce` with an unexpected value:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你不会意外创建`MotherSauce`并获得意外值：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: That will certainly limit errors (either with invalid sauces or innocent typos).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这肯定会限制错误（无论是无效的酱料还是无辜的拼写错误）。
- en: If you wanted to print out all the values of the enumeration, you can simply
    iterate over the enumeration (no need to create a separate list).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想打印出枚举的所有值，你可以简单地迭代枚举（无需创建单独的列表）。
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, and crucially, you can communicate your intent in functions that use
    this `Enum`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但至关重要的是，你可以在使用这个`Enum`的函数中传达你的意图：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This tells all the developers looking at this function that they should be passing
    in a `MotherSauce` enumeration, and not just any old string. It becomes much harder
    to introduce typos or incorrect values. (A user can still pass wrong values if
    they really want to, but they would be in direct violation of what’s expected,
    which is easier to catch—I covered how to catch these errors in [Part I](part0004.html#part_1).)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉所有查看此函数的开发人员，他们应该传入一个`MotherSauce`枚举，而不仅仅是任意的字符串。这样一来，要引入拼写错误或不正确的值就变得更加困难。（用户仍然可以传递错误的值，如果他们真的想这样做，但这将直接违反预期的行为，这更容易捕捉——我在[第一部分](part0004.html#part_1)中讲解了如何捕捉这些错误。）
- en: Discussion Topic
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论主题
- en: What sets of data in your codebase would benefit from an `Enum`? Do you have
    areas of code where developers pass in the wrong value, even though it is the
    right type? Discuss where enumerations would improve your codebase.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码库中哪些数据集会受益于`Enum`？你有没有开发人员在尽管类型正确但传入了错误的值的代码区域？讨论一下枚举如何改进你的代码库。
- en: When Not to Use
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不适用时机
- en: Enumerations are great for communicating a static set of choices for users.
    You don’t want to use them where your options are determined at runtime, as you
    lose a lot of their benefits around communicating intent and tooling (it is much
    tougher for a reader of code to know what values are possible if they can change
    in every run-through). If you find yourself in this situation, I recommend a dictionary,
    which offers a natural mapping between two values that can be changed at runtime.
    You will need to perform membership checks if you need to restrict what values
    a user can select, though.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举类型非常适合用于向用户传达静态选择集。如果选项在运行时确定，就不应使用枚举，因为这样会失去它们在传达意图和工具方面的许多优势（如果每次运行都可以更改，代码阅读者很难知道可能的值是什么）。如果你发现自己处于这种情况下，我建议使用字典，它提供了两个值之间的自然映射，可以在运行时更改。但如果你需要限制用户可以选择的值，你将需要执行成员资格检查。
- en: Advanced Usage
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级用法
- en: Once you master the basics of enumerations, there are quite a few things you
    can do to even further refine your usage. Remember, the more specific type you
    choose, the more specific information you convey.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦掌握了枚举的基础知识，您可以做很多事情来进一步完善您的使用。记住，您选择的类型越具体，传达的信息就越具体。
- en: Automatic Values
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动值
- en: For some enumerations, you might want to explicitly specify that you don’t care
    about the value that the enumeration is tied to. This tells users that they should
    not rely on these values. For this, you can use the `auto()` function.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些枚举，您可能希望明确指定您不关心枚举所关联的值。这告诉用户他们不应依赖这些值。为此，您可以使用`auto()`函数。
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'By default, `auto()` will select monotonically increasing values (1, 2, 3,
    4, 5…). If you would like to control what values are set, you should implement
    a `_generate_next_value_()` function:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`auto()`将选择单调递增的值（1、2、3、4、5...）。如果您想控制设置的值，您应该实现一个`_generate_next_value_()`函数：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Very rarely will you see `_generate_next_value_` defined like this, right inside
    of an enumeration with values. If `auto` is used to indicate that the value doesn’t
    matter, then `_generate_next_value_` indicates that you want very specific values
    for `auto`. It feels contradictory. This is why you typically use `_generate_next_value_`
    in base `Enum` classes, which are enumerations that are meant to be subtyped and
    don’t include any values. The `Flag` class, which you’ll see next, is a good example
    of a base class.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 很少会看到`_generate_next_value_`像这样定义，直接在具有值的枚举内部。如果`auto`用于指示值无关紧要，那么`_generate_next_value_`指示您希望`auto`的非常具体的值。这感觉矛盾。这就是为什么通常在基本`Enum`类中使用`_generate_next_value_`，这些枚举意味着要被子类型化，并且不包括任何值。接下来您将看到的`Flag`类就是一个很好的基类示例。
- en: Flags
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标志
- en: 'Now that you have the mother sauces represented in an `Enum`, you decide that
    you are ready to start serving meals with those sauces. But before you begin,
    you want to be conscious of your customers’ allergies, so you decide to represent
    allergy information for each dish. With your newfound knowledge of `auto()`, setting
    up the `Allergen` enumeration is a piece of cake:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经用`Enum`表示了主酱，您决定准备开始用这些酱料来供应餐点。但在您开始之前，您希望意识到顾客的过敏反应，因此您决定为每道菜设置过敏原信息。有了您对`auto()`的新知识，设置`Allergen`枚举就像小菜一碟：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And for a recipe, you might track a list of allergens as such:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于食谱，您可能会像这样跟踪一组过敏原：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This tells readers that a collection of allergens will be unique, and that there
    might be zero, one, or many allergens. This is exactly what you want. But what
    if I wanted all allergen information in the system to be tracked like this? I
    don’t want to rely on every developer remembering to use a set (just one use of
    a list or dictionary can invite wrong behavior). I want some way to represent
    a grouping of unique enumeration values universally.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉读者过敏原的集合将是唯一的，并且可能有零个、一个或多个过敏原。这正是您想要的。但如果我希望系统中的所有过敏原信息都像这样被跟踪呢？我不希望依赖每个开发人员记住使用集合（仅使用列表或字典的一种用法可能会引发错误行为）。我希望有某种方式通用地表示一组唯一的枚举值的集合。
- en: 'The `enum` module gives you a handy base class to use—`Flag`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`enum`模块为您提供了一个便利的基类可供使用——`Flag`：'
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This lets you perform bitwise operations to combine allergens or check if certain
    allergens are present.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许您执行位操作来组合过敏原或检查特定过敏原是否存在。
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This is great when you want to represent a selection of values (say, something
    that was set through a multi–drop down or a bitmask). There are some limitations,
    though. The values must support the bitwise operations (|, &, etc.). Strings would
    be an example of types that don’t, while integers do. Furthermore, the values
    cannot overlap when bitwise operations are performed. For example, you cannot
    use the values from 1 through 4 (inclusive) for your `Enum` because 4 will “bitwise
    and” for the values 1, 2, and 4 which is probably not what you want. `auto()`
    takes care of this for you because the `_generate_next_value_` of `Flag` automatically
    uses powers of 2.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当您希望表示一组值（比如通过多选下拉或位掩码设置的值）时，这非常有用。但也有一些限制。这些值必须支持位操作（|、&等）。字符串将是不支持的类型的示例，而整数则支持。此外，在进行位操作时，这些值不能重叠。例如，您不能使用1到4（包括）的值用于您的`Enum`，因为4会对1、2和4的值进行“位与”操作，这可能不是您想要的。`auto()`会为您处理这些问题，因为`Flag`的`_generate_next_value_`自动使用2的幂。
- en: '[PRE19]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The use of flags can express what you mean in very specific circumstances, but
    if you ever want more control of your values, or are enumerating values that don’t
    support bitwise operations, use a nonflag `Enum`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用标志可以在非常具体的情况下表达你的意图，但如果你希望更好地控制你的值，或者在列举不支持按位操作的值时，请使用非标志的`Enum`。
- en: As a final note, you are free to create your own aliases for built-in multiple
    enumeration selections, as I did with `SEAFOOD` and `ALL_NUTS` above.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要注意的是，你可以自由地为内置的多个枚举选择创建自己的别名，就像我上面为`SEAFOOD`和`ALL_NUTS`所做的那样。
- en: Integer Conversion
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 整数转换
- en: There are two more special case enumerations called `IntEnum` and `IntFlag`.
    These map to `Enum` and `Flag`, respectively, but allow degradation to raw integers
    for comparison. I actually do not recommend using these features, and it’s important
    to understand why. First, let’s look at the problem they intend to solve.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 还有两个特殊情况的枚举称为`IntEnum`和`IntFlag`。它们分别映射到`Enum`和`Flag`，但允许降级到原始整数进行比较。实际上，我不推荐使用这些特性，并且了解其原因是非常重要的。首先，让我们看看它们想解决的问题。
- en: In French cooking, the measurement of certain ingredients is paramount to success,
    so you need to make sure you have that covered as well. You create a metric and
    imperial liquid measure (you want to work internationally, after all) as enumerations,
    but are dismayed to find that you can’t just compare your enumerations to integers.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在法国烹饪中，某些成分的测量对成功至关重要，因此您需要确保这一点得到了覆盖。您创建了米制和英制液体测量（毕竟您希望国际化工作）作为枚举，但却发现您无法将您的枚举值简单地与整数进行比较。
- en: 'This code doesn’t work:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码不起作用：
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'But, if you were to subclass from `IntEnum`, it works just fine:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你从`IntEnum`派生子类，它就可以正常工作：
- en: '[PRE21]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'An `IntFlag` performs similarly. You’ll see this more when interoperating between
    systems or possibly hardware. If you were not using an `IntEnum`, you would need
    to do something like:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`IntFlag`的表现类似。当在系统之间或可能是硬件之间进行互操作时，您会更频繁地看到这一点。如果没有使用`IntEnum`，你可能需要做类似以下的事情：'
- en: '[PRE22]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The convenience of using an `IntEnum` does not often outweigh the drawback of
    being a weaker type. Any implicit conversion to integer hides the true intent
    of the class. Since implicit integer conversion happens, you might run into a
    copy/paste mistake (we’ve all made those, right?) in situations that don’t do
    what you want.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`IntEnum`的便利性往往不超过它作为一种较弱类型所带来的弊端。任何对整数的隐式转换都隐藏了类的真正意图。由于隐式整数转换的发生，您可能会在不想要的情况下遇到复制/粘贴错误（我们都曾经犯过这种错误，对吧？）。
- en: 'Consider:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑：
- en: '[PRE23]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Suppose somebody were to mistakenly do the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有人错误地执行了以下操作：
- en: '[PRE24]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If this makes it into production, it will be just fine, no exceptions thrown,
    all tests pass. However, once the `Kitchenware` enumeration changes (maybe it
    adds a `BOWL` into value `8` and moves `CUP` to `10`), this code will now do the
    exact opposite of what it was supposed to. `Kitchenware.CUP` is no longer the
    same as an `ImperialLiquidMeasure.CUP` (there’s no reason they should be linked);
    then you’ll start pouring into larger vessels instead of smaller vessels, which
    probably will create an overflow (of your liquid, not of an integer).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这段代码进入生产环境，一切都会很顺利，没有异常抛出，所有测试都通过了。然而，一旦`Kitchenware`枚举发生变化（也许将一个`BOWL`添加到值`8`，并将`CUP`移动到`10`），这段代码现在会做完全相反于预期的事情。`Kitchenware.CUP`不再与`ImperialLiquidMeasure.CUP`相同（它们没有理由关联）；然后你将开始向更大的容器倾倒，这可能会造成溢出（液体的溢出，而不是整数的溢出）。
- en: 'This is a textbook example of how unrobust code can lead to subtle mistakes
    that won’t become an issue until much later in the codebase’s life. This may be
    a quick fix, but the bug incurs a very real cost. Tests fail (or worse, a customer
    complains about pouring the wrong amount of liquid into a vessel), someone has
    to go crawl through the source code, find the bug, fix it, then take a long coffee
    break after wondering how this ever worked. All because somebody decided to be
    lazy and use an `IntEnum` so that they wouldn’t have to type out `.value` over
    and over again. So pay your future maintainers a favor: don’t use `IntEnum` unless
    you absolutely have to for legacy purposes.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个关于不够健壮的代码如何导致微妙错误的教科书案例，这些错误直到代码库的后期才会成为问题。这可能是一个快速修复，但这个bug却带来了很大的实际成本。测试失败（或更糟的是，客户抱怨将错误的液体量倒入容器），有人必须爬行源代码，找到bug，修复它，然后在思考这为何之前如此工作后，长时间的咖啡休息。所有这些都是因为有人决定懒惰地使用`IntEnum`，这样他们就不必一遍又一遍地输入`.value`。所以请为你未来的维护者着想：除非出于遗留目的，否则不要使用`IntEnum`。
- en: Unique
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 独特的
- en: One great feature of enumerations is the ability to alias values. Let’s go back
    to the `MotherSauce` enumeration. Maybe the codebase developed on French keyboards
    needs to be adapted to US keyboards, where the keyboard layout is not conducive
    to adding accent marks over vowels. Removing the accents to anglicize the native
    French spelling is a nonstarter for many of the developers (they insist we use
    the original spelling). To avoid an international incident, I will add an alias
    to some of the sauces.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举的一个很棒的特性是能够给值取别名。让我们回到`MotherSauce`枚举。也许在法国键盘开发的代码库需要适应美国键盘，其中键盘布局不利于在元音字母上添加重音符号。删除重音以使法语原生拼写变得类似英语是许多开发人员不愿意接受的（他们坚持使用原始拼写）。为了避免国际事件，我将为一些酱汁添加别名。
- en: '[PRE25]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: With this, there was much rejoicing from all keyboard owners. Enumerations absolutely
    allow this sort of behavior; they can have duplicate values as long as the keys
    are not duplicated.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此事，所有键盘所有者都欢欣鼓舞。枚举绝对允许这种行为；它们可以具有重复值，只要键不重复即可。
- en: However, there are cases where you want to force uniqueness on the values. Perhaps
    you are relying on the enumeration to always contain a set number of values, or
    perhaps it messes with some of the string representations that are shown to customers.
    No matter the case, if you want to preserve uniqueness in your `Enum`, simply
    add a `@unique` decorator.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有些情况下，您可能希望对值强制唯一性。也许您依赖枚举始终包含一组固定数量的值，或者可能会影响向客户显示的某些字符串表示。无论情况如何，如果要在您的`Enum`中保持唯一性，只需添加一个`@unique`装饰器。
- en: '[PRE26]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Creating aliases is more likely than preserving uniqueness in most of the use
    cases I’ve come across, so I default to making enumerations nonunique at first,
    and only adding the unique decorator when needed.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数我遇到的用例中，创建别名比保持唯一性更有可能，因此我默认首先使枚举非唯一，并仅在需要时添加唯一装饰器。
- en: Closing Thoughts
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结思考
- en: Enumerations are simple, and often overlooked as a powerful communication method.
    Any time that you want to represent a single value from a static collection of
    values, an enumeration should be your go-to user-defined type. It’s easy to define
    and use them. They offer a wealth of operations, including iteration, bitwise
    operations (in the case of `Flag` enumerations), and control over uniqueness.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举很简单，通常被忽视作为一种强大的通信方法。每当您想要从静态值集合中表示单个值时，枚举应该是您首选的用户定义类型。定义和使用它们都很容易。它们提供了丰富的操作，包括迭代，在位操作中（在`Flag`枚举的情况下），以及对唯一性的控制。
- en: 'Remember these key limitations:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 记住这些关键限制：
- en: Enumerations are not meant for dynamic key-value mappings that change at runtime.
    Use a dictionary for this.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举不适用于在运行时动态更改的键值映射。使用字典来实现此功能。
- en: '`Flag` enumerations only work with values that support bitwise operations with
    nonoverlapping values.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Flag`枚举仅适用于支持与非重叠值进行位操作的值。'
- en: Avoid `IntEnum` and `IntFlag` unless absolutely necessary for system interoperability.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免除非绝对必要与系统互操作性，否则使用`IntEnum`和`IntFlag`。
- en: 'Next up, I will explore another user-defined type: a `dataclass`. While enumerations
    are great at specifying a relationship about a set of values in just one variable,
    data classes define relationships between multiple variables.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我将探索另一种用户定义类型：一个`dataclass`。虽然枚举在只需一个变量就能指定一组值的关系方面非常出色，但数据类定义了多个变量之间的关系。
- en: '^([1](part0012_split_001.html#idm45644744508088-marker)) Eric Evans. *Domain-Driven
    Design: Tackling Complexity in the Heart of Software*. Upper Saddle River, NJ:
    Addison-Wesley Professional, 2003.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '^([1](part0012_split_001.html#idm45644744508088-marker)) Eric Evans. *领域驱动设计：软件核心复杂性的应对*.
    Upper Saddle River, NJ: Addison-Wesley Professional, 2003.'
