["```py\ndef create_author_count_mapping(cookbooks: list) -> dict:\n    counter = defaultdict(lambda: 0)\n    for book in cookbooks:\n        counter[book.author] += 1\n    return counter\n```", "```py\nAuthorToCountMapping = dict[str, int]\ndef create_author_count_mapping(\n\t\t\t\tcookbooks: list[Cookbook]\n                               ) -> AuthorToCountMapping:\n    counter = defaultdict(lambda: 0)\n    for book in cookbooks:\n        counter[book.author] += 1\n    return counter\n```", "```py\ndef adjust_recipe(recipe, servings):\n    \"\"\"\n Take a meal recipe and change the number of servings\n :param recipe: A list, where the first element is the number of servings,\n and the remainder of elements follow the (name, amount, unit)\n format, such as (\"flour\", 1.5, \"cup\")\n :param servings: the number of servings\n :return list: a new list of ingredients, where the first element is the\n number of servings\n \"\"\"\n    new_recipe = [servings]\n    old_servings = recipe[0]\n    factor = servings / old_servings\n    recipe.pop(0)\n    while recipe:\n            ingredient, amount, unit = recipe.pop(0)\n            # please only use numbers that will be easily measurable\n            new_recipe.append((ingredient, amount * factor, unit))\n    return new_recipe\n```", "```py\ndef adjust_recipe(recipe, servings):\n    \"\"\"\n Take a meal recipe and change the number of servings\n :param recipe: A list, where the first element is the number of servings,\n and the remainder of elements follow the (name, amount, unit)\n format, such as (\"flour\", 1.5, \"cup\")\n :param servings: the number of servings\n :return list: a new list of ingredients, where the first element is the\n number of servings\n \"\"\"\n    # ...\n```", "```py\nIngredient = tuple[str, int, str] # (name, quantity, units)\nRecipe = list[Union[int, Ingredient]] # the list can be servings or ingredients\ndef adjust_recipe(recipe: Recipe, servings):\n    # ...\n```", "```py\nCookbook = tuple[str, int] # name, page count\n```", "```py\nfood_lab: Cookbook = (\"The Food Lab\", 958)\nodd_bits: Cookbook = (\"Odd Bits\", 248)\n\nprint(food_lab[0])\n>>> \"The Food Lab\"\n\nprint(odd_bits[1])\n>>> 248\n```", "```py\nfood_lab = {\n    \"name\": \"The Food Lab\",\n    \"page_count\": 958\n}\n```", "```py\ndef print_cookbook(cookbook: dict[str, Union[str,int]])\n    # ...\n```", "```py\nnutrition_information = get_nutrition_from_spoonacular(recipe_name)\n# print grams of fat in recipe\nprint(nutrition_information[\"fat\"][\"value\"])\n```", "```py\nfrom typing import TypedDict\nclass Range(TypedDict):\n    min: float\n    max: float\n\nclass NutritionInformation(TypedDict):\n    value: int\n    unit: str\n    confidenceRange95Percent: Range\n    standardDeviation: float\n\nclass RecipeNutritionInformation(TypedDict):\n    recipes_used: int\n    calories: NutritionInformation\n    fat: NutritionInformation\n    protein: NutritionInformation\n    carbs: NutritionInformation\n\nnutrition_information:RecipeNutritionInformation = \\\n\tget_nutrition_from_spoonacular(recipe_name)\n```", "```py\ndef reverse(coll: list) -> list:\n    return coll[::-1]\n```", "```py\nfrom typing import TypeVar\nT = TypeVar('T')\ndef reverse(coll: list[T]) -> list[T]:\n    return coll[::-1]\n```", "```py\nfrom collections import defaultdict\nfrom typing import Generic, TypeVar\n\nNode = TypeVar(\"Node\")\nEdge = TypeVar(\"Edge\")\n\n# directed graph\nclass Graph(Generic[Node, Edge]):\n    def __init__(self):\n        self.edges: dict[Node, list[Edge]] = defaultdict(list)\n\n    def add_relation(self, node: Node, to: Edge):\n        self.edges[node].append(to)\n\n    def get_relations(self, node: Node) -> list[Edge]:\n        return self.edges[node]\n```", "```py\ncookbooks: Graph[Cookbook, Cookbook] = Graph()\nrecipes: Graph[Recipe, Recipe] = Graph()\n\ncookbook_recipes: Graph[Cookbook, Recipe] = Graph()\n\nrecipes.add_relation(Recipe('Pasta Bolognese'),\n                     Recipe('Pasta with Sausage and Basil'))\n\ncookbook_recipes.add_relation(Cookbook('The Food Lab'),\n                              Recipe('Pasta Bolognese'))\n```", "```py\ncookbooks.add_relation(Recipe('Cheeseburger'), Recipe('Hamburger'))\n```", "```py\ncode_examples/chapter5/invalid/graph.py:25:\n    error: Argument 1 to \"add_relation\" of \"Graph\" has\n           incompatible type \"Recipe\"; expected \"Cookbook\"\n```", "```py\n>>> nutrition = NutritionalInformation()\n>>> nutrition[\"arugula\"] = get_nutrition_information(\"arugula\")\n>>> print(nutrition[\"rocket\"]) # arugula is the same as rocket\n{\n    \"name\": \"arugula\",\n    \"calories_per_serving\": 5,\n    # ... snip ...\n}\n```", "```py\nclass NutritionalInformation(dict): ![1](../images/00002.gif)\n    def __getitem__(self, key): ![2](../images/00005.gif)\n        try:\n            return super().__getitem__(key) ![3](../images/00006.gif)\n        except KeyError:\n            pass\n        for alias in get_aliases(key):\n            try: ![4](../images/00007.gif)\n                return super().__getitem__(alias)\n            except KeyError:\n                pass\n        raise KeyError(f\"Could not find {key} or any of its aliases\") ![5](../images/00008.gif)\n```", "```py\n# arugula is the same as rocket\n>>> nutrition = NutritionalInformation()\n>>> nutrition[\"arugula\"] = get_nutrition_information(\"arugula\")\n>>> print(nutrition.get(\"rocket\", \"No Ingredient Found\"))\n\"No Ingredient Found\"\n```", "```py\nfrom collections import UserDict\nclass NutritionalInformation(UserDict):\n    def __getitem__(self, key):\n        try:\n            return self.data[key]\n        except KeyError:\n            pass\n        for alias in get_aliases(key):\n            try:\n                return self.data[alias]\n            except KeyError:\n                pass\n        raise KeyError(f\"Could not find {key} or any of its aliases\")\n```", "```py\n# arugula is the same as rocket\n>>> print(nutrition.get(\"rocket\", \"No Ingredient Found\"))\n{\n    \"name\": \"arugula\",\n    \"calories_per_serving\": 5,\n    # ... snip ...\n}\n```", "```py\nimport collections\nclass AliasedIngredients(collections.abc.Set):\n    def __init__(self, ingredients: set[str]):\n        self.ingredients = ingredients\n\n    def __contains__(self, value: str):\n        return value in self.ingredients or any(alias in self.ingredients\n                                                for alias in get_aliases(value))\n\n    def __iter__(self):\n        return iter(self.ingredients)\n\n    def __len__(self):\n        return len(self.ingredients)\n\n>>> ingredients = AliasedIngredients({'arugula', 'eggplant', 'pepper'})\n>>> for ingredient in ingredients:\n>>>    print(ingredient)\n'arugula'\n'eggplant'\n'pepper'\n\n>>> print(len(ingredients))\n3\n\n>>> print('arugula' in ingredients)\nTrue\n\n>>> print('rocket' in ingredients)\nTrue\n\n>>> list(ingredients | AliasedIngredients({'garlic'}))\n['pepper', 'arugula', 'eggplant', 'garlic']\n```", "```py\ndef print_items(items):\n    for item in items:\n        print(item)\n\nprint_items([1,2,3])\nprint_items({4, 5, 6})\nprint_items({\"A\": 1, \"B\": 2, \"C\": 3})\n```", "```py\ndef print_items(items: collections.abc.Iterable):\n    for item in items:\n        print(item)\n```"]