- en: Chapter 15\. Files
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 15 章\. 文件
- en: Preview
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预览
- en: Besides fielding API requests and traditional content like HTML, web servers
    are expected to handle file transfers in both directions. Very large files may
    need to be transferred in *chunks* that don’t use too much of the system’s memory.
    You can also provide access to a directory of files (and subdirectories, to any
    depth) with `Stati⁠c​Files`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 除了处理 API 请求和传统的内容（如 HTML）之外，Web 服务器还需要处理双向文件传输。非常大的文件可能需要以不占用太多系统内存的*块*的形式传输。您还可以通过
    `StaticFiles` 提供对文件目录（以及任意深度的子目录）的访问。
- en: Multipart Support
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多部分支持
- en: 'To handle large files, FastAPI’s uploading and downloading features need these
    extra modules:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理大文件，FastAPI 的上传和下载功能需要这些额外的模块：
- en: '[Python-Multipart](https://oreil.ly/FUBk7)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[Python-Multipart](https://oreil.ly/FUBk7)'
- en: '`pip install python-multipart`'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip install python-multipart`'
- en: '[aio-files](https://oreil.ly/OZYYR)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[aio-files](https://oreil.ly/OZYYR)'
- en: '`pip install aiofiles`'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip install aiofiles`'
- en: Uploading Files
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件上传
- en: FastAPI targets API development, and most of the examples in this book have
    used JSON requests and responses. But in the next chapter you’ll see forms, which
    are handled differently. This chapter covers files, which are treated like forms
    in some ways.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 的目标是 API 开发，本书中大多数示例都使用了 JSON 请求和响应。但在下一章中，您将看到处理方式不同的表单。本章涵盖了文件，它在某些方面被视为表单处理。
- en: 'FastAPI offers two techniques for file uploads: `File()` and `UploadFile`.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 提供了两种文件上传技术：`File()` 和 `UploadFile`。
- en: File()
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: File()
- en: '`File()` is used as the type for a direct file upload. Your path function may
    be synchronous (`def`) or asynchronous (`async def`), but the asynchronous version
    is better because it won’t tie up your web server while the file is uploading.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`File()` 用作直接文件上传的类型。您的路径函数可以是同步 (`def`) 或异步 (`async def`) 的，但是异步版本更好，因为它在文件上传时不会占用您的
    Web 服务器。'
- en: FastAPI will pull up the file in chunks and reassemble it in memory, so `File()`
    should be used for only relatively small files. Instead of assuming that the input
    is JSON, FastAPI encodes a file as a form element.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 将以块的形式拉取文件并将其重新组装到内存中，因此 `File()` 应仅用于相对较小的文件。FastAPI 不假定输入为 JSON，而是将文件编码为表单元素。
- en: Let’s write the code to request a file and test it. You can grab any file on
    your machine to test with, or download one from a site like [Fastest Fish](https://oreil.ly/EnlH-).
    I grabbed a 1 KB file from there and saved it locally as *1KB.bin*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写请求文件并进行测试的代码。您可以选择您的机器上的任何文件进行测试，或者从网站（如 [Fastest Fish](https://oreil.ly/EnlH-)）下载一个文件进行测试。我从那里抓取了一个
    1 KB 的文件并将其保存到本地为 *1KB.bin*。
- en: In [Example 15-1](#ex-15-1), add these lines to your top *main.py*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [示例 15-1](#ex-15-1) 中，将以下行添加到你的 *main.py* 的顶部。
- en: Example 15-1\. Handle a small file upload with FastAPI
  id: totrans-17
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 15-1\. 使用 FastAPI 处理小文件上传
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After Uvicorn restarts, try an HTTPie test in [Example 15-2](#ex-15-2).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Uvicorn 重新启动后，尝试在 [示例 15-2](#ex-15-2) 中进行 HTTPie 测试。
- en: Example 15-2\. Upload a small file with HTTPie
  id: totrans-20
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 15-2\. 使用 HTTPie 上传小文件
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here are a few notes on this test:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个测试的一些注意事项：
- en: You need to include `-f` (or `--form`), because files are uploaded like forms,
    not as JSON text.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要包括 `-f`（或 `--form`），因为文件是以表单形式而不是 JSON 文本上传的。
- en: '`small_file@1KB.bin`:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`small_file@1KB.bin`:'
- en: '`small_file`'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`small_file`'
- en: Matches the variable name `small_file` in the FastAPI path function in [Example 15-1](#ex-15-1)
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匹配 FastAPI 路径函数中的变量名 `small_file`，参见 [示例 15-1](#ex-15-1)
- en: '`@`'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`@`'
- en: HTTPie’s shorthand to make a form
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: HTTPie 的快捷方式来制作表单
- en: '`1KB.bin`'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`1KB.bin`'
- en: The file that is being uploaded
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正在上传的文件
- en: '[Example 15-3](#ex-15-3) is an equivalent programmatic test.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 15-3](#ex-15-3) 是一个等价的编程测试。'
- en: Example 15-3\. Upload a small file with Requests
  id: totrans-32
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 15-3\. 使用 Requests 上传小文件
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: UploadFile
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UploadFile
- en: For large files, it’s better to use `UploadFile`. This creates a Python `SpooledTemporaryFile`
    object, mostly on the server’s disk instead of in memory. This is a Python *file-like*
    object, which supports the methods `read()`, `write()`, and `seek()`. [Example 15-4](#ex-15-4)
    shows this, and also uses `async def` instead of `def` to avoid blocking the web
    server while file pieces are uploading.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大文件，最好使用 `UploadFile`。这将在服务器的磁盘上创建一个 Python `SpooledTemporaryFile` 对象，而不是在内存中。这是一个类似于
    Python 文件的对象，支持 `read()`、`write()` 和 `seek()` 方法。[示例 15-4](#ex-15-4) 展示了这一点，并且还使用了
    `async def` 而不是 `def`，以避免在上传文件片段时阻塞 Web 服务器。
- en: Example 15-4\. Upload a big file with FastAPI (add to main.py)
  id: totrans-36
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 15-4\. 使用 FastAPI 上传大文件（添加到 *main.py*）
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-38
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '`File()` created a `bytes` object and needed the parentheses. `UploadFile`
    is a different class of object.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`File()` 创建了一个 `bytes` 对象并需要括号。`UploadFile` 是一个不同类的对象。'
- en: If Uvicorn’s starter motor isn’t worn out yet, it’s test time. This time, Examples
    [15-5](#ex-15-5) through [15-6](#ex-15-6) use a 1 GB file (*1GB.bin*) that I grabbed
    from Fastest Fish.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Uvicorn 的起动电机还没磨损，现在是测试时间了。这次，示例 [15-5](#ex-15-5) 到 [15-6](#ex-15-6) 使用了一个来自
    Fastest Fish 的 1 GB 文件 (*1GB.bin*)。
- en: Example 15-5\. Test a big file upload with HTTPie
  id: totrans-41
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 15-5\. 使用 HTTPie 测试大文件上传
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Example 15-6\. Test a big file upload with Requests
  id: totrans-43
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 15-6\. 使用 Requests 测试大文件上传
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Downloading Files
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载文件
- en: Sadly, gravity doesn’t make files download faster. Instead, we’ll use equivalents
    of the upload methods.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，重力不会使文件下载更快。相反，我们将使用类似于上传方法的等效方法。
- en: FileResponse
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FileResponse
- en: First, in [Example 15-7](#ex-15-7), is the all-at-once version, `FileResponse`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 [示例 15-7](#ex-15-7) 中是一次性的版本，`FileResponse`。
- en: Example 15-7\. Download a small file with `FileResponse` (add to main.py)
  id: totrans-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 15-7\. 使用 `FileResponse` 下载小文件（添加到 main.py）
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There’s a test around here somewhere. First, put the file *1KB.bin* in the same
    directory as *main.py*. Now, run [Example 15-8](#ex-15-8).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这里大概有个测试。首先，将文件 *1KB.bin* 放到与 *main.py* 相同的目录下。然后，运行 [示例 15-8](#ex-15-8)。
- en: Example 15-8\. Download a small file with HTTPie
  id: totrans-52
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 15-8\. 使用 HTTPie 下载小文件
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you don’t trust that suppression message, [Example 15-9](#ex-15-9) pipes
    the output to a utility like `wc` to ensure that you got 1,000 bytes back.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不信任那个抑制消息，[示例 15-9](#ex-15-9) 将输出传递到像 `wc` 这样的实用程序，以确保你收到了 1,000 字节。
- en: Example 15-9\. Download a small file with HTTPie, with byte count
  id: totrans-55
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 15-9\. 使用 HTTPie 下载小文件，并计算字节数
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: StreamingResponse
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: StreamingResponse
- en: Similar to `FileUpload`, it’s better to download large files with `StreamingResponse`,
    which returns the file in chunks. [Example 15-10](#ex-15-10) shows this, with
    an `async def` path function to avoid blocking when the CPU isn’t being used.
    I’m skipping error checking for now; if the file `path` doesn’t exist, the `open()`
    call will raise an exception.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 `FileUpload`，最好使用 `StreamingResponse` 下载大文件，它会以块返回文件。[示例 15-10](#ex-15-10)
    展示了这一点，使用了一个 `async def` 路径函数，以避免在不使用 CPU 时阻塞。我暂时跳过错误检查；如果文件 `path` 不存在，`open()`
    调用会引发异常。
- en: Example 15-10\. Return a big file with `StreamingResponse` (add to main.py)
  id: totrans-59
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 15-10\. 使用 `StreamingResponse` 返回大文件（添加到 main.py）
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`gen_expr` is the *generator expression* returned by the *generator function*
    `gen_file()`. `StreamingResponse` uses it for its iterable `content` argument,
    so it can download the file in chunks.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`gen_expr` 是由 *generator function* `gen_file()` 返回的 *generator expression*。`StreamingResponse`
    使用它作为其可迭代的 `content` 参数，因此可以分块下载文件。'
- en: '[Example 15-11](#ex-15-11) is the accompanying test. (This first needs the
    file *1GB.bin* alongside *main.py*, and will take a *little* longer.)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 15-11](#ex-15-11) 是配套的测试。（这首先需要将文件 *1GB.bin* 与 *main.py* 放在一起，并且可能需要一点时间。）'
- en: Example 15-11\. Download a big file with HTTPie
  id: totrans-63
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 15-11\. 使用 HTTPie 下载大文件
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Serving Static Files
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供静态文件
- en: Traditional web servers can treat server files as though they were on a normal
    filesystem. FastAPI lets you do this with `StaticFiles`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的 Web 服务器可以像处理普通文件系统一样处理服务器文件。FastAPI 允许您使用 `StaticFiles` 实现这一点。
- en: 'For this example, let’s make a directory of (boring) free files for users to
    download:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，让我们创建一个（无聊的）免费文件的目录供用户下载：
- en: Make a directory called *static*, at the same level as *main.py*. (This can
    have any name; I’m calling it *static* only to help remember why I made it.)
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在与 *main.py* 同级的目录下创建一个名为 *static* 的目录。（这个名字可以随意取；我只是称之为 *static* 是为了帮助记住我为什么创建它。）
- en: Put a text file called *abc.txt* in it, with the text contents `abc :)`.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在其中放置一个名为 *abc.txt* 的文本文件，其文本内容为 `abc :)`。
- en: '[Example 15-12](#ex-15-12) will serve any URL that starts with */static* (you
    could also have used any text string here) with files from the *static* directory.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 15-12](#ex-15-12) 将为 */static* 开头的任何 URL （你也可以在这里使用任何文本字符串）提供来自 *static*
    目录的文件。'
- en: Example 15-12\. Serve everything in a directory with `StaticFiles` (add to main.py)
  id: totrans-71
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 15-12\. 使用 `StaticFiles` 服务于目录中的所有内容（添加到 main.py）
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: That `top` calculation ensures that you put `static` alongside *main.py*. The
    `__file__` variable is the full pathname of this file (*main.py*).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 那个 `top` 计算确保你将 `static` 放在 *main.py* 旁边。`__file__` 变量是此文件（*main.py*）的完整路径名。
- en: '[Example 15-13](#ex-15-13) is one way to manually test [Example 15-12](#ex-15-12).'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 15-13](#ex-15-13) 是手动测试 [示例 15-12](#ex-15-12) 的一种方式。'
- en: Example 15-13\. Get a static file
  id: totrans-75
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 15-13\. 获取一个静态文件
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: What about that `html=True` argument that you passed to `StaticFiles()`? That
    makes it work a little more like a traditional server, returning an *index.html*
    file if one exists in that directory, but you didn’t ask for *index.html* explicitly
    in the URL. So, let’s create an *index.html* file in the *static* directory with
    the contents `Oh. Hi!`, and then test with [Example 15-14](#ex-15-14).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 关于您传递给`StaticFiles()`的`html=True`参数呢？这使它更像是传统服务器，如果该目录中存在*index.html*文件，则会返回该文件，但您在URL中并没有显式要求*index.html*。因此，让我们在*static*目录中创建一个包含内容为`Oh.
    Hi!`的*index.html*文件，然后使用[示例 15-14](#ex-15-14)进行测试。
- en: Example 15-14\. Get an index.html file from /static
  id: totrans-78
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 15-14\. 从/static获取一个index.html文件
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can have as many files (and subdirectories with files, etc.) as you want.
    Make a subdirectory *xyz* under *static* and put two files there:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以拥有任意数量的文件（及其子目录及文件等）。在*static*下创建一个名为*xyz*的子目录，并放入两个文件：
- en: '*xyx.txt*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*xyx.txt*'
- en: Contains the text `xyz :(`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 包含文本`xyz :(`。
- en: '*index.html*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*index.html*'
- en: Contains the text `How did you find me?`
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 包含文本`How did you find me?`
- en: I won’t include the examples here. Try them yourself, with I hope more naming
    imagination.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会在这里包含示例。请自行尝试，希望您能有更多的命名想象力。
- en: Review
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾
- en: This chapter showed how to upload and download files—small, large, even gigantiferous.
    Plus, you learned how to serve *static files* in nostalgic (non-API) web style
    from a directory.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示了如何上传和下载文件——无论是小文件，大文件，甚至是巨大文件。另外，您还学会了如何以怀旧（非API）的Web风格从目录中提供*静态文件*。
