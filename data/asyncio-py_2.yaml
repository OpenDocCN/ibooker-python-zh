- en: Chapter 2\. The Truth About Threads
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。关于线程的真相
- en: Let’s be frank for a moment—you really don’t want to use Curio. All things equal,
    you should probably be programming with threads. Yes, threads. THOSE threads.
    Seriously. I’m not kidding.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 让我们坦率一点——你真的不想使用Curio。所有事情都一样，你可能应该使用线程进行编程。是的，线程。那些线程。真的，我不是在开玩笑。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Dave Beazley, [“Developing with Curio”](https://oreil.ly/oXJaC)
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 戴夫·比兹利，《使用Curio进行开发》（https://oreil.ly/oXJaC）
- en: 'If you’ve never heard of threads before, here’s a basic description: threads
    are a feature provided by an operating system (OS), made available to software
    developers so that they may indicate to the OS which parts of their program may
    be run in parallel. The OS decides how to share CPU resources with each of the
    parts, much as the OS decides to share CPU resources with all the other different
    programs (processes) running at the same time.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前从未听说过线程，这里有一个基本的描述：线程是操作系统（OS）提供给软件开发者的一种特性，使他们能够指示操作系统哪些部分的程序可以并行运行。操作系统决定如何与各部分共享CPU资源，就像操作系统决定如何与同时运行的所有其他不同程序（进程）共享CPU资源一样。
- en: Since you’re reading an Asyncio book, this must be the part where I tell you,
    “Threads are terrible, and you should never use them,” right? Unfortunately, the
    situation is not so simple. We need to weigh the benefits and risks of using threads,
    just like with any technology choice.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你在读一本Asyncio的书，那么这一定是我告诉你，“线程很糟糕，你永远不应该使用它们”的部分，对吧？不幸的是，情况并不那么简单。我们需要权衡使用线程的利与弊，就像对待任何技术选择一样。
- en: 'This book is not supposed to be about threads at all. But there are two problems
    here: Asyncio is offered as an alternative to threading, so it’s hard to understand
    the value proposition without some comparison; and even when using Asyncio, you
    will still likely have to deal with threads and processes, so you need to know
    something about threading.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书根本不应该涉及到线程。但是这里有两个问题：Asyncio被提供作为线程的一种替代，因此没有进行一些比较很难理解其价值；即使使用Asyncio，你仍然可能需要处理线程和进程，所以你需要了解一些关于线程的知识。
- en: Warning
  id: totrans-7
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: The context of this discussion is exclusively concurrency in network programming
    applications. Preemptive multithreading is also used in other domains, where the
    trade-offs are entirely different.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这次讨论的背景仅限于网络编程应用程序中的并发性。抢占式多线程也用于其他领域，在那里权衡是完全不同的。
- en: Benefits of Threading
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线程的好处
- en: 'These are the main benefits of threading:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是线程的主要优点：
- en: Ease of reading code
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的易读性
- en: Your code can run concurrently, but still be set out in a very simple, top-down
    linear sequence of commands to the point where—and this is key—you can pretend,
    within the body of your functions, that no concurrency is happening.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码可以并发运行，但仍然可以以非常简单、自顶向下的线性指令序列进行设置，以至于在函数体内，你可以假装没有发生并发——这一点非常关键。
- en: Parallelism with shared memory
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 具有共享内存的并行性
- en: Your code can exploit multiple CPUs while still having threads share memory.
    This is important in many workloads where it would be too costly to move large
    amounts of data between the separate memory spaces of different processes, for
    example.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码可以利用多个CPU，同时线程可以共享内存。在许多工作负载中，这一点非常重要，因为在不同进程的独立内存空间之间移动大量数据可能会成本过高。
- en: Know-how and existing code
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 技术和现有代码
- en: There is a large body of knowledge and best practices available for writing
    threaded applications. There is also a huge amount of existing “blocking” code
    that depends on multithreading for concurrent operation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有大量的知识和最佳实践适用于编写多线程应用程序。还有大量依赖多线程并发操作的现有“阻塞”代码。
- en: Now, with *Python*, the point about parallelism is questionable because the
    Python interpreter uses a global lock, called the *global interpreter lock* (GIL),
    to protect the internal state of the interpreter itself. That is, it provides
    protection from the potential catastrophic effects of race conditions between
    multiple threads. A side effect of the lock is that it ends up pinning all threads
    in your program to a single CPU. As you might imagine, this negates any parallelism
    performance benefits (unless you use tools like Cython or Numba to maneuver around
    the limitation).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，关于*Python*，关于并行性的观点是值得质疑的，因为Python解释器使用全局锁，称为*全局解释器锁*（GIL），来保护解释器本身的内部状态。也就是说，它提供了对多个线程之间潜在灾难性竞态条件的保护。锁的一个副作用是它最终将所有线程固定在程序的单个CPU上。你可以想象，这会消除任何并行性能优势（除非你使用像Cython或Numba这样的工具来规避这个限制）。
- en: 'The first point regarding perceived simplicity, however, is significant: threading
    in Python *feels* exceptionally simple, and if you haven’t been burned before
    by impossibly hard race condition bugs, threading offers a very attractive concurrency
    model. Even if you have been burned in the past, threading remains a compelling
    option because you will likely have learned (the hard way) how to keep your code
    both simple and safe.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，关于感知上的简单性的第一个观点是很重要的：在 Python 中，线程 *感觉* 特别简单，如果你以前没有因为不可能的竞争条件而受到过伤害，线程提供了一个非常吸引人的并发模型。即使你以前曾经受过伤害，线程仍然是一个令人信服的选择，因为你很可能已经学会了（通过艰难的方式）如何保持代码既简单又安全。
- en: I don’t have space to get into safer threaded programming here, but generally
    speaking, the best practice for using threads is to use the `ThreadPoolExecutor`
    class from the `concurrent.futures` module, passing all required data in through
    the `submit()` method. [Example 2-1](#threadbest) shows a basic example.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我这里没有空间深入讨论更安全的线程编程，但一般来说，最佳实践是使用 `concurrent.futures` 模块中的 `ThreadPoolExecutor`
    类，通过 `submit()` 方法传递所有必需的数据。[Example 2-1](#threadbest) 展示了一个基本的例子。
- en: Example 2-1\. Best practice for threading
  id: totrans-20
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 2-1\. 线程的最佳实践
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `ThreadPoolExecutor` offers an extremely simple interface for running functions
    in a thread—and the best part is that, if needed, you can convert the pool of
    threads into a pool of subprocesses simply by using `ProcessPoolExecutor` instead.
    It has the same API as `ThreadPoolExecutor`, which means that your code will be
    little affected by the change. The executor API is also used in `asyncio` and
    is described in the next chapter (see [Example 3-3](ch03.html#quickstart-executor)).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`ThreadPoolExecutor` 提供了一个非常简单的接口来在线程中运行函数 —— 最棒的是，如果需要，你可以简单地通过使用 `ProcessPoolExecutor`
    将线程池转换为子进程池。它与 `ThreadPoolExecutor` 拥有相同的 API，这意味着你的代码在改变时受影响很小。执行器 API 也被用于 `asyncio`
    中，并在下一章节中进行了描述（参见 [Example 3-3](ch03.html#quickstart-executor)）。'
- en: In general, you’ll prefer your tasks to be somewhat short-lived, so that when
    your program needs to shut down, you can simply call `Executor.shutdown(wait=True)`
    and wait a second or two to allow the executor to complete.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，你会更喜欢你的任务生命周期较短，这样当程序需要关闭时，你可以简单地调用 `Executor.shutdown(wait=True)` 并等待一两秒钟，以允许执行器完成。
- en: 'Most importantly: if at all possible, you should try to prevent your threaded
    code (in the preceding example, the `worker()` function) from accessing or writing
    to any global variables!'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是：如果可能的话，你应该尽量防止你的线程代码（在上述示例中的 `worker()` 函数）访问或写入任何全局变量！
- en: Tip
  id: totrans-25
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Raymond Hettinger presented several great guidelines for safer threaded code
    at [PyCon Russia 2016](https://oreil.ly/ZZVps) and [PyBay 2017](https://oreil.ly/JDplJ).
    I strongly urge you to add these videos to your watch list.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Raymond Hettinger 在 [PyCon Russia 2016](https://oreil.ly/ZZVps) 和 [PyBay 2017](https://oreil.ly/JDplJ)
    上提出了一些更安全的线程代码指南。我强烈建议你把这些视频加入你的观看列表中。
- en: Drawbacks of Threading
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线程的缺点
- en: '[N]ontrivial multithreaded programs are incomprehensible to humans. It is true
    that the programming model can be improved through the use of design patterns,
    better granularity of atomicity (e.g., transactions), improved languages, and
    formal methods. However, these techniques merely chip away at the unnecessarily
    enormous non-determinism of the threading model. The model remains intrinsically
    intractable.'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 非平凡的多线程程序对人类来说是难以理解的。通过设计模式、更好的原子性粒度（例如事务）、改进的语言和形式化方法，可以改善编程模型。然而，这些技术仅仅是在减少线程模型中不必要的巨大非确定性。这个模型依然是根本无法解决的。
- en: ''
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Edward A. Lee [“The Problem with Threads”](http://bit.ly/2CFOv8a)
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Edward A. Lee 的 [“The Problem with Threads”](http://bit.ly/2CFOv8a)
- en: 'The drawbacks of threading have been mentioned in a few other places already,
    but for completeness let’s collect them here anyway:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 线程的缺点已经在其他几个地方提到过，但为了完整起见，让我们把它们收集在这里：
- en: Threading is difficult
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 线程是困难的。
- en: Threading bugs and race conditions in threaded programs are *the hardest* kinds
    of bugs to fix. With experience, it is possible to design new software that is
    less prone to these problems, but in nontrivial, naively designed software, they
    can be nearly impossible to fix, even by experts. Really!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 线程程序中的线程错误和竞争条件是修复最困难的错误。通过经验，设计新软件以减少这些问题是可能的，但在非平凡、天真设计的软件中，它们几乎是无法修复的，即使是专家也是如此。真的！
- en: Threads are resource-intensive
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 线程是资源密集型的。
- en: 'Threads require extra operating system resources to create, such as preallocated,
    per-thread stack space that consumes process virtual memory up front. This is
    a big problem with 32-bit operating systems, because the address space per process
    is limited to 3 GB.^([1](ch02.html#idm46363041090568)) Nowadays, with the widespread
    availability of 64-bit operating systems, virtual memory isn’t as precious as
    it used to be (addressable space for virtual memory is typically 48 bits; i.e.,
    256 TiB). On modern desktop operating systems, the physical memory required for
    stack space for each thread isn’t even allocated by the OS until it is required,
    including stack space per thread. For example, on a modern, 64-bit Fedora 29 Linux
    with 8 GB memory, creating 10,000 do-nothing threads with this short snippet:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 线程需要额外的操作系统资源来创建，比如预先分配的每个线程的栈空间，这会消耗进程虚拟内存。这在32位操作系统中是一个大问题，因为每个进程的地址空间限制为3
    GB。^([1](ch02.html#idm46363041090568)) 如今，随着64位操作系统的广泛普及，虚拟内存不再像以前那样宝贵（虚拟内存的可寻址空间通常为48位，即256
    TiB）。在现代桌面操作系统上，包括每个线程的栈空间，操作系统甚至不会在需要之前分配物理内存。例如，在拥有8 GB内存的现代64位Fedora 29 Linux上，使用以下简短的代码创建10,000个空线程：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'leads to the following information in `top`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 导致`top`中的以下信息：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Preallocated virtual memory is a staggering ~80 GB (due to 8 MB stack space
    per thread!), but resident memory is only ~130 MB. On a 32-bit Linux system, I
    would be unable to create this many because of the 3 GB user-space address-space
    limit, *regardless* of actual consumption of physical memory. To get around this
    problem on 32-bit systems, it is sometimes necessary to decrease the preconfigured
    stack size, which you can still do in Python today, with `threading.stack_size([size])`.
    Obviously, decreasing stack size has implications for runtime safety with respect
    to the degree to which function calls may be nested, including recursion. Single-threaded
    coroutines have none of these problems and are a far superior alternative for
    concurrent I/O.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 预分配的虚拟内存令人震惊，约为80 GB（由于每个线程8 MB的栈空间！），但驻留内存仅约为130 MB。在32位Linux系统上，由于3 GB用户空间地址空间限制，我将无法创建这么多线程，*不论*实际内存消耗如何。为了解决在32位系统上的这个问题，有时必须减少预配置的栈大小，您仍然可以在Python中使用`threading.stack_size([size])`来做到这一点。显然，减少栈大小对运行时安全性的影响取决于函数调用可能嵌套的程度，包括递归。单线程协程没有这些问题，并且对于并发I/O来说是一个更优越的选择。
- en: Threading can affect throughput
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 线程可能会影响吞吐量。
- en: At very high concurrency levels (say, >5,000 threads), there can also be an
    impact on throughput due to [context-switching](https://oreil.ly/eFQKQ) costs,
    assuming you can figure out how to configure your operating system to even allow
    you to create that many threads! It has become so tedious on recent macOS versions,
    for example, to test the preceding 10,000 do-nothing-threads example, that I gave
    up trying to raise the limits at all.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在非常高的并发水平（例如，>5,000个线程），由于上下文切换的成本，也可能会对吞吐量产生影响，假设您能够配置操作系统以允许创建那么多线程！例如，最近的macOS版本变得如此乏味，以至于测试前述的10,000个空线程示例时，我放弃了尝试提升所有限制。
- en: Threading is inflexible
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 线程是不灵活的。
- en: The operating system will continually share CPU time with all threads regardless
    of whether a thread is ready to do work or not. For instance, a thread may be
    waiting for data on a socket, but the OS scheduler may still switch to and from
    that thread thousands of times before any actual work needs to be done. (In the
    async world, the `select()` system call is used to check whether a socket-awaiting
    coroutine needs a turn; if not, that coroutine isn’t even woken up, avoiding any
    switching costs completely.)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 无论线程是否准备好工作，操作系统都会持续共享CPU时间给所有线程。例如，一个线程可能在等待套接字上的数据，但操作系统调度程序仍可能在任何实际工作需要之前的数千次切换该线程和其他线程之间。（在异步世界中，`select()`系统调用用于检查是否需要转换套接字等待的协程；如果不需要，该协程甚至不会被唤醒，完全避免了任何切换成本。）
- en: 'None of this information is new, and the problems with threading as a programming
    model are not platform-specific either. For example, this is what the [Microsoft
    Visual C++ documentation](http://bit.ly/2Fr3eXK) says about threading:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息都不是新的，线程作为编程模型的问题也不是特定于平台的。例如，[Microsoft Visual C++文档](http://bit.ly/2Fr3eXK)对线程的看法如下：
- en: The central concurrency mechanism in the Windows API is the thread. You typically
    use the CreateThread function to create threads. Although threads are relatively
    easy to create and use, the operating system allocates a significant amount of
    time and other resources to manage them. Additionally, although each thread is
    guaranteed to receive the same execution time as any other thread at the same
    priority level, the associated overhead requires that you create sufficiently
    large tasks. For smaller or more fine-grained tasks, the overhead that is associated
    with concurrency can outweigh the benefit of running the tasks in parallel.
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Windows API 中的核心并发机制是线程。通常使用CreateThread函数创建线程。尽管线程相对容易创建和使用，但操作系统分配了大量时间和其他资源来管理它们。此外，尽管每个线程保证接收与同一优先级级别的任何其他线程相同的执行时间，但相关开销要求您创建足够大的任务。对于更小或更细粒度的任务，与并发相关的开销可能会超过并行运行任务的好处。
- en: 'But—I hear you protest—this is *Windows*, right? Surely a Unix system doesn’t
    have these problems? Here follows a similar recommendation from the Mac Developer
    Library’s [Threading Programming Guide](https://oreil.ly/W3mBM):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但——我听到你反对——这是*Windows*，对吧？Unix系统肯定不会有这些问题？以下是来自Mac开发者文库的[线程编程指南](https://oreil.ly/W3mBM)中类似的建议：
- en: Threading has a real cost to your program (and the system) in terms of memory
    use and performance. Each thread requires the allocation of memory in both the
    kernel memory space and your program’s memory space. The core structures needed
    to manage your thread and coordinate its scheduling are stored in the kernel using
    wired memory. Your thread’s stack space and per-thread data is stored in your
    program’s memory space. Most of these structures are created and initialized when
    you first create the thread—a process that can be relatively expensive because
    of the required interactions with the kernel.
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在内存使用和性能方面，线程对您的程序（以及系统）有实际成本。每个线程需要在内核内存空间和程序内存空间中分配内存。管理线程并协调其调度所需的核心结构存储在内核中，使用固定内存。您线程的堆栈空间和每个线程数据存储在程序的内存空间。大多数这些结构在您首次创建线程时创建和初始化——这个过程可能会比较昂贵，因为需要与内核进行必要的交互。
- en: 'They go even further in the [Concurrency Programming Guide](https://oreil.ly/fcGNL)
    (emphasis mine):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 他们在[并发编程指南](https://oreil.ly/fcGNL)中更进一步（重点是我的）：
- en: In the past, introducing concurrency to an application required the creation
    of one or more additional threads. Unfortunately, writing threaded code is challenging.
    Threads are a low-level tool that must be managed manually. Given that the optimal
    number of threads for an application can change dynamically based on the current
    system load and the underlying hardware, implementing a correct threading solution
    becomes *extremely difficult*, if not impossible to achieve. In addition, the
    synchronization mechanisms typically used with threads add complexity and risk
    to software designs without any guarantees of improved performance.
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在过去，将并发引入应用程序需要创建一个或多个额外的线程。不幸的是，编写线程化的代码是具有挑战性的。线程是必须手动管理的低级工具。考虑到应用程序的最佳线程数量可以根据当前系统负载和底层硬件动态变化，实现正确的线程解决方案变得*极为困难*，甚至不可能实现。此外，通常与线程一起使用的同步机制增加了软件设计的复杂性和风险，而没有任何改善性能的保证。
- en: 'These themes repeat throughout:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些主题反复出现：
- en: Threading makes code hard to reason about.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程使代码难以理解。
- en: Threading is an inefficient model for large-scale concurrency (thousands of
    concurrent tasks).
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于大规模并发（数千个并发任务），线程是一种效率低下的模型。
- en: Next, let’s look at a case study involving threads that highlights the first
    and most important point.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看一个涉及线程的案例研究，突出第一点也是最重要的一点。
- en: 'Case Study: Robots and Cutlery'
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究：机器人和餐具
- en: 'Second, and more important, we did not (and still do not) believe in the standard
    multithreading model, which is preemptive concurrency with shared memory: we still
    think that no one can write correct programs in a language where “a = a + 1” is
    not deterministic.'
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 第二，更重要的是，我们没有（至今仍没有）相信标准的多线程模型，即带有共享内存的抢占式并发：我们仍然认为，在“a = a + 1”不确定的语言中，没有人能编写正确的程序。
- en: ''
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Roberto Ierusalimschy et al., [“The Evolution of Lua”](http://bit.ly/2Fq9M8P)
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Roberto Ierusalimschy等人的[“Lua的演变”](http://bit.ly/2Fq9M8P)
- en: At the start of this book, I told the story of a restaurant in which humanoid
    robots—ThreadBots—did all the work. In that analogy, each worker was a thread.
    In the case study in [Example 2-2](#robcut), we’re going to look at *why* threading
    is considered unsafe.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的开头，我讲述了一个餐馆的故事，其中类人机器人——ThreadBots——完成了所有的工作。在那个比喻中，每个工人都是一个线程。在[例 2-2](#robcut)中的案例研究中，我们将探讨*为什么*线程被认为是不安全的。
- en: Example 2-2\. ThreadBot programming for table service
  id: totrans-59
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 例 2-2\. 用于桌面服务的ThreadBot编程
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](assets/1.png)](#co_the_truth_about_threads_CO1-1)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_the_truth_about_threads_CO1-1)'
- en: A `ThreadBot` is a subclass of a thread.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`ThreadBot`是线程的子类。'
- en: '[![2](assets/2.png)](#co_the_truth_about_threads_CO1-2)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_the_truth_about_threads_CO1-2)'
- en: The target function of the thread is the `manage_table()` method, defined later
    in the file.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 线程的目标函数是后面在文件中定义的`manage_table()`方法。
- en: '[![3](assets/3.png)](#co_the_truth_about_threads_CO1-3)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_the_truth_about_threads_CO1-3)'
- en: This bot is going to be waiting tables and will need to be responsible for some
    cutlery. Each bot keeps track of the cutlery that it took from the kitchen here.
    (The `Cutlery` class will be defined later.)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 该机器人将负责等待服务桌子，并需要负责一些餐具。每个机器人在这里都会跟踪从厨房拿到的餐具。（`Cutlery`类将稍后定义。）
- en: '[![4](assets/4.png)](#co_the_truth_about_threads_CO1-4)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_the_truth_about_threads_CO1-4)'
- en: The bot will also be assigned tasks. They will be added to this task queue,
    and the bot will perform them during its main processing loop, next.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人也将被分配任务。它们将被添加到任务队列中，并在其主处理循环中执行这些任务。
- en: '[![5](assets/5.png)](#co_the_truth_about_threads_CO1-5)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_the_truth_about_threads_CO1-5)'
- en: The primary routine of this bot is this infinite loop. If you need to shut down
    a bot, you have to give them the `shutdown` task.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 该机器人的主要例程是这个无限循环。如果你需要关闭一个机器人，你必须给它`shutdown`任务。
- en: '[![6](assets/6.png)](#co_the_truth_about_threads_CO1-6)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_the_truth_about_threads_CO1-6)'
- en: 'There are only three tasks defined for this bot. This one, `prepare table`,
    is what the bot must do to get a new table ready for service. For our test, the
    only requirement is to get sets of cutlery from the kitchen and place them on
    the table. `clear table` is used when a table is to be cleared: the bot must return
    the used cutlery back to the kitchen. `shutdown` just shuts down the bot.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个机器人，只定义了三个任务。其中`prepare table`是机器人必须执行的任务，用于准备新的服务桌。在我们的测试中，唯一的要求是从厨房获取一套餐具并将其放在桌子上。`clear
    table`用于清理桌子：机器人必须将使用过的餐具退回到厨房。`shutdown`只是关闭机器人。
- en: '[Example 2-3](#defcut) shows the definition of the `Cutlery` object.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[例 2-3](#defcut)展示了`Cutlery`对象的定义。'
- en: Example 2-3\. Definition of the Cutlery object
  id: totrans-74
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 例 2-3\. `Cutlery`对象的定义
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](assets/1.png)](#co_the_truth_about_threads_CO2-1)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_the_truth_about_threads_CO2-1)'
- en: '`attrs`, which is an open source Python library that has nothing to do with
    threads or `asyncio`, is a really wonderful library for making class creation
    easy. Here, the `@attrs` decorator will ensure that this `Cutlery` class will
    get all the usual boilerplate code (like `__init__()`) automatically set up.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`attrs`是一个开源的Python库，与线程或`asyncio`无关，是一个非常棒的库，可以轻松创建类。在这里，`@attrs`装饰器将确保这个`Cutlery`类将自动设置所有通常的样板代码（比如`__init__()`）。'
- en: '[![2](assets/2.png)](#co_the_truth_about_threads_CO2-2)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_the_truth_about_threads_CO2-2)'
- en: The `attrib()` function provides an easy way to create attributes, including
    defaults, which you might normally have handled as keyword arguments in the `__init__()`
    method.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`attrib()`函数提供了一个创建属性的简便方法，包括默认值，你可能会在`__init__()`方法中作为关键字参数处理。'
- en: '[![3](assets/3.png)](#co_the_truth_about_threads_CO2-3)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_the_truth_about_threads_CO2-3)'
- en: This method is used to transfer knives and forks from one `Cutlery` object to
    another. Typically, it will be used by bots to obtain cutlery from the kitchen
    for new tables, and to return the cutlery back to the kitchen after a table is
    cleared.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法用于将刀叉从一个`Cutlery`对象转移到另一个对象。通常，它将被机器人用于从厨房获取餐具供新桌子使用，并在清空桌子后将餐具退回到厨房。
- en: '[![4](assets/4.png)](#co_the_truth_about_threads_CO2-4)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_the_truth_about_threads_CO2-4)'
- en: This is a very simple utility function for altering the inventory data in the
    object instance.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的实用程序函数，用于修改对象实例中的库存数据。
- en: '[![5](assets/5.png)](#co_the_truth_about_threads_CO2-5)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_the_truth_about_threads_CO2-5)'
- en: We’ve defined `kitchen` as the identifier for the kitchen inventory of cutlery.
    Typically, each of the bots will obtain cutlery from this location. It is also
    required that they return cutlery to this store when a table is cleared.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义`kitchen`作为餐具库存的标识符。通常，每个机器人将从这个位置获取餐具。还要求在清理桌子时，他们必须将餐具归还到这个库存位置。
- en: '[![6](assets/6.png)](#co_the_truth_about_threads_CO2-6)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_the_truth_about_threads_CO2-6)'
- en: This script is executed when testing. For our test, we’ll be using 10 ThreadBots.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们进行测试时，执行此脚本。我们将使用 10 个 ThreadBots 进行测试。
- en: '[![7](assets/7.png)](#co_the_truth_about_threads_CO2-7)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_the_truth_about_threads_CO2-7)'
- en: We get the number of tables as a command-line parameter, and then give each
    bot that number of tasks for preparing and clearing tables in the restaurant.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从命令行参数中获取桌子的数量，然后为每个机器人分配这些桌子的任务，负责餐厅里的摆放和清理工作。
- en: '[![8](assets/8.png)](#co_the_truth_about_threads_CO2-8)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](assets/8.png)](#co_the_truth_about_threads_CO2-8)'
- en: The `shutdown` task will make the bots stop (so that `bot.join()` a bit further
    down will return). The rest of the script prints diagnostic messages and starts
    up the bots.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`shutdown`任务将使机器人停止运行（这样`bot.join()`稍后就会返回）。脚本的其余部分会打印诊断信息并启动机器人。'
- en: 'Your strategy for testing the code basically involves running a group of ThreadBots
    over a sequence of table service. Each ThreadBot must do the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你测试代码的策略基本上是让一组ThreadBots在一系列的桌子服务中运行。每个ThreadBot必须执行以下操作：
- en: '*Prepare* a “table for four,” which means obtaining four sets of knives and
    forks from the kitchen.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*准备*一个“四人桌”，意味着从厨房获取四套刀子和叉子。'
- en: '*Clear* a table, which means returning the set of four knives and forks from
    a table back to the kitchen.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*清理*一个桌子，意味着将四套刀子和叉子从桌子上归还到厨房。'
- en: If you run a bunch of ThreadBots over a bunch of tables a specific number of
    times, you expect that after all the work is done, all of the knives and forks
    should be back in the kitchen and accounted for.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你让一群ThreadBots在一些桌子上运行特定次数，那么当所有工作都完成后，所有的刀子和叉子应该都回到厨房，并且都会被记录。
- en: 'Wisely, you decide to test that, with one hundred tables to be prepared and
    cleared by each ThreadBot and all of them operating at the same time, because
    you want to ensure that they can work together and nothing goes wrong. This is
    the output of that test:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 明智地决定，你要测试一下，每个ThreadBot同时处理一百张桌子，以确保它们可以协同工作，不会出错。这是测试的输出结果：
- en: '[PRE5]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'All the knives and forks end up back in the kitchen! So, you congratulate yourself
    on writing good code and deploy the bots. Unfortunately, *in practice*, every
    now and then you find that you *do not* end up with all cutlery accounted for
    when the restaurant closes. You notice the problem gets worse when you add more
    bots and/or the place gets busier. Frustrated, you run your tests again, changing
    nothing except the size of the test (10,000 tables!):'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的刀子和叉子最终都回到了厨房！因此，你为自己写的出色代码而感到自豪，并部署了这些机器人。不幸的是，在*实践中*，每当餐厅关门时，你都会发现并*没有*所有餐具都被收回。当你增加更多机器人或餐厅更加繁忙时，问题变得更加严重。沮丧之下，你又进行了测试，除了测试的规模（10000张桌子！）之外，什么都没改变：
- en: '[PRE6]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Oops. Now you see that there is indeed a problem. With 10,000 tables served,
    you end up with the wrong number of knives and forks left in the kitchen. For
    reproducibility, you check that the error is consistent:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 糟糕。现在你发现确实存在问题。在服务了10000张桌子后，你发现厨房里剩下的刀子和叉子数量不对。为了重现问题，你检查错误是否一致：
- en: '[PRE7]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: There are still errors, but *by different amounts* compared to the previous
    run. That’s just ridiculous! Remember, these bots are exceptionally well constructed
    and they don’t make mistakes. What could be going wrong?
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管与上次运行相比，错误仍然存在，但出现的错误*数量和种类*不同。这真是荒谬！记住，这些机器人都是异常精良构造的，不会出错。问题到底出在哪里？
- en: 'Let’s summarize the situation:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下当前的情况：
- en: Your ThreadBot code is very simple and easy to read. The logic is fine.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的ThreadBot代码非常简单易读。逻辑没有问题。
- en: You have a working test (with 100 tables) that reproducibly passes.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有一个工作正常的测试（100张桌子），可以可靠地通过。
- en: You have a longer test (with 10,000 tables) that reproducibly fails.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有一个更长的测试（10000张桌子），可以可靠地失败。
- en: The longer test fails in *different, nonreproducible ways*.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 较长的测试以*不同且不可重现的方式*失败了。
- en: 'These are a few typical signs of a race condition bug. Experienced readers
    will already have seen the cause, so let’s investigate that now. It all comes
    down to this method inside our `Cutlery` class:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是竞态条件错误的几个典型迹象。有经验的读者已经看到了原因，所以现在让我们来调查这个问题。这一切都归结为我们 `Cutlery` 类内部的这个方法：
- en: '[PRE8]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The inline summation, `+=`, is implemented internally (inside the C code for
    the Python interpreter itself) as a few separate steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 内联求和运算 `+=` 在内部实现（在 Python 解释器的 C 代码内部）作为几个单独的步骤：
- en: Read the current value, `self.knives`, into a temporary location.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将当前值 `self.knives` 读入临时位置。
- en: Add the new value, `knives`, to the value in that temporary location.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新值 `knives` 添加到该临时位置中的值。
- en: Copy the new total from the temporary location back into the original location.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新总数从临时位置复制回原始位置。
- en: The problem with preemptive multitasking is that any thread busy with these
    steps can be interrupted *at any time*, and a different thread can be given the
    opportunity to work through the same steps.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 抢占式多任务的问题在于，任何忙于这些步骤的线程都可以在*任何时候*被中断，而不同的线程可以有机会通过相同的步骤工作。
- en: In this case, suppose ThreadBot *A* does step 1, and then the OS scheduler pauses
    *A* and switches to ThreadBot *B*. *B* *also* reads the current value of `self.knives`;
    then execution goes back to *A*. *A* increments its total and writes it back—but
    then *B* continues from where it got paused (after step 1), and it increments
    and writes back *its* new total, thereby *erasing* the change made by *A*!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，假设 ThreadBot *A* 执行步骤 1，然后操作系统调度器暂停 *A* 并切换到 ThreadBot *B*。 *B* *也* 读取
    `self.knives` 的当前值；然后执行返回到 *A*。 *A* 增加其总数并写回，但接着 *B* 继续从它被暂停的地方（步骤 1 后）执行，并增加并写回
    *它* 的新总数，从而*擦除*了 *A* 所做的更改！
- en: Warning
  id: totrans-116
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: While this may sound complex, this example of a race condition is just about
    the simplest possible case. We were able to check *all* the code, and we even
    have tests that can reproduce the problem on demand. In the real world, in large
    projects, try to imagine how much more difficult it can become!
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这听起来复杂，但这个竞态条件的例子几乎是可能的最简单情况。我们能够检查*所有*代码，甚至还有测试可以按需重现问题。在真实世界中，对于大型项目，试想一下它可能变得多么困难！
- en: 'This problem can be fixed by placing a *lock* around the modification of the
    shared state (imagine we added a `threading.Lock` to the `Cutlery` class):'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在修改共享状态的地方（假设我们在 `Cutlery` 类中添加了 `threading.Lock`）周围放置*锁*来解决此问题：
- en: '[PRE9]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: But this requires you to know all the places where state will be shared between
    multiple threads. This approach is viable when you control all the source code,
    but it becomes very difficult when many third-party libraries are used—which is
    likely in Python thanks to the wonderful open source ecosystem.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 但这要求您知道所有状态将在多个线程之间共享的地方。当您控制所有源代码时，这种方法是可行的，但当使用许多第三方库时（在 Python 中由于美妙的开源生态系统而可能），它变得非常困难。
- en: Note that it was not possible to see the race condition by looking at the source
    code alone. This is because the source code provides no hints about where execution
    is going to switch between threads. That wouldn’t be useful anyway, because the
    OS can switch between threads just about anywhere.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，仅通过查看源代码本身是不可能看到竞态条件的。这是因为源代码并不提供任何关于执行将在何处在线程之间切换的提示。无论如何，这也不会有用，因为操作系统可以在几乎任何地方在线程之间切换。
- en: Another, much better, solution—and the point of async programming—is to modify
    our code so that we use only one ThreadBot and configure it to move between *all*
    the tables as necessary. For our case study, this means that the knives and forks
    in the kitchen will get modified by only a single thread.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个，更好的解决方案——异步编程的要点是修改我们的代码，以便仅使用一个 ThreadBot 并配置它根据需要在*所有*表之间移动。对于我们的案例研究来说，这意味着厨房里的刀具和叉子将仅由单个线程修改。
- en: And even better, in our async programs, we’ll be able to see exactly where context
    will switch between multiple concurrent coroutines, because the `await` keyword
    indicates such places explicitly. I’ve decided against showing an async version
    of this case study here, because [Chapter 3](ch03.html#walkthrough) explains how
    to use `asyncio` in depth. But if your curiosity is insatiable, there is an annotated
    example in [Example B-1](app02.html#corobot); it’ll probably only make sense after
    you read the next chapter!
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 而且更好的是，在我们的异步程序中，我们可以清楚地看到上下文在多个并发协程之间切换的地方，因为`await`关键字明确指示了这样的位置。我决定不在这里展示案例研究的异步版本，因为[第三章](ch03.html#walkthrough)详细解释了如何深入使用`asyncio`。但如果你的好奇心难以满足，[附录B-1](app02.html#corobot)中有一个带注释的示例；在你阅读下一章之后可能才会有所理解！
- en: ^([1](ch02.html#idm46363041090568-marker)) The theoretical address space for
    a 32-bit process is 4 GB, but the operating system typically reserves some of
    that. Often, only 3 GB is left to the process as addressable virtual memory, but
    on some operating systems it can be as low as 2 GB. Please take the numbers mentioned
    in this section as generalizations and not absolutes. There are far too many platform-specific
    (and historically sensitive) details to get into here.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch02.html#idm46363041090568-marker)) 一个32位进程的理论地址空间为4 GB，但操作系统通常会保留其中的一部分。通常，作为可寻址的虚拟内存，进程只剩下3
    GB，但在某些操作系统上，这个值可能低至2 GB。请把本节提到的数字理解为概括，而非绝对值。这里有太多平台特定的（和历史上敏感的）细节不便深入讨论。
