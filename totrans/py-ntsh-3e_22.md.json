["```py\nsoup = bs4.BeautifulSoup(thedoc, 'html5lib')\n```", "```py\n>>> `import` bs4, lxml, html5lib\n>>> sh = bs4.BeautifulSoup('<p>hello', 'html.parser')\n>>> sx = bs4.BeautifulSoup('<p>hello', 'xml')\n>>> sl = bs4.BeautifulSoup('<p>hello', 'lxml')\n>>> s5 = bs4.BeautifulSoup('<p>hello', 'html5lib')\n>>> `for` s `in` [sh, sx, sl, s5]:\n...   print(s, s.is_xml)\n...\n```", "```py\n<p>hello</p> False\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<p>hello</p> True\n<html><body><p>hello</p></body></html> False\n<html><head></head><body><p>hello</p></body></html> False\n```", "```py\n>>> s = bs4.BeautifulSoup('<p>hello', 'html.parser')\n>>> print(s.prettify())\n```", "```py\n<p>\n hello\n</p>\n```", "```py\n>>> print(s.decode())\n```", "```py\n<p>hello</p>\n```", "```py\n>>> print(s.encode())\n```", "```py\nb'<p>hello</p>'\n```", "```py\n>>> s = bs4.BeautifulSoup('<p foo=\"bar\" class=\"ic\">baz')\n>>> s.get('foo')\n>>> s.p.get('foo')\n```", "```py\n'bar'\n```", "```py\n>>> s.p.attrs\n```", "```py\n{'foo': 'bar', 'class': ['ic']}\n```", "```py\n>>> soup = bs4.BeautifulSoup('<p>Plain <b>bold</b></p>')\n>>> print(soup.p.string)\n```", "```py\nNone\n```", "```py\n>>> print(soup.p.b.string)\n```", "```py\nbold\n```", "```py\n>>> print(''.join(soup.strings))\n```", "```py\nPlain bold\n```", "```py\n>>> print(soup.get_text())\n```", "```py\nPlain bold\n```", "```py\n>>> print(soup.text)\n```", "```py\nPlain bold\n```", "```py\n>>> print(soup.get_text(strip=True))\n```", "```py\nPlainbold\n```", "```py\n>>> soup = bs4.BeautifulSoup('<p>Plain <b>bold</b></p>')\n>>> list(t.name `for` t `in` soup.p.children)\n```", "```py\n[None, 'b']\n```", "```py\n>>> list(t.name `for` t `in` soup.p.descendants)\n```", "```py\n[None, 'b', None]\n```", "```py\n>>> soup = bs4.BeautifulSoup('<p>Plain <b>bold</b></p>')\n>>> soup.b.parent.name\n```", "```py\n'p'\n```", "```py\n>>> soup = bs4.BeautifulSoup('<p>Plain <b>bold</b></p>')\n>>> soup.b.previous_sibling, soup.b.next_sibling\n```", "```py\n('Plain ', None)\n```", "```py\n>>> soup = bs4.BeautifulSoup('<p>Plain <b>bold</b></p>')\n>>> soup.b.previous_element, soup.b.next_element\n```", "```py\n('Plain ', 'bold')\n```", "```py\njust_one = *`t`*.find(...)\nother_way_list = *`t`*.find_all(..., limit=1)\nother_way = other_way_list[0] `if` other_way_list `else` `None`\n`assert` just_one == other_way\n```", "```py\n*`# return all instances of Tag 'b' in the document`*\nsoup.find_all('b') *`# or soup.find_all(name='b')`*\n\n*`# return all instances of Tags 'b' and 'bah' in the document`*\nsoup.find_all(['b', 'bah'])\n\n*`# return all instances of Tags starting with 'b' in the document`*\nsoup.find_all(re.compile(r'^b'))\n\n*`# return all instances of Tags including string 'bah' in the document`*\nsoup.find_all(re.compile(r'bah'))\n\n*`# return all instances of Tags whose parent's name is 'foo'`*\n`def` child_of_foo(tag):\n    `return` tag.parent.name == 'foo'\n\nsoup.find_all(child_of_foo)\n```", "```py\n*`# return all instances of NavigableString whose text is 'foo'`*\nsoup.find_all(string='foo')\n\n*`# return all instances of Tag 'b' whose .string's text is 'foo'`*\nsoup.find_all('b', string='foo')\n```", "```py\n*`# return all instances of Tag 'b' w/an attribute 'foo' and no 'bar'`*\nsoup.find_all('b', {'foo': `True`, 'bar': `None`})\n```", "```py\n`def` foo_child_of_bar(t):\n    `return` t.name=='foo' `and` t.parent `and` t.parent.name=='bar'\n\n*`# return tags with name 'foo' children of tags with name 'bar'`*\nsoup.find_all(foo_child_of_bar)\n\n*`# equivalent to using find_all(), with no custom filter function needed`*\nsoup.select('bar > foo')\n```", "```py\n`import` urllib.request, urllib.parse, bs4\n\nf = urllib.request.urlopen('http://www.python.org')\nb = bs4.BeautifulSoup(f)\n\nseen = set()\n`for` anchor `in` b('a'):\n    url = anchor.get('href')\n    `if` url `is` `None` `or` url `in` seen:\n        `continue`\n    seen.add(url)\n    pieces = urllib.parse.urlparse(url)\n    `if` pieces[0].startswith('http'):\n        print(urllib.parse.urlunparse(pieces))\n```", "```py\ns = bs4.NavigableString(' some text ')\n```", "```py\n>>> soup = bs4.BeautifulSoup()\n>>> t = soup.new_tag('foo', bar='baz')\n>>> print(t)\n```", "```py\n<foo bar=\"baz\"></foo>\n```", "```py\n>>> t.append(s)\n>>> print(t)\n```", "```py\n<foo bar=\"baz\"> some text </foo>\n```", "```py\n>>> print(t.string.wrap(soup.new_tag('moo', zip='zaap')))\n```", "```py\n<moo zip=\"zaap\"> some text </moo>\n```", "```py\n>>> print(t)\n```", "```py\n<foo bar=\"baz\"><moo zip=\"zaap\"> some text </moo></foo>\n```", "```py\n>>> soup = bs4.BeautifulSoup(\n...        '<p>first <b>second</b> <i>third</i></p>', 'lxml')\n>>> i = soup.i.replace_with('last')\n>>> soup.b.append(i)\n>>> print(soup)\n```", "```py\n<html><body><p>first <b>second<i>third</i></b> last</p></body></html>\n```", "```py\n>>> empty_i = soup.i.unwrap()\n>>> print(soup.b.wrap(empty_i))\n```", "```py\n<i><b>secondthird</b></i>\n```", "```py\n>>> print(soup)\n```", "```py\n<html><body><p>first <i><b>secondthird</b></i> last</p></body></html>\n```", "```py\n>>> *`# remove everything between <i> and </i> but leave tags`*\t\n>>> soup.i.clear()\n>>> print(soup)\n```", "```py\n<html><body><p>first <i></i> last</p></body></html>\n```", "```py\n>>> *`# remove everything between <p> and </p> incl. tags`*\n>>> soup.p.decompose()\n>>> print(soup)\n```", "```py\n<html><body></body></html>\n```", "```py\n>>> *`# remove <body> and </body>`*\n>>> soup.body.decompose()\n>>> print(soup)\n```", "```py\n<html></html>\n```", "```py\n`def` mktable_with_bs4(seq_of_rows):\n    tabsoup = bs4.BeautifulSoup('<table>')\n    tab = tabsoup.table\n    `for` row `in` seq_of_rows:\n        tr = tabsoup.new_tag('tr')\n        tab.append(tr)\n        `for` item `in` row:\n            td = tabsoup.new_tag('td')\n            tr.append(td)\n            td.string = str(item)\n    `return` tab\n```", "```py\n>>> example = (\n...     ('foo', 'g>h', 'g&h'),\n...     ('zip', 'zap', 'zop'),\n... )\n>>> print(mktable_with_bs4(example))\n```", "```py\n<table><tr><td>foo</td><td>g&gt;h</td><td>g&amp;h</td></tr>\n<tr><td>zip</td><td>zap</td><td>zop</td></tr></table>\n```", "```py\nTABLE_TEMPLATE = '''\\ <table>\n{% for s in s_of_s %}\n <tr>\n  {% for item in s %}\n <td>{{item}}</td>\n  {% endfor %}\n </tr>\n{% endfor %}\n</table>'''\n`def` mktable_with_jinja2(s_of_s):\n    env = jinja2.Environment(\n        trim_blocks=`True`,\n        lstrip_blocks=`True`,\n        autoescape=`True`)\n    t = env.from_string(TABLE_TEMPLATE)\n    `return` t.render(s_of_s=s_of_s)\n```", "```py\n>>> example = (\n...   ('foo', 'g>h', 'g&h'),\n...   ('zip', 'zap', 'zop'),\n... )\n>>> print(mktable_with_jinja2(example))\n```", "```py\n<table>\n <tr>\n <td>foo</td>\n <td>g&gt;h</td>\n <td>g&amp;h</td>\n </tr>\n <tr>\n <td>zip</td>\n <td>zap</td>\n <td>zop</td>\n </tr>\n</table>\n```"]