- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 序言
- en: 'Noted software engineer and entrepreneur Marc Andreesen famously declared that
    [“software is eating the world”](https://oreil.ly/tYaNz). This was back in 2011,
    and has only become more true over time. Software systems continue to grow in
    complexity and can be found in all facets of modern life. Standing in the middle
    of this ravenous beast is the Python language. Programmers often cite Python as
    a favorite [language](https://oreil.ly/RUNNh), and it can be found everywhere:
    from web applications, to machine learning, to developer tools, and more.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 著名软件工程师和企业家马克·安德森（Marc Andreesen）曾经宣称[“软件正在吞噬世界”](https://oreil.ly/tYaNz)。这是在2011年说的，而随着时间的推移，这一说法变得更加真实。软件系统不断变得复杂，并且可以在现代生活的各个方面找到它们的身影。站在这个贪婪野兽的中心是Python语言。程序员经常把Python作为最喜欢的[语言](https://oreil.ly/RUNNh)，它无处不在：从网页应用到机器学习，再到开发工具，等等。
- en: Not all that glitters is gold, though. As our software systems become more complex,
    it becomes harder to understand how our mental models map onto the real world.
    If left unchecked, software systems bloat and become brittle, earning the frightening
    moniker “legacy code.” These codebases often come with warnings such as, “Do not
    touch these files; we don’t know why, but it breaks when you do,” and, “Oh, only
    So-and-So knows that code, and they left for a high-paying Silicon Valley job
    two years ago.” Software development is a young field, but these sort of statements
    should be terrifying to developers and businesspeople alike.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并非所有闪闪发光的东西都是黄金。随着我们的软件系统变得越来越复杂，理解我们的心智模型如何映射到现实世界变得更加困难。如果不加控制，软件系统会变得臃肿且脆弱，赢得了可怕的“遗留代码”绰号。这些代码库通常伴随着诸如“不要触碰这些文件；我们不知道为什么，但你一旦触碰就会出问题”的警告，以及“哦，只有某某知道那段代码，而他们两年前就去了硅谷高薪工作”。软件开发是一个年轻的领域，但这类说法应该让开发人员和商业人士同样感到恐惧。
- en: The truth is, to write systems that last, you need to be deliberate in the choices
    you make. As stated by Titus Winters, Tom Manshreck, and Hyrum Wright, “Software
    engineering is programming integrated over time.”^([1](part0002_split_007.html#idm45644759598552))
    Your code might last a long time—I’ve stepped into projects whose code was written
    while I was in elementary school. How long will your code last? Will it last longer
    than your tenure at your current job (or when you finish maintaining that project)?
    How do you want your code to be received in a few years when someone is building
    core components from it? Do you want your successors to thank you for your foresight,
    or curse your name for the complexities you bore into this world?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 事实是，要编写持久的系统，你需要在做出选择时深思熟虑。正如Titus Winters、Tom Manshreck和Hyrum Wright所述，“软件工程是随时间整合的编程”。^([1](part0002_split_007.html#idm45644759598552))你的代码可能会持续很长时间——我曾经参与过那些在我上小学时就已经写好代码的项目。你的代码能持续多久？它会比你在当前工作岗位上的任期更长（或者你完成维护该项目的时间）吗？几年后当有人从中构建核心组件时，你希望你的代码如何被接纳？你希望你的继任者因为你的远见而感激你，还是因为你为这个世界带来的复杂性而诅咒你的名字？
- en: Python is a wonderful language, but it occasionally makes building for the future
    tricky. Some proponents of other programming languages have decried Python as
    “not production-grade” or “useful for prototyping only,” but the truth is that
    many developers only scratch the surface, rather than learning all the tools and
    tricks for writing robust Python. Throughout this book, you’ll learn how to do
    better. You’ll journey through numerous ways to make Python clean and maintainable.
    Your future maintainers will enjoy working with your code, as it was designed
    up front to make things easy. So go, read this book, look toward the future, and
    build awesome software that will last.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种很棒的语言，但有时在为未来构建时可能会变得棘手。其他编程语言的支持者曾经抨击Python为“不适合生产环境”或“仅适用于原型设计”，但事实是许多开发人员只是浅尝辄止，而没有学习编写健壮Python所需的所有工具和技巧。在本书中，你将学习如何做得更好。你将穿越多种方式使Python代码更加清晰和可维护。你未来的维护者将喜欢与你的代码一起工作，因为它从一开始就被设计成使事情变得简单。因此，去吧，阅读这本书，展望未来，构建持久的、令人敬畏的软件。
- en: Who Should Read This Book
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谁应该阅读这本书
- en: This book is for any Python developer who is looking to grow the code they work
    on in a sustainable and maintainable fashion. This is not intended to be your
    first Python text; I expect that you have written Python before. You should be
    comfortable with Python control flow, and have worked with classes before. If
    you are looking for a more introductory text, I suggest reading [*Learning Python*](https://oreil.ly/iIl2K)
    by Mark Lutz (O’Reilly) first.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书适用于任何希望以可持续和可维护的方式扩展其工作代码的 Python 开发人员。这并不是您的第一本 Python 教材；我预期您以前已经写过 Python。您应该对
    Python 控制流感到舒适，并且以前已经使用过类。如果您正在寻找更入门的教材，我建议您先阅读 [*Learning Python*](https://oreil.ly/iIl2K)，作者是
    Mark Lutz（O’Reilly）。
- en: While I will be covering many advanced Python topics, the goal of this book
    is not to be a how-to for using all of Python’s features. Instead, the features
    are a backdrop for a larger conversation about robustness and how your choices
    impact maintainability. At times I will discuss strategies that you should rarely
    use, if at all. That is because I want to illustrate first principles of robustness;
    the journey of understanding why and how we make decisions in code is more important
    than knowing what tools to use in an optimal scenario. In practice, the optimal
    scenario is a rare occurence. Use the principles in this book to draw your own
    conclusions from your codebase.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我将涵盖许多高级 Python 主题，但这本书的目标并不是教您如何使用 Python 的所有功能。相反，这些功能是更大对话的背景，讨论稳健性以及您的选择如何影响可维护性。有时我会讨论您几乎不应该或者根本不应该使用的策略。这是因为我想说明稳健性的第一原则；在代码中理解我们为什么以及如何做出决策的旅程比在最佳场景中使用什么工具更重要。在实践中，最佳场景是罕见的。使用本书中的原则从您的代码库中得出您自己的结论。
- en: This book is not a reference book. You might call it a discussion book. Each
    chapter should be a starting point for developers in your organization to discuss,
    together, how best to apply these principles. Start a book club, discussion group,
    or lunch and learn to foster communication. I have proposed discussion topics
    in each chapter to get the converstation started. When you come across these topics,
    I encourage you to stop and reflect on your current codebase. Talk among your
    peers and use these topics as a springboard for discussing the state of your code,
    processes, and workflows. If you are interested in a reference book about the
    Python language, I heartily recommend [*Fluent Python*](https://oreil.ly/PVbON)
    by Luciano Ramalho (O’Reilly; a second edition is forthcoming in late 2021).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书不是一本参考书。你可以称之为讨论书。每一章都应该是您组织中的开发人员讨论如何最好地应用这些原则的起点。开始一个书籍俱乐部、讨论组或午餐学习，以促进沟通。我在每一章中提出了讨论主题，以启动对话。当您遇到这些主题时，我鼓励您停下来反思您当前的代码库。与您的同行交谈，并利用这些主题作为讨论您的代码状态、流程和工作流的跳板。如果您对
    Python 语言的参考书感兴趣，我衷心推荐 [*Fluent Python*](https://oreil.ly/PVbON)，作者是 Luciano Ramalho（O’Reilly；第二版预计将于2021年底出版）。
- en: A system can be robust in many different ways. It can be security hardened,
    scalable, fault-tolerant, or less likely to introduce new errors. Each one of
    these facets of robustness warrants a full book; this book is focused on preventing
    the developers who inherit your code from creating new faults in your system.
    I will show you how to communicate to future developers, how to make their lives
    easier through architectural patterns, and how to catch errors in your codebase
    before they make it into production. This book zeroes in on the robustness of
    your Python codebase, not the robustness of your system as a whole.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 系统可以通过多种方式保持稳健。它可以经过安全强化、可伸缩、容错或者不太可能引入新错误来实现。每一种稳健性的方面都值得一本完整的书籍；这本书专注于防止继承您代码的开发人员在您的系统中引入新故障。我将向您展示如何与未来的开发人员沟通，如何通过架构模式使他们的生活更轻松，并且如何在代码库中捕捉错误，以避免它们进入生产环境。这本书关注的是您的
    Python 代码库的稳健性，而不是整个系统的稳健性。
- en: I will be covering a wealth of information, from many different areas of software,
    including software engineering, computer science, testing, functional programming,
    and object-oriented programming (OOP). I do not expect you to have a background
    in these fields. There are sections where I explain things at a beginner level;
    this is often to deconstruct how we think about core fundamentals of the language.
    This is, for the most part, an intermediate-level text.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我将涵盖丰富的信息，涵盖软件工程、计算机科学、测试、函数式编程和面向对象编程（OOP）等多个软件领域。我不希望您具有这些领域的背景。有些部分我会以初学者的水平来解释；这通常是为了分解我们如何思考语言核心基础的方式。总体而言，这是一本中级水平的文本。
- en: 'Ideal readers include:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 理想的读者包括：
- en: Developers currently working in a large codebase, looking to find better ways
    to communicate with their colleagues
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前在大型代码库工作的开发者们，希望找到更好的方法与他们的同事沟通
- en: Primary codebase maintainers, looking for ways to help lessen the burden of
    future maintainers
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要的代码库维护者，寻找方法来帮助减轻未来维护者的负担
- en: Self-taught developers who can write Python really well but need to better understand
    why we do the things we do
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自学成才的开发者们能够很好地编写Python，但需要更好地理解我们为什么要做我们所做的事情
- en: Software engineering graduates who need a reminder of practical advice for development
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要提醒开发实践建议的软件工程毕业生
- en: Senior developers looking for a way to tie their design rationale to first principles
    of robustness
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寻找将他们的设计原理与健壮性的第一原则联系起来的高级开发者
- en: This book focuses on writing software over time. If a lot of your code is a
    prototype, throwaway, or disposable in any other fashion, the advice in this book
    will end up creating more work than is necessary for your project. Likewise if
    your project is small—say, under one hundred lines of Python. Making code maintainable
    does add complexity; there’s no doubt about that. However, I’ll guide you through
    minimizing that complexity. If your code lives longer than a few weeks or grows
    to a considerable size, you need to consider the sustainability of your codebase.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本书侧重于随时间编写软件。如果您的大部分代码是原型、一次性或以其他方式可丢弃的，那么本书中的建议将导致比项目需要的更多的工作。同样，如果您的项目很小——比如Python代码少于一百行——那么使代码可维护确实增加了复杂性；毫无疑问。但是，我将指导您通过最小化这种复杂性。如果您的代码存在时间超过几周或增长到相当大的规模，则需要考虑代码库的可持续性。
- en: About This Book
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于本书
- en: 'This book covers a wide swath of knowledge, across many chapters. It is broken
    up into four parts:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本书涵盖广泛的知识，分布在多个章节中。它分为四个部分：
- en: '[Part I, *Annotating Your Code with Types*](part0004.html#part_1)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[第一部分，*用类型为您的代码添加注释*](part0004.html#part_1)'
- en: We’ll start with types in Python. Types are fundamental to the language, but
    are not often examined in great detail. The types you choose matter, as they convey
    a very specific intent. We’ll examine type annotations and what specific annotations
    communicate to the developer. We’ll also go over typecheckers and how those help
    catch bugs early.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从Python的类型开始。类型对语言非常重要，但通常不会被深入研究。您选择的类型很重要，因为它们传达了非常具体的意图。我们将研究类型注释及其向开发人员传达的具体注释。我们还将讨论类型检查器及其如何帮助及早捕捉错误。
- en: '[Part II, *Defining Your Own Types*](part0011.html#part_2)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[第二部分，*定义您自己的类型*](part0011.html#part_2)'
- en: After covering how to think about Python’s types, we’ll focus on how to create
    your own types. We’ll walk through enumerations, data classes, and classes in
    depth. We’ll explore how making certain design choices in designing a type can
    increase or decrease the robustness of your code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论如何思考Python的类型后，我们将专注于如何创建自己的类型。我们将深入讲解枚举、数据类和类。我们将探索在设计类型时做出某些设计选择如何增加或减少代码的健壮性。
- en: '[Part III, *Extensible Python*](part0019.html#part_3)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[第三部分，*可扩展的Python*](part0019.html#part_3)'
- en: After learning how to better express your intentions, we’ll focus on how to
    enable developers to change your code effortlessly, building with confidence on
    your strong foundation. We’ll cover extensibility, dependencies, and architectural
    patterns that allow you to modify your system with minimal impact.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习如何更好地表达您的意图后，我们将专注于如何使开发人员轻松修改您的代码，有信心地在坚实的基础上构建。我们将涵盖可扩展性、依赖关系和允许您在最小影响下修改系统的架构模式。
- en: '[Part IV, *Building a Safety Net*](part0025.html#part_4)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[第四部分，*构建一个安全网*](part0025.html#part_4)'
- en: Lastly, we’ll explore how to build a safety net, so that you can gently catch
    your future collaborators when they do fall. Their confidence will increase, knowing
    that they have a strong, robust system that they can fearlessly adapt to their
    use case. Finally, we’ll cover a variety of static analysis and testing tools
    that will help you catch rogue behavior.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将探讨如何建立一个安全网，这样你可以在他们摔倒时轻轻接住未来的合作者。他们的信心会增强，因为他们有一个强大而健壮的系统，可以毫不畏惧地适应他们的使用案例。最后，我们将介绍多种静态分析和测试工具，帮助你捕捉异常行为。
- en: Each chapter is mostly self-contained, with references to other chapters where
    applicable. You can read this book from cover to cover, or bounce around to chapters
    that suit your fancy. Chapters grouped in each part will be related to one another,
    but there will be fewer relations between book parts.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每章基本上是自包含的，涉及其他章节的引用会在适用时提及。你可以从头到尾阅读本书，也可以跳到你感兴趣的章节。每个部分中的章节相互关联，但书的各个部分之间的关系较少。
- en: All code examples were run using Python 3.9.0, and I’ll try to call out when
    you need a specific Python version or later to run examples (such as Python 3.7
    for the use of data classes).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码示例都是在Python 3.9.0上运行的，我会尽量指出你需要特定的Python版本或更高版本来运行示例（例如Python 3.7用于使用数据类）。
- en: Throughout this book, I will be doing most of my work on the command line. I
    ran all of these commands from an Ubuntu operating system, but most tools should
    work just as well on Mac or Windows systems. In some cases, I will show how certain
    tools interact with integrated development environments (IDEs), such as Visual
    Studio Code (VS Code). Most IDEs use the command-line options underneath the hood;
    most of what you learn on the command line will translate directly to IDE options.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中，我将大部分工作都在命令行上进行。我在一个Ubuntu操作系统上运行了所有这些命令，但大多数工具在Mac或Windows系统上也同样适用。在某些情况下，我会展示某些工具如何与集成开发环境（IDE）如Visual
    Studio Code（VS Code）互动。大多数IDE在幕后使用命令行选项；你学到的大部分命令行内容都可以直接转化为IDE选项。
- en: This book will be presenting many different techniques that can improve the
    robustness of your code. However, there are no silver bullets in software development.
    Trade-offs are the heart of solid engineering, and there is no exception in the
    methods that I present. I will be transparent about benefits and drawbacks as
    I discuss these topics. You will know more about your systems than I will, and
    you are best suited to choose which tool is appropriate for which job. All I am
    doing is stocking your toolbox.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将介绍许多不同的技术，可以提高你代码的健壮性。然而，在软件开发中并不存在万能药。在坚实的工程中，权衡是核心，我介绍的方法也不例外。在讨论这些主题时，我将公开透明地讨论它们的利弊。你对自己的系统了解更多，你最适合选择哪种工具来完成哪项工作。我所做的就是为你的工具箱添砖加瓦。
- en: Conventions Used in This Book
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书中使用的约定
- en: 'The following typographical conventions are used in this book:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中使用了以下印刷约定：
- en: '*Italic*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*斜体*'
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 表示新术语、URL、电子邮件地址、文件名和文件扩展名。
- en: '`Constant width`'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`等宽字体`'
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 用于程序清单，以及在段落中引用程序元素，如变量或函数名称、数据库、数据类型、环境变量、语句和关键字。
- en: '**`Constant width bold`**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**`等宽字体粗体`**'
- en: Shows commands or other text that should be typed literally by the user.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 显示用户应按字面输入的命令或其他文本。
- en: '*`Constant width italic`*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*`等宽字体斜体`*'
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 显示应由用户提供值或由上下文确定值的文本。
- en: Tip
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: This element signifies a tip or suggestion.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个元素表示一个提示或建议。
- en: Note
  id: totrans-44
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This element signifies a general note.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个元素表示一个一般注释。
- en: Warning
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: This element indicates a warning or caution.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个元素表示一个警告或注意。
- en: Using Code Examples
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用代码示例
- en: Supplemental material (code examples, exercises, etc.) is available for download
    at [*https://github.com/pviafore/RobustPython*](https://github.com/pviafore/RobustPython).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 补充材料（代码示例、练习等）可以在[*https://github.com/pviafore/RobustPython*](https://github.com/pviafore/RobustPython)上下载。
- en: If you have a technical question or a problem using the code examples, please
    send email to [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有技术问题或在使用代码示例时遇到问题，请发送电子邮件至[*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com)。
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing examples
    from O’Reilly books does require permission. Answering a question by citing this
    book and quoting example code does not require permission. Incorporating a significant
    amount of example code from this book into your product’s documentation does require
    permission.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在帮助您完成工作。通常情况下，如果本书提供示例代码，您可以在程序和文档中使用它。除非您复制了代码的大部分内容，否则无需征得我们的许可。例如，编写使用本书中几个代码块的程序不需要许可。销售或分发O’Reilly书籍中的示例需要许可。引用本书并引用示例代码回答问题不需要许可。将本书中大量示例代码整合到您产品的文档中需要许可。
- en: 'We appreciate, but generally do not require, attribution. An attribution usually
    includes the title, author, publisher, and ISBN. For example: “*Robust Python*
    by Patrick Viafore (O’Reilly). Copyright 2021 Kudzera, LLC, 978-1-098-10066-7.”'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感激，但通常不要求署名。署名通常包括标题，作者，出版商和ISBN。例如：“*Robust Python* by Patrick Viafore（O’Reilly）。版权所有2021年Kudzera，LLC，978-1-098-10066-7。”
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*permissions@oreilly.com*](mailto:permissions@oreilly.com).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您认为您对示例代码的使用超出了合理使用范围或上述许可，欢迎通过邮件联系我们[*permissions@oreilly.com*](mailto:permissions@oreilly.com)。
- en: O’Reilly Online Learning
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: O’Reilly在线学习
- en: Note
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: For more than 40 years, [*O’Reilly Media*](http://oreilly.com) has provided
    technology and business training, knowledge, and insight to help companies succeed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 超过40年来，[*O’Reilly Media*](http://oreilly.com) 提供技术和商业培训，知识和见解，帮助公司取得成功。
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, and our online learning platform. O’Reilly’s online learning
    platform gives you on-demand access to live training courses, in-depth learning
    paths, interactive coding environments, and a vast collection of text and video
    from O’Reilly and over two hundred other publishers. For more information, visit
    [*http://oreilly.com*](http://oreilly.com).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们独特的专家和创新者网络通过书籍，文章和我们的在线学习平台分享他们的知识和专业知识。O’Reilly的在线学习平台为您提供按需访问直播培训课程，深度学习路径，交互式编码环境以及来自O’Reilly和其他两百多家出版商的广泛的文本和视频集合。欲了解更多信息，请访问[*http://oreilly.com*](http://oreilly.com)。
- en: How to Contact Us
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何联系我们
- en: 'Please address comments and questions concerning this book to the publisher:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请将有关本书的评论和问题发送给出版商：
- en: O’Reilly Media, Inc.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: O’Reilly Media，Inc.
- en: 1005 Gravenstein Highway North
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1005 Gravenstein Highway North
- en: Sebastopol, CA 95472
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加利福尼亚州塞巴斯托波尔95472
- en: 800-998-9938 (in the United States or Canada)
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 800-998-9938（美国或加拿大）
- en: 707-829-0515 (international or local)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0515（国际或本地）
- en: 707-829-0104 (fax)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0104（传真）
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://oreil.ly/robust-python*](https://oreil.ly/robust-python).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为本书设立了一个网页，列出勘误表，示例和任何额外信息。您可以访问[*https://oreil.ly/robust-python*](https://oreil.ly/robust-python)。
- en: Email [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com) to comment
    or ask technical questions about this book.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通过邮件[*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com)发表评论或提出关于本书的技术问题。
- en: For news and information about our books and courses, visit [*http://oreilly.com*](http://oreilly.com).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 关于我们的书籍和课程的新闻和信息，请访问[*http://oreilly.com*](http://oreilly.com)。
- en: 'Find us on Facebook: [*http://facebook.com/oreilly*](http://facebook.com/oreilly)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在Facebook上找到我们：[*http://facebook.com/oreilly*](http://facebook.com/oreilly)
- en: 'Follow us on Twitter: [*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 关注我们的Twitter：[*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)
- en: 'Watch us on YouTube: [*http://youtube.com/oreillymedia*](http://youtube.com/oreillymedia)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在YouTube上观看我们：[*http://youtube.com/oreillymedia*](http://youtube.com/oreillymedia)
- en: Acknowledgments
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 致谢
- en: I would like to acknowledge my incredible wife, Kendall. She is my support and
    sounding board, and I appreciate everything she did to make sure that I had the
    time and space to write this book.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我要感谢我的不可思议的妻子，肯德尔。她是我的支持和听众，我感谢她为确保我有时间和空间来写作本书所做的一切。
- en: No book is written in isolation, and this book is no exception. I stand on the
    shoulders of giants in the software industry, and I appreciate all who came before
    me.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 没有一本书是孤立写成的，这本书也不例外。我站在软件行业的巨人们的肩膀上，并感谢那些在我之前的人。
- en: I also would like to thank everyone who was involved in reviewing this book
    to make sure that my messaging was consistent and that my examples were clear.
    Thank you to Bruce G., David K., David P., and Don P. for providing early feedback
    and helping me decide on a direction for this book. Thank you to my tech reviewers
    Charles Givre, Drew Winstel, Jennifer Wilcox, Jordan Goldmeier, Nathan Stocks,
    and Jess Males for their invaluable feedback, especially where things really only
    made sense in my head but not on paper. Lastly, thank you to anyone who read the
    early release draft and was kind enough to email me their thoughts, especially
    Daniel C. and Francesco.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我还想感谢所有参与审阅本书的人，确保我的信息传递一致，示例清晰。感谢 Bruce G.、David K.、David P. 和 Don P. 提供的早期反馈，并帮助我决定书籍的方向。感谢我的技术审阅者
    Charles Givre、Drew Winstel、Jennifer Wilcox、Jordan Goldmeier、Nathan Stocks 和 Jess
    Males，他们的宝贵反馈对我帮助很大，特别是那些只在我的脑海中有意义而不在纸上显现的地方。最后，感谢所有阅读早期发布草稿并友善地通过电子邮件分享他们想法的人，特别是
    Daniel C. 和 Francesco。
- en: I’d like to thank everyone who helped transform my final draft into something
    production-worthy. Thank you to Justin Billing for diving deep as a copyeditor
    and helping refine the presentation of my ideas. Thank you to Shannon Turlington
    for proofreading; the book is much more polished because of you. A big thank you
    goes to Ellen Troutman-Zaig, who produced a fantastic index that I was blown away
    by.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我要感谢所有帮助将我的最终草稿转变为值得投入生产的作品的人。感谢 Justin Billing 作为副本编辑深入探讨，并帮助我完善想法的表达。感谢 Shannon
    Turlington 进行校对；书籍因为你而更加精致。特别感谢 Ellen Troutman-Zaig 制作了一本让我感到惊叹的索引。
- en: Lastly, I could not do this without the fabulous team at O’Reilly. Thank you
    to Amanda Quinn for helping me through the proposal process and helping me develop
    focus for the book. Thank you to Kristen Brown for making the production stage
    incredibly easy for me. Thank you to Kate Dullea, who converted my MS Paint-quality
    sketches into clean, crisp illustrations. Also, I would like to give a tremendous
    thank you to my developmental editor, Sarah Grey. I looked forward to our weekly
    meetings, and she was fantastic in helping me craft a book for a broad audience,
    while still letting me dive deep into technical details.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，没有 O'Reilly 的出色团队，我做不到这一切。感谢 Amanda Quinn 在提案过程中帮助我，并帮助我聚焦书籍内容。感谢 Kristen
    Brown 让我在制作阶段感觉异常轻松。感谢 Kate Dullea，她将我的 MS Paint 质量的草图转化为干净、清晰的插图。此外，我想特别感谢我的发展编辑
    Sarah Grey。我期待我们每周的会议，她在帮助我打造一个面向广泛读者群体的书籍时表现出色，同时还让我能够深入技术细节。
- en: '^([1](part0002_split_000.html#idm45644759598552-marker)) Titus Winters, Tom
    Manshreck, and Hyrum Wright. *Software Engineering at Google: Lessons Learned
    from Programming over Time*. Sebastopol, CA: O’Reilly Media, Inc., 2020.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '^([1](part0002_split_000.html#idm45644759598552-marker)) Titus Winters、Tom
    Manshreck 和 Hyrum Wright。*Google 软件工程：编程经验教训*。Sebastopol, CA: O’Reilly Media,
    Inc.，2020年。'
