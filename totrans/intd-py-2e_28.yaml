- en: Appendix D. Answers to Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 1\. A Taste of Py
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 1.1 If you don’t already have Python 3 installed on your computer, do it now.
    Read [Appendix B](app02.html#app_install) for the details for your computer system.
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 Start the Python 3 interactive interpreter. Again, details are in [Appendix B](app02.html#app_install).
    It should print a few lines about itself and then a single line starting with
    `>>>`. That’s your prompt to type Python commands.
  prefs: []
  type: TYPE_NORMAL
- en: '1.3 Play with the interpreter a little. Use it like a calculator and type this:
    `8 * 9`. Press the Enter key to see the result. Python should print `72`.'
  prefs: []
  type: TYPE_NORMAL
- en: 1.4 Type the number `47` and press the Enter key. Did it print 47 for you on
    the next line?
  prefs: []
  type: TYPE_NORMAL
- en: 1.5 Now type `print(47)` and press Enter. Did that also print 47 for you on
    the next line?
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Data: Types, Values, Variables, and Names'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 2.1 Assign the integer value `99` to the variable `prince`, and print it.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 What type is the value `5`?
  prefs: []
  type: TYPE_NORMAL
- en: 2.3 What type is the value `2.0`?
  prefs: []
  type: TYPE_NORMAL
- en: 2.4 What type is the expression `5 + 2.0`?
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Numbers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 3.1 How many seconds are in an hour? Use the interactive interpreter as a calculator
    and multiply the number of seconds in a minute (`60`) by the number of minutes
    in an hour (also `60`).
  prefs: []
  type: TYPE_NORMAL
- en: 3.2 Assign the result from the previous task (seconds in an hour) to a variable
    called `seconds_per_hour`.
  prefs: []
  type: TYPE_NORMAL
- en: 3.3 How many seconds are in a day? Use your `seconds_per_hour` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 3.4 Calculate seconds per day again, but this time save the result in a variable
    called `seconds_per_day`.
  prefs: []
  type: TYPE_NORMAL
- en: 3.5 Divide `seconds_per_day` by `seconds_per_hour`. Use floating-point (`/`)
    division.
  prefs: []
  type: TYPE_NORMAL
- en: 3.6 Divide `seconds_per_day` by `seconds_per_hour`, using integer (`//`) division.
    Did this number agree with the floating-point value from the previous question,
    aside from the final `.0`?
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Choose with if
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 4.1 Choose a number between 1 and 10 and assign it to the variable `secret`.
    Then, select another number between 1 and 10 and assign it to the variable `guess`.
    Next, write the conditional tests (`if`, `else`, and `elif`) to print the string
    `'too low'` if `guess` is less than `secret`, `'too high'` if greater than `secret`,
    and `'just right'` if equal to `secret`.
  prefs: []
  type: TYPE_NORMAL
- en: '4.2 Assign `True` or `False` to the variables `small` and `green`. Write some
    `if`/`else` statements to print which of these matches those choices: cherry,
    pea, watermelon, pumpkin.'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Text Strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '5.1 Capitalize the word starting with `m`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '5.2 Print each list question with its correctly matching answer, in the form:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q: *question*'
  prefs: []
  type: TYPE_NORMAL
- en: 'A: *answer*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '5.3 Write the following poem by using old-style formatting. Substitute the
    strings `''roast beef''`, `''ham''`, `''head''`, and `''clam''` into this string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '5.4 Write a form letter by using new-style formatting. Save the following string
    as `letter` (you’ll use it in the next exercise):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 5.5 Assign values to variable strings named `'salutation'`, `'name'`, `'product'`,
    `'verbed'` (past tense verb), `'room'`, `'animals'`, `'percent'`, `'spokesman'`,
    and `'job_title'`. Print `letter` with these values, using `letter.format()`.
  prefs: []
  type: TYPE_NORMAL
- en: '5.6 After public polls to name things, a pattern emerged: an English submarine
    (Boaty McBoatface), an Australian racehorse (Horsey McHorseface), and a Swedish
    train (Trainy McTrainface). Use `%` formatting to print the winning name at the
    state fair for a prize duck, gourd, and spitz.'
  prefs: []
  type: TYPE_NORMAL
- en: 5.7 Do the same, with `format()` formatting.
  prefs: []
  type: TYPE_NORMAL
- en: 5.8 Once more, with feeling, and *f strings*.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Loop with while and for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 6.1 Use a `for` loop to print the values of the list `[3, 2, 1, 0]`.
  prefs: []
  type: TYPE_NORMAL
- en: 6.2 Assign the value `7` to the variable `guess_me`, and the value `1` to the
    variable `number`. Write a `while` loop that compares `number` with `guess_me`.
    Print `'too low'` if `number` is less than `guess me`. If `number` equals `guess_me`,
    print `'found it!'` and then exit the loop. If `number` is greater than `guess_me`,
    print `'oops'` and then exit the loop. Increment `number` at the end of the loop.
  prefs: []
  type: TYPE_NORMAL
- en: 6.3 Assign the value `5` to the variable `guess_me`. Use a `for` loop to iterate
    a variable called `number` over `range(10)`. If `number` is less than `guess_me`,
    print `'too low'`. If it equals `guess_me`, print `found it!` and then break out
    of the for loop. If `number` is greater than `guess_me`, print `'oops'` and then
    exit the loop.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Tuples and Lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 7.1 Create a list called `years_list`, starting with the year of your birth,
    and each year thereafter until the year of your fifth birthday. For example, if
    you were born in 1980, the list would be `years_list = [1980, 1981, 1982, 1983,
    1984, 1985]`.
  prefs: []
  type: TYPE_NORMAL
- en: 7.2 In which of these years was your third birthday? Remember, you were 0 years
    of age for your first year.
  prefs: []
  type: TYPE_NORMAL
- en: 7.3 In which year in `years_list` were you the oldest?
  prefs: []
  type: TYPE_NORMAL
- en: '7.4 Make and print a list called `things` with these three strings as elements:
    `"mozzarella"`, `"cinderella"`, `"salmonella"`.'
  prefs: []
  type: TYPE_NORMAL
- en: 7.5 Capitalize the element in `things` that refers to a person and then print
    the list. Did it change the element in the list?
  prefs: []
  type: TYPE_NORMAL
- en: 7.6 Make the cheesy element of `things` all uppercase and then print the list.
  prefs: []
  type: TYPE_NORMAL
- en: 7.7 Delete the disease element, collect your Nobel Prize, and then print the
    list.
  prefs: []
  type: TYPE_NORMAL
- en: 7.8 Create a list called `surprise` with the elements `"Groucho"`, `"Chico"`,
    and `"Harpo"`.
  prefs: []
  type: TYPE_NORMAL
- en: 7.9 Lowercase the last element of the `surprise` list, reverse it, and then
    capitalize it.
  prefs: []
  type: TYPE_NORMAL
- en: 7.10 Use a list comprehension to make a list called `even` of the even numbers
    in `range(10)`.
  prefs: []
  type: TYPE_NORMAL
- en: '7.11 Let’s create a jumprope rhyme maker. You’ll print a series of two-line
    rhymes. Start with this program fragment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'For each string pair (`first`, `second`) in `rhymes`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the first line:'
  prefs: []
  type: TYPE_NORMAL
- en: Print each string in `start1`, capitalized and followed by an exclamation point
    and a space.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Print `first`, also capitalized and followed by an exclamation point.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the second line:'
  prefs: []
  type: TYPE_NORMAL
- en: Print `start2` and a space.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Print `second` and a period.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8\. Dictionaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '8.1 Make an English-to-French dictionary called `e2f` and print it. Here are
    your starter words: `dog` is `chien`, `cat` is `chat`, and `walrus` is `morse`.'
  prefs: []
  type: TYPE_NORMAL
- en: 8.2 Using your three-word dictionary `e2f`, print the French word for `walrus`.
  prefs: []
  type: TYPE_NORMAL
- en: 8.3 Make a French-to-English dictionary called `f2e` from `e2f`. Use the `items`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 8.4 Print the English equivalent of the French word `chien`.
  prefs: []
  type: TYPE_NORMAL
- en: 8.5 Print the set of English words from `e2f`.
  prefs: []
  type: TYPE_NORMAL
- en: '8.6 Make a multilevel dictionary called `life`. Use these strings for the topmost
    keys: `''animals''`, `''plants''`, and `''other''`. Make the `''animals''` key
    refer to another dictionary with the keys `''cats''`, `''octopi''`, and `''emus''`.
    Make the `''cats''` key refer to a list of strings with the values `''Henri''`,
    `''Grumpy''`, and `''Lucy''`. Make all the other keys refer to empty dictionaries.'
  prefs: []
  type: TYPE_NORMAL
- en: 8.7 Print the top-level keys of `life`.
  prefs: []
  type: TYPE_NORMAL
- en: 8.8 Print the keys for `life['animals']`.
  prefs: []
  type: TYPE_NORMAL
- en: 8.9 Print the values for `life['animals']['cats']`.
  prefs: []
  type: TYPE_NORMAL
- en: 8.10 Use a dictionary comprehension to create the dictionary `squares`. Use
    `range(10)` to return the keys, and use the square of each key as its value.
  prefs: []
  type: TYPE_NORMAL
- en: 8.11 Use a set comprehension to create the set `odd` from the odd numbers in
    `range(10)`.
  prefs: []
  type: TYPE_NORMAL
- en: 8.12 Use a generator comprehension to return the string `'Got '` and a number
    for the numbers in `range(10)`. Iterate through this by using a `for` loop.
  prefs: []
  type: TYPE_NORMAL
- en: 8.13 Use `zip()` to make a dictionary from the key tuple `('optimist', 'pessimist',
    'troll')` and the values tuple `('The glass is half full',` `'The glass is half
    empty',` `'How did you get a glass?')`.
  prefs: []
  type: TYPE_NORMAL
- en: '8.14 Use `zip()` to make a dictionary called `movies` that pairs these lists:
    `titles =` `[''Creature of Habit'',` `''Crewel Fate'',` `''Sharks On a Plane'']`
    and `plots =` `[''A nun turns into a monster'',` `''A haunted yarn shop'',` `''Check
    your exits'']`'
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '9.1 Define a function called `good()` that returns the following list: `[''Harry'',
    ''Ron'', ''Hermione'']`.'
  prefs: []
  type: TYPE_NORMAL
- en: 9.2 Define a generator function called `get_odds()` that returns the odd numbers
    from `range(10)`. Use a `for` loop to find and print the third value returned.
  prefs: []
  type: TYPE_NORMAL
- en: 9.3 Define a decorator called `test` that prints `'start'` when a function is
    called, and `'end'` when it finishes.
  prefs: []
  type: TYPE_NORMAL
- en: 9.4 Define an exception called `OopsException`. Raise this exception to see
    what happens. Then, write the code to catch this exception and print `'Caught
    an oops'`.
  prefs: []
  type: TYPE_NORMAL
- en: '10\. Oh Oh: Objects and Classes'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 10.1 Make a class called `Thing` with no contents and print it. Then, create
    an object called `example` from this class and also print it. Are the printed
    values the same or different?
  prefs: []
  type: TYPE_NORMAL
- en: 10.2 Make a new class called `Thing2` and assign the value `'abc'` to a class
    variable called `letters`. Print `letters`.
  prefs: []
  type: TYPE_NORMAL
- en: 10.3 Make yet another class called (of course) `Thing3`. This time, assign the
    value `'xyz'` to an instance (object) variable called `letters`. Print `letters`.
    Do you need to make an object from the class to do this?
  prefs: []
  type: TYPE_NORMAL
- en: 10.4 Make a class called `Element`, with instance attributes `name`, `symbol`,
    and `number`. Create an object called `hydrogen` of this class with the values
    `'Hydrogen'`, `'H'`, and `1`.
  prefs: []
  type: TYPE_NORMAL
- en: '10.5 Make a dictionary with these keys and values: `''name'': ''Hydrogen'',
    ''symbol'': ''H'', ''number'': 1`. Then, create an object called `hydrogen` from
    class `Element` using this dictionary.'
  prefs: []
  type: TYPE_NORMAL
- en: 10.6 For the `Element` class, define a method called `dump()` that prints the
    values of the object’s attributes (`name`, `symbol`, and `number`). Create the
    `hydrogen` object from this new definition and use `dump()` to print its attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 10.7 Call `print(hydrogen)`. In the definition of `Element`, change the name
    of the method `dump` to `__str__`, create a new `hydrogen` object, and call `print(hydrogen)`
    again.
  prefs: []
  type: TYPE_NORMAL
- en: 10.8 Modify `Element` to make the attributes `name`, `symbol`, and `number`
    private. Define a getter property for each to return its value.
  prefs: []
  type: TYPE_NORMAL
- en: '10.9 Define three classes: `Bear`, `Rabbit`, and `Octothorpe`. For each, define
    only one method: `eats()`. This should return `''berries''` (`Bear`), `''clover''`
    (`Rabbit`), and `''campers''` (`Octothorpe`). Create one object from each and
    print what it eats.'
  prefs: []
  type: TYPE_NORMAL
- en: '10.10 Define these classes: `Laser`, `Claw`, and `SmartPhone`. Each has only
    one method: `does()`. This returns `''disintegrate''` (`Laser`), `''crush''` (`Claw`),
    or `''ring''` (`SmartPhone`). Then, define the class `Robot` that has one instance
    (object) of each of these. Define a `does()` method for the `Robot` that prints
    what its component objects do.'
  prefs: []
  type: TYPE_NORMAL
- en: 11\. Modules, Packages, and Goodies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 11.1 Make a file called *zoo.py*. In it, define a function called `hours` that
    prints the string `'Open 9-5 daily'`. Then, use the interactive interpreter to
    import the `zoo` module and call its `hours` function.
  prefs: []
  type: TYPE_NORMAL
- en: 11.2 In the interactive interpreter, import the `zoo` module as `menagerie`
    and call its `hours()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 11.3 Staying in the interpreter, import the `hours()` function from `zoo` directly
    and call it.
  prefs: []
  type: TYPE_NORMAL
- en: 11.4 Import the `hours()` function as `info` and call it.
  prefs: []
  type: TYPE_NORMAL
- en: 11.6 Make an `OrderedDict` called `fancy` from the same pairs and print it.
    Did it print in the same order as `plain`?
  prefs: []
  type: TYPE_NORMAL
- en: 11.7 Make a `defaultdict` called `dict_of_lists` and pass it the argument `list`.
    Make the list `dict_of_lists['a']` and append the value `'something for a'` to
    it in one assignment. Print `dict_of_lists['a']`.
  prefs: []
  type: TYPE_NORMAL
- en: 12\. Wrangle and Mangle Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 12.1 Create a Unicode string called `mystery` and assign it the value `'\U0001f984'`.
    Print `mystery` and its Unicode name.
  prefs: []
  type: TYPE_NORMAL
- en: 12.2 Encode `mystery`, this time using UTF-8, into the `bytes` variable `popbytes`.
    Print `pop_bytes`.
  prefs: []
  type: TYPE_NORMAL
- en: 12.3 Using UTF-8, decode `popbytes` into the string variable `pop_string`. Print
    `pop_string`. Is `pop_string` equal to `mystery`?
  prefs: []
  type: TYPE_NORMAL
- en: 12.4 When you’re working with text, regular expressions come in very handy.
    We’ll apply them in a number of ways to our featured text sample. It’s a poem
    titled “Ode on the Mammoth Cheese,” written by James McIntyre in 1866 in homage
    to a seven-thousand-pound cheese that was crafted in Ontario and sent on an international
    tour. If you’d rather not type all of it, use your favorite search engine and
    cut and paste the words into your Python program, or just grab it from [Project
    Gutenberg](http://bit.ly/mcintyre-poetry). Call the text string `mammoth`.
  prefs: []
  type: TYPE_NORMAL
- en: 12.5 Import the `re` module to use Python’s regular expression functions. Use
    the `re.findall()` to print all the words that begin with `c`.
  prefs: []
  type: TYPE_NORMAL
- en: 12.6 Find all four-letter words that begin with `c`.
  prefs: []
  type: TYPE_NORMAL
- en: 12.7 Find all the words that end with `r`.
  prefs: []
  type: TYPE_NORMAL
- en: 12.8 Find all the words that contain exactly three vowels in a row.
  prefs: []
  type: TYPE_NORMAL
- en: '12.9 Use `unhexlify()` to convert this hex string (combined from two strings
    to fit on a page) to a `bytes` variable called `gif`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 12.10 The bytes in `gif` define a one-pixel transparent GIF file, one of the
    most common graphics file formats. A legal GIF starts with the string *GIF89a*.
    Does `gif` match this?
  prefs: []
  type: TYPE_NORMAL
- en: 12.11 The pixel width of a GIF is a 16-bit little-endian integer starting at
    byte offset 6, and the height is the same size, starting at offset 8. Extract
    and print these values for `gif`. Are they both `1`?
  prefs: []
  type: TYPE_NORMAL
- en: 13\. Calendars and Clocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 13.1 Write the current date as a string to the text file *today.txt*.
  prefs: []
  type: TYPE_NORMAL
- en: 13.2 Read the text file *today.txt* into the string `today_string`.
  prefs: []
  type: TYPE_NORMAL
- en: 13.3 Parse the date from `today_string`.
  prefs: []
  type: TYPE_NORMAL
- en: 13.4 Create a date object of your day of birth.
  prefs: []
  type: TYPE_NORMAL
- en: 13.5 What day of the week was your day of birth?
  prefs: []
  type: TYPE_NORMAL
- en: 13.6 When will you be (or when were you) 10,000 days old?
  prefs: []
  type: TYPE_NORMAL
- en: 14\. Files and Directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 14.1 List the files in your current directory.
  prefs: []
  type: TYPE_NORMAL
- en: 14.2 List the files in your parent directory.
  prefs: []
  type: TYPE_NORMAL
- en: 14.3 Assign the string `'This is a test of the emergency text system'` to the
    variable `test1`, nd write `test1` to a file called *test.txt*.
  prefs: []
  type: TYPE_NORMAL
- en: 14.4 Open the file *test.txt* and read its contents into the string `test2`.
    Are `test1` and `test2` the same?
  prefs: []
  type: TYPE_NORMAL
- en: '15\. Data in Time: Processes and Concurrency'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 15.1 Use `multiprocessing` to create three separate processes. Make each one
    wait a random number of seconds between zero and one, print the current time,
    and then exit.
  prefs: []
  type: TYPE_NORMAL
- en: '16\. Data in a Box: Persistent Storage'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '16.1 Save the following text lines to a file called *books.csv* (notice that
    if the fields are separated by commas, you need to surround a field with quotes
    if it contains a comma):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 16.2 Use the `csv` module and its `DictReader` method to read *books.csv* to
    the variable `books`. Print the values in `books`. Did `DictReader` handle the
    quotes and commas in the second book’s title?
  prefs: []
  type: TYPE_NORMAL
- en: '16.3 Create a CSV file called *books2.csv* by using these lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '16.4 Use the `sqlite3` module to create a SQLite database called *books.db*
    and a table called `books` with these fields: `title` (text), `author` (text),
    and `year` (integer).'
  prefs: []
  type: TYPE_NORMAL
- en: 16.5 Read *books2.csv* and insert its data into the `book` table.
  prefs: []
  type: TYPE_NORMAL
- en: 16.6 Select and print the `title` column from the `book` table in alphabetical
    order.
  prefs: []
  type: TYPE_NORMAL
- en: 16.7 Select and print all columns from the `book` table in order of publication.
  prefs: []
  type: TYPE_NORMAL
- en: 16.8 Use the `sqlalchemy` module to connect to the sqlite3 database *books.db*
    that you just made in exercise 8.6. As in 8.8, select and print the `title` column
    from the `book` table in alphabetical order.
  prefs: []
  type: TYPE_NORMAL
- en: 16.9 Install the Redis server (see [Appendix B](app02.html#app_install)) and
    the Python `redis` library (`pip install redis`) on your machine. Create a Redis
    hash called `test` with the fields `count` (`1`) and `name` (`'Fester Bestertester'`).
    Print all the fields for `test`.
  prefs: []
  type: TYPE_NORMAL
- en: 16.10 Increment the `count` field of `test` and print it.
  prefs: []
  type: TYPE_NORMAL
- en: '17\. Data in Space: Networks'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 17.1 Use a plain `socket` to implement a current-time service. When a client
    sends the string `'time'` to the server, return the current date and time as an
    ISO string.
  prefs: []
  type: TYPE_NORMAL
- en: 17.2\. Use ZeroMQ REQ and REP sockets to do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: 17.3\. Try the same with XMLRPC.
  prefs: []
  type: TYPE_NORMAL
- en: 17.4 You may have seen the classic *I Love Lucy* television episode in which
    Lucy and Ethel worked in a chocolate factory. The duo fell behind as the conveyor
    belt that supplied the confections for them to process began operating at an ever-faster
    rate. Write a simulation that pushes different types of chocolates to a Redis
    list, and Lucy is a client doing blocking pops of this list. She needs 0.5 seconds
    to handle a piece of chocolate. Print the time and type of each chocolate as Lucy
    gets it, and how many remain to be handled.
  prefs: []
  type: TYPE_NORMAL
- en: 17.5 Use ZeroMQ to publish the poem from exercise 12.4 (from [Example 12-1](ch12.html#mammoth)),
    one word at a time. Write a ZeroMQ consumer that prints every word that starts
    with a vowel, and another that prints every word that contains five letters. Ignore
    punctuation characters.
  prefs: []
  type: TYPE_NORMAL
- en: 18\. The Web, Untangled
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 18.1 If you haven’t installed `flask` yet, do so now. This will also install
    `werkzeug`, `jinja2`, and possibly other packages.
  prefs: []
  type: TYPE_NORMAL
- en: 18.2 Build a skeleton website, using Flask’s debug/reload development web server.
    Ensure that the server starts up for hostname `localhost` on default port `5000`.
    If your machine is already using port 5000 for something else, use another port
    number.
  prefs: []
  type: TYPE_NORMAL
- en: 18.3 Add a `home()` function to handle requests for the home page. Set it up
    to return the string `It's alive!`.
  prefs: []
  type: TYPE_NORMAL
- en: '18.4 Create a Jinja2 template file called *home.html* with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Make a directory called *templates* and create the file *home.html* with the
    contents just shown. If your Flask server is still running from the previous examples,
    it will detect the new content and restart itself.
  prefs: []
  type: TYPE_NORMAL
- en: '18.5 Modify your server’s `home()` function to use the *home.html* template.
    Provide it with three `GET` parameters: `thing`, `height`, and `color`.'
  prefs: []
  type: TYPE_NORMAL
- en: 19\. Be a Pythonista
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: (Pythonistas don’t have homework today.)
  prefs: []
  type: TYPE_NORMAL
- en: 20\. Py Art
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '20.1 Install `matplotlib`. Draw a scatter diagram of these (x, y) pairs: `(
    (0, 0), (3, 5), (6, 2), (9, 8), (14, 10) )`.'
  prefs: []
  type: TYPE_NORMAL
- en: 20.2 Draw a line graph of the same data.
  prefs: []
  type: TYPE_NORMAL
- en: 20.3 Draw a plot (a line graph with markers) of the same data
  prefs: []
  type: TYPE_NORMAL
- en: 21\. Py at Work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 21.1 Install `geopandas` and run [Example 21-1](ch21.html#geopandas_example).
    Try modifying things like colors and marker sizes.
  prefs: []
  type: TYPE_NORMAL
- en: 22\. PySci
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 22.1 Install Pandas. Get the CSV file in [Example 16-1](ch16.html#villains_csv).
    Run the program in [Example 16-2](ch16.html#pandas_csv_example). Experiment with
    some of the Pandas commands.
  prefs: []
  type: TYPE_NORMAL
