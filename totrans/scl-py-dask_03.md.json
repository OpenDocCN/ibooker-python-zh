["```py\ndask.config.set(scheduler='threads')\n```", "```py\ndask.config.set(scheduler='processes')\n```", "```py\ndask.config.set({\"multiprocessing.context\": \"forkserver\",\n                \"scheduler\": \"processes\"})\n```", "```py\nclass ConnectionClass:\n    def __init__(self, host, port):\n        import socket\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.socket.connect((host, port))\n\n@dask.delayed\ndef bad_fun(x):\n    return ConnectionClass(\"www.scalingpythonml.com\", 80)\n\n# Fails to serialize\nif False:\n    dask.compute(bad_fun(1))\n```", "```py\nclass SerConnectionClass:\n    def __init__(self, conn):\n        import socket\n        self.conn = conn\n\n    def __getstate__(self):\n        state_dict = {\n            \"host\": self.conn.socket.getpeername()[0],\n            \"port\": self.conn.socket.getpeername()[1]}\n        return state_dict\n\n    def __setsate__(self, state):\n        self.conn = ConnectionClass(state[\"host\"], state[\"port\"])\n```", "```py\ndistributed_array = da.from_array(list(range(0, 10000)), chunks=10)\n```", "```py\n@dask.delayed()\ndef string_magic(x, y):\n    lower_x = x.lower()\n    lower_y = y.lower()\n    return (lower_x in lower_y) or (lower_y in lower_x)\n\n@dask.delayed()\ndef gen(x):\n    return x\n\nf = gen(\"hello world\")\ncompute = string_magic(f, f)\n```", "```py\ndf.persist\n# You do a bunch of things on DF\n\n# I'm done!\nfrom distributed.client import futures_of\nlist(map(lambda x: x.release(), futures_of(df)))\n```"]