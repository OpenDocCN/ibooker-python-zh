["```py\nfor i in range(3):\n    print(i, end=' ') \n```", "```py\n0 1 2 \n```", "```py\nfor letter in 'Gadsby':\n    print(letter, end=' ') \n```", "```py\nG a d s b y \n```", "```py\nfor letter in \"Gadsby\":\n    if letter == 'E' or letter == 'e':\n        print('This word has an \"e\"') \n```", "```py\ndef has_e():\n    for letter in \"Gadsby\":\n        if letter == 'E' or letter == 'e':\n            print('This word has an \"e\"') \n```", "```py\ndef has_e():\n    for letter in \"Gadsby\":\n        if letter == 'E' or letter == 'e':\n            return True\n    return False \n```", "```py\ndef has_e(word):\n    for letter in word:\n        if letter == 'E' or letter == 'e':\n            return True\n    return False \n```", "```py\nhas_e('Gadsby') \n```", "```py\nFalse \n```", "```py\nhas_e('Emma') \n```", "```py\nTrue \n```", "```py\nfile_object = open('words.txt') \n```", "```py\nfile_object.readline() \n```", "```py\n'aa\\n' \n```", "```py\nline = file_object.readline()\nline \n```", "```py\n'aah\\n' \n```", "```py\nword = line.strip()\nword \n```", "```py\n'aah' \n```", "```py\nfor line in open('words.txt'):\n    word = line.strip()\n    print(word) \n```", "```py\nx = 5\nx \n```", "```py\n5 \n```", "```py\nx = 7\nx \n```", "```py\n7 \n```", "```py\nx = x + 1\nx \n```", "```py\n8 \n```", "```py\nz = z + 1 \n```", "```py\nNameError: name 'z' is not defined \n```", "```py\nz = 0\nz = z + 1\nz \n```", "```py\n1 \n```", "```py\nz += 2\nz \n```", "```py\n3 \n```", "```py\ntotal = 0\n\nfor line in open('words.txt'):\n    word = line.strip()\n    total += 1 \n```", "```py\ntotal \n```", "```py\n113783 \n```", "```py\ntotal = 0\ncount = 0\n\nfor line in open('words.txt'):\n    word = line.strip()\n    total = total + 1\n    if has_e(word):\n        count += 1 \n```", "```py\ncount \n```", "```py\n76162 \n```", "```py\ncount / total * 100 \n```", "```py\n66.93618554617122 \n```", "```py\nword = 'Gadsby'\n'e' in word \n```", "```py\nFalse \n```", "```py\ndef has_e(word):\n    if 'E' in word or 'e' in word:\n        return True\n    else:\n        return False \n```", "```py\ndef has_e(word):\n    return 'E' in word or 'e' in word \n```", "```py\nword.lower() \n```", "```py\n'gadsby' \n```", "```py\nword \n```", "```py\n'Gadsby' \n```", "```py\ndef has_e(word):\n    return 'e' in word.lower() \n```", "```py\nhas_e('Gadsby') \n```", "```py\nFalse \n```", "```py\nhas_e('Emma') \n```", "```py\nTrue \n```", "```py\ndef uses_any(word, letters):\n    for letter in word.lower():\n        if letter in letters.lower():\n            return True\n    return False \n```", "```py\nuses_any('banana', 'aeiou') \n```", "```py\nTrue \n```", "```py\nuses_any('apple', 'xyz') \n```", "```py\nFalse \n```", "```py\nuses_any('Banana', 'AEIOU') \n```", "```py\nTrue \n```", "```py\ndef uses_any(word, letters):\n  \"\"\"Checks if a word uses any of a list of letters.\n\n >>> uses_any('banana', 'aeiou')\n True\n >>> uses_any('apple', 'xyz')\n False\n \"\"\"\n    for letter in word.lower():\n        if letter in letters.lower():\n            return True\n    return False \n```", "```py\nfrom doctest import run_docstring_examples\n\ndef run_doctests(func):\n    run_docstring_examples(func, globals(), name=func.__name__) \n```", "```py\nrun_doctests(uses_any) \n```", "```py\ndef uses_any_incorrect(word, letters):\n  \"\"\"Checks if a word uses any of a list of letters.\n\n >>> uses_any_incorrect('banana', 'aeiou')\n True\n >>> uses_any_incorrect('apple', 'xyz')\n False\n \"\"\"\n    for letter in word.lower():\n        if letter in letters.lower():\n            return True\n        else:\n            return False     # INCORRECT! \n```", "```py\nrun_doctests(uses_any_incorrect) \n```", "```py\n**********************************************************************\nFile \"__main__\", line 4, in uses_any_incorrect\nFailed example:\n    uses_any_incorrect('banana', 'aeiou')\nExpected:\n    True\nGot:\n    False \n```", "```py\n# This cell tells Jupyter to provide detailed debugging information\n# when a runtime error occurs. Run it before working on the exercises.\n\n%xmode Verbose \n```", "```py\nException reporting mode: Verbose \n```", "```py\ndef uses_any(word, letters):\n    for letter in word.lower():\n        if letter in letters.lower():\n            return True\n    return False \n```", "```py\ndef uses_any_incorrect(word, letters):\n    for letter in word.lower():\n        if letter in letters.lower():\n            return True\n        else:\n            return False     # INCORRECT! \n```", "```py\ndef uses_none(word, forbidden):\n  \"\"\"Checks whether a word avoid forbidden letters.\n\n >>> uses_none('banana', 'xyz')\n True\n >>> uses_none('apple', 'efg')\n False\n \"\"\"\n    return None \n```", "```py\ndef uses_only(word, available):\n  \"\"\"Checks whether a word uses only the available letters.\n\n >>> uses_only('banana', 'ban')\n True\n >>> uses_only('apple', 'apl')\n False\n \"\"\"\n    return None \n```", "```py\ndef uses_all(word, required):\n  \"\"\"Checks whether a word uses all required letters.\n\n >>> uses_all('banana', 'ban')\n True\n >>> uses_all('apple', 'api')\n False\n \"\"\"\n    return None \n```", "```py\ndef check_word(word, available, required):\n  \"\"\"Check whether a word is acceptable.\n\n >>> check_word('color', 'ACDLORT', 'R')\n True\n >>> check_word('ratatat', 'ACDLORT', 'R')\n True\n >>> check_word('rat', 'ACDLORT', 'R')\n False\n >>> check_word('told', 'ACDLORT', 'R')\n False\n >>> check_word('bee', 'ACDLORT', 'R')\n False\n \"\"\"\n    return False \n```", "```py\ndef word_score(word, available):\n  \"\"\"Compute the score for an acceptable word.\n\n >>> word_score('card', 'ACDLORT')\n 1\n >>> word_score('color', 'ACDLORT')\n 5\n >>> word_score('cartload', 'ACDLORT')\n 15\n \"\"\"\n    return 0 \n```", "```py\ndef uses_none(word, forbidden):\n  \"\"\"Checks whether a word avoids forbidden letters.\n\n >>> uses_none('banana', 'xyz')\n True\n >>> uses_none('apple', 'efg')\n False\n >>> uses_none('', 'abc')\n True\n \"\"\"\n    return not uses_any(word, forbidden) \n```", "```py\n# Here's what I got from ChatGPT 4o December 26, 2024\n# It's correct, but it makes multiple calls to uses_any \n\ndef uses_all(s1, s2):\n  \"\"\"Checks if all characters in s2 are in s1, allowing repeats.\"\"\"\n    for char in s2:\n        if not uses_any(s1, char):\n            return False\n    return True \n```"]