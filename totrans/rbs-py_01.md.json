["```py\n# Take a meal recipe and change the number of servings\n# by adjusting each ingredient\n# A recipe's first element is the number of servings, and the remainder\n# of elements is (name, amount, unit), such as (\"flour\", 1.5, \"cup\")\ndef adjust_recipe(recipe, servings):\n    new_recipe = [servings]\n    old_servings = recipe[0]\n    factor = servings / old_servings\n    recipe.pop(0)\n    while recipe:\n        ingredient, amount, unit = recipe.pop(0)\n        # please only use numbers that will be easily measurable\n        new_recipe.append((ingredient, amount * factor, unit))\n    return new_recipe\n```", "```py\ndef adjust_recipe(recipe, servings):\n    old_servings = recipe.pop(0)\n    factor = servings / old_servings\n    new_recipe = {ingredient: (amount*factor, unit)\n                  for ingredient, amount, unit in recipe}\n    new_recipe[\"servings\"] = servings\n    return new_recipe\n```", "```py\ndef adjust_recipe(recipe, servings):\n    \"\"\"\n Take a meal recipe and change the number of servings\n :param recipe: a `Recipe` indicating what needs to be adusted\n :param servings: the number of servings\n :return Recipe: a recipe with serving size and ingredients adjusted\n for the new servings\n \"\"\"\n    # create a copy of the ingredients\n    new_ingredients = list(recipe.get_ingredients())\n    recipe.clear_ingredients()\n\n    for ingredient in new_ingredients:\n            ingredient.adjust_propoprtion(Fraction(servings, recipe.servings))\n    return Recipe(servings, new_ingredients)\n```", "```py\ndef create_author_count_mapping(cookbooks: list[Cookbook]):\n    counter = {}\n    for cookbook in cookbooks:\n        if cookbook.author not in counter:\n            counter[cookbook.author] = 0\n        counter[cookbook.author] += 1\n    return counter\n```", "```py\nfrom collections import defaultdict\ndef create_author_count_mapping(cookbooks: List[Cookbook]):\n    counter = defaultdict(lambda: 0)\n    for cookbook in cookbooks:\n        counter[cookbook.author] += 1\n    return counter\n```", "```py\nfrom collections import Counter\ndef create_author_count_mapping(cookbooks: List[Cookbook]):\n    return Counter(book.author for book in cookbooks)\n```", "```py\ntext = \"This is some generic text\"\nindex = 0\nwhile index < len(text):\n    print(text[index])\n    index += 1\n```", "```py\nfor character in text:\n    print(character)\n```", "```py\nfor cookbook in cookbooks:\n    print(cookbook)\n```", "```py\nwhile is_cookbook_open(cookbook):\n    narrate(cookbook)\n```", "```py\nauthors = [cookbook.author for cookbook in cookbooks]\n```", "```py\ndef list_ingredients(item):\n    if isinstance(item, PreparedIngredient):\n        list_ingredients(item)\n    else:\n        print(ingredient)\n```"]