["```py\n@ray.remote\nclass KafkaProducer:\n   def __init__(self, broker: str = 'localhost:9092'):\n       from confluent_kafka import Producer\n       conf = {'bootstrap.servers': broker}\n       self.producer = Producer(**conf)\n\n   def produce(self, data: dict, key: str = None, topic: str = 'test'):\n\n       def delivery_callback(err, msg):\n           if err:\n               print('Message failed delivery: ', err)\n           else:\n               print(f\"Message delivered to topic {msg.topic()} \" +\n               f\"partition {msg.partition()} offset {msg.offset()}')\n\n       binary_key = None\n       if key is not None:\n           binary_key = key.encode('UTF8')\n       self.producer.produce(topic=topic, value=json.dumps(data).encode('UTF8'),\n       key=binary_key, callback=delivery_callback)\n       self.producer.poll(0)\n\n   def destroy(self):\n       self.producer.flush(30)\n```", "```py\n@ray.remote\nclass KafkaConsumer:\n   def __init__(self, callback, group: str = 'ray', broker: str = 'localhost:9092',\n       topic: str = 'test', restart: str = 'latest'):\n       from confluent_kafka import Consumer\n       from uuid import uuid4\n       # Configuration\n       consumer_conf = {'bootstrap.servers': broker,   # Bootstrap server\n                'group.id': group,                      # Group ID\n                'session.timeout.ms': 6000,      # Session tmout\n                'auto.offset.reset': restart}         # Restart\n\n       # Create Consumer instance\n       self.consumer = Consumer(consumer_conf)\n       self.topic = topic\n       self.id = str(uuid4())\n       self.callback = callback\n\n   def start(self):\n       self.run = True\n       def print_assignment(consumer, partitions):\n           print(f'Consumer {self.id}')\n           print(f'Assignment: {partitions}')\n\n       # Subscribe to topics\n       self.consumer.subscribe([self.topic], on_assign = print_assignment)\n       while self.run:\n           msg = self.consumer.poll(timeout=1.0)\n           if msg is None:\n               continue\n           if msg.error():\n               print(f\"Consumer error: {msg.error()}\")\n           else:\n               # Proper message\n               self.callback(self.id, msg)\n   def stop(self):\n       self.run = False\n\n   def destroy(self):\n       self.consumer.close()\n```", "```py\ndef setup_topics(broker: str = 'localhost:9092', topics: [] = ['test'],\n                partitions: int = 10, replication: int = 1):\n   # Re-create topic\n   # Wait for operation completion method\n   def wait_for_operation_completion(futures: dict, success: str, failure: str):\n       for topic, f in futures.items():\n           try:\n               f.result()  # The result itself is None\n               print(f\"Topic {topic} {success}\")\n           except Exception as e:\n               print(f\"{failure} {topic} error {e}\")\n\n   admin = AdminClient({'bootstrap.servers': broker})\n\n   # Delete topics\n   fs = admin.delete_topics(topics)\n\n   # Wait for each operation to finish.\n   wait_for_operation_completion(fs, \" is deleted\", \"Failed to delete topic \")\n\n   # Wait to make sure topic is deleted\n   sleep(3)\n   # Call create_topics to asynchronously create topics.\n   new_topics = [NewTopic(topic, num_partitions=partitions,\n                          replication_factor=replication) for topic in topics]\n   fs = admin.create_topics(new_topics)\n\n   # Wait for each operation to finish.\n   wait_for_operation_completion(fs, \" is created\", \"Failed to create topic \")\n```", "```py\n# Simple callback function to print topics\ndef print_message(consumer_id: str, msg):\n    print(f\"Consumer {consumer_id} new message: topic={msg.topic()} \"\n          f\"partition= {msg.partition()} offset={msg.offset()} \"\n          f\"key={msg.key().decode('UTF8')}\")\n    print(json.loads(msg.value().decode('UTF8')))\n# Set up topics\nsetup_topics()\n# Set up random number generator\nseed(1)\n# Start Ray\nray.init()\n# Start consumers and producers\nn_consumers = 1     # Number of consumers\nconsumers = [KafkaConsumer.remote(print_message) for _ in range(n_consumers)]\nproducer = KafkaProducer.remote()\nrefs = [c.start.remote() for c in consumers]\n# Publish messages\nuser_name = 'john'\nuser_favorite_color = 'blue'\n# Loop forever publishing messages to Kafka\ntry:\n   while True:\n       user = {\n           'name': user_name,\n           'favorite_color': user_favorite_color,\n           'favorite_number': randint(0, 1000)\n       }\n       producer.produce.remote(user, str(randint(0, 100)))\n       sleep(1)\n\n# End gracefully\nexcept KeyboardInterrupt:\n   for c in consumers:\n       c.stop.remote()\nfinally:\n   for c in consumers:\n       c.destroy.remote()\n   producer.destroy.remote()\n   ray.kill(producer)\n```", "```py\nTopic  test  is deleted\nTopic  test  is created\n2021-08-23 17:00:57,951\tINFO services.py:1264 -- View the Ray dashboard at http://...\n(pid=19981) Consumer  04c698a5-db3a-4da9-86df-cd7d6fb7dc6d\n(pid=19981) Assignment: [TopicPartition{topic=test,partition=0,offset=-1001,error=...\n…………………………………………………………………………………………..\n(pid=19981) Consumer  ... new message: topic= test  partition= 8  offset= 0  key= 57\n(pid=19981) {'name': 'john', 'favorite_color': 'blue', 'favorite_number': 779}\n(pid=19981) Consumer  ... new message: topic= test  partition= 2  offset= 0  key= 63\n(pid=19981) {'name': 'john', 'favorite_color': 'blue', 'favorite_number': 120}\n(pid=19981) Consumer  ... new message: topic= test  partition= 8  offset= 1  key= 83\n(pid=19981) {'name': 'john', 'favorite_color': 'blue', 'favorite_number': 483}\n(pid=19977) Message delivered to topic  test  partition  8  offset 0\n(pid=19977) Message delivered to topic  test  partition  2  offset 0\n(pid=19977) Message delivered to topic  test  partition  8  offset 1\n(pid=19981) Consumer  ... new message: topic= test  partition= 8  offset= 2  key= 100\n(pid=19981) {'name': 'john', 'favorite_color': 'blue', 'favorite_number': 388}\n(pid=19981) Consumer  ... new message: topic= test  partition= 5  offset= 0  key= 12\n(pid=19981) {'name': 'john', 'favorite_color': 'blue', 'favorite_number': 214}\n(pid=19977) Message delivered to topic  test  partition  8  offset 2\n(pid=19981) Consumer  ... new message: topic= test  partition= 1  offset= 0  key= 3\n(pid=19981) {'name': 'john', 'favorite_color': 'blue', 'favorite_number': 499}\n(pid=19977) Message delivered to topic  test  partition  5  offset 0\n(pid=19981) Consumer  ... new message: topic= test  partition= 6  offset= 0  key= 49\n(pid=19981) {'name': 'john', 'favorite_color': 'blue', 'favorite_number': 914}\n(pid=19977) Message delivered to topic  test  partition  1  offset 0\n(pid=19977) Message delivered to topic  test  partition  6  offset 0\n(pid=19981) Consumer  ... new message: topic= test  partition= 8  offset= 3  key= 77\n…………………………...\n```", "```py\nTopic  test  is deleted\nTopic  test  is created\n2021-08-23 17:15:12,353\tINFO services.py:1264 -- View the Ray dashboard at http://...\n(pid=20100) Message delivered to topic  test  partition  8  offset 0\n(pid=20100) Message delivered to topic  test  partition  2  offset 0\n(pid=20103) Consumer  9e2773d4-f006-4d4d-aac3-fe75ed27f44b\n(pid=20103) Assignment: [TopicPartition{topic=test,partition=0,offset=-1001,error=...\n(pid=20107) Consumer  bdedddd9-db16-4c24-a7ef-338e91b4e100\n(pid=20107) Assignment: [TopicPartition{topic=test,partition=4,offset=-1001,error=...\n(pid=20101) Consumer  d76b7fad-0b98-4e03-92e3-510aac2fcb11\n(pid=20101) Assignment: [TopicPartition{topic=test,partition=6,offset=-1001,error=...\n(pid=20106) Consumer  e3d181af-d095-4b7f-b3d6-830299c207a8\n……………………………………………………………………………………..\n(pid=20100) Message delivered to topic  test  partition  8  offset 1\n(pid=20104) Consumer ... new message: topic= test  partition= 8  offset= 2  key= 100\n(pid=20104) {'name': 'john', 'favorite_color': 'blue', 'favorite_number': 388}\n(pid=20100) Message delivered to topic  test  partition  8  offset 2\n(pid=20107) Consumer ... new message: topic= test  partition= 5  offset= 0  key= 12\n(pid=20107) {'name': 'john', 'favorite_color': 'blue', 'favorite_number': 214}\n(pid=20100) Message delivered to topic  test  partition  5  offset 0\n(pid=20103) Consumer ... new message: topic= test  partition= 1  offset= 0  key= 3\n(pid=20103) {'name': 'john', 'favorite_color': 'blue', 'favorite_number': 499}\n(pid=20100) Message delivered to topic  test  partition  1  offset 0\n(pid=20101) Consumer ... new message: topic= test  partition= 6  offset= 0  key= 49\n(pid=20101) {'name': 'john', 'favorite_color': 'blue', 'favorite_number': 914}\n(pid=20100) Message delivered to topic  test  partition  6  offset 0\n(pid=20104) Consumer ... new message: topic= test  partition= 8  offset= 3  key= 77\n(pid=20104) {'name': 'john', 'favorite_color': 'blue', 'favorite_number': 443}\n(pid=20100) Message delivered to topic  test  partition  8  offset 3\n(pid=20103) Consumer ... new message: topic= test  partition= 1  offset= 1  key= 98\n(pid=20103) {'name': 'john', 'favorite_color': 'blue', 'favorite_number': 780}\n……………………………………………………….\n```", "```py\nfrom enum import Enum\nclass Action(Enum):\n    NONE = -1\n    OFF = 0\n    ON = 1\n\nclass BaseTemperatureController:\n    def __init__(self, id: str):\n        self.current_setting = None\n        self.previous_command = -1\n        self.id = id\n\n    # Process new message\n    def process_new_message(self, message: dict):\n        if 'measurement' in message:    # Measurement request\n            self.process_sensor_data(message)\n        else:                           # Temp set request\n            self.set_temperature(message)\n\n    # Set new temperature\n    def set_temperature(self, setting: dict):\n        desired = setting['temperature']\n        updelta = setting['up_delta']\n        downdelta = setting['down_delta']\n        print(f'Controller {self.id} new temperature setting {desired} up '\n              f'delta {updelta} down delta {downdelta}')\n        self.current_setting = desired\n        self.up_delta = updelta\n        self.down_delta = down_delta\n\n    # Process new measurements\n    def process_sensor_data(self, sensor: dict) ->bool:\n        # Desired temperature is set, otherwise ignore\n        if self.current_setting is not None:           \n            # Calculate desired action\n            measurement = sensor['measurement']\n            action = Action.NONE\n            if measurement > (self.current_setting + self.up_delta):\n                action = Action.ON\n            if measurement < (self.current_setting - self.down_delta):\n                action = Action.OFF\n            # New action\n            if action != Action.NONE and self.previous_command != action:  \n                self.previous_command = action\n                # Publish new action to kafka\n                return True\n            else:\n                return False\n        else:\n            return False\n```", "```py\nclass TemperatureControllerManager:\n   def __init__(self, producer: KafkaProducer):\n       self.controllers = {}\n       self.producer = producer\n\n   def process_controller_message(self, key: str,  request: dict):\n       if not key in self.controllers:   # Create a new controller\n           print(f'Creating a new controller {controller_id}')\n           controller = TemperatureController(producer=self.producer, id=key)\n           self.controllers[key] = controller\n       self.controllers[key].process_new_message(request)\n```", "```py\n@ray.remote\nclass KafkaConsumer:\n   def __init__(self, producer: KafkaProducer, group: str = 'ray',\nbroker: str = 'localhost:9092', topic: str = 'sensor', restart: str = 'earliest'):\n       from confluent_kafka import Consumer\n       import logging\n       # Configuration\n       consumer_conf = {'bootstrap.servers': broker,   # Bootstrap server\n                'group.id': group,                      # Group ID\n                'session.timeout.ms': 6000,            # Session tmout\n                'auto.offset.reset': restart}          # Restart\n\n       # Create Consumer instance\n       self.consumer = Consumer(consumer_conf)\n       self.topic = topic\n       self.callback = TemperatureControllerManager(producer).\nprocess_controller_message\n\n   def start(self):\n       self.run = True\n       def print_assignment(consumer, partitions):\n       \tprint(f'Assignment: {partitions}')\n\n       # Subscribe to topics\n       self.consumer.subscribe([self.topic], on_assign = print_assignment)\n       while self.run:\n       \tmsg = self.consumer.poll(timeout=1.0)\n       \tif msg is None:\n                 continue\n       \tIf msg.error():\n                  print(f'Consumer error: {msg.error()}')\n                continue\n       \telse:\n                # Proper message\n                print(f\"New message: topic={msg.topic()} \" +\n                f\"partition= {msg.partition()} offset={msg.offset()}\")\n                key = None\n                if msg.key() != None:\n                    key = msg.key().decode(\"UTF8\")\n                print(f'key={key}')\n                value = json.loads(msg.value().decode(\"UTF8\"))\n                print(f'value = {value}')\n                self.callback(key, value)\n\n   def stop(self):\n       self.run = False\n\n   def destroy(self):\n       self.consumer.close()\n```", "```py\n(pid=29041) New message: topic= sensor  partition= 9  offset= 18\n(pid=29041) key  1234  value  {'measurement': 45.0}\n(pid=29041) New message: topic= sensor  partition= 9  offset= 19\n(pid=29041) key  1234  value  {'measurement': 45.2}\n(pid=29041) New message: topic= sensor  partition= 9  offset= 20\n(pid=29041) key  1234  value  {'measurement': 45.3}\n(pid=29041) New message: topic= sensor  partition= 9  offset= 21\n(pid=29041) key  1234  value  {'measurement': 45.5}\n(pid=29041) New message: topic= sensor  partition= 9  offset= 22\n(pid=29041) key  1234  value  {'measurement': 45.7}\n(pid=29041) New message: topic= sensor  partition= 9  offset= 23\n(pid=29041) key  1234  value  {'measurement': 45.9}\n(pid=29041) New message: topic= sensor  partition= 9  offset= 24\n(pid=29041) key  1234  value  {'measurement': 46.0}\n(pid=29041) New message: topic= sensor  partition= 9  offset= 25\n(pid=29041) key  1234  value  {'measurement': 46.2}\n(pid=29040) Message delivered to topic  heatercontrol  partition  9  offset 0\n(pid=29041) New message: topic= sensor  partition= 9  offset= 26\n(pid=29041) key  1234  value  {'measurement': 46.1}\n(pid=29041) New message: topic= sensor  partition= 9  offset= 27\n(pid=29041) key  1234  value  {'measurement': 46.0}\n(pid=29041) New message: topic= sensor  partition= 9  offset= 28\n(pid=29041) key  1234  value  {'measurement': 46.0}\n(pid=29041) New message: topic= sensor  partition= 9  offset= 29\n(pid=29041) key  1234  value  {'measurement': 45.9}\n(pid=29041) New message: topic= sensor  partition= 9  offset= 30\n(pid=29041) key  1234  value  {'measurement': 45.7}\n```"]