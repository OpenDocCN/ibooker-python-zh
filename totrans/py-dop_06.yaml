- en: Chapter 6\. Continuous Integration and Continuous Deployment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章 连续集成和连续部署
- en: '*Author: Noah*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*作者：Noah*'
- en: The practices of continuous integration (CI) and continuous deployment (CD)
    are essential to a modern software development life cycle process. A CI system
    clones the codebase for the software under consideration from a source control
    system such as GitHub, builds the software into an artifact that can be a binary,
    a tar archive, or a Docker image, and, very importantly, also runs unit and/or
    integration tests for the software. A CD system deploys the artifacts built by
    the CI system to a target environment. This deployment can be automated for nonproduction
    environments, but usually includes a manual approval step for production. A more
    advanced type of such systems is a continuous delivery platform, which automates
    the deployment step to production and is capable of rolling back the deployment
    based on metrics obtained from monitoring and logging platforms.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 连续集成（CI）和连续部署（CD）的实践对现代软件开发生命周期过程至关重要。CI 系统从诸如 GitHub 这样的源代码控制系统中克隆软件的代码库，将软件构建为可以是二进制、tar
    归档或 Docker 镜像的构件，并且非常重要的是，还运行软件的单元测试和/或集成测试。CD 系统将由 CI 系统构建的构件部署到目标环境中。这种部署可以自动化处理非生产环境，但通常在生产环境中包括手动批准步骤。此类系统的更高级别是连续交付平台，该平台自动化生产部署步骤，并且能够基于从监控和日志平台获取的指标回滚部署。
- en: 'Real-World Case Study: Converting a Poorly Maintained WordPress Site to Hugo'
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 真实案例研究：将维护不善的 WordPress 网站转换为 Hugo
- en: A while back, a friend asked for a favor fixing their company website. The company
    sold very expensive, used scientific equipment and its inventory was served via
    a WordPress site that was frequently hacked, performed horribly, or was down for
    days. Typically I try to avoid getting sucked into projects like this, but since
    it was a friend, I decided to help. You can reference the code for the conversion
    project at this [Git repository](https://oreil.ly/myos1).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 不久之前，一个朋友请求帮忙修复他们公司的网站。该公司销售价格昂贵的二手科学设备，其库存通过一个经常被黑客攻击、性能糟糕或者经常宕机的 WordPress
    站点提供。通常我会避免卷入这样的项目，但因为是朋友，我决定帮忙。你可以在这个[Git 仓库](https://oreil.ly/myos1)中参考转换项目的代码。
- en: 'Each step of the conversion process is covered in the GitHub repo. The steps
    include:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 仓库中覆盖了转换过程的每一个步骤。这些步骤包括：
- en: Backup
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 备份
- en: Convert
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转换
- en: Upgrade
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 升级
- en: Deploy
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署
- en: Note
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The story had a funny ending. After creating a bulletproof, “tank” of a website
    that had incredible performance, security, auto-deployment, and incredible SEO,
    it ran for years with zero vulnerabilities or downtime. Long after I had forgotten
    about the project, I got a text from my friend. It had been a couple years since
    I had last talked with him. He said the website was down and he needed my help.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 故事有个有趣的结局。在创建了一个坚不可摧的、性能惊人的、安全的、自动部署的、以及 SEO 无敌的“坦克”式网站后，它在多年间零漏洞、零宕机地运行着。在我早已忘记这个项目的时候，我收到了朋友的一条短信。我已经有几年没和他联系了。他说网站挂了，需要我的帮助。
- en: I texted back to him to ask how this was possible. It is running off Amazon
    S3 which has 99.999999999% uptime. He texted back that he had recently converted
    it back to WordPress because it was “easier” to make changes. I laughed and told
    him I wasn’t a good fit for his project. As they say, no good deed is left unpunished.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我回复他问如何可能的时候发了个短信。这是在 Amazon S3 上运行的，有99.999999999%的正常运行时间。他回复说最近又把它转回 WordPress
    了，因为“更容易”修改。我笑了，并告诉他我不适合他的项目。俗话说，善有善报。
- en: 'Some of the requirements I considered were:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我考虑的一些需求包括：
- en: It needed to be continuously deployed.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它需要进行持续部署。
- en: It needed to be fast to run and develop against!
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它需要快速运行和开发！
- en: It should be a static site hosted from a cloud provider.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该是由云提供商托管的静态站点。
- en: There should be a reasonable workflow for converting from WordPress.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该有一个合理的工作流程，可以从 WordPress 进行转换。
- en: It should be possible to create a reasonable search interface using Python.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该可以使用 Python 创建一个合理的搜索界面。
- en: In the end I decided to use [Hugo](https://gohugo.io), [AWS](https://aws.amazon.com),
    and [Algolia](https://www.algolia.com). The general architecture looked like [Figure 6-1](#Figure-6-1).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我决定使用[Hugo](https://gohugo.io)，[AWS](https://aws.amazon.com)，以及[Algolia](https://www.algolia.com)。整体架构看起来像[图 6-1](#Figure-6-1)。
- en: '![pydo 0601](assets/pydo_0601.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![pydo 0601](assets/pydo_0601.png)'
- en: Figure 6-1\. Continuous deployment with Hugo
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-1 连续部署与 Hugo
- en: Setting Up Hugo
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Hugo
- en: 'Getting started with Hugo is very straightforward (see the [getting started
    Hugo guide](https://oreil.ly/r_Rcg)). First, install the software. On my OS X
    machine I did it this way:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用Hugo非常简单（参见[Hugo入门指南](https://oreil.ly/r_Rcg)）。首先，安装软件。在我的OS X机器上，我是这样做的：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you already installed Hugo, you may need to upgrade:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经安装了Hugo，您可能需要升级：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you are on another platform, you can follow [instructions here](https://oreil.ly/FfWdo).
    To verify things are working, run `hugo version`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用另一个平台，可以在[这里的说明](https://oreil.ly/FfWdo)中进行跟随。要验证一切是否正常工作，请运行`hugo version`：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The only thing left to do is to initialize a skeleton Hugo app and install
    a theme:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一剩下的事情是初始化一个骨架Hugo应用程序并安装一个主题：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This creates a new site called `quickstart`. You can build this site again,
    VERY QUICKLY, by running `hugo`. This compiles the markdown files to HTML and
    CSS.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`quickstart`的新网站。您可以通过运行`hugo`非常快地再次构建此站点。这会将Markdown文件编译为HTML和CSS。
- en: Converting WordPress to Hugo Posts
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将WordPress转换为Hugo文章
- en: 'Next, I converted the WordPress database to JSON via a raw dump. Then I wrote
    a Python script to convert this data into Hugo posts in markdown format. Here
    is that code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我通过原始转储将WordPress数据库转换为JSON。然后，我编写了一个Python脚本，将这些数据转换为Markdown格式的Hugo文章。以下是该代码：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating an Algolia Index and Updating It
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Algolia索引并更新它
- en: With the database products converted to markdown posts, the next step is to
    write some Python code that creates an Algolia index and syncs it. [Algolia](https://www.algolia.com)
    is a great tool to use because it quickly solves the search engine problem and
    has nice Python support as well.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据库产品转换为Markdown文章后，下一步是编写一些Python代码来创建Algolia索引并将其同步。[Algolia](https://www.algolia.com)是一个很好的工具，因为它可以快速解决搜索引擎问题，并且还具有很好的Python支持。
- en: 'This script crawls through all of the markdown files and generates a search
    index that can be uploaded to Algolia:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本遍历所有Markdown文件并生成一个可上传到Algolia的搜索索引：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, the index can be sent to Algolia with this snippet:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以使用以下片段将索引发送到Algolia：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Orchestrating with a Makefile
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Makefile进行编排
- en: 'Using a `Makefile` allows you to replicate the steps your deployment process
    will use later. I typically set up a `Makefile` to orchestrate this locally. Here
    is what the entire build and deploy process looks like:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Makefile`可以复制后续部署过程中使用的步骤。我通常设置一个`Makefile`在本地编排这些步骤。以下是整个构建和部署过程的样子：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Deploying with AWS CodePipeline
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用AWS CodePipeline部署
- en: Amazon Web Services (AWS) is a common deployment target for hosting a static
    website via Amazon S3, Amazon Route 53, and Amazon CloudFront. AWS CodePipeline,
    their build server service, works very well as the deployment mechanism for these
    sites. You can log into AWS CodePipeline, set up a new build project, and tell
    it to use a *buildspec.yml* file. The code can be customized and the portions
    that are templated out can be replaced with actual values.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Web Services（AWS）是通过Amazon S3、Amazon Route 53和Amazon CloudFront托管静态网站的常见部署目标。他们的构建服务器服务AWS
    CodePipeline非常适合这些站点的部署机制。您可以登录AWS CodePipeline，设置一个新的构建项目，并告诉它使用一个*buildspec.yml*文件。代码可以定制，模板化的部分可以替换为实际值。
- en: As soon as GitHub gets a change event, CodePipeline runs the install in a container.
    First it grabs the specific version of Hugo specified. Next it builds the Hugo
    pages. Thousands of Hugo pages can be rendered subsecond because of the speed
    of Go.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦GitHub接收到更改事件，CodePipeline会在容器中运行安装。首先，它获取指定版本的特定版本的Hugo。接下来，它构建Hugo页面。由于Go语言的速度非常快，可以在几秒钟内渲染数千个Hugo页面。
- en: 'Finally, the HTML pages are synced to Amazon S3\. Because this is running inside
    of AWS and is synced, it is also extremely fast. The final step is that CloudFront
    is invalidated:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，HTML页面被同步到Amazon S3。因为这在AWS内部运行并且被同步，所以速度非常快。最后一步是使CloudFront失效：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Real-World Case Study: Deploying a Python App Engine Application with Google
    Cloud Build'
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实际案例研究：使用Google Cloud Build部署Python应用引擎应用程序
- en: Back in 2008 I wrote the very first article on using Google App Engine. You
    have to use the Wayback Machine to get it from the [O’Reilly blog](https://oreil.ly/8LoIf).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 回到2008年，我写了关于使用Google App Engine的第一篇文章。您需要使用Wayback Machine从[O’Reilly博客](https://oreil.ly/8LoIf)获取它。
- en: 'Here is a reboot for the modern era. This is another version of Google App
    Engine, but this time it uses [Google Cloud Build](https://oreil.ly/MllhM). The
    Google Cloud Platform (GCP) Cloud Build works a lot like AWS CodePipeline. Here
    is a config file that is checked into a GitHub repo. The config file is named
    *cloudbuild.yaml*. You can see all of the source code for this project [in this
    Git repository](https://oreil.ly/vxsnc):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现代时代的重启。这是 Google App Engine 的另一个版本，但这次使用 [Google Cloud Build](https://oreil.ly/MllhM)。Google
    Cloud 平台（GCP）Cloud Build 的工作方式与 AWS CodePipeline 非常相似。这里有一个配置文件，它已经检入 GitHub 仓库。配置文件名为
    *cloudbuild.yaml*。你可以在此项目的 [Git 仓库中查看所有源代码](https://oreil.ly/vxsnc)：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Note that the *cloudbuild.yaml* file installs the packages seen here in the
    *requirements.txt* file and also runs `gcloud app deploy`, which deploys the App
    Engine application on check-in to GitHub:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 *cloudbuild.yaml* 文件安装了在 *requirements.txt* 文件中看到的包，并运行 `gcloud app deploy`，这在
    GitHub 上检入时部署 App Engine 应用程序：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is a walk-through of how to set up this entire project:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是如何设置整个项目的步骤走-through：
- en: Create the project.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建项目。
- en: Activate the cloud shell.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活云 Shell。
- en: Refer to the [hello world docs for the Python 3 App Engine](https://oreil.ly/zgf5J).
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考 [Python 3 App Engine 的 hello world 文档](https://oreil.ly/zgf5J)。
- en: 'Run `describe`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '运行 `describe`:'
- en: '[PRE11]bash'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PRE11]bash'
- en: gcloud projects describe $GOOGLE_CLOUD_PROJECT
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: gcloud projects describe $GOOGLE_CLOUD_PROJECT
- en: '[PRE12]bash'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PRE12]bash'
- en: 'createTime: ''2019-05-29T21:21:10.187Z'''
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'createTime: ''2019-05-29T21:21:10.187Z'''
- en: 'lifecycleState: ACTIVE'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生命周期状态：活动
- en: 'name: helloml'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 名称：helloml
- en: 'projectId: helloml-xxxxx'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'projectId: helloml-xxxxx'
- en: 'projectNumber: ''881692383648'''
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'projectNumber: ''881692383648'''
- en: '[PRE13]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You may want to verify that you have the correct project. If not, do this to
    switch:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能想验证是否选择了正确的项目。如果没有，请执行以下操作进行切换：
- en: '[PRE14]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create the App Engine app:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 App Engine 应用程序：
- en: '[PRE15]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will ask for the region. Go ahead and pick `us-central [12]`.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将询问区域。继续选择 `us-central [12]`。
- en: '[PRE16]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Clone the hello world sample app repo:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆 hello world 示例应用程序仓库：
- en: '[PRE17]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`cd` into the repo:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cd` 进入 repo：'
- en: '[PRE18]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Update the Cloudshell image (note that this is optional):'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 Cloudshell 镜像（请注意，这是可选的）：
- en: '[PRE19]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create and source the virtual environment:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并启用虚拟环境：
- en: '[PRE20]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Double-check that it works:'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 双重检查是否有效：
- en: '[PRE21]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Activate the cloud shell editor.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活云 Shell 编辑器。
- en: 'Install the packages:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装包：
- en: '[PRE22]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This should install Flask:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '这应该安装 Flask:'
- en: '[PRE23]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run Flask locally. This runs Flask locally in the GCP shell:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本地运行 Flask。这将在 GCP Shell 中本地运行 Flask：
- en: '[PRE24]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Use the web preview (see [Figure 6-2](#Figure-6-2)).
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网页预览（见 [Figure 6-2](#Figure-6-2)）。
- en: '![pydo 0602](assets/pydo_0602.png)'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![pydo 0602](assets/pydo_0602.png)'
- en: Figure 6-2\. Web preview
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 6-2\. 网页预览
- en: 'Update *main.py*:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '更新 *main.py*:'
- en: '[PRE25]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Test out passing in parameters to exercise this function:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试传入参数以执行此功能：
- en: '[PRE26]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'For example, calling this route will take the word *lion* and pass it into
    the name function in Flask:'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，调用此路由将会将单词 *lion* 传递到 Flask 中的 name 函数中：
- en: '[PRE27]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Returns a value in the web browser:'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 web 浏览器中返回一个值：
- en: '[PRE28]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now deploy the app:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在部署应用程序：
- en: '[PRE29]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Be warned! The first deploy could take about 10 minutes. You might also need
    to enable the cloud build API.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告！第一次部署可能需要大约 10 分钟。您可能还需要启用 Cloud Build API。
- en: '[PRE30]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now stream the log files:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在流式传输日志文件：
- en: '[PRE31]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The production app is deployed and should like this:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生产应用已部署，应如此：
- en: '[PRE32]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add a new route and test it out:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加新路由并测试：
- en: '[PRE33]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Install Pandas and return JSON results. At this point, you may want to consider
    creating a `Makefile` and doing this:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Pandas 并返回 JSON 结果。此时，您可能希望考虑创建一个 `Makefile` 并执行以下操作：
- en: '[PRE34]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You also may want to set up lint:'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可能还想设置 lint：
- en: '[PRE35]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The web route syntax looks like the following block. Add Pandas import at the
    top:'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Web 路由语法看起来像以下代码块。在顶部添加 Pandas 导入：
- en: '[PRE36]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: When you call the route https://<yourapp>.appspot.com/pandas, you should get
    something like [Figure 6-3](#Figure-6-3).
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当您调用路由 https://<yourapp>.appspot.com/pandas 时，您应该看到类似 [Figure 6-3](#Figure-6-3)
    的东西。
- en: '![pydo 0603](assets/pydo_0603.png)'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![pydo 0603](assets/pydo_0603.png)'
- en: Figure 6-3\. Example of JSON out
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 6-3\. JSON 输出示例
- en: 'Add this Wikipedia route:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加此 Wikipedia 路由：
- en: '[PRE37]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add NLP to the app:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向应用添加 NLP：
- en: Run [IPython Notebook](https://oreil.ly/c564z).
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 [IPython Notebook](https://oreil.ly/c564z)。
- en: Enable the Cloud Natural Language API.
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用云自然语言 API。
- en: 'Run `pip install google-cloud-language`:'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '运行 `pip install google-cloud-language`:'
- en: '[PRE38]'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Here is an end-to-end AI API example:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一个端到端的 AI API 示例：
- en: '[PRE39]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This section has shown how to both set up an App Engine application from scratch
    in the Google Cloud Shell, as well as how to do continuous delivery using GCP
    Cloud Build.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 本节展示了如何在 Google Cloud Shell 中从头开始设置 App Engine 应用程序，以及如何使用 GCP Cloud Build 进行持续交付。
- en: 'Real-World Case Study: NFSOPS'
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实际案例研究：NFSOPS
- en: NFOPS is an operational technique that uses NFS (Network File System) mount
    points to manage clusters of computers. It sounds like it is a new thing, but
    it has been around since Unix has been around. Noah used NFS mount points on Caltech’s
    Unix systems back in 2000 to manage and maintain software. What is old is new
    again.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: NFSOPS 是一种操作技术，利用 NFS（网络文件系统）挂载点来管理计算机集群。听起来像是一种新技术，但实际上自 Unix 存在以来就一直存在。Noah
    在 2000 年就曾在加州理工学院的 Unix 系统上使用 NFS 挂载点来管理和维护软件。新的东西又重新回到了老的循环。
- en: As a part-time consultant at a virtual reality startup in San Francisco, one
    problem I faced was how to build a jobs framework, quickly, that would dispatch
    work to thousands of AWS Spot Instances.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 作为旧金山虚拟现实创业公司的兼职顾问，我面临的一个问题是如何快速构建一个作业框架，可以将工作分派给成千上万个 AWS Spot Instances。
- en: The solution that ultimately worked was to use NFSOPS ([Figure 6-4](#Figure-6-4))
    to deploy Python code to thousands of Computer Vision Spot Instances subsecond.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最终解决方案是使用 NFSOPS（[图 6-4](#Figure-6-4)）在亚秒内部署 Python 代码到成千上万的计算机视觉 Spot Instances。
- en: '![pydo 0604](assets/pydo_0604.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![pydo 0604](assets/pydo_0604.png)'
- en: Figure 6-4\. NFSOPS
  id: totrans-137
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-4\. NFSOPS
- en: 'NFSOPS works by using a build server, in this case Jenkins, to mount several
    Amazon Elastic File System (EFS) mount points (DEV, STAGE, PROD). When a continuous
    integration build is performed, the final step is an `rsync` to the respective
    mount point:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: NFSOPS 的工作方式是利用构建服务器，例如 Jenkins，在几个亚马逊弹性文件系统（EFS）挂载点（DEV、STAGE、PROD）上挂载。当进行持续集成构建时，最后一步是对相应挂载点进行
    `rsync`：
- en: '[PRE40]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The “deploy” is then subsecond to the mount point. When spot instances are launched
    by the thousands, they are preconfigured to mount EFS (the NFS mount points) and
    use the source code. This is a handy deployment pattern that optimizes for simplicity
    and speed. It can also work quite well in tandom with IAC, Amazon Machine Image
    (AMI), or Ansible.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: “部署”然后在亚秒内完成到挂载点。当成千上万的 Spot Instances 被启动时，它们预配置为挂载 EFS（NFS 挂载点）并使用源代码。这是一种优化简单和速度的便捷部署模式。它还可以与
    IAC、Amazon Machine Image（AMI）或 Ansible 很好地配合使用。
