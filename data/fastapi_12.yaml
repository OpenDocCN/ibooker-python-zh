- en: Chapter 9\. Service Layer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章\. 服务层
- en: What was that middle thing?
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 那个中间的东西是什么？
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Otto West, *A Fish Called Wanda*
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 奥托·韦斯特，《一条名为万达的鱼》
- en: Preview
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预览
- en: This chapter expands on the Service layer—the middle thing. A leaky roof can
    cost a lot of money. Leaky software isn’t as obvious but can cost a lot of time
    and effort. How can you structure your application so that the layers don’t leak?
    In particular, what should and should not go into the Service layer in the middle?
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章扩展了服务层——中间层。一个漏水的屋顶可能会花费很多钱。漏水的软件不那么明显，但会花费大量时间和精力。你应该如何构建你的应用程序，以避免层间的泄漏？特别是，什么应该放入服务层中，什么不应该？
- en: Defining a Service
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义一个服务
- en: The Service layer is the heart of the website, its reason for being. It takes
    requests from multiple sources, accesses the data that is the DNA of the site,
    and returns responses.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 服务层是网站的核心，它存在的原因。它接受来自多个来源的请求，访问构成网站DNA的数据，并返回响应。
- en: 'Common service patterns include a combination of the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的服务模式包括以下组合：
- en: Create / retrieve / change (partially or completely) / delete
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 / 检索 / 修改（部分或完全）/ 删除
- en: One thing / multiple things
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个东西 / 多个东西
- en: At the RESTful router layer, the nouns are *resources*. In this book, our resources
    will initially include cryptids (imaginary creatures) and people (cryptid explorers).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在RESTful路由器层，名词是*资源*。在本书中，我们的资源最初将包括神秘动物（虚构生物）和人物（神秘动物探险者）。
- en: 'Later, it will be possible to define related resources like these:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，可以定义类似这些的相关资源：
- en: Places
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地点
- en: Events (e.g., expeditions, sightings)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件（例如，探险、目击）
- en: Layout
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布局
- en: 'Here’s the current file and directory layout:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是当前的文件和目录布局：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this chapter, you’ll fiddle with files in the *service* directory.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将会操作*service*目录中的文件。
- en: Protection
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护
- en: One nice thing about layers is that you don’t have to worry about everything.
    The Service layer cares only about what goes into and out of the data. As you’ll
    see in [Chapter 11](ch11.html#ch11), a higher layer (in this book, *Web*) can
    handle the authentication and authorization messiness. The functions to create,
    modify, and delete should not be wide open, and even the `get` functions might
    eventually need some limits.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 层次结构的一个好处是你不必担心一切。服务层只关心数据的输入和输出。正如你将在[第11章](ch11.html#ch11)中看到的，一个更高层次（在本书中是*Web*）可以处理认证和授权的混乱问题。创建、修改和删除的功能不应该是完全开放的，甚至`get`函数最终可能也需要一些限制。
- en: Functions
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数
- en: Let’s start with *creature.py*. At this point, the needs of *explorer.py* will
    be almost the same, and we can borrow almost everything. It’s so tempting to write
    a single service file that handles both, but, almost inevitably, at some point
    we’ll need to handle them differently.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从*creature.py*开始。此时，*explorer.py*的需求几乎相同，我们几乎可以借用所有内容。编写一个处理两者的单一服务文件是如此诱人，但几乎不可避免地，我们最终会需要不同方式处理它们。
- en: Also at this point, the service file is pretty much a pass-through layer. This
    is a case in which a little extra structure at the start will pay off later. Much
    as you did for *web/creature.py* and *web/explorer.py* in [Chapter 8](ch08.html#ch08),
    you’ll define service modules for both, and hook both of them up to their corresponding
    *fake* data modules for now (Examples [9-1](#ex-9-1) and [9-2](#ex-9-2)).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此时的服务文件基本上是一个透传层。这是一个情况，在这种情况下，开始时稍微多做一些结构化工作会在后面得到回报。就像你在[第8章](ch08.html#ch08)中为*web/creature.py*和*web/explorer.py*所做的那样，你将为两者定义服务模块，并暂时将它们都连接到相应的*fake*数据模块（示例[9-1](#ex-9-1)和[9-2](#ex-9-2)）。
- en: Example 9-1\. An initial service/creature.py file
  id: totrans-24
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 9-1\. 初始的service/creature.py文件
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Example 9-2\. An initial service/explorer.py file
  id: totrans-26
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 9-2\. 初始的service/explorer.py文件
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-28
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'The syntax of the `get_one()` function’s return value (`Creature | None`) needs
    at least Python 3.9. For earlier versions, you need `Optional`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_one()`函数返回值的语法（`Creature | None`）至少需要Python 3.9。对于早期版本，你需要`Optional`：'
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Test!
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试！
- en: 'Now that the codebase is filling out a bit, it’s a good time to introduce automated
    tests. (The Web tests in the previous chapter have all been manual tests.) So
    let’s make some directories:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在代码库逐渐完善，是引入自动化测试的好时机。（前一章的Web测试都是手动测试。）因此，让我们创建一些目录：
- en: test
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 测试
- en: A top-level directory, alongside *web*, *service*, *data*, and *model*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一个顶层目录，与*web*、*service*、*data*和*model*并列。
- en: unit
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 单元
- en: Exercise single functions, but don’t cross layer boundaries.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 练习单个函数，但不要跨层边界。
- en: web
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: web
- en: Web-layer unit tests.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Web层单元测试。
- en: service
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: service
- en: Service-layer unit tests.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 服务层单元测试。
- en: data
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 数据
- en: Data-layer unit tests.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 数据层单元测试。
- en: full
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 完整
- en: Also known as *end-to-end* or *contract* tests, these span all layers at once.
    They address the API endpoints in the Web layer.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Also known as *end-to-end* or *contract* tests, these span all layers at once.
    They address the API endpoints in the Web layer.
- en: The directories have the *test_* prefix or *_test* suffix for use by pytest,
    which you’ll start to see in [Example 9-4](#ex-9-4) (which runs the test in [Example 9-3](#ex-9-3)).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: The directories have the *test_* prefix or *_test* suffix for use by pytest,
    which you’ll start to see in [Example 9-4](#ex-9-4) (which runs the test in [Example 9-3](#ex-9-3)).
- en: 'Before testing, a few API design choices need to be made. What should be returned
    by the `get_one()` function if a matching `Creature` or `Explorer` isn’t found?
    You can return `None`, as in [Example 9-2](#ex-9-2). Or you could raise an exception.
    None of the built-in Python exception types deal directly with missing values:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 'Before testing, a few API design choices need to be made. What should be returned
    by the `get_one()` function if a matching `Creature` or `Explorer` isn’t found?
    You can return `None`, as in [Example 9-2](#ex-9-2). Or you could raise an exception.
    None of the built-in Python exception types deal directly with missing values:'
- en: '`TypeError` may be the closest, because `None` is a different type than `Creature`.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TypeError` may be the closest, because `None` is a different type than `Creature`.'
- en: '`ValueError` is more suited for the wrong value for a given type, but I guess
    you could say that passing a missing string `id` to `get_one(id)` qualifies.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ValueError` is more suited for the wrong value for a given type, but I guess
    you could say that passing a missing string `id` to `get_one(id)` qualifies.'
- en: You could define your own `MissingError` if you really want to.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: You could define your own `MissingError` if you really want to.
- en: Whichever method you choose, the effects will bubble up all the way to the top
    layer.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Whichever method you choose, the effects will bubble up all the way to the top
    layer.
- en: Let’s go with the `None` alternative rather than the exception for now. After
    all, that’s what *none* means. [Example 9-3](#ex-9-3) is a test.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Let’s go with the `None` alternative rather than the exception for now. After
    all, that’s what *none* means. [Example 9-3](#ex-9-3) is a test.
- en: Example 9-3\. Service test test/unit/service/test_creature.py
  id: totrans-52
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 9-3\. Service test test/unit/service/test_creature.py
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Run the test in [Example 9-4](#ex-9-4).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Run the test in [Example 9-4](#ex-9-4).
- en: Example 9-4\. Run the service test
  id: totrans-55
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 9-4\. Run the service test
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-57
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Note
- en: In [Chapter 10](ch10.html#ch10), `get_one()` will no longer return `None` for
    a missing creature, and the `test_get_missing()` test in [Example 9-4](#ex-9-4)
    would fail. But that will be fixed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: In [Chapter 10](ch10.html#ch10), `get_one()` will no longer return `None` for
    a missing creature, and the `test_get_missing()` test in [Example 9-4](#ex-9-4)
    would fail. But that will be fixed.
- en: Other Service-Level Stuff
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Other Service-Level Stuff
- en: We’re in the middle of the stack now—the part that really defines our site’s
    purpose. And so far, we’ve used it only to forward web requests to the (next chapter’s)
    Data layer.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: We’re in the middle of the stack now—the part that really defines our site’s
    purpose. And so far, we’ve used it only to forward web requests to the (next chapter’s)
    Data layer.
- en: 'So far, this book has developed the site iteratively, building a minimal base
    for future work. As you learn more about what you have, what you can do, and what
    users might want, you can branch out and experiment. Some ideas might benefit
    only larger sites, but here are some technical site-helper ideas:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 'So far, this book has developed the site iteratively, building a minimal base
    for future work. As you learn more about what you have, what you can do, and what
    users might want, you can branch out and experiment. Some ideas might benefit
    only larger sites, but here are some technical site-helper ideas:'
- en: Logging
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Logging
- en: Metrics
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metrics
- en: Monitoring
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Monitoring
- en: Tracing
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tracing
- en: This section discusses each of these. We’ll revisit these options in [“Troubleshooting”](ch13.html#troubleshooting),
    to see if they can help diagnose problems.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: This section discusses each of these. We’ll revisit these options in [“Troubleshooting”](ch13.html#troubleshooting),
    to see if they can help diagnose problems.
- en: Logging
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Logging
- en: FastAPI logs each API call to an endpoint—including the timestamp, method, and
    URL—but not any data delivered via the body or headers.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI logs each API call to an endpoint—including the timestamp, method, and
    URL—but not any data delivered via the body or headers.
- en: Metrics, Monitoring, Observability
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Metrics, Monitoring, Observability
- en: If you run a website, you probably want to know how it’s doing. For an API website,
    you might want to know which endpoints are being accessed, how many people are
    visiting, and so on. Statistics on such factors are called *metrics*, and the
    gathering of them is *monitoring* or *observability*.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: If you run a website, you probably want to know how it’s doing. For an API website,
    you might want to know which endpoints are being accessed, how many people are
    visiting, and so on. Statistics on such factors are called *metrics*, and the
    gathering of them is *monitoring* or *observability*.
- en: Popular metrics tools nowadays include [Prometheus](https://prometheus.io) for
    gathering metrics and [Grafana](https://grafana.com) for displaying metrics.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Popular metrics tools nowadays include [Prometheus](https://prometheus.io) for
    gathering metrics and [Grafana](https://grafana.com) for displaying metrics.
- en: Tracing
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Tracing
- en: How well is your site performing? It’s common for metrics to be good overall,
    but with disappointing results here or there. Or the whole site may be a mess.
    Either way, it’s useful to have a tool that measures how long an API call takes,
    end to end—and not just overall time, but the time for each intermediate step.
    If something’s slow, you can find the weak link in the chain. This is *tracing*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 网站表现如何？通常情况下，整体指标可能很好，但这里或那里的结果令人失望。或者整个网站可能一团糟。无论哪种情况，拥有一个工具来测量 API 调用的全过程时间是很有用的——不仅仅是总体时间，还包括每个中间步骤的时间。如果某些步骤很慢，你可以找到链条中的薄弱环节。这就是*追踪*。
- en: A new open source project has taken earlier tracing products like [Jaeger](https://www.jaegertracing.io)
    and branded them as [OpenTelemetry](https://opentelemetry.io). It has a [Python
    API](https://oreil.ly/gyL70) and at least one [integration with FastAPI](https://oreil.ly/L6RXV).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的开源项目已经将早期的追踪产品（如[Jaeger](https://www.jaegertracing.io)）打造成[OpenTelemetry](https://opentelemetry.io)。它具有[Python
    API](https://oreil.ly/gyL70)，并且至少与一个[FastAPI的集成](https://oreil.ly/L6RXV)。
- en: To install and configure OpenTelemetry with Python, follow the instructions
    in the [OpenTelemetry Python documentation](https://oreil.ly/MBgd5).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Python 安装和配置 OpenTelemetry，请按照[OpenTelemetry Python 文档](https://oreil.ly/MBgd5)中的说明操作。
- en: Other
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他
- en: 'These production issues will be discussed in [Chapter 13](ch13.html#ch13).
    Besides these, what about our domain—cryptids and anything associated with them?
    Besides bare details on explorers and creatures, what else might you want to take
    on? You may come up with new ideas that require changes to the models and other
    layers. Here are some ideas you might try:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这些生产问题将在[第13章](ch13.html#ch13)讨论。除此之外，还有我们的领域——神秘动物及其相关内容？除了探险家和生物的基本信息，还有什么其他事情可能需要你考虑？你可能会想出需要对模型和其他层进行更改的新想法。以下是一些你可以尝试的想法：
- en: Links of explorers to the creatures that they seek
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探险家与他们寻找的生物之间的链接
- en: Sighting data
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 观测数据
- en: Expeditions
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探险
- en: Photos and videos
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 照片和视频
- en: Sasquatch mugs and T-shirts ([Figure 9-1](#fig-sasquatch-mug))
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大脚杯子和T恤（见[图 9-1](#fig-sasquatch-mug))
- en: '![fapi 0901](assets/fapi_0901.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![fapi 0901](assets/fapi_0901.png)'
- en: Figure 9-1\. A word from our sponsor
  id: totrans-84
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-1\. 我们的赞助商发来的一句话
- en: Each of these categories will generally require one or more new models to be
    defined, and new modules and functions. Some will be added in [Part IV](part04.html#part4),
    which is a gallery of applications added to the base built here in [Part III](part03.html#part3).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类别通常需要定义一个或多个新模型，并创建新的模块和函数。其中一些将会在[第四部分](part04.html#part4)中添加，这是一个基于[第三部分](part03.html#part3)构建的应用程序库。
- en: Review
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾
- en: In this chapter, you replicated some functions from the Web layer and moved
    the fake data that they worked with. The goal was to initiate the new Service
    layer. So far, it’s been a cookie-cutter process, but it will evolve and diverge
    after this. The next chapter builds the final Data layer, yielding a truly live
    website.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你复制了 Web 层的一些函数，并移动了它们所使用的虚假数据。目标是启动新的服务层。到目前为止，这一过程一直是标准化的，但在此之后将会发展和分歧。下一章将构建最终的数据层，使网站真正活跃起来。
