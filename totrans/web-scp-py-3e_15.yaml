- en: Chapter 13\. Crawling Through Forms and Logins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章。穿越表单和登录
- en: 'One of the first questions that comes up when you start to move beyond the
    basics of web scraping is: “How do I access information behind a login screen?”
    The web is increasingly moving toward interaction, social media, and user-generated
    content. Forms and logins are an integral part of these types of sites and almost
    impossible to avoid. Fortunately, they are also relatively easy to deal with.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当您开始超越Web抓取的基础时，一个最先提出的问题是：“我如何访问登录屏幕背后的信息？”网络越来越向互动、社交媒体和用户生成内容发展。表单和登录是这些类型网站的一个组成部分，几乎不可避免。幸运的是，它们也相对容易处理。
- en: Until this point, most of our interactions with web servers in our example scrapers
    have consisted of using HTTP `GET` to request information. This chapter focuses
    on the `POST` method, which pushes information to a web server for storage and
    analysis.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们示例爬虫中与Web服务器的大多数交互都是使用HTTP `GET`请求信息。本章重点介绍`POST`方法，该方法将信息推送到Web服务器进行存储和分析。
- en: Forms basically give users a way to submit a `POST` request that the web server
    can understand and use. Just as link tags on a website help users format `GET`
    requests, HTML forms help them format `POST` requests. Of course, with a little
    bit of coding, it is possible to create these requests ourselves and submit them
    with a scraper.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 表单基本上为用户提供了一种提交`POST`请求，Web服务器可以理解和使用的方法。就像网站上的链接标签帮助用户格式化`GET`请求一样，HTML表单帮助他们格式化`POST`请求。当然，通过少量的编码，我们也可以创建这些请求并使用爬虫提交它们。
- en: Python Requests Library
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python Requests库
- en: Although it’s possible to navigate web forms by using only the Python core libraries,
    sometimes a little syntactic sugar makes life a lot sweeter. When you start to
    do more than a basic `GET` request with urllib, looking outside the Python core
    libraries can be helpful.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用Python核心库可以导航网页表单，但有时一些语法糖会让生活变得更甜美。当你开始执行比基本的`GET`请求更多的操作时，看看Python核心库之外的东西可能会有所帮助。
- en: 'The [Requests library](http://www.python-requests.org) is excellent at handling
    complicated HTTP requests, cookies, headers, and much more. Here’s what Requests
    creator Kenneth Reitz has to say about Python’s core tools:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[Requests库](http://www.python-requests.org)在处理复杂的HTTP请求、Cookie、标头等方面非常出色。Requests的创始人Kenneth
    Reitz对Python的核心工具有什么看法：'
- en: Python’s standard urllib2 module provides most of the HTTP capabilities you
    need, but the API is thoroughly broken. It was built for a different time—and
    a different web. It requires an enormous amount of work (even method overrides)
    to perform the simplest of tasks.
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Python的标准urllib2模块提供了大部分你需要的HTTP功能，但API是彻底破损的。它是为不同的时间和不同的Web构建的。即使是最简单的任务，也需要大量工作（甚至是方法覆盖）。
- en: ''
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Things shouldn’t be this way. Not in Python.
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 事情不应该这样。在Python中不应该这样。
- en: As with any Python library, the Requests library can be installed with any third-party
    Python library manager, such as pip, or by downloading and installing the [source
    file](https://github.com/kennethreitz/requests/tarball/master).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何Python库一样，Requests库可以通过任何第三方Python库管理器（如pip）安装，或者通过下载和安装[源文件](https://github.com/kennethreitz/requests/tarball/master)来安装。
- en: Submitting a Basic Form
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提交一个基本表单
- en: Most web forms consist of a few HTML fields, a Submit button, and an action
    page, where the actual form processing is done. The HTML fields usually consist
    of text but might also contain a file upload or other nontext content.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Web表单包含几个HTML字段、一个提交按钮和一个动作页面，实际上处理表单处理的地方。HTML字段通常包含文本，但也可能包含文件上传或其他非文本内容。
- en: Most popular websites block access to their login forms in their *robots.txt*
    file ([Chapter 2](ch02.html#c-2) discusses the legality of scraping such forms),
    so to play it safe I’ve constructed a series of different types of forms and logins
    at *pythonscraping.com* that you can run your web scrapers against. [*http://pythonscraping.com/pages/files/form.html*](http://pythonscraping.com/pages/files/form.html)
    is the location of the most basic of these forms.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数流行的网站在其*robots.txt*文件中阻止对其登录表单的访问（[第2章](ch02.html#c-2)讨论了刮取这些表单的合法性），所以为了安全起见，我构建了一系列不同类型的表单和登录页面在*pythonscraping.com*上，您可以在那里运行您的网络爬虫。[*http://pythonscraping.com/pages/files/form.html*](http://pythonscraping.com/pages/files/form.html)
    是这些表单中最基本的位置。
- en: 'The entirety of the HTML code for the form is as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 表单的整个HTML代码如下：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A couple of things to notice here: first, the names of the two input fields
    are `firstname` and `lastname`. This is important. The names of these fields determine
    the names of the variable parameters that will be `POST`ed to the server when
    the form is submitted. If you want to mimic the action that the form will take
    when `POST`ing your own data, you need to make sure that your variable names match
    up.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意几点：首先，两个输入字段的名称分别是 `firstname` 和 `lastname`。这很重要。这些字段的名称决定了在提交表单时将 `POST`
    到服务器的变量参数的名称。如果你想模仿表单在提交你自己的数据时所采取的动作，你需要确保你的变量名称匹配。
- en: 'The second thing to note is that the action of the form is at *processing.php*
    (the absolute path is [*http://pythonscraping.com/pages/files/processing.php*](http://pythonscraping.com/pages/files/processing.php)).
    Any `POST` requests to the form should be made on *this* page, not on the page
    where the form itself resides. Remember: the purpose of HTML forms is only to
    help website visitors format proper requests to send to the page that does the
    real action. Unless you are doing research to format the request itself, you don’t
    need to bother much with the page that the form can be found on.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第二点需要注意的是，表单的 action 是 *processing.php*（绝对路径为 [*http://pythonscraping.com/pages/files/processing.php*](http://pythonscraping.com/pages/files/processing.php)）。对表单的任何
    `POST` 请求应该在 *这个* 页面上进行，而不是表单本身所在的页面。记住：HTML 表单的目的只是帮助网站访问者格式化正确的请求，以发送给真正执行动作的页面。除非你正在研究如何格式化请求本身，否则不需要过多关注可以找到表单的页面。
- en: 'Submitting a form with the Requests library can be done in four lines, including
    the import and the instruction to print the content (yes, it’s that easy):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Requests 库提交表单只需四行代码，包括导入和指令以打印内容（是的，就是这么简单）：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After the form is submitted, the script should return with the page’s content:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 表单提交后，脚本应返回页面的内容：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This script can be applied to many simple forms encountered on the internet.
    The form to sign up for the “Web Scraping with Python” newsletter, for example,
    looks like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本可应用于互联网上遇到的许多简单表单。例如，注册“使用 Python 进行网页抓取”通讯的表单如下所示：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Although it can look daunting at first, remember that in most cases (we’ll
    cover the exceptions later), you’re looking for only two things:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然一开始看起来可能有些吓人，但大多数情况下（稍后我们将讨论例外情况），你只需寻找两件事：
- en: The name of the field (or fields) you want to submit with the data. In this
    case, first name `first_name`, last name `last_name`, and email address `email`.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要提交的字段（或字段）的名称和数据。在这种情况下，名字是 `first_name`、姓是 `last_name` 和电子邮件地址是 `email`。
- en: The action attribute of the form itself; that is, the page that the form posts
    data to.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单本身的 action 属性；也就是表单提交数据的页面。
- en: In this case, the action of the form isn’t obvious. Unlike a traditional HTML
    form, this page uses a JavaScript program that detects the form submission and
    submits it to the proper URL.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，表单的 action 不明显。与传统的 HTML 表单不同，此页面使用 JavaScript 程序检测表单提交并将其提交到正确的 URL。
- en: In cases like this, using your browser’s network tools can come in handy. Simply
    open up the Network tab, fill out the form, hit the Submit button, and observe
    the values being sent over the network ([Figure 13-1](#fig1301)).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，使用浏览器的网络工具会很方便。只需打开网络选项卡，填写表单，点击提交按钮，观察发送到网络的值（[图 13-1](#fig1301)）。
- en: '![](assets/wsp3_1301.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/wsp3_1301.png)'
- en: Figure 13-1\. A request sent to the newsletter form at pythonscraping.com
  id: totrans-30
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-1\. 发送到 pythonscraping.com 的通讯订阅表单的请求
- en: Although you could wade through convoluted JavaScript and eventually arrive
    at the same answer, using the Network tab allows you to see trivially that the
    form contents are being submitted to [*https://pythonscraping.com/wp-admin/admin-ajax.php*](https://pythonscraping.com/wp-admin/admin-ajax.php).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以深入研究复杂的 JavaScript，并最终得出相同的答案，但使用网络选项卡可以让你轻松地看到表单内容被提交到 [*https://pythonscraping.com/wp-admin/admin-ajax.php*](https://pythonscraping.com/wp-admin/admin-ajax.php)。
- en: 'In addition, the Payload tab reveals a fourth form value sent to this endpoint: `action:
    eclg_add_newsletter`.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '此外，Payload 选项卡显示发送到此端点的第四个表单值：`action: eclg_add_newsletter`。'
- en: 'With this, we can replicate the form submission in Python:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们可以在 Python 中复制表单提交的过程：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In this case, the form provides a JSON-formatted response:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，表单提供了一个 JSON 格式的响应：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Radio Buttons, Checkboxes, and Other Inputs
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单选按钮、复选框和其他输入
- en: 'Obviously, not all web forms are a collection of text fields followed by a
    Submit button. Standard HTML contains a wide variety of possible form input fields:
    radio buttons, checkboxes, and select boxes, to name a few. HTML5 adds sliders
    (range input fields), email, dates, and more. With custom JavaScript fields, the
    possibilities are endless, with color pickers, calendars, and whatever else the
    developers come up with next.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，并非所有的网络表单都是由文本字段和提交按钮组成的。标准的 HTML 包含多种可能的表单输入字段：单选按钮、复选框和选择框等。HTML5 还增加了滑块（范围输入字段）、电子邮件、日期等。利用自定义的
    JavaScript 字段，可能性是无限的，包括颜色选择器、日历和开发人员接下来想出的任何东西。
- en: 'Regardless of the seeming complexity of any sort of form field, you need to
    worry about only two things: the name of the element and its value. The element’s
    name easily can be determined by looking at the source code and finding the `name`
    attribute. The value can sometimes be trickier, as it might be populated by JavaScript
    immediately before form submission. Color pickers, as an example of a fairly exotic
    form field, will likely have a value of something like `#F03030`.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 无论任何类型的表单字段看起来多么复杂，你只需要关心两件事情：元素的名称和其值。元素的名称可以通过查看源代码并找到`name`属性来确定。值有时可能会更加棘手，因为它可能会在表单提交之前由
    JavaScript 立即填充。例如，作为相当奇特的表单字段的颜色选择器，可能会具有像`#F03030`这样的值。
- en: 'If you’re unsure of the format of an input field’s value, you can use various
    tools to track the `GET` and `POST` requests your browser is sending to and from
    sites. The best and perhaps most obvious way to track `GET` requests, as mentioned
    before, is to look at the URL of a site. If the URL is something like:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不确定输入字段值的格式，可以使用各种工具跟踪浏览器发送到和从站点的`GET`和`POST`请求。跟踪`GET`请求的最佳方法，正如前面提到的，是查看站点的
    URL。如果 URL 如下所示：
- en: '`http://domainname.com?thing1=foo&thing2=bar`'
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`http://domainname.com?thing1=foo&thing2=bar`'
- en: 'you know that this corresponds to a form of this type:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你就知道这对应于这种类型的表单：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'which corresponds to the Python parameter object:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对应于 Python 参数对象：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Again, if you’re stuck with a complicated-looking `POST` form, and you want
    to see exactly which parameters your browser is sending to the server, the easiest
    way is to use your browser’s inspector or developer tool to view them (see [Figure 13-2](#form_data_section)).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你卡在一个看起来复杂的`POST`表单上，并且你想准确地查看浏览器发送到服务器的参数，最简单的方法是使用浏览器的检查器或开发者工具查看它们（见[图 13-2](#form_data_section)）。
- en: '![Alt Text](assets/wsp3_1302.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![Alt Text](assets/wsp3_1302.png)'
- en: Figure 13-2\. The Form Data section, highlighted in a box, shows the POST parameters
    “thing1” and “thing2” with their values “foo” and “bar”
  id: totrans-48
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-2\. 表单数据部分，突出显示为框，显示了 POST 参数“thing1”和“thing2”，它们的值分别为“foo”和“bar”
- en: Submitting Files and Images
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提交文件和图像
- en: Although file uploads are common on the internet, file uploads are not something
    often used in web scraping. It is possible, however, that you might want to write
    a test for your own site that involves a file upload. At any rate, it’s a useful
    thing to know how to do.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然文件上传在互联网上很常见，但文件上传并不是网络爬虫中经常使用的内容。不过，你可能想为自己的网站编写一个涉及文件上传的测试。无论如何，了解如何做这件事是很有用的。
- en: 'There is a practice file upload form at *[*http://pythonscraping.com/pages/files/form2.html*](http://pythonscraping.com/pages/files/form2.html)*.
    The form on the page has the following markup:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在*[*http://pythonscraping.com/pages/files/form2.html*](http://pythonscraping.com/pages/files/form2.html)*上有一个练习文件上传表单。页面上的表单标记如下：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Except for the `<input>` tag having the type attribute `file`, it looks essentially
    the same as the text-based forms used in the previous examples. Fortunately, the
    way the forms are used by the Python Requests library is also similar:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`<input>`标签具有类型属性`file`之外，它看起来基本与前面示例中使用的文本表单相同。幸运的是，Python Requests 库使用表单的方式也类似：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that in lieu of a simple string, the value submitted to the form field
    (with the name `uploadFile`) is now a Python File object, as returned by the `open` function.
    In this example, you’re submitting an image file, stored on your local machine,
    at the path *../files/Python-logo.png*, relative to where the Python script is
    being run from.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，与简单的字符串不同，提交到表单字段（名称为`uploadFile`）的值现在是一个 Python 文件对象，由`open`函数返回。在这个例子中，你正在提交一个图像文件，该文件存储在本地机器上，路径为*../files/Python-logo.png*，相对于运行
    Python 脚本的位置。
- en: Yes, it’s really that easy!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，确实如此！
- en: Handling Logins and Cookies
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理登录和 Cookies
- en: So far, we’ve mostly discussed forms that allow you to submit information to
    a site or let you view needed information on the page immediately after the form.
    How is this different from a login form, which lets you exist in a permanent “logged-in”
    state throughout your visit to the site?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们主要讨论了允许您向网站提交信息或在表单之后立即查看所需信息的表单。这与登录表单有何不同，登录表单允许您在访问网站期间处于永久“已登录”状态？
- en: Most modern websites use cookies to keep track of who is logged in and who is
    not. After a site authenticates your login credentials, it stores them in your
    browser’s cookie, which usually contains a server-generated token, timeout, and
    tracking information. The site then uses this cookie as a sort of proof of authentication,
    which is shown to each page you visit during your time on the site. Before the
    widespread use of cookies in the mid-1990s, keeping users securely authenticated
    and tracking them was a huge problem for websites.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代网站使用Cookie来跟踪谁已登录和谁未登录。网站在验证您的登录凭据后，将它们存储在您的浏览器Cookie中，该Cookie通常包含服务器生成的令牌、超时和跟踪信息。然后，网站将此Cookie用作身份验证的一种证明，该证明显示在您在网站上停留期间访问的每个页面上。在1990年代中期Cookie的广泛使用之前，保持用户安全验证并跟踪他们是网站的一个巨大问题。
- en: Although cookies are a great solution for web developers, they can be problematic
    for web scrapers. You can submit a login form all day long, but if you don’t keep
    track of the cookie the form sends back to you afterward, the next page you visit
    will act as though you’ve never logged in at all.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Cookie对于网站开发人员是一个很好的解决方案，但对于网络爬虫来说可能会有问题。您可以整天提交登录表单，但如果您不跟踪表单发送给您的Cookie，那么您访问的下一页将表现得好像您根本没有登录过一样。
- en: I’ve created a simple login form at [*http://pythonscraping.com/pages/cookies/login.html*](http://pythonscraping.com/pages/cookies/login.html)
    (the username can be anything, but the password must be “password”). This form
    is processed at *[*http://pythonscraping.com/pages/cookies/welcome.php*](http://pythonscraping.com/pages/cookies/welcome.php)*,
    which contains a link to the main page, *[*http://pythonscraping.com/pages/cookies/profile.php*](http://pythonscraping.com/pages/cookies/profile.php)*.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我在[*http://pythonscraping.com/pages/cookies/login.html*](http://pythonscraping.com/pages/cookies/login.html)创建了一个简单的登录表单（用户名可以是任何内容，但密码必须是“password”）。该表单在*[*http://pythonscraping.com/pages/cookies/welcome.php*](http://pythonscraping.com/pages/cookies/welcome.php)*处理，其中包含指向主页的链接，*[*http://pythonscraping.com/pages/cookies/profile.php*](http://pythonscraping.com/pages/cookies/profile.php)*。
- en: If you attempt to access the welcome page or the profile page without logging
    in first, you’ll get an error message and instructions to log in first before
    continuing. On the profile page, a check is done on your browser’s cookies to
    see whether its cookie was set on the login page.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试在登录之前访问欢迎页面或个人资料页面，您将收到错误消息并获得登录指示。在个人资料页面上，会检查您浏览器的Cookie，以查看其Cookie是否设置在登录页面上。
- en: 'Keeping track of cookies is easy with the >Requests library:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Requests库跟踪Cookie很容易：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here you’re sending the login parameters to the welcome page, which acts as
    the processor for the login form. You retrieve the cookies from the results of
    the last request, print the result for verification, and then send them to the
    profile page by setting the `cookies` argument.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将登录参数发送到欢迎页面，该页面充当登录表单的处理器。您从上次请求的结果中检索Cookie，打印结果以进行验证，然后通过设置`cookies`参数将其发送到个人资料页面。
- en: 'This works well for simple situations, but what if you’re dealing with a more
    complicated site that frequently modifies cookies without warning, or if you’d
    rather not even think about the cookies to begin with? The Requests `session`
    function works perfectly in this case:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这在简单情况下效果很好，但是如果您要处理的是频繁修改Cookie而没有警告的更复杂的站点，或者如果您根本不想考虑Cookie，那怎么办？在这种情况下，Requests的`session`函数完美地解决了这个问题：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this case, the session object (retrieved by calling `requests.Session()`)
    keeps track of session information, such as cookies, headers, and even information
    about protocols you might be running on top of HTTP, such as HTTPAdapters.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，会话对象（通过调用`requests.Session()`检索）会跟踪会话信息，例如Cookie、标头，甚至您可能在HTTP之上运行的协议的信息，例如HTTPAdapters。
- en: Requests is a fantastic library, second perhaps only to Selenium (covered in
    [Chapter 14](ch14.html#c-14)) in the completeness of what it handles without programmers
    having to think about it or write the code themselves. Although it might be tempting
    to sit back and let the library do all the work, it’s extremely important always
    to be aware of what the cookies look like and what they are controlling when you
    are writing web scrapers. It could save many hours of painful debugging or figuring
    out why a website is behaving strangely!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Requests是一个了不起的库，也许仅次于Selenium（在[第14章](ch14.html#c-14)中介绍）的完整性，它可以处理所有这些而不需要程序员考虑或编写代码。虽然让库来完成所有工作可能很诱人，但在编写网络爬虫时，始终要意识到Cookie的样子以及它们在控制什么，这非常重要。这可以节省许多痛苦的调试时间，或者弄清楚为什么网站的行为很奇怪！
- en: HTTP Basic Access Authentication
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTP基本访问身份验证
- en: Before the advent of cookies, one popular way to handle logins was with HTTP
    *basic access authentication*. You still see it from time to time, especially
    on high-security or corporate sites, and with some APIs. I’ve created a page at [*http://pythonscraping.com/pages/auth/login.php*](http://pythonscraping.com/pages/auth/login.php) that
    has this type of authentication ([Figure 13-3](#basic_access)).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在Cookie出现之前，处理登录的一种流行方式是使用HTTP *基本访问身份验证*。你偶尔还会看到它，尤其是在高安全性或企业站点上，以及一些API上。我创建了一个页面，地址是[*http://pythonscraping.com/pages/auth/login.php*](http://pythonscraping.com/pages/auth/login.php)，具有此类身份验证（[图 13-3](#basic_access)）。
- en: '![Alt Text](assets/wsp3_1303.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![Alt Text](assets/wsp3_1303.png)'
- en: Figure 13-3\. The user must provide a username and password to get to the page
    protected by basic access authentication
  id: totrans-73
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-3。用户必须提供用户名和密码才能访问受基本访问身份验证保护的页面
- en: As usual with these examples, you can log in with any username, but the password
    must be “password.”
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 与这些示例一样，你可以使用任何用户名登录，但密码必须是“password”。
- en: 'The Requests package contains an `auth` module specifically designed to handle
    HTTP authentication:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Requests包含一个专门设计用于处理HTTP身份验证的`auth`模块：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Although this appears to be a normal `POST` request, an `HTTPBasicAuth` object
    is passed as the `auth` argument in the request. The resulting text will be the
    page protected by the username and password (or an Access Denied page, if the
    request failed).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这看起来像是一个普通的`POST`请求，但在请求中将一个`HTTPBasicAuth`对象作为`auth`参数传递。结果文本将是由用户名和密码保护的页面（或者如果请求失败，则为拒绝访问页面）。
- en: Other Form Problems
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他表单问题
- en: Web forms are a hot point of entry for malicious bots. You don’t want bots creating
    user accounts, taking up valuable server processing time, or submitting spam comments
    on a blog. For this reason, security features often are incorporated into HTML
    forms on modern websites that might not be immediately apparent.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Web表单是恶意机器人的热门入口点。你不希望机器人创建用户帐户、占用宝贵的服务器处理时间或在博客上提交垃圾评论。因此，安全功能通常被纳入现代网站的HTML表单中，这些功能可能不会立即显现。
- en: Tip
  id: totrans-80
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: For help with CAPTCHAs, check out [Chapter 16](ch16.html#c-16), which covers
    image processing and text recognition in Python.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如需有关CAPTCHA的帮助，请查看[第16章](ch16.html#c-16)，其中涵盖了Python中的图像处理和文本识别。
- en: If you encounter a mysterious error, or the server is rejecting your form submission
    for an unknown reason, check out [Chapter 17](ch17.html#c-17), which covers honeypots,
    hidden fields, and other security measures that websites take to protect their
    forms.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到一个神秘的错误，或者服务器因为未知原因拒绝你的表单提交，请查看[第17章](ch17.html#c-17)，其中涵盖了蜜罐、隐藏字段和其他网站采取的安全措施，以保护其表单。
