["```py\ns1 = set()\ns1 \n```", "```py\nset() \n```", "```py\ns1.add('a')\ns1.add('b')\ns1 \n```", "```py\n{'a', 'b'} \n```", "```py\ns2 = set('acd')\ns2 \n```", "```py\n{'a', 'c', 'd'} \n```", "```py\ns1.add('a')\ns1 \n```", "```py\n{'a', 'b'} \n```", "```py\nset('banana') \n```", "```py\n{'a', 'b', 'n'} \n```", "```py\ndef has_duplicates(t):\n    d = {}\n    for x in t:\n        d[x] = True\n    return len(d) < len(t) \n```", "```py\ndef has_duplicates(t):\n    s = set(t)\n    return len(s) < len(t) \n```", "```py\ns1.union(s2) \n```", "```py\n{'a', 'b', 'c', 'd'} \n```", "```py\ns1 - s2 \n```", "```py\n{'b'} \n```", "```py\ndef subtract(d1, d2):\n    res = {}\n    for key in d1:\n        if key not in d2:\n            res[key] = d1[key]\n    return res \n```", "```py\nset(word_counter) - set(word_list) \n```", "```py\nset('ab') <= set('abc') \n```", "```py\nTrue \n```", "```py\ndef uses_only(word, available):\n    for letter in word: \n        if letter not in available:\n            return False\n    return True \n```", "```py\ndef uses_only(word, available):\n    return set(word) <= set(available) \n```", "```py\nfrom collections import Counter\n\ncounter = Counter('banana')\ncounter \n```", "```py\nCounter({'a': 3, 'n': 2, 'b': 1}) \n```", "```py\nfrom collections import Counter\n\nt = (1, 1, 1, 2, 2, 3)\ncounter = Counter(t)\ncounter \n```", "```py\nCounter({1: 3, 2: 2, 3: 1}) \n```", "```py\ncounter['d'] \n```", "```py\n0 \n```", "```py\ndef is_anagram(word1, word2):\n    return Counter(word1) == Counter(word2) \n```", "```py\ncounter.most_common() \n```", "```py\n[(1, 3), (2, 2), (3, 1)] \n```", "```py\ncounter2 = Counter('bans')\ncounter + counter2 \n```", "```py\nCounter({1: 3, 2: 2, 3: 1, 'b': 1, 'a': 1, 'n': 1, 's': 1}) \n```", "```py\nfrom collections import defaultdict\n\nd = defaultdict(list)\nd \n```", "```py\ndefaultdict(list, {}) \n```", "```py\nt = d['new key']\nt \n```", "```py\n[] \n```", "```py\nt.append('new value')\nd['new key'] \n```", "```py\n['new value'] \n```", "```py\ndef all_anagrams(filename):\n    d = {}\n    for line in open(filename):\n        word = line.strip().lower()\n        t = signature(word)\n        if t not in d:\n            d[t] = [word]\n        else:\n            d[t].append(word)\n    return d \n```", "```py\ndef all_anagrams(filename):\n    d = defaultdict(list)\n    for line in open(filename):\n        word = line.strip().lower()\n        t = signature(word)\n        d[t].append(word)\n    return d \n```", "```py\nfrom collections import defaultdict\n\nd = defaultdict(list)\nkey = ('into', 'the')\nd[key].append('woods')\nd[key] \n```", "```py\n['woods'] \n```", "```py\nif x > 0:\n    y = math.log(x)\nelse:\n    y = float('nan') \n```", "```py\ny = math.log(x) if x > 0 else float('nan') \n```", "```py\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1) \n```", "```py\ndef factorial(n):\n    return 1 if n == 0 else n * factorial(n-1) \n```", "```py\nclass Kangaroo:\n    def __init__(self, name, contents=None):\n        self.name = name\n        if contents is None:\n            contents = []\n        self.contents = contents \n```", "```py\ndef __init__(self, name, contents=None):\n    self.name = name\n    self.contents = [] if contents is None else contents \n```", "```py\ntitle = 'monty python and the holy grail' \n```", "```py\nt = []\nfor word in title.split():\n    t.append(word.capitalize())\n\n' '.join(t) \n```", "```py\n'Monty Python And The Holy Grail' \n```", "```py\nt = [word.capitalize() for word in title.split()]\n\n' '.join(t) \n```", "```py\n'Monty Python And The Holy Grail' \n```", "```py\nword_list = []\n\nfor line in open('words.txt'):\n    word = line.strip()\n    word_list.append(word) \n```", "```py\nword_list = [line.strip() for line in open('words.txt')] \n```", "```py\npalindromes = []\n\nfor word in word_list:\n    if is_palindrome(word):\n        palindromes.append(word) \n```", "```py\npalindromes = [word for word in word_list if is_palindrome(word)] \n```", "```py\nsum([1/2**n for n in range(10)]) \n```", "```py\n1.998046875 \n```", "```py\nsum(1/2**n for n in range(10)) \n```", "```py\n1.998046875 \n```", "```py\nany([False, False, True]) \n```", "```py\nTrue \n```", "```py\nany(letter == 't' for letter in 'monty') \n```", "```py\nTrue \n```", "```py\ndef uses_none(word, forbidden):\n  \"\"\"Checks whether a word avoids forbidden letters.\"\"\"\n    return not any(letter in forbidden for letter in word) \n```", "```py\ndef uses_all(word, required):\n  \"\"\"Check whether a word uses all required letters.\"\"\"\n    return all(letter in word for letter in required) \n```", "```py\nclass Point:\n  \"\"\"Represents a point in 2-D space.\"\"\"\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f'({self.x}, {self.y})' \n```", "```py\nfrom collections import namedtuple\n\nPoint = namedtuple('Point', ['x', 'y']) \n```", "```py\np = Point(1, 2)\np \n```", "```py\nPoint(x=1, y=2) \n```", "```py\np == Point(1, 2) \n```", "```py\nTrue \n```", "```py\np.x, p.y \n```", "```py\n(1, 2) \n```", "```py\np[0], p[1] \n```", "```py\n(1, 2) \n```", "```py\nx, y = p\nx, y \n```", "```py\n(1, 2) \n```", "```py\np[0] = 3 \n```", "```py\nTypeError: 'Point' object does not support item assignment \n```", "```py\np.x = 3 \n```", "```py\nAttributeError: can't set attribute \n```", "```py\nclass Pointier(Point):\n  \"\"\"This class inherits from Point\"\"\" \n```", "```py\ndef mean(*args):\n    return sum(args) / len(args) \n```", "```py\nmean(1, 2, 3) \n```", "```py\n2.0 \n```", "```py\nmean(1, 2, start=3) \n```", "```py\nTypeError: mean() got an unexpected keyword argument 'start' \n```", "```py\ndef mean(*args, **kwargs):\n    print(kwargs)\n    return sum(args) / len(args) \n```", "```py\nmean(1, 2, start=3) \n```", "```py\n{'start': 3} \n```", "```py\n1.5 \n```", "```py\ndef mean(*args, **kwargs):\n    return sum(args, **kwargs) / len(args) \n```", "```py\nmean(1, 2, start=3) \n```", "```py\n3.0 \n```", "```py\nd = dict(x=1, y=2)\nPoint(**d) \n```", "```py\nPoint(x=1, y=2) \n```", "```py\nd = dict(x=1, y=2)\nPoint(d) \n```", "```py\nTypeError: Point.__new__() missing 1 required positional argument: 'y' \n```", "```py\ndef pack_and_print(**kwargs):\n    print(kwargs)\n\npack_and_print(a=1, b=2) \n```", "```py\n{'a': 1, 'b': 2} \n```", "```py\ndef add(a, b):\n  '''Add two numbers.\n\n >>> add(2, 2)\n 4\n '''\n    return a + b \n```", "```py\nfrom doctest import run_docstring_examples\n\ndef run_doctests(func):\n    run_docstring_examples(func, globals(), name=func.__name__) \n```", "```py\nrun_doctests(add) \n```", "```py\nfrom unittest import TestCase\n\nclass TestExample(TestCase):\n\n    def test_add(self):\n        result = add(2, 2)\n        self.assertEqual(result, 4) \n```", "```py\nimport unittest\n\ndef run_unittest():\n    unittest.main(argv=[''], verbosity=0, exit=False) \n```", "```py\nrun_unittest() \n```", "```py\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK \n```", "```py\n%%add_method_to TestExample\n\n    def test_add_broken(self):\n        result = add(2, 2)\n        self.assertEqual(result, 100) \n```", "```py\nrun_unittest() \n```", "```py\n======================================================================\nFAIL: test_add_broken (__main__.TestExample)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/tmp/ipykernel_1109857/3833266738.py\", line 3, in test_add_broken\n    self.assertEqual(result, 100)\nAssertionError: 4 != 100\n\n----------------------------------------------------------------------\nRan 2 tests in 0.000s\n\nFAILED (failures=1) \n```", "```py\n# This cell tells Jupyter to provide detailed debugging information\n# when a runtime error occurs. Run it before working on the exercises.\n\n%xmode Verbose \n```", "```py\ndef uses_none(word, forbidden):\n    for letter in word.lower():\n        if letter in forbidden.lower():\n            return False\n    return True \n```", "```py\n def partition(self):\n  \"\"\"Make a list of four hands, each containing only one suit.\"\"\"\n        hands = []\n        for i in range(4):\n            hands.append(PokerHand())\n\n        for card in self.cards:\n            hands[card.suit].add_card(card)\n\n        return hands \n```", "```py\ndef fibonacci(n):\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    return fibonacci(n-1) + fibonacci(n-2) \n```", "```py\ndef binomial_coeff(n, k):\n  \"\"\"Compute the binomial coefficient \"n choose k\".\n\n n: number of trials\n k: number of successes\n\n returns: int\n \"\"\"\n    if k == 0:\n        return 1\n\n    if n == 0:\n        return 0\n\n    return binomial_coeff(n-1, k) + binomial_coeff(n-1, k-1) \n```", "```py\nbinomial_coeff(10, 4)    # should be 210 \n```", "```py\n210 \n```", "```py\n%%add_method_to Deck\n\n    def __str__(self):\n        res = []\n        for card in self.cards:\n            res.append(str(card))\n        return '\\n'.join(res) \n```"]