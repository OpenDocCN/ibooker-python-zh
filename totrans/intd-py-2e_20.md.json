["```py\n$ telnet www.google.com 80\n```", "```py\nTrying 74.125.225.177...\nConnected to www.google.com.\nEscape character is '^]'.\n```", "```py\nHEAD / HTTP/1.1\n```", "```py\nHTTP/1.1 200 OK\nDate: Mon, 10 Jun 2019 16:12:13 GMT\nExpires: -1\nCache-Control: private, max-age=0\nContent-Type: text/html; charset=ISO-8859-1\nP3P: CP=\"This is not a P3P policy! See g.co/p3phelp for more info.\"\nServer: gws\nX-XSS-Protection: 0\nX-Frame-Options: SAMEORIGIN\nSet-Cookie: 1P_JAR=...; expires=... GMT; path=/; domain=.google.com\nSet-Cookie: NID=...; expires=... GMT; path=/; domain=.google.com; HttpOnly\nTransfer-Encoding: chunked\nAccept-Ranges: none\nVary: Accept-Encoding\n```", "```py\nq\n```", "```py\n$ curl http://www.example.com\n<!doctype html>\n<html>\n<head>\n    <title>Example Domain</title>\n    ...\n\n```", "```py\n$ curl --head http://www.example.com\nHTTP/1.1 200 OK\nContent-Encoding: gzip\nAccept-Ranges: bytes\nCache-Control: max-age=604800\nContent-Type: text/html; charset=UTF-8\nDate: Sun, 05 May 2019 16:14:30 GMT\nEtag: \"1541025663\"\nExpires: Sun, 12 May 2019 16:14:30 GMT\nLast-Modified: Fri, 09 Aug 2013 23:54:35 GMT\nServer: ECS (agb/52B1)\nX-Cache: HIT\nContent-Length: 606\n```", "```py\n$ curl -X POST -d \"a=1&b=2\" *url*\n$ curl -X POST -d \"@data.txt\" *url*\n```", "```py\n$ curl -X POST -d \"{'a':1,'b':2}\" -H \"Content-Type: application/json\" *url*\n$ curl -X POST -d \"@data.json\" *url*\n```", "```py\n$ pip install httpie\n```", "```py\n$ http -f POST *url* a=1 b=2\n$ http POST -f *url* < data.txt\n```", "```py\n$ http POST *url* a=1 b=2\n$ http POST *url* < data.json\n```", "```py\n$ docker run -p 80:80 kennethreitz/httpbin\n```", "```py\n>>> import urllib.request as ur\n>>>\n>>> url = 'http://www.example.com/'\n>>> conn = ur.urlopen(url)\n```", "```py\n>>> print(conn.status)\n200\n```", "```py\n>>> data = conn.read()\n>>> print(data[:50])\n```", "```py\nb'<!doctype html>\\n<html>\\n<head>\\n    <title>Example D'\n```", "```py\n>>> str_data = data.decode('utf8')\n>>> print(str_data[:50])\n<!doctype html>\n<html>\n<head>\n    <title>Example D\n>>>\n```", "```py\n>>> for key, value in conn.getheaders():\n...     print(key, value)\n...\n```", "```py\nCache-Control max-age=604800\nContent-Type text/html; charset=UTF-8\nDate Sun, 05 May 2019 03:09:26 GMT\nEtag \"1541025663+ident\"\nExpires Sun, 12 May 2019 03:09:26 GMT\nLast-Modified Fri, 09 Aug 2013 23:54:35 GMT\nServer ECS (agb/5296)\nVary Accept-Encoding\nX-Cache HIT\nContent-Length 1270\nConnection close\n```", "```py\n$ pip install requests\n```", "```py\n>>> import requests\n>>> resp = requests.get('http://example.com')\n>>> resp\n<Response [200]>\n>>> resp.status_code\n200\n>>> resp.text[:50]\n'<!doctype html>\\n<html>\\n<head>\\n    <title>Example D'\n```", "```py\nimport json\nimport sys\n\nimport requests\n\ndef search(title):\n     url = \"http://archive.org/advancedsearch.php\"\n     params = {\"q\": f\"title:({title})\",\n               \"output\": \"json\",\n               \"fields\": \"identifier,title\",\n               \"rows\": 50,\n               \"page\": 1,}\n     resp = requests.get(url, params=params)\n     return resp.json()\n\nif __name__ == \"__main__\":\n     title = sys.argv[1]\n     data = search(title)\n     docs = data[\"response\"][\"docs\"]\n     print(f\"Found {len(docs)} items, showing first 10\")\n     print(\"identifier\\ttitle\")\n     for row in docs[:10]:\n         print(row[\"identifier\"], row[\"title\"], sep=\"\\t\")\n```", "```py\n$ python ia.py wendigo\nFound 24 items, showing first 10\nidentifier  title\ncd_wendigo_penny-sparrow  Wendigo\nWendigo1  Wendigo 1\nwendigo_ag_librivox The Wendigo\nthewendigo10897gut  The Wendigo\nisbn_9780843944792  Wendigo mountain ; Death camp\njamendo-060508  Wendigo - Audio Leash\nfav-lady_wendigo  lady_wendigo Favorites\n011bFearTheWendigo  011b Fear The Wendigo\nCharmedChats112 Episode 112 - The Wendigo\njamendo-076964  Wendigo - Tomame o Dejame>\n```", "```py\n$ python -m http.server\n```", "```py\nServing HTTP on 0.0.0.0 port 8000 ...\n```", "```py\n127.0.0.1 - - [20/Feb/2013 22:02:37] \"GET / HTTP/1.1\" 200 -\n```", "```py\n127.0.0.1 - - [20/Feb/2013 22:03:48] \"GET /oreilly.png HTTP/1.1\" 200 -\n```", "```py\n$ python -m http.server 9999\n```", "```py\nServing HTTP on 0.0.0.0 port 9999 ...\n```", "```py\nimport bottle\n\napplication = bottle.default_app()\n\n@bottle.route('/')\ndef home():\n    return \"apache and wsgi, sitting in a tree\"\n```", "```py\n    WSGIScriptAlias / /var/www/test/home.wsgi\n```", "```py\n<VirtualHost *:80>\n    DocumentRoot /var/www\n\n    WSGIScriptAlias / /var/www/test/home.wsgi\n\n    <Directory /var/www/test>\n    Order allow,deny\n    Allow from all\n    </Directory>\n</VirtualHost>\n```", "```py\napache and wsgi, sitting in a tree\n```", "```py\nWSGIDaemonProcess *domain-name* user=*user-name* group=*group-name* threads=25\nWSGIProcessGroup *domain-name*\n```", "```py\n<VirtualHost *:80>\n    DocumentRoot /var/www\n\n    WSGIScriptAlias / /var/www/test/home.wsgi\n\n    WSGIDaemonProcess mydomain.com user=myuser group=mygroup threads=25\n    WSGIProcessGroup mydomain.com\n\n    <Directory /var/www/test>\n    Order allow,deny\n    Allow from all\n    </Directory>\n</VirtualHost>\n```", "```py\n$ pip install bottle\n```", "```py\nfrom bottle import route, run\n\n@route('/')\ndef home():\n  return \"It isn't fancy, but it's my home page\"\n\nrun(host='localhost', port=9999)\n```", "```py\n$ python bottle1.py\n```", "```py\nIt isn't fancy, but it's my home page\n```", "```py\nMy <b>new</b> and <i>improved</i> home page!!!\n```", "```py\nfrom bottle import route, run, static_file\n\n@route('/')\ndef main():\n    return static_file('index.html', root='.')\n\nrun(host='localhost', port=9999)\n```", "```py\n$ python bottle2.py\n```", "```py\nMy `new` and *`improved`* home page!!!\n```", "```py\nfrom bottle import route, run, static_file\n\n@route('/')\ndef home():\n    return static_file('index.html', root='.')\n\n@route('/echo/<thing>')\ndef echo(thing):\n    return \"Say hello to my little friend: %s!\" % thing\n\nrun(host='localhost', port=9999)\n```", "```py\n$ python bottle3.py\n```", "```py\nSay hello to my little friend: Mothra!\n```", "```py\nimport requests\n\nresp = requests.get('http://localhost:9999/echo/Mothra')\nif resp.status_code == 200 and \\\n  resp.text == 'Say hello to my little friend: Mothra!':\n    print('It worked! That almost never happens!')\nelse:\n    print('Argh, got this:', resp.text)\n```", "```py\n$ python bottle_test.py\n```", "```py\nIt worked! That almost never happens!\n```", "```py\n$ pip install flask\n```", "```py\nfrom flask import Flask\n\napp = Flask(__name__, static_folder='.', static_url_path='')\n\n@app.route('/')\ndef home():\n    return app.send_static_file('index.html')\n\n@app.route('/echo/<thing>')\ndef echo(thing):\n    return \"Say hello to my little friend: %s\" % thing\n\napp.run(port=9999, debug=True)\n```", "```py\n$ python flask1.py\n```", "```py\nhttp://localhost:9999/\n```", "```py\nMy `new` and *`improved`* home page!!!\n```", "```py\nhttp://localhost:9999/echo/Godzilla\n```", "```py\nSay hello to my little friend: Godzilla\n```", "```py\n<html>\n<head>\n<title>Flask2 Example</title>\n</head>\n<body>\nSay hello to my little friend: {{ thing }}\n</body>\n</html>\n```", "```py\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/echo/<thing>')\ndef echo(thing):\n    return render_template('flask2.html', thing=thing)\n\napp.run(port=9999, debug=True)\n```", "```py\n$ python flask2.py\n```", "```py\nhttp://localhost:9999/echo/Gamera\n```", "```py\nSay hello to my little friend: Gamera\n```", "```py\n<html>\n<head>\n<title>Flask3 Example</title>\n</head>\n<body>\nSay hello to my little friend: {{ thing }}.\nAlas, it just destroyed {{ place }}!\n</body>\n</html>\n```", "```py\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/echo/<thing>/<place>')\ndef echo(thing, place):\n    return render_template('flask3.html', thing=thing, place=place)\n\napp.run(port=9999, debug=True)\n```", "```py\n$ python flask3a.py\n```", "```py\nhttp://localhost:9999/echo/Rodan/McKeesport\n```", "```py\nSay hello to my little friend: Rodan. Alas, it just destroyed McKeesport!\n```", "```py\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/echo/')\ndef echo():\n    thing = request.args.get('thing')\n    place = request.args.get('place')\n    return render_template('flask3.html', thing=thing, place=place)\n\napp.run(port=9999, debug=True)\n```", "```py\n$ python flask3b.py\n```", "```py\nhttp://localhost:9999/echo?thing=Gorgo&place=Wilmerding\n```", "```py\nSay hello to my little friend: Gorgo. Alas, it just destroyed Wilmerding!\n```", "```py\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/echo/')\ndef echo():\n    kwargs = {}\n    kwargs['thing'] = request.args.get('thing')\n    kwargs['place'] = request.args.get('place')\n    return render_template('flask3.html', **kwargs)\n\napp.run(port=9999, debug=True)\n```", "```py\n>>> import antigravity\n```", "```py\n>>> import webbrowser\n>>> url = 'http://www.python.org/'\n>>> webbrowser.open(url)\nTrue\n```", "```py\n>>> webbrowser.open_new(url)\nTrue\n```", "```py\n>>> webbrowser.open_new_tab('http://www.python.org/')\nTrue\n```", "```py\n$ pip install pywebview[qt]\n```", "```py\n$ pip install pywebview[cef]\n```", "```py\n>>> import webview\n>>> url = input(\"URL? \")\nURL? http://time.gov\n>>> webview.create_window(f\"webview display of {url}\", url)\n```", "```py\n$ pip install scrapy\n```", "```py\n$ pip install beautifulsoup4\n```", "```py\ndef get_links(url):\n    import requests\n    from bs4 import BeautifulSoup as soup\n    result = requests.get(url)\n    page = result.text\n    doc = soup(page)\n    links = [element.get('href') for element in doc.find_all('a')]\n    return links\n\nif __name__ == '__main__':\n    import sys\n    for url in sys.argv[1:]:\n        print('Links in', url)\n        for num, link in enumerate(get_links(url), start=1):\n            print(num, link)\n        print()\n```", "```py\n$ python links.py http://boingboing.net\n```", "```py\nLinks in http://boingboing.net/\n1 http://boingboing.net/suggest.html\n2 http://boingboing.net/category/feature/\n3 http://boingboing.net/category/review/\n4 http://boingboing.net/category/podcasts\n5 http://boingboing.net/category/video/\n6 http://bbs.boingboing.net/\n7 javascript:void(0)\n8 http://shop.boingboing.net/\n9 http://boingboing.net/about\n10 http://boingboing.net/contact\n```", "```py\n1 \"\"\"Find a video at the Internet Archive\n2 by a partial title match and display it.\"\"\"\n3 \n4 import sys\n5 import webbrowser\n6 import requests\n7 \n8 def search(title):\n9     \"\"\"Return a list of 3-item tuples (identifier,\n10        title, description) about videos\n11        whose titles partially match :title.\"\"\"\n12     search_url = \"https://archive.org/advancedsearch.php\"\n13     params = {\n14         \"q\": \"title:({}) AND mediatype:(movies)\".format(title),\n15         \"fl\": \"identifier,title,description\",\n16         \"output\": \"json\",\n17         \"rows\": 10,\n18         \"page\": 1,\n19         }\n20     resp = requests.get(search_url, params=params)\n21     data = resp.json()\n22     docs = [(doc[\"identifier\"], doc[\"title\"], doc[\"description\"])\n23             for doc in data[\"response\"][\"docs\"]]\n24     return docs\n25 \n26 def choose(docs):\n27     \"\"\"Print line number, title and truncated description for\n28        each tuple in :docs. Get the user to pick a line\n29        number. If it's valid, return the first item in the\n30        chosen tuple (the \"identifier\"). Otherwise, return None.\"\"\"\n31     last = len(docs) - 1\n32     for num, doc in enumerate(docs):\n33         print(f\"{num}: ({doc[1]}) {doc[2][:30]}...\")\n34     index = input(f\"Which would you like to see (0 to {last})? \")\n35     try:\n36         return docs[int(index)][0]\n37     except:\n38         return None\n39 \n40 def display(identifier):\n41     \"\"\"Display the Archive video with :identifier in the browser\"\"\"\n42     details_url = \"https://archive.org/details/{}\".format(identifier)\n43     print(\"Loading\", details_url)\n44     webbrowser.open(details_url)\n45 \n46 def main(title):\n47     \"\"\"Find any movies that match :title.\n48        Get the user's choice and display it in the browser.\"\"\"\n49     identifiers = search(title)\n50     if identifiers:\n51         identifier = choose(identifiers)\n52         if identifier:\n53             display(identifier)\n54         else:\n55             print(\"Nothing selected\")\n56     else:\n57         print(\"Nothing found for\", title)\n58 \n59 if __name__ == \"__main__\":\n60     main(sys.argv[1])\n```", "```py\n$ python iamovies.py eegah\n0: (Eegah) From IMDb : While driving thro...\n1: (Eegah) This film has fallen into the ...\n2: (Eegah) A caveman is discovered out in...\n3: (Eegah (1962)) While driving through the dese...\n4: (It's \"Eegah\" - Part 2) Wait till you see how this end...\n5: (EEGAH trailer) The infamous modern-day cavema...\n6: (It's \"Eegah\" - Part 1) Count Gore De Vol shares some ...\n7: (Midnight Movie show: eegah) Arch Hall Jr...\nWhich would you like to see (0 to 7)? 2\nLoading https://archive.org/details/Eegah\n```", "```py\n<html>\n<head>\n<title>It's alive!</title>\n<body>\nI'm of course referring to {{thing}}, which is {{height}} feet tall and {{color}}.\n</body>\n</html>\n```"]