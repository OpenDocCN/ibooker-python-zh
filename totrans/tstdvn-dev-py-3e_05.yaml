- en: Chapter 1\. Getting Django Set Up Using a Functional Test
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 使用功能测试设置Django
- en: TDD isn’t something that comes naturally. It’s a discipline, like a martial
    art, and just like in a Kung Fu movie, you need a bad-tempered and unreasonable
    master to force you to learn the discipline. Ours is the Testing Goat.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: TDD并不是一种自然而然的事情。这是一种纪律，就像一种武术，就像功夫电影中一样，你需要一个脾气暴躁且不合理的师父来强迫你学习这种纪律。我们的师父就是测试山羊。
- en: Obey the Testing Goat! Do Nothing Until You Have a Test
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服从测试山羊！在没有测试之前什么也不要做
- en: The Testing Goat is the unofficial mascot^([1](ch01.xhtml#id203)) of TDD in
    the Python testing community. It probably means different things to different
    people, but, to me, the Testing Goat is a voice inside my head that keeps me on
    the True Path of Testing—​like one of those little angels or demons that pop up
    above your shoulder in the cartoons, but with a very niche set of concerns. I
    hope, with this book, to install the Testing Goat inside your head too.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python测试社区中，测试山羊是TDD的非官方吉祥物^([1](ch01.xhtml#id203))。对不同的人来说，它可能有不同的含义，但对我来说，测试山羊是我脑海中的一种声音，它让我始终坚持测试的正确路径——就像卡通片中肩膀上出现的小天使或小恶魔一样，只是它关心的事情比较特别。我希望通过这本书，也能在你的脑海中种下测试山羊的种子。
- en: So we’ve decided to build a web app, even if we’re not quite sure what it’s
    going to do yet. Normally the first step in web development is getting your web
    framework installed and configured. *Download this, install that, configure the
    other, run the script*…​ but TDD requires a different mindset. When you’re doing
    TDD, you always have the Testing Goat inside your head—​single-minded as goats
    are—​bleating “Test first, test first!”
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，即使我们还不太确定它将要做什么，我们已决定要构建一个Web应用程序。通常，Web开发的第一步是安装和配置您的Web框架。*下载这个，安装那个，配置另一个，运行脚本*……但是TDD需要一种不同的心态。当您在进行TDD时，您始终将测试山羊放在脑海中——像山羊一样专注——喊着“先测试，先测试！”
- en: 'In TDD the first step is always the same: *write a test*.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在TDD中，第一步总是一样的：*编写一个测试*。
- en: '*First* we write the test; *then* we run it and check that it fails as expected.
    *Only then* do we go ahead and build some of our app. Repeat that to yourself
    in a goat-like voice. I know I do.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*首先*我们编写测试；*然后*我们运行它并检查它是否按预期失败；*只有在此之后*我们才继续构建我们的应用程序。用山羊般的声音重复这句话。我知道我自己也是这么做的。'
- en: Another thing about goats is that they take one step at a time. That’s why they
    seldom fall off things, see, no matter how steep they are. As you can see in [Figure 1-1](#tree_goat).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 山羊的另一特点是它们一步一步地走。这就是为什么它们很少会从事物上掉下来的原因，无论事物有多陡。正如你在[图1-1](#tree_goat)中所见。
- en: '![A picture of a goat up a tree](assets/twp2_0101.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![一只爬在树上的山羊的图片](assets/twp2_0101.png)'
- en: 'Figure 1-1\. Goats are more agile than you think (source: [Caitlin Stewart,
    on Flickr](http://www.flickr.com/photos/caitlinstewart/2846642630/))'
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-1\. 山羊比你想象的更灵活（来源：[Caitlin Stewart, on Flickr](http://www.flickr.com/photos/caitlinstewart/2846642630/)）
- en: We’ll proceed with nice small steps; we’re going to use *Django*, which is a
    popular Python web framework, to build our app.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将采取良好的小步骤；我们将使用*Django*，这是一个流行的Python Web框架，来构建我们的应用程序。
- en: The first thing we want to do is check that we’ve got Django installed and that
    it’s ready for us to work with. The *way* we’ll check is by confirming that we
    can spin up Django’s development server and actually see it serving up a web page,
    in our web browser, on our local computer. We’ll use the *Selenium* browser automation
    tool for this.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的第一件事是检查我们是否已经安装了Django，并且它已准备好供我们使用。我们将通过确认我们可以启动Django的开发服务器并实际看到它在我们的本地计算机上提供网页，来检查。我们将使用*Selenium*浏览器自动化工具来完成这项检查。
- en: 'Create a new Python file called *functional_tests.py*, wherever you want to
    keep the code for your project, and enter the following code. If you feel like
    making a few little goat noises as you do it, it may help:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为*functional_tests.py*的新Python文件，无论您希望将代码放在哪里，都可以输入以下代码。如果您在做这些事情时觉得发出几声山羊般的声音有帮助，那可能会有所帮助：
- en: functional_tests.py
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: functional_tests.py
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'That’s our first *functional test* (FT); I’ll talk more about what I mean by
    functional tests, and how they contrast with unit tests, in a bit. For now, it’s
    enough to assure ourselves that we understand what it’s doing:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的第一个*功能测试*（FT）；稍后我会详细讨论我所说的功能测试，以及它们与单元测试的对比。目前，我们只需确保我们理解它在做什么即可。
- en: Starting a Selenium “webdriver” to pop up a real Firefox browser window.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动Selenium“webdriver”以弹出一个真正的Firefox浏览器窗口。
- en: Using it to open up a web page which we’re expecting to be served from the local
    computer.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用它来打开我们预期从本地计算机提供的网页。
- en: Checking (making a test assertion) that the page has the word “Congratulations!”
    in its title.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查（进行测试断言）页面的标题是否包含“Congratulations！”。
- en: If all goes well we print OK.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们会打印OK。
- en: 'Let’s try running it:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试着运行它：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You should see a browser window pop up and try to open *localhost:8000*, and
    show the “Unable to connect” error page. If you switch back to your console, you’ll
    see the big ugly error message, telling us that Selenium hit an error page. And
    then, you will probably be irritated at the fact that it left the Firefox window
    lying around your desktop for you to tidy up. We’ll fix that later!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个浏览器窗口弹出并尝试打开*localhost:8000*，显示“无法连接”错误页面。如果你切回到控制台，会看到一个大而丑的错误消息，告诉我们Selenium遇到了错误页面。然后，你可能会因为它在桌面上留下了Firefox窗口而感到恼火。我们稍后会解决这个问题！
- en: Note
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If, instead, you see an error trying to import Selenium, or an error trying
    to find something called “geckodriver”, you might need to go back and have another
    look at the "[Prerequisites and Assumptions](preface02.xhtml#pre-requisites)"
    section.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在尝试导入Selenium时遇到错误，或者试图找到一个叫做“geckodriver”的东西时出错，可能需要回头再看一下“[前提条件与假设](preface02.xhtml#pre-requisites)”部分。
- en: For now though, we have a *failing test*, so that means we’re allowed to start
    building our app.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，目前我们有一个*失败的测试*，这意味着我们可以开始构建我们的应用程序了。
- en: Getting Django Up and Running
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让Django启动和运行
- en: 'Since you’ve definitely read “[Prerequisites and Assumptions](preface02.xhtml#pre-requisites)”
    by now, you’ve already got Django installed (right?). The first step in getting
    Django up and running is to create a *project*, which will be the main container
    for our site. Django provides a little command-line tool for this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你肯定已经阅读了“[前提条件与假设](preface02.xhtml#pre-requisites)”部分，你应该已经安装了Django（对吧？）。让Django运行起来的第一步是创建一个*项目*，它将是我们站点的主要容器。Django为此提供了一个小的命令行工具：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Don’t forget that “.” at the end; it’s important!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了结尾的那个“.”，它很重要！
- en: 'That will create a file called *manage.py* in your current folder, and a subfolder
    called *superlists*, with more stuff inside it:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在当前文件夹中创建一个名为*manage.py*的文件，以及一个名为*superlists*的子文件夹，其中包含更多内容：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-32
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure your project folder looks exactly like this! If you see two nested
    folders called superlists, it’s because you forgot the “.” above. Delete them
    and try again, or there will be lots of confusion with paths and working directories.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的项目文件夹看起来像这样！如果你看到两个嵌套的名为superlists的文件夹，那是因为你忘记了上面的“.”。删除它们，然后再试一次，否则路径和工作目录会造成很多混乱。
- en: The *superlists* folder is intended for stuff that applies to the whole project—​like
    *settings.py*, for example, which is used to store global configuration information
    for the site.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*superlists*文件夹用于适用于整个项目的东西—例如*settings.py*，它用于存储站点的全局配置信息。'
- en: 'But the main thing to notice is *manage.py*. That’s Django’s Swiss Army knife,
    and one of the things it can do is run a development server. Let’s try that now:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 但需要注意的主要事项是*manage.py*。这是Django的瑞士军刀之一，其中之一是运行开发服务器。让我们现在试试：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That’s Django’s development server now up and running on our machine.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，Django的开发服务器现在在我们的机器上运行起来了。
- en: Note
  id: totrans-38
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: It’s safe to ignore that message about “unapplied migrations” for now. We’ll
    look at migrations in [Chapter 5](ch05.xhtml#chapter_post_and_database).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 目前可以忽略关于“未应用迁移”的消息。我们将在[第5章](ch05.xhtml#chapter_post_and_database)中讨论迁移。
- en: 'Leave it there and open another command shell. Navigate to your project folder,
    activate your virtualenv, and then try running our test again:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 将其留在那里，并打开另一个命令行窗口。导航到你的项目文件夹，激活你的虚拟环境，然后再次尝试运行我们的测试：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Not much action on the command line, but you should notice two things: firstly,
    there was no ugly `AssertionError` and secondly, the Firefox window that Selenium
    popped up had a different-looking page on it.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行上没有太多动作，但你应该注意两件事情：首先，没有出现难看的`AssertionError`，其次，Selenium弹出的Firefox窗口上显示的页面看起来不同。
- en: Tip
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: If you see an error saying “no module named selenium”, you’ve forgotten to activate
    your virtualenv. Check the [Prerequisites and Assumptions](preface02.xhtml#pre-requisites)
    section again if you need to.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到一个错误提示“没有找到模块selenium”，那么你可能忘记激活你的虚拟环境了。如果需要的话，再次检查“[前提条件与假设](preface02.xhtml#pre-requisites)”部分。
- en: Well, it may not look like much, but that was our first ever passing test! Hooray!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，它可能看起来不起眼，但这是我们第一个通过的测试！万岁！
- en: If it all feels a bit too much like magic, like it wasn’t quite real, why not
    go and take a look at the dev server manually, by opening a web browser yourself
    and visiting *http://localhost:8000*? You should see something like [Figure 1-2](#installed_successfully_screenshot).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切感觉有点像魔术，或者感觉不太真实，为什么不自己打开Web浏览器并手动访问*http://localhost:8000*来查看开发服务器呢？你应该会看到类似于[图1-2](#installed_successfully_screenshot)的内容。
- en: You can quit the development server now if you like, back in the original shell,
    using Ctrl-C.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，你现在可以退出开发服务器，回到原始的shell界面，使用Ctrl-C。
- en: '![Screenshot of Django Installed Successfully Screen](assets/twp2_0102.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Django安装成功屏幕截图](assets/twp2_0102.png)'
- en: Figure 1-2\. It worked!
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-2\. 它成功了！
- en: Starting a Git Repository
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始一个Git仓库
- en: 'There’s one last thing to do before we finish the chapter: start to commit
    our work to a *version control system* (VCS). If you’re an experienced programmer
    you don’t need to hear me preaching about version control, but if you’re new to
    it please believe me when I say that VCS is a must-have. As soon as your project
    gets to be more than a few weeks old and a few lines of code, having a tool available
    to look back over old versions of code, revert changes, explore new ideas safely,
    even just as a backup…​ It’s hard to overstate how useful that is. TDD goes hand
    in hand with version control, so I want to make sure I impart how it fits into
    the workflow.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束本章之前还有一件事要做：开始将我们的工作提交到版本控制系统（VCS）。如果你是一名经验丰富的程序员，你不需要听我说版本控制的重要性，但如果你是新手，请相信我，VCS是必不可少的。一旦你的项目超过几周的时间并且代码超过几行，拥有一个工具可以查看旧版本的代码、恢复更改、安全地探索新想法，甚至只是作为备份……这是多么有用，简直无法言喻。测试驱动开发与版本控制密不可分，所以我希望确保你明白它在工作流程中的角色。
- en: So, our first commit! If anything it’s a bit late; shame on us. We’re using
    *Git* as our VCS, ’cos it’s the best.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们的第一次提交！如果说有什么迟到的话，那真是有点晚了；我们使用*Git*作为我们的版本控制系统，因为它是最好的。
- en: 'Let’s start by doing the `git init` to start the repository:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从执行`git init`开始初始化仓库：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now let’s take a look and see what files we want to commit:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看我们想要提交哪些文件：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'There are a few things in here that we *don’t* want under version control:
    *db.sqlite3* is the database file, *geckodriver.log* contains Selenium debug output,
    and finally our virtualenv shouldn’t be in git either. We’ll add all of them to
    a special file called *.gitignore* which, um, tells Git what to ignore:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些我们不希望纳入版本控制的东西：*db.sqlite3*是数据库文件，*geckodriver.log*包含Selenium的调试输出，最后我们的虚拟环境也不应该在Git中。我们将它们全部添加到一个名为*.gitignore*的特殊文件中，告诉Git忽略它们：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next we can add the rest of the contents of the current folder, “.”:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们可以添加当前文件夹“.”下的其余内容：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Oops! We’ve got a bunch of *.pyc* files in there; it’s pointless to commit
    those. Let’s remove them from Git and add them to *.gitignore* too:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 糟糕！我们这里有一堆*.pyc*文件；提交它们是毫无意义的。让我们从Git中移除它们并且也将它们加入*.gitignore*：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now let’s see where we are…​
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看我们的位置……
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-65
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: You’ll see I’m using `git status` a lot—​so much so that I often alias it to
    `git st`…​I’m not telling you how to do that though; I leave you to discover the
    secrets of Git aliases on your own!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到我经常使用`git status`——以至于我经常将它的别名设置为`git st`……不过，我不会告诉你如何做到这一点；我留给你自己去探索Git别名的秘密！
- en: Looking good—​we’re ready to do our first commit!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错——我们已经准备好做我们的第一次提交了！
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When you type `git commit`, it will pop up an editor window for you to write
    your commit message in. Mine looked like [Figure 1-3](#first_git_commit).^([2](ch01.xhtml#id212))
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当你输入`git commit`时，它会弹出一个编辑窗口让你写提交消息。我的看起来像[图1-3](#first_git_commit)。^([2](ch01.xhtml#id212))
- en: '![Screenshot of git commit vi window](assets/twp2_0103.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![git提交编辑窗口截图](assets/twp2_0103.png)'
- en: Figure 1-3\. First Git commit
  id: totrans-71
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-3\. 第一次Git提交
- en: Note
  id: totrans-72
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to really go to town on Git, this is the time to also learn about
    how to push your work to a cloud-based VCS hosting service like GitHub or GitLab.
    They’ll be useful if you think you want to follow along with this book on different
    computers. I leave it to you to find out how they work; they have excellent documentation.
    Alternatively, you can wait until [Link to Come] when we’ll be using one for deployment.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真的想深入了解Git，现在是时候学习如何将你的工作推送到像GitHub或GitLab这样的基于云的版本控制系统托管服务了。如果你想在不同的电脑上跟着本书学习，这些服务将会很有用。我让你自己去了解它们是如何工作的；它们有很好的文档。或者，你可以等到[链接即将来临]时再用它们来部署。
- en: That’s it for the VCS lecture. Congratulations! You’ve written a functional
    test using Selenium, and you’ve gotten Django installed and running, in a certifiable,
    test-first, goat-approved TDD way. Give yourself a well-deserved pat on the back
    before moving on to [Chapter 2](ch02.xhtml#chapter_02_unittest).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: VCS讲座就到这里了。恭喜！你已经使用Selenium编写了一个功能测试，并且已经以一种可验证、测试驱动、羊认证的TDD方式安装并运行了Django。在继续前往[第2章](ch02.xhtml#chapter_02_unittest)之前，给自己一个当之无愧的鼓励。
- en: ^([1](ch01.xhtml#id203-marker)) OK more of a minor running joke from Pycon in
    the mid ’10s, which I am single-handedly trying to make into a Thing.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.xhtml#id203-marker)) 这其实是一个来自2010年代中期Pycon的一个小段轻松笑话，我正在试图让它变成一件事情。
- en: ^([2](ch01.xhtml#id212-marker)) Did a strange terminal-based editor (the dreaded
    vim) pop up and you had no idea what to do? Or did you see a message about account
    identity and `git config --global user.username`? Check out the Git manual and
    its [basic configuration section.](http://git-scm.com/book/en/Customizing-Git-Git-Configuration)
    PS - to quit vim, it’s Esc, then `:q!`
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch01.xhtml#id212-marker)) 看到一个奇怪的基于终端的编辑器（可怕的vim）突然弹出来，你不知道该怎么办？或者看到关于账户身份和`git
    config --global user.username`的消息？查看Git手册及其[基本配置部分。](http://git-scm.com/book/en/Customizing-Git-Git-Configuration)
    PS - 要退出vim，按Esc，然后输入`:q!`
