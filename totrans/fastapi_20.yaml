- en: Chapter 16\. Forms and Templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Preview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although the *API* in *FastAPI* is a hint of its main focus, FastAPI can also
    handle traditional web content. This chapter talks about standard HTML forms and
    templates for inserting data into HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you’ve seen, FastAPI was mainly designed to build APIs, and its default input
    is JSON. But that doesn’t mean that it can’t serve standard banana HTML, forms,
    and friends.
  prefs: []
  type: TYPE_NORMAL
- en: FastAPI supports data from HTML forms much as it does from other sources like
    `Query` and `Path`, using the `Form` dependency.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll need the package Python-Multipart for any FastAPI forms work, so run
    `pip install python-multipart` if you need to. Also, the *static* directory from
    [Chapter 15](ch15.html#ch15) will be needed to house the test forms in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s redo [Example 3-11](ch03.html#ex-3-11), but provide the `who` value via
    a form instead of a JSON string. (Call this path function `greet2()` to avoid
    clobbering the old `greet()` path function if it’s still around.) Add [Example 16-1](#ex-16-1)
    to *main.py*.
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-1\. Get a value from a `GET` form
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The main difference is that the value comes from `Form` instead of `Path`, `Query`,
    and the others from [Chapter 3](ch03.html#ch03).
  prefs: []
  type: TYPE_NORMAL
- en: Try an initial form test with HTTPie in [Example 16-2](#ex-16-2) (you need that
    `-f` to upload with form encoding rather than as JSON).
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-2\. Form `GET` request with HTTPie
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You could also send a request from a standard HTML form file. [Chapter 15](ch15.html#ch15)
    showed how to make a directory called *static* (accessed under the URL */static*)
    that could house anything, including HTML files, so in [Example 16-3](#ex-16-3),
    let’s put this file (*form1.html*) there.
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-3\. Form `GET` request (static/form1.html)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you ask your browser to load *http://localhost:8000/static/form1.html*,
    you’ll see a form. If you fill in any test string, you’ll get this back:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Huh?
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the window where Uvicorn is running to see what its log says:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Why did this form send `name` as a query parameter when we had it in a form
    field? That turns out to be an HTML weirdness, documented on the [W3C website](https://oreil.ly/e6CJb).
    Also, if you had any query parameters in your URL, it will erase them and replace
    them with `name`.
  prefs: []
  type: TYPE_NORMAL
- en: So, why did HTTPie handle it as expected? I don’t know. It’s an inconsistency
    to be aware of.
  prefs: []
  type: TYPE_NORMAL
- en: The official HTML incantation is to change the action from a `GET` to a `POST`.
    So let’s add a `POST` endpoint for */who2* to *main.py* in [Example 16-4](#ex-16-4).
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-4\. Get a value from a `POST` form
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 16-5](#ex-16-5) is *stuff/form2.html*, with `get` changed to `post`.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-5\. Form `POST` request (static/form2.html)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Ask your browser to get off its digital haunches and get this new form for
    you. Fill in `**Bob Frapples**` and submit the form. This time, you’ll get the
    result that you got from HTTPie:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: So, if you’re submitting forms from HTML files, use `POST`.
  prefs: []
  type: TYPE_NORMAL
- en: Templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may have seen the word game *Mad Libs*. You ask people to provide a sequence
    of words—nouns, verbs, or something more specific—and you enter them into labeled
    places in a page of text. Once you have all the words, you read the text with
    the inserted values, and hilarity ensues, sometimes with embarrassment.
  prefs: []
  type: TYPE_NORMAL
- en: Well, a web *template* is similar, though usually without the embarrassment.
    A template contains a bunch of text with slots for data to be inserted by the
    server. Its usual purpose is to generate HTML with variable content, unlike the
    *static* HTML of [Chapter 15](ch15.html#ch15).
  prefs: []
  type: TYPE_NORMAL
- en: Users of Flask are very familiar with its companion project, the template engine
    [Jinja](https://jinja.palletsprojects.com) (also often called *Jinja2*). FastAPI
    supports Jinja, as well as other template engines.
  prefs: []
  type: TYPE_NORMAL
- en: Make a directory called *template* alongside *main.py* to house Jinja-enhanced
    HTML files. Inside, make a file called *list.html*, as in [Example 16-6](#ex-16-6).
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-6\. Define a template file (template/list.html)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: I don’t care how it looks, so there’s no CSS, just the ancient pre-CSS `bgcolor`
    table attribute to distinguish the two tables.
  prefs: []
  type: TYPE_NORMAL
- en: Double curly braces enclose Python variables that should be inserted, and `{%`
    and `%}` enclose `if` statements, `for` loops, and other controls. See the Jinja
    [documentation](https://jinja.palletsprojects.com) for the syntax and examples.
  prefs: []
  type: TYPE_NORMAL
- en: This template expects to be passed Python variables called `creatures` and `explorers`,
    which are lists of `Creature` and `Explorer` objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 16-7](#ex-16-7) shows what to add to *main.py* to set up templates
    and use the one from [Example 16-6](#ex-16-6). It feeds `creatures` and `explorers`
    to the template, using modules under the *fake* directory from previous chapters,
    which provided test data if the database was empty or not connected.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 16-7\. Configure templates and use one (main.py)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Ask your favorite browser, or even one that you don’t like very well, for *http://localhost:8000/list*,
    and you should get [Figure 16-1](#fig-output-from-list) back.
  prefs: []
  type: TYPE_NORMAL
- en: '![fapi 1601](assets/fapi_1601.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-1\. Output from /list
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was a quick overview of how FastAPI handles non-API topics like
    forms and templates. Along with the previous chapter on files, these are traditional
    bread-and-butter web tasks that you’ll encounter often.
  prefs: []
  type: TYPE_NORMAL
