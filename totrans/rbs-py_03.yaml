- en: Chapter 2\. Introduction to Python Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章 介绍Python类型
- en: To write maintainable Python, you must be aware of the nature of types and be
    deliberate about using them. I’ll start by talking about what a type actually
    is and why that matters. I’ll then move on to how the Python language’s decisions
    about its type system affects the robustness of your codebase.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写可维护的Python代码，你必须了解类型的本质，并有意识地使用它们。我将首先讨论类型实际上是什么，以及为什么这很重要。然后我将进一步探讨Python语言关于其类型系统的决策如何影响代码库的健壮性。
- en: What’s in a Type?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型的含义是什么？
- en: 'I want you to pause and answer a question: without mentioning numbers, strings,
    text, or Booleans, how would you explain what a type is?'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你停下来回答一个问题：不提及数字、字符串、文本或布尔值，你如何解释什么是类型？
- en: It’s not a simple answer for everyone. It’s even harder to explain what the
    benefits are, especially in a language like Python where you do not have to explicitly
    declare types of variables.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对每个人来说，这都不是一个简单的答案。尤其是在Python这样的语言中，你不必显式声明变量的类型，更难解释其好处。
- en: 'I consider a type to have a very simple definition: a communication method.
    Types convey information. They provide a representation that users and computers
    can reason about. I break the representation down into two different facets:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为类型有一个非常简单的定义：一种通信方法。类型传递信息。它们提供了一个用户和计算机可以推理的表示。我将表示分解为两个不同的方面：
- en: Mechanical representation
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 机械表示
- en: Types communicate behaviors and constraints to the Python language itself.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 类型向Python语言本身传达行为和约束。
- en: Semantic representation
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 语义表示
- en: Types communicate behaviors and constraints to other developers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 类型向其他开发者传达行为和约束。
- en: Let’s go learn a little more about each representation.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地了解每种表示。
- en: Mechanical Representation
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机械表示
- en: At its core, computers are all about binary code. Your processor doesn’t speak
    Python; all it sees is the presence or absence of electrical current on circuits
    going through it. Same goes for what’s in your computer memory.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，计算机都是关于二进制代码的。你的处理器不会讲Python；它只看到电路中的电流存在或不存在。同样的情况也适用于你计算机内存中的内容。
- en: 'Suppose your memory looked like the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的内存看起来像下面这样：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Looks like a bunch of gibberish. Let’s zoom in on the middle part there:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来像一堆胡言乱语。让我们放大其中的中间部分：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There is no way to tell exactly what this number means by itself. Depending
    on computer architecture it is plausible that this could represent the number
    5259604 or 5521744\. It could also be the string “PAT.” Without any sort of context,
    you can’t know for certain. This is why Python needs types. Type information gives
    Python what it needs to know to make sense of all the ones and zeroes. Let’s see
    it in action:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 没有办法准确地告诉这个数字本身意味着什么。根据计算机架构，这可能表示数字5259604或5521744。它也可以是字符串“PAT”。没有任何上下文，你不能确定。这就是为什么Python需要类型的原因。类型信息提供了Python需要了解的一切来理解所有的二进制数据。让我们看看它如何运作：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-19
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: I am running CPython 3.9.0 on a little-endian machine, so if you see different
    results, don’t worry, there are subtle things that can change your answers. (This
    code is not guaranteed to run on other Python implementations such as Jython or
    PyPy.)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我在一台小端机器上运行CPython 3.9.0，所以如果你看到不同的结果，不要担心，有些微妙的东西可能会改变你的答案。（这段代码不能保证在其他Python实现如Jython或PyPy上运行。）
- en: These hex strings display the contents of the memory containing a Python object.
    You’ll find pointers to the next and previous object in a linked list (for garbage
    collection purposes), a reference count, a type, and the actual data itself. You
    can see the bytes at the end of each returned value to see the number or string
    (look for the bytes `0x544150` or `0x504154`). The important part of this is that
    there is a type encoded into that memory. When Python looks at a variable, it
    knows exactly what type everything is at runtime (just as when you use the `type()`
    function.)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些十六进制字符串显示了包含Python对象的内存内容。你会在链表中找到指向下一个和上一个对象的指针（用于垃圾收集），一个引用计数，一个类型，以及实际的数据本身。你可以看到每个返回值的末尾字节，以查看数字或字符串（寻找字节`0x544150`或`0x504154`）。其中重要的部分是内存中编码了一个类型。当Python查看一个变量时，它知道运行时每个东西的类型（就像当你使用`type()`函数时一样）。
- en: 'It’s easy to think that this is the only reason for types—the computer needs
    to know how to interpret various blobs of memory. It is important to be aware
    of how Python uses types, as it has some implications for writing robust code,
    but even more important is the second representation: semantic representation.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Semantic Representation
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While the first definition of types is great for lower-level programming, it’s
    the second definition that applies to every developer. Types, in addition to having
    a mechanical representation, also manifest a semantic representation. A semantic
    representation is a communication tool; the types you choose communicate information
    across time and space to a future developer.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Types tell a user what behaviors they can expect when interacting with that
    entity. In this context, “behaviors” are the operations that you associate with
    that type (plus any preconditions or postconditions). They are the boundaries,
    constraints, and freedoms that a user interacts with whenever they use that type.
    Types used correctly have low barriers to understanding; they become natural to
    use. Conversely, types used poorly are a hindrance.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the lowly `int`. Take a minute to think about what behaviors an integer
    has in Python. Here’s a quick (noncomprehensive) list I came up with:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Constructible from integers, floats, or strings
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mathematical operations such as addition, subtraction, division, multiplication,
    exponentiation, and negation
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relational comparison such as <, >, ==, and !=
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitwise operations (manipulating individual bits of a number) such as &, |,
    ^, ~, and shifting
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convertible to a string using `str` or `repr` functions
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Able to be rounded through `ceil`, `floor`, and `round` methods (even though
    they return the integer itself, these are supported methods)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `int` has many behaviors. You can view the full list if you if you type `help(int)`
    into your interactive Python console.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'Now consider a `datetime`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A `datetime` is not that different from an `int`. Typically, it’s represented
    as a number of seconds or milliseconds from some epoch of time (such as January
    1, 1970). But think about the behaviors a `datetime` has (I’ve italicized the
    differences in behavior from an integer):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Constructible from a *string, or a set of integers representing day/month/year/etc*.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mathematical operations such as addition and subtraction of *time deltas*
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relational comparison
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*No bitwise operations available*'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convertible to a string using `str` or `repr` functions
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Is not* able to be rounded through `ceil`, `floor`, or `round` methods'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `datetime` supports addition and subtraction, but not of other datetimes.
    We only add time deltas (such as adding a day or subtracting a year). Multiplying
    and dividing really don’t make sense for a `datetime`. Similarly, rounding dates
    is not a supported operation in the standard library. However, `datetime`s do
    offer comparison and string formatting operations with similar semantics to an
    integer. So even though `datetime` is at heart an integer, it contains a constrained
    subset of operations.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`datetime`支持加法和减法，但不支持其他`datetime`类型。我们只能添加时间差（如添加一天或减去一年）。在标准库中，乘法和除法对`datetime`来说并没有意义。同样地，在标准库中，日期的四舍五入也不是一个支持的操作。然而，`datetime`提供了与整数类似语义的比较和字符串格式化操作。因此，尽管`datetime`本质上是一个整数，但它包含了一组受限制的操作。'
- en: Note
  id: totrans-44
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '*Semantics* refers to the meaning of an operation. While `str(int)` and `str(datetime.datetime.now())`
    will return differently formatted strings, the meaning is the same: I am creating
    a string from a value.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*语义*指的是操作的意义。虽然`str(int)`和`str(datetime.datetime.now())`返回的字符串格式不同，但意义相同：我正在从一个值创建一个字符串。'
- en: 'Datetimes also support their own behaviors, to further distinguish them from
    integers. These include:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`datetime`还支持它们自己的行为，以进一步将它们与整数区分开来。这些行为包括：'
- en: Changing values based on time zones
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于时区更改值
- en: Being able to control the format of strings
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够控制字符串的格式
- en: Finding what weekday it is
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找出今天是星期几
- en: Again, if you’d like a full list of behaviors, type `import datetime; help(date⁠time.datetime)`
    into your REPL.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要获取所有行为的完整列表，请在你的REPL中输入`import datetime; help(datetime.datetime)`。
- en: A `datetime` is more specific than an `int`. It conveys a more specific use
    case than just a plain old number. When you choose to use a more specific type,
    you are telling future contributors that there are operations that are possible
    and constraints to be aware of that aren’t present in the less specific type.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`datetime`比`int`更为具体。它传达了比普通数字更具体的使用情况。当你选择使用更具体的类型时，你在告诉未来的贡献者存在一些可能的操作和需注意的约束条件，这些在不太具体的类型中是不存在的。'
- en: Let’s dive into how this ties into robust code. Say you inherit a codebase that
    handles the opening and closing of a completely automated kitchen. You need to
    add in functionality to be able to change closing time (say, for extending a kitchen’s
    hours on holidays).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨这如何与健壮代码相关联。假设你继承了一个处理完全自动化厨房开关的代码库。你需要添加能够更改关闭时间的功能（例如，在假期延长厨房的营业时间）。
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You know you need to be operating on `point_in_time`, but how do you get started?
    What type are you even dealing with? Is it a `str`, `int`, `datetime`, or some
    custom class? What operations are you allowed to perform on `point_in_time`? You
    didn’t write this code, and you have no history with it. The same problems exist
    if you want to call the code as well. You have no idea what is legal to pass into
    this function.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道你需要操作的是`point_in_time`，但如何开始？你到底在处理什么类型？是`str`、`int`、`datetime`还是一些自定义类？你可以在`point_in_time`上执行哪些操作？你没有编写这段代码，也没有它的历史记录。如果你想要调用这段代码，同样的问题也存在。你不知道什么是合法的传递给这个函数的内容。
- en: If you make an incorrect assumption one way or the other, and that code makes
    it to production, you will have made the code less robust. Maybe that code doesn’t
    lie on a codepath that is executed often. Maybe some other bug is hiding this
    code from being run. Maybe there aren’t a whole lot of tests around this piece
    of code, and it becomes a runtime error later on. No matter what, there is a bug
    lurking in the code, and you’ve decreased maintainability.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你做出了错误的假设，不论朝什么方向，而这段代码又进入了生产环境，你将使代码变得不够健壮。也许这段代码并不经常执行。也许其他某个错误隐藏了这段代码的运行。也许这段代码周围的测试不多，这会在以后导致运行时错误。无论如何，代码中潜藏着一个错误，你降低了可维护性。
- en: 'Responsible developers do their best not to have bugs hit production. They
    will search for tests, documentation (with a grain of salt, of course—documentation
    can go out of date quickly), or calling code. They will look at `closing_time()`
    and `log_time_closed()` to see what types they expect or provide, and plan accordingly.
    This is a correct path in this case, but I still consider it a suboptimal path.
    While an error won’t reach production, they are still expending time in looking
    through the code, which prevents value from being delivered as quickly. With such
    a small example, you would be forgiven for thinking that this isn’t that big a
    problem if it happens once. But beware of death by a thousand cuts: any one slice
    isn’t too detrimental on its own, but thousands piled up and strewn across a codebase
    will leave you limping along, trying to deliver code.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 负责任的开发者尽力避免错误进入生产环境。他们会寻找测试、文档（当然，要带着一点谨慎——文档可能很快过时），或者调用代码。他们会查看`closing_time()`和`log_time_closed()`来查看它们期望或提供的类型，并相应地计划。在这种情况下这是正确的路径，但我仍认为这是一条次优路径。虽然错误不会达到生产环境，但他们仍然花时间浏览代码，这阻碍了价值的快速交付。在这样一个小例子中，如果发生一次，你可能会原谅这不是个大问题。但要警惕千刀万剐：任何一次切割单独看不会太糟，但堆积成千上万在代码库中散落，将使你跋涉前行，试图交付代码。
- en: The root cause is that the semantic representation was not clear for the parameter.
    As you write code, do what you can to express your intent through types. You can
    do it as a comment where needed, but I recommend using type annotations (supported
    in Python 3.5+) to explain parts of your code.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 根本原因在于参数的语义表达不清晰。当你编写代码时，尽力通过类型来表达你的意图。可以在需要时将其作为注释，但我建议使用类型注解（Python 3.5+支持）来解释代码的部分。
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'All I need to do is put in a `: <type>` after my parameters. Most code examples
    in this book will utilize type annotations to make it clear what type the code
    expects.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我所需要做的就是在我的参数后面放一个`：<type>`。本书中的大多数代码示例将利用类型注解来清晰地表达代码期望的类型。
- en: Now, as developers come across this code, they will know what’s expected of
    `point_in_time`. They don’t have to look through other methods, tests, or documentation
    to know how to manipulate the variable. They have a crystal clear clue on what
    to do, and they can get right to work performing the modifications they need to
    do. You are conveying semantic representation to future developers, without ever
    directly talking to them.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当开发者们遇到这段代码时，他们会知道`point_in_time`的预期行为。他们不需要查看其他方法、测试或文档来了解如何操作这个变量。他们清楚地知道该做什么，并可以直接开始执行他们需要做的修改。你向未来的开发者传达了语义上的表示，而无需直接与他们交流。
- en: Furthermore, as developers use a type more and more, they become familiar with
    it. They won’t need to look up documentation or `help()` to use that type when
    they come across it. You begin to create a vocabulary of well-known types across
    your codebase. This lessens the burden of maintenance. When a developer is modifying
    existing code, they want to focus on the changes they need to make without getting
    bogged down.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，随着开发者对某种类型的使用越来越多，他们会变得熟悉它。当他们遇到它时，他们不需要查找文档或使用`help()`来使用该类型。你开始在代码库中创建一个众所周知的类型词汇表。这减少了维护的负担。当开发者修改现有代码时，他们希望专注于他们需要进行的更改，而不会陷入细节之中。
- en: Semantic representation of a type is extremely important, and the rest of [Part I](part0004.html#part_1)
    will be dedicated to covering how you can use types to your advantage. Before
    I move on, though, I need to walk through some fundamental structural elements
    of Python as a language, and how they impact codebase robustness.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 类型的语义表示极为重要，[第一部分](part0004.html#part_1)的其余部分将专门讨论如何利用类型为你所用。在继续之前，我需要介绍Python语言作为一种语言的一些基本结构元素，以及它们如何影响代码库的健壮性。
- en: Discussion Topic
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论主题
- en: Think about types used in your codebase. Pick a few and ask yourself what their
    semantic representations are. Enumerate their constraints, use cases, and behaviors.
    Could you be using these types in more places? Are there places where you are
    misusing types?
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下代码库中使用的类型。选择几种类型，并问自己它们的语义表示是什么。列举它们的约束、用例和行为。你是否可以在更多地方使用这些类型？是否有地方你在误用类型？
- en: Typing Systems
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型系统
- en: As discussed earlier in the chapter, a type system aims to give a user some
    way to model the behaviors and constraints in the language. Programming languages
    set expectations about how their specific type systems work, both during code
    construction and runtime.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章前面讨论的那样，类型系统旨在为用户提供一种模拟语言中的行为和约束的方法。编程语言对其特定类型系统在代码构建和运行时的工作方式有所期望。
- en: Strong Versus Weak
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 强弱之分
- en: Typing systems are classified on a spectrum from weak to strong. Languages toward
    the stronger side of the spectrum tend to restrict the use of operations to the
    types that support them. In other words, if you break the semantic representation
    of the type, you are told (sometimes quite loudly) through a compiler error or
    a runtime error. Languages such as Haskell, TypeScript, and Rust are all considered
    strongly typed. Proponents advocate strongly typed languages because errors are
    more apparent when building or running code.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 类型系统按从弱到强的光谱进行分类。光谱较强一侧的语言倾向于限制对支持它们的类型的操作。换句话说，如果您违反了类型的语义表示，您将得到提示（有时会相当响亮），通过编译器错误或运行时错误。像Haskell、TypeScript和Rust这样的语言都被认为是强类型的。支持者主张强类型语言，因为在构建或运行代码时更容易发现错误。
- en: In contrast, languages toward the weaker side of the spectrum will not restrict
    the use of operations to the types that support them. Types are often coerced
    into a different type to make sense of an operation. Languages such as JavaScript,
    Perl, and older versions of C are weakly typed. Proponents advocate the speed
    with which developers can quickly iterate on code without fighting language along
    the way.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，光谱较弱一侧的语言不会限制对支持它们的类型的操作。类型通常会被强制转换为不同的类型以理解操作。像JavaScript、Perl和较早版本的C这样的语言是弱类型的。支持者主张开发人员可以快速迭代代码而不必与语言作斗争。
- en: 'Python falls toward the stronger side of the spectrum. There are very few implicit
    conversions that happen between types. It is noticeable when you perform illegal
    operations:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Python属于光谱的强一侧。在类型之间几乎没有发生隐式转换。当您执行非法操作时，这是显而易见的：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Contrast that with a weakly typed language, such as JavaScript:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 与弱类型语言相比，如JavaScript：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In terms of robustness, a strongly typed language such as Python certainly helps
    us out. While errors still will show up at runtime instead of at development time,
    they still will show up in an obvious `TypeError` exception. This reduces the
    time taken to debug issues significantly, again allowing you to deliver incremental
    value more quickly.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在健壮性方面，诸如Python之类的强类型语言确实帮助了我们。虽然错误仍然会在运行时而不是在开发时出现，但它们仍然会以明显的`TypeError`异常显示出来。这显著减少了调试问题所需的时间，再次使您能够更快地交付增量值。
- en: Are Weakly Typed Languages Inherently Not Robust?
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弱类型语言固有不稳定吗？
- en: Codebases in weakly typed languages can absolutely be robust; by no means am
    I dumping on those languages. Consider the sheer amount of production-grade JavaScript
    that the world runs on. However, a weakly typed language requires extra care to
    be robust. It’s easy to mistake the type of a variable and make incorrect assumptions.
    Developers come to rely very heavily on linters, tests, and other tools to improve
    maintainability.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 弱类型语言的代码库绝对可以是健壮的；我绝不是在诋毁这些语言。考虑一下全球运行的大量生产级JavaScript。但是，弱类型语言需要额外的注意才能健壮。很容易误解变量的类型并做出不正确的假设。开发人员非常依赖于linters、测试和其他工具来提高可维护性。
- en: Dynamic Versus Static
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态与静态
- en: 'There is another typing spectrum I need to discuss: static versus dynamic typing.
    This is fundamentally a difference in handling mechanical representation of types.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一个我需要讨论的类型光谱：静态与动态类型。这在处理类型的机械表示方面根本上是一种不同。
- en: Languages that offer static typing embed their typing information in variables
    during build time. Developers may explicitly add type information to variables,
    or some tool such as a compiler infers types for the developer. Variables do not
    change their type at runtime (hence, “static”). Proponents of static typing tout
    the ability to write safe code out of the gate and to benefit from a strong safety
    net.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 提供静态类型的语言在构建时将其类型信息嵌入变量中。开发人员可以显式向变量添加类型信息，或者一些工具（如编译器）可以为开发人员推断类型。变量在运行时不会改变其类型（因此称为“静态”）。静态类型的支持者吹嘘能够从一开始就编写安全的代码，并从强大的安全网中受益。
- en: Dynamic typing, on the other hand, embeds type information with the value or
    variable itself. Variables can change types at runtime quite easily, because there
    is no type information tied to that variable. Proponents of dynamic typing advocate
    the flexibility and speed that it takes to develop; there’s nowhere near as much
    fighting with compilers.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，动态类型将类型信息嵌入到值或变量本身。变量在运行时可以很容易地改变类型，因为该变量没有与之绑定的类型信息。动态类型的支持者主张开发的灵活性和速度；与编译器的战斗远远没有这么多。
- en: 'Python is a dynamically typed language. As you saw during the discussion about
    mechanical representation, there was type information embedded inside the values
    of a variable. Python has no qualms about changing the type of a variable at runtime:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种动态类型语言。正如你在关于机械表示的讨论中看到的那样，变量的值内嵌了类型信息。Python 并不介意在运行时改变变量的类型：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Unfortunately, the ability to change types at runtime is a hindrance to robust
    code in many cases. You cannot make strong assumptions about a variable throughout
    its lifetime. As assumptions are broken, it’s easy to write unstable assumptions
    on top of them, leading to a ticking logic bomb in your code.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在许多情况下，运行时更改类型的能力对于编写健壮的代码是一种阻碍。你不能对变量的整个生命周期做出强烈的假设。随着假设的破灭，很容易在其上写出不稳定的假设，导致你的代码中存在一个滴答作响的逻辑炸弹。
- en: Are Dynamically Typed Languages Inherently Not Robust?
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态类型语言本质上不具备健壮性吗？
- en: Just like weakly typed languages, it is still absolutely possible to write robust
    code in a dynamically typed language. You just have to work a little harder for
    it. You will have to make more deliberate decisions to make your codebase more
    maintainable. On the flip side, being statically typed doesn’t guarantee robustness
    either; one can do the bare minimum with types and see little benefit.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 就像弱类型语言一样，在动态类型语言中编写健壮的代码绝对是可能的。你只需要更努力一些。你将不得不做出更多有意识的决策，使你的代码库更易维护。另一方面，静态类型也不能保证健壮性；只能最低限度地使用类型并看到很少的好处。
- en: 'To make things worse, the type annotations I showed earlier have no effect
    on this behavior at runtime:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是，我之前展示的类型注释对运行时的这种行为没有影响：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: No errors, no warnings, no anything. But hope is not lost, and you have plenty
    of strategies to make code more robust (otherwise, this would be quite the short
    book). We will discuss one last thing as a contributor to robust code, and then
    start diving into the meat of improving our codebase.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 没有错误，没有警告，没有任何提示。但是希望并没有消失，你有很多策略可以使代码更加健壮（否则，这本书会非常简短）。我们将讨论最后一个有助于编写健壮代码的因素，然后开始深入研究如何改进我们的代码库。
- en: Duck Typing
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 鸭子类型
- en: 'It is perhaps an unwritten law that whenever someone mentions duck typing,
    someone must reply with:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 或许这是一个不成文的法则，每当有人提到鸭子类型时，总会有人回答：
- en: If it walks like a duck and it quacks like a duck, then it must be a duck.
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果它走起来像鸭子，嘎嘎叫起来像鸭子，那么它一定是鸭子。
- en: My problem with this saying is that I find it completely unhelpful for explaining
    what duck typing actually is. It’s catchy, concise, and, crucially, only comprehensible
    to those who already understand duck typing. When I was younger, I just nodded
    politely, afraid that I was missing something profound in this simple phrase.
    It wasn’t until later on that I truly understood the power of duck typing.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我对这句话的问题是，我发现它完全没有帮助解释鸭子类型到底是什么。这句话很有吸引力，简洁明了，但关键是，只有那些已经理解鸭子类型的人才能理解。当我年轻的时候，我只是礼貌地点头，担心自己在这个简单的短语中错过了什么深刻的东西。直到后来我才真正理解了鸭子类型的威力。
- en: '*Duck typing* is the ability to use objects and entities in a programming language
    as long as they adhere to some interface. It is a wonderful thing in Python, and
    most people use it without even knowing it. Let’s look at a simple example to
    illustrate what I’m talking about:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*鸭子类型* 是使用编程语言中的对象和实体的能力，只要它们遵循某种接口。在 Python 中，这是一件很棒的事情，大多数人在不知不觉中都在使用它。让我们看一个简单的例子来说明我在说什么：'
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In all three invocations of `print_items`, we loop through the collection and
    print each item. Think about how this works. `print_items` has absolutely no knowledge
    of what type it will receive. It just receives a type at runtime and operates
    upon it. It’s not introspecting each argument and deciding to do different things
    based on the type. The truth is much simpler. Instead, all `print_items` is doing
    is checking that whatever is passed in can be iterated upon (by calling an `__iter__`
    method). If the attribute `__iter__` exists, it’s called and the returned iterator
    is looped over.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在`print_items`的所有三次调用中，我们都遍历集合并打印每个项。想一想这是如何工作的。`print_items`根本不知道它将接收什么类型。它只是在运行时接收一个类型并对其进行操作。它不会检查每个参数并根据类型决定做不同的事情。事实上，情况要简单得多。`print_items`只是检查传递进来的东西是否可以迭代（通过调用`__iter__`方法）。如果属性`__iter__`存在，就调用它并循环遍历返回的迭代器。
- en: 'We can verify this with a simple code example:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过一个简单的代码示例来验证这一点：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Duck typing is what makes this possible. As long as a type supports the variables
    and methods used by a function, you can use that type in that function freely.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Duck typing（鸭子类型）使这一切成为可能。只要某个类型支持函数所使用的变量和方法，你就可以在该函数中自由地使用该类型。
- en: 'Here’s another example:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有另一个例子：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'It doesn’t matter that we’re passing an integer in one place or a string in
    another; both support the + operator, so either will work just fine. Any object
    that supports the + operator can be passed in. We can even do it with a list:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个地方传递整数，在另一个地方传递字符串并不重要；两者都支持+运算符，因此都可以正常工作。任何支持+运算符的对象都可以传递进来。我们甚至可以用列表来做：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: So how does this play into robustness? It turns out that duck typing is a double-edged
    sword. It can increase robustness because it increases composability (we’ll learn
    more about composability in [Chapter 17](part0022_split_000.html#composability)).
    Building up a library of solid abstractions able to handle a multitude of types
    lessens the need for complex special cases. However, if duck typing is overused,
    you start to break down assumptions that a developer can rely upon. When updating
    code, it’s not simple enough to just make the changes; you must look at all calling
    code and make sure that the types passed into your function satisfy your new changes
    as well.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这如何影响健壮性呢？事实证明，鸭子类型是一把双刃剑。它可以增加健壮性，因为它增加了组合性（我们将在[第17章](part0022_split_000.html#composability)中学到更多关于组合性的内容）。建立一个能够处理多种类型的坚实抽象库，可以减少复杂特殊情况的需求。然而，如果滥用鸭子类型，你开始打破开发者可以依赖的假设。在更新代码时，不仅仅是简单地进行更改；你必须查看所有调用代码，并确保传递给函数的类型也满足你的新更改。
- en: 'With all this in mind, it might be best to reword the idiom earlier in this
    section as such:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 总结所有这些，最好重述本节早期的成语如下：
- en: If it walks like a duck and quacks like a duck, and you are looking for things
    that walk and quack like ducks, then you can treat it as if it were a duck.
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果它像鸭子一样走路、像鸭子一样嘎嘎叫，而你正在寻找走路和嘎嘎叫的东西，那么你可以把它当作是一只鸭子。
- en: Doesn’t roll off the tongue as well, does it?
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 语言表达不太流畅，对吧？
- en: Discussion Topic
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论话题
- en: Do you use duck typing in your codebase? Are there places where you can pass
    in types that don’t match what the code is looking for, but things still work?
    Do you think these increase or decrease robustness for your use cases?
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的代码库中是否使用鸭子类型？是否有可以传递不匹配代码所寻找的类型的地方，但事情仍然正常工作？你认为这些对你的用例增加了还是减少了健壮性？
- en: Closing Thoughts
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结思路
- en: Types are a pillar of clean, maintainable code and serve as a communication
    tool to other developers. If you take care with types, you communicate a great
    deal, creating less burden for future maintainers. The rest of [Part I](part0004.html#part_1)
    will show you how to use types to enhance a codebase’s robustness.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 类型是干净、可维护的代码的支柱，并且作为与其他开发人员交流的工具。如果你在类型上下功夫，就能传达很多信息，为未来的维护者减轻负担。[第一部分](part0004.html#part_1)
    的其余内容将展示如何利用类型来增强代码库的健壮性。
- en: Remember, Python is dynamically and strongly typed. The strongly typed nature
    will be a boon for us; Python will notify us about errors when we use incompatible
    types. But its dynamically typed nature is something we will have to overcome
    in order to write better code. These language choices shape how Python code is
    written and you should keep them in mind as you write your code.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Python 是动态和强类型的。强类型的特性对我们来说是一种福音；当我们使用不兼容的类型时，Python 会通知我们错误。但它的动态类型特性是我们需要克服的，以便编写更好的代码。这些语言选择决定了
    Python 代码的编写方式，你在编写代码时应该牢记这些选择。
- en: 'In the next chapter, we’re going to talk about type annotations, which is how
    we can be explicit about the type we use. Type annotations serve a crucial role:
    our primary communication method of behaviors to future developers. They help
    overcome the limitations of a dynamically typed language and allow you to enforce
    intentions throughout a codebase.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将讨论类型注解，这是我们如何明确使用的类型。类型注解发挥着至关重要的作用：是我们向未来开发者传达行为的主要方式。它们帮助克服动态类型语言的局限性，并允许您在整个代码库中强化意图。
