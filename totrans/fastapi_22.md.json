["```py\nfrom pathlib import Path\n\nfrom fastapi import APIRouter, Body, Request\nfrom fastapi.templating import Jinja2Templates\n\nfrom service import game as service\n\nrouter = APIRouter(prefix = \"/game\")\n\n# Initial game request\n@router.get(\"\")\ndef game_start(request: Request):\n    name = service.get_word()\n    top = Path(__file__).resolve().parents[1] # grandparent\n    templates = Jinja2Templates(directory=f\"{top}/template\")\n    return templates.TemplateResponse(\"game.html\",\n        {\"request\": request, \"word\": name})\n\n# Subsequent game requests\n@router.post(\"\")\nasync def game_step(word: str = Body(), guess: str = Body()):\n    score = service.get_score(word, guess)\n    return score\n```", "```py\nfrom fastapi import FastAPI\nfrom web import creature, explorer, game\n\napp = FastAPI()\n\napp.include_router(explorer.router)\napp.include_router(creature.router)\napp.include_router(game.router)\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\"main:app\",\n        host=\"localhost\", port=8000, reload=True)\n```", "```py\n<head>\n<style>\nhtml * {\n  font-size: 20pt;\n  font-family: Courier, sans-serif;\n}\nbody {\n  margin: 0 auto;\n  max-width: 700px;\n}\ninput[type=text] {\n  width: 30px;\n  margin: 1px;\n  padding: 0px;\n  border: 1px solid black;\n}\ntd, th {\n  cell-spacing: 4pt;\n  cell-padding: 4pt;\n  border: 1px solid black;\n}\n.H { background-color: #00EE00; } /* hit (green) */\n.C { background-color: #EEEE00; } /* close (yellow) */\n.M { background-color: #EEEEEE; } /* miss (gray) */\n</style>\n</head>\n<body>\n<script>\nfunction show_score(guess, score){\n    var table = document.getElementById(\"guesses\");\n    var row = table.insertRow(row);\n    for (var i = 0; i < guess.length; i++) {\n        var cell = row.insertCell(i);\n        cell.innerHTML = guess[i];\n        cell.classList.add(score[i]);\n    }\n    var word = document.getElementById(\"word\").value;\n    if (guess.toLowerCase() == word.toLowerCase()) {\n        document.getElementById(\"status\").innerHTML = \"&#x1F600\";\n    }\n}\n\nasync function post_guess() {\n    var word = document.getElementById(\"word\").value;\n    var vals = document.getElementsByName(\"guess\");\n    var guess = \"\";\n    for (var i = 0; i < vals.length; i++) {\n        guess += vals[i].value;\n    }\n    var req = new Request(\"http://localhost:8000/game\", {\n        method: \"POST\",\n        headers: {\"Content-Type\": \"application/json\"},\n        body: JSON.stringify({\"guess\": guess, \"word\": word})\n        }\n     )\n     fetch(req)\n        .then((resp) => resp.json())\n        .then((score) => {\n            show_score(guess, score);\n            for (var i = 0; i < vals.length; i++) {\n                vals[i].value = \"\";\n            }\n         });\n}\n</script>\n<h2>Cryptonamicon</h2>\n\n<table id=\"guesses\">\n</table>\n\n<span id=\"status\"></span>\n\n<hr>\n\n<div>\n{% for letter in word %}<input type=text name=\"guess\">{% endfor %}\n<input type=hidden id=\"word\" value=\"{{word}}\">\n<br><br>\n<input type=submit onclick=\"post_guess()\">\n</div>\n\n</body>\n```", "```py\nimport data.game as data\n\ndef get_word() -> str:\n    return data.get_word()\n```", "```py\nfrom collections import Counter, defaultdict\n\nHIT = \"H\"\nMISS = \"M\"\nCLOSE = \"C\"  # (letter is in the word, but at another position)\n\ndef get_score(actual: str, guess: str) -> str:\n    length: int = len(actual)\n    if len(guess) != length:\n        return ERROR\n    actual_counter = Counter(actual) #  {letter: count, ...}\n    guess_counter = defaultdict(int)\n    result = [MISS] * length\n    for pos, letter in enumerate(guess):\n        if letter == actual[pos]:\n            result[pos] = HIT\n            guess_counter[letter] += 1\n    for pos, letter in enumerate(guess):\n        if result[pos] == HIT:\n            continue\n        guess_counter[letter] += 1\n        if (letter in actual and\n            guess_counter[letter] <= actual_counter[letter]):\n            result[pos] = CLOSE\n    result = ''.join(result)\n    return result\n```", "```py\nimport pytest\nfrom service import game\n\nword = \"bigfoot\"\nguesses = [\n    (\"bigfoot\", \"HHHHHHH\"),\n    (\"abcdefg\", \"MCMMMCC\"),\n    (\"toofgib\", \"CCCHCCC\"),\n    (\"wronglength\", \"\"),\n    (\"\", \"\"),\n    ]\n\n@pytest.mark.parametrize(\"guess,score\", guesses)\ndef test_match(guess, score):\n    assert game.get_score(word, guess) == score\n```", "```py\n$ pytest -q test_game.py\n.....                                               [100%]\n5 passed in 0.05s\n```", "```py\nfrom .init import curs\n\ndef get_word() -> str:\n    qry = \"select name from creature order by random() limit 1\"\n    curs.execute(qry)\n    row = curs.fetchone()\n    if row:\n        name = row[0]\n    else:\n        name = \"bigfoot\"\n    return name\n```"]