- en: Chapter 7\. Working Incrementally
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章。逐步工作
- en: 'Now let’s address our real problem, which is that our design only allows for
    one global list. In this chapter I’ll demonstrate a critical TDD technique: how
    to adapt existing code using an incremental, step-by-step process which takes
    you from working state to working state. Testing Goat, not Refactoring Cat.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们解决真正的问题，即我们的设计只允许一个全局列表。在本章中，我将演示一个关键的TDD技术：如何使用增量、逐步的过程来调整现有代码，从一个可工作状态过渡到另一个可工作状态。测试羊驼，而不是重构猫。
- en: Small Design When Necessary
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当必要时进行小设计
- en: Let’s have a think about how we want support for multiple lists to work.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一下我们希望支持多个列表的工作方式。
- en: At the moment the only URL for our site is the homepage, and that’s why there’s
    only one global list. The most obvious way to support multiple lists is to say
    that each list gets its own URL, so that people can start multiple lists, or so
    that different people can have different lists. How might that work?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们站点的唯一URL是主页，这就是为什么只有一个全局列表的最明显方式支持多个列表。每个列表都有自己的URL，这样人们可以开始多个列表，或者不同的人可以有不同的列表。这可能如何工作？
- en: Not Big Design Up Front
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不是大设计预先
- en: TDD is closely associated with the agile movement in software development, which
    includes a reaction against *Big Design Up Front*, the traditional software engineering
    practice whereby, after a lengthy requirements gathering exercise, there is an
    equally lengthy design stage where the software is planned out on paper. The agile
    philosophy is that you learn more from solving problems in practice than in theory,
    especially when you confront your application with real users as soon as possible.
    Instead of a long up-front design phase, we try to put a *minimum viable application*
    out there early, and let the design evolve gradually based on feedback from real-world
    usage.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: TDD与敏捷开发运动密切相关，后者反对*大设计预先*（Big Design Up Front），即传统软件工程实践，其中经过长时间的需求收集后，会有一个同样漫长的设计阶段，在这个阶段，软件被计划在纸上完成。敏捷哲学认为，通过在实践中解决问题，你比在理论中学到更多，特别是当你尽早将应用程序与真实用户对接时。我们不再有长时间的前期设计阶段，而是尝试尽早发布一个*最小可行应用*，并根据来自真实世界使用的反馈逐步演进设计。
- en: 'But that doesn’t mean that thinking about design is outright banned! In the
    last big chapter we saw how just blundering ahead without thinking can *eventually*
    get us to the right answer, but often a little thinking about design can help
    us get there faster. So, let’s think about our minimum viable lists app, and what
    kind of design we’ll need to deliver it:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不意味着思考设计被完全禁止！在上一大章中，我们看到仅仅笨拙地继续前进而不加思考*最终*可以让我们达到正确答案，但常常稍微思考设计可以帮助我们更快地到达那里。因此，让我们思考一下我们的最小可行列表应用，以及我们需要交付的设计类型：
- en: We want each user to be able to store their own list—​at least one, for now.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望每个用户能够存储自己的列表——至少目前是这样。
- en: A list is made up of several items, whose primary attribute is a bit of descriptive
    text.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个列表由几个项目组成，其主要属性是一小段描述性文本。
- en: We need to save lists from one visit to the next. For now, we can give each
    user a unique URL for their list. Later on we may want some way of automatically
    recognising users and showing them their lists.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要保存用户在一次访问到下一次访问的列表。目前，我们可以为每个用户提供一个唯一的列表URL。以后，我们可能希望以某种方式自动识别用户并向他们显示他们的列表。
- en: To deliver the “for now” items, it sounds like we’re going to store lists and
    their items in a database. Each list will have a unique URL, and each list item
    will be a bit of descriptive text, associated with a particular list.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要交付“目前”项目，听起来我们要将列表及其项存储在数据库中。每个列表将有一个唯一的URL，每个列表项将是与特定列表相关的一小段描述文本。
- en: YAGNI!
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: YAGNI！
- en: 'Once you start thinking about design, it can be hard to stop. All sorts of
    other thoughts are occurring to us—​we might want to give each list a name or
    title, we might want to recognise users using usernames and passwords, we might
    want to add a longer notes field as well as short descriptions to our list, we
    might want to store some kind of ordering, and so on. But we obey another tenet
    of the agile gospel: “YAGNI” (pronounced yag-knee), which stands for “You ain’t
    gonna need it!” As software developers, we have fun creating things, and sometimes
    it’s hard to resist the urge to build things just because an idea occurred to
    us and we *might* need it. The trouble is that more often than not, no matter
    how cool the idea was, you *won’t* end up using it. Instead you have a load of
    unused code, adding to the complexity of your application. YAGNI is the mantra
    we use to resist our overenthusiastic creative urges.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你开始考虑设计，就很难停下来。我们脑海中冒出各种其他想法——也许我们想给每个列表一个名称或标题，也许我们想用用户名和密码识别用户，也许我们想在列表中添加一个更长的注释字段以及短描述，也许我们想存储某种排序方式等等。但我们遵循敏捷开发的另一个原则：“YAGNI”（读作
    yag-knee），即“你不会需要它！”作为软件开发者，我们喜欢创造东西，有时很难抵制只是因为想法浮现而建造东西的冲动。问题是，往往情况是，无论想法有多酷，你最终都不会用到它。相反，你会有一堆未使用的代码，增加了应用程序的复杂性。YAGNI
    是我们用来抵制过度热情的创造冲动的口号。
- en: REST (ish)
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: REST（ish）
- en: We have an idea of the data structure we want—​the Model part of Model-View-Controller
    (MVC). What about the View and Controller parts? How should the user interact
    with `List`s and their `Item`s using a web browser?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对我们想要的数据结构有一个想法——Model-View-Controller（MVC）的模型部分。那么视图和控制器部分呢？用户如何使用 Web 浏览器与列表及其项目进行交互？
- en: Representational State Transfer (REST) is an approach to web design that’s usually
    used to guide the design of web-based APIs. When designing a user-facing site,
    it’s not possible to stick *strictly* to the REST rules, but they still provide
    some useful inspiration (skip ahead to [Link to Come] if you want to see a real
    REST API).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 表述性状态转移（REST）是一种通常用于指导基于 Web API 设计的 Web 设计方法。在设计用户界面站点时，不可能严格遵循 REST 规则，但它们仍然提供了一些有用的启发（如果您想看到真正的
    REST API，请跳转到 [Link to Come]）。
- en: 'REST suggests that we have a URL structure that matches our data structure,
    in this case lists and list items. Each list can have its own URL:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: REST 建议我们有一个 URL 结构，与我们的数据结构匹配，例如列表和列表项目。每个列表可以有自己的 URL：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That will fulfill the requirement we’ve specified in our FT. To view a list,
    we use a GET request (a normal browser visit to the page).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这将满足我们在 FT 中指定的要求。要查看列表，我们使用 GET 请求（正常浏览器访问页面）。
- en: 'To create a brand new list, we’ll have a special URL that accepts POST requests:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建全新的列表，我们将有一个特殊的 URL 接受 POST 请求：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To add a new item to an existing list, we’ll have a separate URL, to which
    we can send POST requests:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要向现有列表添加新项目，我们将有一个单独的 URL，可以向其发送 POST 请求：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: (Again, we’re not trying to perfectly follow the rules of REST, which would
    use a PUT request here—​we’re just using REST for inspiration. Apart from anything
    else, you can’t use PUT in a standard HTML form.)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: （再次强调，我们并非试图完全遵循 REST 规则，在这里应该使用 PUT 请求——我们只是借鉴 REST 的灵感。此外，你不能在标准 HTML 表单中使用
    PUT。）
- en: 'In summary, our scratchpad for this chapter looks something like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，本章的草稿如下所示：
- en: Implementing the New Design Incrementally Using TDD
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逐步实施新设计，使用 TDD
- en: How do we use TDD to implement the new design? Let’s take another look at the
    flowchart for the TDD process in [Link to Come].
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何使用 TDD 实现新设计？让我们再看一下 TDD 流程的流程图，位于 [Link to Come]。
- en: At the top level, we’re going to use a combination of adding new functionality
    (by adding a new FT and writing new application code), and refactoring our application—​that
    is, rewriting some of the existing implementation so that it delivers the same
    functionality to the user but using aspects of our new design. We’ll be able to
    use the existing functional test to verify we don’t break what already works,
    and the new functional test to drive the new features.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶层，我们将结合添加新功能（通过添加新的 FT 和编写新的应用程序代码）和重构我们的应用程序——即重写某些现有实现，以便向用户提供相同功能，但使用我们新设计的一些方面。我们将能够使用现有的功能测试来验证我们不会破坏已经工作的内容，并使用新的功能测试来推动新功能的实现。
- en: At the unit test level, we’ll be adding new tests or modifying existing ones
    to test for the changes we want, and we’ll be able to similarly use the unit tests
    we *don’t* touch to help make sure we don’t break anything in the process.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在单元测试级别上，我们将添加新的测试或修改现有测试以测试我们想要的更改，并且我们将能够类似地使用我们 *不* 修改的单元测试来帮助确保我们在过程中没有破坏任何东西。
- en: '![An inner red/green/refactor loop surrounded by an outer red/green of FTs](assets/double-loop-tdd-simpler.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![内部红绿灯/重构循环被外部 FTs 的红绿灯所包围](assets/double-loop-tdd-simpler.png)'
- en: Figure 7-1\. The TDD Process With Both Functional and Unit Tests
  id: totrans-31
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-1\. 具有功能和单元测试的 TDD 过程
- en: Ensuring We Have a Regression Test
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确保我们有一个回归测试
- en: Let’s translate our scratchpad into a new functional test method, which introduces
    a second user and checks that their to-do list is separate from Edith’s.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将我们的草稿翻译成一个新的功能测试方法，引入第二个用户，并检查他们的待办事项列表是否与 Edith 的分开。
- en: 'We’ll start out very similarly to the first. Edith adds a first item to create
    a to-do list, but we introduce our first new assertion—Edith’s list should live
    at its own, unique URL:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从第一个例子开始类似地进行。Edith 添加了第一个项目以创建一个待办事项列表，但我们引入了第一个新的断言——Edith 的列表应该存在于自己独特的
    URL 上：
- en: functional_tests/tests.py (ch07l005)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: functional_tests/tests.py（ch07l005）
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](assets/1.png)](#co_working_incrementally_CO1-1)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_working_incrementally_CO1-1)'
- en: '`assertRegex` is a helper function from `unittest` that checks whether a string
    matches a regular expression. We use it to check that our new REST-ish design
    has been implemented. Find out more in the [`unittest` documentation](http://docs.python.org/3/library/unittest.xhtml).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`assertRegex` 是 `unittest` 中的一个辅助函数，用于检查字符串是否与正则表达式匹配。我们用它来检查我们的新的 REST-ish
    设计是否已经实现。在 [`unittest` 文档](http://docs.python.org/3/library/unittest.xhtml) 中查找更多信息。'
- en: 'Next we imagine a new user coming along. We want to check that they don’t see
    any of Edith’s items when they visit the home page, and that they get their own
    unique URL for their list:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想象一个新用户加入。我们希望检查当他们访问主页时，他们不会看到 Edith 的任何项目，并且他们会得到自己的独特 URL 用于他们的列表：
- en: functional_tests/tests.py (ch07l006)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: functional_tests/tests.py（ch07l006）
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](assets/1.png)](#co_working_incrementally_CO2-1)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_working_incrementally_CO2-1)'
- en: I’m using the convention of double-hashes (`##`) to indicate “meta-comments”—comments
    about *how* the test is working and why—​so that we can distinguish them from
    regular comments in FTs which explain the User Story. They’re a message to our
    future selves, which might otherwise be wondering why we’re faffing about deleting
    cookies…​
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用双哈希（`##`）的惯例来表示“元注释”——关于测试工作方式和原因的注释——这样我们就可以将它们与解释用户故事的 FT 中的常规注释区分开来。它们是给我们未来的自己的消息，否则我们可能会想知道为什么我们在忙着删除
    cookies...​
- en: 'Other than that, the new test is fairly self-explanatory. Let’s see how we
    do when we run our FTs:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，新测试相当容易理解。让我们看看当我们运行我们的 FTs 时我们的表现如何：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Good, our first test still passes, and the second one fails where we might
    expect. Let’s do a commit, and then go and build some new models and views:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，我们的第一个测试仍然通过，第二个测试失败了，这是我们可能期望的。让我们提交一下，然后去构建一些新的模型和视图：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Iterating Towards the New Design
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 朝着新设计迭代
- en: Being all excited about our new design, I had an overwhelming urge to dive in
    at this point and start changing *models.py*, which would have broken half the
    unit tests, and then pile in and change almost every single line of code, all
    in one go. That’s a natural urge, and TDD, as a discipline, is a constant fight
    against it. Obey the Testing Goat, not Refactoring Cat! We don’t need to implement
    our new, shiny design in a single big bang. Let’s make small changes that take
    us from a working state to a working state, with our design guiding us gently
    at each stage.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的新设计感到兴奋，我有一种无法抑制的冲动，想立即开始更改 *models.py*，这将破坏一半的单元测试，然后堆叠并一次性更改几乎每一行代码。这是一种自然的冲动，而
    TDD 作为一种学科，是一直在与之斗争。听从测试山羊的话，而不是重构猫的话！我们不需要在一个巨大的爆炸中实现我们新的闪亮设计。让我们进行一些小的变更，从一个工作状态到另一个工作状态，我们的设计在每个阶段都温和地指导着我们。
- en: There are four items on our to-do list. The FT, with its `Regex didn't match`
    error, is suggesting to us that the second item—​giving lists their own URL and
    identifier—​is the one we should work on next. Let’s have a go at fixing that,
    and only that.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的待办事项列表上有四个项目。FT，以其 `Regex didn't match` 错误，建议我们下一个应该解决的问题是第二个项目——给列表分配自己的
    URL 和标识符。让我们试着修复这个问题，只修改那个问题。
- en: 'The URL comes from the redirect after POST. In *lists/tests.py*, let’s find
    `test_redirects_after_POST`, and change the expected redirect location:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: URL来自POST后的重定向。在*lists/tests.py*中，让我们找到`test_redirects_after_POST`，并更改预期的重定向位置：
- en: lists/tests.py (ch07l007)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: lists/tests.py（ch07l007）
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Does that seem slightly strange? Clearly, */lists/the-only-list-in-the-world*
    isn’t a URL that’s going to feature in the final design of our application. But
    we’re committed to changing one thing at a time. While our application only supports
    one list, this is the only URL that makes sense. We’re still moving forwards,
    in that we’ll have a different URL for our list and our home page, which is a
    step along the way to a more REST-ful design. Later, when we have multiple lists,
    it will be easy to change.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来有点奇怪吗？显然，*/lists/the-only-list-in-the-world*不是我们应用程序最终设计中会出现的URL。但我们致力于一次只改变一件事情。虽然我们的应用程序只支持一个列表，但这是唯一有意义的URL。我们仍在前进，因为我们将为列表和主页拥有不同的URL，这是向更符合REST原则的设计迈出的一步。稍后，当我们有多个列表时，将很容易更改。
- en: Note
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Another way of thinking about it is as a problem-solving technique: our new
    URL design is currently not implemented, so it works for 0 items. Ultimately,
    we want to solve for *n* items, but solving for 1 item is a good step along the
    way.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种思考方式是作为解决问题的技巧：我们新的URL设计目前尚未实现，所以对于0项是有效的。最终，我们想要解决*n*项，但解决1项是迈向目标的一大步。
- en: 'Running the unit tests gives us an expected fail:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 运行单元测试会得到一个预期的失败：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can go adjust our `home_page` view in *lists/views.py*:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以调整我们在*lists/views.py*中的`home_page`视图：
- en: lists/views.py (ch07l008)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py（ch07l008）
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Django’s unit test runner picks up on the fact that this is not a real URL
    yet:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Django的单元测试运行器会发现这不是一个真实的URL：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Taking a First, Self-Contained Step: One New URL'
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行第一步，自包含的步骤：一个新的URL
- en: Our singleton list URL doesn’t exist yet. We fix that in *superlists/urls.py*.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的单例列表URL尚不存在。我们在*superlists/urls.py*中修复这个问题。
- en: superlists/urls.py (ch07l009)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: superlists/urls.py（ch07l009）
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](assets/1.png)](#co_working_incrementally_CO3-1)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_working_incrementally_CO3-1)'
- en: We’ll just point our new URL at the existing home page view. This is the minimimal
    change.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需将新的URL指向现有的主页视图。这是最小的改变。
- en: Tip
  id: totrans-70
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Watch out for trailing slashes in URLs, both here in *urls.py* and in the tests.
    They’re a common source of bugs.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 小心URL中的尾部斜杠，无论是在这里的*urls.py*还是测试中。它们是常见的错误源。
- en: 'That gets our unit tests passing:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得我们的单元测试通过了：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: What do the FTs think?
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: FTs（功能测试）认为怎么样？
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Good, they get a little further along, we now confirm that we have a new URL,
    but the actual page content is still the same, it shows the old list.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，它们进展了一点，现在我们确认有了一个新的URL，但实际页面内容仍然相同，显示旧的列表。
- en: Separating out our home page and list view functionality
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分离我们的主页和列表视图功能
- en: 'We now have two URLs, but they’re actually doing the exact same thing. Under
    the hood, they’re just pointing at the same function. Continuing to work incrementally,
    we can start to break apart the responsibilities for these two different URLs:
    * the home page only needs to display and react to creating a brand new list based
    on its first item. * the list view page needs to be able to display existing list
    items and add new items to the list'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了两个URL，但它们实际上做着完全相同的事情。在幕后，它们只是指向同一个函数。继续逐步工作，我们可以开始分解这两个不同URL的责任：*主页只需显示并对基于其第一个项目创建全新列表做出反应。*
    列表视图页面需要能够显示现有的列表项并向列表添加新项
- en: Let’s split out some tests for our new URL.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分离一些关于我们新URL的测试。
- en: 'Open up *lists/tests.py*, and add a new test class called `ListViewTest`. Then
    move the method called `test_displays_all_list_items` across from `HomePageTest`
    into our new class, changing just the URL that is invoked by `self.client.get()`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 打开*lists/tests.py*，并添加一个名为`ListViewTest`的新测试类。然后将从`HomePageTest`移到我们的新类中的名为`test_displays_all_list_items`的方法，只改变`self.client.get()`调用的URL：
- en: lists/tests.py (ch07l010)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: lists/tests.py（ch07l010）
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let’s try running this test now:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试运行这个测试：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: It passes, because the URL is still pointing at the home_page view.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过了，因为URL仍指向`home_page`视图。
- en: 'Let’s make it point at a new view:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其指向一个新的视图：
- en: superlists/urls.py (ch07l011)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: superlists/urls.py（ch07l011）
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'That predictably fails because there is no such view function yet:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 预料之中的失败，因为目前还没有这样的视图函数：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: A New View Function
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个新的视图函数
- en: 'Fair enough. Let’s create a dummy view function in *lists/views.py*:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 够公平。让我们在*lists/views.py*中创建一个虚拟视图函数：
- en: lists/views.py (ch07l012-0)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py（ch07l012-0）
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Not quite good enough:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 还不够好：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Looking for the minimal code change, let’s just make the view return our existing
    *home.xhtml* template, but with nothing in it:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找最小的代码更改，让我们只是让视图返回我们现有的 *home.xhtml* 模板，但里面什么都没有：
- en: lists/views.py (ch07l012-1)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py (ch07l012-1)
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now the tests guide us to making sure that our list view shows existing list
    items:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在测试指导我们确保我们的列表视图显示现有的列表项：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'So let’s copy the last two lines from `home_page` more directly:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们直接复制 `home_page` 的最后两行：
- en: lists/views.py (ch07l012)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py (ch07l012)
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: That gets us to passing unit tests!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们通过了单元测试！
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The FTs detect a regression
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FTs 检测到一个回归
- en: 'As always when we get to passing unit tests, we run the functional tests to
    check how things are doing “in real life”:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，当我们开始通过单元测试时，我们运行功能测试以检查事物在“现实生活”中的运行情况：
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Not only is our new test failing, but the old one is too. That tells us we’ve
    introduced a *regression*.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅是我们的新测试失败了，而且旧测试也失败了。这告诉我们我们引入了一个*回归*。
- en: What are they trying to tell us?
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 他们试图告诉我们什么？
- en: 'Both tests are failing when we try to add the second item. We have to put our
    debugging hats on here. We know the home page is working, because the test has
    got all the way down to line 63 in the first FT, so we’ve at least added a first
    item. And our unit tests are all passing, so we’re pretty sure the URLs and views
    that we *do* have are doing what they should. Let’s have a quick look at those
    unit tests to see what they tell us:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试添加第二个项目时，两个测试都失败了。我们必须戴上调试帽子。我们知道主页是工作的，因为测试已经到达了第一个 FT 的第 63 行，所以我们至少已经添加了一个第一项。而且我们的单元测试都通过了，所以我们相当确定我们*有*的
    URL 和视图正在执行它们应该执行的操作。让我们快速查看一下这些单元测试，看看它们告诉我们什么：
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The home page displays the right template, and can handle POST requests, and
    the */only-list-in-the-world/* view knows how to display all items…​ but it doesn’t
    know how to handle POST requests. Ah, that gives us a clue.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 主页显示了正确的模板，并且可以处理 POST 请求，而 */only-list-in-the-world/* 视图知道如何显示所有项目... 但是它不知道如何处理
    POST 请求。啊，这给了我们一个线索。
- en: A second clue is the rule of thumb that, when all the unit tests are passing
    but the functional tests aren’t, it’s often pointing at a problem that’s not covered
    by the unit tests, and in our case, that’s often a template problem.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个线索是一个经验法则，当所有单元测试都通过了但功能测试没有通过时，通常指向的是单元测试未覆盖的问题，而在我们的情况下，这通常是一个模板问题。
- en: 'The answer is that our *home.xhtml* input form currently doesn’t specify an
    explicit URL to POST to:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是，我们目前的 *home.xhtml* 输入表单没有指定一个显式的 POST URL：
- en: lists/templates/home.xhtml
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/home.xhtml
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: By default the browser sends the POST data back to the same URL it’s currently
    on. When we’re on the home page that works fine, but when we’re on our */only-list-in-the-world/*
    page, it doesn’t.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，浏览器将 POST 数据发送回当前所在的相同 URL。当我们在主页上时，这没问题，但当我们在 */only-list-in-the-world/*
    页面上时，就不行了。
- en: Getting Back to a Working State as Quickly as Possible
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尽快恢复工作状态
- en: 'Now we could dive in and add POST request handling to our new view, but that
    would involve writing a bunch more tests and code, and at this point we’d like
    to get back to a working state as quickly as possible. Actually the *quickest*
    thing we can do to get things fixed is to just use the existing home page view,
    which already works, for all POST requests:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以深入研究并向我们的新视图添加 POST 请求处理，但这将涉及编写更多的测试和代码，而且在这一点上，我们希望尽快恢复到工作状态。实际上，我们可以做的*最快*的事情是只使用现有的主页视图，因为它已经工作了，用于所有
    POST 请求：
- en: lists/templates/home.xhtml (ch07l013)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/home.xhtml (ch07l013)
- en: '[PRE27]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Try that, and we’ll see our FTs get back to a happier place:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 试一下，我们会看到我们的 FTs 回到了一个更愉快的地方：
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Our regression test passes once again, so we know we’re back to a working state.
    The new functionality may not be working yet, but at least the old stuff works
    as well as it used to.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的回归测试再次通过了，所以我们知道我们已经恢复到了工作状态。新功能可能还没有起作用，但至少旧功能的工作方式和以前一样。
- en: Green? Refactor
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绿色？重构
- en: Time for a little tidying up.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候稍微整理一下了。
- en: In the *Red/Green/Refactor* dance, we’ve arrived at green, so we should see
    what needs a refactor. We now have two views, one for the home page, and one for
    an individual list. Both are currently using the same template, and passing it
    all the list items currently in the database. Post requests are only handled by
    the home page though.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *红/绿/重构* 的过程中，我们已经到达了绿色阶段，所以我们应该看看需要进行重构的地方。我们现在有两个视图，一个用于主页，一个用于单个列表。两者目前都使用相同的模板，并将其中所有当前在数据库中的列表项传递给它。但是
    POST 请求仅由主页处理。
- en: It feels like the responsibilities of our two views are a little tangled up.
    Let’s try and disentangle them a little.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 感觉我们两个视图的责任有点纠缠在一起。让我们试着稍微解开它们的纠缠。
- en: 'Another Small Step: A Separate Template for Viewing Lists'
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另一个小步骤：为查看列表创建一个单独的模板
- en: Since the home page and the list view are now quite distinct pages, they should
    be using different HTML templates; *home.xhtml* can have the single input box,
    whereas a new template, *list.xhtml*, can take care of showing the table of existing
    items.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 由于主页和列表视图现在是完全不同的页面，它们应该使用不同的HTML模板；*home.xhtml*可以有一个单独的输入框，而一个新模板，*list.xhtml*，可以负责显示现有项目的表格。
- en: 'Let’s add a new test to check that it’s using a different template:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个新的测试来检查它是否使用了一个不同的模板：
- en: lists/tests.py (ch07l014)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: lists/tests.py (ch07l014)
- en: '[PRE29]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Let’s see what it says:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它说了什么：
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Looks about right, let’s change the view:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来差不多了，让我们改变一下视图：
- en: lists/views.py (ch07l015)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py (ch07l015)
- en: '[PRE31]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'But, obviously, that template doesn’t exist yet. If we run the unit tests,
    we get:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，显然，那个模板还不存在。如果我们运行单元测试，我们会得到：
- en: '[PRE32]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Let’s create a new file at *lists/templates/list.xhtml*:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在*lists/templates/list.xhtml*创建一个新文件：
- en: '[PRE33]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'A blank template, which gives us this error—​good to know the tests are there
    to make sure we fill it in:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 一个空模板，导致我们出现这个错误——知道测试在那里确保我们填写它：
- en: '[PRE34]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The template for an individual list will reuse quite a lot of the stuff we
    currently have in *home.xhtml*, so we can start by just copying that:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 一个单独列表的模板将会重复使用我们当前在*home.xhtml*中拥有的相当多的内容，所以我们可以先简单地复制那个：
- en: '[PRE35]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: That gets the tests back to passing (green).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这样测试就通过了（绿灯）。
- en: '[PRE36]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now let’s do a little more tidying up (refactoring). We said the home page
    doesn’t need to list items, it only needs the new list input field, so we can
    remove some lines from *lists/templates/home.xhtml*, and maybe slightly tweak
    the `h1` to say “Start a new To-Do list”:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们再做一些整理（重构）。我们说过主页不需要列出项目，它只需要新的列表输入字段，所以我们可以从*lists/templates/home.xhtml*中删除一些行，并且可能稍微调整`h1`来说“开始一个新的待办事项列表”：
- en: 'I’ll present the code change as a diff, which hopefully shows a bit more clearly
    what we need to modify:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我将代码更改呈现为一个差异，希望能更清楚地显示我们需要修改的内容：
- en: lists/templates/home.xhtml (ch07l018)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/home.xhtml (ch07l018)
- en: '[PRE37]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We rerun the unit tests to check that hasn’t broken anything…​
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重新运行单元测试以确保没有出现问题……
- en: '[PRE38]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Good.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。
- en: 'Now there’s actually no need to pass all the items to the *home.xhtml* template
    in our `home_page` view, so we can simplify that and delete a couple of lines:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在实际上没有必要将所有项目传递到我们的`home_page`视图中的*home.xhtml*模板中，所以我们可以简化它并删除一些行：
- en: lists/views.py (ch07l019)
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py (ch07l019)
- en: '[PRE39]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Rerun the unit tests once more; they still pass:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行单元测试；它们仍然通过：
- en: '[PRE40]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Time to run the functional tests:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 运行功能测试的时间到了：
- en: '[PRE41]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Not bad! Our regression test (the first FT) is passing, and our new test is
    now getting slightly further forwards—​it’s telling us that Francis isn’t getting
    his own list page (because he still sees some of Edith’s list items).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 不错！我们的回归测试（第一个FT）通过了，我们的新测试现在也稍微前进了一点——它告诉我们Francis没有得到自己的列表页面（因为他仍然看到了Edith的一些列表项）。
- en: 'It may feel like we haven’t made much headway since, functionally, the site
    still behaves almost exactly like it did when we started the chapter, but this
    really is progress. We’ve started on the road to our new design, and we’ve implemented
    a number of stepping stones *without making anything worse than it was before*.
    Let’s commit our progress so far:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 也许感觉我们没有取得太多进展，因为从功能上来说，站点的行为几乎与我们开始这一章时完全一样，但这确实是进步。我们已经开始了通往新设计的道路，并且我们已经实施了一些步骤*而没有比以前更糟糕*。让我们提交到目前为止的进展：
- en: '[PRE42]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'A Third Small Step: A New URL for Adding List Items'
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三个小步骤：为添加列表项创建一个新的URL
- en: Where are we with our own to-do list?
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的自己待办事项清单进展到哪里了？
- en: We’ve *sort of* made progress on the second item, even if there’s still only
    one list in the world. The first item is a bit scary. Can we do something about
    items 3 or 4?
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第二项上*有点*取得了进展，即使世界上仍然只有一个列表。第一项有点吓人。我们能在3或4项上做些什么吗？
- en: 'Let’s have a new URL for adding new list items at */lists/new*: If nothing
    else, it’ll simplify the home page view.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在*/lists/new*添加一个新的URL来添加新的列表项：如果没有别的，这将简化主页视图。
- en: A Test Class for New List Creation
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个用于新列表创建的测试类
- en: 'Open up *lists/tests.py*, and *move* the `test_can_save_a_POST_request` and
    `test_redirects_after_POST` methods into a new class, then change the URL they
    POST to:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 打开*lists/tests.py*，并且*移动*`test_can_save_a_POST_request`和`test_redirects_after_POST`方法到一个新的类中，然后改变它们提交的URL：
- en: lists/tests.py (ch07l020)
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: lists/tests.py (ch07l020)
- en: '[PRE43]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Tip
  id: totrans-176
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: This is another place to pay attention to trailing slashes, incidentally. It’s
    `/lists/new`, with no trailing slash. The convention I’m using is that URLs without
    a trailing slash are “action” URLs which modify the database.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，这是另一个需要注意尾随斜杠的地方。它是`/lists/new`，没有尾随斜杠。我使用的约定是没有尾随斜杠的URL是“动作”URL，用于修改数据库。
- en: 'Try running that:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试运行它：
- en: '[PRE44]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The first failure tells us we’re not saving a new item to the database, and
    the second says that, instead of returning a 302 redirect, our view is returning
    a 404. That’s because we haven’t built a URL for */lists/new*, so the `client.post`
    is just getting a “not found” response.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个失败告诉我们，我们没有将新项目保存到数据库中，第二个失败告诉我们，我们的视图返回了404而不是302重定向。这是因为我们还没有为*/lists/new*构建URL，所以`client.post`只是得到一个“未找到”的响应。
- en: Note
  id: totrans-181
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Do you remember how we split this out into two tests earlier? If we only had
    one test that checked both the saving and the redirect, it would have failed on
    the `0 != 1` failure, which would have been much harder to debug. Ask me how I
    know this.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你还记得我们之前是如何将其拆分成两个测试的吗？如果我们只有一个测试来检查保存和重定向的情况，它会在`0 != 1`的失败上失败，这将更难调试。问我为什么知道这一点。
- en: A URL and View for New List Creation
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于新列表创建的URL和视图
- en: 'Let’s build our new URL now:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们构建我们的新URL：
- en: superlists/urls.py (ch07l021)
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: superlists/urls.py（ch07l021）
- en: '[PRE45]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Next we get a `no attribute ''new_list''`, so let’s fix that, in *lists/views.py*:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们得到了`no attribute 'new_list'`，所以让我们在*lists/views.py*中修复它：
- en: lists/views.py (ch07l022)
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py（ch07l022）
- en: '[PRE46]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Then we get “The view lists.views.new_list didn’t return an HttpResponse object”.
    (This is getting rather familiar!) We could return a raw `HttpResponse`, but since
    we know we’ll need a redirect, let’s borrow a line from `home_page`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们得到了“视图lists.views.new_list没有返回一个HttpResponse对象”。（这已经变得相当熟悉了！）我们可以返回一个原始的`HttpResponse`，但既然我们知道我们需要一个重定向，让我们从`home_page`中借用一行：
- en: lists/views.py (ch07l023)
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py（ch07l023）
- en: '[PRE47]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'That gives:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做就得到：
- en: '[PRE48]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Seems reasonably straightforward. We borrow another line from `home_page`:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来相当简单。我们从`home_page`再借用一行：
- en: lists/views.py (ch07l024)
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py（ch07l024）
- en: '[PRE49]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'And everything now passes:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有的事情都过去了：
- en: '[PRE50]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'And we can run the FTs to check that we’re still in the same place: our regression
    test passes, and the new FT gets to the same point.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以运行FTs检查我们是否仍然在同一位置：我们的回归测试通过了，新的FT也达到了相同的点。
- en: '[PRE51]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Removing Now-Redundant Code and Tests
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移除现在多余的代码和测试
- en: We’re looking good. Since our new views are now doing most of the work that
    `home_page` used to do, we should be able to massively simplify it. Can we remove
    the whole `if request.method == 'POST'` section, for example?
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看起来很好。由于我们的新视图现在正在做大部分`home_page`过去做的工作，我们应该能够大幅简化它。例如，我们可以移除整个`if request.method
    == 'POST'`部分吗？
- en: lists/views.py (ch07l025)
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py（ch07l025）
- en: '[PRE52]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Yep!
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！
- en: '[PRE53]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: And while we’re at it, we can remove the now-redundant `test_only_saves_​items_when_necessary`
    test too!
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 而我们在这个过程中，也可以移除现在多余的`test_only_saves_​items_when_necessary`测试！
- en: Doesn’t that feel good? The view functions are looking much simpler. We rerun
    the tests to make sure…​
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 感觉不错吧？视图函数看起来简单多了。我们重新运行测试确保……
- en: '[PRE54]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: and the FTs?
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 还有FTs呢？
- en: A Regression! Pointing Our Forms at the New URL
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个回归测试！将我们的表单指向新URL
- en: 'Oops:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 糟糕：
- en: '[PRE55]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Once again, the FTs pick up a tricky little bug, something that our unit tests
    alone would find it hard to catch.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，功能测试（FTs）捕捉到一个棘手的小bug，这是我们的单元测试单独很难发现的。
- en: 'It’s because our forms are still pointing to the old URL. In *both* *home.xhtml*
    and *lists.xhtml*, let’s change them to:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们的表单仍然指向旧的URL。在*home.xhtml*和*lists.xhtml*中，让我们将它们都改为：
- en: lists/templates/home.xhtml, lists/templates/list.xhtml
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/home.xhtml，lists/templates/list.xhtml
- en: '[PRE56]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'And that should get us back to working again:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这样应该可以让我们重新工作了：
- en: '[PRE57]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: That’s another nicely self-contained commit, in that we’ve made a bunch of changes
    to our URLs, our *views.py* is looking much neater and tidier, and we’re sure
    the application is still working as well as it did before. We’re getting good
    at this working-state-to-working-state malarkey!
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个非常完整的提交，我们对URL做了很多改动，我们的*views.py*看起来更加整洁，我们确信应用程序仍然像以前一样工作得很好。我们在这种工作状态到工作状态的操作中越来越娴熟了！
- en: '[PRE58]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'And we can cross out an item on the to-do list:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以划掉待办列表上的一个项目：
- en: 'Biting the Bullet: Adjusting Our Models'
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迈出改变我们模型的步伐：调整我们的模型
- en: 'Enough housekeeping with our URLs. It’s time to bite the bullet and change
    our models. Let’s adjust the model unit test. Again, a diff is a good way to see
    the changes:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 足够处理我们的URL了。现在是时候迈出改变我们模型的步伐了。让我们调整模型单元测试。再次，通过diff查看更改是一个很好的方法：
- en: lists/tests.py (ch07l029)
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: lists/tests.py（ch07l029）
- en: '[PRE59]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: We create a new `List` object and then we assign each item to it by assigning
    it as its `.list` property. We check that the list is properly saved, and we check
    that the two items have also saved their relationship to the list. You’ll also
    notice that we can compare list objects with each other directly (`saved_list`
    and `mylist`)—behind the scenes, these will compare themselves by checking that
    their primary key (the `.id` attribute) is the same.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个新的`List`对象，然后通过将其分配为其`.list`属性来为每个项分配它。我们检查列表是否被正确保存，并检查这两个项是否也保存了它们与列表的关系。您还会注意到，我们可以直接比较列表对象（`saved_list`和`mylist`）—在幕后，这些将通过检查它们的主键（`.id`属性）是否相同来进行比较。
- en: Time for another unit-test/code cycle.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 又到了另一个单元测试/代码周期。
- en: For the first couple of iterations, rather than explicitly showing you what
    code to enter in between every test run, I’m only going to show you the expected
    error messages from running the tests. I’ll let you figure out what each minimal
    code change should be, on your own.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在最初的几次迭代中，我不会在每次测试运行之间显式展示您输入的代码，我只会展示运行测试时预期的错误消息。我会让您自己来确定每个最小代码更改应该是什么。
- en: Tip
  id: totrans-231
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: Need a hint? Go back and take a look at the steps we took to introduce the `Item`
    model in [the chapter before last](ch05.xhtml#first-django-model).
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 需要提示吗？回到我们在[上上一章](ch05.xhtml#first-django-model)中介绍`Item`模型的步骤看看。
- en: 'Your first error should be:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 您的第一个错误应该是：
- en: '[PRE60]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Fix that, and then you should see:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题，然后您应该会看到：
- en: '[PRE61]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Next you should see:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您应该会看到：
- en: '[PRE62]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'So we run a `makemigrations`:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们运行`makemigrations`：
- en: '[PRE63]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'And then you should see:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您应该会看到：
- en: '[PRE64]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: A Foreign Key Relationship
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外键关系
- en: 'How do we give our `Item` a list attribute? Let’s just try naively making it
    like the `text` attribute (and here’s your chance to see whether your solution
    so far looks like mine by the way):'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何为我们的`Item`赋予一个列表属性？让我们试着像`text`属性一样天真地去做（顺便说一句，这是您看到迄今为止您的解决方案是否与我的类似的机会）：
- en: lists/models.py (ch07l033)
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: lists/models.py (ch07l033)
- en: '[PRE65]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'As usual, the tests tell us we need a migration:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，测试告诉我们我们需要一个迁移：
- en: '[PRE66]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Let’s see what that gives us:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这给我们带来了什么：
- en: '[PRE67]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'We’re not quite there. Look closely at each side of the `!=`. Do you see the
    quotes `''`? Django has only saved the string representation of the `List` object.
    To save the relationship to the object itself, we tell Django about the relationship
    between the two classes using a `ForeignKey`:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没到那里。仔细看看`!=`的每一侧。您看到了单引号`'`吗？Django只保存了`List`对象的字符串表示形式。为了保存到对象本身的关系，我们使用`ForeignKey`告诉Django这两个类之间的关系：
- en: lists/models.py (ch07l035)
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: lists/models.py (ch07l035)
- en: '[PRE68]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'That’ll need a migration too. Since the last one was a red herring, let’s delete
    it and replace it with a new one:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 那也需要进行迁移。由于最后一个是一个误导，让我们删除它并用新的替换它：
- en: '[PRE69]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Warning
  id: totrans-256
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Deleting migrations is dangerous. Now and again it’s nice to do it to keep things
    tidy, because we don’t always get our models code right on the first go! But if
    you delete a migration that’s already been applied to a database somewhere, Django
    will be confused about what state it’s in, and won’t be able to apply future migrations.
    You should only do it when you’re sure the migration hasn’t been used. A good
    rule of thumb is that you should never delete or modify a migration that’s already
    been committed to your VCS.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 删除迁移是危险的。偶尔这样做以保持整洁很好，因为我们并不总是第一次就正确编写我们的模型代码！但是，如果您删除了已经应用到某个数据库中的迁移，Django将会对它所处的状态感到困惑，并且无法应用未来的迁移。您只应在确定迁移未被使用时才这样做。一个很好的经验法则是，您永远不应删除或修改已经提交到您的VCS的迁移。
- en: Adjusting the Rest of the World to Our New Models
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整其余世界以适应我们的新模型
- en: Back in our tests, now what happens?
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的测试中，现在会发生什么？
- en: '[PRE70]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Oh dear!
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！
- en: There is some good news. Although it’s hard to see, our model tests are passing.
    But three of our view tests are failing nastily.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些好消息。虽然很难看到，但我们的模型测试通过了。但我们的三个视图测试却失败了。
- en: The cause is the new relationship we’ve introduced between `Item`s and `List`s,
    which requires each item to have a parent list, and which our old tests and code
    aren’t prepared for.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 问题出在我们在`Item`和`List`之间引入的新关系上，它要求每个项都必须有一个父列表，而我们的旧测试和代码还没有准备好。
- en: 'Still, this is exactly why we have tests! Let’s get them working again. The
    easiest is the `ListViewTest`; we just create a parent list for our two test items:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，这正是我们为什么要有测试的原因！让我们再次让它们工作起来。最简单的是`ListViewTest`；我们只需为我们的两个测试项创建一个父列表：
- en: lists/tests.py (ch07l038)
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: lists/tests.py (ch07l038)
- en: '[PRE71]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'That gets us down to two failing tests, both on tests that try to POST to our
    `new_list` view. Decoding the tracebacks using our usual technique, working back
    from error to line of test code to, buried in there somewhere, the line of our
    own code that caused the failure:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们只剩下两个失败的测试，都是在尝试向我们的`new_list`视图进行POST请求的测试上。使用我们通常的技术来解码回溯，从错误到测试代码的行，最后埋藏在其中的是导致失败的我们自己的代码行：
- en: '[PRE72]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'It’s when we try to create an item without a parent list. So we make a similar
    change in the view:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试创建一个没有父列表的项目时。因此，我们在视图中进行类似的更改：
- en: lists/views.py (ch07l039)
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py (ch07l039)
- en: '[PRE73]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'And that^([1](ch07.xhtml#id427)) gets our tests passing again:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 然后^([1](ch07.xhtml#id427))让我们的测试再次通过：
- en: '[PRE74]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Are you cringing internally at this point? *Arg! This feels so wrong; we create
    a new list for every single new item submission, and we’re still just displaying
    all items as if they belong to the same list!* I know, I feel the same. The step-by-step
    approach, in which you go from working code to working code, is counterintuitive.
    I always feel like just diving in and trying to fix everything all in one go,
    instead of going from one weird half-finished state to another. But remember the
    Testing Goat! When you’re up a mountain, you want to think very carefully about
    where you put each foot, and take one step at a time, checking at each stage that
    the place you’ve put it hasn’t caused you to fall off a cliff.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你是不是内心在崩溃？ *啊！感觉太不对了；我们为每个新项提交都创建一个新列表，而且我们仍然只是显示所有项，好像它们属于同一个列表！* 我知道，我也有同感。逐步的方法让你从工作代码到工作代码，这是反直觉的。我总是觉得应该一口气跳进去，试图一次性修复所有问题，而不是从一个奇怪的半成品状态到另一个。但记住测试的山羊！当你在山上时，你需要非常谨慎地考虑每一步的落脚点，并一步一步地前行，确保每个阶段你所站的地方都不会让你跌入悬崖。
- en: 'So just to reassure ourselves that things have worked, we rerun the FT:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，只是为了让我们确信事情已经起作用，我们重新运行FT：
- en: '[PRE75]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Sure enough, it gets all the way through to where we were before. We haven’t
    broken anything, and we’ve made a big change to the database. That’s something
    to be pleased with! Let’s commit:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，它完全到达了我们之前的地方。我们没有破坏任何东西，而且我们对数据库进行了重大改变。这是一件令人高兴的事情！让我们提交吧：
- en: '[PRE76]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'And we can cross out another item on the to-do list:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以划掉待办列表中的另一项：
- en: Each List Should Have Its Own URL
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 每个列表应该有自己的URL
- en: We can get rid of the silly `the-only-list-in-the-world` url, but what shall
    we use as the unique identifier for our lists? Probably the simplest thing, for
    now, is just to use the auto-generated `id` field from the database. Let’s change
    `ListViewTest` so that the two tests point at new URLs.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以摆脱愚蠢的`the-only-list-in-the-world` URL，但是我们应该用什么作为我们列表的唯一标识符呢？现在，也许最简单的方法就是使用数据库中自动生成的`id`字段。让我们修改`ListViewTest`，使得这两个测试指向新的URL。
- en: 'We’ll also change the old `test_displays_all_items` test and call it `test_displays_only_items_for_that_list`
    instead, making it check that only the items for a specific list are displayed:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将更改旧的`test_displays_all_items`测试，并将其命名为`test_displays_only_items_for_that_list`，以确保仅显示特定列表的项目：
- en: lists/tests.py (ch07l040)
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: lists/tests.py (ch07l040)
- en: '[PRE77]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Note
  id: totrans-285
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Are you wondering about the line spacing in the test? I’m grouping together
    two lines at the beginning which set up the test, one line in the middle which
    actually calls the code under test, and the assertions at the end. This isn’t
    obligatory, but it does help see the structure of the test. Some people refer
    to this structure as *Arrange-Act-Assert*, or *Given-When-Then*: *Given* the database
    contains our list with two items, and another list, *When* I do a GET request
    for our list, *Then* I see the items in our list, but not the items in the other
    list.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否在考虑测试中的行间距？我将测试的开头两行组合在一起，设置了测试，中间一行实际调用了被测试的代码，最后是断言。这不是强制性的，但确实有助于看到测试的结构。有些人称这种结构为*安排-执行-断言*，或*假设-当-那时*：*假设*数据库包含我们的列表和两个项目，以及另一个列表，*当*我为我们的列表做GET请求时，*那么*我看到我们列表中的项目，而不是其他列表中的项目。
- en: 'Running the unit tests gives an expected 404, and another related error:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 运行单元测试会得到一个预期的404错误，还有另一个相关的错误：
- en: '[PRE78]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Capturing Parameters from URLs
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从URL中捕获参数
- en: 'It’s time to learn how we can pass parameters from URLs to views:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候学习如何将参数从URL传递给视图：
- en: superlists/urls.py (ch07l041-0)
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: superlists/urls.py (ch07l041-0)
- en: '[PRE79]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: We adjust the regular expression for our URL to include a *capture group*, `<int:list_id>`,
    which will match any numerical characters, up to the following `/`, The captured
    id will get passed to the view as an argument.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调整了我们的 URL 的正则表达式，包括一个*捕获组* `<int:list_id>`，它将匹配任何数字字符，直到下一个 `/`，捕获的 id 将作为参数传递给视图。
- en: In other words, if we go to the URL */lists/1/*, `view_list` will get a second
    argument after the normal `request` argument, namely the integer `1`.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，如果我们去到 URL */lists/1/*，`view_list` 将在正常的 `request` 参数之后得到一个第二个参数，即整数 `1`。
- en: 'But our view doesn’t expect an argument yet! Sure enough, this causes problems:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们的视图还没有预期的参数！果然，这会引起问题：
- en: '[PRE80]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'We can fix that easily with a dummy parameter in *views.py*:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 *views.py* 中轻松修复这个问题：
- en: lists/views.py (ch07l041)
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py (ch07l041)
- en: '[PRE81]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: That takes us down to our expected failure, plus an *only-list-in-the-world*
    that’s still hanging around somewhere, which I’m sure we can fix later.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 这把我们带到了我们期望的失败，再加上一个*only-list-in-the-world*仍然挂在某个地方，我相信我们以后可以修复它。
- en: '[PRE82]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Let’s make our list view discriminate over which items it sends to the template:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们的列表视图区分发送到模板的项目：
- en: lists/views.py (ch07l042)
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py (ch07l042)
- en: '[PRE83]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Adjusting new_list to the New World
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整 new_list 到新世界
- en: 'Now let’s address the *only-list-in-the-world* failure:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们解决*only-list-in-the-world*的失败：
- en: '[PRE84]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Let’s have a little look and find the test that’s moaning:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一看哪个测试在抱怨：
- en: lists/tests.py
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: lists/tests.py
- en: '[PRE85]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: It looks like it hasn’t been adjusted to the new world of `List`s and `Item`s.
    The test should be saying that this view redirects to the URL of the specific
    new list it just created.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来它还没有调整到`List`和`Item`的新世界。测试应该说这个视图重定向到它刚刚创建的特定新列表的 URL。
- en: lists/tests.py (ch07l043)
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: lists/tests.py (ch07l043)
- en: '[PRE86]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'The test still fails, but we can now take a look at the view itself, and change
    it so it redirects to the right place:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 测试仍然失败，但是我们现在可以看一下视图本身，并更改它，使其重定向到正确的位置：
- en: lists/views.py (ch07l044)
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py (ch07l044)
- en: '[PRE87]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'That gets us back to passing unit tests:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我们回到了通过单元测试的状态：
- en: '[PRE88]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: What about the functional tests? We must be almost there?
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 功能测试怎么样？我们几乎到了吗？
- en: The Functional Tests Detect Another Regression
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能测试检测到另一个回归
- en: 'Well, almost:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，几乎：
- en: '[PRE89]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Our *new* FT is actually passing: different users can get different lists.
    But the old test is warning us of a regression. It looks like you can’t add a
    second item to a list any more. It’s because of our quick-and-dirty hack where
    we create a new list for every single POST submission. This is exactly what we
    have functional tests for!'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的*新* FT 实际上是通过的：不同的用户可以得到不同的列表。但是旧测试正在警告我们存在回归。看起来你不能再添加第二个项目到列表中了。这是因为我们的快速脏方法，在每个单独的
    POST 提交中创建一个新列表。这正是我们有功能测试的原因！
- en: 'And it correlates nicely with the last item on our to-do list:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 它与我们待办事项清单上的最后一项相吻合：
- en: One More View to Handle Adding Items to an Existing List
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另外一个视图来处理向现有列表添加项目
- en: 'We need a URL and view to handle adding a new item to an existing list (*/lists/<list_id>/add_item*).
    We’re getting pretty good at these now, so let’s knock one together quickly:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个 URL 和视图来处理向现有列表添加新项目（*/lists/<list_id>/add_item*）。我们现在对这些已经很擅长了，所以让我们迅速合并一个：
- en: lists/tests.py (ch07l045)
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: lists/tests.py (ch07l045)
- en: '[PRE90]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Note
  id: totrans-329
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Are you wondering about `other_list`? A bit like in the tests for viewing a
    specific list, it’s important that we add items to a specific list. Adding this
    second object to the database prevents me from using a hack like `List.objects.first()`
    in the implementation. Yes, that would be a stupid thing to do, and you can go
    too far down the road of testing for all the stupid things you must not do (there
    are an infinite number of those, after all). It’s a judgement call, but this one
    feels worth it. There’s some more discussion of this in [Link to Come].
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否想知道 `other_list`？有点像查看特定列表的测试一样，我们重要的是将项目添加到特定列表中。向数据库添加这个第二个对象阻止了我在实现中使用
    `List.objects.first()` 这样的 hack。是的，那将是一件愚蠢的事情，你可能会对不能做的愚蠢事情测试太过分（毕竟有无数的愚蠢事情）。这是一个判断，但这个感觉值得。关于这个问题我们还有更多的讨论[链接待定]。
- en: 'So that fails as expected, the list item is not saved, and the new URL currently
    returns a 404:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，按预期失败，列表项未保存，新 URL 目前返回 404：
- en: '[PRE91]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: The Last New URL
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后一个新 URL
- en: 'Now we’ve got our expected 404, let’s add a new URL for adding new items to
    existing lists:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们得到了我们期望的 404，让我们为向现有列表添加新项目添加一个新的 URL：
- en: superlists/urls.py (ch07l046)
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: superlists/urls.py (ch07l046)
- en: '[PRE92]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Three very similar-looking URLs there. Let’s make a note on our to-do list;
    they look like good candidates for a refactoring:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 那里有三个看起来非常相似的URL。让我们在待办事项清单上做个备注；它们看起来是重构的好候选项：
- en: 'Back to the tests, we get the usual missing module view objects:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 回到测试中，我们得到了通常缺少模块视图对象的错误：
- en: '[PRE93]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: The Last New View
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后一个新视图
- en: 'Let’s try:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试：
- en: lists/views.py (ch07l047)
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py（ch07l047）
- en: '[PRE94]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Aha:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: Aha：
- en: '[PRE95]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: lists/views.py (ch07l048)
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py（ch07l048）
- en: '[PRE96]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'And then:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 然后：
- en: '[PRE97]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'We can copy the `redirect()` from `new_list` and the `List.objects.get()` from
    `view_list`:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从`new_list`复制`redirect()`和从`view_list`复制`List.objects.get()`：
- en: lists/views.py (ch07l049)
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py（ch07l049）
- en: '[PRE98]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'That takes us to:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 这带我们到了：
- en: '[PRE99]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Finally we make it save our new list item:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 最后我们让它保存我们的新列表项：
- en: lists/views.py (ch07l050)
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py（ch07l050）
- en: '[PRE100]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: And we’re back to passing tests.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 我们又通过了测试。
- en: '[PRE101]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Testing Template Context Directly
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接测试模板上下文
- en: We’ve got our new view and URL for adding items to existing lists; now we just
    need to actually use it in our *list.xhtml* template. So we open it up to adjust
    the form tag…​
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有了一个用于将项目添加到现有列表的新视图和URL；现在我们只需要实际在我们的*list.xhtml*模板中使用它。所以我们打开它来调整表单标签…​
- en: lists/templates/list.xhtml
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/list.xhtml
- en: '[PRE102]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: …​oh. To get the URL for adding to the current list, the template needs to know
    what list it’s rendering, as well as what the items are.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: …​哦。为了获取添加到当前列表的URL，模板需要知道它正在渲染的列表，以及项目是什么。
- en: 'We *want* to be able to do something like this:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 我们*希望*能够做这样的事情：
- en: lists/templates/list.xhtml
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/list.xhtml
- en: '[PRE103]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'For that to work, the view will have to pass the list to the template. Let’s
    create a new unit test in `ListViewTest`:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使其工作，视图将必须将列表传递给模板。让我们在`ListViewTest`中创建一个新的单元测试：
- en: lists/tests.py (ch07l051)
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: lists/tests.py（ch07l051）
- en: '[PRE104]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[![1](assets/1.png)](#co_working_incrementally_CO4-1)'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_working_incrementally_CO4-1)'
- en: '`response.context` represents the context we’re going to pass into the render
    function—​the Django Test Client puts it on the `response` object for us, to help
    with testing.'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`response.context`代表我们将传递给渲染函数的上下文—​Django测试客户端将其放在`response`对象上，以帮助测试。'
- en: 'That gives us:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我们：
- en: '[PRE105]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'because we’re not passing `list` into the template. It actually gives us an
    opportunity to simplify a little:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们没有将`list`传递给模板。这实际上给了我们简化的机会：
- en: lists/views.py (ch07l052)
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: lists/views.py（ch07l052）
- en: '[PRE106]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'That, of course, introduces a bug, because the template needed `items`:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这引入了一个错误，因为模板需要`items`：
- en: '[PRE107]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'But we can fix it in *list.xhtml*, as well as adjusting the form’s POST action,
    which is what we were trying to do anyway:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们可以在*list.xhtml*中修复它，同时调整表单的POST操作，这正是我们试图做的：
- en: lists/templates/list.xhtml (ch07l053)
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/list.xhtml（ch07l053）
- en: '[PRE108]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[![1](assets/1.png)](#co_working_incrementally_CO5-1)'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_working_incrementally_CO5-1)'
- en: There’s our new form action.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们新的表单操作。
- en: '[![2](assets/2.png)](#co_working_incrementally_CO5-2)'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_working_incrementally_CO5-2)'
- en: '`.item_set` is called a [reverse lookup](https://docs.djangoproject.com/en/4.2/topics/db/queries/#following-relationships-backward).
    It’s one of Django’s incredibly useful bits of ORM that lets you look up an object’s
    related items from a different table…​'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`.item_set`被称为[反向查找](https://docs.djangoproject.com/en/4.2/topics/db/queries/#following-relationships-backward)。这是Django
    ORM中非常有用的一部分，允许您从不同表格查找对象的相关项...​'
- en: 'So that gets the unit tests to pass:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就通过了单元测试：
- en: '[PRE109]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: How about the FTs?
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: FTs怎么样？
- en: '[PRE110]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'HOORAY! Oh, and a quick check on our to-do list:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 万岁！哦，还有一个快速检查我们的待办事项清单：
- en: Irritatingly, the Testing Goat is a stickler for tying up loose ends too, so
    we’ve got to do this one final thing.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 令人恼火的是，测试山羊也是一个注重细节的人，所以我们必须做这最后一件事情。
- en: 'Before we start, we’ll do a commit—​always make sure you’ve got a commit of
    a working state before embarking on a refactor:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们会提交一次—​确保在进行重构之前有一个可工作状态的提交：
- en: '[PRE111]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: A Final Refactor Using URL includes
  id: totrans-395
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终使用URL包含进行重构
- en: '*superlists/urls.py* is really meant for URLs that apply to your entire site.
    For URLs that only apply to the `lists` app, Django encourages us to use a separate
    *lists/urls.py*, to make the app more self-contained. The simplest way to make
    one is to use a copy of the existing *urls.py*:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '*superlists/urls.py*实际上是为适用于整个站点的URL而设计的。对于仅适用于`lists`应用程序的URL，Django鼓励我们使用单独的*lists/urls.py*，以使应用程序更加自包含。制作一个的最简单方法是使用现有的*urls.py*的副本：'
- en: '[PRE112]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Then we replace the three list-specific lines in *superlists/urls.py* with
    an `include()`:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将*superlists/urls.py*中的三行特定于列表的行替换为`include()`：
- en: superlists/urls.py (ch07l055)
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: superlists/urls.py（ch07l055）
- en: '[PRE113]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[![1](assets/1.png)](#co_working_incrementally_CO6-1)'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_working_incrementally_CO6-1)'
- en: While we’re at it, we use the `import x as y` syntax to alias `views` This is
    good practice in your top-level *urls.py*, because it will let us import views
    from multiple apps if we want—​and indeed we will need to later on in the book.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`import x as y`语法来为`views`起别名时，这在你的顶级*urls.py*中是一个良好的实践，因为这样我们可以从多个应用中导入视图——确实，我们稍后在本书中会需要这样做。
- en: '[![2](assets/2.png)](#co_working_incrementally_CO6-2)'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_working_incrementally_CO6-2)'
- en: Here’s the `include`. Notice that it can take a part of a URL as a prefix, which
    will be applied to all the included URLs (this is the bit where we reduce duplication,
    as well as giving our code a better structure).
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`include`。请注意，它可以将URL的一部分作为前缀，这将应用于所有包含的URL（这是我们减少重复的地方，同时给我们的代码更好的结构）。
- en: 'Back in *lists/urls.py* we can trim down to only include the latter part of
    our three URLs, and none of the other stuff from the parent *urls.py*:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 回到*lists/urls.py*，我们可以只包含我们的三个URL的后半部分，而不包含父*urls.py*中的其他内容：
- en: lists/urls.py (ch07l056)
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: lists/urls.py (ch07l056)
- en: '[PRE114]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Rerun the unit tests to check that everything worked.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行单元测试以确保一切工作正常。
- en: '[PRE115]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: When I saw that it, I couldn’t quite believe I did it correctly on the first
    go. It always pays to be skeptical of your own abilities, so I deliberately changed
    one of the URLs slightly, just to check if it broke a test. It did. We’re covered.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 当我看到它时，我不太相信我第一次就做对了。始终怀疑自己的能力是值得的，所以我故意稍微改变了一个URL，只是为了检查是否会破坏一个测试。它确实会。我们已经有所准备。
- en: 'Feel free to try it yourself! Remember to change it back, check that the tests
    all pass again, and then do a final commit:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎随意尝试自己操作！记得改回来，检查所有测试是否再次通过，然后进行最终提交：
- en: '[PRE116]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Phew. A marathon chapter. But we covered a number of important topics, starting
    with some thinking about design. We covered rules of thumb like “YAGNI” and “three
    strikes then refactor”. But, most importantly, we saw how to adapt an existing
    codebase step by step, going from working state to working state, in order to
    iterate towards a new design.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀。一个马拉松章节。但我们涵盖了许多重要主题，从设计思考开始。我们涵盖了像“YAGNI”和“三次错误再重构”这样的经验法则。但更重要的是，我们看到了如何逐步调整现有的代码库，从一个工作状态迭代到另一个工作状态，以向新设计前进。
- en: I’d say we’re pretty close to being able to ship this site, as the very first
    beta of the superlists website that’s going to take over the world. Maybe it needs
    a little prettification first…​let’s look at what we need to do to deploy it in
    the next couple of chapters.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 我会说我们已经相当接近能够发布这个网站了，作为即将占领世界的superlists网站的第一个beta版。也许需要稍微美化一下…让我们看看在接下来的几章中需要部署它的内容。
- en: ^([1](ch07.xhtml#id427-marker)) Are you wondering about the strange spelling
    of the “nulist” variable? Other options are “list”, which would shadow the built-in
    `list()` function, and `new_list`, which would shadow the name of the function
    that contains it. Or `list1` or `listey` or `mylist`, but none are particularly
    satisfactory.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch07.xhtml#id427-marker)) 你是否对“nulist”变量的奇怪拼写感到困惑？其他选项有“list”，这将掩盖内置的`list()`函数，以及`new_list`，这将掩盖包含它的函数名称。或者是`list1`或`listey`或`mylist`，但没有一个特别令人满意。
