- en: 3\. Functions#
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3. 函数#
- en: 原文：[https://allendowney.github.io/ThinkPython/chap03.html](https://allendowney.github.io/ThinkPython/chap03.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://allendowney.github.io/ThinkPython/chap03.html](https://allendowney.github.io/ThinkPython/chap03.html)
- en: In the previous chapter we used several functions provided by Python, like `int`
    and `float`, and a few provided by the `math` module, like `sqrt` and `pow`. In
    this chapter, you will learn how to create your own functions and run them. And
    we’ll see how one function can call another. As examples, we’ll display lyrics
    from Monty Python songs. These silly examples demonstrate an important feature
    – the ability to write your own functions is the foundation of programming.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用了 Python 提供的几个函数，比如 `int` 和 `float`，以及 `math` 模块提供的一些函数，如 `sqrt` 和
    `pow`。在这一章中，你将学习如何创建自己的函数并运行它们。我们还将展示一个函数如何调用另一个函数。作为示例，我们将展示《蒙提·派森》歌曲的歌词。这些搞笑的例子展示了一个重要特性——编写自己函数的能力是编程的基础。
- en: This chapter also introduces a new statement, the `for` loop, which is used
    to repeat a computation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还介绍了一个新的语句——`for` 循环，它用于重复计算。
- en: 3.1\. Defining new functions[#](#defining-new-functions "Link to this heading")
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.1. 定义新函数[#](#defining-new-functions "Link to this heading")
- en: 'A **function definition** specifies the name of a new function and the sequence
    of statements that run when the function is called. Here’s an example:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**函数定义**指定了一个新函数的名称以及在调用该函数时运行的语句序列。下面是一个例子：'
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`def` is a keyword that indicates that this is a function definition. The name
    of the function is `print_lyrics`. Anything that’s a legal variable name is also
    a legal function name.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`def` 是一个关键字，表示这是一个函数定义。函数的名字是 `print_lyrics`。任何合法的变量名也是合法的函数名。'
- en: The empty parentheses after the name indicate that this function doesn’t take
    any arguments.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 函数名后面的空括号表示该函数不接受任何参数。
- en: The first line of the function definition is called the **header** – the rest
    is called the **body**. The header has to end with a colon and the body has to
    be indented. By convention, indentation is always four spaces. The body of this
    function is two print statements; in general, the body of a function can contain
    any number of statements of any kind.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 函数定义的第一行叫做 **头部**，其余部分称为 **函数体**。头部必须以冒号结束，函数体必须缩进。按惯例，缩进通常使用四个空格。这个函数的体部分包含两个打印语句；通常，函数体可以包含任意数量的语句。
- en: Defining a function creates a **function object**, which we can display like
    this.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个函数会创建一个 **函数对象**，我们可以像这样显示它。
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The output indicates that `print_lyrics` is a function that takes no arguments.
    `__main__` is the name of the module that contains `print_lyrics`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 输出表明 `print_lyrics` 是一个不接受任何参数的函数。`__main__` 是包含 `print_lyrics` 的模块名。
- en: Now that we’ve defined a function, we can call it the same way we call built-in
    functions.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了一个函数，我们可以像调用内建函数一样调用它。
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When the function runs, it executes the statements in the body, which display
    the first two lines of “The Lumberjack Song”.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当函数运行时，它会执行函数体中的语句，这些语句会显示《伐木工歌》的前两行。
- en: 3.2\. Parameters[#](#parameters "Link to this heading")
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.2. 参数[#](#parameters "Link to this heading")
- en: Some of the functions we have seen require arguments; for example, when you
    call `abs` you pass a number as an argument. Some functions take more than one
    argument; for example, `math.pow` takes two, the base and the exponent.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到的一些函数需要参数；例如，当你调用 `abs` 时，你传递一个数字作为参数。一些函数需要多个参数；例如，`math.pow` 需要两个参数，一个是底数，另一个是指数。
- en: Here is a definition for a function that takes an argument.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个接收参数的函数定义。
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The variable name in parentheses is a **parameter**. When the function is called,
    the value of the argument is assigned to the parameter. For example, we can call
    `print_twice` like this.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 括号中的变量名是一个 **参数**。当调用函数时，参数会被赋予实参的值。例如，我们可以这样调用 `print_twice`。
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Running this function has the same effect as assigning the argument to the parameter
    and then executing the body of the function, like this.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个函数的效果与将参数赋值给参数变量，然后执行函数体相同，如下所示。
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can also use a variable as an argument.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用一个变量作为参数。
- en: '[PRE10]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this example, the value of `line` gets assigned to the parameter `string`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`line` 的值被赋给了参数 `string`。
- en: 3.3\. Calling functions[#](#calling-functions "Link to this heading")
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.3. 调用函数[#](#calling-functions "Link to this heading")
- en: Once you have defined a function, you can use it inside another function. To
    demonstrate, we’ll write functions that print the lyrics of “The Spam Song” ([https://www.songfacts.com/lyrics/monty-python/the-spam-song](https://www.songfacts.com/lyrics/monty-python/the-spam-song)).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了一个函数，你就可以在另一个函数中使用它。为了演示，我们将编写打印《Spam歌》歌词的函数([https://www.songfacts.com/lyrics/monty-python/the-spam-song](https://www.songfacts.com/lyrics/monty-python/the-spam-song))。
- en: Spam, Spam, Spam, Spam,
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Spam，Spam，Spam，Spam，
- en: Spam, Spam, Spam, Spam,
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Spam，Spam，Spam，Spam，
- en: Spam, Spam,
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Spam，Spam，
- en: (Lovely Spam, Wonderful Spam!)
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: （可爱的Spam，神奇的Spam！）
- en: Spam, Spam,
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Spam，Spam，
- en: We’ll start with the following function, which takes two parameters.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从以下函数开始，它接受两个参数。
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We can use this function to print the first line of the song, like this.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这个函数来打印歌曲的第一行，像这样。
- en: '[PRE13]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: To display the first two lines, we can define a new function that uses `repeat`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示前两行，我们可以定义一个新的函数，使用`repeat`。
- en: '[PRE15]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: And then call it like this.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后像这样调用它。
- en: '[PRE16]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: To display the last three lines, we can define another function, which also
    uses `repeat`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示最后三行，我们可以定义另一个函数，这个函数同样使用`repeat`。
- en: '[PRE18]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Finally, we can bring it all together with one function that prints the whole
    verse.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以通过一个函数将所有内容组合起来，打印出整首诗。
- en: '[PRE21]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When we run `print_verse`, it calls `first_two_lines`, which calls `repeat`,
    which calls `print`. That’s a lot of functions.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行`print_verse`时，它调用了`first_two_lines`，而`first_two_lines`又调用了`repeat`，`repeat`则调用了`print`。这涉及了很多函数。
- en: Of course, we could have done the same thing with fewer functions, but the point
    of this example is to show how functions can work together.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们本可以用更少的函数做同样的事情，但这个示例的重点是展示函数如何协同工作。
- en: 3.4\. Repetition[#](#repetition "Link to this heading")
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.4\. 重复[#](#repetition "Link to this heading")
- en: If we want to display more than one verse, we can use a `for` statement. Here’s
    a simple example.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想显示多于一段的歌词，可以使用`for`语句。下面是一个简单的示例。
- en: '[PRE24]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The first line is a header that ends with a colon. The second line is the body,
    which has to be indented.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行是以冒号结尾的头部。第二行是主体，需要缩进。
- en: The header starts with the keyword `for`, a new variable named `i`, and another
    keyword, `in`. It uses the `range` function to create a sequence of two values,
    which are `0` and `1`. In Python, when we start counting, we usually start from
    `0`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 头部以关键字`for`开始，后面跟着一个名为`i`的新变量和另一个关键字`in`。它使用`range`函数创建一个包含两个值的序列，这两个值分别是`0`和`1`。在Python中，当我们开始计数时，通常是从`0`开始的。
- en: When the `for` statement runs, it assigns the first value from `range` to `i`
    and then runs the `print` function in the body, which displays `0`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当`for`语句运行时，它将`range`中的第一个值赋给`i`，然后在主体中运行`print`函数，显示`0`。
- en: When it gets to the end of the body, it loops back around to the header, which
    is why this statement is called a **loop**. The second time through the loop,
    it assigns the next value from `range` to `i`, and displays it. Then, because
    that’s the last value from `range`, the loop ends.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序执行到主体末尾时，它会回到头部，这就是为什么这个语句被称为**循环**。第二次进入循环时，它将`range`中的下一个值赋给`i`并显示出来。然后，由于这是`range`中的最后一个值，循环结束。
- en: Here’s how we can use a `for` loop to print two verses of the song.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何使用`for`循环打印歌曲的两段歌词。
- en: '[PRE26]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You can put a `for` loop inside a function. For example, `print_n_verses` takes
    a parameter named `n`, which has to be an integer, and displays the given number
    of verses.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在一个函数内部放置一个`for`循环。例如，`print_n_verses`接受一个名为`n`的参数，该参数必须是整数，并显示给定数量的诗句。
- en: '[PRE28]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In this example, we don’t use `i` in the body of the loop, but there has to
    be a variable name in the header anyway.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们没有在循环主体中使用`i`，但头部仍然需要有一个变量名。
- en: 3.5\. Variables and parameters are local[#](#variables-and-parameters-are-local
    "Link to this heading")
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.5\. 变量和参数是局部的[#](#variables-and-parameters-are-local "Link to this heading")
- en: When you create a variable inside a function, it is **local**, which means that
    it only exists inside the function. For example, the following function takes
    two arguments, concatenates them, and prints the result twice.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在函数内部创建一个变量时，它是**局部的**，意味着它只在函数内部存在。例如，下面的函数接受两个参数，将它们连接起来并打印结果两次。
- en: '[PRE29]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Here’s an example that uses it:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用它的示例：
- en: '[PRE30]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'When `cat_twice` runs, it creates a local variable named `cat`, which is destroyed
    when the function ends. If we try to display it, we get a `NameError`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当`cat_twice`运行时，它会创建一个名为`cat`的局部变量，而该变量在函数结束时被销毁。如果我们尝试显示它，就会得到一个`NameError`：
- en: '[PRE32]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Outside of the function, `cat` is not defined.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数外部，`cat`是未定义的。
- en: Parameters are also local. For example, outside `cat_twice`, there is no such
    thing as `part1` or `part2`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 参数也是局部的。例如，在`cat_twice`外部，没有`part1`或`part2`这样的东西。
- en: 3.6\. Stack diagrams[#](#stack-diagrams "Link to this heading")
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.6\. 堆栈图[#](#stack-diagrams "Link to this heading")
- en: To keep track of which variables can be used where, it is sometimes useful to
    draw a **stack diagram**. Like state diagrams, stack diagrams show the value of
    each variable, but they also show the function each variable belongs to.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟踪哪些变量可以在哪些地方使用，有时画一个**堆栈图**会很有用。像状态图一样，堆栈图展示了每个变量的值，但它们还展示了每个变量所属的函数。
- en: Each function is represented by a **frame**. A frame is a box with the name
    of a function on the outside and the parameters and local variables of the function
    on the inside.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 每个函数都由一个**框架**表示。框架是一个外面写着函数名称、里面包含函数参数和局部变量的框。
- en: Here’s the stack diagram for the previous example.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是上一个例子的堆栈图。
- en: '![_images/02b6ddc296c3c51396cc7c1a916aa9f4ea1bc5ed61b9fe10d6ec63e9b928fc68.png](../Images/76dde745ad063790ee3d6fa39fb2bf64.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![_images/02b6ddc296c3c51396cc7c1a916aa9f4ea1bc5ed61b9fe10d6ec63e9b928fc68.png](../Images/76dde745ad063790ee3d6fa39fb2bf64.png)'
- en: The frames are arranged in a stack that indicates which function called which,
    and so on. Reading from the bottom, `print` was called by `print_twice`, which
    was called by `cat_twice`, which was called by `__main__` – which is a special
    name for the topmost frame. When you create a variable outside of any function,
    it belongs to `__main__`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这些框架按照堆栈的顺序排列，表示哪个函数调用了哪个函数，依此类推。从底部开始，`print`由`print_twice`调用，`print_twice`由`cat_twice`调用，`cat_twice`由`__main__`调用——这是最上层框架的一个特殊名称。当你在任何函数外部创建一个变量时，它属于`__main__`。
- en: In the frame for `print`, the question mark indicates that we don’t know the
    name of the parameter. If you are curious, ask a virtual assistant, “What are
    the parameters of the Python print function?”
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在`print`的框架中，问号表示我们不知道参数的名称。如果你感到好奇，可以问虚拟助手：“Python的print函数的参数是什么？”
- en: 3.7\. Tracebacks[#](#tracebacks "Link to this heading")
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.7\. 追踪栈[#](#tracebacks "Link to this heading")
- en: When a runtime error occurs in a function, Python displays the name of the function
    that was running, the name of the function that called it, and so on, up the stack.
    To see an example, I’ll define a version of `print_twice` that contains an error
    – it tries to print `cat`, which is a local variable in another function.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当函数中发生运行时错误时，Python会显示正在运行的函数的名称、调用它的函数的名称，依此类推，直到堆栈的顶部。为了看到一个例子，我将定义一个包含错误的`print_twice`版本——它试图打印`cat`，这是另一个函数中的局部变量。
- en: '[PRE34]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Now here’s what happens when we run `cat_twice`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下运行`cat_twice`时会发生什么。
- en: '[PRE35]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The error message includes a **traceback**, which shows the function that was
    running when the error occurred, the function that called it, and so on. In this
    example, it shows that `cat_twice` called `print_twice`, and the error occurred
    in a `print_twice`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 错误信息包含一个**追踪栈**，显示了错误发生时正在运行的函数、调用该函数的函数等。在这个例子中，它显示了`cat_twice`调用了`print_twice`，并且错误发生在`print_twice`中。
- en: The order of the functions in the traceback is the same as the order of the
    frames in the stack diagram. The function that was running is at the bottom.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 追踪栈中函数的顺序与堆栈图中框架的顺序相同。正在运行的函数位于底部。
- en: 3.8\. Why functions?[#](#why-functions "Link to this heading")
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.8\. 为什么要使用函数？[#](#why-functions "Link to this heading")
- en: 'It may not be clear yet why it is worth the trouble to divide a program into
    functions. There are several reasons:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 可能还不清楚为什么将程序划分为多个函数值得花费精力。这里有几个原因：
- en: Creating a new function gives you an opportunity to name a group of statements,
    which makes your program easier to read and debug.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新函数让你有机会为一组语句命名，这使得程序更易于阅读和调试。
- en: Functions can make a program smaller by eliminating repetitive code. Later,
    if you make a change, you only have to make it in one place.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数可以通过消除重复的代码使程序变得更小。以后，如果需要修改，你只需在一个地方做出更改。
- en: Dividing a long program into functions allows you to debug the parts one at
    a time and then assemble them into a working whole.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将一个长程序拆分成多个函数可以让你逐个调试各个部分，然后将它们组合成一个完整的工作程序。
- en: Well-designed functions are often useful for many programs. Once you write and
    debug one, you can reuse it.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计良好的函数通常对许多程序都有用。一旦你写并调试了一个函数，你可以重用它。
- en: 3.9\. Debugging[#](#debugging "Link to this heading")
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.9\. 调试[#](#debugging "Link to this heading")
- en: Debugging can be frustrating, but it is also challenging, interesting, and sometimes
    even fun. And it is one of the most important skills you can learn.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 调试可能令人沮丧，但它也充满挑战、有趣，有时甚至是令人愉快的。而且它是你可以学习的最重要的技能之一。
- en: In some ways debugging is like detective work. You are given clues and you have
    to infer the events that led to the results you see.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 从某种意义上说，调试就像侦探工作。你会得到线索，然后推测出导致你看到的结果的事件。
- en: Debugging is also like experimental science. Once you have an idea about what
    is going wrong, you modify your program and try again. If your hypothesis was
    correct, you can predict the result of the modification, and you take a step closer
    to a working program. If your hypothesis was wrong, you have to come up with a
    new one.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 调试也像实验科学。一旦你对发生了什么有了一些想法，你就修改程序并再次尝试。如果你的假设是正确的，你就能预测修改的结果，并且离一个可用的程序更近一步。如果假设错了，你就得提出新的假设。
- en: For some people, programming and debugging are the same thing; that is, programming
    is the process of gradually debugging a program until it does what you want. The
    idea is that you should start with a working program and make small modifications,
    debugging them as you go.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对某些人来说，编程和调试是同一回事；也就是说，编程是逐步调试程序，直到它按你想要的方式工作。这个想法是你应该从一个能正常工作的程序开始，然后逐步进行小的修改，并在修改时调试它们。
- en: If you find yourself spending a lot of time debugging, that is often a sign
    that you are writing too much code before you start tests. If you take smaller
    steps, you might find that you can move faster.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己花了很多时间调试，这通常是一个信号，说明你在开始测试之前写了太多的代码。如果你采取更小的步骤，你可能会发现自己能更快地前进。
- en: 3.10\. Glossary[#](#glossary "Link to this heading")
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.10\. 词汇表[#](#glossary "链接到该标题")
- en: '**function definition:** A statement that creates a function.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**function definition:** 创建函数的语句。'
- en: '**header:** The first line of a function definition.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**header:** 函数定义的第一行。'
- en: '**body:** The sequence of statements inside a function definition.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**body:** 函数定义内部的语句序列。'
- en: '**function object:** A value created by a function definition. The name of
    the function is a variable that refers to a function object.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**function object:** 通过函数定义创建的值。函数的名称是一个引用函数对象的变量。'
- en: '**parameter:** A name used inside a function to refer to the value passed as
    an argument.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**parameter:** 在函数内部用于引用作为参数传递的值的名称。'
- en: '**loop:** A statement that runs one or more statements, often repeatedly.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**loop:** 一个运行一个或多个语句的语句，通常是重复的。'
- en: '**local variable:** A variable defined inside a function, and which can only
    be accessed inside the function.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**local variable:** 在函数内部定义的变量，只能在函数内部访问。'
- en: '**stack diagram:** A graphical representation of a stack of functions, their
    variables, and the values they refer to.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**stack diagram:** 函数堆栈的图形表示，显示了它们的变量以及它们引用的值。'
- en: '**frame:** A box in a stack diagram that represents a function call. It contains
    the local variables and parameters of the function.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**frame:** 堆栈图中的一个框，表示一个函数调用。它包含该函数的局部变量和参数。'
- en: '**traceback:** A list of the functions that are executing, printed when an
    exception occurs.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**traceback:** 当发生异常时打印的正在执行的函数列表。'
- en: 3.11\. Exercises[#](#exercises "Link to this heading")
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.11\. 练习[#](#exercises "链接到该标题")
- en: '[PRE39]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 3.11.1\. Ask a virtual assistant[#](#ask-a-virtual-assistant "Link to this heading")
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.11.1\. 向虚拟助手提问[#](#ask-a-virtual-assistant "链接到该标题")
- en: The statements in a function or a `for` loop are indented by four spaces, by
    convention. But not everyone agrees with that convention. If you are curious about
    the history of this great debate, ask a virtual assistant to “tell me about spaces
    and tabs in Python”.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 函数或`for`循环中的语句按照约定缩进四个空格。但并非所有人都同意这一约定。如果你对这一伟大的争论的历史感到好奇，可以让虚拟助手“告诉我关于Python中的空格和制表符”。
- en: Virtual assistant are pretty good at writing small functions.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟助手在编写小函数方面非常擅长。
- en: Ask your favorite VA to “Write a function called repeat that takes a string
    and an integer and prints the string the given number of times.”
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请让你喜欢的虚拟助手“编写一个名为repeat的函数，它接收一个字符串和一个整数，并将该字符串打印指定的次数。”
- en: If the result uses a `for` loop, you could ask, “Can you do it without a for
    loop?”
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果结果使用了`for`循环，你可以问：“能不能不用`for`循环？”
- en: Pick any other function in this chapter and ask a VA to write it. The challenge
    is to describe the function precisely enough to get what you want. Use the vocabulary
    you have learned so far in this book.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本章中任选一个其他函数，并请虚拟助手编写它。挑战在于准确描述函数，以便得到你想要的结果。使用你在本书中学到的词汇。
- en: Virtual assistants are also pretty good at debugging functions.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟助手在调试函数方面也非常擅长。
- en: Ask a VA what’s wrong with this version of `print_twice`.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 询问VA，这个`print_twice`版本有什么问题。
- en: '[PRE41]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: And if you get stuck on any of the exercises below, consider asking a VA for
    help.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在以下任何练习中遇到困难，请考虑向VA寻求帮助。
- en: 3.11.2\. Exercise[#](#exercise "Link to this heading")
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.11.2\. 练习[#](#exercise "Link to this heading")
- en: Write a function named `print_right` that takes a string named `text` as a parameter
    and prints the string with enough leading spaces that the last letter of the string
    is in the 40th column of the display.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`print_right`的函数，它以名为`text`的字符串作为参数，并打印字符串，使得字符串的最后一个字母位于显示的第40列。
- en: 'Hint: Use the `len` function, the string concatenation operator (`+`) and the
    string repetition operator (`*`).'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：使用`len`函数、字符串连接运算符（`+`）和字符串重复运算符（`*`）。
- en: Here’s an example that shows how it should work.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例展示它应该如何工作。
- en: '[PRE42]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 3.11.3\. Exercise[#](#id1 "Link to this heading")
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.11.3\. 练习[#](#id1 "Link to this heading")
- en: Write a function called `triangle` that takes a string and an integer and draws
    a pyramid with the given height, made up using copies of the string. Here’s an
    example of a pyramid with `5` levels, using the string `'L'`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`triangle`的函数，它接受一个字符串和一个整数，并绘制一个具有给定高度的金字塔，由字符串的副本组成。这里有一个使用字符串`'L'`的5级金字塔的示例。
- en: '[PRE44]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 3.11.4\. Exercise[#](#id2 "Link to this heading")
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.11.4\. 练习[#](#id2 "Link to this heading")
- en: Write a function called `rectangle` that takes a string and two integers and
    draws a rectangle with the given width and height, made up using copies of the
    string. Here’s an example of a rectangle with width `5` and height `4`, made up
    of the string `'H'`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`rectangle`的函数，它接受一个字符串和两个整数，并绘制一个具有给定宽度和高度的矩形，由字符串的副本组成。这里有一个宽度为`5`，高度为`4`的矩形的示例，由字符串`'H'`组成。
- en: '[PRE46]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 3.11.5\. Exercise[#](#id3 "Link to this heading")
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.11.5\. 练习[#](#id3 "Link to this heading")
- en: 'The song “99 Bottles of Beer” starts with this verse:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 歌曲“99瓶啤酒”以这首诗歌开始：
- en: 99 bottles of beer on the wall
  id: totrans-153
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 墙上有99瓶啤酒
- en: 99 bottles of beer
  id: totrans-154
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 99瓶啤酒
- en: Take one down, pass it around
  id: totrans-155
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 拿一个下来，传递它
- en: 98 bottles of beer on the wall
  id: totrans-156
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 墙上有98瓶啤酒
- en: Then the second verse is the same, except that it starts with 98 bottles and
    ends with 97\. The song continues – for a very long time – until there are 0 bottles
    of beer.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然后第二节是一样的，只是从98瓶开始，以97结束。歌曲会继续——很长时间——直到没有啤酒为止。
- en: Write a function called `bottle_verse` that takes a number as a parameter and
    displays the verse that starts with the given number of bottles.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`bottle_verse`的函数，它以一个数字作为参数，并显示以给定数量的瓶子开头的诗句。
- en: 'Hint: Consider starting with a function that can print the first, second, or
    last line of the verse, and then use it to write `bottle_verse`.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：考虑从能够打印诗歌的第一、第二或最后一行的函数开始，然后使用它来编写`bottle_verse`。
- en: Use this function call to display the first verse.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个函数调用来显示第一节。
- en: '[PRE48]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: If you want to print the whole song, you can use this `for` loop, which counts
    down from `99` to `1`. You don’t have to completely understand this example—we’ll
    learn more about `for` loops and the `range` function later.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想打印整首歌，可以使用这个`for`循环，它从`99`数到`1`。你不必完全理解这个例子——我们稍后会更详细地了解`for`循环和`range`函数。
- en: '[PRE50]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[Think Python: 3rd Edition](https://allendowney.github.io/ThinkPython/index.html)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[Think Python: 3rd Edition](https://allendowney.github.io/ThinkPython/index.html)'
- en: Copyright 2024 [Allen B. Downey](https://allendowney.com)
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 版权所有2024年 [Allen B. Downey](https://allendowney.com)
- en: 'Code license: [MIT License](https://mit-license.org/)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 代码许可：[MIT许可证](https://mit-license.org/)
- en: 'Text license: [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 文本许可证：[知识共享署名-非商业性使用-相同方式共享4.0国际许可协议](https://creativecommons.org/licenses/by-nc-sa/4.0/)
