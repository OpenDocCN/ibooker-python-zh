- en: 'Chapter 1\. Why Python?: *Similar But Different*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。为什么选择Python？：*相似但不同*
- en: '![Image](assets/ch00-01-01.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch00-01-01.png)'
- en: '**Python starts counting from zero, which should sound familiar.** In fact,
    Python has a lot in **common** with other programming languages. There’s **variables**,
    **loops**, **conditionals**, **functions**, and the like. In this, our opening
    chapter, we take you on a **high-level** **whistle-stop** **tour** of Python’s
    basics, introducing the language without getting too much into the weeds. You’ll
    learn how to **create** and **run** code within VS Code and Jupyter Notebook.
    You’ll see how lots of programming functionality comes **built-in** to Python,
    which you’ll **leverage** to get your job done. You’ll also learn that although
    Python shares a lot of the ideas with other programming languages, how they manifest
    in your Python code can be, well, **different**. Now, don’t get the wrong idea
    here: we’re talking different **good**, not different *bad*. Read on to learn
    more…'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python从零开始计数，这听起来应该很熟悉。** 实际上，Python与其他编程语言有很多**共同之处**。有**变量**、**循环**、**条件**、**函数**等等。在我们的开篇章节中，我们带你快速浏览Python的基础知识，介绍语言而不深入细节。你将学会如何在VS
    Code和Jupyter Notebook中**创建**和**运行**代码。你会看到很多编程功能已经**内置**到Python中，你将**利用**它们完成工作。你还会了解到虽然Python与其他编程语言分享了很多想法，但它们在你的Python代码中的体现可能会有所不同。现在，不要误解：我们说的是不同的**好**，而不是不同的*坏*。继续阅读了解更多…'
- en: '![Image](assets/ch00-04-01.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch00-04-01.png)'
- en: '**For sure. But, that’s not all.**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**当然了。但，这还不是全部。**'
- en: As the interview with Python confirms, there’s a bunch of reasons for Python’s
    popularity. We’ve listed the takeaways we gleaned from the interview at the bottom
    of this page.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 正如与Python的访谈所证实的那样，有很多理由使Python受欢迎。我们列出了我们从访谈中得到的要点在本页底部。
- en: There are, of course, other reasons to consider Python as your next favorite
    programming language, but our list is enough to be going on with for now.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，还有其他理由可以考虑Python作为你下一个最喜爱的编程语言，但我们的列表已经足够现在使用了。
- en: Let’s spend some time considering these takeaways in more detail. Once you’ve
    surveyed our list, grab a pencil – yes, a *pencil* – and meet us at the top of
    the next page!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间更详细地考虑这些要点。一旦你调查完我们的列表，拿一支铅笔——是的，一支*铅笔*——到下一页的顶端来见我们！
- en: '![Images](assets/1-circle.png) **Python code is easy to read.**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](assets/1-circle.png) **Python代码易于阅读。**'
- en: '![Images](assets/2-circle.png) **Python comes with a Standard Library.**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](assets/2-circle.png) **Python带有标准库。**'
- en: '![Images](assets/3-circle.png) **Python has practical, powerful, and generic
    built-in functions (BIFs).**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](assets/3-circle.png) **Python拥有实用、强大和通用的内置函数（BIFs）。**'
- en: '![Images](assets/4-circle.png) **Python comes with built-in data structures.**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](assets/4-circle.png) **Python带有内置数据结构。**'
- en: '![Images](assets/5-circle.png) **Python has the Python Package Index (PyPI).**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](assets/5-circle.png) **Python拥有Python包索引(PyPI)。**'
- en: '![Images](assets/6-circle.png) **Python doesn’t take itself too seriously.**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](assets/6-circle.png) **Python并不太认真。**'
- en: Note
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Don’t underestimate the importance of this last one.**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**不要低估最后一个的重要性。**'
- en: Getting ready to run some code
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备好运行一些代码
- en: There’s a tiny bit of house-keeping to work through *before* you get run any
    code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在你运行任何代码之前，还有一点点前期工作要做。
- en: To help keep things organized, let’s create a folder on your computer called
    `Learning`. You can put this folder anywhere on your hard-drive, so long as you
    remember *where* you put it, as you are going to use it *all the time*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助保持事情井井有条，让我们在你的计算机上创建一个名为`Learning`的文件夹。你可以把这个文件夹放在硬盘的任何地方，只要你记得你把它放在了*哪里*，因为你*经常*会用到它。
- en: With your `Learning` folder created, start VS Code.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了你的`Learning`文件夹后，启动VS Code。
- en: '![Image](assets/ch00-07-01.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch00-07-01.png)'
- en: Note
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Don’t feel bad if you skipped the Intro. You aren’t the first to do this,
    and won’t be the last. ![Image](assets/smile.png)**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你跳过了介绍而感到难过，不要紧。你不是第一个这样做的，也不会是最后一个。 ![图片](assets/smile.png)**'
- en: '![Image](assets/ch00-07-03.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch00-07-03.png)'
- en: Each time you work with VS Code in this book, you’ll open your `Learning` folder
    as needed. **Do this now before continuing**.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 每次在本书中使用VS Code时，根据需要打开你的`Learning`文件夹。**现在就这样做**。
- en: Preparing for your first Jupyter experience
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为你的第一次Jupyter体验做准备
- en: 'OK. You’re running VS Code, and you’ve opened your `Learning` folder. Let’s
    create a new notebook by first selecting the **File** menu, then selecting the
    **New File…** menu option. You’ll be presented with three choices:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。您正在运行VS Code，并且已打开了您的`Learning`文件夹。首先选择**文件**菜单，然后选择**新建文件…**菜单选项来创建一个新的笔记本。您将看到三个选择：
- en: '![Image](assets/ch00-08-01.png)![Image](assets/ch00-08-02.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch00-08-01.png)![图片](assets/ch00-08-02.png)'
- en: 'VS Code creates and opens a new, *untitled* notebook called `Untitled-1.ipynb`,
    which appears on screen, and looks something like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code创建并打开了一个新的、*无标题*的笔记本，称为`Untitled-1.ipynb`，它会出现在屏幕上，大致如下所示：
- en: '![Image](assets/ch00-08-03.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch00-08-03.png)'
- en: Drum roll, please. You’re now ready to type in and run some Python code.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 鼓声响起，您现在可以输入并运行一些Python代码了。
- en: '![Image](assets/ch00-09-03.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch00-09-03.png)'
- en: '**No need. Just press Shift+Enter.**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**没必要，只需按下Shift+Enter即可。**'
- en: Jupyter comes with keyboard shortcuts designed to make your interactions with
    your notebook as easy as… say… pressing the **Shift** and **Enter** keys *together*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter 提供了设计精良的键盘快捷键，使您与笔记本的交互变得轻松，比如同时按下**Shift**和**Enter**键。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**When you see “Shift+Enter” in this book, press and hold down the Shift key,
    then tap the Enter key (before releasing both).**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**当您在本书中看到“Shift+Enter”时，请按住Shift键，然后轻按Enter键（在释放两者之前）。**'
- en: Pressing Shift+Enter runs the cell’s code
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按下Shift+Enter运行单元格中的代码
- en: 'When you press **Shift+Enter**, the code in the currently selected cell runs.
    The *focus* then moves to the next cell in your notebook. If no “next cell” exists,
    Jupyter creates a new one for you:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当您按下**Shift+Enter**时，当前选定单元格中的代码将运行。然后*焦点*会移动到笔记本中的下一个单元格。如果不存在“下一个单元格”，Jupyter会为您创建一个新的单元格：
- en: '![Image](assets/ch00-10-01.png)![Image](assets/ch00-10-02.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch00-10-01.png)![图片](assets/ch00-10-02.png)'
- en: '**The code ran, but produced no output.**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码运行了，但没有产生输出。**'
- en: Those three lines of code are examples of Python’s variable assignment. The
    name of the variable is on the left of the `**=**` operator, and its value’s on
    the right.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这三行代码是Python变量赋值的示例。变量的名称在`**=**`运算符的左侧，其值在右侧。
- en: Those variable’s values are *defined* by this code.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变量的值由此代码*定义*。
- en: '![Image](assets/ch00-12-03.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch00-12-03.png)'
- en: '**There’s still no output, but this code is executing.**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**仍然没有输出，但是此代码正在执行。**'
- en: That **import** statement has pulled-in the `random` library, and the **def**
    statement has defined the `draw` function. Let’s take that function for a spin
    to see what happens...
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**导入**语句已引入`random`库，并且**def**语句已定义了`draw`函数。让我们运行一下这个函数，看看会发生什么…'
- en: So... Python code really is easy to read... and run
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 所以… Python代码确实很容易阅读… 和运行
- en: Besides Jupyter, there are other ways to run Python code, and you’ll learn about
    some of them as you work through this book. However, using VS Code with the Jupyter
    extension is – in our view – the *perfect* way to read, run, experiment, and play
    with Python code when first learning the language. So get ready to spend *a lot*
    of time in Jupyter and VS Code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Jupyter，还有其他运行Python代码的方式，随着您在本书中的学习，您将了解其中一些方式。但是，在我们看来，使用带有Jupyter扩展的VS
    Code是学习该语言时阅读、运行、实验和玩耍Python代码的*完美*方式。所以准备好在Jupyter和VS Code中*花费大量时间*。
- en: Before moving on, take a moment to select **File** then **Save** from the VS
    Code menu to save your notebook under the name `Cards.ipynb`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 继续前进之前，请花一点时间从VS Code菜单中选择**文件**然后选择**保存**，将您的笔记本保存为`Cards.ipynb`。
- en: Note
  id: totrans-48
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Do this now!**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**现在就这么做！**'
- en: What if you want a bunch of cards?
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果您想要一堆卡片怎么办？
- en: Your `draw` function is a great start, drawing one card from the deck each time
    the function is executed. But, what if you want to draw five cards? Or ten? Or
    twenty? Or all fifty-two, for that matter?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您的`draw`函数是一个很好的开始，每次执行该函数时从牌堆中抽取一张牌。但是，如果您想抽取五张牌呢？或者十张？或者二十张？或者所有五十二张呢？
- en: 'Although you’d be a little off your head to suggest manually invoking your
    `draw` function as many times as is needed, most programmers instead reach for
    a loop. You’ll learn more about Python’s loops later in this book. For now, here’s
    how you’d use Python’s **for** loop to execute some code a fixed number of times:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然手动多次调用您的`draw`函数可能有点蠢，大多数程序员会选择使用循环。稍后在本书中您将更多了解Python的循环。现在，这是如何使用Python的**for**循环执行一些代码固定次数的方法：
- en: '![Image](assets/ch00-14-01.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch00-14-01.png)'
- en: This all looks fine, in that the **for** loop’s indented block ran five times.
    But, can you spot a problem with the output?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从表面上看，**for**循环的缩进块运行了五次。但是，你能发现输出中的问题吗？
- en: '![Image](assets/ch00-15-01.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch00-15-01.png)'
- en: '**Yes, the loop code drew the same card twice.**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**是的，循环代码画了相同的牌两次。**'
- en: Of course, the assumption here is that a drawn card is not put pack into the
    deck of cards. So... unless your playing with “magic cards” (or someone’s up to
    no good), the fact that this code randomly selects the same card more than once
    isn’t likely what’s required.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这里的假设是抽取的牌不会放回扑克牌堆中。所以... 除非你在玩“魔术牌”（或者有人在搞破坏），否则这段代码随机选择相同的牌不太可能是所需的。
- en: If your goal is to model a deck of cards, the current `draw` function isn’t
    up to snuff, is it?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的目标是模拟一副扑克牌，那么当前的`draw`函数显然不够格，对吧？
- en: 'The Big 4: list, tuple, dictionary, and set'
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**The Big 4: list, tuple, dictionary, and set**'
- en: Python’s excellent built-in support for data structures is legendary, and is
    often cited as the main reason most Python programmers *love* Python.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Python对数据结构的出色内置支持是传奇的，并且通常被认为是大多数Python程序员*热爱*Python的主要原因。
- en: As this is your opening chapter, we’re not going to overload you with any sort
    of in-depth discussion of these data structures right now. There are lots of pages
    (entire chapters, in fact) dedicated to *The Big 4* later in this book.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 作为你的开篇章节，我们现在不会给你过多深入讨论这些数据结构。后面本书有很多页（实际上是整整的章节）专门讲解*The Big 4*。
- en: 'Although we haven’t called out their use specifically, you have already encountered
    lists *and* tuples. While rather cheekily referring to these as *arrays* earlier,
    each of these are in fact a bona fide, honest to goodness, Python **list**:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们还没有特别强调它们的使用，但你已经遇到了列表*和*元组。虽然我们稍早有些狡猾地称它们为*数组*，但它们确实是Python中的真正，诚实可靠的**列表**：
- en: '![Image](assets/ch00-16-01.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch00-16-01.png)'
- en: 'You’ve also seen your fair share of tuples, too. Every time you invoke the
    `draw` function, it gives you back a **tuple**:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你也见识过不少元组。每次调用`draw`函数时，它都会给你一个**元组**：
- en: '![Image](assets/ch00-16-02.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch00-16-02.png)'
- en: You’d be forgiven for thinking tuples look at little weird, and we’d have to
    agree that we think they look a little weird, too. Don’t let this worry you.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会觉得元组看起来有点奇怪，我们也得承认我们也觉得它们看起来有点奇怪。不过，不要让这担心你。
- en: You’ll learn more about both lists and tuples later in this book. Although both
    lists and tuples have their uses, they are not a great fit when it comes to modelling
    a deck of cards. Some other data structure is needed here. But, which one?
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 本书后面你将更多地了解列表和元组。尽管列表和元组各有其用途，但在模拟一副扑克牌时，它们并不是一个很好的选择。这里需要一些其他的数据结构。但是，哪一个呢？
- en: Note
  id: totrans-68
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Hint: There is a big clue in the title of this page.**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示：这一页的标题里有一个重要的线索。**'
- en: Model your deck of cards with a...
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用什么数据结构来模拟你的扑克牌堆呢？
- en: Although Python’s **dictionary** data structure is *hugely* popular, it primarily
    provides for lookup functionality (which features *lots* later in this book).
    Despite this, and like a list and tuple, a dictionary isn’t the best fit for modelling
    your deck of cards.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Python的**字典**数据结构非常受欢迎，但它主要提供查找功能（这个特性稍后在本书中将会有大量介绍）。尽管如此，和列表以及元组一样，字典并不是模拟你的扑克牌堆的最佳选择。
- en: Which leaves you with **set**.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这留给你的是**set**。
- en: 'Sets in Python are likes sets from Math class: they contain a collection of
    unique values where duplicates are *not* allowed. As the code snippet below shows,
    when you use a Python set, you inherit a method called **add** which – brace yourself
    – adds a item to an existing set.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，集合就像数学课上的集合：它们包含一组唯一的值，不允许重复。正如下面的代码片段展示的那样，当你使用Python集合时，你会继承一个叫做**add**的方法，这个方法
    - 准备好了吗 - 将一个项目添加到现有集合中。
- en: Take a look at this loop which uses the three lists from the previous page to
    construct a deck of cards.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这个循环，它使用上一页的三个列表构建一副扑克牌。
- en: '![Image](assets/ch00-17-01.png)![Image](assets/ch00-17-02.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch00-17-01.png)![图像](assets/ch00-17-02.png)'
- en: '**That shouldn’t come as a surprise.**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**这应该不会让人感到意外。**'
- en: The block of code associated with any loop can contain any other code, including
    another loop. That’s a given. But, did you notice how Python’s use of indentation
    makes it easy to work out which block belongs where?
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何循环相关联的代码块可以包含任何其他代码，包括另一个循环。这是理所当然的。但是，你注意到Python使用缩进使得确定哪个块属于哪里变得很容易了吗？
- en: Use BIFs to learn more about your variables
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用BIFs更多地了解你的变量
- en: Python’s built-in functions have many uses. Although you’re less than twenty
    pages into this chapter, you’ve already learned a little about **len**, **print**,
    **range**, and **set**.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的内置函数有很多用途。虽然你在这一章的前二十页中学到的东西还不多，但你已经了解了一些**len**、**print**、**range**和**set**。
- en: 'We know you’ve been waiting patiently for this... so let’s see **len** in action:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道你已经耐心等待了这么久......所以让我们看看**len**的实际效果：
- en: '![Image](assets/ch00-18-01.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch00-18-01.png)'
- en: 'As you can no doubt imagine, **len** gets a lot of use. However, the most used
    BIF is very likely **print**, which – among other things – displays objects on
    screen. Let’s see what happens when **print** is asked to display your `deck`
    variable:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你无疑可以想象的那样，**len**被广泛使用。然而，最常用的BIF很可能是**print**，它除了其他功能外还能在屏幕上显示对象。让我们看看当**print**被要求显示你的`deck`变量时会发生什么：
- en: '![Image](assets/ch00-18-02.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch00-18-02.png)'
- en: Chaining BIFs to get more done
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链式调用 BIF（Built-in Functions）来完成更多任务
- en: You can use more than one BIF at a time (should you need to). A great BIF to
    know about is **sorted**, which returns a sorted copy of any object’s data.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以同时使用多个BIF（如果需要的话）。一个了解的很好的BIF是**sorted**，它返回任何对象数据的排序副本。
- en: The **sorted** BIF is often combined (or *chained*) with the **print** BIF to
    display an ordered version of some data. Care is needed, though, as the ordered
    data returned by **sorted** is always a list, regardless of what’s being sorted.
    This means using **sorted** on a set does *not* produce a sorted set, it produces
    a *sorted list* made up from the data in the original, *unordered* set. The original
    set is unchanged, in that it’s still a set, which is still unordered.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**sorted** BIF 经常与**print** BIF结合使用，显示一些数据的有序版本。不过需要注意，**sorted** 返回的有序数据总是一个列表，不管排序的是什么数据。这意味着在集合上使用**sorted**并不会产生一个有序的集合，而是产生一个由原始无序集合数据组成的有序列表。原始集合保持不变，仍然是一个无序集合。'
- en: '**Remember: “BIF” is shorthand for “built-in function”.**'
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**记住：“BIF” 是 “built-in function” 的缩写。**'
- en: '![Image](assets/ch00-19-01.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch00-19-01.png)'
- en: The **print** **sorted** chain is a great combination, but get ready to type
    the next chain (shown on the next page) more times that you’ll likely think possible.
    It really is a common combination, and useful to boot.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**print** **sorted** 的链式调用是一个很好的组合，但准备好在接下来的链式调用（显示在下一页上）中键入比你想象的更多的次数。这确实是一个常见的组合，而且非常有用。'
- en: The print dir combo mambo
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印和dir组合的曼波舞
- en: When provided with the name of any Python object, the **dir** BIF returns a
    list of the object’s attributes which, in the case of the `deck` variable, are
    the attributes associated with a set object.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当提供任何Python对象的名称时，**dir** BIF 返回该对象的属性列表，对于`deck`变量来说，这些属性与集合对象相关联。
- en: As you can see (below), there are an awful lot of attributes associated with
    a Python set. Note how the output from **dir** is chained with a call to the **print**
    BIF, ensuring the displayed output is drawn *across* your screen as opposed to
    *down* your screen, which cuts down on the amount of scrolling required of your
    poor fingers. This may or not be something to dance about but – hey! – every little
    helps.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在下面所见，与Python集合相关联的属性非常多。请注意，**dir**的输出与**print** BIF的调用链接在一起，确保显示的输出横跨你的屏幕而不是向下滚动，从而减少你可怜的手指需要滚动的量。这可能或可能不是一个值得庆祝的事情，但嘿！每一点帮助都是好的。
- en: '![Image](assets/ch00-20-01.png)![Image](assets/ch00-20-02.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch00-20-01.png)![图片](assets/ch00-20-02.png)'
- en: 'Here’s a simple rule to follow when looking at the output from **print** **dir**:
    *For now, ignore the attributes which begin and end with a double-underscore*.
    You’ll learn why they exist later in this book, but – for now – ignore, ignore,
    ignore!'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看**print** **dir**输出时，有一个简单的规则要遵循：*暂时忽略以双下划线开头和结尾的属性*。稍后在本书中你会了解它们的存在原因，但是暂时忽略，忽略，忽略！
- en: Getting help with dir’s output
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用dir输出获取帮助
- en: You might not think this to look at it, but you’ll likely use the **dir** BIF
    more than any other BIF when working with Python, especially when experimenting
    within a Jupyter notebook. This is due to **dir**’s ability to fess-up the list
    of attributes associated with any object. Typically, these attributes include
    a list of *methods* which can be applied to the object.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 看上去你可能不会这样认为，但在使用Python时，你很可能会比使用其他任何BIF更频繁地使用**dir** BIF，特别是在Jupyter笔记本中进行实验时。这是因为**dir**
    能够列出与任何对象相关联的属性列表。通常，这些属性包括可应用于对象的方法列表。
- en: Although it might be tempting (albeit a little bonkers) to randomly execute
    any of the methods associated with the `deck` variable to see what they do, a
    more sensible approach is to read the documentation associated with the method...
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然随机执行与`deck`变量相关的任何方法可能很诱人（尽管有点疯狂），但更明智的方法是阅读与该方法相关的文档...
- en: '![Image](assets/ch00-21-01.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch00-21-01.png)'
- en: 'Now, don’t worry: we aren’t about to send you off to wade through thousands
    of pages of online Python documentation. That’s the **help** BIF’s job:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在不用担心：我们不会让你去翻阅成千上万页的在线 Python 文档。那是**help** BIF 的工作：
- en: '![Image](assets/ch00-21-02.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch00-21-02.png)'
- en: This feels like a deck of cards now
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现在感觉像是一副卡牌了
- en: Now that your deck of cards is a set, you can better model its behavior.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的卡牌组已经是一个集合，你可以更好地模拟它的行为。
- en: Sadly, randomly selecting a card from the deck is complicated by the fact the
    `random. choice` technique from earlier in this chapter doesn’t work with sets.
    This is a pity, as it would’ve been nice to use `random.choice(deck)` to pick
    a card from your deck but – alas – this won’t work.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是，从牌堆中随机选择一张卡片变得复杂，因为本章前面介绍的`random.choice`技术在集合中不起作用。这有点令人遗憾，因为希望可以使用`random.choice(deck)`来从你的牌堆中选择一张卡片，但是——遗憾的是——这不会起作用。
- en: Note
  id: totrans-104
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**For now, don’t worry about why this is. The reason is kind of technical,
    which we’ll revisit later in this book.**'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**现在，不用担心为什么会这样。原因有点技术性，我们会在本书的后面重新讨论。**'
- en: Note
  id: totrans-106
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**This is to make sure our readers keep reading, right?!? [Editor].**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**这是为了确保我们的读者继续阅读，对吧？！？[编辑]。**'
- en: 'Not to worry. A quick hack lets you first *convert* a copy of your set of cards
    to a list, which can then be used with `random.choice`. It couldn’t be more straightforward:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 不用担心。一个快速的技巧让你首先*将你的卡牌集合*转换为一个列表，然后可以与`random.choice`一起使用。这不能再简单了：
- en: '![Image](assets/ch00-22-01.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch00-22-01.png)'
- en: Having selected a card (it’s the *three of clubs* for us, but is likely a different
    card if you’re following along), we should really remove the card from the deck
    so that subsequent random choices no longer select it. There was a big clue shown
    at the bottom of the previous page as to which set method can help you here.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 已经选择了一张卡片（对我们来说是*三个梅花*，但如果你在跟随的话可能是另一张卡），我们真的应该将这张卡从牌堆中移除，这样后续的随机选择就不会再选中它了。在前一页的底部显示了一个关键提示，说明了哪个集合方法可以帮助你。
- en: '![Image](assets/ch00-22-02.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch00-22-02.png)'
- en: What exactly is “card”?
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: “card”究竟是什么？
- en: 'If you’re wondering what the `card` variable is, there’s another BIF, called
    **type**, which reports the type of the value currently assigned to `card`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道`card`变量是什么，还有另一个 BIF，叫做**type**，它报告当前分配给`card`的值的类型：
- en: '![Image](assets/ch00-23-01.png)![Image](assets/ch00-23-02.png)![Image](assets/ch00-23-03.png)![Image](assets/ch00-26-05.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch00-23-01.png)![图像](assets/ch00-23-02.png)![图像](assets/ch00-23-03.png)![图像](assets/ch00-26-05.png)'
- en: '**The parentheses are optional.**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**括号是可选的。**'
- en: You *can* wrap your conditionals in parentheses, but doing so makes the code
    harder to read. Most Python programmers only use parentheses when it helps to
    clarify what their code is doing.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*你*可以将你的条件语句包裹在括号中，但这样做会使代码难以阅读。大多数 Python 程序员只在需要澄清代码含义时才使用括号。'
- en: But, wait! There’s more...
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 但是，等等！还有更多...
- en: You may already be sold on Python now you’ve seen how easy it is to read as
    well as run your Python code. But, you’re not done yet.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能已经被 Python 所吸引，因为你已经看到它不仅易于阅读还易于运行你的 Python 代码。但是，你还没有完成。
- en: '![Image](assets/ch00-27-01.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch00-27-01.png)'
- en: For the remainder of this chapter, you continuing your whistle-stop tour of
    some of Python’s other standout features.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的其余部分，你将继续快速浏览 Python 的其他显著特性。
- en: As this is a *Head First* book, it’s not enough we tell you what these are,
    we want you to *experience* them. So, in VS Code, close your `Cards` notebook,
    then create a new notebook called `WhyPython.ipynb`. You’ll work in this new notebook
    for the rest of this chapter.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一本*Head First*书籍，我们告诉你这些内容是不够的，我们希望你能*体验*它们。因此，在 VS Code 中，关闭你的`Cards`笔记本，然后创建一个名为`WhyPython.ipynb`的新笔记本。本章剩余部分将在这个新笔记本中进行。
- en: Note
  id: totrans-122
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**To create a new notebook in VS Code, select File, then New File... from the
    menu. Choose the third option to create a new, untitled notebook. Perform a File,
    Save to change the untitled name to “WhyPython.ipynb”.**'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**要在 VS Code 中创建新的笔记本，请选择“文件”，然后从菜单中选择“新建文件...”。选择第三个选项创建一个新的无标题笔记本。执行“文件”，保存以将无标题名称更改为“WhyPython.ipynb”。**'
- en: '![Image](assets/ch00-27-02.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch00-27-02.png)'
- en: '**Yes. Every… single…word.**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**是的。每一个... 单词。**'
- en: Oh, we’re only joking. ![Image](assets/smile.png)
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，我们只是开玩笑。![图像](assets/smile.png)
- en: The goal for this chapter is to expose you to enough Python to get a feel for
    why Python is so popular. As such, the coverage in this chapter is very *high-level.*
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是让您对Python有足够的了解，以便了解Python为什么如此受欢迎。因此，本章的覆盖范围非常*高级*。
- en: 'But, don’t worry: You’ll be returning to all of this material *in detail* later
    in this book. For now, concentrate on understanding the gist of what you’re seeing.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，不用担心：稍后在本书中，您将详细*地*回顾所有这些材料。现在，集中精力理解您所看到的主要内容。
- en: '**With your new notebook ready in VS Code, get ready to dig in.**'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**准备好您的新笔记本，在VS Code中开始深入研究。**'
- en: Python ships with a rich standard library
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python附带了一个丰富的标准库
- en: The *Python Standard Library* (PSL) is the name used to refer to a large collection
    of Python functions, types, modules, classes, and packages bundled with Python.
    These are guaranteed to be there once Python is installed.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '*Python标准库*（PSL）是指随Python捆绑安装的大量Python函数、类型、模块、类和包的名称。一旦安装了Python，这些都是保证存在的。'
- en: 'When you hear programmers refer to Python as coming with “batteries included”,
    they are referring in part to the PSL. There’s a lot to it: [https://docs.python.org/3/library/index.xhtml](https://docs.python.org/3/library/index.xhtml).'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当您听到程序员把Python称为“电池已包含”时，他们部分指的是PSL。其中有很多内容：[https://docs.python.org/3/library/index.xhtml](https://docs.python.org/3/library/index.xhtml)。
- en: '![Image](assets/ch00-28-01.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch00-28-01.png)'
- en: '**In this book, “PSL” is short-hand for the “Python Standard Library”.**'
  id: totrans-134
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**在本书中，“PSL”是“Python标准库”的简称。**'
- en: '![Image](assets/ch00-28-02.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch00-28-02.png)'
- en: '**It’s quite an apt description.**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**这确实是一个非常恰当的描述。**'
- en: The Python install includes the PSL, which is complete to the point where, more
    times than not, you can rely on the features it provides to get a lot of work
    done. The thinking is that Python alone is all you’ll need to get going, which
    means the standard install of Python works “right out to the box” without the
    need for anything extra. Hence, *batteries included.*
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Python安装包括PSL，PSL非常完整，大多数情况下，您可以依赖它提供的功能完成大量工作。这意味着Python本身就足够了，标准安装的Python可以直接使用，无需额外安装。因此，*电池已包含*。
- en: '![Image](assets/ch00-28-03.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch00-28-03.png)'
- en: 'BTW: Python is not a “toy language”'
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 顺便说一句：Python不是“玩具语言”
- en: This is a common criticism levelled at Python, in that it is somehow not a “real”
    programming language, or some sort of “toy”. If either of these observations were
    even remotely true, you wouldn’t expect anyone *anywhere* to be using Python for
    anything useful, let alone relying on Python to power their business.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对Python的常见批评，认为它并不是“真正”的编程语言，或者某种“玩具”。如果这些观察甚至有一点真实性，您不会期望任何人*任何地方*都在使用Python进行任何有用的事情，更不用说依赖Python来推动他们的业务了。
- en: Python may indeed look *different*, but this does not mean it can’t get the
    job done. Python is fun to use, but this doesn’t mean it’s a toy. Far from it.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Python可能确实看起来*不同*，但这并不意味着它不能完成工作。Python很有趣，但这并不意味着它是一个玩具。远非如此。
- en: '![Image](assets/ch00-31-01.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/ch00-31-01.png)'
- en: '**There sure is a lot going on there.**'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**那里确实发生了很多事情。**'
- en: Our goal is to give you a flavor of what’s in the PSL, not for you to explore
    it in any great detail.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是让您对PSL有所了解，而不是让您深入探索它的细节。
- en: You are not expected to know all of this, nor remember what’s on the last page,
    although there are three points you should consider.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您不必知道所有这些内容，也不必记住上一页的内容，尽管有三点您应该考虑。
- en: Note
  id: totrans-146
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**To be clear: we’re not talking about coffee…**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**明确一点：我们不是在谈论咖啡……**'
- en: '![Images](assets/1-circle.png) **You’ve only scratched the surface**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '![图像](assets/1-circle.png) **您仅仅触及了表面**'
- en: The PSL has a lot in it, and what’s on the previous two pages provides the briefest
    of glimpses. As you work through this book, we’ll call out uses of the PSL so
    you don’t miss any (and you’ll also find resources in the appendices for further
    exploring the PSL on your own).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: PSL包含了很多内容，前两页内容提供了最简短的一瞥。在阅读本书时，我们会提到PSL的使用，以确保您不会错过任何内容（您还将在附录中找到资源，可以进一步探索PSL）。
- en: '![Images](assets/2-circle.png) **The PSL represents a large body of tested
    code which you don’t have to write, just use** As the PSL has existed for decades
    now, the modules it contains have been tested to destruction by legions of Python
    programmers *all over the globe*. Consequently, you can use PSL modules with confidence.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](assets/2-circle.png) **PSL代表一个大量经过测试的代码库，你不需要自己编写，直接使用即可。** 由于PSL已存在数十年，其中的模块已经被全球各地的Python程序员彻底测试过。因此，你可以放心地使用PSL模块。'
- en: '![Images](assets/3-circle.png) **The PSL is guaranteed to be there, so you
    can rely on its modules being available**'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](assets/3-circle.png) **PSL是可以信赖的，因此你可以依赖它的模块是可用的。**'
- en: Other than for some very specific edge cases (such as a tiny embedded micro-controller
    providing a minimal Python environment), you can be sure your code which uses
    any PSL module will be portable to other systems which also support the PSL.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 除了一些非常特定的边缘情况（例如一个微型嵌入式微控制器提供最小的Python环境），你可以确信使用任何PSL模块的代码将可移植到其他支持PSL的系统上。
- en: '**Let’s use your latest notebook to take a quick look at two modules from the
    PSL.**'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**让我们使用你的最新笔记本快速查看PSL中的两个模块。**'
- en: With Python you’ll only write the code you need
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python，你只需编写你需要的代码
- en: 'The PSL is an prime example of Python working hard to ensure you only write
    new code when you absolutely have to. If a module in the PSL solves your problem,
    use it: *Resist the urge to code everything from scratch*.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: PSL是Python努力确保你只在绝对必要时才编写新代码的一个典范。如果PSL中的模块解决了你的问题，使用它：*抵制从头开始编码的冲动*。
- en: And when it comes to reusing code, there’s more than the PSL to mine.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到重用代码时，可以挖掘的不仅仅是PSL。
- en: '![Image](assets/ch00-33-01.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch00-33-01.png)'
- en: Python’s package ecosystem is to die for
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python的包生态系统令人垂涎欲滴
- en: 'Not being content with what’s already included in the PSL, the Python community
    supports an online centralised repository of third-party modules, classes, and
    packages. It’s called the *The Python Package Index* and lives here: [https://pypi.org/](https://pypi.org/).'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 对于PSL中已包含的内容并不满足，Python社区支持第三方模块、类和包的在线集中存储库。这被称为*Python包索引*，位于这里：[https://pypi.org/](https://pypi.org/)。
- en: Known as *PyPI* (and pronounced “pie-pea-eye”), the index is a huge collection
    of software. Once you find what you’re looking for, installing is a breeze, and
    you’ll get lots of practice installing from PyPI as this book progresses.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 称为*PyPI*（发音为“派皮”），这个索引是一个庞大的软件集合。一旦找到你想要的东西，安装就像小菜一碟，而且随着本书的进展，你会得到大量从PyPI安装的实践。
- en: For now, take ten minutes to visit the PyPI site (shown below) and take a look
    around.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，花十分钟访问PyPI网站（如下所示），四处看看。
- en: '![Image](assets/ch00-33-02.png)![Image](assets/ch00-34-01.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch00-33-02.png)![图片](assets/ch00-34-01.png)'
- en: '**OK. If it works for you, sure, follow your Zen!**'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**好的。如果这对你有帮助，当然，遵循你的Python之道！**'
- en: Seriously, though, when a programming language is named in honor of a bunch
    of comedians, it should come as no surprise that things get a little silly sometimes.
    This is not a bad thing.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 严肃地说，当一种编程语言以一群喜剧演员的名义命名时，有时事情会变得有点儿荒谬。这并不是一件坏事。
- en: 'The Python documentation is literally littered (sorry) with references to *Monty
    Python*. Where other documentation favors *foo* and *bar*, the Python docs favor
    *parrots, spam* and *eggs*. Or is it *eggs* and *spam*? Anyway, as the documentation
    states: you don’t have to like *Monty Python* to use Python, but it helps.![Image](assets/smile.png)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Python文档中充斥着对*蒙提·派森*的引用（抱歉）。在其他文档偏爱*foo*和*bar*时，Python文档更偏爱*鹦鹉、垃圾邮件*和*鸡蛋*。或者是*鸡蛋*和*垃圾邮件*？不管怎样，正如文档所述：你不必喜欢*蒙提·派森*才能使用Python，但喜欢会更好。![图片](assets/smile.png)
- en: '![Image](assets/ch00-34-02.png)![Image](assets/ch00-34-03.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch00-34-02.png)![图片](assets/ch00-34-03.png)'
- en: Python comes with two *Easter eggs* which demonstrate how Python programmers
    sometimes don’t take themselves too seriously, and also don’t mind when other
    folk have a bit of fun at their expense. To see what we mean, return to your WhyPython
    notebook one last time, and, in two new code cells, run each of the following
    lines of code. Enjoy!
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Python带有两个*彩蛋*，展示了Python程序员有时并不太认真，而且也不介意其他人对他们开玩笑。要看到我们的意思，请返回你的WhyPython笔记本，最后，在两个新的代码单元格中，运行以下每一行代码。享受吧！
- en: '![Image](assets/ch00-34-05.png)![Image](assets/ch00-35-01.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/ch00-34-05.png)![图片](assets/ch00-35-01.png)'
- en: '**And we can help you with that.**'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**而且我们可以帮助你。**'
- en: In the next chapter we introduce – and start *immediately* working on – a real-world
    problem which you’ll solve with Python code. Working *together*, we’ll build a
    solution while learning more Python, revisiting the material from this chapter
    in more detail when needed, and as this book progresses.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们介绍——并且*立即*开始用Python代码解决一个现实世界的问题。*在一起*，我们会在需要时更详细地重新访问本章的材料，随着本书的进展来构建一个解决方案。
- en: Before getting to all that, though, take some time to review the chapter summary
    on the next page before testing your retention skills with this chapter’s crossword
    puzzle.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请花些时间阅读下一页的章节总结，然后通过本章的填字游戏测试你的记忆技能。
- en: See you in the next chapter, [Chapter 2](ch02.xhtml#diving_in_letapostrophes_make_a_splash),
    which is actually your *second* chapter as we starting counting from zero (just
    like Python).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 见你在下一章，[第二章](ch02.xhtml#diving_in_letapostrophes_make_a_splash)，实际上这是你的*第二*章，因为我们从零开始计数（就像Python一样）。
- en: The Card Deck Crossword
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卡牌套牌填字游戏
- en: '![Image](assets/ch00-37-01.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/ch00-37-01.png)'
- en: '*Congratulations on making it to the end of your opening chapter, numbered
    zero in honor of the fact that Python, like a lot of other programming languages,
    starts counting from zero. Before you dive into your next chapter, take a few
    minutes to try this crossword puzzle. All of the answers to the clues are found
    in this chapter’s pages, and the solution is on the next page. Enjoy!*'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '*祝贺你完成了开章的探索，这一章被编号为零，以纪念Python和其他许多编程语言一样，从零开始计数。在你深入下一章之前，花几分钟时间尝试这个填字游戏。所有的答案都可以在本章的页面找到，解答在下一页。祝你玩得开心！*'
- en: '![Image](assets/ch00-37-02.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/ch00-37-02.png)'
- en: '**Across**'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**横向**'
- en: 2\. A built-in function which tells you what something is.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. A built-in function which tells you what something is.
- en: 3\. Objects surrounded by `[` and `]`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. Objects surrounded by `[` and `]`.
- en: 4\. Shorthand for built-in function.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. Shorthand for built-in function.
- en: 7\. Reports on an object’s size.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. Reports on an object’s size.
- en: 8\. Generates collection of numbers.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. Generates collection of numbers.
- en: 9\. The Python Package Index.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 9\. The Python Package Index.
- en: 11\. Includes a module in your code.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 11\. Includes a module in your code.
- en: 12\. Objects surrounded by `{` and `}`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 12\. Objects surrounded by `{` and `}`.
- en: 14\. This chapter’s missing Big 4.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 14\. This chapter’s missing Big 4.
- en: 15\. This operator can find things.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 15\. This operator can find things.
- en: 16\. Use together with Shift to run.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 16\. Use together with Shift to run.
- en: 17\. Enlightenment, Python-style.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 17\. Enlightenment, Python-style.
- en: '**Down**'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**竖向**'
- en: 1\. Objects surrounded by `(` and `)`, and it is one of the Big 4, too.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. Objects surrounded by `(` and `)`, and it is one of the Big 4, too.
- en: 2\. The optional part of an `if` statement.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. The optional part of an `if` statement.
- en: 5\. Loops a specific number of times.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. Loops a specific number of times.
- en: 6\. The name given to Python’s default variable.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. The name given to Python’s default variable.
- en: 9\. It’s not a *Pumpkin Skinny Latte*, but shares the same acronym
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 9\. It’s not a *Pumpkin Skinny Latte*, but shares the same acronym
- en: 10\. Displays to screen.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 10\. Displays to screen.
- en: 12\. It’s what the `card` variable is.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 12\. It’s what the `card` variable is.
- en: 13\. It’s either `True` or `False`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 13\. It’s either `True` or `False`.
- en: 14\. Makes up the *combo mambo*.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 14\. Makes up the *combo mambo*.
- en: The Card Deck Crossword Solution
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卡牌套牌填字游戏解答
- en: '![Image](assets/ch00-38-01.png)![Image](assets/ch00-38-02.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/ch00-38-01.png)![Image](assets/ch00-38-02.png)'
- en: '**Across**'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**横向**'
- en: 2\. A built-in function which tells you what something is.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. A built-in function which tells you what something is.
- en: 3\. Objects surrounded by `[` and `]`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. Objects surrounded by `[` and `]`.
- en: 4\. Shorthand for built-in function.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. Shorthand for built-in function.
- en: 7\. Reports on an object’s size.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. Reports on an object’s size.
- en: 8\. Generates collection of numbers.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. Generates collection of numbers.
- en: 9\. The Python Package Index.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 9\. The Python Package Index.
- en: 11\. Includes a module in your code.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 11\. Includes a module in your code.
- en: 12\. Objects surrounded by `{` and `}`.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 12\. Objects surrounded by `{` and `}`.
- en: 14\. This chapter’s missing Big 4.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 14\. This chapter’s missing Big 4.
- en: 15\. This operator can find things.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 15\. This operator can find things.
- en: 16\. Use together with Shift to run.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 16\. Use together with Shift to run.
- en: 17\. Enlightenment, Python-style.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 17\. Enlightenment, Python-style.
- en: '**Down**'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '**竖向**'
- en: 1\. Objects surrounded by `(` and `)`, and it is one of the Big 4, too.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. Objects surrounded by `(` and `)`, and it is one of the Big 4, too.
- en: 2\. The optional part of an `if` statement.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. The optional part of an `if` statement.
- en: 5\. Loops a specific number of times.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. Loops a specific number of times.
- en: 6\. The name given to Python’s default variable.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. The name given to Python’s default variable.
- en: 9\. It’s not a *Pumpkin Skinny Latte*, but shares the same acronym
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 9\. It’s not a *Pumpkin Skinny Latte*, but shares the same acronym
- en: 10\. Displays to screen.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 10\. Displays to screen.
- en: 12\. It’s what the `card` variable is.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 12\. It’s what the `card` variable is.
- en: 13\. It’s either `True` or `False`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 13\. It’s either `True` or `False`.
- en: 14\. Makes up the *combo mambo*.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 14\. Makes up the *combo mambo*.
- en: Just when you thought you were done...
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 就在你以为你已经完成时...
- en: 'Go grab your scissors, as here’s a handy cut-out chart of the Jupyter Notebook
    keyboard shortcuts we view as *essential*. You’ll get to use all of these are
    you learn more about Jupyter. For now, **Shift+Enter** remains the most important
    combination:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 拿起你的剪刀，这里有一个便于剪下来的 Jupyter Notebook 键盘快捷键图表，我们认为这些是*必不可少的*。随着你对 Jupyter 的了解增加，你会开始使用所有这些快捷键。目前，**Shift+Enter**
    仍然是最重要的组合键。
- en: Note
  id: totrans-227
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Just as well, as we asked you to take your scissors to what’s on the flip-side!**'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**就像我们要求你剪掉背面的内容一样好！**'
