- en: Chapter 3\. Remote Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章 远程函数
- en: 'You often need some form of distributed or parallel computing when building
    modern applications at scale. Many Python developers’ introduction to parallel
    computing is through the [multiprocessing module](https://oreil.ly/qj72E). Multiprocessing
    is limited in its ability to handle the requirements of modern applications. These
    requirements include the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 构建现代大规模应用程序时，通常需要某种形式的分布式或并行计算。许多 Python 开发者通过 [multiprocessing 模块](https://oreil.ly/qj72E)
    来了解并行计算。Multiprocessing 在处理现代应用程序需求方面存在局限性。这些需求包括：
- en: Running the same code on multiple cores or machines
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多个核心或机器上运行相同的代码
- en: Using tooling to handle machine and processing failures
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用工具处理机器和处理故障
- en: Efficiently handling large parameters
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效处理大参数
- en: Easily passing information between processes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在进程之间轻松传递信息
- en: Unlike multiprocessing, Ray’s remote functions satisfy these requirements. It’s
    important to note that *remote* doesn’t necessarily refer to a separate computer,
    despite its name; the function could be running on the same machine. What Ray
    does provide is mapping function calls to the right process on your behalf. Ray
    takes over distributing calls to that function instead of running in the same
    process. When calling remote functions, you are effectively running asynchronously
    on multiple cores or different machines, without having to concern yourself with
    how or where.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 与多进程不同，Ray 的远程函数满足这些要求。*远程*并不一定指的是一个独立的计算机，尽管名字如此；该函数可能在同一台机器上运行。Ray 提供的是将函数调用映射到正确进程的服务。在调用远程函数时，实际上是在多核或不同机器上异步运行，而无需关心如何或在哪里。
- en: Note
  id: totrans-7
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '*Asynchronously* is a fancy way of saying running multiple things at the same
    time without waiting on each other.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*异步*是指在同一时间内同时运行多个任务，而无需等待彼此完成的一种花哨方式。'
- en: In this chapter, you will learn how to create remote functions, wait for their
    completion, and fetch results. Once you have the basics down, you will learn to
    compose remote functions together to create more complex operations. Before you
    go too far, let’s start with understanding some of what we glossed over in the
    previous chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何创建远程函数，等待它们完成并获取结果。一旦掌握了基础知识，您将学会组合远程函数以创建更复杂的操作。在深入学习之前，让我们首先理解前一章中忽略的一些内容。
- en: Essentials of Ray Remote Functions
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ray 远程函数的基本要素
- en: In [Example 2-7](ch02.html#sleepy_task), you learned how to create a basic Ray
    remote function.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [示例 2-7](ch02.html#sleepy_task) 中，您学会了如何创建基本的 Ray 远程函数。
- en: When you call a remote function, it immediately returns an `ObjectRef` (a future),
    which is a reference to a remote object. Ray creates and executes a task in the
    background on a separate worker process and writes the result when finished into
    the original reference. You can then call `ray.get` on the `ObjectRef` to obtain
    the value. Note that `ray.get` is a blocking method waiting for task execution
    to complete before returning the result.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当您调用远程函数时，它会立即返回一个 `ObjectRef`（即 future），这是对远程对象的引用。Ray 在后台创建并执行任务，并在完成时将结果写入原始引用中。然后，您可以调用
    `ray.get` 来获取值。请注意，`ray.get` 是一个阻塞方法，等待任务执行完成后返回结果。
- en: Some details in [Example 2-7](ch02.html#sleepy_task) are worth understanding.
    The example converts the iterator to a list before passing it to `ray.get`. You
    need to do this when calling `ray.get` takes in a list of futures or an individual
    future.^([1](ch03.html#idm45354786316576)) The function waits until it has all
    the objects so it can return the list in order.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 2-7](ch02.html#sleepy_task) 中的一些细节值得理解。该示例在将迭代器传递给 `ray.get` 之前将其转换为列表。在调用
    `ray.get` 时，需要这样做，以便传入一个 futures 列表或单个 future。^([1](ch03.html#idm45354786316576))
    该函数等待直到获取到所有对象，然后按顺序返回列表。'
- en: Tip
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: As with regular Ray remote functions, it’s important to think about the amount
    of work done inside each remote invocation. For example, using `ray.remote` to
    compute factorials recursively will be slower than doing it locally since the
    work inside each function is small even though the overall work can be large.
    The exact amount of time depends on how busy your cluster is, but as a general
    rule, anything executed in under a few seconds without any special resources is
    not worth scheduling remotely.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 就像普通的 Ray 远程函数一样，重要的是考虑每次远程调用内部执行的工作量。例如，使用 `ray.remote` 递归计算阶乘会比在本地执行慢，因为每个函数内部的工作量很小，即使整体工作量可能很大。确切的时间取决于您的集群繁忙程度，但一般规则是，如果没有特殊资源，几秒钟内执行的任何内容都不值得远程调度。
- en: In our examples so far, using `ray.get` has been fine because the futures all
    had the same execution time. If the execution times are different, such as when
    training a model on different-sized batches of data, and you don’t need all of
    the results at the same time, this can be quite wasteful. Instead of directly
    calling `ray.get`, you should use `ray.wait`, which returns the requested number
    of futures that have already been completed. To see the performance difference,
    you will need to modify your remote function to have a variable sleep time, as
    in [Example 3-1](#variable_sleep_task).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在我们的例子中，使用 `ray.get` 是可以接受的，因为所有的 future 具有相同的执行时间。如果执行时间不同，例如在不同大小的数据批次上训练模型时，并且您不需要同时获取所有结果，这样做可能会非常浪费。不要直接调用
    `ray.get`，而是应该使用 `ray.wait`，它会返回已经完成的请求数量的 futures。要查看性能差异，您需要修改远程函数以具有可变的睡眠时间，就像
    [示例 3-1](#variable_sleep_task) 中的示例一样。
- en: Example 3-1\. [Remote function with different execution times](https://oreil.ly/UdVmt)
  id: totrans-17
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-1\. [具有不同执行时间的远程函数](https://oreil.ly/UdVmt)
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you recall, the example remote function sleeps based on the input argument.
    Since the range is in ascending order, calling the remote function on it will
    result in futures that are completed in order. To ensure that the futures won’t
    complete in order, you will need to modify the list. One way you can do this is
    by calling `things.sort(reverse=True)` prior to mapping your remote function over
    `things`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您记得的那样，示例远程函数根据输入参数休眠。由于范围是按升序排列的，对其进行远程函数调用将导致按顺序完成的 futures。为了确保 futures
    不会按顺序完成，您需要修改列表。一种方法是在映射远程函数到 `things` 之前调用 `things.sort(reverse=True)`。
- en: To see the difference between using `ray.get` and `ray.wait`, you can write
    a function that collects the values from your futures with some time delay on
    each object to simulate business logic.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看使用 `ray.get` 和 `ray.wait` 的差异，您可以编写一个函数，使用一些时间延迟收集 futures 的值，以模拟业务逻辑。
- en: The first option, not using `ray.wait`, is a bit simpler and cleaner to read,
    as shown in [Example 3-2](#get_only), but is not recommended for production use.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种选择，即不使用 `ray.wait`，在阅读上更简单和更清晰，如 [示例 3-2](#get_only) 中所示，但不建议用于生产环境。
- en: Example 3-2\. [`ray.get` without the wait](https://oreil.ly/UdVmt)
  id: totrans-22
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-2\. [`ray.get` 无需等待](https://oreil.ly/UdVmt)
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The second option is a bit more complex, as shown in [Example 3-3](#as_available).
    This works by calling `ray.wait` to find the next available future and iterating
    until all the futures have been completed. `ray.wait` returns two lists, one of
    the object references for completed tasks (of the size requested, which defaults
    to 1) and another list of the rest of the object references.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种选择稍微复杂一些，如 [示例 3-3](#as_available) 中所示。这通过调用 `ray.wait` 来找到下一个可用的 future
    并迭代直到所有的 futures 完成。`ray.wait` 返回两个列表，一个是已完成任务的对象引用列表（请求的大小，默认为1），另一个是剩余对象引用的列表。
- en: Example 3-3\. [Using `ray.wait`](https://oreil.ly/UdVmt)
  id: totrans-25
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-3\. [使用 `ray.wait`](https://oreil.ly/UdVmt)
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Running these functions side by side with `timeit.time`, you can see the difference
    in performance. It’s important to note that this performance improvement depends
    on how long the nonparallelized business logic (the logic in the loop) takes.
    If you’re just summing the results, using `ray.get` directly could be OK, but
    if you’re doing something more complex, you should use `ray.wait`. When we run
    this, we see that `ray.wait` performs roughly twice as fast. You can try varying
    the sleep times and see how it works out.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些函数与 `timeit.time` 并行运行，您可以看到性能上的差异。需要注意的是，这种性能改进取决于非并行化业务逻辑（循环中的逻辑）所花费的时间。如果只是对结果求和，直接使用
    `ray.get` 可能没问题，但如果执行更复杂的操作，则应该使用 `ray.wait`。当我们运行时，发现 `ray.wait` 大约快了两倍。您可以尝试变化睡眠时间并查看其效果。
- en: 'You may wish to specify one of the few optional parameters to `ray.wait`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '`num_returns`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: The number of `ObjectRef` objects for Ray to wait for completion before returning.
    You should set `num_returns` to less than or equal to the length of the input
    list of `ObjectRef` objects; otherwise, the function throws an exception.^([2](ch03.html#idm45354783539024))
    The default value is 1.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '`timeout`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: The maximum amount of time in seconds to wait before returning. This defaults
    to −1 (which is treated as infinite).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '`fetch_local`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: You can disable fetching of results by setting this to `false` if you are interested
    only in ensuring that the futures are completed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The `timeout` parameter is extremely important in both `ray.get` and `ray.wait`.
    If this parameter is not specified and one of your remote functions misbehaves
    (never completes), the `ray.get` or `ray.wait` will never return, and your program
    will block forever.^([3](ch03.html#idm45354786609680)) As a result, for any production
    code, we recommend that you use the `timeout` parameter in both to avoid deadlocks.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Ray’s `get` and `wait` functions handle timeouts slightly differently. Ray doesn’t
    raise an exception on `ray.wait` when a timeout occurs; instead, it simply returns
    fewer ready futures than `num_returns`. However, if `ray.get` encounters a timeout,
    Ray will raise a `GetTimeoutError`. Note that the return of the `wait`/`get` function
    does not mean that your remote function will be terminated; it will still run
    in the dedicated process. You can explicitly terminate your future (see the following
    tip) if you want to release the resources.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Since `ray.wait` can return results in any order, it’s essential to not depend
    on the order of the results. If you need to do different processing with different
    records (e.g., test a mix of group A and group B), you should encode this in the
    result (often with types).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: If you have a task that does not finish in a reasonable time (e.g., a straggler),
    you can cancel the task by using `ray.cancel` with the same `ObjectRef` used to
    `wait`/`get`. You can modify the previous `ray.wait` example to add a timeout
    and cancel any “bad” tasks, resulting in something like [Example 3-4](#handle_bad_futures).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-4\. [Using `ray.wait` with a timeout and a cancel](https://oreil.ly/UdVmt)
  id: totrans-41
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Warning
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Canceling a task should not be part of your normal program flow. If you find
    yourself having to frequently cancel tasks, you should investigate what’s going
    on. Any subsequent calls to `wait` or `get` for a canceled task are unspecified
    and could raise an exception or return incorrect results.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Another minor point that we skipped in the previous chapter is that while the
    examples so far return only a single value, Ray remote functions can return multiple
    values, as with regular Python functions.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Fault tolerance is an important consideration for those running in a distributed
    environment. Say the worker executing the task dies unexpectedly (because either
    the process crashed or the machine failed). Ray will rerun the task (after a delay)
    until either the task succeeds or the maximum number of retries is exceeded. We
    cover fault tolerance more in [Chapter 5](ch05.html#ch05).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在分布式环境中运行的人来说，容错性是一个重要的考虑因素。假设执行任务的工作进程意外死亡（因为进程崩溃或者机器故障），Ray 将重新运行任务（有延迟），直到任务成功或者超过最大重试次数为止。我们在[第5章](ch05.html#ch05)中更详细地讨论了容错性。
- en: Composition of Remote Ray Functions
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程 Ray 函数的组合
- en: You can make your remote functions even more powerful by composing them. The
    two most common methods of composition with remote functions in Ray are pipelining
    and nested parallelism. You can compose your functions with nested parallelism
    to express recursive functions. Ray also allows you to express sequential dependencies
    without having to block or collect the result in the driver, known as *pipelining*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过组合远程函数使您的远程函数变得更加强大。Ray 中与远程函数组合最常见的两种方法是流水线化和嵌套并行处理。您可以使用嵌套并行处理来表达递归函数。Ray
    还允许您表达顺序依赖关系，而无需阻塞或收集驱动程序中的结果，这被称为*流水线化*。
- en: You can build a pipelined function by using `ObjectRef` objects from an earlier
    `ray.remote` as parameters for a new remote function call. Ray will automatically
    fetch the `ObjectRef` objects and pass the underlying objects to your function.
    This approach allows for easy coordination between the function invocations. Additionally,
    such an approach minimizes data transfer; the result will be sent directly to
    the node where execution of the second remote function is executed. A simple example
    of such a sequential calculation is presented in [Example 3-5](#ray_remote_seq).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用来自前一个`ray.remote`的`ObjectRef`对象作为新远程函数调用的参数来构建流水线函数。Ray 将自动获取`ObjectRef`对象并将底层对象传递给您的函数。这种方法允许在函数调用之间轻松协调。此外，这种方法最小化了数据传输；结果将直接发送到执行第二个远程函数的节点。在[示例 3-5](#ray_remote_seq)中展示了这种顺序计算的简单示例。
- en: Example 3-5\. [Ray pipelining/sequential remote execution with task dependency](https://oreil.ly/UdVmt)
  id: totrans-50
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-5\. [Ray 管道化/顺序远程执行与任务依赖](https://oreil.ly/UdVmt)
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This code defines two remote functions and then starts three instances of the
    first one. `ObjectRef` objects for all three instances are then used as input
    for the second function. In this case, Ray will wait for all three instances to
    complete before starting to execute `sum_values`. You can use this approach not
    only for passing data but also for expressing basic workflow style dependencies.
    There is no restriction on the number of `ObjectRef` objects you can pass, and
    you can also pass “normal” Python objects at the same time.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码定义了两个远程函数，然后启动了第一个函数的三个实例。所有三个实例的`ObjectRef`对象随后被用作第二个函数的输入。在这种情况下，Ray 会等待所有三个实例完成后再开始执行`sum_values`。您不仅可以用这种方法传递数据，还可以表达基本的工作流风格的依赖关系。您可以传递的`ObjectRef`对象数量没有限制，同时还可以传递“普通”的
    Python 对象。
- en: You *cannot* use Python structures (for example, lists, dictionaries, or classes)
    containing `ObjectRef` instead of using `ObjectRef` directly. Ray waits for and
    resolves only `ObjectRef` objects that are passed directly to a function. If you
    attempt to pass a structure, you will have to do your own `ray.wait` and `ray.get`
    inside the function. [Example 3-6](#broken_ray_remote_seq) is a variation of [Example 3-5](#ray_remote_seq)
    that does not work.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您*不能*使用包含`ObjectRef`而不是直接使用`ObjectRef`的 Python 结构（例如列表、字典或类）。Ray 仅等待和解析直接传递给函数的`ObjectRef`对象。如果尝试传递结构，则必须在函数内部执行自己的`ray.wait`和`ray.get`。[示例 3-6](#broken_ray_remote_seq)是[示例 3-5](#ray_remote_seq)的一个不起作用的变体。
- en: Example 3-6\. [Broken sequential remote function execution with task dependency](https://oreil.ly/UdVmt)
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-6\. [断裂的顺序远程函数执行与任务依赖](https://oreil.ly/UdVmt)
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[Example 3-6](#broken_ray_remote_seq) has been modified from [Example 3-5](#ray_remote_seq)
    to take a list of `ObjectRef` objects as parameters instead of `ObjectRef` objects
    themselves. Ray does not “look inside” any structure being passed in. Therefore,
    the function will be invoked immediately, and since types won’t match, the function
    will fail with an error `TypeError: unsupported operand type(s) for +: ''int''
    and ''ray._raylet.ObjectRef''`. You could fix this error by using `ray.wait` and
    `ray.get`, but this would still launch the function too early, resulting in unnecessary
    blocking.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 3-6](#broken_ray_remote_seq)已经从[示例 3-5](#ray_remote_seq)修改为接受`ObjectRef`对象的列表作为参数，而不是`ObjectRef`对象本身。Ray不会“查看”任何被传递的结构。因此，函数会立即被调用，由于类型不匹配，函数将失败并显示错误`TypeError:
    unsupported operand type(s) for +: ''int'' and ''ray._raylet.ObjectRef''`。您可以通过使用`ray.wait`和`ray.get`来修复此错误，但这仍会过早地启动函数，导致不必要的阻塞。'
- en: In another composition approach, *nested parallelism*, your remote function
    launches additional remote functions. This can be useful in many cases, including
    implementing recursive algorithms and combining hyperparameter tuning with parallel
    model training.^([4](ch03.html#idm45354786147744)) Let’s take a look at two ways
    to implement nested parallelism ([Example 3-7](#nested_par)).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一种组合方法*嵌套并行性*中，您的远程函数启动额外的远程函数。这在许多情况下都很有用，包括实现递归算法和将超参数调整与并行模型训练结合起来。^([4](ch03.html#idm45354786147744))
    让我们看看两种实现嵌套并行性的方法（[示例 3-7](#nested_par)）。
- en: Example 3-7\. [Implementing nested parallelism](https://oreil.ly/UdVmt)
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-7\. [实现嵌套并行性](https://oreil.ly/UdVmt)
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This code defines three remote functions:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码定义了三个远程函数：
- en: '`generate_numbers`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`generate_numbers`'
- en: A simple function that generates random numbers
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一个生成随机数的简单函数
- en: '`remote_objrefs`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`remote_objrefs`'
- en: Invokes several remote functions and returns resulting `ObjectRef` objects
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 调用多个远程函数并返回生成的`ObjectRef`对象
- en: '`remote_values`'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`remote_values`'
- en: Invokes several remote functions, waits for their completion, and returns the
    resulting values
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 调用多个远程函数，等待它们完成并返回结果值
- en: As you can see from this example, nested parallelism allows for two approaches.
    In the first case (`remote_objrefs`), you return all the `ObjectRef` objects to
    the invoker of the aggregating function. The invoking code is responsible for
    waiting for all the remote functions’ completion and processing the results. In
    the second case (`remote_values`), the aggregating function waits for all the
    remote functions’ executions to complete and returns the actual execution results.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从这个例子中可以看到的那样，嵌套并行性允许两种方法。在第一种情况（`remote_objrefs`）中，您将所有的`ObjectRef`对象返回给聚合函数的调用者。调用代码负责等待所有远程函数的完成并处理结果。在第二种情况（`remote_values`）中，聚合函数等待所有远程函数的执行完成，并返回实际的执行结果。
- en: Returning all of the `ObjectRef` objects allows for more flexibility with nonsequential
    consumption, as described back in `ray.await`, but it is not suitable for many
    recursive algorithms. With many recursive algorithms (e.g., quicksort, factorial,
    etc.) we have many levels of a combination step that need to be performed, requiring
    that the results be combined at each level of recursion.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 返回所有的`ObjectRef`对象可以更灵活地进行非顺序消耗，就像在`ray.await`中描述的那样，但对于许多递归算法来说并不适用。对于许多递归算法（例如快速排序、阶乘等），我们有许多级别的组合步骤需要执行，需要在每个递归级别上组合结果。
- en: Ray Remote Best Practices
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ray远程最佳实践
- en: When you are using remote functions, keep in mind that you don’t want to make
    them too small. If the tasks are very small, using Ray can take longer than if
    you used Python without Ray. The reason for this is that every task invocation
    has a nontrivial overhead—​for example, scheduling, data passing, inter-process
    communication (IPC), and updating the system state. To get a real advantage from
    parallel execution, you need to make sure that this overhead is negligible compared
    to the execution time of the function itself.^([5](ch03.html#idm45354783975024))
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用远程函数时，请记住不要将它们设计得太小。如果任务非常小，使用Ray可能比不使用Ray的Python花费更长的时间。其原因是每个任务调用都有非常复杂的开销，例如调度、数据传递、进程间通信（IPC）和更新系统状态。要从并行执行中获得真正的优势，您需要确保这些开销与函数本身的执行时间相比是可以忽略不计的。^([5](ch03.html#idm45354783975024))
- en: As described in this chapter, one of the most powerful features of Ray `remote`
    is the ability to parallelize functions’ execution. Once you call the remote functions,
    the handle to the remote object (future) is returned immediately, and the invoker
    can continue execution either locally or with additional remote functions. If,
    at this point, you call `ray.get`, your code will block, waiting for a remote
    function to complete, and as a result, you will have no parallelism. To ensure
    parallelization of your code, you should invoke `ray.get` only at the point when
    you absolutely need the data to continue the main thread of execution. Moreover,
    as we’ve described, it is recommended to use `ray.wait` instead of `ray.get` directly.
    Additionally, if the result of one remote function is required for the execution
    of another remote function(s), consider using pipelining (described previously)
    to leverage Ray’s task coordination.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章所述，Ray `remote` 最强大的功能之一是能够并行执行函数。一旦你调用远程函数，远程对象（future）的句柄会立即返回，调用者可以继续在本地执行或者继续执行其他远程函数。如果此时调用
    `ray.get`，你的代码将会阻塞，等待远程函数完成，结果就是你将失去并行性。为了确保你的代码并行化，你应该只在绝对需要数据继续主线程执行的时候调用 `ray.get`。此外，正如我们所描述的，推荐使用
    `ray.wait` 而不是直接使用 `ray.get`。另外，如果一个远程函数的结果需要用于执行另一个远程函数（们），考虑使用流水线处理（前面描述过）来利用Ray的任务协调。
- en: When you submit your parameters to remote functions, Ray does not submit them
    directly to the remote function, but rather copies the parameters into object
    storage and then passes `ObjectRef` as a parameter. As a result, if you send the
    same parameter to multiple remote functions, you are paying a (performance) penalty
    for storing the same data to the object storage several times. The larger the
    size of the data, the larger the penalty. To avoid this, if you need to pass the
    same data to multiple remote functions, a better option is to first put the shared
    data in object storage and use the resulting `ObjectRef` as a parameter to the
    function. We illustrate how to do this in [“Ray Objects”](ch05.html#ray_objects).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将参数提交给远程函数时，Ray并不直接将它们提交给远程函数，而是将参数复制到对象存储中，然后将`ObjectRef`作为参数传递。因此，如果你将相同的参数发送给多个远程函数，你将为将相同的数据存储到对象存储中多次支付（性能）代价。数据的大小越大，惩罚越大。为了避免这种情况，如果你需要将相同的数据传递给多个远程函数，一个更好的选择是首先将共享数据放入对象存储中，然后使用生成的`ObjectRef`作为函数的参数。我们在[“Ray对象”](ch05.html#ray_objects)中说明了如何做到这一点。
- en: As we will show in [Chapter 5](ch05.html#ch05), remote function invocation is
    done by the Raylet component. If you invoke a lot of remote functions from a single
    client, all these invocations are done by a single Raylet. Therefore, it takes
    a certain amount of time for a given Raylet to process these requests, which can
    cause a delay in starting all the functions. A better approach, as described in
    the [“Ray Design Patterns” documentation](https://oreil.ly/PTZOI), is to use an
    invocation tree—​a nested function invocation as described in the previous section.
    Basically, a client creates several remote functions, each of which, in turn,
    creates more remote functions, and so on. In this approach, the invocations are
    spread across multiple Raylets, allowing scheduling to happen faster.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将在[第五章](ch05.html#ch05)中展示的那样，远程函数调用是由Raylet组件完成的。如果你从单个客户端调用了大量远程函数，所有这些调用都是由一个单独的Raylet完成的。因此，对于给定的Raylet来处理这些请求，需要一定的时间，这可能会延迟所有函数的启动。一个更好的方法，正如[“Ray设计模式”文档](https://oreil.ly/PTZOI)中所描述的，是使用调用树——即前面部分描述的嵌套函数调用。基本上，一个客户端创建了几个远程函数，每个远程函数依次创建更多的远程函数，依此类推。在这种方法中，调用被分布在多个Raylet之间，允许调度更快地进行。
- en: Every time you define a remote function by using the `@ray.remote` decorator,
    Ray exports these definitions to all Ray workers, which takes time (especially
    if you have a lot of nodes). To reduce the number of function exports, a good
    practice is to define as many of the remote tasks on the top level outside the
    loops and local functions using them.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你使用`@ray.remote`装饰器定义一个远程函数时，Ray都会将这些定义导出到所有Ray工作节点，这需要一些时间（特别是如果你有很多节点）。为了减少函数导出的数量，一个好的实践是在顶层定义尽可能多的远程任务，避免在循环和本地函数中定义它们。
- en: Bringing It Together with an Example
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过一个示例将其整合
- en: ML models composed of other models (e.g., ensemble models) are well suited to
    evaluation with Ray. [Example 3-8](#ensemble_example) shows what it looks like
    to use Ray’s function composition for a hypothetical spam model for web links.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 由其他模型组成的 ML 模型（例如集成模型）非常适合使用 Ray 进行评估。[示例 3-8](#ensemble_example) 展示了使用 Ray
    的函数组合来处理假设的网页链接垃圾邮件模型的样子。
- en: Example 3-8\. [Ensemble model](https://oreil.ly/UdVmt)
  id: totrans-77
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-8\. [集成模型](https://oreil.ly/UdVmt)
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: By using Ray instead of taking the summation of the time to evaluate all the
    models, you instead need to wait for only the slowest model, and all other models
    that finish faster are “free.” For example, if the models take equal lengths of
    time to run, evaluating these models serially, without Ray, would take almost
    three times as long.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Ray 而不是对所有模型的评估时间求和，您只需等待最慢的模型，而所有更快完成的模型则是“免费”的。例如，如果这些模型运行时间相等，那么在没有 Ray
    的情况下串行评估这些模型将需要几乎三倍的时间。
- en: Conclusion
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter, you learned about a fundamental Ray feature—​remote functions’
    invocation and their use in creating parallel asynchronous execution of Python
    across multiple cores and machines. You also learned multiple approaches for waiting
    for remote functions to complete execution and how to use `ray.wait` to prevent
    deadlocks in your code.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了一个基本的 Ray 特性——远程函数的调用及其在跨多个核心和机器上创建并行异步执行中的应用。您还学习了多种等待远程函数执行完成的方法，以及如何使用
    `ray.wait` 避免代码中的死锁。
- en: Finally, you learned about remote function composition and how to use it for
    rudimentary execution control (mini workflows). You also learned to implement
    nested parallelism, enabling you to invoke several functions in parallel, with
    each of these functions in turn invoking more parallel functions. In the next
    chapter, you will learn how to manage state in Ray by using actors.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您了解了远程函数组合及其如何用于基本执行控制（迷你工作流）。您还学会了实现嵌套并行处理，使您能够并行调用多个函数，而每个这些函数又可以依次调用更多并行函数。在下一章中，您将学习如何通过使用
    actors 在 Ray 中管理状态。
- en: ^([1](ch03.html#idm45354786316576-marker)) Ray does not “go inside” classes
    or structures to resolve futures, so if you have a list of lists of futures or
    a class containing a future, Ray will not resolve the “inner” future.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch03.html#idm45354786316576-marker)) Ray 不会“深入”类或结构以解析 futures，因此如果您有一系列
    futures 的列表或包含 future 的类，Ray 将不会解析“内部”future。
- en: ^([2](ch03.html#idm45354783539024-marker)) Currently, if the list of `ObjectRef`
    objects passed in is empty, Ray treats it as a special case, and returns immediately
    regardless of the value of `num_returns`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch03.html#idm45354783539024-marker)) 当传入的 `ObjectRef` 对象列表为空时，Ray 将其视为特殊情况，并立即返回，而不管
    `num_returns` 的值如何。
- en: ^([3](ch03.html#idm45354786609680-marker)) If you’re working interactively,
    you can fix this with a `SIGINT` or the stop button in Jupyter.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch03.html#idm45354786609680-marker)) 如果您正在交互式地工作，您可以通过 `SIGINT` 或 Jupyter
    中的停止按钮来解决这个问题。
- en: ^([4](ch03.html#idm45354786147744-marker)) You can then train multiple models
    in parallel and train each of the models using data parallel gradient computations,
    resulting in nested parallelism.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch03.html#idm45354786147744-marker)) 然后，您可以并行训练多个模型，并使用数据并行梯度计算来训练每个模型，从而实现嵌套并行处理。
- en: ^([5](ch03.html#idm45354783975024-marker)) As an exercise, you can remove `sleep`
    from the function in [Example 2-7](ch02.html#sleepy_task) and you will see that
    execution of remote functions on Ray takes several times longer than regular function
    invocation. Overhead is not constant, but rather depends on your network, size
    of the invocation parameters, etc. For example, if you have only small bits of
    data to transfer, the overhead will be lower than if you are transferring, say,
    the entire text of Wikipedia as a parameter.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch03.html#idm45354783975024-marker)) 作为练习，您可以从 [示例 2-7](ch02.html#sleepy_task)
    的函数中移除 `sleep`，您会发现使用 Ray 在远程函数执行上比常规函数调用花费的时间长几倍。开销并非恒定，而是取决于网络、调用参数的大小等因素。例如，如果您只有少量数据要传输，那么开销将比传输整个维基百科文本作为参数时要低。
