["```py\nfrom urllib.request import urlopen\ntextPage = urlopen('http://www.pythonscraping.com/'\\\n    'pages/warandpeace/chapter1.txt')\nprint(textPage.read())\n```", "```py\n01000001 - A\n01000010 - B\n01000011 - C\n\n```", "```py\n11000011 10000000 - À\n11000011 10011111 - ß\n11000011 10100111 - ç\n```", "```py\nfrom urllib.request import urlopen\ntextPage = urlopen('http://www.pythonscraping.com/'\\\n    'pages/warandpeace/chapter1-ru.txt')\nprint(textPage.read())\n```", "```py\nb\"\\xd0\\xa7\\xd0\\x90\\xd0\\xa1\\xd0\\xa2\\xd0\\xac \\xd0\\x9f\\xd0\\x95\\xd0\\xa0\\xd0\\x92\\xd0\\\nx90\\xd0\\xaf\\n\\nI\\n\\n\\xe2\\x80\\x94 Eh bien, mon prince.\n```", "```py\nfrom urllib.request import urlopen\n\ntextPage = urlopen('http://www.pythonscraping.com/'\\\n    'pages/warandpeace/chapter1-ru.txt')\nprint(str(textPage.read(), 'utf-8'))\n```", "```py\nhtml = urlopen('http://en.wikipedia.org/wiki/Python_(programming_language)')\nbs = BeautifulSoup(html, 'html.parser')\ncontent = bs.find('div', {'id':'mw-content-text'}).get_text()\ncontent = bytes(content, 'UTF-8')\ncontent = content.decode('UTF-8')\n```", "```py\n<meta charset=\"utf-8\" />\n```", "```py\n<META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n```", "```py\nfrom urllib.request import urlopen\nfrom io import StringIO\nimport csv\n\ndata = urlopen('http://pythonscraping.com/files/MontyPythonAlbums.csv')\n              .read().decode('ascii', 'ignore')\ndataFile = StringIO(data)\ncsvReader = csv.reader(dataFile)\n\nfor row in csvReader:\n    print(row)\n```", "```py\n['Name', 'Year']\n[\"Monty Python's Flying Circus\", '1970']\n['Another Monty Python Record', '1971']\n[\"Monty Python's Previous Record\", '1972']\n...\n```", "```py\nfor row in csvReader:\n    print('The album \"'+row[0]+'\" was released in '+str(row[1]))\n```", "```py\nThe album \"Name\" was released in Year\nThe album \"Monty Python's Flying Circus\" was released in 1970\nThe album \"Another Monty Python Record\" was released in 1971\nThe album \"Monty Python's Previous Record\" was released in 1972\n...\n```", "```py\nfrom urllib.request import urlopen\nfrom io import StringIO\nimport csv\n\ndata = urlopen('http://pythonscraping.com/files/MontyPythonAlbums.csv')\n              .read().decode('ascii', 'ignore')\ndataFile = StringIO(data)\ndictReader = csv.DictReader(dataFile)\n\nprint(dictReader.fieldnames)\n\nfor row in dictReader:\n    print(row)\n```", "```py\n['Name', 'Year']\n{'Name': 'Monty Python's Flying Circus', 'Year': '1970'}\n{'Name': 'Another Monty Python Record', 'Year': '1971'}\n{'Name': 'Monty Python's Previous Record', 'Year': '1972'}\n```", "```py\n$ pip install pypdf\n\n```", "```py\nfrom urllib.request import urlretrieve\nfrom pypdf import PdfReader\n\nurlretrieve(\n    'http://pythonscraping.com/pages/warandpeace/chapter1.pdf',\n    'chapter1.pdf'\n)\nreader = PdfReader('chapter1.pdf')\n\nfor page in reader.pages:\n    print(page.extract_text())\n\n```", "```py\nCHAPTER I\n\n\"Well, Prince, so Genoa and Lucca are now just family estates of\nthe Buonapartes. But I warn you, if you don't tell me that this\nmeans war, if you still try to defend the infamies and horrors\nperpetrated by that Antichrist- I really believe he is Antichrist- I will \n\n```", "```py\nfrom zipfile import ZipFile\nfrom urllib.request import urlopen\nfrom io import BytesIO\n\nwordFile = urlopen('http://pythonscraping.com/pages/AWordDocument.docx').read()\nwordFile = BytesIO(wordFile)\ndocument = ZipFile(wordFile)\nxml_content = document.read('word/document.xml')\nprint(xml_content.decode('utf-8'))\n```", "```py\n<w:document xmlns:wpc=\"http://schemas.microsoft.com/office/word/2010/\nwordprocessingCanvas\" xmlns:cx=\"http://schemas.microsoft.com/office/d\nrawing/2014/chartex\" xmlns:cx1=\"http://schemas.microsoft.com/office/d\nrawing/2015/9/8/chartex\" xmlns:cx2=\"http://schemas.microsoft.com/offi\nce/drawing/2015/10/21/chartex\" xmlns:cx3=\"http://schemas.microsoft.co\nm/office/drawing/2016/5/9/chartex\" xmlns:cx4=\"http://schemas.microsof *`...More schema data here...`*  <w:body><w:p w14:paraId=\"19A18025\" w14:textId=\"54C8E458\" w:rsidR=\"007\n45992\" w:rsidRDefault=\"00BF6C9C\" w:rsidP=\"00BF6C9C\"><w:pPr><w:pStyle \nw:val=\"Heading1\"/></w:pPr><w:r><w:t>A Word Document on a Website</w:t\n></w:r></w:p><w:p w14:paraId=\"501E7A3A\" w14:textId=\"77777777\" w:rsidR\n=\"00BF6C9C\" w:rsidRDefault=\"00BF6C9C\" w:rsidP=\"00BF6C9C\"/><w:p w14:pa\nraId=\"13929BE7\" w14:textId=\"20FEDCDB\" w:rsidR=\"00BF6C9C\" w:rsidRPr=\"0\n0BF6C9C\" w:rsidRDefault=\"00BF6C9C\" w:rsidP=\"00BF6C9C\"><w:r><w:t xml:s\npace=\"preserve\">This is a Word document, full of content that you wan\nt very much. </w:t></w:r><w:proofErr w:type=\"spellStart\"/><w:r><w:t>U\nnfortuna</w:t></w:r><w:r w:rsidR=\"00BC14C7\"><w:t>t</w:t></w:r><w:r><w\n:t>ly</w:t></w:r><w:proofErr w:type=\"spellEnd\"/><w:r><w:t xml:space=\"\npreserve\">, it’s difficult to access because I’m putting it on my web\nsite as a .docx file, rather than just publishing it as HTML. </w:t><\n/w:r></w:p><w:sectPr w:rsidR=\"00BF6C9C\" w:rsidRPr=\"00BF6C9C\"><w:pgSz \nw:w=\"12240\" w:h=\"15840\"/><w:pgMar w:top=\"1440\" w:right=\"1440\" w:botto\nm=\"1440\" w:left=\"1440\" w:header=\"720\" w:footer=\"720\" w:gutter=\"0\"/><w\n:cols w:space=\"720\"/><w:docGrid w:linePitch=\"360\"/></w:sectPr></w:bod\ny></w:document>\n\n```", "```py\nfrom zipfile import ZipFile\nfrom urllib.request import urlopen\nfrom io import BytesIO\nfrom bs4 import BeautifulSoup\n\nwordFile = urlopen('http://pythonscraping.com/pages/AWordDocument.docx').read()\nwordFile = BytesIO(wordFile)\ndocument = ZipFile(wordFile)\nxml_content = document.read('word/document.xml')\n\nwordObj = BeautifulSoup(xml_content.decode('utf-8'), 'xml')\ntextStrings = wordObj.find_all('w:t')\n\nfor textElem in textStrings:\n    print(textElem.text)\n\n```", "```py\nA Word Document on a Website\nThis is a Word document, full of content that you want very much.\nUnfortuna\nt\nly\n, it’s difficult to access because I’m putting it on my website as \na .docx file, rather than just publishing it as HTML.\n\n```", "```py\ntextStrings = wordObj.find_all('w:t')\n\nfor textElem in textStrings:\n    style = textElem.parent.parent.find('w:pStyle')\n    if style is not None and style['w:val'] == 'Title':\n        print('Title is: {}'.format(textElem.text))\n    else:\n        print(textElem.text)\n\n```"]