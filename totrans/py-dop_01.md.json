["```py\n$ python --version\nPython 3.8.0\n```", "```py\n$ python\nPython 3.8.0 (default, Sep 23 2018, 09:47:03)\n[Clang 9.0.0 (clang-900.0.38)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> 1 + 2\n3\n>>> exit()\n```", "```py\n# This is my first Python script\nprint('Hello world!')\n```", "```py\n$ python hello.py\nHello world!\n```", "```py\n$ pip install ipython\n```", "```py\n$ ipython\nPython 3.8.0 (default, Sep 23 2018, 09:47:03)\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.5.0 -- An enhanced Interactive Python. Type '?' for help.\nIn [1]: print('Hello')\nHello\n\nIn [2]: exit()\n```", "```py\n$ pip install jupyter\n$ jupyter notebook\n```", "```py\n>>> i = 3\n>>> j = i +1\n>>> i + j\n7\n```", "```py\n>>> dog_name = 'spot'\n>>> dog_name\n'spot'\n>>> dog_name = 'rex'\n>>> dog_name\n'rex'\n>>> dog_name = 't-' + dog_name\n>>> dog_name\n't-rex'\n>>>\n```", "```py\n>>> big = 'large'\n>>> big\n'large'\n>>> big = 1000*1000\n>>> big\n1000000\n>>> big = {}\n>>> big\n{}\n>>>\n```", "```py\n>>> 1 + 1\n2\n>>> 3 - 4\n–1\n>>> 2*5\n10\n>>> 2/3\n0.6666666666666666\n```", "```py\n>>> 5/2\n2.5\n>>> 5//2\n2\n>>> 3**2\n9\n>>> 5%2\n1\n```", "```py\n # This is a comment\n 1 + 1 # This comment follows a statement\n```", "```py\n\"\"\"\nThis statement is a block comment.\nIt can run for multiple lines\n\"\"\"\n\n'''\nThis statement is also a block comment\n'''\n```", "```py\n# This is my first Python script\nprint(\"Hello world!\")\n\n$ python hello.py\nHello world!\n```", "```py\n>>> range(10)\nrange(0, 10)\n>>> list(range(10))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> list(range(5, 10))\n[5, 6, 7, 8, 9]\n>>> list(range(5, 10, 3))\n[5, 8]\n>>>\n```", "```py\n>>> i = 45\n>>> if i == 45:\n...     print('i is 45')\n...\n...\ni is 45\n>>>\n```", "```py\n>>> i = 35\n>>> if i == 45:\n...     print('i is 45')\n... elif i == 35:\n...     print('i is 35')\n...\n...\ni is 35\n>>>\n```", "```py\n>>> i = 0\n>>> if i == 45:\n...     print('i is 45')\n... elif i == 35:\n...     print('i is 35')\n... elif i > 10:\n...     print('i is greater than 10')\n... elif i%3 == 0:\n...     print('i is a multiple of 3')\n... else:\n...     print('I don't know much about i...')\n...\n...\ni is a multiple of 3\n>>>\n```", "```py\n>>> cat = 'spot'\n>>> if 's' in cat:\n...     print(\"Found an 's' in a cat\")\n...     if cat == 'Sheba':\n...         print(\"I found Sheba\")\n...     else:\n...         print(\"Some other cat\")\n... else:\n...     print(\" a cat without 's'\")\n...\n...\nFound an 's' in a cat\nSome other cat\n>>>\n```", "```py\n>>> for i in range(10):\n...     x = i*2\n...     print(x)\n...\n...\n0\n2\n4\n6\n8\n10\n12\n14\n16\n18\n>>>\n```", "```py\n...     x = i*2\n...     print(x)\n```", "```py\n>>> for i in range(6):\n...     if i == 3:\n...         continue\n...     print(i)\n...\n...\n0\n1\n2\n4\n5\n>>>\n```", "```py\n>>> count = 0\n>>> while count < 3:\n...     print(f\"The count is {count}\")\n...     count += 1\n...\n...\nThe count is 0\nThe count is 1\nThe count is 2\n>>>\n```", "```py\n>>> count = 0\n>>> while True:\n...     print(f\"The count is {count}\")\n...     if count > 5:\n...         break\n...     count += 1\n...\n...\nThe count is 0\nThe count is 1\nThe count is 2\nThe count is 3\nThe count is 4\nThe count is 5\nThe count is 6\n>>>\n```", "```py\n>>> thinkers = ['Plato', 'PlayDo', 'Gumby']\n>>> while True:\n...     try:\n...         thinker = thinkers.pop()\n...         print(thinker)\n...     except IndexError as e:\n...         print(\"We tried to pop too many thinkers\")\n...         print(e)\n...         break\n...\n...\n...\nGumby\nPlayDo\nPlato\nWe tried to pop too many thinkers\npop from empty list\n>>>\n```", "```py\n>>> # Define a class for fancy defining fancy cars\n>>> class FancyCar():\n...     pass\n...\n>>> type(FancyCar)\n<class 'type'>\n>>> # Instantiate a fancy car\n>>> my_car = FancyCar()\n>>> type(my_car)\n<class '__main__.FancyCar'>\n```", "```py\n>>> # Define a class for fancy defining fancy cars\n>>> class FancyCar():\n...     # Add a class variable\n...     wheels = 4\n...     # Add a method\n...     def driveFast(self):\n...         print(\"Driving so fast\")\n...\n...\n...\n>>> # Instantiate a fancy car\n>>> my_car = FancyCar()\n>>> # Access the class attribute\n>>> my_car.wheels\n4\n>>> # Invoke the method\n>>> my_car.driveFast()\nDriving so fast\n>>>\n```", "```py\n>>> 2 in [1,2,3]\nTrue\n>>> 'a' not in 'cat'\nFalse\n>>> 10 in range(12)\nTrue\n>>> 10 not in range(2, 4)\nTrue\n```", "```py\n>>> my_sequence = 'Bill Cheatham'\n>>> my_sequence[0]\n'B'\n>>> my_sequence[2]\n'l'\n>>> my_sequence[12]\n'm'\n```", "```py\n>>> my_sequence = \"Bill Cheatham\"\n>>> my_sequence[–1]\n'm'\n>>> my_sequence[–2]\n'a'\n>>> my_sequence[–13]\n'B'\n```", "```py\n>>> my_sequence = \"Bill Cheatham\"\n>>> my_sequence.index('C')\n5\n>>> my_sequence.index('a')\n8\n>>> my_sequence.index('a',9, 12)\n11\n>>> my_sequence[11]\n'a'\n>>>\n```", "```py\nmy_sequence[start:stop:step]\n```", "```py\n>>> my_sequence = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n>>> my_sequence[2:5]\n['c', 'd', 'e']\n>>> my_sequence[:5]\n['a', 'b', 'c', 'd', 'e']\n>>> my_sequence[3:]\n['d', 'e', 'f', 'g']\n>>>\n```", "```py\n>>> my_sequence[–6:]\n['b', 'c', 'd', 'e', 'f', 'g']\n>>> my_sequence[3:–1]\n['d', 'e', 'f']\n>>>\n```", "```py\n>>> my_sequence = [0, 1, 2, 0, 1, 2, 3, 0, 1, 2, 3, 4]\n>>> len(my_sequence)\n12\n>>> min(my_sequence)\n0\n>>> max(my_sequence)\n4\n>>> my_sequence.count(1)\n3\n>>>\n```", "```py\n>>> list()\n[]\n>>> list(range(10))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> list(\"Henry Miller\")\n['H', 'e', 'n', 'r', 'y', ' ', 'M', 'i', 'l', 'l', 'e', 'r']\n>>>\n```", "```py\n>>> empty = []\n>>> empty\n[]\n>>> nine = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> nine\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> mixed = [0, 'a', empty, 'WheelHoss']\n>>> mixed\n[0, 'a', [], 'WheelHoss']\n>>>\n```", "```py\n>>> pies = ['cherry', 'apple']\n>>> pies\n['cherry', 'apple']\n>>> pies.append('rhubarb')\n>>> pies\n['cherry', 'apple', 'rhubarb']\n>>> pies.insert(1, 'cream')\n>>> pies\n['cherry', 'cream', 'apple', 'rhubarb']\n>>>\n```", "```py\n>>> pies\n['cherry', 'cream', 'apple', 'rhubarb']\n>>> desserts = ['cookies', 'paste']\n>>> desserts\n['cookies', 'paste']\n>>> desserts.extend(pies)\n>>> desserts\n['cookies', 'paste', 'cherry', 'cream', 'apple', 'rhubarb']\n>>>\n```", "```py\n>>> pies\n['cherry', 'cream', 'apple', 'rhubarb']\n>>> pies.pop()\n'rhubarb'\n>>> pies\n['cherry', 'cream', 'apple']\n>>> pies.pop(1)\n'cream'\n>>> pies\n['cherry', 'apple']\n```", "```py\n>>> pies.remove('apple')\n>>> pies\n['cherry']\n>>>\n```", "```py\n>>> squares = []\n>>> for i in range(10):\n...     squared = i*i\n...     squares.append(squared)\n...\n...\n>>> squares\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n>>>\n```", "```py\n>>> squares = [i*i for i in range(10)]\n>>> squares\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n>>>\n```", "```py\n>>> squares = [i*i for i in range(10) if i%2==0]\n>>> squares\n[0, 4, 16, 36, 64]\n>>>\n```", "```py\n>>> str()\n''\n>>> \"some new string!\"\n'some new string!'\n>>> 'or with single quotes'\n'or with single quotes'\n```", "```py\n>>> my_list = list()\n>>> str(my_list)\n'[]'\n```", "```py\n>>> multi_line = \"\"\"This is a\n... multi-line string,\n... which includes linebreaks.\n... \"\"\"\n>>> print(multi_line)\nThis is a\nmulti-line string,\nwhich includes linebreaks.\n>>>\n```", "```py\n>>> input = \"  I want more  \"\n>>> input.strip()\n'I want more'\n>>> input.rstrip()\n'  I want more'\n>>> input.lstrip()\n'I want more  '\n```", "```py\n>>> output = 'Barry'\n>>> output.ljust(10)\n'Barry     '\n>>> output.rjust(10, '*')\n'*****Barry'\n```", "```py\n>>> text = \"Mary had a little lamb\"\n>>> text.split()\n['Mary', 'had', 'a', 'little', 'lamb']\n>>> url = \"gt.motomomo.io/v2/api/asset/143\"\n>>> url.split('/')\n['gt.motomomo.io', 'v2', 'api', 'asset', '143']\n```", "```py\n>>> items = ['cow', 'milk', 'bread', 'butter']\n>>> \" and \".join(items)\n'cow and milk and bread and butter'\n```", "```py\n>>> name = \"bill monroe\"\n>>> name.capitalize()\n'Bill monroe'\n>>> name.upper()\n'BILL MONROE'\n>>> name.title()\n'Bill Monroe'\n>>> name.swapcase()\n'BILL MONROE'\n>>> name = \"BILL MONROE\"\n>>> name.lower()\n'bill monroe'\n```", "```py\n>>> \"William\".startswith('W')\nTrue\n>>> \"William\".startswith('Bill')\nFalse\n>>> \"Molly\".endswith('olly')\nTrue\n>>> \"abc123\".isalnum()\nTrue\n>>> \"abc123\".isalpha()\nFalse\n>>> \"abc\".isalnum()\nTrue\n>>> \"123\".isnumeric()\nTrue\n>>> \"Sandy\".istitle()\nTrue\n>>> \"Sandy\".islower()\nFalse\n>>> \"SANDY\".isupper()\nTrue\n```", "```py\n>>> \"%s + %s = %s\" % (1, 2, \"Three\")\n'1 + 2 = Three'\n>>>\n```", "```py\n>>> \"%.3f\" % 1.234567\n'1.235'\n```", "```py\n>>> '{} comes before {}'.format('first', 'second')\n'first comes before second'\n>>>\n```", "```py\n>>> '{1} comes after {0}, but {1} comes before {2}'.format('first',\n                                                           'second',\n                                                           'third')\n'second comes after first, but second comes before third'\n>>>\n```", "```py\n>>> '''{country} is an island.\n... {country} is off of the coast of\n... {continent} in the {ocean}'''.format(ocean='Indian Ocean',\n...                                      continent='Africa',\n...                                      country='Madagascar')\n'Madagascar is an island.\nMadagascar is off of the coast of\nAfrica in the Indian Ocean'\n```", "```py\n>>> values = {'first': 'Bill', 'last': 'Bailey'}\n>>> \"Won't you come home {first} {last}?\".format(**values)\n\"Won't you come home Bill Bailey?\"\n```", "```py\n>>> text = \"|{0:>22}||{0:<22}|\"\n>>> text.format('O','O')\n'|                     O||O                     |'\n>>> text = \"|{0:<>22}||{0:><22}|\"\n>>> text.format('O','O')\n'|<<<<<<<<<<<<<<<<<<<<<O||O>>>>>>>>>>>>>>>>>>>>>|'\n```", "```py\n>>> a = 1\n>>> b = 2\n>>> f\"a is {a}, b is {b}. Adding them results in {a + b}\"\n'a is 1, b is 2\\. Adding them results in 3'\n```", "```py\n>>> count = 43\n>>> f\"|{count:5d}\"\n'|   43'\n```", "```py\n>>> padding = 10\n>>> f\"|{count:{padding}d}\"\n'|        43'\n```", "```py\n>>> from string import Template\n>>> greeting = Template(\"$hello Mark Anthony\")\n>>> greeting.substitute(hello=\"Bonjour\")\n'Bonjour Mark Anthony'\n>>> greeting.substitute(hello=\"Zdravstvuyte\")\n'Zdravstvuyte Mark Anthony'\n>>> greeting.substitute(hello=\"Nǐn hǎo\")\n'Nǐn hǎo Mark Anthony'\n```", "```py\n>>> map = dict()\n>>> type(map)\n<class 'dict'>\n>>> map\n{}\n>>> kv_list = [['key-1', 'value-1'], ['key-2', 'value-2']]\n>>> dict(kv_list)\n{'key-1': 'value-1', 'key-2': 'value-2'}\n```", "```py\n>>> map = {'key-1': 'value-1', 'key-2': 'value-2'}\n>>> map\n{'key-1': 'value-1', 'key-2': 'value-2'}\n```", "```py\n>>> map['key-1']\n'value-1'\n>>> map['key-2']\n'value-2'\n```", "```py\n>>> map\n{'key-1': 'value-1', 'key-2': 'value-2'}\n>>> map['key-3'] = 'value-3'\n>>> map\n{'key-1': 'value-1', 'key-2': 'value-2', 'key-3': 'value-3'}\n>>> map['key-1'] = 13\n>>> map\n{'key-1': 13, 'key-2': 'value-2', 'key-3': 'value-3'}\n```", "```py\n>>> map['key-4']\nTraceback (most recent call last):\n  File \"<input>\", line 1, in <module>\n    map['key-4']\nKeyError: 'key-4'\n```", "```py\n>>> if 'key-4' in map:\n...     print(map['key-4'])\n... else:\n...     print('key-4 not there')\n...\n...\nkey-4 not there\n```", "```py\n>>> map.get('key-4', 'default-value')\n'default-value'\n```", "```py\n>>> del(map['key-1'])\n>>> map\n{'key-2': 'value-2', 'key-3': 'value-3'}\n```", "```py\n>>> map.keys()\ndict_keys(['key-1', 'key-2'])\n>>> map.values()\ndict_values(['value-1', 'value-2'])\n>>> for key, value in map.items():\n...     print(f\"{key}: {value}\")\n...\n...\nkey-1: value-1\nkey-2: value-2\n```", "```py\n>>> letters = 'abcde'\n>>> # mapping individual letters to their upper-case representations\n>>> cap_map = {x: x.upper() for x in letters}\n>>> cap_map['b']\n'B'\n```", "```py\ndef <FUNCTION NAME>(<PARAMETERS>):\n    <CODE BLOCK>\n```", "```py\n>>> def my_function():\n...    '''This is a doc string.\n...\n...    It should describe what the function does,\n...    what parameters work, and what the\n...    function returns.\n...    '''\n```", "```py\n>>> def positioned(first, second):\n...     \"\"\"Assignment based on order.\"\"\"\n...     print(f\"first: {first}\")\n...     print(f\"second: {second}\")\n...\n...\n>>> positioned(1, 2)\nfirst: 1\nsecond: 2\n>>>\n```", "```py\n>>> def keywords(first=1, second=2):\n...     '''Default values assigned'''\n...     print(f\"first: {first}\")\n...     print(f\"second: {second}\")\n...\n...\n```", "```py\n>>> keywords(0)\nfirst: 0\nsecond: 2\n>>> keywords(3,4)\nfirst: 3\nsecond: 4\n>>> keywords(second='one', first='two')\nfirst: two\nsecond: one\n```", "```py\n>>> def no_return():\n...     '''No return defined'''\n...     pass\n...\n>>> result = no_return()\n>>> print(result)\nNone\n>>> def return_one():\n...     '''Returns 1'''\n...     return 1\n...\n>>> result = return_one()\n>>> print(result)\n1\n```", "```py\n>>> def double(input):\n...     '''double input'''\n...     return input*2\n...\n>>> double\n<function double at 0x107d34ae8>\n>>> type(double)\n<class 'function'>\n>>> def triple(input):\n...     '''Triple input'''\n...     return input*3\n...\n>>> functions = [double, triple]\n>>> for function in functions:\n...     print(function(3))\n...\n...\n6\n9\n```", "```py\n>>> items = [[0, 'a', 2], [5, 'b', 0], [2, 'c', 1]]\n>>> sorted(items)\n[[0, 'a', 2], [2, 'c', 1], [5, 'b', 0]]\n```", "```py\n>>> def second(item):\n...     '''return second entry'''\n...     return item[1]\n...\n>>> sorted(items, key=second)\n[[0, 'a', 2], [5, 'b', 0], [2, 'c', 1]]\n```", "```py\nlambda <PARAM>: <RETURN EXPRESSION>\n```", "```py\n>>> sorted(items, key=lambda item: item[1])\n[[0, 'a', 2], [5, 'b', 0], [2, 'c', 1]]\n>>> sorted(items, key=lambda item: item[2])\n[[5, 'b', 0], [2, 'c', 1], [0, 'a', 2]]\n```", "```py\nIn [1]: cc_list = '''Ezra Koenig <ekoenig@vpwk.com>,\n ...: Rostam Batmanglij <rostam@vpwk.com>,\n ...: Chris Tomson <ctomson@vpwk.com,\n ...: Bobbi Baio <bbaio@vpwk.com'''\n```", "```py\nIn [2]: 'Rostam' in cc_list\nOut[2]: True\n```", "```py\nIn [3]: import re\n\nIn [4]: re.search(r'Rostam', cc_list)\nOut[4]: <re.Match object; span=(32, 38), match='Rostam'>\n```", "```py\n>>> if re.search(r'Rostam', cc_list):\n...     print('Found Rostam')\n...\n...\nFound Rostam\n```", "```py\nIn [5]: re.search(r'[R,B]obb[i,y]', cc_list)\nOut[5]: <re.Match object; span=(101, 106), match='Bobbi'>\n```", "```py\nIn [6]: re.search(r'Chr[a-z][a-z]', cc_list)\nOut [6]: <re.Match object; span=(69, 74), match='Chris'>\n```", "```py\nIn [7]: re.search(r'[A-Za-z]+', cc_list)\nOut [7]: <re.Match object; span=(0, 4), match='Ezra'>\nIn [8]: re.search(r'[A-Za-z]{6}', cc_list)\nOut [8]: <re.Match object; span=(5, 11), match='Koenig'>\n```", "```py\nIn [9]: re.search(r'[A-Za-z]+@[a-z]+\\.[a-z]+', cc_list)\nOut[9]: <re.Match object; span=(13, 29), match='ekoenig@vpwk.com'>\n```", "```py\n>>> re.search(r'\\w+', cc_list)\n<re.Match object; span=(0, 4), match='Ezra'>\n```", "```py\n>>> re.search(r'\\w+\\@\\w+\\.\\w+', cc_list)\n<re.Match object; span=(13, 29), match='ekoenig@vpwk.com'>\n```", "```py\n>>> re.search(r'(\\w+)\\@(\\w+)\\.(\\w+)', cc_list)\n<re.Match object; span=(13, 29), match='ekoenig@vpwk.com'>\n>>> matched = re.search(r'(\\w+)\\@(\\w+)\\.(\\w+)', cc_list)\n>>> matched.group(0)\n'ekoenig@vpwk.com'\n>>> matched.group(1)\n'ekoenig'\n>>> matched.group(2)\n'vpwk'\n>>> matched.group(3)\n'com'\n```", "```py\n>>> matched = re.search(r'(?P<name>\\w+)\\@(?P<SLD>\\w+)\\.(?P<TLD>\\w+)', cc_list)\n>>> matched.group('name')\n'ekoenig'\n>>> print(f'''name: {matched.group(\"name\")}\n... Secondary Level Domain: {matched.group(\"SLD\")}\n... Top Level Domain: {matched.group(\"TLD\")}''')\nname: ekoenig\nSecondary Level Domain: vpwk\nTop Level Domain: com\n```", "```py\n>>> matched = re.findall(r'\\w+\\@\\w+\\.\\w+', cc_list)\n>>> matched\n['ekoenig@vpwk.com', 'rostam@vpwk.com', 'ctomson@vpwk.com', 'cbaio@vpwk.com']\n>>> matched = re.findall(r'(\\w+)\\@(\\w+)\\.(\\w+)', cc_list)\n>>> matched\n[('ekoenig', 'vpwk', 'com'), ('rostam', 'vpwk', 'com'),\n ('ctomson', 'vpwk', 'com'), ('cbaio', 'vpwk', 'com')]\n>>> names = [x[0] for x in matched]\n>>> names\n['ekoenig', 'rostam', 'ctomson', 'cbaio']\n```", "```py\n>>> matched = re.finditer(r'\\w+\\@\\w+\\.\\w+', cc_list)\n>>> matched\n<callable_iterator object at 0x108e68748>\n>>> next(matched)\n<re.Match object; span=(13, 29), match='ekoenig@vpwk.com'>\n>>> next(matched)\n<re.Match object; span=(51, 66), match='rostam@vpwk.com'>\n>>> next(matched)\n<re.Match object; span=(83, 99), match='ctomson@vpwk.com'>\n```", "```py\n>>> matched = re.finditer(\"(?P<name>\\w+)\\@(?P<SLD>\\w+)\\.(?P<TLD>\\w+)\", cc_list)\n>>> for m in matched:\n...     print(m.groupdict())\n...\n...\n{'name': 'ekoenig', 'SLD': 'vpwk', 'TLD': 'com'}\n{'name': 'rostam', 'SLD': 'vpwk', 'TLD': 'com'}\n{'name': 'ctomson', 'SLD': 'vpwk', 'TLD': 'com'}\n{'name': 'cbaio', 'SLD': 'vpwk', 'TLD': 'com'}\n```", "```py\n>>> re.sub(\"\\d\", \"#\", \"The passcode you entered was  09876\")\n'The passcode you entered was  #####'\n>>> users = re.sub(\"(?P<name>\\w+)\\@(?P<SLD>\\w+)\\.(?P<TLD>\\w+)\",\n                   \"\\g<TLD>.\\g<SLD>.\\g<name>\", cc_list)\n>>> print(users)\nEzra Koenig <com.vpwk.ekoenig>,\nRostam Batmanglij <com.vpwk.rostam>,\nChris Tomson <com.vpwk.ctomson,\nChris Baio <com.vpwk.cbaio\n```", "```py\n>>> regex = re.compile(r'\\w+\\@\\w+\\.\\w+')\n>>> regex.search(cc_list)\n<re.Match object; span=(13, 29), match='ekoenig@vpwk.com'>\n```", "```py\n>>> def count():\n...     n = 0\n...     while True:\n...         n += 1\n...         yield n\n...\n...\n>>> counter = count()\n>>> counter\n<generator object count at 0x10e8509a8>\n>>> next(counter)\n1\n>>> next(counter)\n2\n>>> next(counter)\n3\n```", "```py\n>>> def fib():\n...     first = 0\n...     last = 1\n...     while True:\n...         first, last = last, first + last\n...         yield first\n...\n>>> f = fib()\n>>> next(f)\n1\n>>> next(f)\n1\n>>> next(f)\n2\n>>> next(f)\n3\n```", "```py\n>>> f = fib()\n>>> for x in f:\n...     print(x)\n...     if x > 12:\n...         break\n...\n1\n1\n2\n3\n5\n8\n13\n```", "```py\n>>> list_o_nums = [x for x in range(100)]\n>>> gen_o_nums = (x for x in range(100))\n>>> list_o_nums\n[0, 1, 2, 3, ...  97, 98, 99]\n>>> gen_o_nums\n<generator object <genexpr> at 0x10ea14408>\n```", "```py\n>>> import sys\n>>> sys.getsizeof(list_o_nums)\n912\n>>> sys.getsizeof(gen_o_nums)\n120\n```", "```py\nIn [3]: var_ls = !ls -l\nIn [4]: type(var_ls)\nOut[4]: IPython.utils.text.SList\n```", "```py\nIn [6]: df = !df\nIn [7]: df.sort(3, nums = True)\n```", "```py\nIn [10]: ls = !ls -l /usr/bin\nIn [11]: ls.grep(\"kill\")\nOut[11]:\n['-rwxr-xr-x   1 root   wheel      1621 Aug 20  2018 kill.d',\n '-rwxr-xr-x   1 root   wheel     23984 Mar 20 23:10 killall',\n '-rwxr-xr-x   1 root   wheel     30512 Mar 20 23:10 pkill']\n```", "```py\nIn [13]: %%bash\n    ...: uname -a\n    ...:\n    ...:\nDarwin nogibjj.local 18.5.0 Darwin Kernel Version 18.5.0: Mon Mar ...\n```", "```py\nIn [16]: %%writefile print_time.py\n    ...: #!/usr/bin/env python\n    ...: import datetime\n    ...: print(datetime.datetime.now().time())\n    ...:\n    ...:\n    ...:\nWriting print_time.py\n\nIn [17]: cat print_time.py\n#!/usr/bin/env python\nimport datetime\nprint(datetime.datetime.now().time())\n\nIn [18]: !python print_time.py\n19:06:00.594914\n```", "```py\nIn [20]: %who\ndf     ls     var_ls\n```"]