["```py\n*name*: *type*\n```", "```py\n*name*: *type* = *value*\n```", "```py\nthing: str = \"yeti\"\n```", "```py\nfrom typing import Str\nthing: Str = \"yeti\"\n```", "```py\nphysics_magic_number: float = 1.0/137.03599913\nhp_lovecraft_noun: str = \"ichor\"\nexploding_sheep: tuple = \"sis\", \"boom\", bah!\"\nresponses: dict = {\"Marco\": \"Polo\", \"answer\": 42}\n```", "```py\n*name*: dict[*keytype*, *valtype*] = {*key1*: *val1*, *key2*: *val2*}\n```", "```py\nfrom typing import Any\nresponses: dict[str, Any] = {\"Marco\": \"Polo\", \"answer\": 42}\n```", "```py\nfrom typing import Union\nresponses: dict[str, Union[str, int]] = {\"Marco\": \"Polo\", \"answer\": 42}\n```", "```py\nresponses: dict[str, str | int] = {\"Marco\": \"Polo\", \"answer\": 42}\n```", "```py\n$ python\n...\n>>> thing0\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name *thing0* is not defined\n>>> thing0: str\n```", "```py\n$ python\n...\n>>> thing1: str = \"yeti\"\n>>> thing1 = 47\n```", "```py\n$ mypy stuff.py\nstuff.py:2: error: Incompatible types in assignment\n(expression has type \"int\", variable has type \"str\")\nFound 1 error in 1 file (checked 1 source file)\n```", "```py\n*function*(*args*) -> *type*:\n```", "```py\ndef get_thing() -> str:\n   return \"yeti\"\n```", "```py\n>>> tuple_thing = (\"yeti\", \"CN\", \"Himalayas\",\n    \"Hirsute Himalayan\", \"Abominable Snowman\")\n>>> print(\"Name is\", tuple_thing[0])\nName is yeti\n```", "```py\n>>> list_thing = [\"yeti\", \"CN\", \"Himalayas\",\n    \"Hirsute Himalayan\", \"Abominable Snowman\"]\n>>> print(\"Name is\", list_thing[0])\nName is yeti\n```", "```py\n>>> NAME = 0\n>>> COUNTRY = 1\n>>> AREA = 2\n>>> DESCRIPTION = 3\n>>> AKA = 4\n>>> tuple_thing = (\"yeti\", \"CN\", \"Himalayas\",\n    \"Hirsute Himalayan\", \"Abominable Snowman\")\n>>> print(\"Name is\", tuple_thing[NAME])\nName is yeti\n```", "```py\n>>> dict_thing = {\"name\": \"yeti\",\n...     \"country\": \"CN\",\n...     \"area\": \"Himalayas\",\n...     \"description\": \"Hirsute Himalayan\",\n...     \"aka\": \"Abominable Snowman\"}\n>>> print(\"Name is\", dict_thing[\"name\"])\nName is yeti\n```", "```py\n>>> from collections import namedtuple\n>>> CreatureNamedTuple = namedtuple(\"CreatureNamedTuple\",\n...     \"name, country, area, description, aka\")\n>>> namedtuple_thing = CreatureNamedTuple(\"yeti\",\n...     \"CN\",\n...     \"Himalaya\",\n...     \"Hirsute HImalayan\",\n...     \"Abominable Snowman\")\n>>> print(\"Name is\", namedtuple_thing[0])\nName is yeti\n>>> print(\"Name is\", namedtuple_thing.name)\nName is yeti\n```", "```py\n>>> class CreatureClass():\n...     def __init__(self,\n...       name: str,\n...       country: str,\n...       area: str,\n...       description: str,\n...       aka: str):\n...         self.name = name\n...         self.country = country\n...         self.area = area\n...         self.description = description\n...         self.aka = aka\n...\n>>> class_thing = CreatureClass(\n...     \"yeti\",\n...     \"CN\",\n...     \"Himalayas\"\n...     \"Hirsute Himalayan\",\n...     \"Abominable Snowman\")\n>>> print(\"Name is\", class_thing.name)\nName is yeti\n```", "```py\n>>> from dataclasses import dataclass\n>>>\n>>> @dataclass\n... class CreatureDataClass():\n...     name: str\n...     country: str\n...     area: str\n...     description: str\n...     aka: str\n...\n>>> dataclass_thing = CreatureDataClass(\n...     \"yeti\",\n...     \"CN\",\n...     \"Himalayas\"\n...     \"Hirsute Himalayan\",\n...     \"Abominable Snowman\")\n>>> print(\"Name is\", dataclass_thing.name)\nName is yeti\n```", "```py\nfrom pydantic import BaseModel\n\nclass Creature(BaseModel):\n    name: str\n    country: str\n    area: str\n    description: str\n    aka: str\n\nthing = Creature(\n    name=\"yeti\",\n    country=\"CN\",\n    area=\"Himalayas\",\n    description=\"Hirsute Himalayan\",\n    aka=\"Abominable Snowman\")\n)\nprint(\"Name is\", thing.name)\n```", "```py\n>>> thing = Creature(\n...     name=\"yeti\",\n...     country=\"CN\",\n...     area=\"Himalayas\"\n...     description=\"Hirsute Himalayan\",\n...     aka=\"Abominable Snowman\")\n>>> print(\"Name is\", thing.name)\nName is yeti\n```", "```py\nfrom model import Creature\n\n_creatures: list[Creature] = [\n    Creature(name=\"yeti\",\n             country=\"CN\",\n             area=\"Himalayas\",\n             description=\"Hirsute Himalayan\",\n             aka=\"Abominable Snowman\"\n             ),\n    Creature(name=\"sasquatch\",\n             country=\"US\",\n             area=\"*\",\n             description=\"Yeti's Cousin Eddie\",\n             aka=\"Bigfoot\")\n]\n\ndef get_creatures() -> list[Creature]:\n    return _creatures\n```", "```py\nfrom model import Creature\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/creature\")\ndef get_all() -> list[Creature]:\n    from data import get_creatures\n    return get_creatures()\n```", "```py\n$ uvicorn creature:app\nINFO:     Started server process [24782]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n```", "```py\n$ http http://localhost:8000/creature\nHTTP/1.1 200 OK\ncontent-length: 183\ncontent-type: application/json\ndate: Mon, 12 Sep 2022 02:21:15 GMT\nserver: uvicorn\n\n[\n    {\n        \"aka\": \"Abominable Snowman\",\n        \"area\": \"Himalayas\",\n        \"country\": \"CN\",\n        \"name\": \"yeti\",\n        \"description\": \"Hirsute Himalayan\"\n    },\n    {\n        \"aka\": \"Bigfoot\",\n        \"country\": \"US\",\n        \"area\": \"*\",\n        \"name\": \"sasquatch\",\n        \"description\": \"Yeti's Cousin Eddie\"\n    }\n```", "```py\nINFO:     127.0.0.1:52375 - \"GET /creature HTTP/1.1\" 200 OK\n```", "```py\nfrom model import Creature\n\ndragon = Creature(\n    name=\"dragon\",\n    description=[\"incorrect\", \"string\", \"list\"],\n    country=\"*\" ,\n    area=\"*\",\n    aka=\"firedrake\")\n```", "```py\n$ python test1.py\nTraceback (most recent call last):\n  File \".../test1.py\", line 3, in <module>\n    dragon = Creature(\n  File \"pydantic/main.py\", line 342, in\n    pydantic.main.BaseModel.*init*\n    pydantic.error_wrappers.ValidationError:\n    1 validation error for Creature description\n  str type expected (type=type_error.str)\n```", "```py\n>>> from pydantic import BaseModel, constr\n>>>\n>>> class Creature(BaseModel):\n...     name: constr(min_length=2)\n...     country: str\n...     area: str\n...     description: str\n...     aka: str\n...\n>>> bad_creature = Creature(name=\"!\",\n...     description=\"it's a raccoon\",\n...     area=\"your attic\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"pydantic/main.py\", line 342,\n  in pydantic.main.BaseModel.__init__\npydantic.error_wrappers.ValidationError:\n1 validation error for Creature name\n  ensure this value has at least 2 characters\n  (type=value_error.any_str.min_length; limit_value=2)\n```", "```py\n>>> from pydantic import BaseModel, Field\n>>>\n>>> class Creature(BaseModel):\n...     name: str = Field(..., min_length=2)\n...     country: str\n...     area: str\n...     description: str\n...     aka: str\n...\n>>> bad_creature = Creature(name=\"!\",\n...     area=\"your attic\",\n...     description=\"it's a raccoon\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"pydantic/main.py\", line 342,\n  in pydantic.main.BaseModel.__init__\npydantic.error_wrappers.ValidationError:\n1 validation error for Creature name\n  ensure this value has at least 2 characters\n  (type=value_error.any_str.min_length; limit_value=2)\n```"]