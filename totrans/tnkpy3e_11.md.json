["```py\nnumbers = [42, 123] \n```", "```py\ncheeses = ['Cheddar', 'Edam', 'Gouda'] \n```", "```py\nt = ['spam', 2.0, 5, [10, 20]] \n```", "```py\nempty = [] \n```", "```py\nlen(cheeses) \n```", "```py\n3 \n```", "```py\ncheeses[0] \n```", "```py\n'Cheddar' \n```", "```py\nnumbers[1] = 17\nnumbers \n```", "```py\n[42, 17] \n```", "```py\n'Edam' in cheeses \n```", "```py\nTrue \n```", "```py\n'Wensleydale' in cheeses \n```", "```py\nFalse \n```", "```py\nt = ['spam', 2.0, 5, [10, 20]]\nlen(t) \n```", "```py\n4 \n```", "```py\n10 in t \n```", "```py\nFalse \n```", "```py\nletters = ['a', 'b', 'c', 'd']\nletters[1:3] \n```", "```py\n['b', 'c'] \n```", "```py\nletters[:2] \n```", "```py\n['a', 'b'] \n```", "```py\nletters[2:] \n```", "```py\n['c', 'd'] \n```", "```py\nletters[:] \n```", "```py\n['a', 'b', 'c', 'd'] \n```", "```py\nlist(letters) \n```", "```py\n['a', 'b', 'c', 'd'] \n```", "```py\nt1 = [1, 2]\nt2 = [3, 4]\nt1 + t2 \n```", "```py\n[1, 2, 3, 4] \n```", "```py\n['spam'] * 4 \n```", "```py\n['spam', 'spam', 'spam', 'spam'] \n```", "```py\nsum(t1) \n```", "```py\n3 \n```", "```py\nmin(t1) \n```", "```py\n1 \n```", "```py\nmax(t2) \n```", "```py\n4 \n```", "```py\nletters.append('e')\nletters \n```", "```py\n['a', 'b', 'c', 'd', 'e'] \n```", "```py\nletters.extend(['f', 'g'])\nletters \n```", "```py\n['a', 'b', 'c', 'd', 'e', 'f', 'g'] \n```", "```py\nt = ['a', 'b', 'c']\nt.pop(1) \n```", "```py\n'b' \n```", "```py\nt \n```", "```py\n['a', 'c'] \n```", "```py\nt = ['a', 'b', 'c']\nt.remove('b') \n```", "```py\nt \n```", "```py\n['a', 'c'] \n```", "```py\nt.remove('d') \n```", "```py\nValueError: list.remove(x): x not in list \n```", "```py\ns = 'spam'\nt = list(s)\nt \n```", "```py\n['s', 'p', 'a', 'm'] \n```", "```py\ns = 'pining for the fjords'\nt = s.split()\nt \n```", "```py\n['pining', 'for', 'the', 'fjords'] \n```", "```py\ns = 'ex-parrot'\nt = s.split('-')\nt \n```", "```py\n['ex', 'parrot'] \n```", "```py\ndelimiter = ' '\nt = ['pining', 'for', 'the', 'fjords']\ns = delimiter.join(t)\ns \n```", "```py\n'pining for the fjords' \n```", "```py\nfor cheese in cheeses:\n    print(cheese) \n```", "```py\nCheddar\nEdam\nGouda \n```", "```py\ns = 'pining for the fjords'\n\nfor word in s.split():\n    print(word) \n```", "```py\npining\nfor\nthe\nfjords \n```", "```py\nfor x in []:\n    print('This never happens.') \n```", "```py\nscramble = ['c', 'a', 'b']\nsorted(scramble) \n```", "```py\n['a', 'b', 'c'] \n```", "```py\nscramble \n```", "```py\n['c', 'a', 'b'] \n```", "```py\nsorted('letters') \n```", "```py\n['e', 'e', 'l', 'r', 's', 't', 't'] \n```", "```py\n''.join(sorted('letters')) \n```", "```py\n'eelrstt' \n```", "```py\na = 'banana'\nb = 'banana' \n```", "```py\na = 'banana'\nb = 'banana'\na is b \n```", "```py\nTrue \n```", "```py\na = [1, 2, 3]\nb = [1, 2, 3]\na is b \n```", "```py\nFalse \n```", "```py\na = [1, 2, 3]\nb = a\nb is a \n```", "```py\nTrue \n```", "```py\nb[0] = 5\na \n```", "```py\n[5, 2, 3] \n```", "```py\na = 'banana'\nb = 'banana' \n```", "```py\ndef pop_first(lst):\n    return lst.pop(0) \n```", "```py\nletters = ['a', 'b', 'c']\npop_first(letters) \n```", "```py\n'a' \n```", "```py\nletters \n```", "```py\n['b', 'c'] \n```", "```py\n[2.04, 1.24, 1.06, 0.85] \n```", "```py\nword_list = []\n\nfor line in open('words.txt'):\n    word = line.strip()\n    word_list.append(word)\n\nlen(word_list) \n```", "```py\n113783 \n```", "```py\nstring = open('words.txt').read()\nlen(string) \n```", "```py\n1016511 \n```", "```py\nword_list = string.split()\nlen(word_list) \n```", "```py\n113783 \n```", "```py\n'demotic' in word_list \n```", "```py\nTrue \n```", "```py\n'contrafibularities' in word_list \n```", "```py\nFalse \n```", "```py\nword = 'plumage!'\nword = word.strip('!')\nword \n```", "```py\n'plumage' \n```", "```py\nt = [1, 2, 3]\nt = t.remove(3)           # WRONG! \n```", "```py\nt.remove(2) \n```", "```py\nAttributeError: 'NoneType' object has no attribute 'remove' \n```", "```py\n# This cell tells Jupyter to provide detailed debugging information\n# when a runtime error occurs. Run it before working on the exercises.\n\n%xmode Verbose \n```", "```py\nreversed('parrot') \n```", "```py\n<reversed at 0x7fe3de636b60> \n```", "```py\nlist(reversed('parrot')) \n```", "```py\n['t', 'o', 'r', 'r', 'a', 'p'] \n```", "```py\n''.join(reversed('parrot')) \n```", "```py\n'torrap' \n```", "```py\ndef reverse_word(word):\n    return ''.join(reversed(word)) \n```", "```py\nfor word in word_list:\n    if len(word) >= 7 and is_palindrome(word):\n        print(word) \n```"]