["```py\n>>> f = 1.1 + 2.2 - 3.3  *`# f should be equal to 0`*\n>>> f\n```", "```py\n4.440892098500626e-16\n```", "```py\n>>> f = 2 ** 53\n>>> f\n```", "```py\n9007199254740992\n```", "```py\n>>> f + 1\n```", "```py\n9007199254740993    *# integer arithmetic is not bounded*\n```", "```py\n>>> f + 1.0\n```", "```py\n9007199254740992.0  *# float conversion loses integer precision at 2**53*\n```", "```py\n>>> `import` math\n>>> f = 1.1 + 2.2 - 3.3  *`# f intuitively equal to 0`*\n>>> f == 0\n```", "```py\nFalse\n```", "```py\n>>> f\n```", "```py\n4.440892098500626e-16\n```", "```py\n>>> *`# default tolerance fine for this comparison`*\n>>> math.isclose(-1, f-1)\n```", "```py\nTrue\n```", "```py\n>>> *`# near-0 comparison with default tolerances`*\n>>> math.isclose(0, f)\n```", "```py\nFalse\n```", "```py\n>>> *`# must use abs_tol for comparison with 0`*\n>>> math.isclose(0, f, abs_tol=1e-15)\n```", "```py\nTrue\n```", "```py\n>>> f = 1\n>>> `while` f != 0:\n... f -= 0.2 \n```", "```py\n>>> 1-0.2-0.2-0.2-0.2-0.2  *`# should be 0, but...`*\n```", "```py\n5.551115123125783e-17\n```", "```py\n>>> f = 1\n>>> count = 0\n>>> `while` f > 0:\n...     count += 1\n...     f -= 0.2\n>>> print(count)\n```", "```py\n6   *# one loop too many!*\n```", "```py\n>>> f = 1\n>>> count = 0\n>>> `while` `not` math.isclose(0,f,abs_tol=1e-15):\n...     count += 1\n...     f -= 0.2\n>>> print(count)\n```", "```py\n5   *# just right this time!*\n```", "```py\n>>> math.atan(-1./-1.)\n```", "```py\n0.7853981633974483\n```", "```py\n>>> math.atan2(-1., -1.)\n```", "```py\n-2.356194490192345\n```", "```py\nabs(x-y) <= max(rel_tol*max(abs(x), \n                abs(y)),abs_tol)\n```", "```py\nL.sort(key=operator.itemgetter(2, 0))\n```", "```py\n>>> `from` fractions `import` Fraction\n>>> `from` decimal `import` Decimal\n>>> Fraction(1,10)\n```", "```py\nFraction(1, 10)\n```", "```py\n>>> Fraction(Decimal('0.1'))\n```", "```py\nFraction(1, 10)\n```", "```py\n>>> Fraction('0.1')\n```", "```py\nFraction(1, 10)\n```", "```py\n>>> Fraction('1/10')\n```", "```py\nFraction(1, 10)\n```", "```py\n>>> Fraction(0.1)\n```", "```py\nFraction(3602879701896397, 36028797018963968)\n```", "```py\n>>> Fraction(-1, 10)\n```", "```py\nFraction(-1, 10)\n```", "```py\n>>> Fraction(-1,-10)\n```", "```py\nFraction(1, 10)\n```", "```py\n>>> `from` decimal `import` Decimal\n>>> df = Decimal(0.1)\n>>> df\n```", "```py\nDecimal('0.1000000000000000055511151231257827021181583404541015625')\n```", "```py\n>>> ds = Decimal(str(0.1))  *`# or, more directly, Decimal('0.1')`*\n>>> ds\n```", "```py\nDecimal('0.1')\n```", "```py\n`def` dfs(x):\n    `return` Decimal(str(x))\n```", "```py\n>>> dq = Decimal(0.1).quantize(Decimal('.00'))\n>>> dq\n```", "```py\nDecimal('0.10')\n```", "```py\n>>> pidigits = (3, 1, 4, 1, 5)\n>>> Decimal((1, pidigits, -4))\n```", "```py\nDecimal('-3.1415')\n```", "```py\n>>> `import` math\n>>> `from` decimal `import` Decimal\n>>> a = 1.1\n>>> d = Decimal('1.1')\n>>> a == d\n```", "```py\nFalse\n```", "```py\n>>> math.isclose(a, d)\n```", "```py\nTrue\n```", "```py\n>>> a + d\n```", "```py\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nTypeError: unsupported operand type(s) for +: 'float' and \n'decimal.Decimal'\n```", "```py\n>>> d + Decimal(a) *`# new decimal constructed from 'a'`*\n```", "```py\nDecimal('2.200000000000000088817841970')\n```", "```py\n>>> d + Decimal(str(a)) *`# convert 'a' to decimal with str(a)`*\n```", "```py\nDecimal('2.20')\n```", "```py\n>>> `import` numpy `as` np\n>>> np.array([1, 2, 3, 4])  *`# from a Python list`*\n```", "```py\narray([1, 2, 3, 4])\n```", "```py\n>>> np.array(5, 6, 7)  *`# a common error: passing items separately (they`*\n                       *`# must be passed as a sequence, e.g. a list)`*\n```", "```py\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nTypeError: array() takes from 1 to 2 positional arguments, 3 were given\n```", "```py\n>>> s = 'alph', 'abet'  *`# a tuple of two strings`*\n>>> np.array(s)\n```", "```py\narray(['alph', 'abet'], dtype='<U4')\n```", "```py\n>>> t = [(1,2), (3,4), (0,1)]  *`# a list of tuples`*\n>>> np.array(t, dtype='float64')  *`# explicit type designation`*\n```", "```py\narray([[1., 2.],\n [3., 4.],\n [0., 1.]])\n```", "```py\n>>> x = np.array(1.2, dtype=np.float16)  *`# a scalar`*\n>>> x.shape\n```", "```py\n()\n```", "```py\n>>> x.max()\n```", "```py\n1.2\n```", "```py\n>>> np.zeros(3)  *`# shape defaults to a vector`*\n```", "```py\narray([0., 0., 0.])\n```", "```py\n>>> np.ones((2,2))  *`# with shape specified`*\n```", "```py\narray([[1., 1.],\n[1., 1.]])\n```", "```py\n>>> np.empty(9)  *`# arbitrary float64s`*\n```", "```py\narray([ 6.17779239e-31, -1.23555848e-30,  3.08889620e-31,\n       -1.23555848e-30,  2.68733969e-30, -8.34001973e-31,  \n\t    3.08889620e-31, -8.34001973e-31,  4.78778910e-31])\n```", "```py\n>>> np.indices((3,3))\n```", "```py\narray([[[0, 0, 0],\n [1, 1, 1],\n [2, 2, 2]],\n\n [[0, 1, 2],\n [0, 1, 2],\n [0, 1, 2]]])\n```", "```py\n>>> np.arange(0, 10, 2)  *`# upper bound excluded`*\n```", "```py\narray([0, 2, 4, 6, 8])\n```", "```py\n>>> np.linspace(0, 1, 5)  *`# default: endpoint included`*\n```", "```py\narray([0\\.  , 0.25, 0.5 , 0.75, 1\\.  ])\n```", "```py\n>>> np.linspace(0, 1, 5, endpoint=False)  *`# endpoint not included`*\n```", "```py\narray([0\\. , 0.2, 0.4, 0.6, 0.8])\n```", "```py\n>>> np.genfromtxt(io.BytesIO(b'1 2 3\\n4 5 6'))  *`# using a pseudo-file`*\n```", "```py\narray([[1., 2., 3.],\n [4., 5., 6.]])\n```", "```py\n>>> `with` open('x.csv', 'wb') as f:\n...     f.write(b'2,4,6\\n1,3,5')\n...\n```", "```py\n11\n```", "```py\n>>> np.genfromtxt('x.csv', delimiter=',')  *`# using an actual CSV file`*\n```", "```py\narray([[2., 4., 6.],\n [1., 3., 5.]])\n```", "```py\n`for` x `in` a:\n    process(x)\n```", "```py\n`for` _ `in` range(len(*`a`*)):\n    x = *`a`*[_]\n    process(*`x`*)\n```", "```py\n>>> a = np.arange(8)\n>>> a\n```", "```py\narray([0, 1, 2, 3, 4, 5, 6, 7])\n```", "```py\n>>> a = a.reshape(2,4)\n>>> a\n```", "```py\narray([[0, 1, 2, 3],\n [4, 5, 6, 7]])\n```", "```py\n>>> print(a[1,2])\n```", "```py\n6\n```", "```py\n>>> a[:,:2]\n```", "```py\narray([[0, 1],\n [4, 5]])\n```", "```py\n>>> for row in a:\n...     print(row)\n...\n```", "```py\n[0 1 2 3]\n[4 5 6 7]\n```", "```py\n>>> for row in a:\n...     for col in row[:2]:  *`# first two items in each row`*\n...         print(col)\n...\n```", "```py\n0\n1\n4\n5\n```", "```py\n>>> a = np.arange(6).reshape(2,3)  *`# a 2D matrix`*\n>>> b = np.arange(3)               *`# a vector`*\n>>>\n>>> a\n```", "```py\narray([[0, 1, 2],\n [3, 4, 5]])\n```", "```py\n>>> a + 1    *`# adding a scalar`*\n```", "```py\narray([[1, 2, 3],\n [4, 5, 6]])\n```", "```py\n>>> a + b    *`# adding a vector`*\n```", "```py\narray([[0, 2, 4],\n [3, 5, 7]])\n```", "```py\n>>> a * 2    *`# multiplying by a scalar`*\n```", "```py\narray([[ 0,  2,  4],\n [ 6,  8, 10]])\n```", "```py\n>>> a * b    *`# multiplying by a vector`*\n```", "```py\narray([[ 0,  1,  4],\n [ 0,  4, 10]])\n```", "```py\n>>> a @ b    *`# matrix-multiplying by a vector`*\n```", "```py\narray([ 5, 14])\n```", "```py\n>>> c = (a*2).reshape(3,2)  *`# using scalar multiplication to create`*\n>>> c\n```", "```py\narray([[ 0,  2],\n [ 4,  6],\n [ 8, 10]])\n```", "```py\n>>> a @ c    *`# matrix-multiplying two 2D matrices`*\n```", "```py\narray([[20, 26],\n [56, 80]])\n```"]