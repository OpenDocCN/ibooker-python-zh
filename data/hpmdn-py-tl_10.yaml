- en: Chapter 7\. Measuring Coverage with Coverage.py
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章。使用Coverage.py测量覆盖率
- en: How confident in a code change are you when your tests pass?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的测试通过时，您对代码更改的信心有多大？
- en: If you look at tests as a way to detect bugs, you can describe their sensitivity
    and specificity.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将测试视为检测缺陷的一种方式，您可以描述它们的灵敏度和特异性。
- en: The *sensitivity* of your test suite is the probability of a test failure when
    there’s a defect in the code. If large parts of the code are untested, or if the
    tests don’t check for expected behavior, you have low sensitivity.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您的测试套件的*灵敏度*是代码存在缺陷时测试失败的概率。如果大部分代码未经测试，或者测试未检查预期行为，则灵敏度低。
- en: The *specificity* of your tests is the probability that they will pass if the
    code is free of defects. If your tests are *flaky* (they fail intermittently)
    or *brittle* (they fail when you change implementation details), then you have
    low specificity. Invariably, people stop paying attention to failing tests. This
    chapter isn’t about specificity, though.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您测试的*特异性*是如果代码没有缺陷，则它们通过的概率。如果您的测试*不稳定*（它们偶尔失败）或*脆弱*（更改实现细节时失败），则特异性低。人们总是不重视失败的测试。不过，本章并非讨论特异性。
- en: 'There’s a great way to boost the sensitivity of your tests: when you add or
    change behavior, write a failing test before the code that makes it pass. If you
    do this, your test suite will capture your expectations for the code.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种极有效的策略可以提高您测试的灵敏度：在添加或更改行为时，在能够使其通过的代码之前编写一个失败的测试。如果这样做，您的测试套件将捕捉您对代码的期望。
- en: Another effective strategy is to test your software with the various inputs
    and environmental constraints that you expect it to encounter in the real world.
    Cover the edge cases of a function, like empty lists or negative numbers. Test
    common error scenarios, not just the “happy path”.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有效的策略是使用您期望在真实世界中遇到的各种输入和环境约束测试您的软件。覆盖函数的边缘情况，如空列表或负数。测试常见的错误场景，而不仅仅是“快乐路径”。
- en: '*Code coverage* is a measure of the extent by which the test suite exercises
    your code. Full coverage doesn’t guarantee high sensitivity: If your tests cover
    every line in your code, you can still have bugs. It’s an upper bound, though.
    If your code coverage is 80%, then 20% of your code will *never* trigger a test
    failure, no matter how many bugs creep in. It’s also a quantitative measure amenable
    to automated tools. These two properties make coverage a useful proxy for sensitivity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*代码覆盖率*是测试套件执行代码的程度的一种衡量。完全覆盖并不保证高灵敏度：如果您的测试覆盖了代码中的每一行，仍可能存在错误。尽管如此，它是一个上限。如果您的代码覆盖率为80%，那么即使有多少错误悄然而至，也有20%的代码将*永远*不会触发测试失败。它还是一个适合自动化工具的量化指标。这两个属性使覆盖率成为灵敏度的有用代理。'
- en: In short, coverage tools record each line in your code when you run it. After
    completion, they report the overall percentage of executed lines with respect
    to the entire codebase.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，覆盖率工具在运行代码时记录每行代码。完成后，它们报告执行的代码行相对于整个代码库的总百分比。
- en: Coverage tools aren’t limited to measuring test coverage. For example, code
    coverage lets you find which modules an API endpoint in a large codebase uses.
    Or you could use it to determine the extent to which code examples document your
    project.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖率工具不仅限于测量测试覆盖率。例如，代码覆盖率可帮助您查找大型代码库中API端点使用的模块。或者，您可以使用它来确定代码示例在多大程度上记录了项目。
- en: In this chapter, I’ll explain how to measure code coverage with Coverage.py,
    a coverage tool for Python. In the main sections of this chapter, you’ll learn
    how to install, configure, and run Coverage.py, and how to identify missing lines
    of source code and missing branches in the control flow. I’ll explain how to measure
    code coverage across multiple environments and processes. Finally, I’ll talk about
    what code coverage you should aim for and how to reach your coverage target.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将解释如何使用Coverage.py测量代码覆盖率，这是Python的一种覆盖率工具。在本章的主要部分中，您将学习如何安装、配置和运行Coverage.py，以及如何识别源代码中缺失的行和控制流中缺失的分支。我将解释如何在多个环境和进程中测量代码覆盖率。最后，我将讨论您应该追求的代码覆盖率目标以及如何实现这些目标。
- en: How does coverage measurement work in Python? The interpreter lets you register
    a callback—​a *trace function*—using the function `sys.settrace`. From that point
    onwards, the interpreter invokes the callback whenever it executes a line of code—​as
    well as in some other situations, like entering or returning from functions or
    raising exceptions. Coverage tools register a trace function that records each
    executed line of source code in a local database.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中如何进行代码覆盖率测量？解释器允许您注册一个回调—​一个*跟踪函数*—​使用函数`sys.settrace`。从那时起，解释器在执行每行代码时—​以及在某些其他情况下，如进入或返回函数或引发异常时—​调用回调。覆盖工具注册一个跟踪函数，记录每个执行的源代码行到本地数据库中。
- en: Using Coverage.py
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Coverage.py
- en: '[Coverage.py](https://coverage.readthedocs.io/) is a mature and widely used
    code coverage tool for Python. Created over two decades ago—​predating PyPI and
    setuptools—​and actively maintained ever since, it has measured coverage on every
    interpreter since Python 2.1.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[Coverage.py](https://coverage.readthedocs.io/)是一个成熟且广泛使用的Python代码覆盖工具。创建于20多年前—​早于PyPI和setuptools—​并自那时以来一直活跃维护，它已在Python
    2.1及以后的每个解释器上测量覆盖率。'
- en: Add `coverage[toml]` to your test dependencies (see [“Managing Test Dependencies”](ch06.html#section_testing_dependencies)).
    The `toml` extra allows Coverage.py to read its configuration from *pyproject.toml*
    on older interpreters. Since Python 3.11, the standard library includes the `tomllib`
    module for parsing TOML files.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 将`coverage[toml]`添加到您的测试依赖项（参见[“管理测试依赖项”](ch06.html#section_testing_dependencies)）。`toml`额外允许Coverage.py从*pyproject.toml*文件中读取配置，适用于旧版本的解释器。自Python
    3.11起，标准库包括用于解析TOML文件的`tomllib`模块。
- en: Measuring coverage is a two-step process. First, you gather coverage data during
    a test run with `coverage run`. Second, you compile an aggregated report from
    the data with `coverage report`. Each command has a table in *pyproject.toml*
    under `tool.coverage`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 测量覆盖率是一个两步过程。首先，您使用`coverage run`在测试运行期间收集覆盖数据。其次，您使用`coverage report`从数据中编制汇总报告。每个命令在*pyproject.toml*文件的`tool.coverage`下都有一个表格。
- en: 'Start by configuring which packages you want to measure—​it lets Coverage.py
    report modules that never showed up during execution, like the `__main__` module
    earlier. (Even without the setting, it won’t drown you in reports about the standard
    library.) Specify your top-level import package, as well as the test suite:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先配置您想要测量的包—​它让Coverage.py报告从未在执行中显示过的模块，就像之前的`__main__`模块一样。（即使没有此设置，它也不会淹没您关于标准库的报告。）指定您的顶级导入包，以及测试套件：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Measuring code coverage for your test suite may seem strange—​but you should
    always do it. It alerts you when tests don’t run and helps you identify unreachable
    code within them. Treat your tests the same way you would treat any other code.^([1](ch07.html#id298))
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为测试套件测量代码覆盖率可能看起来很奇怪—​但您应该始终这样做。它在测试未运行时会提醒您，并帮助您识别其中的不可达代码。将您的测试视为任何其他代码一样对待。^([1](ch07.html#id298))
- en: 'You can invoke `coverage run` with a Python script, followed by its command-line
    arguments. Alternatively, you can use its `-m` option with an importable module.
    Use the second method—​it ensures that you run pytest from the current environment:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过Python脚本调用`coverage run`，然后跟上其命令行参数。或者，您可以使用其`-m`选项与可导入模块。使用第二种方法—​确保您从当前环境运行pytest：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After running this command, you’ll find a file named *.coverage* in the current
    directory. Coverage.py uses it to store the coverage data it gathered during the
    test run.^([2](ch07.html#id299))
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，您会在当前目录中找到一个名为*.coverage*的文件。Coverage.py使用它来存储测试运行期间收集的覆盖数据。^([2](ch07.html#id299))
- en: 'Coverage reports display the overall percentage of code coverage, as well as
    a breakdown per source file. Use the `show_missing` setting to also include line
    numbers for statements missing from coverage:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖报告显示代码覆盖率的整体百分比，以及每个源文件的详细情况。使用`show_missing`设置还可以包括缺少覆盖的语句的行号：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run `coverage report` to show the coverage report in the terminal:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`coverage report`以在终端中显示覆盖报告：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Overall, your project has a coverage of 93%—4 statements never showed up during
    the tests. The test suite itself has full coverage, as you would expect.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，您的项目覆盖率为93%—4条语句在测试中从未出现。测试套件本身具有完整的覆盖率，正如您所期望的那样。
- en: 'Let’s take a closer look at those missing statements. The `Missing` column
    in the coverage report lists them by line number. You can use your code editor
    to display the source code with line numbers, or the standard `cat -n` command
    on Linux and macOS. Again, the entire `__main__` module is missing from coverage:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看那些缺失的语句。覆盖率报告中的“Missing”列按行号列出它们。您可以使用代码编辑器显示带有行号的源代码，或者在Linux和macOS上使用标准的`cat
    -n`命令。同样，整个`__main__`模块的覆盖率也没有：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The missing lines in *__init__.py* correspond to the body of the `main` function:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*__init__.py*中缺失的行对应于`main`函数的主体：'
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This is surprising—​the end-to-end test from [Example 6-2](ch06.html#example_testing_end_to_end)
    runs the entire program, so all of those lines are definitely being tested. For
    now, disable coverage measurements for the `__main__` module:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这很令人惊讶——[示例 6-2](ch06.html#example_testing_end_to_end)中的端到端测试运行整个程序，因此所有这些行肯定都在进行测试。暂时禁用对`__main__`模块的覆盖率测量：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can exclude the `main` function using a special comment:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用特殊注释来排除`main`函数：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If this feels like cheating, bear with me until [“Measuring in Subprocesses”](#section_coverage_subprocess),
    where you’ll re-enable coverage measurements for these lines.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果感觉这样做有些作弊，请继续阅读[“在子进程中进行测量”](#section_coverage_subprocess)，在那里您将重新启用这些行的覆盖率测量。
- en: 'If you run both steps again, Coverage.py will report full code coverage. Let’s
    make sure you’ll notice any lines that aren’t exercised by your tests. Configure
    Coverage.py to fail if the percentage drops below 100% again:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果再次运行这两个步骤，Coverage.py 将报告完整的代码覆盖率。确保您能够注意到您的测试没有执行到的任何行。再次配置Coverage.py，如果百分比再次低于100%，则失败：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Branch Coverage
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分支覆盖率
- en: If an article has an empty summary, `random-wikipedia-article` prints a trailing
    blank line (yikes). Those empty summaries are rare, but they exist, and this should
    be a quick fix. [Example 7-1](#example_coverage_show) modifies `show` to print
    only non-empty summaries.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一篇文章有空摘要，`random-wikipedia-article`会打印尾随空行（哎呀）。这些空摘要很少见，但它们确实存在，这应该是一个快速修复。[示例 7-1](#example_coverage_show)修改`show`以仅打印非空摘要。
- en: Example 7-1\. Printing only non-empty summaries in `show`
  id: totrans-41
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-1\. 仅在`show`中打印非空摘要
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Curiously, the coverage stays at 100%—even though you didn’t write a test first.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，覆盖率保持在100%——尽管您没有先编写测试。
- en: By default, Coverage.py measures *statement coverage*—the percentage of statements
    in your modules that the interpreter executed during the tests. If the summary
    isn’t empty, every statement in the function gets executed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Coverage.py测量*语句覆盖率*——解释器在测试期间执行的模块中语句的百分比。如果摘要不为空，则会执行函数中的每条语句。
- en: 'On the other hand, the tests only exercised one of two code paths through the
    function—​they never skipped the `if` body. Coverage.py also supports *branch
    coverage*, which looks at all the transitions between statements in your code
    and measures the percentage of those traversed during the tests. You should always
    enable it, as it’s more precise than statement coverage:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，测试只执行了函数中两条代码路径中的一条——它们从未跳过`if`体。Coverage.py 还支持*分支覆盖率*，它查看代码中所有语句之间的所有转换，并测量测试期间遍历这些转换的百分比。您应该始终启用它，因为它比语句覆盖更精确：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Re-run the tests, and you’ll see Coverage.py flag the missing transition from
    the `if` statement on line 34 to the exit of the function:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行测试，您将看到Coverage.py标记了从第34行的`if`语句到函数退出的缺失转换：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[Example 7-2](#example_coverage_branch) brings coverage back to 100%. It includes
    an article with an empty summary and adds the missing test for trailing blank
    lines.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 7-2](#example_coverage_branch)使覆盖率恢复到100%。它包括一个具有空摘要的文章，并添加了对尾随空行缺失测试。'
- en: Example 7-2\. Testing articles with empty summaries
  id: totrans-50
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-2\. 测试空摘要的文章
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Run the tests again—​and they fail! Can you spot the bug in [Example 7-1](#example_coverage_show)?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行测试——它们失败了！您能找出[示例 7-1](#example_coverage_show)中的错误吗？
- en: 'Empty summaries produce two blank lines: one to separate the title and the
    summary, and one from printing the empty summary. You’ve only removed the second
    one. [Example 7-3](#example_coverage_show_fixed) removes the first one as well.
    Thanks, Coverage.py!'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 空摘要会产生两行空白行：一行用于分隔标题和摘要，另一行用于打印空摘要。您只删除了第二行。[示例 7-3](#example_coverage_show_fixed)也删除了第一行。感谢，Coverage.py！
- en: Example 7-3\. Avoiding both trailing blank lines in `show`
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-3\. 在`show`中避免尾随空行
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Testing in Multiple Environments
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在多个环境中进行测试
- en: You will often need to support a variety of Python versions. Python releases
    come out every year, while long term support (LTS) distros can reach back a decade
    into Python’s history. End-of-life Python versions can have a surprising afterlife—​distributors
    may provide security patches years after the core Python team ends support.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你经常需要支持各种Python版本。Python每年发布新版本，而长期支持（LTS）发行版可以回溯到Python历史的十年前。终止生命周期的Python版本可能会有出人意料的余生—​发行商可能在核心Python团队结束支持后数年提供安全补丁。
- en: 'Let’s update `random-wikipedia-article` to support Python 3.7, which reached
    its end of life in June 2023\. I’m assuming your project requires Python 3.10,
    with lower bounds on all dependencies. First, relax the Python requirement in
    *pyproject.toml*:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新`random-wikipedia-article`以支持Python 3.7，该版本在2023年6月已经终止生命周期。我假设你的项目需要Python
    3.10，并对所有依赖项设置了较低限制。首先，在*pyproject.toml*中放宽Python要求：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, check if your dependencies are compatible with the Python version. Use
    `uv` to compile a separate requirements file for a Python 3.7 environment:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，检查你的依赖项是否与Python版本兼容。使用`uv`为Python 3.7环境编译一个单独的要求文件：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The error indicates that your preferred version of HTTPX has already dropped
    Python 3.7\. Remove your lower version bound and try again. After a few similar
    errors and removing the lower bounds of other packages, dependency resolution
    finally succeeds. Restore the lower bounds using the older versions of these packages.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 错误表明你首选的HTTPX版本已经放弃了Python 3.7。移除你的较低版本限制并重试。经过几个类似的错误和移除其他包的较低限制后，依赖解析最终成功。使用这些包的旧版本恢复较低限制。
- en: 'You’ll also need the backport `importlib-metadata` (see [“Environment Markers”](ch04.html#section_dependencies_environment_markers)).
    Add the following entry to the `project.dependencies` field:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要后移植的`importlib-metadata`（参见[“环境标记”](ch04.html#section_dependencies_environment_markers)）。将以下条目添加到`project.dependencies`字段：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Update the *__init__.py* module to fall back to the backport:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 更新*__init__.py*模块以回退到后移植：
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Compile the requirements one more time. Finally, update your project environment:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 再次编译要求。最后，更新你的项目环境：
- en: '[PRE18]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Parallel Coverage
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并行覆盖率
- en: 'If you now re-run Coverage.py under Python 3.7, it reports the first branch
    of the `if` statement as missing. This makes sense: your code executes the `else`
    branch and imports the backport instead of the standard library.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在在Python 3.7下重新运行Coverage.py，它会报告`if`语句的第一个分支缺失。这是有道理的：你的代码执行`else`分支并导入后移植而不是标准库。
- en: It may be tempting to exclude this line from coverage measurements—​but don’t.
    Third-party dependencies like the backport can break your code, too. Instead,
    collect coverage data from both environments.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会诱人地排除此行不计入覆盖率测量—​但不要这样做。像后移植这样的第三方依赖项也可能破坏你的代码。相反，从两个环境收集覆盖率数据。
- en: 'First, switch the environment back to Python 3.12 using your original requirements:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用原始要求将环境切换回Python 3.12：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'By default, `coverage run` overwrites any existing coverage data—​but you can
    tell it to append the data instead. Re-run Coverage.py with the `--append` option
    and confirm you have full test coverage:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`coverage run`会覆盖任何现有的覆盖率数据—​但你可以告诉它追加数据。使用`--append`选项重新运行Coverage.py，并确认你有完整的测试覆盖率：
- en: '[PRE20]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'With a single file for coverage data, it’s easy to erase data accidentally.
    If you forget to pass the `--append` option, you’ll have to run the tests again.
    You could configure Coverage.py to append by default, but that’s error-prone,
    too: If you forget to run `coverage erase` periodically, you’ll end up with stale
    data in your report.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个覆盖率数据的单个文件，很容易意外擦除数据。如果忘记传递`--append`选项，你将不得不重新运行测试。你可以配置Coverage.py默认追加，但这也容易出错：如果忘记定期运行`coverage
    erase`，你的报告中将出现陈旧的数据。
- en: There’s a better way to gather coverage across multiple environments. Coverage.py
    lets you record coverage data in separate files on each run. Enable this behavior
    with the `parallel` setting:^([3](ch07.html#id300))
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种更好的方法可以跨多个环境收集覆盖率。Coverage.py允许你在每次运行时在单独的文件中记录覆盖率数据。使用`parallel`设置启用此行为：^([3](ch07.html#id300))
- en: '[PRE21]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Coverage reports are always based on a single data file, even in parallel mode.
    You merge the data files using the command `coverage combine`. That turns the
    two-step process from earlier into a three-step one: `coverage run` — `coverage
    combine` — `coverage report`.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖率报告始终基于单个数据文件，即使在并行模式下也是如此。你可以使用命令`coverage combine`合并数据文件。这将之前的两步过程变成三步过程：`coverage
    run` — `coverage combine` — `coverage report`。
- en: 'Let’s put all of this together. For each Python version, set up the environment
    and run the tests, as shown here for Python 3.7:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把所有这些都整合在一起。对于每个 Python 版本，设置环境并运行测试，如下所示，例如 Python 3.7：
- en: '[PRE22]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'At this point, you’ll have multiple *.coverage.** files in your project. Aggregate
    them into a single *.coverage* file using the command `coverage combine`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，项目中将会有多个 *.coverage.* 文件。使用命令 `coverage combine` 将它们聚合成一个 *.coverage* 文件：
- en: '[PRE23]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, produce the coverage report with `coverage report`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用 `coverage report` 生成覆盖率报告：
- en: '[PRE24]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Does it sound *incredibly* tedious to gather coverage like this? In [Chapter 8](ch08.html#chapter_nox),
    you’ll learn how to automate testing across multiple Python environments. You’ll
    run this entire process using a single three-letter command.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这样收集覆盖率听起来*极其*乏味吗？在 [第8章](ch08.html#chapter_nox) 中，你将学习如何在多个 Python 环境中自动化测试。你将使用一个简单的三个字母的命令来运行整个过程。
- en: Measuring in Subprocesses
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在子进程中测量
- en: At the end of [“Using Coverage.py”](#section_coverage_coverage), you had to
    disable coverage for the `main` function and the `__main__` module. But the end-to-end
    test certainly exercises this code. Let’s remove the `# pragma` comment and the
    `omit` setting and figure this out.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [“Using Coverage.py”](#section_coverage_coverage) 的结尾，你必须为 `main` 函数和 `__main__`
    模块禁用覆盖率。但端到端测试肯定会执行此代码。让我们移除 `# pragma` 注释和 `omit` 设置，搞清楚这个问题。
- en: 'Think about how Coverage.py registers a trace function that records executed
    lines. Maybe you can already guess what’s going on here: The end-to-end test runs
    your program in a separate process. Coverage.py never registered its trace function
    on the interpreter in that process. None of those executed lines were recorded
    anywhere.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 想想 Coverage.py 如何注册一个跟踪函数来记录执行的行。也许你已经猜到这里正在发生什么：端到端测试在单独的进程中运行你的程序。Coverage.py
    从未在该进程的解释器上注册其跟踪函数。没有这些执行的行被记录在任何地方。
- en: 'Coverage.py provides a public API to enable tracing in the current process:
    the `coverage.process_startup` function. You could call the function when your
    application starts up. But there must be a better way—​you shouldn’t have to modify
    your code to support code coverage.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Coverage.py 提供了一个公共 API 来启用当前进程的跟踪：`coverage.process_startup` 函数。你可以在应用程序启动时调用此函数。但肯定有更好的方法
    —— 你不应该修改代码来支持代码覆盖率。
- en: 'It turns out you don’t need to. You can place a *.pth* file in the environment
    that calls the function during interpreter startup. This leverages a little-known
    Python feature (see [“Site Packages”](ch02.html#section_environments_site_packages)):
    The interpreter executes lines in a *.pth* file if they start with an `import`
    statement.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，你并不需要这样做。你可以在环境中放置一个 *.pth* 文件，在解释器启动时调用该函数。这利用了一个鲜为人知的 Python 特性（见 [“Site
    Packages”](ch02.html#section_environments_site_packages)）：解释器会执行 *.pth* 文件中以 `import`
    语句开头的行。
- en: 'Install a *_coverage.pth* file into the *site-packages* directory of your environment,
    with the following contents:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个 *_coverage.pth* 文件安装到你的环境的 *site-packages* 目录中，内容如下：
- en: '[PRE25]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You can find the *site-packages* directory under *lib/python3.x* on Linux and
    macOS, and under *Lib* on Windows.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 和 macOS 下，可以在 *lib/python3.x* 目录下找到 *site-packages* 目录，在 Windows 下可以在
    *Lib* 目录下找到。
- en: 'Additionally, you need to set the environment variable `COVERAGE_PROCESS_START`.
    On Linux and macOS, use this syntax:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你需要设置环境变量 `COVERAGE_PROCESS_START`。在 Linux 和 macOS 上，使用以下语法：
- en: '[PRE26]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'On Windows, use the following syntax instead:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，改用以下语法：
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Re-run the test suite, combine the data files, and display the coverage report.
    Thanks to measuring coverage in the subprocess, the program should have full coverage
    again.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行测试套件，合并数据文件，并显示覆盖率报告。由于在子进程中测量覆盖率，程序应该再次实现全面覆盖。
- en: Note
  id: totrans-100
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Measuring coverage in subprocesses only works in parallel mode. Without parallel
    mode, the main process overwrites the coverage data from the subprocess, because
    both use the same data file.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 测量子进程中的覆盖率仅在并行模式下有效。没有并行模式，主进程会覆盖子进程的覆盖数据，因为两者使用同一个数据文件。
- en: What Coverage to Aim For
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目标覆盖率是多少
- en: Any coverage percentage below 100% means your tests won’t detect bugs in some
    parts of your codebase. If you’re working on a new project, there isn’t any other
    meaningful coverage target.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 任何低于100%的覆盖率意味着你的测试无法检测到代码库某些部分的 bug。如果你正在开发一个新项目，没有其他有意义的覆盖率目标。
- en: 'That doesn’t imply you should test every single line of code. Consider a log
    statement for debugging a rare situation. The statement may be difficult to exercise
    from a test. At the same time, it’s probably low-risk, trivial code. Writing that
    test won’t increase your confidence in the code significantly. Exclude the line
    from coverage using a *pragma* comment:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着您应该测试每一行代码。 考虑用于调试罕见情况的日志语句。 从测试中执行该语句可能会很困难。 同时，它可能是低风险，微不足道的代码。 编写该测试不会显着增加代码的信心。
    使用*pragma*注释将该行从覆盖范围中排除：
- en: '[PRE28]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Don’t exclude code from coverage just because it’s cumbersome to test. When
    you start working with a new library or interfacing with a new system, it usually
    takes some time to figure out how to test your code. But often those tests end
    up detecting bugs that would have gone unnoticed and caused problems in production.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 不要因为测试麻烦而将代码排除在覆盖范围之外。 当您开始使用新库或与新系统进行接口时，通常需要一些时间来弄清楚如何测试您的代码。 但是，通常这些测试最终会检测到在生产中可能未被注意到并引起问题的错误。
- en: Legacy projects often consist of a large codebase with minimal test coverage.
    As a general rule, coverage in such projects should increase *monotonically*—no
    individual change should lead to a drop in coverage.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 传统项目通常由具有最小测试覆盖率的大型代码库组成。 作为一般规则，在这种项目中，覆盖范围应*单调增加*—没有个别更改应导致覆盖率下降。
- en: 'You’ll often find yourself in a dilemma here: To test, you need to refactor
    the code, but refactoring is too risky without tests. Find the minimal safe refactoring
    to increase testability. Often, this consists of breaking a dependency of the
    code under test.^([4](ch07.html#id302))'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您经常会在这里陷入困境：要进行测试，您需要重构代码，但是没有测试的重构太有风险。 找到最小的安全重构来增加可测试性。 通常，这包括破坏被测试代码的依赖关系。^([4](ch07.html#id302))
- en: For example, you may be testing a large function that, among other things, also
    connects to the production database. Add an optional parameter that lets you pass
    the connection from the outside. Tests can then pass a connection to an in-memory
    database instead.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可能正在测试一个大型函数，该函数除了其他功能之外还连接到生产数据库。 添加一个可选参数，让您可以从外部传递连接。 然后，测试可以将连接传递给内存数据库。
- en: '[Example 7-4](#example_coverage_config) recaps the Coverage.py settings you’ve
    used in this chapter.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 7-4](#example_coverage_config) 概述了本章中使用的 Coverage.py 设置。'
- en: Example 7-4\. Configuring Coverage.py in *pyproject.toml*
  id: totrans-111
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-4\. 在*pyproject.toml*中配置 Coverage.py
- en: '[PRE29]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Summary
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: You can measure the extent to which the test suite exercises your project using
    Coverage.py. Coverage reports are useful for discovering untested lines. Branch
    coverage captures the control flow of your program, instead of isolated lines
    of source code. Parallel coverage lets you measure coverage across multiple environments.
    You need to combine the data files before reporting. Measuring coverage in subprocesses
    requires setting up a *.pth* file and an environment variable.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 Coverage.py 来测量测试套件对项目的影响程度。 覆盖报告对发现未测试的行很有用。 分支覆盖率捕获程序的控制流，而不是源代码的孤立行。
    并行覆盖允许您在多个环境中测量覆盖范围。 您需要在报告之前合并数据文件。 在子进程中测量覆盖率需要设置*.pth*文件和环境变量。
- en: Measuring test coverage effectively for a project requires some amount of configuration
    (), as well as the right tool incantations. In the next chapter, you’ll see how
    you can automate these steps with Nox. You’ll set up checks that give you confidence
    in your changes, while staying out of your way.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 有效地为项目测量测试覆盖范围需要一定量的配置（），以及正确的工具咒语。 在下一章中，您将看到如何使用 Nox 自动化这些步骤。 您将设置检查，以便在更改时给您信心，同时不妨碍您的工作。
- en: '^([1](ch07.html#id298-marker)) Ned Batchelder: [“You should include your tests
    in coverage,”](https://nedbatchelder.com/blog/202008/you_should_include_your_tests_in_coverage.html)
    August 11, 2020.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch07.html#id298-marker)) Ned Batchelder：[“您应该将测试包含在覆盖范围内，”](https://nedbatchelder.com/blog/202008/you_should_include_your_tests_in_coverage.html)
    2020年8月11日。
- en: ^([2](ch07.html#id299-marker)) Under the hood, the *.coverage* file is just
    a SQLite database. Feel free to poke around if you have the `sqlite3` command-line
    utility ready on your system.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch07.html#id299-marker)) 在幕后，*.coverage*文件只是一个 SQLite 数据库。 如果您的系统已准备好`sqlite3`命令行实用程序，则可以随意查看。
- en: ^([3](ch07.html#id300-marker)) The name `parallel` is somewhat misleading; the
    setting has nothing to do with parallel execution.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch07.html#id300-marker)) 名称`parallel`有点误导性； 这个设置与并行执行无关。
- en: '^([4](ch07.html#id302-marker)) Martin Fowler: [“Legacy Seam,”](https://www.martinfowler.com/bliki/LegacySeam.html)
    January 4, 2024.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch07.html#id302-marker)) 马丁·福勒：[“遗留系统的缝隙,”](https://www.martinfowler.com/bliki/LegacySeam.html)
    2024年1月4日。
