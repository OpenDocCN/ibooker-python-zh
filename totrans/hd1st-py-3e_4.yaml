- en: 'Chapter 4\. List of Files: *Functions, Modules & Files*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-1-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Your code can’t live in a notebook forever. It wants to be free.** And when
    it comes to freeing your code and **sharing** it with others, a bespoke **function**
    is the first step, followed shortly thereafter by a **module,** which lets you
    organize and share your code. In this chapter, you’ll create a function directly
    from the code you’ve written so far, and in the process create a **shareable**
    module, too. You’ll immediately put your module to work as you process the Coach’s
    swim data with **for** loops, **if** statements, conditional tests, and the **PSL**
    (Python’s *Standard Library*). You’ll learn how to **comment** your functions,
    too (which is always a *good idea*). There’s lots to be done, so let’s get to
    it!'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-2-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Cubicle Conversation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Sam**: I’ve updated the Coach on the progress-to-date.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex**: And is he happy?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sam**: To a point, yes. He’s thrilled things have started. However, as you
    can imagine, he’s only really interested in the final product, which for the Coach
    is the bar chart.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex**: Which should be easy enough to do now that the most-recent notebook
    produces the data we need, right?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mara**: Well... sort of.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex**: How come?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mara**: The current notebook, `Times.ipynb`, produces data for Darius swimming
    the 100m Fly in the Under 13 age group. But, there’s a need to perform the conversions
    and the average calculation for *any* swimmer’s file.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex**: Sure that’s easy: just replace the filename at the top of the notebook
    with another filename, then press the *Run All* button and – voila! – you’ve got
    your data.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mara**: And you think the Coach will be happy to do that?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex**: Errr... I hadn’t thought about how the Coach is going to run this
    stuff.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sam**: We are heading in the right direction, in that we do need a mechanism
    which works with any swimmer’s filename. If that can be produced, we can get on
    with then creating code for the bar chart.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex**: So we have a ways to go yet...'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mara**: Yes, but not far. As you already mentioned, all the code we need
    is in the `Times.ipynb` notebook...'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex**: ...which you don’t want to give to the Coach...'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mara**: ...well, not it it’s current form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex**: Then how?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sam**: We need a way to package-up the code so it can be used with any filename
    and accessed outside of the notebook...'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex**: Ah, but of course: we need a function!'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sam**: Which gets us part of the way.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mara**: If the function is put inside a Python module it can be shared in
    lots of places.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex**: Sounds good to me. Where do we start?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mara**: Let’s start by turning the existing notebook code into a function
    that we can call, then share.'
  prefs: []
  type: TYPE_NORMAL
- en: How to create a function in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition to the actual code for the function, you need to worry about the
    function’s *signature*. There are three things to keep in mind. You need to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/1-circle.png) **Think up a nice, meaningful name**'
  prefs: []
  type: TYPE_NORMAL
- en: The code in the `Times.ipynb` notebook first processes the filename, then processes
    the file’s contents to extract the data required by the Coach. So let’s call this
    function `get_swim_data`. It’s a nice name, it’s a meaningful name... golly, it’s
    nearly perfect!
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/2-circle.png) **Decide on the number and names of any parameters**'
  prefs: []
  type: TYPE_NORMAL
- en: Your new `get_swim_data` function takes a single parameter which identifies
    the filename to use. Let’s call this parameter `fn`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/3-circle.png) **Indent your function’s code under a def statement**'
  prefs: []
  type: TYPE_NORMAL
- en: The **def** keyword introduces the function, letting you specify the function’s
    name and any parameters. Any code indented under the **def** keyword is the function’s
    code block.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**It can be useful to think of “def” as shorthand for “define function”.**'
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to add a comment to your function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Full disclosure: we told a little white lie... we’ve led you up the garden
    path to believe all you need to do is copy your code into your function, suitably
    indented. But, you should *also* add a comment to the start of your function.'
  prefs: []
  type: TYPE_NORMAL
- en: You’ve already seen how a single `**#**` character switches on a single-line
    comment in your code. When you need to add a multi-line comment, you can enclose
    your comment in **triple-quotes** which, believe it or not, is *also* a string
    object.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**A string can span many lines when your surround it with triple-quotes.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'When Python encounters a string object which isn’t assigned to a variable name,
    it’s simply ignored, which makes using a triple-quoted string *perfect* for multi-line
    comments. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-4-01.png)![Image](assets/ch03-4-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Great question (and well spotted).**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **tuple** is one of Python’s built-in data structures, which you briefly
    met in [Chapter 1](ch01.xhtml#why_pythonquestion_mark_similar_but_diff). Back
    then we over-generalized a little, suggesting tuples were quite like lists. We’ll
    have more to say about tuples later in this book. For now, recall what one looks
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-4-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, what’s your second question?
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-5-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**That’s another great observation.**'
  prefs: []
  type: TYPE_NORMAL
- en: No, we haven’t forgotten to declare the parameter’s type. In fact, in Python
    you don’t need to declare the types of your parameters, as every function parameter
    can be of *any* type.
  prefs: []
  type: TYPE_NORMAL
- en: Python is a *dynamically-typed* language. This means, among other things, that
    typing decisions are not made until run-time, which is very unlike those *stodgy*
    statically-typed languages where everything must be known up-front, at compile-time.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Depending on your programming background, this might strike you as controversial.
    Our advise is not to let this worry you. This page’s “Geek Note” discusses a Python
    3 feature which can be thought of as meeting the statically-typed die-hards half-way.**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file for your function’s code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There’s nothing stopping you defining any function within a Jupyter Notebook
    code cell. In fact, when you are trying to work out what code you need to create,
    experimenting in a notebook *first* is our recommended approach.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-6-01.png)'
  prefs: []
  type: TYPE_IMG
- en: However, all the code you need to add to your `get_swim_data` function already
    exists in your `Times.ipynb` notebook, so there’s no need for any further experimentation.
    Instead, let’s use VS Code to create a new Python file called `swimclub.py`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**In VS Code, select “File”, then “New File”, then select “Python File” as
    the type. When an empty editing window appears, save the file as “swimclub.py”.
    (And be sure to save the file into your existing “Learning” folder).**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code we copied into `swimclub.py`, which we’ve applied a few minor
    tweaks to (note the annotations):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-6-02.png)![Image](assets/ch03-7-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Yes, that’s it exactly.**'
  prefs: []
  type: TYPE_NORMAL
- en: There’s just a small addition to apply to the function’s code to ensure it’s
    really useful.
  prefs: []
  type: TYPE_NORMAL
- en: Functions can return results to their calling code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to accepting data *on the way in*, function’s can deliver data to
    the code which invoked them (aka data *on the way out*). Arguments sent into a
    function are assigned to the parameter names defined in the function’s signature,
    whereas any results are sent back to the calling code with a **return** statement.
  prefs: []
  type: TYPE_NORMAL
- en: Update and save your code before continuing...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before moving onto the next page, be sure to add the following line of code
    as the last line in your `get_swim_data` function within your `swimclub.py` file.
    Be careful to match the indentation of this line of code with the indentation
    used for all the other code in your function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-8-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Use modules to share code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you look at the code in your `swimclub.py` file, it consists of a single
    **import** statement, a single constant definition, and a single function. Once
    you move code into its own file, it becomes is a Python *module*. Congratulations:
    you’ve created your first Python module, called swimclub.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-9-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**That’s pretty much it.**'
  prefs: []
  type: TYPE_NORMAL
- en: Things can get a lot more complex but, as you’ve just seen, creating a **shareable
    module** in Python is as simple as popping some code in a file and giving it a
    name. It’s so easy, there ought to be a law against it. .. ![Image](assets/smile.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-10-04.png)'
  prefs: []
  type: TYPE_IMG
- en: '**This is a fully qualified name.**'
  prefs: []
  type: TYPE_NORMAL
- en: When you refer to your function with “module DOT function”, you are qualifying
    the name of your function with the name of the module which contains it. This
    is very common in practice, although there are other common importing techniques.
    You’ll see examples of these as you continue to work through this book.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-11-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Good eye. Well spotted, too.**'
  prefs: []
  type: TYPE_NORMAL
- en: This may not be the explanation you’re expecting here, but those parentheses
    are meant to be there.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s dig into this a little so you can appreciate what’s going on.
  prefs: []
  type: TYPE_NORMAL
- en: Functions return a tuple when required
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you call a function which looks like it returns multiple results, it isn’t.
    Instead, you get back a single tuple containing a collection of results (regardless
    of how many there are).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-13-01.png)![Image](assets/ch03-13-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**That’s a great suggestion.**'
  prefs: []
  type: TYPE_NORMAL
- en: Not that we’re suggesting there’s a bit of mind reading going on here, but it
    is a little spooky we had the same idea...
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-17-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**There’s often a “better” way.**'
  prefs: []
  type: TYPE_NORMAL
- en: The code on the last page works and does what you expect it to. (You did try
    it out in your notebook, didn’t you?!?). It is possible to make both examples
    more *Pythonic* with a couple of small changes, which you’ll explore over the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**“Pythonic”: when code is written to take advantage of what Python has to
    offer, as opposed to Python code which clearly looks like it been written to conform
    to some other programming language’s idea of “the right way”.**'
  prefs: []
  type: TYPE_NORMAL
- en: The hope is, once these changes are applied, your code won’t feel quite so unwieldy.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-20-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**A list of filenames would be nice.**'
  prefs: []
  type: TYPE_NORMAL
- en: Your `get_swim_data` function, part of the `swimclub` module, takes any swimmer’s
    filename and returns a tuple of results to you.
  prefs: []
  type: TYPE_NORMAL
- en: What’s needed need now is the full list of filenames which you should be able
    to get from your underlying operating system. As you can imagine, Python has you
    covered.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s determine the list of filenames
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to working with your operating system (whether you’re on *Windows*,
    *macOS*, or *Linux*), the PSL has you covered. The `os` module lets your Python
    code talk to your operating system in an platform-independent way, and you’ll
    now use the `os` module to grab a list of the files in the `swimdata` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to follow along in your `Files.ipynb` notebook.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-21-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You want the names of the files in your `swimdata` folder, and the `os` module
    provides the handy-dandy `listdir` function to do just that. When you pass in
    the location of a folder, `listdir` returns a list of all the files it contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-21-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You’d be forgiven for expecting the `swim_files` list to contain 60 pieces
    of data. After all, there are 60 files in your folder. However, on our *Mac*,
    we were in for a shock when we double-checked how big `swim_files` is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-21-03.png)'
  prefs: []
  type: TYPE_IMG
- en: It’s time for a bit of detective work...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You were expecting your list of files to have 60 filenames, but the **len**
    BIF is reporting 61 items in your `swim_files` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to begin to try and work out what’s happening here, let’s first display
    the value of `swim_files` list on screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-22-01.png)![Image](assets/ch03-22-02.png)![Image](assets/ch03-22-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '**What a great idea.**'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use the combo mambo to see what’s built into lists.
  prefs: []
  type: TYPE_NORMAL
- en: What can you do to lists?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the **print dir** combo mambo output for your `swim_files` list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-23-01.png)![Image](assets/ch03-23-03.png)![Image](assets/ch03-24-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Yes, that’s a potential issue.**'
  prefs: []
  type: TYPE_NORMAL
- en: As the `swimdata.zip` file was initially created on a Mac, the `.DS_Store` file
    was automatically added to the ZIP archive. This type of OS-specific issue is
    always a concern.
  prefs: []
  type: TYPE_NORMAL
- en: Before moving on, it’s important to *remove* that unwanted filename from the
    `swim_files` list.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-25-04.png)'
  prefs: []
  type: TYPE_IMG
- en: '**There sure is.**'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll get to see most of the list built-in methods in action as you progress
    though this book. However, for now, concentrate on just enough to complete the
    exercise.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-28-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**That would be nice, wouldn’t it?**'
  prefs: []
  type: TYPE_NORMAL
- en: We could throw caution to the wind and dive into creating some bar charts, but
    it might be too soon for that.
  prefs: []
  type: TYPE_NORMAL
- en: Your `get_swim_data` function has worked so far, but can you be sure it’ll work
    for *any* swimmer’s file? Let’s spend a moment ensuring our `get_swim_data` function
    works as expected no matter the data file it’s presented with.
  prefs: []
  type: TYPE_NORMAL
- en: Is the issue with your data or your code?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you’ve identified the offending file, let’s take a look at its contents
    to see if you can get to the root of the problem. Here’s the `Abi-10-50m-Back.txt`
    file opened in VS Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-31-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Here’s the line of code which is throwing the error. Can you see what the issue
    is?
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-31-02.png)![Image](assets/ch03-31-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '**An incorrect assumption is the problem.**'
  prefs: []
  type: TYPE_NORMAL
- en: Your code, as written, assumes every swim time conforms to the *mins:secs.hundredths*
    format, but this is clearly not the case with Abi’s 50m swim times, and this is
    why you’re getting that `**ValueError**`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know what the problem is, what’s the solution?
  prefs: []
  type: TYPE_NORMAL
- en: Cubicle Conversation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Sam**: What are our options here?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex**: We could fix the data, right?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mara**: How so?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex**: We could pre-process each data file to make sure there’s no missing
    minutes, perhaps by prefixing a zero and a colon when the minutes are missing?
    That way, we won’t have to change any code.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mara**: That would work, but...'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sam**: ...it would be messy. Also, I’m not too keen to preprocessing all
    the files, as the vast majority won’t need to be changed, which feels like it
    might be wasteful.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mara**: And although, as a strategy, we wouldn’t have to change any existing
    code, we would have to create the code to do the pre-processing, perhaps as a
    separate utility.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sam**: Recall, too, that the data is in a fixed format, and that it’s generated
    by the Coach’s smart stopwatch. We really shouldn’t mess with the data, so let’s
    leave it as is.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex**: So, we’re looking at changing our `get_swim_data` function, then?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mara**: Yes, I think that’s a better strategy.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sam**: Me, too.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex**: So, what do we need to do?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mara**: We need to identify where in our code the changes need to be made...'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sam**: ...and what those code changes need to be.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex**: OK, sounds good. So were’s going to take a closer look at our `get_swim_data`
    function so we can decide what code needs to change?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mara**: Yes, then we can use an **if** statement to make a decision based
    on whether or not the swim time currently being processed has a minute value.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-32-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Flip the page to see our selection.** ![Image](assets/arrow.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Decisions, decisions, decisions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'That’s what **if** statements do, day-in and day-out: they make decisions.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-35-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Yes, that is what’s needed here.**'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a closer look at the two possible swim time formats.
  prefs: []
  type: TYPE_NORMAL
- en: 'First up, here is one of the times recorded for Darius in his file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`''1:30.96''`'
  prefs: []
  type: TYPE_NORMAL
- en: 'And here’s a time taken from Abi’s data:'
  prefs: []
  type: TYPE_NORMAL
- en: '`''43.35''`'
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s easy to spot the difference: *Abi’s data doesn’t show any minutes*. With
    this in mind, it’s possible to come up with a condition to check when making a
    decision. Can you work out what it is? (Hint: consider your BFF, the colon).'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look for the colon “in” the string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If the colon appears in any swim time string, then the time has a minute value.
    Although strings come with lots of built-in methods, including methods which can
    perform a search, let’s not use any of these here. As searching is such a common
    requirement, Python provides the **in** operator. You’ve seen **in** before, with
    **for**:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**The “find” and “index” string methods both perform searching.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-36-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using **in** with **for** identifies the sequence being iterated over. However,
    when **in** is used outside a loop it takes on *searching* powers. Consider these
    example uses of **in**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-36-02.png)![Image](assets/ch03-37-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**We love the** `**in**` **keyword, too.**'
  prefs: []
  type: TYPE_NORMAL
- en: It’s a Python superpower.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-40-03.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Absolutely, after a bit of housekeeping.**'
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to add the above code to your `get_swim_data` function within your `swimclub.py`
    module, and don’t forget to **save** your file.
  prefs: []
  type: TYPE_NORMAL
- en: With that done, return to your notebook and follow along with the *Test Drive*
    on the next page.
  prefs: []
  type: TYPE_NORMAL
- en: Did you end up with 60 processed files?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You are likely feeling confident that your most recent code is processing all
    the files in your `swimdata` folder. We are, too. However, it is often nice to
    double-check these things. As always, there’s any number of ways to do this, but
    let’s number the results from your **for** loop by adding an enumeration, starting
    from 1, to each line of output displayed on screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, let’s use yet another BIF created for this very purpose called **enumerate**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-42-01.png)![Image](assets/ch03-43-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The Coach’s code is taking shape...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your `swimclub` module is now ready. Given the name of a file which contains
    a collection of swim time strings, your new module can produce usable data. The
    Coach is expecting to see some bar charts created from this data, so let’s dive
    into implementing that functionality in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: As always, you can move on after you’ve reviewed the chapter summary, then tried
    your hand at this chapter’s crossword.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](assets/ch03-44-01.png)'
  prefs: []
  type: TYPE_IMG
- en: About the Author
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Paul Barry** has a B.Sc. in Information Systems, as well as an M.Sc. in Computing.
    He also has a postgraduate qualification in Learning and Teaching. Paul has worked
    at The Institute of Technology, Carlow since 1995, and lectured there since 1997\.
    Prior to becoming involved in teaching, Paul spent a decade in the IT industry
    working in Ireland and Canada, with the majority of his work within a healthcare
    setting.'
  prefs: []
  type: TYPE_NORMAL
