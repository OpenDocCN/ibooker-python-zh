- en: 'Chapter 9\. User-Defined Types: Data Classes'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章. 用户定义类型：数据类
- en: Data classes are user-defined types that let you group related data together.
    Many types, such as integers, strings, and enumerations, are *scalar*; they represent
    one and only one value. Other types, such as lists, sets, and dictionaries, represent
    homogeneous collections. However, you still need to be able compose multiple fields
    of data into a single data type. Dictionaries and tuples are OK at this, but they
    suffer from a few issues. Readability is tricky, as it can be difficult knowing
    what a dictionary or tuple contains at runtime. This makes them hard to reason
    about when reading and reviewing code, which is a major blow to robustness.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类是用户定义的类型，允许您将相关数据组合在一起。许多类型，如整数、字符串和枚举，都是*标量*；它们表示一个且仅一个值。其他类型，如列表、集合和字典，表示同类集合。但是，您仍然需要能够将多个数据字段组合成单个数据类型。字典和元组可以做到这一点，但它们存在一些问题。可读性较差，因为在运行时很难知道字典或元组包含什么内容。这使得在阅读和审查代码时很难理解，这对代码的健壮性是一个重大打击。
- en: When your data is hard to understand, readers will make incorrect assumptions
    and won’t be able to spot bugs as easily. Data classes are easier to read and
    understand, and the typechecker knows how to naturally handle them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的数据难以理解时，读者会做出错误的假设，并且很难发现错误。数据类更易于阅读和理解，并且类型检查器知道如何自然地处理它们。
- en: Data Classes in Action
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据类实例
- en: 'Data classes represent a heterogeneous collection of variables, all rolled
    into a *composite type*. Composite types are made up of multiple values, and should
    always represent some sort of relationship or logical grouping. For example, a
    `Fraction` is an excellent example of a composite type. It contains two scalar
    values: a `numerator` and a `denominator`.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类表示一个混合集合的变量，全部被卷入一个*复合类型*中。复合类型由多个值组成，应始终表示某种关系或逻辑分组。例如，`Fraction`是复合类型的一个很好的例子。它包含两个标量值：一个`分子`和一个`分母`。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This `Fraction` represents the relationship between that `numerator` and `denominator`.
    The `numerator` and `denominator` are independent of each other; changing one
    does not change the other. However, by combining them into a single type, they
    are grouped together to create a logical concept.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 此`Fraction`表示`分子`和`分母`之间的关系。`分子`和`分母`是彼此独立的；更改其中一个不会影响另一个。但是，通过将它们组合成单一类型，它们被组合在一起以创建一个逻辑概念。
- en: 'Data classes allow you to create these concepts quite easily. To represent
    a fraction with a `dataclass`, you do the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类允许您轻松创建这些概念。要使用`dataclass`表示分数，您需要执行以下操作：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Simple, isn’t it? The `@dataclass` before the class definition is known as a
    *decorator*. You’ll learn more about decorators in [Chapter 17](part0022_split_000.html#composability),
    but for now, all you need to know is that putting `@dataclass` before your class
    turns it into a `dataclass`. Once you’ve decorated the class, you need to list
    out all the fields that you want to represent as a relationship. It is imperative
    that you provide a default value or a type, so that Python recognizes it as a
    member of that `dataclass`. In the above case, I am demonstrating both.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 简单吧？在类定义前的`@dataclass`被称为*装饰器*。您将在[第17章](part0022_split_000.html#composability)中详细了解装饰器，但现在，您只需知道在类前加上`@dataclass`会将其转换为`dataclass`。装饰类后，您需要列出所有要表示为关系的字段。必须提供默认值或类型，以便Python将其识别为该`dataclass`的成员。在上述情况下，我展示了两者都有。
- en: By building relationships like this, you are adding to the shared vocabulary
    in your codebase. Instead of developers always needing to implement each field
    individually, you instead provide a reusable grouping. Data classes force you
    to explicitly assign types to your fields, so there’s less chance of type confusion
    among maintainers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过建立这样的关系，您可以为代码库中的共享词汇增添内容。与开发人员总是需要单独实现每个字段不同，您提供了一个可重复使用的分组。数据类强制您显式地为字段分配类型，因此在维护时减少类型混淆的机会。
- en: 'Data classes and other user-defined types can be nested within the `dataclass`.
    Suppose I’m creating an automated soup maker and I need to group my soup ingredients
    together. Using `dataclass`, it looks like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类和其他用户定义的类型可以嵌套在`dataclass`中。假设我正在创建一个自动化的汤制造机，并且需要将我的汤成分分组在一起。使用`dataclass`，它看起来像这样：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](../images/00002.gif)](part0013_split_001.html#co_user_defined_types__data_classes_CO1-1)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](../images/00002.gif)](part0013_split_001.html#co_user_defined_types__data_classes_CO1-1)'
- en: An enumeration to track different liquid measure sizes
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 用于跟踪不同液体测量尺寸的枚举
- en: '[![2](../images/00005.gif)](part0013_split_001.html#co_user_defined_types__data_classes_CO1-2)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](../images/00005.gif)](part0013_split_001.html#co_user_defined_types__data_classes_CO1-2)'
- en: An enumeration to track which broth is used in the soup
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用于跟踪汤中使用的高汤的枚举
- en: '[![3](../images/00006.gif)](part0013_split_001.html#co_user_defined_types__data_classes_CO1-3)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](../images/00006.gif)](part0013_split_001.html#co_user_defined_types__data_classes_CO1-3)'
- en: A `dataclass` representing an individual ingredient to be put in the soup. Note
    that the parameter `frozen=True` is a special property of data classes to indicate
    that this `dataclass` is immutable (more on that later). This does not mean the
    ingredients come from the freezer section of the supermarket.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 表示放入汤中的单个配料的`dataclass`。请注意，参数`frozen=True`是`dataclass`的特殊属性，表示这个`dataclass`是不可变的（稍后详细讨论）。这并不意味着这些配料来自超市的冷冻部分。
- en: '[![4](../images/00007.gif)](part0013_split_001.html#co_user_defined_types__data_classes_CO1-4)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](../images/00007.gif)](part0013_split_001.html#co_user_defined_types__data_classes_CO1-4)'
- en: A `dataclass` representing a soup recipe
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 表示汤食谱的`dataclass`
- en: 'We’re able to take multiple user-defined types (`ImperialMeasure`, `Broth`,
    and `Ingredient`) to compose them all into the composite type: `Recipe`. From
    this `Recipe`, you can infer multiple concepts:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够将多个用户定义的类型（`ImperialMeasure`、`Broth`和`Ingredient`）组合到一个复合类型`Recipe`中。从这个`Recipe`中，您可以推断出多个概念：
- en: A soup recipe is a set of grouped information. Specifically, it can be defined
    by its ingredients (separated into specific categories), the broth used, and how
    long it takes to cook.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 汤食谱是一组分组的信息。具体来说，它可以由其配料（分为特定类别）、使用的高汤以及烹饪所需的时间来定义。
- en: Each ingredient has a name and an amount you need for the recipe.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每种配料都有一个名称和您需要的数量。
- en: You have enumerations to tell you about the soup broth and measures. These are
    not a relationship by themselves, but they do communicate intention to the reader.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用枚举来了解汤高汤和测量单位。这些本身不构成关系，但确实向读者传达了意图。
- en: Each grouping of ingredients is a set, rather than a tuple. This means that
    the user can change these after construction, but still prevent duplicates.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个配料分组都是一个集合，而不是元组。这意味着用户可以在构建后更改这些配料，但仍然可以防止重复。
- en: 'To create the `dataclass`, I do the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建`dataclass`，我执行以下操作：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also get and set individual fields:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以获取和设置单个字段：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[Figure 9-1](part0013_split_001.html#figure_9_1) shows how this `dataclass`
    is constructed.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[Figure 9-1](part0013_split_001.html#figure_9_1)显示了这个`dataclass`的构造方式。'
- en: '![Construction of the dataclass](../images/00013.gif)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![构造dataclass](../images/00013.gif)'
- en: Figure 9-1\. Construction of the `dataclass`
  id: totrans-32
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9-1。`dataclass`的构造
- en: Through the use of types, I have made it crystal clear what comprises a recipe.
    Users cannot leave off fields. Creating composite types is one of the best ways
    to express relationships through your codebase.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过类型的使用，我清楚地定义了什么是食谱。用户不能漏掉任何字段。创建复合类型是通过代码库表达关系的最佳方式之一。
- en: So far, I’ve just described the fields in a `dataclass`, but you are also able
    to add in behaviors in the form of methods. Suppose I want to make any soup vegetarian
    by substituting vegetable broth and removing any meats. I also want to list out
    all the ingredients so that you can make sure that no meat products snuck in.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我只描述了`dataclass`中的字段，但您也可以通过方法添加行为。假设我想通过替换蔬菜高汤和去除任何肉类来使任何汤变成素食。我还想列出所有的配料，以便您可以确保没有肉类产品混入。
- en: 'I can add methods directly to the `dataclass` like so:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以像这样直接向`dataclass`添加方法：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is a major improvement over raw dictionaries or tuples. I can embed functionality
    directly inside my `dataclass`, improving reusability. If a user wants to get
    all the ingredient names or make a recipe vegetarian, they don’t have to remember
    to do it on their own every time. It’s simple enough to call the function. Here’s
    an example of calling a function directly on a `dataclass`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这比原始字典或元组有了重大改进。我可以直接嵌入功能到我的`dataclass`中，提高了可重用性。如果用户想要获取所有的配料名称或使食谱变为素食，他们不必每次都记得自己去做。调用函数简单明了。这里是直接在`dataclass`上调用函数的示例。
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Usage
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用法
- en: Data classes have some built-in functions that make them really easy to work
    with. You’ve already seen that constructing data classes is a cinch, but what
    else can you do?
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`dataclass`具有一些内置函数，使其非常易于使用。您已经看到构造数据类是一件轻而易举的事情，但您还能做什么呢？'
- en: String Conversion
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串转换
- en: 'There are two special methods, `__str__` and `__repr__`, used to convert your
    object to its informal and offical string representation.^([1](part0013_split_012.html#idm45644742249656))
    Note the double underscores surrounding them; they are known as *magic methods*.
    I’ll cover magic methods more in [Chapter 11](part0015_split_000.html#api), but
    for now, you can treat them as functions that get called when you invoke `str()`
    or `repr()` on an object. Data classes define these functions by default:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个特殊方法，`__str__`和`__repr__`，用于将对象转换为其非正式和正式的字符串表示形式。^([1](part0013_split_012.html#idm45644742249656))
    注意它们周围的双下划线；它们被称为*魔术方法*。我将在[第11章](part0015_split_000.html#api)中更详细地介绍魔术方法，但现在，您可以将它们视为在对象上调用`str()`或`repr()`时调用的函数。数据类默认定义这些函数：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: A bit lengthy, but it means that you won’t get something uglier like `<__main__.Recipe
    object at 0x7fef44240730>`, which is the default string conversion for other user-defined
    types.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有点冗长，但这意味着您不会得到像`<__main__.Recipe object at 0x7fef44240730>`这样更丑陋的东西，这是其他用户定义类型的默认字符串转换。
- en: Equality
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相等性
- en: 'If you want to be able to test equality (==, !=) between two data classes,
    you can specify `eq=True` when defining your `dataclass`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要能够在两个数据类之间进行相等性测试（==、!=），可以在定义`dataclass`时指定`eq=True`：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: By default, equality checks will compare every field across two instances of
    a `dataclass`. Mechanically, Python invokes a function named `__eq__` when doing
    equality checks. If you’d like to provide different default functionality for
    equality checks, you can write your own `__eq__` function.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，相等性检查将比较`dataclass`的两个实例的每个字段。在执行相等性检查时，Python机械地调用名为`__eq__`的函数。如果希望为相等性检查提供不同的默认功能，可以编写自己的`__eq__`函数。
- en: Relational Comparison
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关系比较
- en: Suppose I want to display nutritional information in my soup app for the health-conscious.
    I want to be able to sort the soups by various axes, such as the number of calories
    or carbohydrates.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我想在我的汤应用程序中显示营养信息给健康意识的用户。我希望能够按照各种轴排序汤，例如卡路里或碳水化合物的数量。
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'By default, data classes do not support relational comparison (`<`, `>`, `<=`,
    `>=`), so you cannot sort the information:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，数据类不支持关系比较（`<`、`>`、`<=`、`>=`），因此无法对信息进行排序：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you want to be able to define relational comparison (`<`, `>`, `<=`, `>=`),
    you need to set `eq=True` and `order=True` in the `dataclass` definition. The
    generated comparison functions will go through each field, comparing them in the
    order in which they were defined.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要能够定义关系比较（`<`、`>`、`<=`、`>=`），您需要在`dataclass`定义中设置`eq=True`和`order=True`。生成的比较函数将依次比较每个字段，按照定义时的顺序进行比较。
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you want to control how comparison is defined, you can write your own `__le__`,
    `__lt__`, `__gt__`, and `__ge__` functions in the `dataclass`, which map to less-than-or-equals,
    less-than, greater-than, and greater-than-or-equals, respectively. For instance,
    if you wanted your `NutritionInformation` sorted first by fat, then carbohydrates,
    and then calories by default:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想控制如何定义比较，可以在`dataclass`中编写自己的`__le__`、`__lt__`、`__gt__`和`__ge__`函数，分别映射到小于或等于、小于、大于和大于或等于。例如，如果您希望`NutritionInformation`默认按照脂肪、碳水化合物和卡路里的顺序排序：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Warning
  id: totrans-59
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: If you override comparison functions, do not specify `order=True`, as that will
    raise a `ValueError`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果重写比较函数，请不要指定`order=True`，因为这将引发`ValueError`。
- en: Immutability
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可变性
- en: 'Sometimes, you need to convey that a `dataclass` should not be able to be changed.
    In that case, you can specify that a `dataclass` must be `frozen`, or unable to
    change. Anytime you change the state of a `dataclass`, you introduce entire classes
    of errors that might happen:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您需要表明`dataclass`不应该可以更改。在这种情况下，您可以指定`dataclass`必须是`frozen`或无法更改的。每当改变`dataclass`的状态时，您都可能引入整个类别的可能错误：
- en: Callers of your code may be unaware that the fields changed; they could erroneously
    assume that the fields are static.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您代码的调用者可能不知道字段已更改；他们可能错误地假设字段是静态的。
- en: Setting a single field to an incorrect value might be incompatible with how
    the other fields are set.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将单个字段设置为不正确的值可能与其他字段的设置方式不兼容。
- en: If there are multiple threads modifying the fields, you run the risk of a data
    race, which means you cannot guarantee in which order the modifications are applied
    in relation to one another.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有多个线程修改字段，您将面临数据竞争的风险，这意味着无法保证修改的顺序。
- en: 'None of these error cases occur if your `dataclass` is `frozen`. To freeze
    a `dataclass`, add a `frozen=True` to the `dataclass` decorator:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的`dataclass`是`frozen`，则不会发生这些错误情况。要冻结一个`dataclass`，只需向`dataclass`装饰器添加`frozen=True`：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If you want to use your `dataclass` in a set or as a key in a dictionary it
    must be *hashable*. This means it must define a `__hash__` function that takes
    your object and distills it down to a number.^([2](part0013_split_012.html#idm45644741402248))
    When you freeze a `dataclass`, it automatically becomes hashable, as long as you
    don’t explicitly disable equality checking and all fields are hashable.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望将您的`dataclass`用作集合中的元素或作为字典中的键，则它必须是*可哈希的*。这意味着它必须定义一个`__hash__`函数，将您的对象转换为一个数字。^([2](part0013_split_012.html#idm45644741402248))
    当您冻结一个`dataclass`时，它会自动变为可哈希的，只要您不明确禁用相等检查并且所有字段都是可哈希的。
- en: 'There are two caveats around this immutability, however. First, when I say
    immutability, I am referencing the fields in the `dataclass`, not the variable
    containing the `dataclass` itself. For example:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这种不可变性有两个需要注意的地方。首先，当我说不可变性时，我指的是`dataclass`中的字段，而不是包含`dataclass`本身的变量。例如：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If you would like the typechecker to error out if the variable is rebound, you
    can annotate the variable as `Final` (see [Chapter 4](part0007_split_000.html#constraints)
    for more details on `Final`).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望类型检查器在变量重新绑定时报错，可以将变量注释为`Final`（有关`Final`的更多详细信息，请参见[第四章](part0007_split_000.html#constraints)）。
- en: Secondly, a `frozen` `dataclass` only prevents its members from being set. If
    the members are mutable, you are still able to call methods on those members to
    modify their values. `frozen` `dataclass`es do not extend immutability to their
    attributes.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，`frozen` `dataclass`仅防止其成员被设置。如果成员是可变的，则仍然可以调用这些成员的方法来修改它们的值。`frozen` `dataclass`不会将不可变性扩展到其属性。
- en: 'For example, this code is perfectly fine:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这段代码是完全没有问题的：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Even though it is modifying the *aromatics* field of a `frozen` `dataclass`,
    no error is raised. When using `frozen` `dataclass`es, make the members immutable
    (such as integers, strings, or other `frozen` `dataclass`es) to avoid this pitfall.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 即使它正在修改`frozen` `dataclass`的*aromatics*字段，也不会引发错误。在使用`frozen` `dataclass`时，使成员不可变（例如整数、字符串或其他`frozen`
    `dataclass`）以避免这种陷阱。
- en: Comparison to Other Types
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与其他类型的比较
- en: Data classes are relatively new (introduced in Python 3.7); a lot of legacy
    code will not contain data classes. As you evaluate data class adoption, you need
    to understand where a data class shines in relation to other constructs.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类相对较新（在Python 3.7中引入）；许多传统代码将不包含数据类。在评估数据类的采用时，您需要了解数据类在与其他结构相比的优势所在。
- en: Data Classes Versus Dictionaries
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据类与字典的比较
- en: As discussed in [Chapter 5](part0008_split_000.html#collections), dictionaries
    are fantastic for mapping keys to values, but they are most appropriate when they
    are homogeneous (when all the keys are the same type and all the values are the
    same type). When used for heterogeneous data, dictionaries are tougher for humans
    to reason about. Also, typecheckers don’t know enough about the dictionary to
    check for errors.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在[第五章](part0008_split_000.html#collections)中讨论的，字典非常适合将键映射到值，但当它们是同质化的（所有键都是相同类型，所有值都是相同类型）时才是最适合的。当用于异构数据时，字典对人类的推理更加困难。此外，类型检查器对字典的了解不足以检查错误。
- en: Data classes, however, are a natural fit for fundamentally heterogeneous data.
    Readers of the code know the exact fields present in the type and typecheckers
    can check for correct usage. If you have heterogeneous data, use a data class
    before you reach for a dictionary.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，数据类非常适合基本异构数据。代码的读者知道类型中存在的确切字段，并且类型检查器可以检查正确的使用。如果您有异构数据，请在考虑使用字典之前使用数据类。
- en: Data Classes Versus TypedDict
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据类与TypedDict的比较
- en: Also discussed in [Chapter 5](part0008_split_000.html#collections) was the `TypedDict`
    type. This is another way to store heterogeneous data that makes sense for readers
    and typecheckers. At first glance, `TypedDict` and data classes solve a very similar
    problem, so it can be tough to decide which one is appropriate. My rule of thumb
    is to think of a `dataclass` as the default, as it can have functions defined
    on it and you can control immutability, comparability, equality, and other operations.
    However, if you are already working with dictionaries (such as for working with
    JSON), you should reach for a `TypedDict`, provided that you don’t need any of
    the benefits of a `dataclass`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在[第 5 章](part0008_split_000.html#collections)中还讨论了`TypedDict`类型。这是另一种存储异构数据的方式，对读者和类型检查器都有意义。乍一看，`TypedDict`和数据类解决了非常相似的问题，因此很难决定哪一个更合适。我的经验法则是将`dataclass`视为默认选项，因为它可以在其上定义函数，并且你可以控制不可变性、可比性、相等性和其他操作。但是，如果你已经使用字典（例如用于处理
    JSON），你应该考虑使用`TypedDict`，前提是你不需要`dataclass`的任何好处。
- en: Data Classes Versus namedtuple
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据类与 namedtuple
- en: '`namedtuple` is a tuple-like collection type in the collections module. Unlike
    tuples, it allows for you to name the fields in a tuple like so:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`namedtuple`是集合模块中类似元组的集合类型。与元组不同的是，它允许你为元组中的字段命名，如下所示：'
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'A `namedtuple` goes a long way toward making a tuple more readable, but so
    does using a `dataclass` in its place. I almost always pick a `dataclass` instead
    of a `namedtuple`. A `dataclass`, like a `namedtuple`, provides named fields along
    with other benefits like:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`namedtuple`在使元组更易读方面有很大帮助，但是使用`dataclass`同样如此。我几乎总是选择`dataclass`而不是`namedtuple`。`dataclass`像`namedtuple`一样提供了命名字段以及其他好处，比如：'
- en: Explicitly type annotating your arguments
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 明确为你的参数进行类型注释
- en: Control of immutability, comparability, and equality
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制不可变性、可比性和相等性
- en: Easier to define functions in the type
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在类型中更容易定义函数
- en: In general, I only reach for a `namedtuple` if I explicitly need compatibility
    with Python 3.6 or before.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，我只在明确需要与 Python 3.6 或更早版本兼容时才使用`namedtuple`。
- en: Discussion Topic
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论主题
- en: What types do you use to represent heterogeneous data in your codebase? If you
    use dictionaries, how easy is it for developers to know all the key-value pairs
    in the dictionary? If you use tuples, how easy is it for developers to know what
    the meaning of individual fields are?
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你在代码库中使用什么类型来表示异构数据？如果你使用字典，开发者了解字典中所有键值对有多容易？如果你使用元组，开发者了解各个字段的含义有多容易？
- en: Closing Thoughts
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结思路
- en: Data classes were a game changer when released in Python 3.7, because they allowed
    developers to define heterogeneous types that were fully typed while still staying
    lightweight. As I write code, I find myself reaching for data classes more and
    more. Whenever you encounter heterogeneous, developer-controlled dictionaries
    or `namedtuple`s, a data class is more suitable. You can find a wealth of additional
    information in the [`dataclass` documentation](https://oreil.ly/1toSU).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Python 3.7 发布时，数据类是一个重要的变革，因为它允许开发者定义完全类型化但仍然轻量级的异构类型。在编写代码时，我发现自己越来越多地使用数据类。每当你遇到异构的、由开发者控制的字典或`namedtuple`时，数据类更加合适。你可以在[`dataclass`文档](https://oreil.ly/1toSU)中找到大量额外的信息。
- en: However, as great as data classes are, they should not be universally used.
    A data class, at its heart, represents a conceptual relationship, but it really
    is only appropriate when the members within the data class are independent of
    one another. If any of the members should be restricted depending on the other
    members, a data class will make it harder to reason about your code. Any developer
    could change the fields during your data classes’ lifetime, potentially creating
    an illegal state. In these cases, you need to reach for something a bit heavier.
    In the next chapter, I’ll teach you how to do just that with classes.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尽管数据类很棒，它们不应普遍使用。数据类本质上代表一种概念关系，但只有在数据类内的成员彼此独立时才合适。如果任何成员根据其他成员应受限制，数据类将使得你的代码难以理解。任何开发者都可能在数据类的生命周期内更改字段，可能导致非法状态。在这些情况下，你需要选择更重的东西。在接下来的章节中，我将教你如何使用类来实现这一点。
- en: ^([1](part0013_split_003.html#idm45644742249656-marker)) The informal string
    representation is useful for printing the object. The official string representation
    reproduces all information about the object so that it can be reconstructed.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](part0013_split_003.html#idm45644742249656-marker)) 非正式的字符串表示对于打印对象很有用。官方的字符串表示重现了关于对象的所有信息，以便可以重建它。
- en: ^([2](part0013_split_006.html#idm45644741402248-marker)) Hashing is a complicated
    subject, beyond the scope of this book. You can learn more about the `hash` function
    in the [Python documentation](https://oreil.ly/JDgLO).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](part0013_split_006.html#idm45644741402248-marker)) 哈希是一个复杂的主题，超出了本书的范围。你可以在[Python文档](https://oreil.ly/JDgLO)中了解更多关于`hash`函数的信息。
