- en: Chapter 13\. Calendars and Clocks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 13 章：日历和钟表
- en: “One!” strikes the clock in the belfry tower,
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “一！”在钟楼塔上的钟敲响，
- en: Which but sixty minutes ago
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 前不久不过六十分钟前
- en: Sounded twelve for the midnight hour.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 十二点的钟声响起。
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Frederick B. Needham, The Round of the Clock
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Frederick B. Needham，《钟的轮回》
- en: I’ve been on a calendar but I have never been on time.
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我有日历但我从未准时过。
- en: ''
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Marilyn Monroe
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 玛丽莲·梦露
- en: Programmers devote a surprising amount of effort to dates and times. Let’s talk
    about some of the problems they encounter and then get to some best practices
    and tricks to make the situation a little less messy.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员花费了令人惊讶的精力处理日期和时间。让我们谈谈他们遇到的一些问题，然后介绍一些最佳实践和技巧，使情况稍微不那么混乱。
- en: 'Dates can be represented in many ways—too many ways, actually. Even in English
    with the Roman calendar, you’ll see many variants of a simple date:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 日期可以用多种方式表示——实际上太多了。即使在使用罗马日历的英语中，你也会看到简单日期的许多变体：
- en: July 21 1987
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: July 21 1987
- en: 21 Jul 1987
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 21 Jul 1987
- en: 21/7/1987
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 21/7/1987
- en: 7/21/1987
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 7/21/1987
- en: Among other problems, date representations can be ambiguous. In the previous
    examples, it’s easy to determine that 7 stands for the month and 21 is the day
    of the month, because months don’t go to 21. But how about `1/6/2012`? Is that
    referring to January 6 or June 1?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他问题中，日期表示可能会产生歧义。在前面的示例中，很容易确定 7 是月份，21 是月中的日期，因为月份不会达到 21 日。但是 `1/6/2012`
    是指 1 月 6 日还是 6 月 1 日呢？
- en: The month name varies by language within the Roman calendar. Even the year and
    month can have a different definition in other cultures.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 月份名称在罗马日历中在不同的语言中会有所变化。甚至年份和月份在其他文化中的定义也可能有所不同。
- en: Times have their own sources of grief, especially because of time zones and
    daylight savings time. If you look at a time zone map, the zones follow political
    and historic boundaries rather than crisp lines every 15 degrees (360 degrees
    / 24) of longitude. And countries start and end daylight savings times on different
    days of the year. Southern hemisphere countries advance their clocks as their
    northern friends are winding theirs back, and vice versa.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 时间也有它们自己的烦恼来源，特别是由于时区和夏令时。如果你看一下时区地图，这些区域遵循的是政治和历史边界，而不是每 15 度（360 度 / 24）经度上的清晰分界线。并且各国在一年中开始和结束夏令时的日期也不同。南半球国家在北半球朋友结束夏令时时，他们自己的时钟也在前进，反之亦然。
- en: 'Python’s standard library has many date and time modules, including: `datetime`,
    `time`, `calendar`, `dateutil`, and others. There’s some overlap, and it’s a bit
    confusing.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的标准库包括许多日期和时间模块，包括：`datetime`、`time`、`calendar`、`dateutil` 等。它们有些重叠，并且有些令人困惑。
- en: Leap Year
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 闰年
- en: 'Leap years are a special wrinkle in time. You probably know that every four
    years is a leap year (and the summer Olympics and the American presidential election).
    Did you also know that every 100 years is not a leap year, but that every 400
    years is? Here’s code to test various years for leapiness:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 闰年是时间的一个特殊问题。你可能知道每四年是一个闰年（夏季奥运会和美国总统选举）。你还知道每 100 年不是闰年，但每 400 年是吗？下面是测试各年份是否为闰年的代码：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For the curious:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于好奇的人：
- en: A year has 365.242196 days (after one spin around the sun, the earth is about
    a quarter-turn on its axis from where it started).
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一年有 365.242196 天（绕太阳一周后，地球大约从其轴上旋转四分之一）
- en: Add one day every four years. Now an average year has 365.242196 – 0.25 = 364.992196
    days
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每四年增加一天。现在平均一年有 365.242196 - 0.25 = 364.992196 天
- en: Subtract a day every 100 years. Now an average year has 364.992196 + 0.01 =
    365.002196 days
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每 100 年减少一天。现在平均一年有 364.992196 + 0.01 = 365.002196 天
- en: Add a day every 400 years. Now an average year has 365.002196 – 0.0025 = 364.999696
    days
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每 400 年增加一天。现在平均一年有 365.002196 - 0.0025 = 364.999696 天
- en: Close enough for now! We will not speak of [leap seconds](https://oreil.ly/aJ32N).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 暂且这样吧！我们不会谈论[闰秒](https://oreil.ly/aJ32N)。
- en: The datetime Module
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: datetime 模块
- en: 'The standard `datetime` module handles (which should not be a surprise) dates
    and times. It defines four main object classes, each with many methods:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的 `datetime` 模块处理（这应该不会让你感到惊讶）日期和时间。它定义了四个主要的对象类，每个类都有许多方法：
- en: '`date` for years, months, and days'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`date` 用于年、月和日'
- en: '`time` for hours, minutes, seconds, and fractions'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time` 用于小时、分钟、秒和小数'
- en: '`datetime` for dates and times together'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`datetime` 用于日期和时间的组合'
- en: '`timedelta` for date and/or time intervals'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timedelta` 用于日期和/或时间间隔'
- en: 'You can make a `date` object by specifying a year, month, and day. Those values
    are then available as attributes:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过指定年、月和日来创建一个 `date` 对象。这些值随后可作为属性使用：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can print a `date` with its `isoformat()` method:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用其 `isoformat()` 方法打印一个 `date`：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `iso` refers to ISO 8601, an international standard for representing dates
    and times. It goes from most general (year) to most specific (day). Because of
    this, it also sorts correctly: by year, then month, then day. I usually choose
    this format for date representation in programs, and for filenames that save data
    by date. The next section describes the more complex `strptime()` and `strftime()`
    methods for parsing and formatting dates.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`iso` 指的是 ISO 8601，这是一个国际标准，用于表示日期和时间。它从最一般的（年）到最具体的（日）进行排序。因此，它也正确排序：按年、月、日排序。我通常选择这种格式来表示程序中的日期，并用于按日期保存数据的文件名。下一节描述了更复杂的
    `strptime()` 和 `strftime()` 方法，用于解析和格式化日期。'
- en: 'This example uses the `today()` method to generate today’s date:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例使用 `today()` 方法生成今天的日期：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This one makes use of a `timedelta` object to add some time interval to a `date`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例利用了一个 `timedelta` 对象，将一些时间间隔添加到一个 `date` 中：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The range of `date` is from `date.min` (year=1, month=1, day=1) to `date.max`
    (year=9999, month=12, day=31). As a result, you can’t use it for historic or astronomical
    calculations.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`date` 的范围是从 `date.min`（年=1，月=1，日=1）到 `date.max`（年=9999，月=12，日=31）。因此，您不能将其用于历史或天文计算。'
- en: 'The `datetime` module’s `time` object is used to represent a time of day:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`datetime` 模块的 `time` 对象用于表示一天中的时间：'
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The arguments go from the largest time unit (hours) to the smallest (microseconds).
    If you don’t provide all the arguments, `time` assumes all the rest are zero.
    By the way, just because you can store and retrieve microseconds doesn’t mean
    you can retrieve time from your computer to the exact microsecond. The accuracy
    of subsecond measurements depends on many factors in the hardware and operating
    system.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 参数从最大的时间单位（小时）到最小的（微秒）进行。如果您没有提供所有参数，`time` 将假定其余的都是零。顺便说一句，仅因为您可以存储和检索微秒，并不意味着您可以精确到微秒从计算机检索时间。次秒测量的准确性取决于硬件和操作系统中的许多因素。
- en: 'The `datetime` object includes both the date and time of day. You can create
    one directly, such as the one that follows, which is for January 2, 2019, at 3:04
    A.M., plus 5 seconds and 6 microseconds:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`datetime` 对象包含日期和时间。您可以直接创建一个，例如接下来的一个，用于2019年1月2日凌晨3点04分，加上5秒和6微秒：'
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `datetime` object also has an `isoformat()` method:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`datetime` 对象还有一个 `isoformat()` 方法：'
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That middle `T` separates the date and time parts.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 那个中间的 `T` 分隔了日期和时间部分。
- en: '`datetime` has a `now()` method to return the current date and time:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`datetime` 有一个 `now()` 方法返回当前日期和时间：'
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can `combine()` a `date` object and a `time` object into a `datetime`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将 `date` 对象和 `time` 对象组合成 `datetime`：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can yank the `date` and `time` from a `datetime` by using the `date()`
    and `time()` methods:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `date()` 和 `time()` 方法从 `datetime` 中提取 `date` 和 `time`：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Using the time Module
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用时间模块
- en: It is confusing that Python has a `datetime` module with a `time` object, and
    a separate `time` module. Furthermore, the `time` module has a function called—wait
    for it—`time()`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 令人困惑的是，Python 有一个带有 `time` 对象的 `datetime` 模块，以及一个单独的 `time` 模块。此外，`time` 模块有一个名为——等待它——`time()`
    的函数。
- en: One way to represent an absolute time is to count the number of seconds since
    some starting point. *Unix time* uses the number of seconds since midnight on
    January 1, 1970.^([1](ch13.html#idm45794986403304)) This value is often called
    the *epoch*, and it is often the simplest way to exchange dates and times among
    systems.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 表示绝对时间的一种方法是计算自某个起始点以来的秒数。*Unix 时间* 使用自1970年1月1日午夜以来的秒数。这个值通常称为 *时代*，通常是在系统之间交换日期和时间的最简单方法。
- en: 'The `time` module’s `time()` function returns the current time as an epoch
    value:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`time` 模块的 `time()` 函数返回当前时间的时代值：'
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: More than one billion seconds have ticked by since New Year’s, 1970. Where did
    the time go?
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 自1970年元旦以来已经过去了超过十亿秒。时间都去哪了？
- en: 'You can convert an epoch value to a string by using `ctime()`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用 `ctime()` 将时代值转换为字符串：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the next section, you’ll see how to produce more attractive formats for dates
    and times.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将看到如何生成更吸引人的日期和时间格式。
- en: 'Epoch values are a useful least-common denominator for date and time exchange
    with different systems, such as JavaScript. Sometimes, though, you need actual
    days, hours, and so forth, which `time` provides as `struct_time` objects. `localtime()`
    provides the time in your system’s time zone, and `gmtime()` provides it in UTC:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: epoch 值是与不同系统交换日期和时间的有用的最小公分母，如 JavaScript。然而，有时候你需要实际的天数、小时等，`time` 提供了 `struct_time`
    对象。`localtime()` 提供系统时区的时间，而 `gmtime()` 提供 UTC 的时间：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: My `19:55` (Central time zone, Daylight Savings) was `00:55` in the next day
    in UTC (formerly called *Greenwich time* or *Zulu time*). If you omit the argument
    to `localtime()` or `gmtime()`, they assume the current time.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我的 `19:55`（中部时区，夏令时）在 UTC 的下一天的 `00:55`（以前称为 *格林威治时间* 或 *Zulu 时间*）。如果省略 `localtime()`
    或 `gmtime()` 的参数，它们将使用当前时间。
- en: Some of the `tm_...` values in `struct_time` are a bit ambiguous, so take a
    look at [Table 13-1](#table1301) for more details.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`struct_time` 中的一些 `tm_...` 值可能有些模糊，因此请查看 [表 13-1](#table1301) 获取更多详细信息。'
- en: Table 13-1\. `struct_time` values
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 13-1\. `struct_time` 的值
- en: '| Index | Name | Meaning | Values |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 索引 | 名称 | 意义 | 值 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 0 | `tm_year` | Year | `0000` to `9999` |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 0 | `tm_year` | 年份 | `0000` 到 `9999` |'
- en: '| 1 | `tm_mon` | Month | `1` to `12` |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 1 | `tm_mon` | 月份 | `1` 到 `12` |'
- en: '| 2 | `tm_mday` | Day of month | `1` to `31` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 2 | `tm_mday` | 月份的某一天 | `1` 到 `31` |'
- en: '| 3 | `tm_hour` | Hour | `0` to `23` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 3 | `tm_hour` | 小时 | `0` 到 `23` |'
- en: '| 4 | `tm_min` | Minute | `0` to `59` |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 4 | `tm_min` | 分钟 | `0` 到 `59` |'
- en: '| 5 | `tm_sec` | Second | `0` to `61` |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 5 | `tm_sec` | 秒 | `0` 到 `61` |'
- en: '| 6 | `tm_wday` | Day of week | `0` (Monday) to `6` (Sunday) |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 6 | `tm_wday` | 星期几 | `0`（周一）到 `6`（周日） |'
- en: '| 7 | `tm_yday` | Day of year | `1` to `366` |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 7 | `tm_yday` | 年内天数 | `1` 到 `366` |'
- en: '| 8 | `tm_isdst` | Daylight savings? | `0` = no, `1` = yes, `-1` = unknown
    |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 8 | `tm_isdst` | 夏令时？ | `0` = 否，`1` = 是，`-1` = 不明 |'
- en: 'If you don’t want to type all those `tm_...` names, `struct_time` also acts
    like a named tuple (see [“Named Tuples”](ch10.html#named_tuples)), so you can
    use the indexes from the previous table:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想输入所有 `tm_...` 的名称，`struct_time` 也像一个命名元组一样（见 [“命名元组”](ch10.html#named_tuples)），所以你可以使用前面表格中的索引：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`mktime()` goes in the other direction, converting a `struct_time` object to
    epoch seconds:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`mktime()` 则反过来，将 `struct_time` 对象转换为 epoch 秒数：'
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This doesn’t exactly match our earlier epoch value of `now()` because the `struct_time`
    object preserves time only to the second.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们之前的 `now()` 的 epoch 值不完全匹配，因为 `struct_time` 对象仅保留到秒。
- en: Note
  id: totrans-88
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Some advice: wherever possible, *use UTC* instead of time zones. UTC is an
    absolute time, independent of time zones. If you have a server, *set its time
    to UTC*; do not use local time.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一些建议：在可能的情况下，*使用协调世界时 (UTC)* 而不是时区。UTC 是一个绝对时间，独立于时区。如果你有一个服务器，*将其时间设置为 UTC*；不要使用本地时间。
- en: 'More advice: *never use daylight savings time* if you can avoid it. If you
    use daylight savings time, an hour disappears at one time of year (“spring ahead”)
    and occurs twice at another time (“fall back”). For some reason, many organizations
    use local time with daylight savings in their computer systems, but are mystified
    twice every year by that spooky hour.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 更多建议：*尽量避免使用夏令时*。如果可以避免使用夏令时，一个时期的一个小时会消失（“提前”），而在另一个时期会出现两次（“倒退”）。出于某种原因，许多组织在计算机系统中使用本地时间和夏令时，但每年两次都会被那个神秘的小时弄得迷惑不解。
- en: Read and Write Dates and Times
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读写日期和时间
- en: '`isoformat()` is not the only way to write dates and times. You already saw
    the `ctime()` function in the `time` module, which you can use to convert epochs
    to strings:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`isoformat()` 并不是写入日期和时间的唯一方式。你已经在 `time` 模块中看到了 `ctime()` 函数，你可以用它来将 epoch
    转换为字符串：'
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You can also convert dates and times to strings by using `strftime()`. This
    is provided as a method in the `datetime`, `date`, and `time` objects, and as
    a function in the `time` module. `strftime()` uses format strings to specify the
    output, which you can see in [Table 13-2](#strftime_table).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过使用 `strftime()` 将日期和时间转换为字符串。这作为 `datetime`、`date` 和 `time` 对象的一个方法提供，也作为
    `time` 模块的一个函数提供。`strftime()` 使用格式字符串来指定输出，你可以在 [表 13-2](#strftime_table) 中看到。
- en: Table 13-2\. Output specifiers for `strftime()`
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 13-2\. `strftime()` 的输出格式说明符
- en: '| Format string | Date/time unit | Range |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 格式字符串 | 日期/时间单元 | 范围 |'
- en: '| --- | --- | --- |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `%Y` | year | `1900`-… |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `%Y` | 年份 | `1900`-… |'
- en: '| `%m` | month | `01`-`12` |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `%m` | 月份 | `01`-`12` |'
- en: '| `%B` | month name | `January`, … |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `%B` | 月份名称 | `January`, … |'
- en: '| `%b` | month abbrev | `Jan`, … |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `%b` | 月份缩写 | `Jan`, … |'
- en: '| `%d` | day of month | `01`-`31` |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `%d` | 日期 | `01`-`31` |'
- en: '| `%A` | weekday name | `Sunday`, … |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `%A` | 星期名称 | `Sunday`, … |'
- en: '| `a` | weekday abbrev | `Sun`, … |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `a` | 缩写星期 | `Sun`, … |'
- en: '| `%H` | hour (24 hr) | `00`-`23` |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `%H` | 小时（24小时制） | `00`-`23` |'
- en: '| `%I` | hour (12 hr) | `01`-`12` |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `%I` | 小时（12小时制） | `01`-`12` |'
- en: '| `%p` | AM/PM | `AM`, `PM` |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `%p` | 上午/下午 | `AM`, `PM` |'
- en: '| `%M` | minute | `00`-`59` |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `%M` | 分钟 | `00`-`59` |'
- en: '| `%S` | second | `00`-`59` |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `%S` | 秒 | `00`-`59` |'
- en: Numbers are zero-padded on the left.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 数字在左侧补零。
- en: 'Here’s the `strftime()` function provided by the `time` module. It converts
    a `struct_time` object to a string. We’ll first define the format string `fmt`
    and use it again later:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由`time`模块提供的`strftime()`函数。它将`struct_time`对象转换为字符串。我们首先定义格式字符串`fmt`，稍后再次使用它：
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If we try this with a `date` object, only the date parts will work, and the
    time defaults to midnight:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试使用`date`对象，只有日期部分会生效，时间默认为午夜：
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'For a `time` object, only the time parts are converted:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`time`对象，只有时间部分会被转换：
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You won’t want to use the day parts from a `time` object, because they’re meaningless.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您不会想使用`time`对象的日部分，因为它们没有意义。
- en: To go the other way and convert a string to a date or time, use `strptime()`
    with the same format string. There’s no regular expression pattern matching; the
    nonformat parts of the string (without `%`) need to match exactly. Let’s specify
    a format that matches *year*-*month*-*day*, such as `2019-01-29`. What happens
    if the date string you want to parse has spaces instead of dashes?
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要反向转换并将字符串转换为日期或时间，请使用具有相同格式字符串的`strptime()`。没有正则表达式模式匹配；字符串的非格式部分（没有`%`）需要完全匹配。让我们指定一个与*年*-*月*-*日*匹配的格式，例如`2019-01-29`。如果要解析的日期字符串中有空格而不是破折号会发生什么？
- en: '[PRE20]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If we feed `strptime()` some dashes, is it happy now?
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们给`strptime()`输入一些破折号，它会开心吗？
- en: '[PRE21]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Or fix the `fmt` string to match the date string:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 或者修复`fmt`字符串以匹配日期字符串：
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Even if the string seems to match its format, an exception is raised if a value
    is out of range (file names truncated for space):'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 即使字符串似乎与其格式匹配，如果值超出范围，将引发异常（文件名因空间而被截断）：
- en: '[PRE23]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Names are specific to your *locale*—internationalization settings for your
    operating system. If you need to print different month and day names, change your
    locale by using `setlocale()`; its first argument is `locale.LC_TIME` for dates
    and times, and the second is a string combining the language and country abbreviation.
    Let’s invite some international friends to a Halloween party. We’ll print the
    month, day, and day of week in US English, French, German, Spanish, and Icelandic
    (Icelanders have real elves):'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 名称特定于您的*locale*——操作系统的国际化设置。如果您需要打印不同的月份和日期名称，请通过使用`setlocale()`来更改您的locale；它的第一个参数是用于日期和时间的`locale.LC_TIME`，第二个参数是一个字符串，结合语言和国家缩写。让我们邀请一些国际朋友参加万圣节聚会。我们将用美国英语、法语、德语、西班牙语和冰岛语（冰岛人真的有精灵）打印月份、日期和星期几：
- en: '[PRE24]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Where do you find these magic values for `lang_country`? This is a bit wonky,
    but you can try this to get all of them (there are a few hundred):'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您从哪里找到这些`lang_country`的魔法值？这有点奇怪，但您可以尝试这样做以获取所有这些值（有几百个）：
- en: '[PRE25]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'From `names`, let’s get just locale names that seem to work with `setlocale()`,
    such as the ones we used in the preceding example—a two-character [language code](http://bit.ly/iso-639-1)
    followed by an underscore and a two-character [country code](http://bit.ly/iso-3166-1):'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 从`names`中，让我们获取看起来可以与`setlocale()`一起使用的区域设置名称，例如我们在前面示例中使用的那些——两个字符的[语言代码](http://bit.ly/iso-639-1)，后面跟着下划线和两个字符的[国家代码](http://bit.ly/iso-3166-1)：
- en: '[PRE26]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: What do the first five look like?
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 前五个长什么样？
- en: '[PRE27]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'So, if you wanted all the German language locales, try this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您想要所有的德语语言区域设置，请尝试这样做：
- en: '[PRE28]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note
  id: totrans-136
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you run `set_locale()` and get the error
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行`set_locale()`并出现错误
- en: '[PRE29]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: that locale is not supported by your operating system. You’ll need to figure
    out what your operating system needs to add it. This can happen even if Python
    told you (using `locale.locale_alias.keys()`) that it was a good locale. I had
    this error when testing on macOS with the locale `cy_gb` (Welsh, Great Britain),
    even though it had accepted `is_is` (Icelandic) in the preceding example.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 该locale不受您的操作系统支持。您需要弄清楚您的操作系统需要添加什么。即使Python告诉您（使用`locale.locale_alias.keys()`）这是一个好的locale，我在使用`cy_gb`（威尔士语，英国）locale时在macOS上遇到过此错误，即使它之前接受了`is_is`（冰岛语）的情况也是如此。
- en: All the Conversions
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所有的转换
- en: '[Figure 13-1](#datetime_fig) (from the Python [wiki](https://oreil.ly/C_39k))
    summarizes all the standard Python time interconversions.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 13-1](#datetime_fig)（来自Python [wiki](https://oreil.ly/C_39k)）总结了所有标准Python时间转换。'
- en: '![inp2 1301](assets/inp2_1301.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![inp2 1301](assets/inp2_1301.png)'
- en: Figure 13-1\. Date and time conversions
  id: totrans-143
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-1\. 日期和时间转换
- en: Alternative Modules
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替代模块
- en: 'If you find the standard library modules confusing, or lacking a particular
    conversion that you want, there are many third-party alternatives. Here are just
    a few of them:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得标准库模块混乱，或者缺少你想要的特定转换，那么有许多第三方替代方案。以下是其中几个：
- en: '[`arrow`](https://arrow.readthedocs.io)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '[`arrow`](https://arrow.readthedocs.io)'
- en: Combines many date and time functions with a simple API
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 将许多日期和时间函数与简单的 API 结合起来。
- en: '[`dateutil`](http://labix.org/python-dateutil)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[`dateutil`](http://labix.org/python-dateutil)'
- en: Parses almost any date format and handles relative dates and times well
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎可以解析任何日期格式，并且良好处理相对日期和时间。
- en: '[`iso8601`](https://pypi.python.org/pypi/iso8601)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[`iso8601`](https://pypi.python.org/pypi/iso8601)'
- en: Fills in gaps in the standard library for the ISO8601 format
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 填补了 ISO8601 格式在标准库中的空白。
- en: '[`fleming`](https://github.com/ambitioninc/fleming)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[`fleming`](https://github.com/ambitioninc/fleming)'
- en: Many time zone functions
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 许多时区功能。
- en: '[`maya`](https://github.com/kennethreitz/maya)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[`maya`](https://github.com/kennethreitz/maya)'
- en: Intuitive interface to dates, times, and intervals
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 直观的日期、时间和间隔接口。
- en: '[`dateinfer`](https://github.com/jeffreystarr/dateinfer)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[`dateinfer`](https://github.com/jeffreystarr/dateinfer)'
- en: Guesses the right format strings from date/time strings
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 从日期/时间字符串中猜测正确的格式字符串。
- en: Coming Up
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 即将到来
- en: Files and directories need love, too.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 文件和目录也需要关爱。
- en: Things to Do
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要做的事情
- en: 13.1 Write the current date as a string to the text file *today.txt*.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 13.1 将当前日期作为字符串写入文本文件 *today.txt*。
- en: 13.2 Read the text file *today.txt* into the string `today_string`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 13.2 将文本文件 *today.txt* 读入字符串 `today_string` 中。
- en: 13.3 Parse the date from `today_string`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 13.3 解析来自 `today_string` 的日期。
- en: 13.4 Create a date object of your day of birth.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 13.4 创建你的生日的日期对象。
- en: 13.5 What day of the week was your day of birth?
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 13.5 你的生日是星期几？
- en: 13.6 When will you be (or when were you) 10,000 days old?
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 13.6 你将（或者已经）十千天岁时是哪天？
- en: ^([1](ch13.html#idm45794986403304-marker)) This starting point is roughly when
    Unix was born, ignoring those pesky leap seconds.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch13.html#idm45794986403304-marker)) 大约是 Unix 诞生的起点，忽略那些烦人的闰秒。
