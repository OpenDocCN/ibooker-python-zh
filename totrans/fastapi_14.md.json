["```py\nimport uvicorn\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = FastAPI()\n\nbasic = HTTPBasic()\n\n@app.get(\"/who\")\ndef get_user(\n    creds: HTTPBasicCredentials = Depends(basic)):\n    return {\"username\": creds.username, \"password\": creds.password}\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"auth:app\", reload=True)\n```", "```py\n$ http -q -a me:secret localhost:8000/who\n{\n    \"password\": \"secret\",\n    \"username\": \"me\"\n}\n```", "```py\n>>> import requests\n>>> r = requests.get(\"http://localhost:8000/who\",\n    auth=(\"me\", \"secret\"))\n>>> r.json()\n{'username': 'me', 'password': 'secret'}\n```", "```py\nimport uvicorn\nfrom fastapi import Depends, FastAPI, HTTPException\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = FastAPI()\n\nsecret_user: str = \"newphone\"\nsecret_password: str = \"whodis?\"\n\nbasic: HTTPBasicCredentials = HTTPBasic()\n\n@app.get(\"/who\")\ndef get_user(\n    creds: HTTPBasicCredentials = Depends(basic)) -> dict:\n    if (creds.username == secret_user and\n        creds.password == secret_password):\n        return {\"username\": creds.username,\n            \"password\": creds.password}\n    raise HTTPException(status_code=401, detail=\"Hey!\")\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"auth:app\", reload=True)\n```", "```py\n$ http -a me:secret localhost:8000/who\nHTTP/1.1 401 Unauthorized\ncontent-length: 17\ncontent-type: application/json\ndate: Fri, 03 Mar 2023 03:25:09 GMT\nserver: uvicorn\n\n{\n    \"detail\": \"Hey!\"\n}\n```", "```py\n$ http -q -a newphone:whodis? localhost:8000/who\n{\n    \"password\": \"whodis?\",\n    \"username\": \"newphone\"\n}\n```", "```py\nfrom pydantic import BaseModel\n\nclass User(BaseModel):\n    name: str\n    hash: str\n```", "```py\nfrom model.user import User\nfrom .init import (conn, curs, get_db, IntegrityError)\nfrom error import Missing, Duplicate\n\ncurs.execute(\"\"\"create table if not exists\n user(\n name text primary key,\n hash text)\"\"\")\ncurs.execute(\"\"\"create table if not exists\n xuser(\n name text primary key,\n hash text)\"\"\")\n\ndef row_to_model(row: tuple) -> User:\n    name, hash = row\n    return User(name=name, hash=hash)\n\ndef model_to_dict(user: User) -> dict:\n    return user.dict()\n\ndef get_one(name: str) -> User:\n    qry = \"select * from user where name=:name\"\n    params = {\"name\": name}\n    curs.execute(qry, params)\n    row = curs.fetchone()\n    if row:\n        return row_to_model(row)\n    else:\n        raise Missing(msg=f\"User {name} not found\")\n\ndef get_all() -> list[User]:\n    qry = \"select * from user\"\n    curs.execute(qry)\n    return [row_to_model(row) for row in curs.fetchall()]\n\ndef create(user: User, table:str = \"user\"):\n    \"\"\"Add <user> to user or xuser table\"\"\"\n    qry = f\"\"\"insert into {table}\n (name, hash)\n values\n (:name, :hash)\"\"\"\n    params = model_to_dict(user)\n    try:\n        curs.execute(qry, params)\n    except IntegrityError:\n        raise Duplicate(msg=\n            f\"{table}: user {user.name} already exists\")\n\ndef modify(name: str, user: User)  -> User:\n    qry = \"\"\"update user set\n name=:name, hash=:hash\n where name=:name0\"\"\"\n    params = {\n        \"name\": user.name,\n        \"hash\": user.hash,\n        \"name0\": name}\n    curs.execute(qry, params)\n    if curs.rowcount == 1:\n        return get_one(user.name)\n    else:\n        raise Missing(msg=f\"User {name} not found\")\n\ndef delete(name: str) -> None:\n    \"\"\"Drop user with <name> from user table, add to xuser table\"\"\"\n    user = get_one(name)\n    qry = \"delete from user where name = :name\"\n    params = {\"name\": name}\n    curs.execute(qry, params)\n    if curs.rowcount != 1:\n        raise Missing(msg=f\"User {name} not found\")\n    create(user, table=\"xuser\")\n```", "```py\nfrom model.user import User\nfrom error import Missing, Duplicate\n\n# (no hashed password checking in this module)\nfakes = [\n    User(name=\"kwijobo\",\n         hash=\"abc\"),\n    User(name=\"ermagerd\",\n         hash=\"xyz\"),\n    ]\n\ndef find(name: str) -> User | None:\n    for e in fakes:\n        if e.name == name:\n            return e\n    return None\n\ndef check_missing(name: str):\n    if not find(name):\n        raise Missing(msg=f\"Missing user {name}\")\n\ndef check_duplicate(name: str):\n    if find(name):\n        raise Duplicate(msg=f\"Duplicate user {name}\")\n\ndef get_all() -> list[User]:\n    \"\"\"Return all users\"\"\"\n    return fakes\n\ndef get_one(name: str) -> User:\n    \"\"\"Return one user\"\"\"\n    check_missing(name)\n    return find(name)\n\ndef create(user: User) -> User:\n    \"\"\"Add a user\"\"\"\n    check_duplicate(user.name)\n    return user\n\ndef modify(name: str, user: User) -> User:\n    \"\"\"Partially modify a user\"\"\"\n    check_missing(name)\n    return user\n\ndef delete(name: str) -> None:\n    \"\"\"Delete a user\"\"\"\n    check_missing(name)\n    return None\n```", "```py\nfrom datetime import timedelta, datetime\nimport os\nfrom jose import jwt\nfrom model.user import User\n\nif os.getenv(\"CRYPTID_UNIT_TEST\"):\n    from fake import user as data\nelse:\n    from data import user as data\n\n# --- New auth stuff\n\nfrom passlib.context import CryptContext\n\n# Change SECRET_KEY for production!\nSECRET_KEY = \"keep-it-secret-keep-it-safe\"\nALGORITHM = \"HS256\"\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\ndef verify_password(plain: str, hash: str) -> bool:\n    \"\"\"Hash <plain> and compare with <hash> from the database\"\"\"\n    return pwd_context.verify(plain, hash)\n\ndef get_hash(plain: str) -> str:\n    \"\"\"Return the hash of a <plain> string\"\"\"\n    return pwd_context.hash(plain)\n\ndef get_jwt_username(token:str) -> str | None:\n    \"\"\"Return username from JWT access <token>\"\"\"\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        if not (username := payload.get(\"sub\")):\n            return None\n    except jwt.JWTError:\n        return None\n    return username\n\ndef get_current_user(token: str) -> User | None:\n    \"\"\"Decode an OAuth access <token> and return the User\"\"\"\n    if not (username := get_jwt_username(token)):\n        return None\n    if (user := lookup_user(username)):\n        return user\n    return None\n\ndef lookup_user(username: str) -> User | None:\n    \"\"\"Return a matching User from the database for <name>\"\"\"\n    if (user := data.get(username)):\n        return user\n    return None\n\ndef auth_user(name: str, plain: str) -> User | None:\n    \"\"\"Authenticate user <name> and <plain> password\"\"\"\n    if not (user := lookup_user(name)):\n        return None\n    if not verify_password(plain, user.hash):\n        return None\n    return user\n\ndef create_access_token(data: dict,\n    expires: timedelta | None = None\n):\n    \"\"\"Return a JWT access token\"\"\"\n    src = data.copy()\n    now = datetime.utcnow()\n    if not expires:\n        expires = timedelta(minutes=15)\n    src.update({\"exp\": now + expires})\n    encoded_jwt = jwt.encode(src, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n# --- CRUD passthrough stuff\n\ndef get_all() -> list[User]:\n    return data.get_all()\n\ndef get_one(name) -> User:\n    return data.get_one(name)\n\ndef create(user: User) -> User:\n    return data.create(user)\n\ndef modify(name: str, user: User) -> User:\n    return data.modify(name, user)\n\ndef delete(name: str) -> None:\n    return data.delete(name)\n```", "```py\nimport os\nfrom fastapi import APIRouter, HTTPException\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom model.user import User\nif os.getenv(\"CRYPTID_UNIT_TEST\"):\n    from fake import user as service\nelse:\n    from service import user as service\nfrom error import Missing, Duplicate\n\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\nrouter = APIRouter(prefix = \"/user\")\n\n# --- new auth stuff\n\n# This dependency makes a post to \"/user/token\"\n# (from a form containing a username and password)\n# and returns an access token.\noauth2_dep = OAuth2PasswordBearer(tokenUrl=\"token\")\n\ndef unauthed():\n    raise HTTPException(\n        status_code=401,\n        detail=\"Incorrect username or password\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\n# This endpoint is directed to by any call that has the\n# oauth2_dep() dependency:\n@router.post(\"/token\")\nasync def create_access_token(\n    form_data: OAuth2PasswordRequestForm =  Depends()\n):\n    \"\"\"Get username and password from OAuth form,\n return access token\"\"\"\n    user = service.auth_user(form_data.username, form_data.password)\n    if not user:\n        unauthed()\n    expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = service.create_access_token(\n        data={\"sub\": user.username}, expires=expires\n    )\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n\n@app.get(\"/token\")\ndef get_access_token(token: str = Depends(oauth2_dep)) -> dict:\n    \"\"\"Return the current access token\"\"\"\n    return {\"token\": token}\n\n# --- previous CRUD stuff\n\n@router.get(\"/\")\ndef get_all() -> list[User]:\n    return service.get_all()\n\n@router.get(\"/{name}\")\ndef get_one(name) -> User:\n    try:\n        return service.get_one(name)\n    except Missing as exc:\n        raise HTTPException(status_code=404, detail=exc.msg)\n\n@router.post(\"/\", status_code=201)\ndef create(user: User) -> User:\n    try:\n        return service.create(user)\n    except Duplicate as exc:\n        raise HTTPException(status_code=409, detail=exc.msg)\n\n@router.patch(\"/\")\ndef modify(name: str, user: User) -> User:\n    try:\n        return service.modify(name, user)\n    except Missing as exc:\n        raise HTTPException(status_code=404, detail=exc.msg)\n\n@router.delete(\"/{name}\")\ndef delete(name: str) -> None:\n    try:\n        return service.delete(name)\n    except Missing as exc:\n        raise HTTPException(status_code=404, detail=exc.msg)\n```", "```py\nfrom fastapi import FastAPI\nfrom web import explorer, creature, user\n\napp = FastAPI()\napp.include_router(explorer.router)\napp.include_router(creature.router)\napp.include_router(user.router)\n```", "```py\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\neyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.\nSflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n```", "```py\nfrom fastapi import FastAPI, Request\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"https://ui.cryptids.com\",],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n    )\n\n@app.get(\"/test_cors\")\ndef test_cors(request: Request):\n    print(request)\n```"]