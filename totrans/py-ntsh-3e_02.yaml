- en: Chapter 2\. The Python Interpreter
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章。Python 解释器
- en: To develop software systems in Python, you usually write text files that contain
    Python source code. You can do this using any text editor, including those we
    list in [“Python Development Environments”](#python_development_environments).
    Then you process the source files with the Python compiler and interpreter. You
    can do this directly, within an integrated development environment (IDE), or via
    another program that embeds Python. The Python interpreter also lets you execute
    Python code interactively, as do IDEs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中开发软件系统时，通常会编写包含 Python 源代码的文本文件。您可以使用任何文本编辑器来完成这项工作，包括我们在[“Python
    开发环境”](#python_development_environments)中列出的编辑器。然后，您可以使用 Python 编译器和解释器处理源文件。您可以直接执行此操作，也可以在集成开发环境
    (IDE) 中执行此操作，或者通过嵌入 Python 的另一个程序执行此操作。Python 解释器还允许您交互地执行 Python 代码，就像 IDE 一样。
- en: The python Program
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: python 程序
- en: The Python interpreter program is run as **python** (it’s named *python.exe*
    on Windows). The program includes both the interpreter itself and the Python compiler,
    which is implicitly invoked as needed on imported modules. Depending on your system,
    the program may have to be in a directory listed in your PATH environment variable.
    Alternatively, as with any other program, you can provide its complete pathname
    at a command (shell) prompt or in the shell script (or shortcut target, etc.)
    that runs it.^([1](ch02.xhtml#ch01fn14))
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Python 解释器程序的运行方式是 **python**（在 Windows 上命名为 *python.exe*）。该程序包括解释器本身和 Python
    编译器，后者在需要时会隐式调用已导入的模块。根据您的系统，该程序可能必须位于 PATH 环境变量中列出的目录中。或者，与任何其他程序一样，您可以在命令 (shell)
    提示符处提供其完整路径名，或在运行它的 shell 脚本 (或快捷方式目标等) 中提供其完整路径名。^([1](ch02.xhtml#ch01fn14))
- en: On Windows, press the Windows key and start typing **python**. “Python 3.x”
    (the command-line version) appears, along with other choices, such as “IDLE” (the
    Python GUI).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，按下 Windows 键然后开始键入 **python**。出现“Python 3.x”（命令行版本）以及其他选择，例如“IDLE”（Python
    GUI）。
- en: Environment Variables
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境变量
- en: 'Besides PATH, other environment variables affect the **python** program. Some
    of these have the same effects as options passed to **python** on the command
    line, as we show in the next section, but several environment variables provide
    settings not available via command-line options. The following list introduces
    some frequently used ones; for complete details, see the [online docs](https://oreil.ly/sYdEK):'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 PATH 外，其他环境变量也会影响 **python** 程序。其中一些与在命令行传递给 **python** 的选项具有相同的效果，就像我们在下一节中展示的那样，但是有几个环境变量提供了通过命令行选项不可用的设置。下面列出了一些经常使用的环境变量；有关完整详情，请参阅[在线文档](https://oreil.ly/sYdEK)：
- en: PYTHONHOME
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: PYTHONHOME
- en: The Python installation directory. A *lib* subdirectory, containing the Python
    standard library, must be under this directory. On Unix-like systems, standard
    library modules should be in *lib/python-3.x* for Python 3*.x*, where *x* is the
    minor Python version. If PYTHONHOME is not set, Python makes an informed guess
    about the installation directory.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python 安装目录。必须在此目录下包含一个 *lib* 子目录，其中包含 Python 标准库。在类 Unix 系统上，标准库模块应该位于 *lib/python-3.x*
    中，其中 *x* 是次要 Python 版本。如果没有设置 PYTHONHOME，则 Python 会对安装目录进行一个明智的猜测。
- en: PYTHONPATH
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: PYTHONPATH
- en: A list of directories, separated by colons on Unix-like systems and by semicolons
    on Windows, from which Python can import modules. This list extends the initial
    value for Python’s sys.path variable. We cover modules, importing, and sys.path
    in [Chapter 7](ch07.xhtml#modules_and_packages).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Python 可以导入模块的目录列表，在类 Unix 系统上用冒号分隔，在 Windows 上用分号分隔。这个列表扩展了 Python 的 sys.path
    变量的初始值。我们在[第 7 章](ch07.xhtml#modules_and_packages)中介绍了模块、导入和 sys.path。
- en: PYTHONSTARTUP
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: PYTHONSTARTUP
- en: The name of a Python source file to run each time an interactive interpreter
    session starts. No such file runs if you don’t set this variable, or set it to
    the path of a file that is not found. The PYTHONSTARTUP file does not run when
    you run a Python script; it runs only when you start an interactive session.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每次启动交互式解释器会话时运行的 Python 源文件的名称。如果您没有设置此变量，或者设置为找不到的文件的路径，那么就不会运行这样的文件。当您运行 Python
    脚本时，PYTHONSTARTUP 文件不会运行；它只在您启动交互式会话时运行。
- en: 'How to set and examine environment variables depends on your operating system.
    In Unix, use shell commands, often within startup shell scripts. On Windows, press
    the Windows key and start typing **environment** **var**, and a couple of shortcuts
    appear: one for user environment variables, the other for system ones. On a Mac,
    you can work just as on other Unix-like systems, but you have more options, including
    a MacPython-specific IDE. For more information about Python on the Mac, see [“Using
    Python on a Mac” in the online docs](https://oreil.ly/Co1au).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如何设置和检查环境变量取决于您的操作系统。 在 Unix 中，使用 shell 命令，通常在启动 shell 脚本中。 在 Windows 上，按 Windows
    键并开始键入 **environment** **var**，然后会出现一些快捷方式：一个用于用户环境变量，另一个用于系统环境变量。 在 Mac 上，您可以像在其他类
    Unix 系统上一样工作，但您有更多的选择，包括专门针对 MacPython 的 IDE。 有关在 Mac 上使用 Python 的更多信息，请参阅 [在线文档中的“在
    Mac 上使用 Python”](https://oreil.ly/Co1au)。
- en: Command-Line Syntax and Options
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令行语法和选项
- en: 'The Python interpreter’s command-line syntax can be summarized as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Python 解释器的命令行语法可以总结如下：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Brackets ([]) enclose what’s optional, braces ({}) enclose items of which zero
    or more may be present, and bars (|) mean a choice among alternatives. Python
    uses a slash (/) for filepaths, as in Unix.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 方括号（[]）表示可选内容，大括号（{}）表示可能出现的项，竖线（|）表示多个选项之间的选择。Python 中使用斜杠（/）表示文件路径，就像在 Unix
    中一样。
- en: 'Running a Python script at a command line can be as simple as:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行上运行 Python 脚本可以简单地如下所示：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can also explicitly provide the path to the script:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以明确提供脚本的路径：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The filename of the script can be an absolute or relative filepath, and need
    not have any specific extension (although it is conventional to use a *.py* extension).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的文件名可以是绝对路径或相对路径，并且不一定需要特定的扩展名（虽然使用 *.py* 扩展名是常规做法）。
- en: '*options* are case-sensitive short strings, starting with a hyphen, that ask
    **python** for nondefault behavior. **python** accepts only options that start
    with a hyphen (-). The most frequently used options are listed in [Table 2-1](#python_frequently_used_command_line_opt).
    Each option’s description gives the environment variable (if any) that, when set,
    requests that behavior. Many options have longer versions, starting with two hyphens,
    as shown by **python -h**. For full details, see the [online docs](https://oreil.ly/1ZcA9).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*选项* 是区分大小写的短字符串，以连字符开头，请求 **python** 以非默认行为运行。 **python** 只接受以连字符（-）开头的选项。
    最常用的选项列在 [表 2-1](#python_frequently_used_command_line_opt) 中。 每个选项的描述都给出了环境变量（如果有的话），设置该变量会请求对应的行为。
    许多选项都有更长的版本，以两个连字符开头，如 **python -h** 所示。 有关详细信息，请参阅 [在线文档](https://oreil.ly/1ZcA9)。 '
- en: Table 2-1\. Frequently used python command-line options
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2-1\. 经常使用的 python 命令行选项
- en: '| Option | Meaning (and corresponding environment variable, if any) |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 意义（及对应的环境变量，如果有的话） |'
- en: '| --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **-B** | Don’t save bytecode files to disk (PYTHONDONTWRITEBYTECODE) |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| **-B** | 不将字节码文件保存到磁盘上（PYTHONDONTWRITEBYTECODE） |'
- en: '| **-c** | Gives Python statements within the command line |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| **-c** | 在命令行内给出 Python 语句 |'
- en: '| **-E** | Ignores all environment variables |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| **-E** | 忽略所有环境变量 |'
- en: '| **-h** | Shows the full list of options, then terminates |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| **-h** | 显示完整的选项列表，然后终止 |'
- en: '| **-i** | Runs an interactive session after the file or command runs (PYTHONINSPECT)
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| **-i** | 在文件或命令运行后运行交互会话（PYTHONINSPECT） |'
- en: '| **-m** | Specifies a Python module to run as the main script |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| **-m** | 指定要作为主脚本运行的 Python 模块 |'
- en: '| **-O** | Optimizes bytecode (PYTHONOPTIMIZE)—note that this is an uppercase
    letter O, not the digit 0 |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| **-O** | 优化字节码（PYTHONOPTIMIZE）—注意这是大写字母 O，而不是数字 0 |'
- en: '| **-OO** | Like **-O**, but also removes docstrings from the bytecode |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| **-OO** | 类似于 **-O**，但同时从字节码中删除文档字符串 |'
- en: '| **-S** | Omits the implicit **import** site on startup (covered in [“Per-Site
    Customization”](ch14.xhtml#per_site_customization)) |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| **-S** | 在启动时省略隐式 **import** site（在 [“站点定制”](ch14.xhtml#per_site_customization)
    中有介绍） |'
- en: '| **-t**, **-tt** | Issues warnings about inconsistent tab usage (**-tt** issues
    errors, rather than just warnings, for the same issues) |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| **-t**, **-tt** | 警告不一致的制表符使用（**-tt** 对相同问题发出错误而不仅仅是警告） |'
- en: '| **-u** | Uses unbuffered binary files for standard output and standard error
    (PYTHONUNBUFFERED) |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| **-u** | 使用无缓冲的二进制文件进行标准输出和标准错误（PYTHONUNBUFFERED） |'
- en: '| **-v** | Verbosely traces module import and cleanup actions (PYTHONVERBOSE)
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| **-v** | 详细跟踪模块导入和清理操作（PYTHONVERBOSE） |'
- en: '| **-V** | Prints the Python version number, then terminates |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| **-V** | 打印 Python 版本号，然后终止 |'
- en: '| **-W arg** | Adds an entry to the warnings filter (see [“The warnings Module”](ch17.xhtml#the_warnings_module))
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| **-W arg** | 向警告过滤器添加一个条目（参见[“warnings模块”](ch17.xhtml#the_warnings_module)）
    |'
- en: '| **-x** | Excludes (skips) the first line of the script’s source |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| **-x** | 排除（跳过）脚本源代码的第一行 |'
- en: Use **-i** when you want to get an interactive session immediately after running
    some script, with top-level variables still intact and available for inspection.
    You do not need **-i** for normal interactive sessions, though it does no harm.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当您希望在运行某些脚本后立即获得交互式会话并且顶级变量仍然完整且可供检查时，请使用**-i**。对于正常的交互式会话，您不需要**-i**，尽管它也无害。
- en: '**-O** and **-OO** yield small savings of time and space in bytecode generated
    for modules you import, turning **assert** statements into no-operations, as covered
    in [“The assert Statement”](ch06.xhtml#the_assert_statement). **-OO** also discards
    documentation strings.^([2](ch02.xhtml#ch01fn15))'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**-O** 和 **-OO** 在您导入的模块生成的字节码中节省了时间和空间，将**assert**语句转换为无操作，正如我们在[“assert语句”](ch06.xhtml#the_assert_statement)中所述。**-OO**
    还会丢弃文档字符串。^([2](ch02.xhtml#ch01fn15))'
- en: After the options, if any, tell Python which script to run by adding the filepath
    to that script. Instead of a filepath, you can use **-c** *command* to execute
    a Python code string command. A *command* normally contains spaces, so you’ll
    need to add quotes around it to satisfy your operating system’s shell or command-line
    processor. Some shells (e.g., [**bash**](https://oreil.ly/seIne)) let you enter
    multiple lines as a single argument, so that *command* can be a series of Python
    statements. Other shells (e.g., Windows shells) limit you to a single line; *command*
    can then be one or more simple statements separated by semicolons (;), as we discuss
    in [“Statements”](ch03.xhtml#statements).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在选项后，如果有的话，通过将文件路径添加到该脚本来告诉Python要运行哪个脚本。而不是文件路径，你可以使用**-c** *command*来执行Python代码字符串命令。*command*通常包含空格，因此你需要在其周围添加引号以满足操作系统的shell或命令行处理器的要求。某些shell（例如，[**bash**](https://oreil.ly/seIne)）允许您将多行输入作为单个参数，因此*command*可以是一系列Python语句。其他shell（例如Windows
    shell）限制您为单行；*command*可以是一个或多个用分号（;）分隔的简单语句，正如我们在[“语句”](ch03.xhtml#statements)中讨论的那样。
- en: Another way to specify which Python script to run is with **-m** *module*. This
    option tells Python to load and run a module named ***module*** (or the *__main__.py*
    member of a package or ZIP file named *module*) from some directory that is part
    of Python’s sys.path; this is useful with several modules from Python’s standard
    library. For example, as covered in [“The timeit module”](ch17.xhtml#the_timeit_module),
    **-m timeit** is often the best way to perform micro-benchmarking of Python statements.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种指定要运行的Python脚本的方法是使用**-m** *module*。此选项告诉Python从Python的sys.path中的某个目录加载和运行名为*module*的模块（或名为*module*的包或ZIP文件的*__main__.py*成员）；这对于使用Python标准库中的几个模块非常有用。例如，正如我们在[“timeit模块”](ch17.xhtml#the_timeit_module)中讨论的那样，**-m
    timeit**通常是执行Python语句的最佳方式。
- en: A hyphen (**-**), or the lack of any token in this position, tells the interpreter
    to read the program source from standard input—normally, an interactive session.
    You need a hyphen only if further arguments follow. *args* are arbitrary strings;
    the Python you run can access these strings as items of the list sys.argv.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 连字符（**-**）或在此位置缺少任何令牌告诉解释器从标准输入读取程序源码，通常是交互式会话。只有在跟随进一步参数时才需要连字符。*args*是任意字符串；您运行的Python可以将这些字符串作为sys.argv列表的项访问。
- en: 'For example, enter the following at a command prompt to have Python show the
    current date and time:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在命令提示符处输入以下内容即可使Python显示当前日期和时间：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can start the command with just **python** (you do not have to specify the
    full path to Python) if the directory of the Python executable is in your PATH
    environment variable. (If you have multiple versions of Python installed, you
    can specify the version with, for example, **python3** or **python3.10**, as appropriate;
    then, the version used if you just say **python** is the one you installed most
    recently.)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Python可执行文件的目录在您的PATH环境变量中，您可以仅以**python**开头（无需指定完整路径）。（如果您安装了多个版本的Python，您可以使用例如**python3**或**python3.10**指定版本；然后，如果您只说**python**，则使用的版本是您最近安装的版本。）
- en: The Windows py Launcher
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows py启动器
- en: On Windows, Python provides the **py** launcher to install and run multiple
    Python versions on a machine. At the bottom of the installer, you’ll find an option
    to install the launcher for all users (it’s checked by default). When you have
    multiple versions, you can select a specific version using **py** followed by
    a version option instead of the plain **python** command. Common **py** command
    options are listed in [Table 2-2](#frequently_used_py_command_line_options) (use
    **py -h** to see all the options).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，Python 提供了 **py** 启动器，用于在计算机上安装和运行多个 Python 版本。安装程序的底部有一个选项，用于为所有用户安装启动器（默认已选中）。当存在多个版本时，您可以使用
    **py** 后跟版本选项选择特定版本，而不是简单的 **python** 命令。常见的 **py** 命令选项列在 [表2-2](#frequently_used_py_command_line_options)
    中（使用 **py -h** 查看所有选项）。
- en: Table 2-2\. Frequently used py command-line options
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 表2-2\. 经常使用的 py 命令行选项
- en: '| Option | Meaning |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 意义 |'
- en: '| --- | --- |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **-2** | Run the latest installed Python 2 version. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| **-2** | 运行最新安装的 Python 2 版本。 |'
- en: '| **-3** | Run the latest installed Python 3 version. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| **-3** | 运行最新安装的 Python 3 版本。 |'
- en: '| **-3.*****x*** or **-3.*****x*****-*****nn*** | Run a specific Python 3 version.
    When referenced as just **-3.10**, uses the 64-bit version, or the 32-bit version
    if no 64-bit version is available. **-3.10-32** or **-3.10-64** picks a specific
    build when both are installed. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| **-3.*****x*** 或 **-3.*****x*****-*****nn*** | 运行特定的 Python 3 版本。当仅引用为 **-3.10**
    时，使用64位版本，如果没有64位版本则使用32位版本。 **-3.10-32** 或 **-3.10-64** 在两者都安装时选择特定的构建版本。 |'
- en: '| **-0** or **--list** | List all installed Python versions, including an indication
    of whether a build is 32- or 64-bit, such as **3.10-64**. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| **-0** 或 **--list** | 列出所有已安装的 Python 版本，包括标识是否为32位或64位的构建，如 **3.10-64**。
    |'
- en: '| **-h** | List all **py** command options, followed by standard Python help.
    |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| **-h** | 列出所有 **py** 命令选项，后跟标准 Python 帮助。 |'
- en: If no version option is given, **py** runs the latest installed Python.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未指定版本选项，**py** 将运行最新安装的 Python。
- en: 'For example, to show the local time using the installed Python 3.9 64-bit version,
    you can run this command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要使用已安装的 Python 3.9 64位版本显示本地时间，可以运行以下命令：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: (Typically, there is no need to give a path to **py**, since installing Python
    adds **py** to the system PATH.)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: （通常不需要指定 **py** 的路径，因为安装 Python 会将 **py** 添加到系统 PATH 中。）
- en: The PyPy Interpreter
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PyPy 解释器
- en: '*PyPy*, written in Python, implements its own compiler to generate LLVM intermediate
    code to run on an LLVM backend. The PyPy project offers some improvements over
    standard CPython, most notably in the areas of performance and multithreading.
    (At this writing, PyPy is up-to-date with Python 3.9.)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*PyPy*，用 Python 编写，实现了自己的编译器以生成在 LLVM 后端运行的 LLVM 中间代码。PyPy 项目在性能和多线程方面比标准的
    CPython 有一些改进。（截至本文写作时，PyPy 已更新至 Python 3.9。）'
- en: '**pypy** may be run similarly to **python**:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**pypy** 可以类似于 **python** 运行：'
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See the PyPy [home page](http://pypy.org) for installation instructions and
    complete up-to-date information.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看 PyPy 的 [主页](http://pypy.org) 获取安装说明和完整的最新信息。
- en: Interactive Sessions
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交互式会话
- en: When you run **python** without a script argument, Python starts an interactive
    session and prompts you to enter Python statements or expressions. Interactive
    sessions are useful to explore, to check things out, and to use Python as a powerful,
    extensible interactive calculator. (Jupyter Notebook, discussed briefly at the
    end of this chapter, is like a “Python on steroids” specifically for interactive
    session usage.) This mode is often referred to as a *REPL*, or read–evaluate–print
    loop, since that’s pretty much what the interpreter then does.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行 **python** 而没有脚本参数时，Python 启动交互会话，并提示你输入 Python 语句或表达式。交互式会话对于探索、检查和使用
    Python 作为强大、可扩展的交互式计算器非常有用。（本章末尾简要讨论的 Jupyter Notebook 就像专门用于交互式会话的“强化版 Python”。）这种模式通常称为
    *REPL*，即读取-求值-打印循环，因为解释器基本上就是这样做的。
- en: When you enter a complete statement, Python executes it. When you enter a complete
    expression, Python evaluates it. If the expression has a result, Python outputs
    a string representing the result and also assigns the result to the variable named
    _ (a single underscore) so that you can immediately use that result in another
    expression. The prompt string is >>> when Python expects a statement or expression,
    and ... when a statement or expression has been started but not completed. In
    particular, Python prompts with ... when you have opened a parenthesis, bracket,
    or brace on a previous line and haven’t closed it yet.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当您输入完整语句时，Python 执行它。当您输入完整表达式时，Python 评估它。如果表达式有结果，Python 输出表示结果的字符串，并将结果分配给名为
    _（单个下划线）的变量，以便您可以立即在另一个表达式中使用该结果。当 Python 预期语句或表达式时，提示字符串为 >>>，当已开始但未完成语句或表达式时为
    ...。特别地，在您在前一行打开括号、方括号或大括号但尚未关闭它时，Python 使用 ... 提示。
- en: While working in the interactive Python environment, you can use the built-in
    **help()** function to drop into a help utility that offers useful information
    about Python’s keywords and operators, installed modules, and general topics.
    When paging through a long help description, press **q** to return to the help>
    prompt. To exit the utility and return to the Python >>> prompt, type **quit**.
    You can also get help on specific objects at the Python prompt without entering
    the help utility by typing **help(***obj***)**, where *obj* is the program object
    you want more help with.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在交互式 Python 环境中工作时，您可以使用内置的 **help()** 函数进入一个帮助实用程序，提供关于 Python 关键字和运算符、安装的模块以及一般主题的有用信息。在浏览长帮助描述时，按
    **q** 返回到 help> 提示符。要退出实用程序并返回到 Python >>> 提示符，请输入 **quit**。您还可以通过在 Python 提示符下输入
    **help(***obj***)** 来获取有关特定对象的帮助，其中 *obj* 是您想要更多帮助的程序对象。
- en: 'There are several ways you can end an interactive session. The most common
    are:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方式可以结束交互会话。最常见的是：
- en: Enter the end-of-file keystroke for your OS (Ctrl-Z on Windows, Ctrl-D on Unix-like
    systems).
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入您的操作系统的文件结尾按键（在 Windows 上为 Ctrl-Z，在类 Unix 系统上为 Ctrl-D）。
- en: Execute either of the built-in functions quit or exit, using the form quit()
    or exit(). (Omitting the trailing () will display a message like “Use quit() or
    Ctrl-D (i.e., EOF) to exit,” but will still leave you in the interpreter.)
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行内置函数 quit 或 exit，使用形式 quit() 或 exit()。（省略尾随 () 将显示消息，如“使用 quit() 或 Ctrl-D（即
    EOF）退出”，但仍会保留您在解释器中。）
- en: Execute the statement **raise** SystemExit, or call sys.exit() (we cover SystemExit
    and **raise** in [Chapter 6](ch06.xhtml#exceptions), and the sys module in [Chapter 8](ch08.xhtml#core_built_ins_and_standard_library_mod)).
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行语句 **raise** SystemExit，或调用 sys.exit()（我们在 [第 6 章](ch06.xhtml#exceptions)
    中讨论 SystemExit 和 **raise**，以及在 [第 8 章](ch08.xhtml#core_built_ins_and_standard_library_mod)
    中的 sys 模块）。
- en: Use the Python Interactive Interpreter to Experiment
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 交互解释器进行实验。
- en: 'Trying out Python statements in the interactive interpreter is a quick way
    to experiment with Python and immediately see the results. For example, here is
    a simple use of the built-in enumerate function:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在交互式解释器中尝试 Python 语句是快速实验 Python 并立即看到结果的一种方式。例如，这里是内置 enumerate 函数的简单使用：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The interactive interpreter is a good introductory platform to learn core Python
    syntax and features. (Experienced Python developers often open a Python interpreter
    to quickly check out an infrequently used command or function.)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 交互解释器是学习核心 Python 语法和特性的良好入门平台。（经验丰富的 Python 开发人员经常打开 Python 解释器来快速检查不经常使用的命令或函数。）
- en: 'Line-editing and history facilities depend in part on how Python was built:
    if the readline module was included, all features of the GNU readline library
    are available. Windows has a simple but usable history facility for interactive
    text mode programs like **python**.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 行编辑和历史记录功能部分依赖于 Python 的构建方式：如果包含了 readline 模块，则可使用 GNU readline 库的所有功能。Windows
    对于像 **python** 这样的交互文本模式程序有一个简单但可用的历史记录功能。
- en: In addition to the built-in Python interactive environment, and those offered
    as part of richer development environments covered in the next section, you can
    freely download other powerful interactive environments. The most popular one
    is [*IPython*](http://ipython.org), covered in [“IPython”](ch01.xhtml#ipython),
    which offers a dazzling wealth of features. A simpler, lighter weight, but still
    quite handy alternative read-line interpreter is [*bpython*](https://oreil.ly/UBZVL).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 除了内置的 Python 交互式环境和下一节介绍的更丰富的开发环境中提供的环境外，你可以自由下载其他强大的交互式环境。最流行的是[*IPython*](http://ipython.org)，在[“IPython”](ch01.xhtml#ipython)中有详细介绍，提供了丰富的功能。一个更简单、更轻量级但同样非常方便的替代读取行解释器是[*bpython*](https://oreil.ly/UBZVL)。
- en: Python Development Environments
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 开发环境
- en: The Python interpreter’s built-in interactive mode is the simplest development
    environment for Python. It is primitive, but it’s lightweight, has a small footprint,
    and starts fast. Together with a good text editor (as discussed in [“Free Text
    Editors with Python Support”](#free_text_editors_with_python_support)) and line-editing
    and history facilities, the interactive interpreter (or, alternatively, the much
    more powerful IPython/Jupyter command-line interpreter) is a usable development
    environment. However, there are several other development environments you can
    use.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Python 解释器的内置交互模式是 Python 最简单的开发环境。它比较原始，但是轻量级，占用空间小，启动速度快。配合一个好的文本编辑器（如[“带有
    Python 支持的免费文本编辑器”](#free_text_editors_with_python_support)中讨论的），以及行编辑和历史记录功能，交互式解释器（或者更强大的
    IPython/Jupyter 命令行解释器）是一个可用的开发环境。但是，你还可以使用其他几种开发环境。
- en: IDLE
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IDLE
- en: Python’s [Integrated Development and Learning Environment (IDLE)](https://oreil.ly/1vXr6)
    comes with standard Python distributions on most platforms. IDLE is a cross-platform,
    100% pure Python application based on the Tkinter GUI. It offers a Python shell
    similar to the interactive Python interpreter, but richer. It also includes a
    text editor optimized to edit Python source code, an integrated interactive debugger,
    and several specialized browsers/viewers.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的[集成开发与学习环境（IDLE）](https://oreil.ly/1vXr6)随着大多数平台上的标准 Python 发行版一起提供。IDLE
    是一个跨平台的、100% 纯 Python 应用程序，基于 Tkinter GUI。它提供一个类似交互式 Python 解释器的 Python shell，但功能更丰富。还包括一个专为编辑
    Python 源代码优化的文本编辑器、集成的交互式调试器以及几个专用的浏览器/查看器。
- en: For more functionality in IDLE, install [IdleX](https://oreil.ly/cU_aD), a substantial
    collection of free third-party extensions.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 若要在 IDLE 中获得更多功能，请安装[IdleX](https://oreil.ly/cU_aD)，这是一个大量的免费第三方扩展集合。
- en: To install and use IDLE on macOS, follow the specific [instructions](https://oreil.ly/wHA6I)
    on the Python website.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 macOS 上安装并使用 IDLE，请按照 Python 网站上的具体[说明](https://oreil.ly/wHA6I)进行操作。
- en: Other Python IDEs
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他 Python IDE
- en: 'IDLE is mature, stable, easy, fairly rich, and extensible. There are, however,
    many other IDEs: cross-platform or platform specific, free or commercial (including
    commercial IDEs with free offerings, especially if you’re developing open source
    software), standalone or add-ons to other IDEs.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: IDLE 是成熟、稳定、易用、功能相当丰富且可扩展的。然而，还有许多其他 IDE：跨平台或特定于平台、免费或商业化（包括带有免费提供的商业 IDE，特别是如果你开发开源软件）、独立或作为其他
    IDE 的附加组件。
- en: Some of these IDEs sport features such as static analysis, GUI builders, debuggers,
    and so on. Python’s IDE [wiki page](https://oreil.ly/EMpSD) lists over 30, and
    points to many other URLs with reviews and comparisons. If you’re an IDE collector,
    happy hunting!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些 IDE 具有静态分析、GUI 构建器、调试器等功能。Python 的 IDE [wiki 页面](https://oreil.ly/EMpSD)列出了
    30 多种，并指向许多其他 URL，包括评测和比较。如果你是 IDE 收集者，祝你好运！
- en: We can’t do justice to even a tiny subset of all the available IDEs. The free
    third-party plug-in [PyDev](http://www.pydev.org) for the popular cross-platform,
    cross-language modular IDE [Eclipse](http://www.eclipse.org) has excellent Python
    support. Steve is a longtime user of [Wing](https://wingware.com) by Archaeopteryx,
    the most venerable Python-specific IDE. Paul’s IDE of choice, and perhaps the
    single most popular third-party Python IDE today, is [PyCharm](https://oreil.ly/uQWxm)
    by JetBrains. [Thonny](https://thonny.org) is a popular beginner’s IDE, lightweight
    but full featured and easily installed on the Raspberry Pi (or just about any
    other popular platform). And not to be overlooked is Microsoft’s [Visual Studio
    Code](https://code.visualstudio.com), an excellent, very popular cross-platform
    IDE with support (via plug-ins) for a number of languages, including Python. If
    you use Visual Studio, check out [PTVS](https://oreil.ly/VZ7Dl), an open source
    plug-in that’s particularly good at allowing mixed-language debugging in Python
    and C as and when needed.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是所有可用的 IDE 的一个小小子集，我们也无法完全公正地进行介绍。流行的跨平台、跨语言模块化 IDE [Eclipse](http://www.eclipse.org)
    的免费第三方插件 [PyDev](http://www.pydev.org) 具有出色的 Python 支持。史蒂夫长期以来一直使用由 Archaeopteryx
    推出的 [Wing](https://wingware.com)，这是最古老的 Python 专用 IDE。保罗的首选 IDE，也可能是当今最流行的第三方
    Python IDE，是由 JetBrains 推出的 [PyCharm](https://oreil.ly/uQWxm)。[Thonny](https://thonny.org)
    是一款流行的初学者 IDE，轻量但功能齐全，可以轻松安装在 Raspberry Pi（或几乎任何其他流行平台）上。还有不容忽视的是微软的 [Visual Studio
    Code](https://code.visualstudio.com)，这是一个非常出色且非常流行的跨平台 IDE，支持多种语言，包括 Python（通过插件）。如果您使用
    Visual Studio，请查看 [PTVS](https://oreil.ly/VZ7Dl)，这是一个开源插件，特别擅长在需要时允许 Python 和
    C 语言混合调试。
- en: Free Text Editors with Python Support
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 具有 Python 支持的免费文本编辑器
- en: You can edit Python source code with any text editor, even simple ones such
    as Notepad on Windows or *ed* on Linux. Many powerful free editors support Python
    with extra features such as syntax-based colorization and automatic indentation.
    Cross-platform editors let you work in uniform ways on different platforms. Good
    text editors also let you run, from within the editor, tools of your choice on
    the source code you’re editing. An up-to-date list of editors for Python can be
    found on the [PythonEditors wiki](https://oreil.ly/HGAzB), which lists dozens
    of them.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用任何文本编辑器编辑 Python 源代码，甚至是简单的，比如在 Windows 上的记事本或在 Linux 上的 *ed*。许多强大的免费编辑器支持
    Python，并带有额外功能，如基于语法的着色和自动缩进。跨平台编辑器使您能够在不同平台上以统一的方式工作。优秀的文本编辑器还允许您在编辑器内运行您选择的工具对正在编辑的源代码进行操作。Python
    编辑器的最新列表可以在 [PythonEditors wiki](https://oreil.ly/HGAzB) 上找到，其中列出了数十种编辑器。
- en: 'The very best for sheer editing power may be classic [Emacs](https://oreil.ly/MnEBy)
    (see the Python [wiki page](https://oreil.ly/AIocZ) for Python-specific add-ons).
    Emacs is not easy to learn, nor is it lightweight.^([3](ch02.xhtml#idm44924596599360))
    Alex’s personal favorite^([4](ch02.xhtml#ch01fn16)) is another classic: [Vim](http://www.vim.org),
    Bram Moolenaar’s improved version of the traditional Unix editor *vi*. It’s arguably
    not *quite* as powerful as Emacs, but still well worth considering—it’s fast,
    lightweight, Python programmable, and runs everywhere in both text mode and GUI
    versions. For excellent Vim coverage, see [*Learning the vi and Vim Editors*](https://www.oreilly.com/library/view/learning-the-vi/9781492078791/),
    8th edition, by Arnold Robbins and Elbert Hannah (O’Reilly); see the Python [wiki
    page](https://oreil.ly/6pQ6t) for Python-specific tips and add-ons. Steve and
    Anna use Vim too, and where it’s available, Steve also uses the commercial editor
    [Sublime Text](https://www.sublimetext.com), with good syntax coloring and enough
    integration to run your programs from inside the editor. For quick editing and
    executing of short Python scripts (and as a fast and lightweight general text
    editor, even for multimegabyte text files), [SciTE](https://scintilla.org/SciTE.xhtml)
    is Paul’s go-to editor.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 就编辑能力而言，最出色的可能是经典的[Emacs](https://oreil.ly/MnEBy)（请参阅Python [wiki页面](https://oreil.ly/AIocZ)以获取特定于Python的附加组件）。Emacs
    不易学习，也不是轻量级。^([3](ch02.xhtml#idm44924596599360)) Alex 的个人最爱^([4](ch02.xhtml#ch01fn16))
    是另一个经典之作：[Vim](http://www.vim.org)，Bram Moolenaar 改进的传统Unix编辑器 vi 的版本。可以说它*几乎*不如Emacs强大，但仍然值得考虑——它快速、轻量级、支持Python编程，并在文本模式和GUI版本中均可运行。对于优秀的Vim覆盖范围，请参阅[*Learning
    the vi and Vim Editors*](https://www.oreilly.com/library/view/learning-the-vi/9781492078791/)，Arnold
    Robbins 和 Elbert Hannah 编著的第8版（O’Reilly）；参阅Python [wiki页面](https://oreil.ly/6pQ6t)以获取Python特定的技巧和附加组件。Steve
    和 Anna 也使用Vim，并且在可用时，Steve 还使用商业编辑器[Sublime Text](https://www.sublimetext.com)，具有良好的语法着色和足够的集成，可以从编辑器内部运行程序。对于快速编辑和执行短Python脚本（甚至对于多兆字节文本文件也是快速且轻量级的通用文本编辑器），Paul
    选择[SciTE](https://scintilla.org/SciTE.xhtml)。
- en: Tools for Checking Python Programs
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python程序检查工具
- en: 'The Python compiler checks program syntax sufficiently to be able to run the
    program, or to report a syntax error. If you want more thorough checks of your
    Python code, you can download and install one or more third-party tools for the
    purpose. [pyflakes](https://oreil.ly/RPeeJ) is a very quick, lightweight checker:
    it’s not thorough, but it doesn’t import the modules it’s checking, which makes
    using it fast and safe. At the other end of the spectrum, [pylint](https://www.pylint.org)
    is very powerful and highly configurable; it’s not lightweight, but repays that
    by being able to check many style details in highly customizable ways based on
    editable configuration files.^([5](ch02.xhtml#ch01fn17)) [flake8](https://pypi.org/project/flake8)
    bundles pyflakes with other formatters and custom plug-ins, and can handle large
    codebases by spreading work across multiple processes. [black](https://pypi.org/project/black)
    and its variant [blue](https://pypi.org/project/blue) are intentionally less configurable;
    this makes them popular with widely dispersed project teams and open source projects
    in order to enforce a common Python style. To make sure you don’t forget to run
    them, you can incorporate one or more of these checkers/formatters into your workflow
    using the [pre-commit package](https://pypi.org/project/pre-commit).'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Python编译器足以检查程序语法以便运行程序或报告语法错误。如果希望更彻底地检查Python代码，可以下载并安装一个或多个第三方工具。[pyflakes](https://oreil.ly/RPeeJ)
    是一个非常快速、轻量级的检查器：它不是很彻底，但它不会导入它正在检查的模块，这使得使用它快速且安全。在另一端，[pylint](https://www.pylint.org)
    非常强大且高度可配置；它不是轻量级的，但通过可编辑的配置文件可以高度自定义地检查许多样式细节。^([5](ch02.xhtml#ch01fn17)) [flake8](https://pypi.org/project/flake8)
    将pyflakes与其他格式化程序和自定义插件捆绑在一起，通过在多个进程之间分配工作可以处理大型代码库。[black](https://pypi.org/project/black)
    及其变体[blue](https://pypi.org/project/blue) 故意不太可配置；这使得它们在广泛分散的项目团队和开源项目中流行，以强制执行常见的Python风格。为了确保不会忘记运行它们，可以将一个或多个这些检查器/格式化程序整合到您的工作流程中，使用[pre-commit
    package](https://pypi.org/project/pre-commit)。
- en: For more thorough checking of Python code for proper type usages, use tools
    like [mypy](http://mypy-lang.org); see [Chapter 5](ch05.xhtml#type_annotations)
    for more on this topic.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更彻底地检查Python代码的正确类型使用，请使用[mypy](http://mypy-lang.org)等工具；请参阅[第5章](ch05.xhtml#type_annotations)了解更多相关内容。
- en: Running Python Programs
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行Python程序
- en: Whatever tools you use to produce your Python application, you can see your
    application as a set of Python source files, which are normal text files that
    typically have the extension *.py*. A *script* is a file that you can run directly.
    A *module* is a file that you can import (as covered in [Chapter 7](ch07.xhtml#modules_and_packages))
    to provide some functionality to other files or interactive sessions. A Python
    file can be *both* a module (providing functionality when imported) *and* a script
    (OK to run directly). A useful and widespread convention is that Python files
    that are primarily intended to be imported as modules, when run directly, should
    execute some self-test operations, as covered in [“Testing”](ch17.xhtml#testing).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您使用什么工具来生成 Python 应用程序，您都可以将其视为一组 Python 源文件，这些文件是通常具有扩展名 *.py* 的普通文本文件。*脚本*
    是可以直接运行的文件。*模块* 是可以导入的文件（详见[第 7 章](ch07.xhtml#modules_and_packages)），为其他文件或交互式会话提供一些功能。Python
    文件可以同时是*模块*（导入时提供功能）和*脚本*（可以直接运行）。一个有用且广泛使用的约定是，Python 文件如果主要用于导入为模块，在直接运行时应执行一些自测操作，详见[“测试”](ch17.xhtml#testing)。
- en: The Python interpreter automatically compiles Python source files as needed.
    Python saves the compiled bytecode in a subdirectory called *__pycache__* within
    the directory with the module’s source, with a version-specific extension annotated
    to denote the optimization level.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Python 解释器会根据需要自动编译 Python 源文件。Python 会将编译后的字节码保存在模块源代码所在的子目录 *__pycache__*
    中，并添加一个版本特定的扩展名来表示优化级别。
- en: To avoid saving compiled bytecode to disk, you can run Python with the option
    **-B**, which can be handy when you import modules from a read-only disk. Also,
    Python does not save the compiled bytecode form of a script when you run the script
    directly; instead, Python recompiles the script each time you run it. Python saves
    bytecode files only for modules you import. It automatically rebuilds each module’s
    bytecode file whenever necessary—for example, when you edit the module’s source.
    Eventually, for deployment, you may package Python modules using tools covered
    in [Chapter 24](ch24.xhtml#packaging_programs_and_extensions) (available [online](https://oreil.ly/python-nutshell-24)).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要避免将编译后的字节码保存到磁盘上，您可以使用选项 **-B** 运行 Python，当您从只读磁盘导入模块时可能会很方便。此外，当您直接运行脚本时，Python
    不会保存脚本的编译后的字节码形式；相反，每次运行时都会重新编译脚本。Python 仅为您导入的模块保存字节码文件。每当必要时，例如编辑模块源代码时，它会自动重建每个模块的字节码文件。最终，您可以使用[第
    24 章](ch24.xhtml#packaging_programs_and_extensions)中介绍的工具（在线版可参考[这里](https://oreil.ly/python-nutshell-24)）对
    Python 模块进行打包部署。
- en: 'You can run Python code with the Python interpreter or an IDE.^([6](ch02.xhtml#ch01fn18))
    Normally, you start execution by running a top-level script. To run a script,
    give its path as an argument to **python**, as covered in [“The python Program”](#the_python_program).
    Depending on your operating system, you can invoke **python** directly from a
    shell script or command file. On Unix-like systems, you can make a Python script
    directly executable by setting the file’s permission bits x and r, and beginning
    the script with a *shebang* line, a line such as:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 Python 解释器或者一个 IDE 来运行 Python 代码。^([6](ch02.xhtml#ch01fn18)) 通常，您通过运行顶层脚本开始执行。要运行一个脚本，请将其路径作为参数传递给
    **python**，详见[“python 程序”](#the_python_program)。根据您的操作系统，您可以直接从 shell 脚本或命令文件调用
    **python**。在类 Unix 系统上，您可以通过设置文件的权限位 x 和 r，并以 *shebang* 行开头，例如以下行：
- en: '[PRE8]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'or some other line starting with #! followed by a path to the python interpreter
    program, in which case you can optionally add a single word of options—for example:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '或者其他以 #! 开头，后跟 Python 解释器程序路径的行，此时您可以选择性地添加一个选项单词，例如：'
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'On Windows, you can use the same style #! line, in accordance with [PEP 397](https://oreil.ly/lmMal),
    to specify a particular version of Python, so your scripts can be cross-platform
    between Unix-like and Windows systems. You can also run Python scripts with the
    usual Windows mechanisms, such as double-clicking their icons. When you run a
    Python script by double-clicking the script’s icon, Windows automatically closes
    the text-mode console associated with the script as soon as the script terminates.
    If you want the console to linger (to allow the user to read the script’s output
    on the screen), ensure the script doesn’t terminate too soon. For example, use,
    as the script’s last statement:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '在Windows上，你可以使用相同的 #! 行风格，符合[PEP 397](https://oreil.ly/lmMal)，指定特定版本的Python，这样你的脚本可以在类Unix和Windows系统之间跨平台运行。你还可以通过双击图标等通常的Windows机制来运行Python脚本。当你通过双击脚本图标来运行Python脚本时，Windows会在脚本终止后自动关闭与脚本关联的文本模式控制台。如果你希望控制台保持开放（以便用户可以在屏幕上看到脚本的输出），确保脚本不要过早终止。例如，在脚本的最后一个语句中使用：'
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is not necessary when you run the script from a command prompt.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从命令提示符运行脚本时，这是不必要的。
- en: On Windows, you can also use the extension *.pyw* and interpreter program *pythonw.exe*
    instead of *.py* and *python.exe*. The *w* variants run Python without a text-mode
    console, and thus without standard input and output. This is good for scripts
    that rely on GUIs or run invisibly in the background. Use them only when a program
    is fully debugged, to keep standard output and error available for information,
    warnings, and error messages during development.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，你还可以使用扩展名 *.pyw* 和解释器程序 *pythonw.exe* 替代 *.py* 和 *python.exe*。*w*
    变体运行Python时没有文本模式控制台，因此没有标准输入和输出。这对依赖GUI或在后台静默运行的脚本非常有用。只有在程序完全调试完成后才使用它们，以便在开发过程中保留标准输出和错误信息以供信息、警告和错误消息使用。
- en: Applications coded in other languages may embed Python, controlling the execution
    of Python for their own purposes. We examine this briefly in “Embedding Python”
    in [Chapter 25](ch25.xhtml#extending_and_embedding_classic_python) (available
    [online](https://oreil.ly/python-nutshell-25)).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用其他语言编码的应用程序可能会嵌入Python，以控制Python的执行以实现其自身的目的。我们在“嵌入Python”中简要讨论了这一点，详见[第25章](ch25.xhtml#extending_and_embedding_classic_python)（在线版见[此处](https://oreil.ly/python-nutshell-25)）。
- en: Running Python in the Browser
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在浏览器中运行Python
- en: There are also options for running Python code within a browser session, executed
    in either the browser process or some separate server-based component. PyScript
    exemplifies the former approach, and Jupyter the latter.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 同样存在在浏览器会话中运行Python代码的选项，可以在浏览器进程中或某些独立的基于服务器的组件中执行。PyScript是前者的典范，而Jupyter则是后者。
- en: PyScript
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PyScript
- en: A recent development in the Python-in-a-browser endeavor is the release of [PyScript](https://pyscript.net)
    by Anaconda. PyScript is built on top of Pyodide,^([7](ch02.xhtml#ch01fn19)) which
    uses WebAssembly to bring up a full Python engine in the browser. PyScript introduces
    custom HTML tags so that you can write Python code without having to know or use
    JavaScript. Using these tags, you can create a static HTML file containing Python
    code that will run in a remote browser, with no additional installed software
    required.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最近Python在浏览器中的一个发展是由Anaconda发布的[PyScript](https://pyscript.net)。PyScript建立在Pyodide之上，^([7](ch02.xhtml#ch01fn19))使用WebAssembly在浏览器中启动一个完整的Python引擎。PyScript引入了自定义HTML标签，因此你可以在不需要了解或使用JavaScript的情况下编写Python代码。使用这些标签，你可以创建一个静态HTML文件，其中包含Python代码，在远程浏览器中运行，无需安装额外的软件。
- en: 'A simple PyScript “Hello, World!” HTML file might look like this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的PyScript “Hello, World!” HTML 文件可能看起来像这样：
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can save this code snippet as a static HTML file and successfully run it
    in a client browser, even if Python isn’t installed on your computer.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你的电脑上没有安装Python，你也可以将这段代码保存为静态HTML文件并在客户端浏览器中成功运行。
- en: Changes Are Coming to PyScript
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyScript即将迎来变化
- en: PyScript is still in early development at the time of publication, so the specific
    tags and APIs shown here are likely to change as the package undergoes further
    development.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在出版时，PyScript仍处于早期开发阶段，因此这里显示的特定标签和API可能会随着软件包的进一步开发而发生变化。
- en: For more complete and up-to-date information, see the [PyScript website](https://pyscript.net).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 获取更全面和最新的信息，请参阅[PyScript网站](https://pyscript.net)。
- en: Jupyter
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jupyter
- en: The extensions to the interactive interpreter in IPython (covered in [“IPython”](ch01.xhtml#ipython))
    were further extended by the [Jupyter project](https://jupyter.org), best known
    for the Jupyter Notebook, which offers Python developers a [“literate programming”](https://oreil.ly/yvn4z)
    tool. A notebook server, typically accessed via a website, saves and loads each
    notebook, creating a Python kernel process to execute its Python commands interactively.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: IPython 中交互式解释器的扩展（在[“IPython”](ch01.xhtml#ipython)中涵盖）被 [Jupyter 项目](https://jupyter.org)
    进一步扩展，这个项目最著名的是 Jupyter Notebook，它为 Python 开发者提供了一种 [“文学编程”](https://oreil.ly/yvn4z)
    工具。一个笔记本服务器，通常通过网站访问，保存和加载每个笔记本，创建一个 Python 内核进程来交互地执行其 Python 命令。
- en: Notebooks are a rich environment. Each one is a sequence of cells whose contents
    may either be code or rich text formatted with the Markdown language extended
    with LaTeX, allowing complex mathematics to be included. Code cells can produce
    rich outputs too, including most popular image formats as well as scripted HTML.
    Special integrations adapt the matplotlib library to the web, and there are an
    increasing number of mechanisms for interaction with notebook code.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记本是一个丰富的环境。每个笔记本都是一个单元格序列，其内容可以是代码或使用 Markdown 语言扩展的富文本格式，允许包含复杂的数学公式。代码单元格也可以产生丰富的输出，包括大多数流行的图像格式以及脚本化的
    HTML。特殊的集成将 matplotlib 库适应到网络上，有越来越多的机制用于与笔记本代码进行交互。
- en: Further integrations allow notebooks to appear in other ways. For example, with
    the right extension, you can easily format a Jupyter notebook as a [reveal.js](https://revealjs.com)
    slideshow for presentations in which the code cells can be interactively executed.
    [Jupyter Book](https://jupyterbook.org) allows you to collect notebooks together
    as chapters and publish the collection as a book. GitHub allows browsing (but
    not executing) of uploaded notebooks (a special renderer provides correct formatting
    of the notebook).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 更多的集成使得笔记本以其他方式出现成为可能。例如，通过适当的扩展，您可以轻松地将 Jupyter 笔记本格式化为 [reveal.js](https://revealjs.com)
    幻灯片，用于交互式执行代码单元格的演示。[Jupyter Book](https://jupyterbook.org) 允许您将笔记本集合为章节并将其发布为书籍。GitHub
    允许浏览（但不执行）上传的笔记本（一个特殊的渲染器提供正确的笔记本格式）。
- en: There are many examples of Jupyter notebooks available on the internet. For
    a good demonstration of its features, take a look at the [Executable Books website](https://oreil.ly/Y2WS0);
    notebooks underpin its publishing format.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网上有许多 Jupyter 笔记本的示例。要了解其功能的一个很好的演示，请查看 [Executable Books 网站](https://oreil.ly/Y2WS0)；笔记本支持其发布格式。
- en: ^([1](ch02.xhtml#ch01fn14-marker)) This may involve using quotes if the pathname
    contains spaces—again, this depends on your operating system.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch02.xhtml#ch01fn14-marker)) 如果路径名包含空格，则可能需要使用引号—同样，这取决于您的操作系统。
- en: ^([2](ch02.xhtml#ch01fn15-marker)) This may affect code that parses docstrings
    for meaningful purposes; we suggest you avoid writing such code.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch02.xhtml#ch01fn15-marker)) 这可能会影响解析文档字符串以进行有意义目的的代码；我们建议您避免编写此类代码。
- en: ^([3](ch02.xhtml#idm44924596599360-marker)) A great place to start is [*Learning
    GNU Emacs*, 3rd edition](https://learning.oreilly.com/library/view/learning-gnu-emacs/0596006489)
    (O’Reilly).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch02.xhtml#idm44924596599360-marker)) 一个很好的入门地点是 [*Learning GNU Emacs*,
    3rd edition](https://learning.oreilly.com/library/view/learning-gnu-emacs/0596006489)（O’Reilly）。
- en: ^([4](ch02.xhtml#ch01fn16-marker)) Not only as “an editor,” but also as Alex’s
    favorite “as close to an IDE as Alex will go” tool!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch02.xhtml#ch01fn16-marker)) 不仅是“一个编辑器”，还是 Alex 最喜欢的“接近 IDE 的工具”！
- en: ^([5](ch02.xhtml#ch01fn17-marker)) pylint also includes the useful [pyreverse](https://oreil.ly/vSs_v)
    utility to autogenerate [UML](https://learning.oreilly.com/library/view/uml-2-0-in/0596007957)
    class and package diagrams directly from your Python code.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch02.xhtml#ch01fn17-marker)) pylint 还包括有用的 [pyreverse](https://oreil.ly/vSs_v)
    实用工具，可以直接从您的 Python 代码自动生成 [UML](https://learning.oreilly.com/library/view/uml-2-0-in/0596007957)
    类和包图。
- en: '^([6](ch02.xhtml#ch01fn18-marker)) Or online: Paul, for example, maintains
    a [list](https://oreil.ly/GVT93) of online Python interpreters.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](ch02.xhtml#ch01fn18-marker)) 或在线：例如，Paul 维护了一个在线 Python 解释器的 [列表](https://oreil.ly/GVT93)。
- en: ^([7](ch02.xhtml#ch01fn19-marker)) A great example of the synergy open source
    gets by projects “standing on the shoulders of giants” as an ordinary, everyday
    thing!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: ^([7](ch02.xhtml#ch01fn19-marker)) 这是开源项目通过“站在巨人的肩膀上”获得的协同效应的一个很好的例子，这已经成为一种普遍的、日常的事情！
