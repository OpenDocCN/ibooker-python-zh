["```py\n$ python -m http.server *port_number*\n```", "```py\n`import` flask\n\napp = flask.Flask(__name__)\napp.wsgi_app = *`some_middleware`*(app.wsgi_app)\n```", "```py\n`import` datetime, flask\napp = flask.Flask(__name__)\n\n*`# secret key for cryptographic components such as encoding session cookies;`*\n*`# for production use, use secrets.token_bytes()`*\napp.secret_key = b`'``\\xc5``\\x8f``\\xbc``\\xa2``\\x1d``\\xeb``\\xb3``\\x94``;:d``\\x03``'`\n\n@app.route('/')\n`def` greet():\n    lastvisit = flask.session.get('lastvisit')\n    now = datetime.datetime.now()\n    newvisit = now.ctime()\n    template = '''\n <html><head><title>Hello, visitor!</title>\n </head><body>\n      {% if lastvisit %}\n <p>Welcome back to this site!</p>\n <p>You last visited on {{lastvisit}} UTC</p>\n <p>This visit on {{newvisit}} UTC</p>\n      {% else %}\n <p>Welcome to this site on your first visit!</p>\n <p>This visit on {{newvisit}} UTC</p>\n <p>Please Refresh the web page to proceed</p>\n      {% endif %}\n </body></html>'''\n    flask.session['lastvisit'] = newvisit\n    `return` flask.render_template_string(\n      template, newvisit=newvisit, lastvisit=lastvisit)\n```", "```py\n@app.after_request\n`def` set_lastvisit(response):\n    now = datetime.datetime.now()\n    flask.session['lastvisit'] = now.ctime()\n    `return` response\n```", "```py\n`from` decimal `import` Decimal\n`from` pydantic `import` BaseModel, Field\n`from` mongoengine `import` Document, StringField, DecimalField\n`from` typing `import` Optional\n\n`class` PItem(BaseModel):\n    \"pydantic typed data class.\"\n    name: str\n    price: Decimal\n    description: Optional[str] = `None`\n    tax: Optional[Decimal] = `None`\n\n`class` MItem(Document):\n    \"mongoengine document.\"\n    name = StringField(primary_key=`True`)\n    price = DecimalField()\n    description = StringField(required=`False`)\n    tax = DecimalField(required=`False`)\n```", "```py\n`from` decimal `import` Decimal\n`from` fastapi `import` FastAPI, Form\n`from` fastapi.responses `import` HTMLResponse, FileResponse\n`from` mongoengine `import` connect\n`from` mongoengine.errors `import` NotUniqueError\n`from` typing `import` Optional\n`import` json\n`import` uvicorn\n`from` models `import` PItem, MItem\n\nDATABASE_URI = \"mongodb://localhost:27017\"\ndb=DATABASE_URI+\"/mydatabase\"\nconnect(host=db)\napp = FastAPI()\n\n`def` save(item):\n    `try`:\n        return item.save(force_insert=`True`)\n    `except` NotUniqueError:\n        `return` `None`\n\n@app.get('/')\n`def` home_page():\n    \"View function to display a simple form.\"\n    `return` FileResponse(\"index.xhtml\")\n\n@app.post(\"/items/new/form/\", response_class=HTMLResponse)\n`def` create_item_from_form(name: str=Form(...),\n                          price: Decimal=Form(...),\n                          description: Optional[str]=Form(\"\"),\n                          tax: Optional[Decimal]=Form(Decimal(\"0.0\"))):\n    \"View function to accept form data and create an item.\"\n    mongoitem = MItem(name=name, price=price, description=description, \n                      tax=tax)\n    value = save(mongoitem)\n    `if` value:\n        body = f\"Item({name!r}, {price!r}, {description!r}, {tax!r})\"\n    `else`:\n        body = f\"Item {name!r} already present.\"\n    `return` f\"\"\"<html><body><h2>{body}</h2></body></html>\"\"\"\n\n@app.post(\"/items/new/\")\n`def` create_item_from_json(item: PItem):\n    \"View function to accept JSON data and create an item.\"\n    mongoitem = MItem(**item.dict())\n    value = save(mongoitem)\n    `if` `not` value:\n        `return` f\"Primary key {item.name!r} already present\"\n    `return` item.dict()\n\n@app.get(\"/items/{name}/\")\n`def` retrieve_item(name: str):\n    \"View function to return the JSON contents of an item.\"\n    m_item = MItem.objects(name=name).get()\n    `return` json.loads(m_item.to_json())\n\n`if` __name__ == \"__main__\":\n    # host as \"localhost\" or \"127.0.0.1\" allows only local apps to access the\n    # web page. Using \"0.0.0.0\" will accept access from apps on other hosts,\n    # but this can raise security concerns, and is generally not recommended.\n    uvicorn.run(\"__main__:app\", host=\"127.0.0.1\", port=8000, reload=True)\n```", "```py\n<!DOCTYPE html>\n<html lang=\"en\">\n  <body>\n  <h2>FastAPI Demonstrator</h2>\n  <form method=\"POST\" action=\"/items/new/form/\">\n    <table>\n    <tr><td>Name</td><td><input name=\"name\"></td></tr>\n    <tr><td>Price</td><td><input name=\"price\"></td></tr>\n    <tr><td>Description</td><td><input name=\"description\"></td></tr>\n    <tr><td>Tax</td><td><input name=\"tax\"></td></tr>\n    <tr><td></td><td><input type=\"submit\"></td></tr>\n    </table>\n  </form>\n  </body>\n</html>\n```", "```py\n`import` requests, json\n\nresult = requests.post('http://localhost:8000/items/new/',\n                       json={\"name\": \"Item1\",\n                             \"price\": 12.34,\n                             \"description\": \"Rusty old bucket\"})\nprint(result.status_code, result.json())\nresult = requests.get('http://localhost:8000/items/Item1/')\nprint(result.status_code, result.json())\nresult = requests.post('http://localhost:8000/items/new/',\n                       json={\"name\": \"Item2\",\n                             \"price\": \"Not a number\"})\nprint(result.status_code, result.json())\n```", "```py\n200 {'name': 'Item1', 'price': 12.34, 'description': 'Rusty old\nbucket'> 'tax': None}\n200 {'_id': 'Item1', 'price': 12.34, 'description': 'Rusty old bucket'}\n422 {'detail': [{'loc': ['body', 'price'], 'msg': 'value is not a valid\ndecimal', 'type': 'type_error.decimal'}]}\n```"]