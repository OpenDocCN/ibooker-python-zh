- en: Chapter 4\. Choose with if
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。选择使用 if
- en: If you can keep your head when all about you
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你能保持头脑冷静
- en: Are losing theirs and blaming it on you, …
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你能保持头脑冷静，当周围的一切都在失控
- en: ''
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Rudyard Kipling, If—
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 鲁道德·吉卜林，《如果——》
- en: In the previous chapters, you’ve seen many examples of data but haven’t done
    much with them. Most of the code examples used the interactive interpreter and
    were short. In this chapter, you learn how to structure Python *code*, not just
    data.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，你已经看到了许多数据示例，但还没有深入研究过。大多数代码示例都使用交互式解释器，并且很简短。在这一章中，你将学习如何构建 Python
    *代码*，而不仅仅是数据。
- en: Many computer languages use characters such as curly braces (`{` and `}`) or
    keywords such as `begin` and `end` to mark off sections of code. In those languages,
    it’s good practice to use consistent indentation to make your program more readable
    for yourself and others. There are even tools to make your code line up nicely.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 许多计算机语言使用诸如花括号 (`{` 和 `}`) 或关键字如 `begin` 和 `end` 来标记代码段落。在这些语言中，使用一致的缩进习惯是提高代码可读性的良好实践，不仅适合自己阅读，也便于他人理解。甚至有工具可以帮助你使代码排列整齐。
- en: When he was designing the language that became Python, Guido van Rossum decided
    that the indentation itself was enough to define a program’s structure, and avoided
    typing all those parentheses and curly braces. Python is unusual in this use of
    *white space* to define program structure. It’s one of the first aspects that
    newcomers notice, and it can seem odd to those who have experience with other
    languages. It turns out that after writing Python for a little while, it feels
    natural, and you stop noticing it. You even get used to doing more while typing
    less.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当他设计成为 Python 的语言时，吉多·范罗苏姆决定使用缩进来定义程序结构，避免使用所有那些括号和花括号。Python 在使用*空格*来定义程序结构方面非常不同寻常。这是新手注意到的第一个方面，对有其他语言经验的人来说可能会感觉奇怪。但事实证明，使用
    Python 一段时间后，这种方式会变得自然，你甚至不再注意到它。你甚至会习惯于在输入更少的情况下做更多事情。
- en: Our initial code examples have been one-liners. Let’s first see how to make
    comments and multiple-line commands.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最初的代码示例都是单行代码。让我们先看看如何进行注释和多行命令。
- en: 'Comment with #'
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `#` 进行注释
- en: 'A *comment* is a piece of text in your program that is ignored by the Python
    interpreter. You might use comments to clarify nearby Python code, make notes
    to yourself to fix something someday, or for whatever purpose you like. You mark
    a comment by using the `#` character; everything from that point on to the end
    of the current line is part of the comment. You’ll usually see a comment on a
    line by itself, as shown here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*注释* 是程序中被 Python 解释器忽略的文本片段。你可以使用注释来澄清附近的 Python 代码，做笔记提醒自己以后修复问题，或者任何你喜欢的目的。通过使用
    `#` 字符标记注释；从该点到当前行末尾的所有内容都是注释。通常你会在单独的一行上看到注释，如下所示：'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Or, on the same line as the code it’s commenting:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，在代码同一行上进行注释：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `#` character has many names: *hash*, *sharp*, *pound*, or the sinister-sounding
    *octothorpe*.^([1](ch04.html#idm45795038165928)) Whatever you call it,^([2](ch04.html#idm45795038164344))
    its effect lasts only to the end of the line on which it appears.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`#` 字符有很多名称：*井号*、*sharp*、*pound* 或听起来邪恶的 *octothorpe*。^([1](ch04.html#idm45795038165928))
    无论你如何称呼它，^([2](ch04.html#idm45795038164344)) 它的效果仅限于出现在该行的末尾。'
- en: 'Python does not have a multiline comment. You need to explicitly begin each
    comment line or section with a `#`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Python 没有多行注释。你需要明确地用 `#` 开始每一行或每一节注释：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'However, if it’s in a text string, the mighty octothorpe reverts back to its
    role as a plain old `#` character:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果它在文本字符串中，强大的井号将恢复其作为普通旧`#`字符的角色：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Continue Lines with \
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `\` 继续多行
- en: 'Programs are more readable when lines are reasonably short. The recommended
    (not required) maximum line length is 80 characters. If you can’t say everything
    you want to say in that length, you can use the *continuation character*: `\`
    (backslash). Just put `\` at the end of a line, and Python will suddenly act as
    though you’re still on the same line.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当行长度合理时，程序更易读。推荐（非必须）的最大行长度为 80 个字符。如果你无法在这个长度内表达所有想要说的内容，你可以使用*续行字符*：`\`（反斜杠）。只需在行尾加上
    `\`，Python 就会认为你仍然在同一行上。
- en: 'For example, if I wanted to add the first five digits, I could do it a line
    at a time:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我想要添加前五个数字，我可以一行一行地进行：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Or, I could do it in one step, using the continuation character:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我可以使用续行字符一步到位：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we skipped the backslash in the middle of an expression, we’d get an exception:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在表达式中跳过中间的反斜杠，我们会得到一个异常：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here’s a little trick—if you’re in the middle of paired parentheses (or square
    or curly brackets), Python doesn’t squawk about line endings:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个小技巧——如果你在成对的括号（或方括号或花括号）中间，Python不会对行结束发出警告：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You’ll also see in [Chapter 5](ch05.html#ch_strings) that paired triple quotes
    let you make multiline strings.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](ch05.html#ch_strings)中，你还会看到成对的三重引号让你创建多行字符串。
- en: Compare with if, elif, and else
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与if、elif和else比较
- en: 'Now, we finally take our first step into the *code structures* that weave data
    into programs. Our first example is this tiny Python program that checks the value
    of the boolean variable `disaster` and prints an appropriate comment:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们终于迈出了进入编程的第一步，这是一个小小的Python程序，检查布尔变量`disaster`的值，并打印相应的注释：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `if` and `else` lines are Python *statements* that check whether a condition
    (here, the value of `disaster`) is a boolean `True` value, or can be evaluated
    as `True`. Remember, `print()` is Python’s built-in *function* to print things,
    normally to your screen.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`和`else`行是Python的*语句*，用于检查条件（这里是`disaster`的值）是否为布尔`True`值，或者可以评估为`True`。记住，`print()`是Python的内置*函数*，用于打印东西，通常打印到屏幕上。'
- en: Note
  id: totrans-34
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you’ve programmed in other languages, note that you don’t need parentheses
    for the `if` test. For example, don’t say something such as `if (disaster == True)`
    (the equality operator `==` is described in a few paragraphs). You do need the
    colon (`:`) at the end. If, like me, you forget to type the colon at times, Python
    will display an error message.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在其他语言中编程过，请注意，对于`if`测试，不需要括号。例如，不要写像`if (disaster == True)`这样的内容（相等操作符`==`在几段后面描述）。但是需要在末尾加上冒号（`:`）。如果像我一样有时会忘记输入冒号，Python会显示错误消息。
- en: Each `print()` line is indented under its test. I used four spaces to indent
    each subsection. Although you can use any indentation you like, Python expects
    you to be consistent with code within a section—the lines need to be indented
    the same amount, lined up on the left. The recommended style, called [*PEP-8*](http://bit.ly/pep-8),
    is to use four spaces. Don’t use tabs, or mix tabs and spaces; it messes up the
    indent count.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`print()`行在其测试下缩进。我使用四个空格来缩进每个子节。虽然你可以使用任何你喜欢的缩进方式，但Python期望你在一个部分内保持一致——每行都需要缩进相同的数量，左对齐。推荐的风格，称为[*PEP-8*](http://bit.ly/pep-8)，是使用四个空格。不要使用制表符，也不要混合制表符和空格；这会搞乱缩进计数。
- en: 'We did a number of things here, which I explain more fully as the chapter progresses:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节逐渐展开时，我们做了很多事情，我会详细解释：
- en: Assigned the boolean value `True` to the variable named `disaster`
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将布尔值`True`赋给名为`disaster`的变量。
- en: Performed a *conditional comparison* by using `if` and `else`, executing different
    code depending on the value of `disaster`
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用`if`和`else`执行*条件比较*。
- en: '*Called* the `print()` *function* to print some text'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*调用* `print()` *函数*来打印一些文本。'
- en: 'You can have tests within tests, as many levels deep as needed:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以进行嵌套测试，需要多少层都可以：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In Python, indentation determines how the `if` and `else` sections are paired.
    Our first test was to check `furry`. Because `furry` is `True`, Python goes to
    the indented `if large` test. Because we had set `large` to `True`, `if large`
    is evaluated as `True`, and the following `else` line is ignored. This makes Python
    run the line indented under `if large:` and print `It's a yeti.`
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，缩进决定了如何配对`if`和`else`部分。我们的第一个测试是检查`furry`。因为`furry`是`True`，Python进入缩进的`if
    large`测试。因为我们将`large`设为`True`，`if large`评估为`True`，忽略以下的`else`行。这使得Python运行缩进在`if
    large:`下的行，并打印`It's a yeti.`。
- en: 'If there are more than two possibilities to test, use `if` for the first, `elif`
    (meaning *else if*) for the middle ones, and `else` for the last:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有超过两个可能性需要测试，使用`if`来进行第一个测试，`elif`（意为*else if*）来进行中间的测试，`else`用于最后一个：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the preceding example, we tested for equality by using the `==` operator.
    Here are Python’s *comparison operators*:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们使用`==`操作符进行了相等性测试。这里是Python的*比较操作符*：
- en: '| equality | `==` |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 等于 | `==` |'
- en: '| inequality | `!=` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 不等于 | `!=` |'
- en: '| less than | `<` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 小于 | `<` |'
- en: '| less than or equal | `<=` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 小于或等于 | `<=` |'
- en: '| greater than | `>` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 大于 | `>` |'
- en: '| greater than or equal | `>=` |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 大于或等于 | `>=` |'
- en: 'These return the boolean values `True` or `False`. Let’s see how these all
    work, but first, assign a value to `x`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些返回布尔值`True`或`False`。让我们看看它们如何工作，但首先，给`x`赋一个值：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, let’s try some tests:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试一些测试：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that two equals signs (`==`) are used to *test equality*; remember, a single
    equals sign (`=`) is what you use to assign a value to a variable.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，两个等号 (`==`) 用于*测试相等性*；记住，单个等号 (`=`) 用于给变量赋值。
- en: If you need to make multiple comparisons at the same time, you use the *logical*
    (or *boolean*) *operators* `and`, `or`, and `not` to determine the final boolean
    result.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要同时进行多个比较，可以使用*逻辑*（或*布尔*）*运算符* `and`、`or` 和 `not` 来确定最终的布尔结果。
- en: 'Logical operators have lower *precedence* than the chunks of code that they’re
    comparing. This means that the chunks are calculated first, and then compared.
    In this example, because we set `x` to `7`, `5 < x` is calculated to be `True`
    and `x < 10` is also `True`, so we finally end up with `True and True`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑运算符比它们比较的代码块具有较低的*优先级*。这意味着首先计算这些代码块，然后再比较。在这个例子中，因为我们将 `x` 设置为 `7`，`5 < x`
    计算为 `True`，`x < 10` 也是 `True`，所以最终我们得到 `True and True`：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As [“Precedence”](ch03.html#precedence) points out, the easiest way to avoid
    confusion about precedence is to add parentheses:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正如[“优先级”](ch03.html#precedence)所指出的，避免关于优先级混淆的最简单方法是添加括号：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here are some other tests:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些其他的测试：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you’re `and`-ing multiple comparisons with one variable, Python lets you
    do this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个变量上进行多个 `and` 运算的比较，Python 允许你这样做：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'It’s the same as `5 < x and x < 10`. You can also write longer comparisons:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这与 `5 < x and x < 10` 是一样的。你也可以编写更长的比较：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: What Is True?
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是真？
- en: What if the element we’re checking isn’t a boolean? What does Python consider
    `True` and `False`?
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检查的元素不是布尔值，Python认为什么是 `True` 和 `False`？
- en: 'A `false` value doesn’t necessarily need to explicitly be a boolean `False`.
    For example, these are all considered `False`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `false` 值并不一定需要显式地是布尔 `False`。例如，下面这些都被认为是 `False`：
- en: '| boolean | `False` |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 布尔 | `False` |'
- en: '| null | `None` |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 空 | `None` |'
- en: '| zero integer | `0` |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 零整数 | `0` |'
- en: '| zero float | `0.0` |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 零浮点数 | `0.0` |'
- en: '| empty string | `''''` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 空字符串 | `''''` |'
- en: '| empty list | `[]` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 空列表 | `[]` |'
- en: '| empty tuple | `()` |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 空元组 | `()` |'
- en: '| empty dict | `{}` |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 空字典 | `{}` |'
- en: '| empty set | `set()` |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 空集合 | `set()` |'
- en: 'Anything else is considered `True`. Python programs use these definitions of
    “truthiness” and “falsiness” to check for empty data structures as well as `False`
    conditions:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 其他任何情况都被认为是 `True`。Python 程序使用这些“真实性”和“虚假性”的定义来检查空数据结构以及 `False` 条件：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If what you’re testing is an expression rather than a simple variable, Python
    evaluates the expression and returns a boolean result. So, if you type:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要测试的是一个表达式而不是一个简单的变量，Python 会评估该表达式并返回一个布尔结果。因此，如果你输入：
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Python evaluates `color == "red"`. In our earlier example, we assigned the
    string `"mauve"` to `color`, so `color == "red"` is `False`, and Python moves
    on to the next test:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Python 评估 `color == "red"`。在我们之前的例子中，我们将字符串 `"mauve"` 分配给 `color`，所以 `color
    == "red"` 是 `False`，Python 继续下一个测试：
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Do Multiple Comparisons with in
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `in` 进行多个比较
- en: 'Suppose that you have a letter and want to know whether it’s a vowel. One way
    would be to write a long `if` statement:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个字母，并想知道它是否是元音字母。一种方法是编写一个长长的 `if` 语句：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Whenever you need to make a lot of comparisons like that, separated by `or`,
    use Python’s *membership operator* `in`, instead. Here’s how to check vowel-ness
    more Pythonically, using `in` with a string made of vowel characters:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你需要进行大量使用 `or` 分隔的比较时，使用 Python 的*成员运算符* `in` 更加 Pythonic。下面是如何使用由元音字符组成的字符串与
    `in` 结合来检查元音性：
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here’s a preview of how to use `in` with some data types that you’ll read about
    in detail in the next few chapters:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何在接下来的几章节中详细阅读的一些数据类型的使用示例：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: For the dictionary, `in` looks at the keys (the lefthand side of the `:`) instead
    of their values.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于字典，`in` 查看的是键（`:` 的左边），而不是它们的值。
- en: 'New: I Am the Walrus'
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新内容：我是海象
- en: 'Arriving in Python 3.8 is the *walrus operator*, which looks like this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 3.8 中引入了*海象运算符*，它看起来像这样：
- en: '[PRE24]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: See the walrus? (Like a smiley, but tuskier.)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 看到海象了吗？（像笑脸一样，但更多了一些象牙。）
- en: 'Normally, an assignment and test take two steps:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，赋值和测试需要两个步骤：
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'With our new tusk power (aka [assignment expressions](https://oreil.ly/fHPtL))
    we can combine these into one step:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通过我们的新的[分配表达式](https://oreil.ly/fHPtL)，我们可以将这些组合成一个步骤：
- en: '[PRE26]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The walrus also gets on swimmingly with `for` and `while`, which we look at
    in [Chapter 6](ch06.html#ch_for).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: “海象运算符”还与 `for` 和 `while` 很好地配合，我们将在[第6章](ch06.html#ch_for)中详细讨论。
- en: Coming Up
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 即将到来
- en: Play with strings, and meet interesting characters.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 玩弄字符串，并遇见有趣的字符。
- en: Things to Do
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要做的事情
- en: 4.1 Choose a number between 1 and 10 and assign it to the variable `secret`.
    Then, select another number between 1 and 10 and assign it to the variable `guess`.
    Next, write the conditional tests (`if`, `else`, and `elif`) to print the string
    `'too low'` if `guess` is less than `secret`, `'too high'` if greater than `secret`,
    and `'just right'` if equal to `secret`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 4.1 选择一个1到10之间的数字，并将其赋给变量 `secret`。然后，再选择另一个1到10之间的数字，并将其赋给变量 `guess`。接下来，编写条件测试（`if`、`else`和`elif`）来打印字符串`'too
    low'`，如果 `guess` 小于 `secret`，打印`'too high'`，如果 `guess` 大于 `secret`，打印`'just right'`，如果
    `guess` 等于 `secret`。
- en: '4.2 Assign `True` or `False` to the variables `small` and `green`. Write some
    `if`/`else` statements to print which of these matches those choices: cherry,
    pea, watermelon, pumpkin.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 4.2 为变量 `small` 和 `green` 赋值`True`或`False`。编写一些`if`/`else`语句来打印这些选择匹配哪些选项：cherry（樱桃）、pea（豌豆）、watermelon（西瓜）、pumpkin（南瓜）。
- en: ^([1](ch04.html#idm45795038165928-marker)) Like that eight-legged green *thing*
    that’s *right behind you*!
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch04.html#idm45795038165928-marker)) 就像那只八脚的绿色*东西*就*在你后面*！
- en: ^([2](ch04.html#idm45795038164344-marker)) Please don’t call it. It might come
    back.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch04.html#idm45795038164344-marker)) 请不要打电话给它。它可能会回来。
