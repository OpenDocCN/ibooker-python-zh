- en: Chapter 9\. Service Layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What was that middle thing?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Otto West, *A Fish Called Wanda*
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Preview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter expands on the Service layer—the middle thing. A leaky roof can
    cost a lot of money. Leaky software isn’t as obvious but can cost a lot of time
    and effort. How can you structure your application so that the layers don’t leak?
    In particular, what should and should not go into the Service layer in the middle?
  prefs: []
  type: TYPE_NORMAL
- en: Defining a Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Service layer is the heart of the website, its reason for being. It takes
    requests from multiple sources, accesses the data that is the DNA of the site,
    and returns responses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Common service patterns include a combination of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create / retrieve / change (partially or completely) / delete
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One thing / multiple things
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the RESTful router layer, the nouns are *resources*. In this book, our resources
    will initially include cryptids (imaginary creatures) and people (cryptid explorers).
  prefs: []
  type: TYPE_NORMAL
- en: 'Later, it will be possible to define related resources like these:'
  prefs: []
  type: TYPE_NORMAL
- en: Places
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Events (e.g., expeditions, sightings)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s the current file and directory layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this chapter, you’ll fiddle with files in the *service* directory.
  prefs: []
  type: TYPE_NORMAL
- en: Protection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One nice thing about layers is that you don’t have to worry about everything.
    The Service layer cares only about what goes into and out of the data. As you’ll
    see in [Chapter 11](ch11.html#ch11), a higher layer (in this book, *Web*) can
    handle the authentication and authorization messiness. The functions to create,
    modify, and delete should not be wide open, and even the `get` functions might
    eventually need some limits.
  prefs: []
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s start with *creature.py*. At this point, the needs of *explorer.py* will
    be almost the same, and we can borrow almost everything. It’s so tempting to write
    a single service file that handles both, but, almost inevitably, at some point
    we’ll need to handle them differently.
  prefs: []
  type: TYPE_NORMAL
- en: Also at this point, the service file is pretty much a pass-through layer. This
    is a case in which a little extra structure at the start will pay off later. Much
    as you did for *web/creature.py* and *web/explorer.py* in [Chapter 8](ch08.html#ch08),
    you’ll define service modules for both, and hook both of them up to their corresponding
    *fake* data modules for now (Examples [9-1](#ex-9-1) and [9-2](#ex-9-2)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 9-1\. An initial service/creature.py file
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Example 9-2\. An initial service/explorer.py file
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The syntax of the `get_one()` function’s return value (`Creature | None`) needs
    at least Python 3.9. For earlier versions, you need `Optional`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Test!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that the codebase is filling out a bit, it’s a good time to introduce automated
    tests. (The Web tests in the previous chapter have all been manual tests.) So
    let’s make some directories:'
  prefs: []
  type: TYPE_NORMAL
- en: test
  prefs: []
  type: TYPE_NORMAL
- en: A top-level directory, alongside *web*, *service*, *data*, and *model*.
  prefs: []
  type: TYPE_NORMAL
- en: unit
  prefs: []
  type: TYPE_NORMAL
- en: Exercise single functions, but don’t cross layer boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: web
  prefs: []
  type: TYPE_NORMAL
- en: Web-layer unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: service
  prefs: []
  type: TYPE_NORMAL
- en: Service-layer unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: data
  prefs: []
  type: TYPE_NORMAL
- en: Data-layer unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: full
  prefs: []
  type: TYPE_NORMAL
- en: Also known as *end-to-end* or *contract* tests, these span all layers at once.
    They address the API endpoints in the Web layer.
  prefs: []
  type: TYPE_NORMAL
- en: The directories have the *test_* prefix or *_test* suffix for use by pytest,
    which you’ll start to see in [Example 9-4](#ex-9-4) (which runs the test in [Example 9-3](#ex-9-3)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Before testing, a few API design choices need to be made. What should be returned
    by the `get_one()` function if a matching `Creature` or `Explorer` isn’t found?
    You can return `None`, as in [Example 9-2](#ex-9-2). Or you could raise an exception.
    None of the built-in Python exception types deal directly with missing values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TypeError` may be the closest, because `None` is a different type than `Creature`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ValueError` is more suited for the wrong value for a given type, but I guess
    you could say that passing a missing string `id` to `get_one(id)` qualifies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You could define your own `MissingError` if you really want to.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whichever method you choose, the effects will bubble up all the way to the top
    layer.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s go with the `None` alternative rather than the exception for now. After
    all, that’s what *none* means. [Example 9-3](#ex-9-3) is a test.
  prefs: []
  type: TYPE_NORMAL
- en: Example 9-3\. Service test test/unit/service/test_creature.py
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Run the test in [Example 9-4](#ex-9-4).
  prefs: []
  type: TYPE_NORMAL
- en: Example 9-4\. Run the service test
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In [Chapter 10](ch10.html#ch10), `get_one()` will no longer return `None` for
    a missing creature, and the `test_get_missing()` test in [Example 9-4](#ex-9-4)
    would fail. But that will be fixed.
  prefs: []
  type: TYPE_NORMAL
- en: Other Service-Level Stuff
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re in the middle of the stack now—the part that really defines our site’s
    purpose. And so far, we’ve used it only to forward web requests to the (next chapter’s)
    Data layer.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, this book has developed the site iteratively, building a minimal base
    for future work. As you learn more about what you have, what you can do, and what
    users might want, you can branch out and experiment. Some ideas might benefit
    only larger sites, but here are some technical site-helper ideas:'
  prefs: []
  type: TYPE_NORMAL
- en: Logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This section discusses each of these. We’ll revisit these options in [“Troubleshooting”](ch13.html#troubleshooting),
    to see if they can help diagnose problems.
  prefs: []
  type: TYPE_NORMAL
- en: Logging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FastAPI logs each API call to an endpoint—including the timestamp, method, and
    URL—but not any data delivered via the body or headers.
  prefs: []
  type: TYPE_NORMAL
- en: Metrics, Monitoring, Observability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you run a website, you probably want to know how it’s doing. For an API website,
    you might want to know which endpoints are being accessed, how many people are
    visiting, and so on. Statistics on such factors are called *metrics*, and the
    gathering of them is *monitoring* or *observability*.
  prefs: []
  type: TYPE_NORMAL
- en: Popular metrics tools nowadays include [Prometheus](https://prometheus.io) for
    gathering metrics and [Grafana](https://grafana.com) for displaying metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Tracing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How well is your site performing? It’s common for metrics to be good overall,
    but with disappointing results here or there. Or the whole site may be a mess.
    Either way, it’s useful to have a tool that measures how long an API call takes,
    end to end—and not just overall time, but the time for each intermediate step.
    If something’s slow, you can find the weak link in the chain. This is *tracing*.
  prefs: []
  type: TYPE_NORMAL
- en: A new open source project has taken earlier tracing products like [Jaeger](https://www.jaegertracing.io)
    and branded them as [OpenTelemetry](https://opentelemetry.io). It has a [Python
    API](https://oreil.ly/gyL70) and at least one [integration with FastAPI](https://oreil.ly/L6RXV).
  prefs: []
  type: TYPE_NORMAL
- en: To install and configure OpenTelemetry with Python, follow the instructions
    in the [OpenTelemetry Python documentation](https://oreil.ly/MBgd5).
  prefs: []
  type: TYPE_NORMAL
- en: Other
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These production issues will be discussed in [Chapter 13](ch13.html#ch13).
    Besides these, what about our domain—cryptids and anything associated with them?
    Besides bare details on explorers and creatures, what else might you want to take
    on? You may come up with new ideas that require changes to the models and other
    layers. Here are some ideas you might try:'
  prefs: []
  type: TYPE_NORMAL
- en: Links of explorers to the creatures that they seek
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sighting data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expeditions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Photos and videos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sasquatch mugs and T-shirts ([Figure 9-1](#fig-sasquatch-mug))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![fapi 0901](assets/fapi_0901.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-1\. A word from our sponsor
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Each of these categories will generally require one or more new models to be
    defined, and new modules and functions. Some will be added in [Part IV](part04.html#part4),
    which is a gallery of applications added to the base built here in [Part III](part03.html#part3).
  prefs: []
  type: TYPE_NORMAL
- en: Review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you replicated some functions from the Web layer and moved
    the fake data that they worked with. The goal was to initiate the new Service
    layer. So far, it’s been a cookie-cutter process, but it will evolve and diverge
    after this. The next chapter builds the final Data layer, yielding a truly live
    website.
  prefs: []
  type: TYPE_NORMAL
