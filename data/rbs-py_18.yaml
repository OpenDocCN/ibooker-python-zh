- en: Chapter 15\. Extensibility
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第15章。可扩展性
- en: This chapter focuses on extensibility. Extensibility underpins this part of
    the book; it’s important to understand this key concept. Once you know how extensibility
    affects robustness, you’ll start seeing opportunities to apply it throughout your
    codebase. Extensible systems allow other developers to enhance your codebase with
    confidence, reducing the chance of errors. Let’s examine how.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍可扩展性。可扩展性是本书的重点内容之一；理解这一关键概念非常重要。一旦你了解了可扩展性对稳健性的影响，你就会开始看到在代码库中应用它的机会。可扩展的系统允许其他开发人员自信地增强你的代码库，从而减少错误的机会。让我们来看看是如何做到这一点的。
- en: What Is Extensibility?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是可扩展性？
- en: '*Extensibility* is the property of systems that allows new functionality to
    be added without modifying existing parts of your system. Software is not static;
    it will change. Throughout your codebase’s lifetime, developers will change your
    software. The *soft* part of *software* indicates as much. These changes can be
    quite large. Think about the times you need to swap out a key piece of your architecture
    as you scale, or add in new workflows. These changes touch multiple parts of your
    codebase; simple typechecking won’t catch all errors at this level. After all,
    you may be redesigning your types completely. The goal of extensible software
    is to be designed in such a way that you have provided easy extension points for
    future developers, especially in areas of code that are changed often.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*可扩展性*是系统的属性，允许在不修改系统现有部分的情况下添加新功能。软件不是静态的；它会发生变化。在你的代码库的生命周期中，开发人员会改变你的软件。*软件*中的*软*部分就表示这一点。这些变化可能是相当大的。想想你需要在扩展规模时交换体系结构的关键部分，或者添加新的工作流程的情况。这些变化会触及代码库的多个部分；简单的类型检查无法在这个级别捕获所有错误。毕竟，你可能正在完全重新设计你的类型。可扩展软件的目标是以一种使未来开发人员能够轻松扩展的方式设计，特别是在经常更改的代码区域。'
- en: To illustrate this idea, let’s consider a restaurant chain that wants to implement
    some sort of notification system to help suppliers respond to demand. A restaurant
    may have a special, or be out of a certain ingredient, or indicate that some ingredient
    has gone bad. In each case, the restaurant wants the supplier to automatically
    be notified that a restock is needed. The supplier has provided a Python library
    to do the actual notifications.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了阐明这个想法，让我们考虑一个希望实现某种通知系统以帮助供应商应对需求的连锁餐厅。餐厅可能有特色菜，或者缺少某种成分，或者表明某种成分已经变质。在每种情况下，餐厅都希望供应商能够自动收到通知，提示需要重新补货。供应商已经提供了一个用于实际通知的Python库。
- en: 'The implementation looks like the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 实现看起来像下面这样：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code is pretty straightforward at first glance. Whenever an event of note
    occurs, the appropriate notification can be sent to the supplier (imagine some
    dictionary being sent as part of a JSON request).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码一开始看起来很简单。每当发生重要事件时，适当的通知就可以发送给供应商（想象一下将某个字典作为JSON请求的一部分发送）。
- en: 'Fast forward a few months, and a new work item comes in. Your boss at the restaurant
    is so pleased with the notification system that they want to expand it. They want
    notifications to come to their email address. Sounds simple enough, right? You
    make the `declare_special` function take an email address as well:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 快进几个月，一个新的工作项出现了。你在餐厅的老板对通知系统非常满意，他们想要扩展它。他们希望通知发送到他们的电子邮件地址。听起来很简单，对吧？你让`declare_special`函数也接受电子邮件地址：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This has far-reaching implications, though. A function calling `declare_special`
    will also need knowledge of what email to pass down. Thankfully, typecheckers
    will catch any omission. But what if other use cases start rolling in? You take
    a look at your backlog and the following tasks are present:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，这有着深远的影响。调用`declare_special`的函数也需要知道传递下去的电子邮件是什么。幸运的是，类型检查器会捕获任何遗漏。但如果出现其他用例会怎样呢？你看了一下你的待办事项清单，下面的任务都在那里：
- en: Notify sales team about specials and items out of stock.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知销售团队有关特价和缺货商品。
- en: Notify the restaurant’s customers of new specials.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知餐厅的顾客有关新特价。
- en: Support different APIs for different suppliers.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持为不同的供应商使用不同的API。
- en: Support text message notifications so your boss can get notifications, too.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持文本消息通知，以便你的老板也可以收到通知。
- en: 'Create a new notification type: New Menu Item. Marketers and the boss want
    to know about this, but not the supplier.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的通知类型：新菜单项。市场营销人员和老板想了解这一点，但供应商不想知道。
- en: As developers implement these features, `declare_special` gets bigger and bigger.
    It handles more and more cases, and as the logic gets more complex, the potential
    for making a mistake grows. What’s worse, any changes to the API (such as adding
    a list of email addresses or phone numbers for texting) will have repercussions
    for all the callers. At some point, doing simple things like adding a new email
    address to the list of marketers touches multiple files in your codebase. This
    is colloquially known as “shotgun surgery”:^([1](part0020_split_007.html#idm45644733127304))
    where a single change spreads out in a blast pattern, impacting a variety of files.
    Furthermore, developers are modifying existing code, increasing the chances of
    a mistake. To top it off, we’ve only covered `declare_special`, but `order_dish`
    and `check_for_expired_ingredients` need their own custom logic as well. Handling
    the notification code duplicated everywhere would be quite tedious. Ask yourself
    if you would enjoy having to look for every notification snippet in the codebase
    just because a new user wants text notifications.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发人员实现这些功能时，`declare_special`变得越来越庞大。它处理的案例越来越多，逻辑变得越来越复杂，出错的可能性也增加。更糟糕的是，对API的任何更改（比如添加一个用于发送短信的电子邮件地址或电话号码列表）都会对所有调用方产生影响。在某个时候，像将新的电子邮件地址添加到营销人员列表中这样的简单操作会触及代码库中的多个文件。这在口语中被称为“散弹手术”：^([1](part0020_split_007.html#idm45644733127304))，一个变化会在一系列文件中传播开来，影响各种文件。此外，开发人员正在修改现有的代码，增加出错的机会。更糟糕的是，我们只涉及了`declare_special`，但`order_dish`和`check_for_expired_ingredients`也需要它们自己的定制逻辑。处理到处重复的通知代码将会非常乏味。问问自己，如果一个新用户想要文本通知，你会喜欢不得不在整个代码库中寻找每一个通知片段吗？
- en: This all stems from the code not being very extensible. You start requiring
    developers to know about all the intricacies of multiple files in order to make
    their changes. It will take significantly more work for a maintainer to implement
    their features. Recall from [Chapter 1](part0003_split_000.html#intro) the discussion
    between accidental complexity and necessary complexity. Necessary complexity is
    intrinsic to your problem domain; accidental complexity is the complexity you
    introduce. In this case, the combination of notifications, recipients, and filters
    is necessary; it is a required functionality of the system.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都源于代码不太可扩展。您开始要求开发人员了解多个文件的所有细节才能进行更改。维护者实现其功能将需要更多的工作。回想一下[第一章](part0003_split_000.html#intro)中对意外复杂性和必要复杂性的讨论。必要复杂性是与您的问题领域内在相关的；意外复杂性是您引入的复杂性。在这种情况下，通知、接收者和过滤器的组合是必要的；它是系统的必需功能。
- en: However, how you implement the system dictates how much accidental complexity
    you incur. The way I’ve described is chock full of accidental complexity. Adding
    any one simple thing is quite a monumental undertaking. Requiring developers to
    hunt through the codebase to find all the places that need to change is just asking
    for trouble. Easy changes should be easy to make. Otherwise, extending the system
    becomes a chore every single time.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，您实现系统的方式决定了您承担多少意外复杂性。我描述的方式充满了意外复杂性。添加任何一个简单的东西都是一项相当大的工程。要求开发人员在代码库中搜索需要更改的所有位置只会招来麻烦。简单的更改应该很容易实现。否则，每次扩展系统都会变成一项琐事。
- en: The Redesign
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新设计
- en: 'Let’s look at the `declare_special` function again:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次看一下`declare_special`函数：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The problem all started with adding email as a parameter to the function. This
    is what caused a ripple effect that affected other parts of the codebase. It’s
    not the future developer’s fault; they are often constrained by time, trying to
    jam their feature into a part of the codebase they are unfamiliar with. They will
    typically follow the patterns already laid out for them. If you can lay groundwork
    to lead them in the right direction, you increase the maintainability of your
    code. If you let the maintainability fester, you start seeing methods like the
    following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所有问题都始于向函数添加电子邮件作为参数。这导致了涟漪效应，影响了代码库的其他部分。这不是未来开发人员的错；他们通常受到时间的限制，试图将他们的功能塞进他们不熟悉的代码库的某个部分。他们通常会遵循已为他们铺平道路的模式。如果您能奠定基础，引导他们朝着正确的方向发展，您就会提高代码的可维护性。如果您让可维护性滋生，您会开始看到如下方法：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The function will grow and grow out of control until it’s a tangled mess of
    dependencies. If I need to add a customer to a mailing list, why do I need to
    look at how specials are declared?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 函数将会不断增长，直到它变成一个纠缠不清的依赖混乱。如果我需要将客户添加到邮件列表，为什么我还需要查看如何声明特价？
- en: 'I need to redesign the notification system so that changes are easy to make.
    First, I’ll look at use cases and think about what needs to be made easy for future
    developers. (If you’d like additional advice around designing interfaces, revisit
    [Part II](part0011.html#part_2), specifically [Chapter 11](part0015_split_000.html#api).)
    In this specific use case, I want future developers to be able to add three things
    easily:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 需要重新设计通知系统，以便于进行更改。首先，我将查看使用情况，并考虑未来开发人员需要简化的内容。（如果您需要有关设计界面的额外建议，请参阅[第二部分](part0011.html#part_2)，特别是[第11章](part0015_split_000.html#api)。）在这个特定的使用情况中，我希望未来的开发人员能够轻松添加三个事项：
- en: New notification types
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新通知类型
- en: New notification methods (such as email, text message, or APIs)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新通知方法（例如电子邮件、短信或API）
- en: New users to notify
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新用户需要通知
- en: Notification code is littered around the codebase, so I want to make sure that
    as developers make these changes, they don’t need to engage in any shotgun surgery.
    Remember, I want the easy things to be easy.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通知代码散落在代码库中，因此我希望在开发人员进行这些更改时，他们无需进行任何散弹手术。记住，我希望简单的事情变得简单。
- en: Now, think about my *necessary* complexities. In this case, there will be multiple
    notification methods, multiple notification types, and multiple users needing
    to be notified. These are three separate complexities; I want to limit the interactions
    between these. Part of the problem of `declare_special` is that the combination
    of concerns it has to account for are daunting. Multiply that complexity by every
    function needing slightly different notification needs and you have a real nightmare
    of maintenance on your hand.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑我*必要的*复杂性。在这种情况下，将有多种通知方法、多种通知类型和多个需要收到通知的用户。这些是三种不同的复杂性；我希望限制它们之间的交互。`declare_special`的部分问题在于它必须考虑的关注点的组合是令人生畏的。将这种复杂性乘以每个需要稍有不同通知需求的函数，你将面临一个维护的真正噩梦。
- en: 'The first thing to do is decouple the intents as best as you can. I’ll start
    by creating classes for each notification type:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的是尽量解耦意图。我将首先为每种通知类型创建类：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If I think about how I want `declare_special` to interact with the codebase,
    I really only want it to know about this `NotificationType`. Declaring a special
    should not require knowing who is signed up for that special and how they will
    be notified. Ideally, the `declare_special` (and any other function needing to
    send notifications) should look something like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我考虑`declare_special`如何与代码库进行交互，我真的只希望它知道这个`NotificationType`。声明特殊不应该需要知道谁注册了该特殊以及他们将如何收到通知。理想情况下，`declare_special`（以及任何需要发送通知的其他函数）应该看起来像这样：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`send_notification` can just be declared like such:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`send_notification`可以像这样声明：'
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This means that if any part of the codebase wants to send a notification, it
    merely needs to invoke this function. All you need to pass in is a notification
    type. Adding new notification types is simple; you add a new class, add that class
    to the `Union`, and call the `send_notification` with the new notification type.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着如果代码库的任何部分想要发送通知，它只需调用这个函数。你只需要传入一个通知类型。添加新的通知类型很简单；你添加一个新的类，将该类添加到`Union`中，并调用`send_notification`以使用新的通知类型。
- en: 'Next, you have to make it easy to add new notification methods. Again, I’ll
    add new types to represent each notification method:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要轻松地添加新的通知方法。同样，我将添加新的类型来代表每种通知方法：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Somewhere in the codebase, I need to actually send a different notification
    type per method. I can create a few helper functions to handle that functionality:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码库的某个地方，我需要根据每种方法发送不同的通知类型。我可以创建一些辅助函数来处理这个功能：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, adding a new notification method is straightforward as well. I add a new
    type, add it to the union, add an `if` statement in `notify`, and write a corresponding
    method to handle all different notification types.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，添加新的通知方法也很简单。我添加一个新类型，将其添加到联合中，在`notify`中添加一个`if`语句，并编写一个相应的方法来处理所有不同的通知类型。
- en: It may seem unwieldy to handle all the notification types in each `send_***`
    method, but this is necessary complexity; there is different functionality per
    method/type combo due to different messages, different information, and different
    formats. If the sheer amount of code did grow, you could make a dynamic lookup
    dictionary (so that adding a new key-value would be all that’s needed for adding
    a notification method), but in these cases you will trade off early error detection
    with typechecking for more readability.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个`send_***`方法中处理所有通知类型可能看起来很笨重，但这是必要的复杂性；由于不同的消息、不同的信息和不同的格式，每种方法/类型组合都有不同的功能。如果代码量太大，你可以创建一个动态查找字典（这样添加新的键值对就是需要的所有内容，用于添加通知方法），但在这些情况下，你将牺牲早期错误检测以换取更好的可读性。
- en: 'Now I have easy ways to add a new notification method or type. I just have
    to tie it all together so that it’s easy to add new users. To do that, I will
    write a function to get the list of users needing to be notified:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我有了添加新的通知方法或类型的简单方法。我只需要将它们全部联系起来，以便轻松添加新用户。为此，我将编写一个函数来获取需要通知的用户列表：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In practice, this data could be coming from a config file or some other declarative
    source, but for the brevity needed for a book example, it will do. To add new
    users, I just add a new entry to this dictionary. Adding new notification methods
    or notification types for a user is just as easy. The code for users to notify
    is much easier to handle.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，这些数据可能来自配置文件或其他声明性来源，但为了书中的简洁性，它就足够了。要添加新用户，我只需在这个字典中添加一个新条目。为用户添加新的通知方法或通知类型同样简单。处理需要通知的用户的代码要容易得多。
- en: 'To put it all together, I’ll implement `send_notification` using all of these
    concepts:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将所有这些概念整合到一起，我将实现`send_notification`：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: That’s it! All of this code for notifications can live in one file, and the
    rest of the codebase only needs to know one function—`send_notification`—to interact
    with the notification system. This becomes much easier to test once there’s no
    need to interact with any other part of the codebase. Furthermore, this code is
    extensible; developers can easily add new notification types, methods, or users
    without trawling through the codebase for all the myriad invocations. You want
    to make it easy to add new functionality to your codebase while minimizing modifications
    to existing code. This is known as the Open-Closed Principle.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！所有这些通知代码可以放在一个文件中，代码库的其余部分只需要知道一个函数——`send_notification`——与通知系统进行交互。一旦不再需要与代码库的任何其他部分进行交互，这将使得测试变得更加容易。此外，这段代码是可扩展的；开发者可以轻松地添加新的通知类型、方法或用户，而无需搜索整个代码库以查找所有复杂的调用。你希望在最小化对现有代码修改的同时，轻松地向你的代码库添加新功能。这就是开闭原则。
- en: Open-Closed Principle
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开闭原则
- en: The *Open-Closed Principle* (OCP) states that code should be open for extension
    and closed for modification.^([2](part0020_split_007.html#idm45644732423576))
    This is the heart of extensibility. Our redesign in the previous section tried
    to uphold this principle. Rather than requiring new functionality to touch multiple
    parts of the codebase, it instead required adding new types or functions. Even
    when existing functions changed, all I did was add a new conditional check instead
    of modifying an existing check.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*开闭原则*（OCP）指出，代码应该对扩展开放，对修改关闭^([2](part0020_split_007.html#idm45644732423576))。这是可扩展性的核心。我们在前一节的重设计中试图遵循这一原则。与要求新功能触及代码库的多个部分不同，它要求添加新类型或函数。即使现有函数发生了变化，我也只是添加了一个新的条件检查，而不是修改现有的检查。'
- en: 'It may seem like all I’ve done is aim for code reuse, but the OCP goes a step
    further. Yes, I’ve deduplicated the notification code, but more importantly, I’ve
    made it easier for developers to manage the complexity. Ask yourself which you
    prefer: implementing a feature by examining call stacks and not being sure if
    you found every place that needs to be changed, or one file that is easy to modify
    and doesn’t require extensive changes. I know what I’d pick.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我一直在追求代码重用，但开闭原则（OCP）更进一步。是的，我已经去重了通知代码，但更重要的是，我让开发者更容易管理复杂性。问问自己，你更喜欢哪个：通过检查调用堆栈来实现一个功能，但不确定是否找到了需要更改的每个位置，还是修改简单且不需要大幅修改的一个文件。我知道我会选择哪个。
- en: You’ve already been exposed to the OCP in this book. Duck typing (in [Chapter 2](part0005_split_000.html#types)),
    subtyping (in [Chapter 12](part0016_split_000.html#subtyping)), and protocols
    (in [Chapter 13](part0017_split_000.html#protocols)) are all mechanisms that can
    help with the OCP. The common thread among all these mechanisms is that they allow
    you to program in a generic fashion. You no longer need to handle every special
    case directly where the functionality is used. Instead, you provide extension
    points for other developers to utilize, allowing them to inject their own functionality
    without modifying your code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经在本书中接触过OCP。鸭子类型（在[第2章](part0005_split_000.html#types)）、子类型（在[第12章](part0016_split_000.html#subtyping)）、以及协议（在[第13章](part0017_split_000.html#protocols)）都是可以帮助实现OCP的机制。所有这些机制的共同点是它们允许您以一种通用的方式编程。你不再需要直接处理每个特殊情况，而是为其他开发人员提供扩展点，让他们能够在不修改你的代码的情况下注入自己的功能。
- en: The OCP is the heart of extensibility. Keeping your code extensible will improve
    robustness. Developers can implement functionality with confidence; there is one
    place to make the change, and the rest of the codebase is all geared up to support
    the change. Less cognitive overhead and less code to change will lead to fewer
    errors.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: OCP是可扩展性的核心。保持代码的可扩展性将提高鲁棒性。开发人员可以自信地实现功能；只需在一个地方进行更改，而其他代码库已经准备好支持该更改。较少的认知开销和较少的代码更改将导致较少的错误。
- en: Detecting OCP Violations
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测OCP违规
- en: 'How can you tell if you should be writing code to be more extensible, adhering
    to the OCP? Here are some indicators that should raise an eyebrow as you think
    about your codebase:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如何判断你是否应该编写更易扩展的代码，遵循OCP？以下是一些指标，当你考虑你的代码库时应该引起注意：
- en: Are the easy things hard to do?
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来容易的事情难以做到吗？
- en: Some things should be conceptually easy in your codebase. The effort needed
    to implement the concept should match the domain complexity. I once worked in
    a codebase that required 13 different files to be modified in order to add a user-configurable
    option. For a product that had hundreds of configurable options, this should have
    been an easy task. Suffice to say, it was not.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码库中应该有一些概念上容易的事情。实现这个概念所需的工作量应该与领域复杂性相匹配。我曾经在一个代码库中工作，为了添加一个用户可配置选项需要修改13个不同的文件。对于一个有数百个可配置选项的产品来说，这应该是一个容易的任务。可以说，事实并非如此。
- en: Do you encounter pushback against similar features?
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否遇到了类似特性的阻力？
- en: If feature requesters are constantly pushing back on timelines for a feature,
    especially if it, in their words, “is almost identical to previous feature *X*“,
    ask yourself if the disconnect is due to complexity. It might be that the complexity
    is inherent in the domain, in which case you should make sure the feature requester
    is on the same page as you. If the complexity is accidental, though, your code
    probably needs to be reworked to make it easier to work in.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果特性请求者经常对特性的时间表提出异议，特别是如果，在他们的话中，它“几乎与以前的特性*X*相同”，请问是否存在复杂性的脱节。可能复杂性固有于领域中，在这种情况下，你应该确保特性请求者与你在同一页面上。但如果复杂性是偶然的，那么你的代码可能需要重新设计，以使其更容易操作。
- en: Do you have consistently high estimates?
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否一直有着高估算？
- en: Some teams use estimates to predict the amount of work they will do in a given
    timeline. If features consistently have high estimates, ask yourself the source
    of the estimate. Is complexity driving the high estimate, and is that complexity
    necessary? Is it risk and fear of the unknown? If it’s the latter, ask why your
    codebase feels risky to work in. Some teams split features into separate estimates
    by splitting the work. If you’re doing this consistently, ask if restructuring
    the codebase could have mitigated the split.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一些团队使用估算来预测他们在给定时间范围内要完成的工作量。如果特性一直有很高的估算，请问估算的来源是什么。是复杂性驱动了高估算吗？那种复杂性是必要的吗？还是风险和未知的恐惧？如果是后者，请问为什么你的代码库感觉有风险？有些团队将特性分割成独立的估算，通过分割工作。如果你一直这样做，请问重组代码库是否可以减轻分割。
- en: Do commits contain large changesets?
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 提交包含大的变更集吗？
- en: Look for commits in your version control system that have a large number of
    files. This is a great indication that shotgun surgery is happening, especially
    if the same files keep showing up in multiple commits. Keep in mind this is a
    guideline; big commits don’t always indicate a problem, but if they happen frequently,
    it’s worth checking into.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 查找你的版本控制系统中具有大量文件的提交。这很可能表明“散弹手术”正在发生，尤其是如果相同的文件在多个提交中反复出现。请记住，这只是一个指导原则；大提交并不总是表示问题，但如果频繁发生，值得进一步检查。
- en: Discussion Topic
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论话题
- en: Which OCP violations have you encountered in your codebase? How could you restructure
    code to avoid them?
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的代码库中遇到了哪些OCP（开闭原则）的违规情况？你如何重构代码以避免这些问题？
- en: Drawbacks
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: Extensibility is not a panacea to all of your coding woes. In fact, you can
    actually *degrade* your codebase with too much flexibility. If you overdo the
    OCP and try to make everything configurable and extensible, you will quickly find
    yourself in a mess. The problem is that while making your code extensible reduces
    accidental complexity in making changes, it can *increase* accidental complexity
    in other areas.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性并非解决所有编码问题的灵丹妙药。事实上，如果过度灵活，你的代码库实际上可能会*降级*。如果你过度使用OCP并试图使所有东西可配置和可扩展，你很快会发现自己陷入困境。问题在于，虽然使代码可扩展可以减少在进行更改时的意外复杂性，但它可能会*增加*其他方面的意外复杂性。
- en: First, readability suffers. You are creating a whole new layer of abstraction
    that separates your business logic from other parts of your codebase. Anyone who
    wants to understand the entire picture has to jump through a few extra hoops.
    This will affect new developers getting up to speed, as well as hinder debugging
    efforts. You can mitigate this with good documentation and explaining your code
    structure.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，可读性下降。你正在创建一个全新的抽象层，将你的业务逻辑与代码库的其他部分分离开来。任何想要理解整体图片的人都必须跳过一些额外的步骤。这将影响新开发人员快速上手，同时也会妨碍调试工作。你可以通过良好的文档和解释代码结构来缓解这种情况。
- en: Secondly, you introduce a coupling that may not have been present before. Before,
    separate parts of the codebase were independent of each other. Now, they share
    a common subsystem; any change in that subsystem will affect all the consumers.
    I’ll go more in depth in [Chapter 16](part0021_split_000.html#dependencies). Mitigate
    this with a strong set of tests.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，你引入了一个可能之前不存在的耦合。之前，代码库的各个部分是相互独立的。现在，它们共享一个公共子系统；该子系统的任何变化都会影响所有的使用者。我将在[第16章](part0021_split_000.html#dependencies)中深入讨论这一点。通过一套强大的测试来减轻这种影响。
- en: Use the OCP in moderation and take care when applying these principles. Use
    them too much, and your codebase will be overabstracted with a confusing tangle
    of dependencies. Use it too little, and developers will take longer to make changes
    as well as introduce more bugs. Define extension points in areas that you are
    reasonably sure that someone will have to modify again, and you will drastically
    improve your future maintainer’s experience with your codebase.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 适度使用OCP，并在应用这些原则时谨慎行事。如果使用过度，你的代码库将被过度抽象化和混乱的依赖关系所困扰。使用过少，则开发人员将需要更长时间来进行更改，并引入更多的错误。在你合理确定某些区域需要再次修改时，定义扩展点将大大改善未来维护者在处理你的代码库时的体验。
- en: Closing Thoughts
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结思考
- en: 'Extensibility is one of the most important aspects of codebase maintenance.
    It allows your collaborators a way of adding functionality without modifying existing
    code. Any time you get away without modifying existing code is a time that you
    aren’t introducing any regressions. Adding extensible code now prevents bugs in
    the future. Remember the OCP: keep code open to extension but closed for modification.
    Apply this principle judiciously and you will see your codebase become more maintainable.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性是代码库维护中最重要的方面之一。它允许你的协作者在不修改现有代码的情况下添加功能。任何时候，避免修改现有代码，就是避免引入回归的时机。现在添加可扩展的代码可以预防未来的错误。记住OCP原则：保持代码对扩展开放，但对修改关闭。合理应用这一原则，你将看到你的代码库变得更易维护。
- en: Extensibility is an important theme that will weave throughout the next few
    chapters. In the next chapter, I’m going to focus on dependencies and how relationships
    in your codebase can constrain its extensibility. You’ll learn about the different
    types of dependencies and how to manage them. You’ll learn how to visualize and
    understand your dependencies, and why some parts of your codebases can have more
    dependencies than others. Once you start managing your dependencies, you will
    find it much easier to extend and modify code.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性是接下来几章将贯穿始终的重要主题。在下一章中，我将专注于依赖关系以及代码库中的关系如何限制其可扩展性。您将了解不同类型的依赖关系以及如何管理它们。您将学习如何可视化和理解您的依赖关系，以及为什么您的代码库中的某些部分可能具有更多的依赖关系。一旦开始管理您的依赖关系，您将发现扩展和修改代码变得更加容易。
- en: '^([1](part0020_split_001.html#idm45644733127304-marker)) Martin Fowler. *Refactoring:
    Improving the Design of Existing Code*. 2nd ed. Upper Saddle River, NJ: Addison-Wesley
    Professional, 2018.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](part0020_split_001.html#idm45644733127304-marker)) 马丁·福勒。*重构：改善现有代码的设计*。第二版。上沙德尔河，NJ：Addison-Wesley
    Professional，2018。
- en: ^([2](part0020_split_003.html#idm45644732423576-marker)) The OCP was first described
    in *Object-Oriented Software Construction* by Bertrand Meyer (Pearson).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](part0020_split_003.html#idm45644732423576-marker)) OCP首次在Bertrand Meyer（Pearson）的*面向对象软件构建*中描述。
