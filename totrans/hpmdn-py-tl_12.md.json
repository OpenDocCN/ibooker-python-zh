["```py\nimport subprocess\n\ndef run(command, args=[], force=False):\n    if force:\n        args.insert(0, \"--force\")\n    subprocess.run([command, *args])\n```", "```py\n>>> subprocess.run = print  # print commands instead of running them\n>>> run(\"myscript.py\", force=True)\n['myscript.py', '--force']\n>>> run(\"myscript.py\")\n['myscript.py', '--force']\n\n```", "```py\n$ pipx run ruff check --extend-select B\nbad.py:3:23: B006 Do not use mutable data structures for argument defaults\nFound 1 error.\nNo fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option)\n\n```", "```py\n$ pipx install ruff\n```", "```py\nheaders = [f\"User-Agent: {USER_AGENT}\"] # version 1\nheaders = {f\"User-Agent\": USER_AGENT}   # version 2\n```", "```py\n$ ruff check\nexample.py:2:12: F541 [*] f-string without any placeholders\nFound 1 error.\n[*] 1 fixable with the `--fix` option.\n\n```", "```py\n$ ruff rule F541\nf-string-missing-placeholders (F541)\n\nDerived from the Pyflakes linter.\n\nFix is always available.\n\nWhat it does\nChecks for f-strings that do not contain any placeholder expressions.\n\nWhy is this bad?\nf-strings are a convenient way to format strings, but they are not\nnecessary if there are no placeholder expressions to format. In this\n...\n```", "```py\n$ ruff linter\n   F Pyflakes\n E/W pycodestyle\n C90 mccabe\n   I isort\n   N pep8-naming\n   D pydocstyle\n  UP pyupgrade\n... (50+ more lines)\n```", "```py\n[tool.ruff.lint]\nselect = [\"E4\", \"E7\", \"E9\", \"F\"]\n```", "```py\n[tool.ruff.lint]\nselect = [\"E\", \"W\", \"F\", \"B006\"]\n```", "```py\n$ ruff check --statistics --select ALL\n123\tI001   \t[*] Import block is un-sorted or un-formatted\n 45\tARG001 \t[ ] Unused function argument: `bindings`\n 39\tUP007  \t[*] Use `X | Y` for type annotations\n 32\tTRY003 \t[ ] Avoid specifying long messages outside the exception class\n 28\tSIM117 \t[ ] Use a single `with` statement with multiple contexts\n 23\tSLF001 \t[ ] Private member accessed: `_blob`\n 17\tFBT001 \t[ ] Boolean-typed positional argument in function definition\n 10\tPLR0913\t[ ] Too many arguments in function definition (6 > 5)\n...\n\n```", "```py\n[tool.ruff.lint]\nselect = [\"D\", \"E\", \"F\"]\nignore = [\"D100\"]  # Don't require module docstrings for now.\n```", "```py\n[tool.ruff.lint.per-file-ignores]\n\"tests/*\" = [\"S101\"]  # Tests can use assertions.\n```", "```py\nmd5 = hashlib.md5(text.encode()).hexdigest()  # noqa: S324\n```", "```py\n$ ruff check --add-noqa\n```", "```py\n@nox.session\ndef lint(session):\n    session.install(\"ruff\")\n    session.run(\"ruff\", \"check\")\n```", "```py\n$ pipx install pre-commit\n```", "```py\nrepos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.3.4\n    hooks:\n      - id: ruff\n```", "```py\n$ pre-commit run --all-files\n[INFO] Initializing environment for https://github.com/astral-sh/ruff-pre-commit.\n[INFO] Installing environment for https://github.com/astral-sh/ruff-pre-commit.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nruff.....................................................................Passed\n\n```", "```py\n- id: ruff\n  name: ruff\n  language: python\n  entry: ruff check --force-exclude\n  args: []\n  types_or: [python, pyi]\n```", "```py\n[tool.ruff.lint]\nextend-select = [\"B006\"]\nextend-safe-fixes = [\"B006\"]\n```", "```py\nrepos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.3.4\n    hooks:\n      - id: ruff\n        args: [\"--fix\", \"--show-fixes\", \"--exit-non-zero-on-fix\"]\n```", "```py\n$ pre-commit run --all-files\nruff.....................................................................Failed\n- hook id: ruff\n- exit code: 1\n- files were modified by this hook\n\nFixed 1 error:\n- bad.py:\n    1 Ã— B006 (mutable-argument-default)\n\nFound 1 error (1 fixed, 0 remaining).\n\n```", "```py\ndef run(command, args=None, force=False):\n    if args is None:\n        args = []\n    if force:\n        args.insert(0, \"--force\")\n    subprocess.run([command, *args])\n```", "```py\nnox.options.sessions = [\"tests\", \"lint\"]\n\n@nox.session\ndef lint(session):\n    options = [\"--all-files\", \"--show-diff-on-fail\"]\n    session.install(\"pre-commit\")\n    session.run(\"pre-commit\", \"run\", *options, *session.posargs)\n```", "```py\n$ nox --session=lint -- ruff\n\n```", "```py\n$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n\n```", "```py\n$ git commit -n\n```", "```py\n$ SKIP=ruff git commit\n```", "```py\ndef create_frobnicator_factory(the_factory_name,\n                                  interval_in_secs=100,  dbg=False,\n                                use_singleton=None,frobnicate_factor=4.5):\n  if dbg:print('creating frobnication factory '+the_factory_name+\"...\")\n  if(use_singleton):   return _frob_sngltn      #we're done\n  return FrobnicationFactory( the_factory_name,\n\n    intrvl = interval_in_secs             ,f=frobnicate_factor     )\n```", "```py\n$ pipx run autopep8 example.py\n```", "```py\ndef create_frobnicator_factory(the_factory_name,\n                               interval_in_secs=100,  dbg=False,\n                               use_singleton=None, frobnicate_factor=4.5):\n    if dbg:\n        print('creating frobnication factory '+the_factory_name+\"...\")\n    if (use_singleton):\n        return _frob_sngltn  # we're done\n    return FrobnicationFactory(the_factory_name,\n\n                               intrvl=interval_in_secs, f=frobnicate_factor)\n```", "```py\n$ pipx run yapf example.py\n```", "```py\ndef create_frobnicator_factory(the_factory_name,\n                               interval_in_secs=100,\n                               dbg=False,\n                               use_singleton=None,\n                               frobnicate_factor=4.5):\n    if dbg: print('creating frobnication factory ' + the_factory_name + \"...\")\n    if (use_singleton): return _frob_sngltn  #we're done\n    return FrobnicationFactory(the_factory_name,\n                               intrvl=interval_in_secs,\n                               f=frobnicate_factor)\n```", "```py\n$ pipx run black example.py\n```", "```py\ndef create_frobnicator_factory(\n    the_factory_name,\n    interval_in_secs=100,\n    dbg=False,\n    use_singleton=None,\n    frobnicate_factor=4.5,\n):\n    if dbg:\n        print(\"creating frobnication factory \" + the_factory_name + \"...\")\n    if use_singleton:\n        return _frob_sngltn  # we're done\n    return FrobnicationFactory(\n        the_factory_name, intrvl=interval_in_secs, f=frobnicate_factor\n    )\n```", "```py\n@pytest.mark.parametrize(\n    (\"value\", \"expected\"),\n    # fmt: off\n    [\n        (\"first test value\",       \"61df19525cf97aa3855b5aeb1b2bcb89\"),\n        (\"another test value\",     \"5768979c48c30998c46fb21a91a5b266\"),\n        (\"and here's another one\", \"e766977069039d83f01b4e3544a6a54c\"),\n    ]\n    # fmt: on\n)\ndef test_frobnicate(value, expected):\n    assert expected == frobnicate(value)\n```", "```py\nrepos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.3.4\n    hooks:\n      - id: ruff\n        args: [\"--fix\", \"--show-fixes\", \"--exit-non-zero-on-fix\"]\n      - id: ruff-format\n```"]