["```py\nconda create -n ray python=3.7  mamba -y\nconda activate ray\n# In a Conda env this won't be auto-installed with Ray, so add them\npip install jinja2 python-dateutil cloudpickle packaging pygments \\\n    psutil nbconvert ray\n```", "```py\nsudo apt-get install -y git tzdata bash libhdf5-dev curl pkg-config wget \\\n  cmake build-essential zlib1g-dev zlib1g openssh-client gnupg unzip libunwind8 \\\n  libunwind-dev openjdk-11-jdk git\n# Depending on Debian version\nsudo apt-get install -y libhdf5-100 || sudo apt-get install -y libhdf5-103\n# Install bazelisk to install bazel (needed for Ray's CPP code)\n# See https://github.com/bazelbuild/bazelisk/releases\n# On Linux ARM\nBAZEL=bazelisk-linux-arm64\n# On Mac ARM\n# BAZEL=bazelisk-darwin-arm64\nwget -q https://github.com/bazelbuild/bazelisk/releases/download/v1.10.1/${BAZEL} \\\n  -O /tmp/bazel\nchmod a+x /tmp/bazel\nsudo mv /tmp/bazel /usr/bin/bazel\n# Install node, needed for the UI\ncurl -fsSL https://deb.nodesource.com/setup_16.x | sudo bash -\nsudo apt-get install -y nodejs\n```", "```py\nbrew install bazelisk wget python@3.8 npm\n# Make sure Homebrew Python is used before system Python\nexport PATH=$(brew --prefix)/opt/python@3.8/bin/:$PATH\necho \"export PATH=$(brew --prefix)/opt/python@3.8/bin/:$PATH\" >> ~/.zshrc\necho \"export PATH=$(brew --prefix)/opt/python@3.8/bin/:$PATH\" >> ~/.bashrc\n# Install some libraries vendored incorrectly by Ray for ARM\npip3 install --user psutil cython colorama\n```", "```py\ngit clone https://github.com/ray-project/ray.git\ncd ray\n# Build the Ray UI\npushd python/ray/new_dashboard/client; npm install && npm ci && npm run build; popd\n# Specify a specific bazel version as newer ones sometimes break.\nexport USE_BAZEL_VERSION=4.2.1\ncd python\n# Mac ARM USERS ONLY: clean up the vendored files\nrm -rf ./thirdparty_files\n# Install in edit mode or build a wheel\npip install -e .\n# python setup.py bdist_wheel\n```", "```py\ndef hi():\n    import os\n    import socket\n    return f\"Running on {socket.gethostname()} in pid {os.getpid()}\"\n```", "```py\n@ray.remote\ndef remote_hi():\n    import os\n    import socket\n    return f\"Running on {socket.gethostname()} in pid {os.getpid()}\"\nfuture = remote_hi.remote()\nray.get(future)\n```", "```py\nimport timeit\n\ndef slow_task(x):\n    import time\n    time.sleep(2) # Do something sciency/business\n    return x\n\n@ray.remote\ndef remote_task(x):\n    return slow_task(x)\n\nthings = range(10)\n\nvery_slow_result = map(slow_task, things)\nslowish_result = map(lambda x: remote_task.remote(x), things)\n\nslow_time = timeit.timeit(lambda: list(very_slow_result), number=1)\nfast_time = timeit.timeit(lambda: list(ray.get(list(slowish_result))), number=1)\nprint(f\"In sequence {slow_time}, in parallel {fast_time}\")\n```", "```py\n@ray.remote\ndef crawl(url, depth=0, maxdepth=1, maxlinks=4):\n    links = []\n    link_futures = []\n    import requests\n    from bs4 import BeautifulSoup\n    try:\n        f = requests.get(url)\n        links += [(url, f.text)]\n        if (depth > maxdepth):\n            return links # base case\n        soup = BeautifulSoup(f.text, 'html.parser')\n        c = 0\n        for link in soup.find_all('a'):\n            try:\n                c = c + 1\n                link_futures += [crawl.remote(link[\"href\"], depth=(depth+1),\n                                   maxdepth=maxdepth)]\n                # Don't branch too much; we're still in local mode and the web is big\n                if c > maxlinks:\n                    break\n            except:\n                pass\n        for r in ray.get(link_futures):\n            links += r\n        return links\n    except requests.exceptions.InvalidSchema:\n        return [] # Skip nonweb links\n    except requests.exceptions.MissingSchema:\n        return [] # Skip nonweb links\n\nray.get(crawl.remote(\"http://holdenkarau.com/\"))\n```", "```py\n# Create a dataset of URL objects. We could also load this from a text file\n# with ray.data.read_text()\nurls = ray.data.from_items([\n    \"https://github.com/scalingpythonml/scalingpythonml\",\n    \"https://github.com/ray-project/ray\"])\n\ndef fetch_page(url):\n    import requests\n    f = requests.get(url)\n    return f.text\n\npages = urls.map(fetch_page)\n# Look at a page to make sure it worked\npages.take(1)\n```", "```py\nwords = pages.flat_map(lambda x: x.split(\" \")).map(lambda w: (w, 1))\ngrouped_words = words.groupby(lambda wc: wc[0])\n```", "```py\n@ray.remote\nclass HelloWorld(object):\n    def __init__(self):\n        self.value = 0\n    def greet(self):\n        self.value += 1\n        return f\"Hi user #{self.value}\"\n\n# Make an instance of the actor\nhello_actor = HelloWorld.remote()\n\n# Call the actor\nprint(ray.get(hello_actor.greet.remote()))\nprint(ray.get(hello_actor.greet.remote()))\n```"]