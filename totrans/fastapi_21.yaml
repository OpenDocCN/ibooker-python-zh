- en: Chapter 17\. Data Discovery and Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Preview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although FastAPI does have *API* in its name, it can serve more things than
    APIs. This chapter shows you how to generate tables, plots, graphs, and maps from
    data, using a small database of imaginary creatures from around the world.
  prefs: []
  type: TYPE_NORMAL
- en: Python and Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Python has become very popular in the last few years for many reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Ease of learning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clean syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rich standard library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Huge number of high-quality third-party packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Special emphasis on data manipulation, conversion, and introspection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last point has always been relevant for traditional ETL tasks for database
    creation. A nonprofit group called [PyData](https://pydata.org) even organizes
    conferences and develops tools for open source data analysis with Python. The
    popularity of Python also reflects the recent surge in AI and the need for tools
    to prepare the data that feeds AI models.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll try some Python data packages and see how they relate
    to modern Python web development and FastAPI.
  prefs: []
  type: TYPE_NORMAL
- en: PSV Text Output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll use the creatures listed in [Appendix B](app02.html#app02).
    The data is in this book’s GitHub repo, in the pipe-separated file *cryptid.psv*
    and the SQLite database *cryptid.db*. Comma-separated (*.csv*) and tab-separated
    (*.tsv*) files are common, but commas are used within the data cells themselves,
    and tabs are sometimes hard to distinguish from other whitespace. The pipe character
    (`|`) is distinct, and rare enough in standard text to serve as a good separator.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try the *.psv* text file first, using just text output examples for simplicity,
    and then go on to full web examples using the SQLite database.
  prefs: []
  type: TYPE_NORMAL
- en: 'The initial header line of the *.psv* file contains the names of the fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`country` (`*` means many countries)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`area` (optional, US state or other country area)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`aka` (also known as)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rest of the lines in the file describe one creature at a time, with the
    fields in that order, separated by a `|` character.
  prefs: []
  type: TYPE_NORMAL
- en: csv
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Example 17-1](#ex-17-1) reads the creature data into Python data structures.
    First, the pipe-separated file *cryptids.psv* can be read with the standard Python
    csv package, yielding a list of tuples, where each tuple represents a line of
    data from the file. (The csv package also includes a `DictReader` that returns
    a list of dicts instead.) The first line of this file is a header with the names
    of the columns; without this, we could still supply the headers through arguments
    to csv functions.'
  prefs: []
  type: TYPE_NORMAL
- en: I’m including type hints in the examples, but you can drop these if you have
    an older version of Python, and the code will still work. Let’s print only the
    header and first five lines, to save a few trees.^([1](ch17.html#id976))
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-1\. Read PSV file with csv (load_csv.py)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now run the test in [Example 17-2](#ex-17-2).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-2\. Test CSV database loading
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: python-tabulate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s try one more open source tool, [python-tabulate](https://oreil.ly/L0f6k),
    that is specifically designed for tabular output. You’ll need to run `pip install
    tabulate` first. [Example 17-3](#ex-17-3) shows the code.
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-3\. Read PSV file with python-tabulate (load_tabulate.py)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Run [Example 17-3](#ex-17-3) in [Example 17-4](#ex-17-4).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-4\. Run the tabulate load script
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: pandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The two previous examples were mostly output formatters. [Pandas](https://pandas.pydata.org)
    is an excellent tool for slicing and dicing data. It goes beyond the standard
    Python data structures with advanced constructs like the [DataFrame](https://oreil.ly/j-8eh):
    a combination of a table, dictionary, and series. It can also read *.csv* and
    other character-separated files. [Example 17-5](#ex-17-5) is like the previous
    examples, but pandas returns a DataFrame instead of a list of tuples.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-5\. Read PSV file with pandas (load_pandas.py)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Run [Example 17-5](#ex-17-5) in [Example 17-6](#ex-17-6).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-6\. Run the pandas load script
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Pandas has a metric boatload of interesting functions, so take a look.
  prefs: []
  type: TYPE_NORMAL
- en: SQLite Data Source and Web Output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the rest of the examples in this chapter, you’ll read creature data from
    the SQLite database, using some of the website code from earlier chapters. Then
    you’ll slice, dice, and marinate the data with different recipes. Instead of simple
    text output, you’ll install each example into our ever-growing cryptid website.
    You’ll need a few additions to our existing Web, Service, and Data levels.
  prefs: []
  type: TYPE_NORMAL
- en: First, you need a Web-level function and an associated HTTP `GET` route to return
    all the creature data. And you already have one! Let’s make a web call to get
    everything, but again show only the first few lines (trees, you know). That’s
    [Example 17-7](#ex-17-7), right here.
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-7\. Run the creature download test (truncated; trees are watching)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Chart/Graph Packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can go beyond text to GUIs. Some of the most useful and popular Python
    packages for graphical data displays include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Matplotlib](https://matplotlib.org)'
  prefs: []
  type: TYPE_NORMAL
- en: Extensive, but needs some fiddling to get the prettiest results
  prefs: []
  type: TYPE_NORMAL
- en: '[Plotly](https://plotly.com/python)'
  prefs: []
  type: TYPE_NORMAL
- en: Similar to Matplotlib and Seaborn, with an emphasis on interactive graphs
  prefs: []
  type: TYPE_NORMAL
- en: '[Dash](https://dash.plotly.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Built on Plotly as a sort of data dashboard
  prefs: []
  type: TYPE_NORMAL
- en: '[Seaborn](https://seaborn.pydata.org)'
  prefs: []
  type: TYPE_NORMAL
- en: Built on Matplotlib and offers a higher-level interface, but with less graph
    types
  prefs: []
  type: TYPE_NORMAL
- en: '[Bokeh](http://bokeh.org)'
  prefs: []
  type: TYPE_NORMAL
- en: Integrates with JavaScript to provide dashboard views of very large datasets
  prefs: []
  type: TYPE_NORMAL
- en: 'How can you decide? You can consider the following criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: Graph types (e.g., scatter, bar, line)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ease of use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data limits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Comparisons like [“Top 6 Python Libraries for Visualization: Which One to Use?”](https://oreil.ly/10Nsw)
    by khuyentran1476 can help you choose. In the end, the choice often comes down
    to the one that you figure out enough about first. For this chapter, I chose Plotly,
    which can create attractive plots without too much coding.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chart Example 1: Test'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Plotly is an open source (free) Python library with multiple levels of control
    and detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Plotly Express](https://plotly.com/python/plotly-express)'
  prefs: []
  type: TYPE_NORMAL
- en: A minimal Plotly library
  prefs: []
  type: TYPE_NORMAL
- en: '[Plotly](https://plotly.com/python)'
  prefs: []
  type: TYPE_NORMAL
- en: The main library
  prefs: []
  type: TYPE_NORMAL
- en: '[Dash](https://dash.plotly.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Data application tools
  prefs: []
  type: TYPE_NORMAL
- en: There is also [Dash Enterprise](https://dash.plotly.com/dash-enterprise), which,
    like almost anything with *Enterprise* in its name (including spaceship models)
    costs money.
  prefs: []
  type: TYPE_NORMAL
- en: 'What can we actually show from the creature data? Charts and graphs have some
    common forms:'
  prefs: []
  type: TYPE_NORMAL
- en: Scatter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Histogram
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Box (statistical)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our data fields are all strings, intentionally minimal to keep the examples
    from overwhelming the logic and integration steps. For each example, we’ll read
    all the creature data from the SQLite database using code from previous chapters,
    and adding Web and Service functions to select particular data to feed to the
    plot library functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, install Plotly, and a library needed by Plotly to export images:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install plotly`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pip install kaleido`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, in [Example 17-8](#ex-17-8), add a test function to *web/creature.py*
    to see if we have the right pieces, in the right places.
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-8\. Add a test plot endpoint (edit web/creature.py)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The documentation routinely recommends calling `fig.show()` to show the image
    that you just created, but we’re trying to fit in with how FastAPI and Starlette
    do things.
  prefs: []
  type: TYPE_NORMAL
- en: So first you get `fig_bytes` (the actual `bytes` content of the image); then
    you return a custom `Response` object.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve added this endpoint to *web/creature.py* and restarted the web
    server (automatically if you ran Uvicorn with `--reload`), try accessing this
    new endpoint by typing **`localhost:8000/creature/test`** into your browser’s
    location bar. You should see [Figure 17-1](#fig-test-plotly).
  prefs: []
  type: TYPE_NORMAL
- en: '![fapi 1701](assets/fapi_1701.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17-1\. Test Plotly image
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If you got a weird error from Uvicorn like `ValueError: ''not'' is not a valid
    parameter name`, then update Pydantic to fix a bug: `pip install -U pydantic`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chart Example 2: Histogram'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If all is well, let’s start playing with our creature data. We’ll add a `plot()`
    function to *web/creature.py*. We’ll get all the creature data from the database
    via the `get_all()` functions in *service/creature.py* and *data/creature.py*.
    Then we’ll extract what we want and use Plotly to display various images of the
    results.
  prefs: []
  type: TYPE_NORMAL
- en: For our first trick ([Example 17-9](#ex-17-9)), we’ll just use the `name` field
    and make a bar chart indicating the number of creatures’ names that start with
    each letter.
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-9\. Bar chart of creature name initials
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Type `**localhost:8000/creature/plot**` into your browser’s location bar. You
    should see [Figure 17-2](#fig-histogram).
  prefs: []
  type: TYPE_NORMAL
- en: '![fapi 1702](assets/fapi_1702.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17-2\. Creature name initial histogram
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Map Packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you try to Google `**Python**` and `**maps**`, you’ll get many links about
    Python dictionaries, which are a built-in *mapping type* in the language, and
    not the same thing. So you may need to try synonyms like *GIS*, *geo*, *cartography*,
    *spatial*, and so on. Popular packages, some of them built atop others in the
    list, include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PyGIS](https://oreil.ly/3QvCz)'
  prefs: []
  type: TYPE_NORMAL
- en: References for spatial data processing in Python
  prefs: []
  type: TYPE_NORMAL
- en: '[PySAL](https://pysal.org)'
  prefs: []
  type: TYPE_NORMAL
- en: Python Spatial Analysis Library
  prefs: []
  type: TYPE_NORMAL
- en: '[Cartopy](https://oreil.ly/YnUow)'
  prefs: []
  type: TYPE_NORMAL
- en: Analyzes and maps geospatial data
  prefs: []
  type: TYPE_NORMAL
- en: '[Folium](https://oreil.ly/72luj)'
  prefs: []
  type: TYPE_NORMAL
- en: Integrated with JavaScript
  prefs: []
  type: TYPE_NORMAL
- en: '[Python Client for Google Maps Services](https://oreil.ly/LWfS5)'
  prefs: []
  type: TYPE_NORMAL
- en: API access to Google Maps
  prefs: []
  type: TYPE_NORMAL
- en: '[Geemap](https://geemap.org)'
  prefs: []
  type: TYPE_NORMAL
- en: Google Earth support
  prefs: []
  type: TYPE_NORMAL
- en: '[Geoplot](https://oreil.ly/Slfvc)'
  prefs: []
  type: TYPE_NORMAL
- en: Extends Cartopy and Matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: '[GeoPandas](https://geopandas.org)'
  prefs: []
  type: TYPE_NORMAL
- en: An extension of our friend pandas
  prefs: []
  type: TYPE_NORMAL
- en: '[ArcGIS and ArcPy](https://oreil.ly/l7M5C)'
  prefs: []
  type: TYPE_NORMAL
- en: Esri’s open source interface
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to the criteria for plot/graph packages, choices may depend on the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Map types (e.g., choropleth, vector, raster)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ease of use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data limits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Like charts and graphs, maps come in many types and can be used for various
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Map Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’ll use Plotly again for these mapping examples; it’s neither too basic nor
    too complex, and this helps show how to integrate a small web-based map with FastAPI.
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 17-10](#ex17-10) gets the two-letter ISO country codes of our creatures.
    But it turns out that the function that draws Plotly maps (a *choropleth*, which
    sounds like a shape-changing cryptid itself) wants to use another *three*-letter
    ISO country code standard instead. Grrr. So we could redo all the codes in the
    database and PSV file, but it’s easier to run `pip install country_converter`
    and map one set of country codes to another.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-10\. Map countries with cryptids (edit web/creature.py)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Ask your browser to pretty please get `**localhost:8000/creature/map**`, and
    with any luck you’ll see a map in which cryptid-bearing countries stick out ([Figure 17-3](#fig-map-cryptid-countries)).
  prefs: []
  type: TYPE_NORMAL
- en: '![fapi 1703](assets/fapi_1703.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17-3\. Map of cryptid countries
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You could expand this map to focus on the US by using the `area` field, which
    is a two-character state code if `country` is `US`. Use `locationmode="USA-states"`,
    and assign those `area` values to the `locations` parameter of `px.choropleth()`.
  prefs: []
  type: TYPE_NORMAL
- en: Review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have any cryptids been snuffling around near your house? You found out in this
    chapter, where various plotting, graphing, and mapping tools poked at a database
    of worrisome creatures.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch17.html#id976-marker)) If there are any trees like Tolkien’s Ents, we
    don’t want them lumbering up to our doors some night to have a word.
  prefs: []
  type: TYPE_NORMAL
