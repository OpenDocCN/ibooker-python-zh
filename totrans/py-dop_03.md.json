["```py\nIn [1]: import sys\n\nIn [2]: sys.byteorder\nOut[2]: 'little'\n```", "```py\nIn [3]: sys.getsizeof(1)\nOut[3]: 28\n```", "```py\nIn [5]: sys.platform\nOut[5]: 'darwin'\n```", "```py\nif sys.version_info.major < 3:\n    print(\"You need to update your Python version\")\nelif sys.version_info.minor < 7:\n    print(\"You are not running the latest version of Python\")\nelse:\n    print(\"All is good.\")\n```", "```py\nIn [1]: import os\n\nIn [2]: os.getcwd() ![1](assets/1.png)\nOut[2]: '/Users/kbehrman/Google-Drive/projects/python-devops'\n\nIn [3]: os.chdir('/tmp') ![2](assets/2.png)\n\nIn [4]: os.getcwd()\nOut[4]: '/private/tmp'\n\nIn [5]: os.environ.get('LOGLEVEL') ![3](assets/3.png)\n\nIn [6]: os.environ['LOGLEVEL'] = 'DEBUG' ![4](assets/4.png)\n\nIn [7]: os.environ.get('LOGLEVEL')\nOut[7]: 'DEBUG'\n\nIn [8]: os.getlogin() ![5](assets/5.png)\nOut[8]: 'kbehrman'\n```", "```py\nIn [1]: cp = subprocess.run(['ls','-l'],\n                            capture_output=True,\n                            universal_newlines=True)\n\nIn [2]: cp.stdout\nOut[2]: 'total 96\n         -rw-r--r--  1 kbehrman  staff     0 Apr 12 08:48 __init__.py\n         drwxr-xr-x  5 kbehrman  staff   160 Aug 18 15:47 __pycache__\n         -rw-r--r--  1 kbehrman  staff   123 Aug 13 12:13 always_say_it.py\n         -rwxr-xr-x  1 kbehrman  staff  1409 Aug  8 15:36 argparse_example.py\n         -rwxr-xr-x  1 kbehrman  staff   734 Aug 12 09:36 click_example.py\n         -rwxr-xr-x  1 kbehrman  staff   538 Aug 13 10:41 fire_example.py\n         -rw-r--r--  1 kbehrman  staff    41 Aug 18 15:17 foo_plugin_a.py\n         -rw-r--r--  1 kbehrman  staff    41 Aug 18 15:47 foo_plugin_b.py\n         -rwxr-xr-x  1 kbehrman  staff   335 Aug 10 12:36 simple_click.py\n         -rwxr-xr-x  1 kbehrman  staff   256 Aug 13 09:21 simple_fire.py\n         -rwxr-xr-x  1 kbehrman  staff   509 Aug  8 10:27 simple_parse.py\n         -rwxr-xr-x  1 kbehrman  staff   502 Aug 18 15:11 simple_plugins.py\n         -rwxr-xr-x  1 kbehrman  staff   850 Aug  6 14:44 sys_argv.py\n         -rw-r--r--  1 kbehrman  staff   182 Aug 18 16:24 sys_example.py\n'\n```", "```py\nIn [3]: cp = subprocess.run(['ls','/doesnotexist'],\n                            capture_output=True,\n                            universal_newlines=True)\n\nIn [3]: cp.stderr\nOut[3]: 'ls: /doesnotexist: No such file or directory\\n'\n```", "```py\nIn [23]: cp = subprocess.run(['ls', '/doesnotexist'],\n                             capture_output=True,\n                             universal_newlines=True,\n                             check=True)\n---------------------------------------------------------------------------\nCalledProcessError                        Traceback (most recent call last)\n<ipython-input-23-c0ac49c40fee> in <module>\n----> 1 cp = subprocess.run(['ls', '/doesnotexist'],\n                            capture_output=True,\n                            universal_newlines=True,\n                            check=True)\n\n~/.pyenv/versions/3.7.0/lib/python3.7/subprocess.py ...\n    466         if check and retcode:\n    467             raise CalledProcessError(retcode, process.args,\n--> 468                                      output=stdout, stderr=stderr)\n    469     return CompletedProcess(process.args, retcode, stdout, stderr)\n    470\n\nCalledProcessError: Command '['ls', '/doesnotexist']' returned non-zero exit\n```", "```py\ndef say_it():\n    greeting = 'Hello'\n    target = 'Joe'\n    message = f'{greeting} {target}'\n    print(message)\n\nsay_it()\n```", "```py\n$ python always_say_it.py\n\nHello Joe\n```", "```py\nIn [1]: import always_say_it\nHello Joe\n```", "```py\ndef say_it():\n    greeting = 'Hello'\n    target = 'Joe'\n    message = f'{greeting} {target}'\n    print(message)\n\nif __name__ == '__main__':\n    say_it()\n```", "```py\n$ python say_it.py\n\nHello Joe\n```", "```py\n#!/usr/bin/env python\n\"\"\"\nSimple command-line tool using sys.argv\n\"\"\"\nimport sys\n\nif __name__ == '__main__':\n    print(f\"The first argument:  '{sys.argv[0]}'\")\n    print(f\"The second argument: '{sys.argv[1]}'\")\n    print(f\"The third argument:  '{sys.argv[2]}'\")\n    print(f\"The fourth argument: '{sys.argv[3]}'\")\n```", "```py\n$ ./sys_argv.py --a-flag some-value 13\n\nThe first argument:  './sys_argv.py'\nThe second argument: '--a-flag'\nThe third argument:  'some-value'\nThe fourth argument: '13'\n```", "```py\n#!/usr/bin/env python\n\"\"\"\nSimple command-line tool using sys.argv\n\"\"\"\nimport sys\n\ndef say_it(greeting, target):\n    message = f'{greeting} {target}'\n    print(message)\n\nif __name__ == '__main__': ![1](assets/1.png)\n    greeting = 'Hello'  ![2](assets/2.png)\n    target = 'Joe'\n\n    if '--help' in sys.argv:  ![3](assets/3.png)\n        help_message = f\"Usage: {sys.argv[0]} --name <NAME> --greeting <GREETING>\"\n        print(help_message)\n        sys.exit()  ![4](assets/4.png)\n\n    if '--name' in sys.argv:\n        # Get position after name flag\n        name_index = sys.argv.index('--name') + 1 ![5](assets/5.png)\n        if name_index < len(sys.argv): ![6](assets/6.png)\n            name = sys.argv[name_index]\n\n    if '--greeting' in sys.argv:\n        # Get position after greeting flag\n        greeting_index = sys.argv.index('--greeting') + 1\n        if greeting_index < len(sys.argv):\n            greeting = sys.argv[greeting_index]\n\n    say_it(greeting, name) ![7](assets/7.png)\n```", "```py\n$ ./sys_argv.py --help\nUsage: ./sys_argv.py --name <NAME> --greeting <GREETING>\n\n$ ./sys_argv.py --name Sally --greeting Bonjour\nBonjour Sally\n```", "```py\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Maritime control')\n```", "```py\n#!/usr/bin/env python\n\"\"\"\nCommand-line tool using argparse\n\"\"\"\nimport argparse\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Echo your input') ![1](assets/1.png)\n    parser.add_argument('message',               ![2](assets/2.png)\n                        help='Message to echo')\n\n    parser.add_argument('--twice', '-t',         ![3](assets/3.png)\n                        help='Do it twice',\n                        action='store_true')     ![4](assets/4.png)\n\n    args = parser.parse_args()  ![5](assets/5.png)\n\n    print(args.message)    ![6](assets/6.png)\n    if args.twice:\n        print(args.message)\n```", "```py\n$ ./simple_parse.py hello --twice\nhello\nhello\n```", "```py\n$ ./simple_parse.py  --help\nusage: simple_parse.py [-h] [--twice] message\n\nEcho your input\n\npositional arguments:\n  message      Message to echo\n\noptional arguments:\n  -h, --help   show this help message and exit\n  --twice, -t  Do it twice\n```", "```py\n#!/usr/bin/env python\n\"\"\"\nCommand-line tool using argparse\n\"\"\"\nimport argparse\n\ndef sail():\n    ship_name = 'Your ship'\n    print(f\"{ship_name} is setting sail\")\n\ndef list_ships():\n    ships = ['John B', 'Yankee Clipper', 'Pequod']\n    print(f\"Ships: {','.join(ships)}\")\n\ndef greet(greeting, name):\n    message = f'{greeting} {name}'\n    print(message)\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Maritime control') ![1](assets/1.png)\n\n    parser.add_argument('--twice', '-t',   ![2](assets/2.png)\n                        help='Do it twice',\n                        action='store_true')\n\n    subparsers = parser.add_subparsers(dest='func') ![3](assets/3.png)\n\n    ship_parser =  subparsers.add_parser('ships',  ![4](assets/4.png)\n                                         help='Ship related commands')\n    ship_parser.add_argument('command', ![5](assets/5.png)\n                             choices=['list', 'sail'])\n\n    sailor_parser = subparsers.add_parser('sailors', ![6](assets/6.png)\n                                          help='Talk to a sailor')\n    sailor_parser.add_argument('name', ![7](assets/7.png)\n                               help='Sailors name')\n    sailor_parser.add_argument('--greeting', '-g',\n                               help='Greeting',\n                               default='Ahoy there')\n\n    args = parser.parse_args()\n    if args.func == 'sailors': ![8](assets/8.png)\n        greet(args.greeting, args.name)\n    elif args.command == 'list':\n        list_ships()\n    else:\n        sail()\n```", "```py\n$ ./argparse_example.py --help\nusage: argparse_example.py [-h] [--twice] {ships,sailors} ...\n\nMaritime control\n\npositional arguments:\n  {ships,sailors}\n    ships          Ship related commands\n    sailors        Talk to a sailor\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --twice, -t      Do it twice\n```", "```py\n$ ./argparse_example.py ships --help\nusage: argparse_example.py ships [-h] {list,sail}\n\npositional arguments:\n  {list,sail}\n\noptional arguments:\n  -h, --help   show this help message and exit\n```", "```py\n#!/usr/bin/env python\n\"\"\"\nSimple Click example\n\"\"\"\nimport click\n\n@click.command()\n@click.option('--greeting', default='Hiya', help='How do you want to greet?')\n@click.option('--name', default='Tammy', help='Who do you want to greet?')\ndef greet(greeting, name):\n    print(f\"{greeting} {name}\")\n\nif __name__ == '__main__':\n    greet()\n```", "```py\n$ ./simple_click.py --greeting Privet --name Peggy\nPrivet Peggy\n\n$ ./simple_click.py --help\nUsage: simple_click.py [OPTIONS]\n\nOptions:\n  --greeting TEXT  How do you want to greet?\n  --name TEXT      Who do you want to greet?\n  --help           Show this message and exit.\n```", "```py\n#!/usr/bin/env python\n\"\"\"\nCommand-line tool using argparse\n\"\"\"\nimport click\n\n@click.group() ![1](assets/1.png)\ndef cli(): ![2](assets/2.png)\n    pass\n\n@click.group(help='Ship related commands') ![3](assets/3.png)\ndef ships():\n    pass\n\ncli.add_command(ships) ![4](assets/4.png)\n\n@ships.command(help='Sail a ship') ![5](assets/5.png)\ndef sail():\n    ship_name = 'Your ship'\n    print(f\"{ship_name} is setting sail\")\n\n@ships.command(help='List all of the ships')\ndef list_ships():\n    ships = ['John B', 'Yankee Clipper', 'Pequod']\n    print(f\"Ships: {','.join(ships)}\")\n\n@cli.command(help='Talk to a sailor')  ![6](assets/6.png)\n@click.option('--greeting', default='Ahoy there', help='Greeting for sailor')\n@click.argument('name')\ndef sailors(greeting, name):\n    message = f'{greeting} {name}'\n    print(message)\n\nif __name__ == '__main__':\n    cli()  ![7](assets/7.png)\n```", "```py\n./click_example.py --help\nUsage: click_example.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  sailors  Talk to a sailor\n  ships    Ship related commands\n```", "```py\n$ ./click_example.py ships --help\nUsage: click_example.py ships [OPTIONS] COMMAND [ARGS]...\n\n  Ship related commands\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  list-ships  List all of the ships\n  sail        Sail a ship\n```", "```py\n#!/usr/bin/env python\n\"\"\"\nSimple fire example\n\"\"\"\nimport fire\n\ndef greet(greeting='Hiya', name='Tammy'):\n    print(f\"{greeting} {name}\")\n\nif __name__ == '__main__':\n    fire.Fire(greet)\n```", "```py\n$ ./simple_fire.py --help\n\nNAME\n    simple_fire.py\n\nSYNOPSIS\n    simple_fire.py <flags>\n\nFLAGS\n    --greeting=GREETING\n    --name=NAME\n```", "```py\n#!/usr/bin/env python\n\"\"\"\nSimple fire example\n\"\"\"\nimport fire\n\ndef greet(greeting='Hiya', name='Tammy'):\n    print(f\"{greeting} {name}\")\n\ndef goodbye(goodbye='Bye', name='Tammy'):\n    print(f\"{goodbye} {name}\")\n\nif __name__ == '__main__':\n    fire.Fire()\n```", "```py\n$ ./simple_fire.py --help\nINFO: Showing help with the command 'simple_fire.py -- --help'.\n\nNAME\n    simple_fire.py\n\nSYNOPSIS\n    simple_fire.py GROUP | COMMAND\n\nGROUPS\n    GROUP is one of the following:\n\n     fire\n       The Python fire module.\n\nCOMMANDS\n    COMMAND is one of the following:\n\n     greet\n\n     goodbye\n(END)\n```", "```py\n#!/usr/bin/env python\n\"\"\"\nCommand-line tool using fire\n\"\"\"\nimport fire\n\nclass Ships(): ![1](assets/1.png)\n    def sail(self):\n        ship_name = 'Your ship'\n        print(f\"{ship_name} is setting sail\")\n\n    def list(self):\n        ships = ['John B', 'Yankee Clipper', 'Pequod']\n        print(f\"Ships: {','.join(ships)}\")\n\ndef sailors(greeting, name): ![2](assets/2.png)\n    message = f'{greeting} {name}'\n    print(message)\n\nclass Cli(): ![3](assets/3.png)\n\n    def __init__(self):\n        self.sailors = sailors\n        self.ships = Ships()\n\nif __name__ == '__main__':\n    fire.Fire(Cli) ![4](assets/4.png)\n```", "```py\n$ ./fire_example.py\n\nNAME\n    fire_example.py\n\nSYNOPSIS\n    fire_example.py GROUP | COMMAND\n\nGROUPS\n    GROUP is one of the following:\n\n     ships\n\nCOMMANDS\n    COMMAND is one of the following:\n\n     sailors\n(END)\n```", "```py\n$ ./fire_example.py ships --help\nINFO: Showing help with the command 'fire_example.py ships -- --help'.\n\nNAME\n    fire_example.py ships\n\nSYNOPSIS\n    fire_example.py ships COMMAND\n\nCOMMANDS\n    COMMAND is one of the following:\n\n     list\n\n     sail\n(END)\n```", "```py\n$ ./fire_example.py sailors --help\nINFO: Showing help with the command 'fire_example.py sailors -- --help'.\n\nNAME\n    fire_example.py sailors\n\nSYNOPSIS\n    fire_example.py sailors GREETING NAME\n\nPOSITIONAL ARGUMENTS\n    GREETING\n    NAME\n\nNOTES\n    You can also use flags syntax for POSITIONAL ARGUMENTS\n(END)\n```", "```py\n$ ./fire_example.py ships sail\nYour ship is setting sail\nchapter3$ ./fire_example.py ships list\nShips: John B,Yankee Clipper,Pequod\nchapter3$ ./fire_example.py sailors Hiya Karl\nHiya Karl\n```", "```py\n$ ./fire_example.py sailors Hiya Karl -- --interactive\nHiya Karl\nFire is starting a Python REPL with the following objects:\nModules: fire\nObjects: Cli, Ships, component, fire_example.py, result, sailors, self, trace\n\nPython 3.7.0 (default, Sep 23 2018, 09:47:03)\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.5.0 -- An enhanced Interactive Python. Type '?' for help.\n ---------------------------------------------------------------------------\nIn [1]: sailors\nOut[1]: <function __main__.sailors(greeting, name)>\n\nIn [2]: sailors('hello', 'fred')\nhello fred\n```", "```py\n#!/usr/bin/env python\nimport fire\nimport pkgutil\nimport importlib\n\ndef find_and_run_plugins(plugin_prefix):\n    plugins = {}\n\n    # Discover and Load Plugins\n    print(f\"Discovering plugins with prefix: {plugin_prefix}\")\n    for _, name, _ in  pkgutil.iter_modules(): ![1](assets/1.png)\n        if name.startswith(plugin_prefix): ![2](assets/2.png)\n            module = importlib.import_module(name) ![3](assets/3.png)\n            plugins[name] = module\n\n    # Run Plugins\n    for name, module in plugins.items():\n        print(f\"Running plugin {name}\")\n        module.run()  ![4](assets/4.png)\n\nif __name__ == '__main__':\n    fire.Fire()\n```", "```py\ndef run():\n    print(\"Running plugin A\")\n```", "```py\ndef run():\n    print(\"Running plugin B\")\n```", "```py\n$ ./simple_plugins.py find_and_run_plugins foo_plugin\nRunning plugin foo_plugin_a\nRunning plugin A\nRunning plugin foo_plugin_b\nRunning plugin B\n```", "```py\ndef timing(f):\n    @wraps(f)\n    def wrap(*args, **kwargs):\n        ts = time()\n        result = f(*args, **kwargs)\n        te = time()\n        print(f\"fun: {f.__name__}, args: [{args}, {kwargs}] took: {te-ts} sec\")\n        return result\n    return wrap\n```", "```py\n@timing\n@numba.jit(nopython=True)\ndef expmean_jit(rea):\n    \"\"\"Perform multiple mean calculations\"\"\"\n\n    val = rea.mean() ** 2\n    return val\n```", "```py\n$ python nuclearcli.py jit-test\nRunning NO JIT\nfunc:'expmean' args:[(array([[1.0000e+00, 4.2080e+05, 2350e+05, ...,\n                                  1.0543e+06, 1.0485e+06, 1.0444e+06],\n       [2.0000e+00, 5.4240e+05, 5.4670e+05, ...,\n              1.5158e+06, 1.5199e+06, 1.5253e+06],\n       [3.0000e+00, 7.0900e+04, 7.1200e+04, ...,\n              1.1380e+05, 1.1350e+05, 1.1330e+05],\n       ...,\n       [1.5277e+04, 9.8900e+04, 9.8100e+04, ...,\n              2.1980e+05, 2.2000e+05, 2.2040e+05],\n       [1.5280e+04, 8.6700e+04, 8.7500e+04, ...,\n              1.9070e+05, 1.9230e+05, 1.9360e+05],\n       [1.5281e+04, 2.5350e+05, 2.5400e+05, ..., 7.8360e+05, 7.7950e+05,\n        7.7420e+05]], dtype=float32),), {}] took: 0.0007 sec\n$ python nuclearcli.py jit-test --jit\nRunning with JIT\nfunc:'expmean_jit' args:[(array([[1.0000e+00, 4.2080e+05, 4.2350e+05, ...,\n                                     0543e+06, 1.0485e+06, 1.0444e+06],\n       [2.0000e+00, 5.4240e+05, 5.4670e+05, ..., 1.5158e+06, 1.5199e+06,\n        1.5253e+06],\n       [3.0000e+00, 7.0900e+04, 7.1200e+04, ..., 1.1380e+05, 1.1350e+05,\n        1.1330e+05],\n       ...,\n       [1.5277e+04, 9.8900e+04, 9.8100e+04, ..., 2.1980e+05, 2.2000e+05,\n        2.2040e+05],\n       [1.5280e+04, 8.6700e+04, 8.7500e+04, ..., 1.9070e+05, 1.9230e+05,\n        1.9360e+05],\n       [1.5281e+04, 2.5350e+05, 2.5400e+05, ..., 7.8360e+05, 7.7950e+05,\n@click.option('--jit/--no-jit', default=False)\n        7.7420e+05]], dtype=float32),), {}] took: 0.2180 sec\n```", "```py\n@cli.command()\ndef jit_test(jit):\n    rea = real_estate_array()\n    if jit:\n        click.echo(click.style('Running with JIT', fg='green'))\n        expmean_jit(rea)\n    else:\n        click.echo(click.style('Running NO JIT', fg='red'))\n        expmean(rea)\n```", "```py\nclick.echo(click.style('Running with JIT', fg='green'))\n```", "```py\n@cli.command()\ndef cuda_operation():\n    \"\"\"Performs Vectorized Operations on GPU\"\"\"\n\n    x = real_estate_array()\n    y = real_estate_array()\n\n    print(\"Moving calculations to GPU memory\")\n    x_device = cuda.to_device(x)\n    y_device = cuda.to_device(y)\n    out_device = cuda.device_array(\n        shape=(x_device.shape[0],x_device.shape[1]), dtype=np.float32)\n    print(x_device)\n    print(x_device.shape)\n    print(x_device.dtype)\n\n    print(\"Calculating on GPU\")\n    add_ufunc(x_device,y_device, out=out_device)\n\n    out_host = out_device.copy_to_host()\n    print(f\"Calculations from GPU {out_host}\")\n```", "```py\n$ python nuclearcli.py cuda-operation\nMoving calculations to GPU memory\n<numba.cuda.cudadrv.devicearray.DeviceNDArray object at 0x7f01bf6ccac8>\n(10015, 259)\nfloat32\nCalculating on GPU\nCalculcations from GPU [\n [2.0000e+00 8.4160e+05 8.4700e+05 ... 2.1086e+06 2.0970e+06 2.0888e+06]\n [4.0000e+00 1.0848e+06 1.0934e+06 ... 3.0316e+06 3.0398e+06 3.0506e+06]\n [6.0000e+00 1.4180e+05 1.4240e+05 ... 2.2760e+05 2.2700e+05 2.2660e+05]\n ...\n [3.0554e+04 1.9780e+05 1.9620e+05 ... 4.3960e+05 4.4000e+05 4.4080e+05]\n [3.0560e+04 1.7340e+05 1.7500e+05 ... 3.8140e+05 3.8460e+05 3.8720e+05]\n [3.0562e+04 5.0700e+05 5.0800e+05 ... 1.5672e+06 1.5590e+06 1.5484e+06]\n]\n```", "```py\n@timing\n@numba.jit(parallel=True)\ndef add_sum_threaded(rea):\n    \"\"\"Use all the cores\"\"\"\n\n    x,_ = rea.shape\n    total = 0\n    for _ in numba.prange(x):\n        total += rea.sum()\n        print(total)\n\n@timing\ndef add_sum(rea):\n    \"\"\"traditional for loop\"\"\"\n\n    x,_ = rea.shape\n    total = 0\n    for _ in numba.prange(x):\n        total += rea.sum()\n        print(total)\n\n@cli.command()\n@click.option('--threads/--no-jit', default=False)\ndef thread_test(threads):\n    rea = real_estate_array()\n    if threads:\n        click.echo(click.style('Running with multicore threads', fg='green'))\n        add_sum_threaded(rea)\n    else:\n        click.echo(click.style('Running NO THREADS', fg='red'))\n        add_sum(rea)\n```", "```py\n$ python nuclearcli.py thread-test\n$ python nuclearcli.py thread-test --threads\n```", "```py\ndef kmeans_cluster_housing(clusters=3):\n    \"\"\"Kmeans cluster a dataframe\"\"\"\n    url = \"https://raw.githubusercontent.com/noahgift/\\\n socialpowernba/master/data/nba_2017_att_val_elo_win_housing.csv\"\n    val_housing_win_df =pd.read_csv(url)\n    numerical_df =(\n        val_housing_win_df.loc[:,[\"TOTAL_ATTENDANCE_MILLIONS\", \"ELO\",\n        \"VALUE_MILLIONS\", \"MEDIAN_HOME_PRICE_COUNTY_MILLIONS\"]]\n    )\n    #scale data\n    scaler = MinMaxScaler()\n    scaler.fit(numerical_df)\n    scaler.transform(numerical_df)\n    #cluster data\n    k_means = KMeans(n_clusters=clusters)\n    kmeans = k_means.fit(scaler.transform(numerical_df))\n    val_housing_win_df['cluster'] = kmeans.labels_\n    return val_housing_win_df\n```", "```py\n@cli.command()\n@click.option(\"--num\", default=3, help=\"number of clusters\")\ndef cluster(num):\n    df = kmeans_cluster_housing(clusters=num)\n    click.echo(\"Clustered DataFrame\")\n    click.echo(df.head())\n```", "```py\n$ python -W nuclearcli.py cluster\n```", "```py\nClustered DataFrame\n               TEAM  GMS    ...         COUNTY   cluster\n0     Chicago Bulls   41    ...           Cook         0\n1  Dallas Mavericks   41    ...         Dallas         0\n2  Sacramento Kings   41    ...     Sacremento         1\n3        Miami Heat   41    ...     Miami-Dade         0\n4   Toronto Raptors   41    ...    York-County         0\n\n[5 rows x 12 columns]\n```", "```py\n$ python -W nuclearcli.py cluster --num 2\n```", "```py\nClustered DataFrame\n               TEAM  GMS     ...         COUNTY   cluster\n0     Chicago Bulls   41     ...           Cook         1\n1  Dallas Mavericks   41     ...         Dallas         1\n2  Sacramento Kings   41     ...     Sacremento         0\n3        Miami Heat   41     ...     Miami-Dade         1\n4   Toronto Raptors   41     ...    York-County         1\n\n[5 rows x 12 columns]\n```"]