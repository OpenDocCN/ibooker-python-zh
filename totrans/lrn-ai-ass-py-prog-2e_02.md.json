["```py\n# write a function that returns the larger of two numbers\n# input is two numbers\n# output is the larger of the two numbers\ndef larger(num1, num2):          #1\n    if num1 > num2:        #2\n        return num1        #2\n    else:                  #2\n        return num2        #2\n```", "```py\ndef larger(num1, num2): \n \"\"\" **#1\n **num1 and num2 are two numbers.** #1\n #1\n **Return the larger of the two numbers.** #1\n **\"\"\"** #1\n    if num1 > num2: #1\n        return num1\n    else:\n        return num2**\n```", "```py\n# call the larger function with the values 3 and 5\n# store the result in a variable called result\n# then print result\nresult = larger(3, 5)      #1\nprint(result)\n```", "```py\nlarger(3, 5)\n```", "```py\nfunction_name(argument1, argument2, argument3,... )\n```", "```py\ndef money_made(num_shares, purchase_share_price, current_share_price):\n```", "```py\ndef money_made(num_shares, purchase_share_price, current_share_price):\n \"\"\"\n num_shares is the number of shares of a stock that we purchased.\n purchase_share_price is the price of each of those shares.\n current_share_price is the current share price.\n\n Return the amount of money we have earned on the stock.\n \"\"\"\n```", "```py\n    return num_shares * (current_share_price - purchase_share_price)\n```", "```py\n>>> money_made(10, 15, 17)\n```", "```py\n20\n```", "```py\n>>> money_made(10, 17, 15)\n-20\n```", "```py\n>>> money_made(10, 15, 15)  \n0\n```", "```py\n    price_difference = current_share_price - purchase_share_price\n    return num_shares * price_difference\n```", "```py\ndef is_strong_password(password):\n \"\"\"\n A strong password is not the word 'password'\n and is not the word 'qwerty'.\n Return True if the password is a strong password, False if not.\n \"\"\"\n```", "```py\n    return password != 'password' and password != 'qwerty'\n```", "```py\n>>> is_strong_password('password')        \nFalse      \n\n>>> is_strong_password('qwerty')          \nFalse\n```", "```py\n>>> is_strong_password('N3w Y0rk J375')    \nTrue\n```", "```py\n>>> is_strong_password('Leo') \nTrue\n```", "```py\ndef is_strong_password(password):\n \"\"\"\n A strong password has at least one uppercase character,\n at least one number, and at least one special symbol.\n\n Return True if the password is a strong password, False if not.\n \"\"\"\n    return any(char.isupper() for char in password) and \\\n             any(char.isdigit() for char in password) and \\\n             any(not char.isalnum() for char in password)\n```", "```py\n>>> is_strong_password('Leo')\nFalse\n\n>>> is_strong_password('N3w Y0rk J37$')\nTrue\n\n>>> is_strong_password('N3w Y0rk J375')\nTrue\n```", "```py\n    num_upper = 0\n    num_num = 0\n    num_special = 0\n    for char in password:\n        if char.isupper():\n            num_upper += 1\n        elif char.isnumeric():\n            num_num += 1\n        elif char in '!@#$%^&*':     #1\n            num_special += 1\n    if num_upper >= 1 and num_num >= 1 and num_special >= 1:\n        return True\n    else:\n        return False\n```", "```py\ndef is_strong_password(password):\n \"\"\"\n A strong password has at least one uppercase character,\n at least one number, and at least one punctuation.\n\n Return True if the password is a strong password, False if not.\n \"\"\"\n    return any(char.isupper() for char in password) and \\\n           any(char.isdigit() for char in password) and \\\n           any(char in string.punctuation for char in password)\n```", "```py\n>>> is_strong_password('Leo')\nFalse\n\n>>> is_strong_password('N3w Y0rk J375')\n Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"ch2.py\", line 44, in is_strong_password\n    any(char in string.punctuation for char in password)\n  File \"ch2.py\", line 44, in <genexpr>\n    any(char in string.punctuation for char in password)\n                ^^^^^^\nNameError: name 'string' is not defined\n```", "```py\nimport string\n\ndef is_strong_password(password):\n \"\"\"\n A strong password has at least one uppercase character,\n at least one number, and at least one punctuation.\n\n Return True if the password is a strong password, False if not.\n \"\"\"\n    return any(char.isupper() for char in password) and \\\n           any(char.isdigit() for char in password) and \\\n           any(char in string.punctuation for char in password)\n```", "```py\n>>> is_strong_password('Leo')\nFalse\n\n>>> is_strong_password('N3w Y0rk J375')\nFalse\n\n>>> is_strong_password('N3w Y0rk J375$')\nTrue\n```", "```py\ndef get_strong_password():\n \"\"\"\n Keep asking the user for a password until itâ€™s a strong \n password, and return that strong password.\n \"\"\"\n```", "```py\n    password = input(\"Enter a strong password: \")\n    while not is_strong_password(password):            #1\n        password = input(\"Enter a strong password: \")\n    return password\n```", "```py\n>>> get_strong_password()\nEnter a strong password: Leo\nEnter a strong password: N3w Y0rk J375\nEnter a strong password: N3w Y0rk J375$\n'N3w Y0rk J375$'\n```", "```py\ndef num_points(word): \n \"\"\" \n Each letter is worth the following points: \n a, e, i, o, u, l, n, s, t, r: 1 point \n d, g: 2 points \n b, c, m, p: 3 points \n f, h, v, w, y: 4 points \n k: 5 points \n j, x: 8 points \n q, z: 10 points \n\n word is a word consisting of lowercase characters. \n Return the sum of points for each letter in word. \n \"\"\"\n```", "```py\n    points = 0\n    for char in word:\n        if char in \"aeioulnstr\":\n            points += 1\n        elif char in \"dg\":\n            points += 2\n        elif char in \"bcmp\":\n            points += 3\n        elif char in \"fhvwy\":\n            points += 4\n        elif char == \"k\":\n            points += 5\n        elif char in \"jx\":\n            points += 8\n        elif char in \"qz\":\n            points += 10\n    return points\n```", "```py\n>>> num_points('zap')\n14\n```", "```py\n>>> num_points('pack')\n12\n\n>>> num_points('quack') \n20\n```", "```py\n    points = {'a': 1, 'e': 1, 'i': 1, 'o': 1, 'u': 1, 'l': 1, \n              'n': 1, 's': 1, 't': 1, 'r': 1,\n              'd': 2, 'g': 2,\n              'b': 3, 'c': 3, 'm': 3, 'p': 3,\n              'f': 4, 'h': 4, 'v': 4, 'w': 4, 'y': 4,\n              'k': 5,\n              'j': 8, 'x': 8,\n              'q': 10, 'z': 10}\n    return sum(points[char] for char in word)\n```", "```py\ndef best_word(word_list):\n \"\"\"\n word_list is a list of words.\n\n Return the word worth the most points.\n \"\"\"\n```", "```py\n    best_word = \"\"\n    best_points = 0\n    for word in word_list:\n        points = num_points(word)\n        if points > best_points:\n            best_word = word\n            best_points = points\n    return best_word\n```", "```py\n>>> best_word('zap', 'pack', 'quack')\n```", "```py\n>>> best_word(['zap', 'pack', 'quack'])  \n'quack'\n```", "```py\n>>> best_word(['zap'])\n'zap'\n```", "```py\ndef funct1():\n    print(\"there\")\n    funct2()\n    print(\"friend\")\n    funct3()\n    print(\"\")\n\ndef funct2():\n    print(\"my\")\n\ndef funct3():\n    print(\".\")\n\ndef funct4():\n    print(\"well\")\nprint(\"Hi\")      #1\nfunct1()\nprint(\"I'm\")\nfunct4()\nfunct3()\nprint(\"\")\nprint(\"Bye.\")\n```", "```py\nHi\nthere\nmy\nfriend\n.\n\nI'm\nwell\n.\n\nBye.\n```", "```py\n*Prompt: Write a Python function to convert temperature between Fahrenheit and Celsius.*\n\ndef convert_temperature(temp):\n    celsius = (temp - 32) * 5.0/9.0\n    return celsius\n```"]