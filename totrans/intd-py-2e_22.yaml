- en: Chapter 20\. Py Art
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, art is art, isn’t it? Still, on the other hand, water is water! And east
    is east and west is west, and if you take cranberries and stew them like applesauce,
    they taste much more like prunes than rhubarb does.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Groucho Marx
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This chapter and the next two discuss the application of Python to some common
    human endeavors: art, business, and science. If you’re interested in any of these
    areas, you may get some helpful ideas or the urge to try something new.'
  prefs: []
  type: TYPE_NORMAL
- en: 2-D Graphics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All computer languages have been applied to computer graphics to some degree.
    Many of the heavy-duty platforms in this chapter were written in C or C++ for
    speed, but added Python libraries for productivity. Let’s begin by looking at
    some 2-D imaging libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Standard Library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Only a few image-related modules are in the standard library:'
  prefs: []
  type: TYPE_NORMAL
- en: '`imghdr`'
  prefs: []
  type: TYPE_NORMAL
- en: Detects the file type of some image files.
  prefs: []
  type: TYPE_NORMAL
- en: '`colorsys`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Converts colors between various systems: RGB, YIQ, HSV, and HLS.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you downloaded the O’Reilly logo to a local file called *oreilly.png*, you
    could run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Another standard library is [`turtle`](https://oreil.ly/b9vEz)—“Turtle graphics,”
    which is sometimes used to teach programming to young people. You can run a demo
    with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 20-1](#turtledemo_image) shows a screenshot of its *rosette* example.'
  prefs: []
  type: TYPE_NORMAL
- en: '![inp2 2001](assets/inp2_2001.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-1\. Image from turtledemo
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: To do anything serious with graphics in Python, we need to get some third-party
    packages. Let’s see what’s out there.
  prefs: []
  type: TYPE_NORMAL
- en: PIL and Pillow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For many years, the [Python Image Library](http://bit.ly/py-image) (PIL), although
    not in the standard library, has been Python’s best-known 2-D image processing
    library. It predated installers such as `pip`, so a “friendly fork” called [Pillow](http://pillow.readthedocs.org)
    was created. Pillow’s imaging code is backward-compatible with PIL, and its documentation
    is good, so let’s use it here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installation is simple; just type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you’ve already installed operating system packages such as `libjpeg`, `libfreetype`,
    and `zlib`, they’ll be detected and used by Pillow. See the [installation page](http://bit.ly/pillow-install)
    for details on this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open an image file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Although the package is called `Pillow`, you import it as `PIL` to make it compatible
    with the older `PIL`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To display the image on your screen using the `Image` object’s `show()` method,
    you’ll first need to install the ImageMagick package described in the next section,
    and then try this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The image displayed in [Figure 20-2](#tarsier_1) opens in another window. (This
    screenshot was captured on a Mac, where the `show()` function used the Preview
    application. Your window’s appearance might vary.)
  prefs: []
  type: TYPE_NORMAL
- en: '![inp2 2002](assets/inp2_2002.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-2\. Image displayed with the Python Image Library
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Let’s crop the image in memory, save the result as a new object called `img2`,
    and display it. Images are always measured by horizontal (x) values and vertical
    (y) values, with one corner of the image known as the *origin* and arbitrarily
    assigned an x and y of 0. In this library, the origin (0, 0) is at the upper left
    of the image, x increases to the right, and y increases as you move down. We want
    to give the values of left x (55), top y (70), right x (85), and bottom y (100)
    to the `crop()` method, so pass it a tuple with those values in that order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The results are shown in [Figure 20-3](#tarsier_2).
  prefs: []
  type: TYPE_NORMAL
- en: '![inp2 2003](assets/inp2_2003.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-3\. The cropped image
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Save an image file with the `save` method. It takes a filename and an optional
    type. If the filename has a suffix, the library uses that to determine the type.
    But you can also specify the type explicitly. To save our cropped image as a GIF
    file, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: For our last example, let’s “improve” our little mascot. First download copies
    of our original critter, shown in [Figure 20-4](#image2004).
  prefs: []
  type: TYPE_NORMAL
- en: '![inp2 2004](assets/inp2_2004.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-4\. Beloved ur-critter
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: He has a sort of scruffy five o’clock shadow, so let’s get an image to improve
    his, um, image; see [Figure 20-5](#image2005).
  prefs: []
  type: TYPE_NORMAL
- en: '![inp2 2005](assets/inp2_2005.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-5\. Alien technology
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Let’s put them together, with some *alpha* channel magic to make the overlap
    semi-transparent, demonstrated in [Example 20-1](#ex2001).
  prefs: []
  type: TYPE_NORMAL
- en: Example 20-1\. ch20_critter.py
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 20-6](#tarsier_3) presents his makeover.'
  prefs: []
  type: TYPE_NORMAL
- en: '![inp2 2006](assets/inp2_2006.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-6\. Our new, dapper mascot
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: ImageMagick
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[ImageMagick](http://www.imagemagick.org) is a suite of programs to convert,
    modify, and display 2-D bitmap images. It’s been around for more than 20 years.
    Various Python libraries have connected to the ImageMagick C library. A recent
    one that supports Python 3 is [wand](http://docs.wand-py.org). To install it,
    type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can do many of the same things with `wand` as you can with Pillow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As with Pillow, this displays the image on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`wand` includes rotation, resizing, text and line drawing, format conversion,
    and other features that you can also find in Pillow. Both have good APIs and documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: 3-D Graphics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some basic Python packages include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[VPython](https://vpython.org) has [examples](https://oreil.ly/J42t0) that
    can run in your browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[pi3d](https://pi3d.github.io) runs on the Raspberry Pi, Windows, Linux, and
    Android.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Open3D](http://www.open3d.org/docs) is a full-featured 3-D library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3-D Animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Watch the long end-credits for almost any contemporary movie, and you’ll see
    mass quantities of people doing special effects and animation. Most of the big
    studios—Walt Disney Animation, ILM, Weta, Dreamworks, Pixar—hire people with Python
    experience. Do a web search for “python animation jobs” to see what’s available
    now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some Python 3-D packages are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Panda3D](http://www.panda3d.org)'
  prefs: []
  type: TYPE_NORMAL
- en: It’s open source and free to use, even for commercial applications. You can
    download a version from [the Panda3D website](http://bit.ly/dl-panda).
  prefs: []
  type: TYPE_NORMAL
- en: '[VPython](https://vpython.org)'
  prefs: []
  type: TYPE_NORMAL
- en: Comes with many [examples](https://oreil.ly/J42t0).
  prefs: []
  type: TYPE_NORMAL
- en: '[Blender](http://www.blender.org)'
  prefs: []
  type: TYPE_NORMAL
- en: Blender is a free 3-D animation and game creator. When you download and [install](http://www.blender.org/download)
    it, it comes bundled with its own copy of Python 3.
  prefs: []
  type: TYPE_NORMAL
- en: '[Maya](https://oreil.ly/PhWn-)'
  prefs: []
  type: TYPE_NORMAL
- en: This is a commercial 3-D animation and graphic system. It also comes bundled
    with a version of Python, currently 2.7. Chad Vernon has written a free downloadable
    book, [*Python Scripting for Maya Artists*](http://bit.ly/py-maya). If you search
    for Python and Maya on the web, you’ll find many other resources, both free and
    commercial, including videos.
  prefs: []
  type: TYPE_NORMAL
- en: '[Houdini](https://www.sidefx.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Houdini is commercial, although you can download a free version called Apprentice.
    Like the other animation packages, it comes with a [Python binding](https://oreil.ly/L4C7r).
  prefs: []
  type: TYPE_NORMAL
- en: Graphical User Interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The name includes the word graphic, but graphical user interfaces (GUIs) concentrate
    more on the user interface: widgets to present data, input methods, menus, buttons,
    and windows to frame everything.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [GUI programming](http://bit.ly/gui-program) wiki page and [FAQ](http://bit.ly/gui-faq)
    list many Python-powered GUIs. Let’s begin with the only one that’s built in to
    the standard library: [Tkinter](https://wiki.python.org/moin/TkInter). It’s plain,
    but it works on all platforms to produce native-looking windows and widgets.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a teeny, tiny Tkinter program to display our favorite googly-eyed mascot
    in a window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Notice that it used some modules from PIL/Pillow. You should see the O’Reilly
    logo again, as shown in [Figure 20-7](#tarsier_4).
  prefs: []
  type: TYPE_NORMAL
- en: '![inp2 2007](assets/inp2_2007.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-7\. Image displayed with Tkinter
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: To make the window go away, click its close button, or leave your Python interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about Tkinter at the [tkinter wiki](https://wiki.python.org/moin/TkInter).
    Now for the GUIs that are not in the standard library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Qt](http://qt-project.org)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a professional GUI and application toolkit, originated about 20 years
    ago by Trolltech in Norway. It’s been used to help build applications such as
    Google Earth, Maya, and Skype. It was also used as the base for KDE, a Linux desktop.
    There are two main Python libraries for Qt: [PySide](http://qt-project.org/wiki/PySide)
    is free (LGPL license), and [PyQt](http://bit.ly/pyqt-info) is licensed either
    with the GPL or commercially. The Qt folks see these [differences](http://bit.ly/qt-diff).
    Download PySide from [PyPI](https://pypi.python.org/pypi/PySide) or [Qt](http://qt-project.org/wiki/Get-PySide)
    and read the [tutorial](http://qt-project.org/wiki/PySide_Tutorials). You can
    download Qt for [free online](http://bit.ly/qt-dl).'
  prefs: []
  type: TYPE_NORMAL
- en: '[GTK+](http://www.gtk.org)'
  prefs: []
  type: TYPE_NORMAL
- en: GTK+ is a competitor of Qt, and it, too, has been used to create many applications,
    including GIMP and the Gnome desktop for Linux. The Python binding is [PyGTK](http://www.pygtk.org).
    To download the code, go to the [PyGTK site](http://bit.ly/pygtk-dl), where you
    can also read the [documents](http://bit.ly/py-gtk-docs).
  prefs: []
  type: TYPE_NORMAL
- en: '[WxPython](http://www.wxpython.org)'
  prefs: []
  type: TYPE_NORMAL
- en: This is the Python binding for [WxWidgets](http://www.wxwidgets.org). It’s another
    hefty package, free to download [online](http://wxpython.org/download.php).
  prefs: []
  type: TYPE_NORMAL
- en: '[Kivy](http://kivy.org)'
  prefs: []
  type: TYPE_NORMAL
- en: Kivy is a free modern library for building multimedia user interfaces portably
    across platforms—desktop (Windows, macOS, Linux), and mobile (Android, iOS). It
    includes multitouch support. You can download for all the platforms on [the Kivy
    website](http://kivy.org/#download). Kivy includes application development [tutorials](http://bit.ly/kivy-intro).
  prefs: []
  type: TYPE_NORMAL
- en: '[PySimpleGUI](https://pysimplegui.readthedocs.io)'
  prefs: []
  type: TYPE_NORMAL
- en: Write native or web-based GUIs with one library. PySimpleGUI is a wrapper for
    some of the other GUIs mentioned in this section, including Tk, Kivy, and Qt.
  prefs: []
  type: TYPE_NORMAL
- en: The web
  prefs: []
  type: TYPE_NORMAL
- en: Frameworks such as Qt use native components, but some others use the web. After
    all, the web is a universal GUI, and it has graphics (SVG), text (HTML), and even
    multimedia now (in HTML5). You can build web applications with any combination
    of frontend (browser-based) and backend (web server) tools. A *thin client* lets
    the backend do most of the work. If the frontend dominates, it’s a *thick*, or
    *fat*, or *rich* client; the last adjective sounds more flattering. It’s common
    for the sides to communicate with RESTful APIs, Ajax, and JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Plots, Graphs, and Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python has become a leading solution for plots, graphs, and data visualization.
    It’s especially popular in science, which is covered in [Chapter 22](ch22.html#ch_science).
    Useful overviews, with examples, include the official Python [wiki](https://oreil.ly/Wdter)
    and the [Python Graph Gallery](https://python-graph-gallery.com).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at the most popular ones. In the next chapter, you’ll see some of
    these again, but being used to create maps.
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The [Matplotlib](http://matplotlib.org) 2-D plotting library can be installed
    by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The examples in the [gallery](http://matplotlib.org/gallery.html) show the breadth
    of Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s first try the same image display application (with results shown in [Figure 20-8](#intro_art_matplotlib)),
    just to see how the code and presentation look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![inp2 2008](assets/inp2_2008.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-8\. Image displayed with Matplotlib
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The real strength of Matplotlib is in *plot*ting, which is, after all, its middle
    name. Let’s generate two lists of 20 integers, one smoothly increasing from 1
    to 20, and another like the first, but with slight wobbles now and then ([Example 20-2](#ex2002)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 20-2\. ch20_matplotlib.py
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: If you run this program, you’ll see something like what’s shown in [Figure 20-9](#matplotlib_plot)
    (not exactly, because the `randint()` calls make random wiggles).
  prefs: []
  type: TYPE_NORMAL
- en: '![inp2 2009](assets/inp2_2009.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-9\. Basic Matplotlib scatter and line plots
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This example showed a scatterplot, a line plot, and a line plot with data markers.
    All of the styles and colors used Matplotlib defaults, but they can be customized
    very extensively. For details, see the Matplotlib [site](https://matplotlib.org)
    or an overview like [Python Plotting With Matplotlib (Guide)](https://oreil.ly/T_xdT).
  prefs: []
  type: TYPE_NORMAL
- en: You can see more of Matplotlib in [Chapter 22](ch22.html#ch_science); it has
    strong ties to NumPy and other scientific applications.
  prefs: []
  type: TYPE_NORMAL
- en: Seaborn
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Seaborn](https://seaborn.pydata.org) is a data visualization library ([Figure 20-10](#seaborn_plot)),
    built on Matplotlib and with connections to Pandas. The usual installation mantra
    (`pip install seaborn`) works.'
  prefs: []
  type: TYPE_NORMAL
- en: '![inp2 2010](assets/inp2_2010.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-10\. Basic Seaborn scatter plot and linear regression
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The code in [Example 20-3](#seaborn_example) is based on a Seaborn [example](https://oreil.ly/eBFGi);
    it accesses test data on restaurant tipping and plots tips versus total bill amounts
    with a fitted linear regression line.
  prefs: []
  type: TYPE_NORMAL
- en: Example 20-3\. ch20_seaborn.py
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you run the preceding code with the standard Python interpreter, you need
    that initial import line (`import matplotlib.pyplot as plt`) and final line (`plt.show()`),
    as shown in [Example 20-3](#seaborn_example), or else the plot just won’t display.
    If you’re using Jupyter, Matplotlib is built in and you don’t need to type them.
    Remember this when you read code examples of Python mapping tools.
  prefs: []
  type: TYPE_NORMAL
- en: Like Matplotlib, Seaborn has a vast number of options for data handling and
    display.
  prefs: []
  type: TYPE_NORMAL
- en: Bokeh
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the old web days, developers would generate graphics on the server and give
    the web browser some URL to access them. More recently, JavaScript has gained
    performance and client-side graphics generation tools like D3. A page or two ago,
    I mentioned the possibility of using Python as part of a frontend-backend architecture
    for graphics and GUIs. A new tool called [Bokeh](http://bokeh.pydata.org) combines
    the strengths of Python (large data sets, ease of use) and JavaScript (interactivity,
    less graphics latency). Its emphasis is quick visualization of large data sets.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’ve already installed its prerequisites (NumPy, Pandas, and Redis), you
    can install Bokeh by typing this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: (You can see NumPy and Pandas in action in [Chapter 22](ch22.html#ch_science).)
  prefs: []
  type: TYPE_NORMAL
- en: Or, install everything at once from the Bokeh [website](https://oreil.ly/1Fy-L).
    Although Matplotlib runs on the server, Bokeh runs mainly in the browser and can
    take advantage of recent advances on the client side. Click any image in the [gallery](https://oreil.ly/DWN-d)
    for an interactive view of the display and its Python code.
  prefs: []
  type: TYPE_NORMAL
- en: Games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Python is such a good game development platform that people have written books
    about it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Invent Your Own Computer Games with Python*](http://inventwithpython.com)
    by Al Sweigart'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*The Python Game Book*](http://thepythongamebook.com) by Horst Jens (a docuwiki
    book)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s a general discussion at the [Python wiki](https://wiki.python.org/moin/PythonGames)
    with even more links.
  prefs: []
  type: TYPE_NORMAL
- en: The best known Python game platform is probably [pygame](http://pygame.org).
    You can download an executable installer for your platform from [the Pygame website](http://pygame.org/download.shtml),
    and read a line-by-line example of a [“pummel the chimp” game](https://oreil.ly/l-swp).
  prefs: []
  type: TYPE_NORMAL
- en: Audio and Music
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I sought the serif
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: But that did not suit Claude Debussy.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Deservedly Anonymous
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What about sound, and music, and cats singing “Jingle Bells”? Well, as Meatloaf
    says, two out of three ain’t bad.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s hard to represent sound in a printed book, so here are some up-to-date
    links to Python packages for sound and music, but Google has many more:'
  prefs: []
  type: TYPE_NORMAL
- en: Standard library [audio](http://docs.python.org/3/library/mm.html) modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party [audio](https://wiki.python.org/moin/Audio) tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dozens of third-party [music](https://wiki.python.org/moin/PythonInMusic) applications:
    graphic and CLI players, converters, notation, analysis, playlists, MIDI, and
    more'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, how about some online sources of music? You’ve seen code examples
    throughout this book that access the Internet Archive. Here are links to some
    of its audio archives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Audio recordings](https://archive.org/details/audio) (>5 million)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Live music](https://archive.org/details/etree) (>200,000)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Live Grateful Dead shows](https://archive.org/details/GratefulDead) (>13,000)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coming Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Act busy! It’s Python in business.
  prefs: []
  type: TYPE_NORMAL
- en: Things to Do
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '20.1 Install `matplotlib`. Draw a scatter diagram of these (x, y) pairs: `(
    (0, 0), (3, 5), (6, 2), (9, 8), (14, 10) )`.'
  prefs: []
  type: TYPE_NORMAL
- en: 20.2 Draw a line graph of the same data.
  prefs: []
  type: TYPE_NORMAL
- en: 20.3 Draw a plot (a line graph with markers) of the same data.
  prefs: []
  type: TYPE_NORMAL
