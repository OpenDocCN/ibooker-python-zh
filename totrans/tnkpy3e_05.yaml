- en: 3\. Functions#
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://allendowney.github.io/ThinkPython/chap03.html](https://allendowney.github.io/ThinkPython/chap03.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the previous chapter we used several functions provided by Python, like `int`
    and `float`, and a few provided by the `math` module, like `sqrt` and `pow`. In
    this chapter, you will learn how to create your own functions and run them. And
    we’ll see how one function can call another. As examples, we’ll display lyrics
    from Monty Python songs. These silly examples demonstrate an important feature
    – the ability to write your own functions is the foundation of programming.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter also introduces a new statement, the `for` loop, which is used
    to repeat a computation.
  prefs: []
  type: TYPE_NORMAL
- en: 3.1\. Defining new functions[#](#defining-new-functions "Link to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A **function definition** specifies the name of a new function and the sequence
    of statements that run when the function is called. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`def` is a keyword that indicates that this is a function definition. The name
    of the function is `print_lyrics`. Anything that’s a legal variable name is also
    a legal function name.'
  prefs: []
  type: TYPE_NORMAL
- en: The empty parentheses after the name indicate that this function doesn’t take
    any arguments.
  prefs: []
  type: TYPE_NORMAL
- en: The first line of the function definition is called the **header** – the rest
    is called the **body**. The header has to end with a colon and the body has to
    be indented. By convention, indentation is always four spaces. The body of this
    function is two print statements; in general, the body of a function can contain
    any number of statements of any kind.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a function creates a **function object**, which we can display like
    this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The output indicates that `print_lyrics` is a function that takes no arguments.
    `__main__` is the name of the module that contains `print_lyrics`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve defined a function, we can call it the same way we call built-in
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When the function runs, it executes the statements in the body, which display
    the first two lines of “The Lumberjack Song”.
  prefs: []
  type: TYPE_NORMAL
- en: 3.2\. Parameters[#](#parameters "Link to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some of the functions we have seen require arguments; for example, when you
    call `abs` you pass a number as an argument. Some functions take more than one
    argument; for example, `math.pow` takes two, the base and the exponent.
  prefs: []
  type: TYPE_NORMAL
- en: Here is a definition for a function that takes an argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The variable name in parentheses is a **parameter**. When the function is called,
    the value of the argument is assigned to the parameter. For example, we can call
    `print_twice` like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Running this function has the same effect as assigning the argument to the parameter
    and then executing the body of the function, like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You can also use a variable as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the value of `line` gets assigned to the parameter `string`.
  prefs: []
  type: TYPE_NORMAL
- en: 3.3\. Calling functions[#](#calling-functions "Link to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have defined a function, you can use it inside another function. To
    demonstrate, we’ll write functions that print the lyrics of “The Spam Song” ([https://www.songfacts.com/lyrics/monty-python/the-spam-song](https://www.songfacts.com/lyrics/monty-python/the-spam-song)).
  prefs: []
  type: TYPE_NORMAL
- en: Spam, Spam, Spam, Spam,
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Spam, Spam, Spam, Spam,
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Spam, Spam,
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (Lovely Spam, Wonderful Spam!)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Spam, Spam,
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We’ll start with the following function, which takes two parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We can use this function to print the first line of the song, like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: To display the first two lines, we can define a new function that uses `repeat`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: And then call it like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: To display the last three lines, we can define another function, which also
    uses `repeat`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we can bring it all together with one function that prints the whole
    verse.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: When we run `print_verse`, it calls `first_two_lines`, which calls `repeat`,
    which calls `print`. That’s a lot of functions.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, we could have done the same thing with fewer functions, but the point
    of this example is to show how functions can work together.
  prefs: []
  type: TYPE_NORMAL
- en: 3.4\. Repetition[#](#repetition "Link to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we want to display more than one verse, we can use a `for` statement. Here’s
    a simple example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The first line is a header that ends with a colon. The second line is the body,
    which has to be indented.
  prefs: []
  type: TYPE_NORMAL
- en: The header starts with the keyword `for`, a new variable named `i`, and another
    keyword, `in`. It uses the `range` function to create a sequence of two values,
    which are `0` and `1`. In Python, when we start counting, we usually start from
    `0`.
  prefs: []
  type: TYPE_NORMAL
- en: When the `for` statement runs, it assigns the first value from `range` to `i`
    and then runs the `print` function in the body, which displays `0`.
  prefs: []
  type: TYPE_NORMAL
- en: When it gets to the end of the body, it loops back around to the header, which
    is why this statement is called a **loop**. The second time through the loop,
    it assigns the next value from `range` to `i`, and displays it. Then, because
    that’s the last value from `range`, the loop ends.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s how we can use a `for` loop to print two verses of the song.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: You can put a `for` loop inside a function. For example, `print_n_verses` takes
    a parameter named `n`, which has to be an integer, and displays the given number
    of verses.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we don’t use `i` in the body of the loop, but there has to
    be a variable name in the header anyway.
  prefs: []
  type: TYPE_NORMAL
- en: 3.5\. Variables and parameters are local[#](#variables-and-parameters-are-local
    "Link to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you create a variable inside a function, it is **local**, which means that
    it only exists inside the function. For example, the following function takes
    two arguments, concatenates them, and prints the result twice.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s an example that uses it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'When `cat_twice` runs, it creates a local variable named `cat`, which is destroyed
    when the function ends. If we try to display it, we get a `NameError`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Outside of the function, `cat` is not defined.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters are also local. For example, outside `cat_twice`, there is no such
    thing as `part1` or `part2`.
  prefs: []
  type: TYPE_NORMAL
- en: 3.6\. Stack diagrams[#](#stack-diagrams "Link to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To keep track of which variables can be used where, it is sometimes useful to
    draw a **stack diagram**. Like state diagrams, stack diagrams show the value of
    each variable, but they also show the function each variable belongs to.
  prefs: []
  type: TYPE_NORMAL
- en: Each function is represented by a **frame**. A frame is a box with the name
    of a function on the outside and the parameters and local variables of the function
    on the inside.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s the stack diagram for the previous example.
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/02b6ddc296c3c51396cc7c1a916aa9f4ea1bc5ed61b9fe10d6ec63e9b928fc68.png](../Images/76dde745ad063790ee3d6fa39fb2bf64.png)'
  prefs: []
  type: TYPE_IMG
- en: The frames are arranged in a stack that indicates which function called which,
    and so on. Reading from the bottom, `print` was called by `print_twice`, which
    was called by `cat_twice`, which was called by `__main__` – which is a special
    name for the topmost frame. When you create a variable outside of any function,
    it belongs to `__main__`.
  prefs: []
  type: TYPE_NORMAL
- en: In the frame for `print`, the question mark indicates that we don’t know the
    name of the parameter. If you are curious, ask a virtual assistant, “What are
    the parameters of the Python print function?”
  prefs: []
  type: TYPE_NORMAL
- en: 3.7\. Tracebacks[#](#tracebacks "Link to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a runtime error occurs in a function, Python displays the name of the function
    that was running, the name of the function that called it, and so on, up the stack.
    To see an example, I’ll define a version of `print_twice` that contains an error
    – it tries to print `cat`, which is a local variable in another function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Now here’s what happens when we run `cat_twice`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The error message includes a **traceback**, which shows the function that was
    running when the error occurred, the function that called it, and so on. In this
    example, it shows that `cat_twice` called `print_twice`, and the error occurred
    in a `print_twice`.
  prefs: []
  type: TYPE_NORMAL
- en: The order of the functions in the traceback is the same as the order of the
    frames in the stack diagram. The function that was running is at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: 3.8\. Why functions?[#](#why-functions "Link to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It may not be clear yet why it is worth the trouble to divide a program into
    functions. There are several reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new function gives you an opportunity to name a group of statements,
    which makes your program easier to read and debug.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions can make a program smaller by eliminating repetitive code. Later,
    if you make a change, you only have to make it in one place.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dividing a long program into functions allows you to debug the parts one at
    a time and then assemble them into a working whole.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Well-designed functions are often useful for many programs. Once you write and
    debug one, you can reuse it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.9\. Debugging[#](#debugging "Link to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Debugging can be frustrating, but it is also challenging, interesting, and sometimes
    even fun. And it is one of the most important skills you can learn.
  prefs: []
  type: TYPE_NORMAL
- en: In some ways debugging is like detective work. You are given clues and you have
    to infer the events that led to the results you see.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging is also like experimental science. Once you have an idea about what
    is going wrong, you modify your program and try again. If your hypothesis was
    correct, you can predict the result of the modification, and you take a step closer
    to a working program. If your hypothesis was wrong, you have to come up with a
    new one.
  prefs: []
  type: TYPE_NORMAL
- en: For some people, programming and debugging are the same thing; that is, programming
    is the process of gradually debugging a program until it does what you want. The
    idea is that you should start with a working program and make small modifications,
    debugging them as you go.
  prefs: []
  type: TYPE_NORMAL
- en: If you find yourself spending a lot of time debugging, that is often a sign
    that you are writing too much code before you start tests. If you take smaller
    steps, you might find that you can move faster.
  prefs: []
  type: TYPE_NORMAL
- en: 3.10\. Glossary[#](#glossary "Link to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**function definition:** A statement that creates a function.'
  prefs: []
  type: TYPE_NORMAL
- en: '**header:** The first line of a function definition.'
  prefs: []
  type: TYPE_NORMAL
- en: '**body:** The sequence of statements inside a function definition.'
  prefs: []
  type: TYPE_NORMAL
- en: '**function object:** A value created by a function definition. The name of
    the function is a variable that refers to a function object.'
  prefs: []
  type: TYPE_NORMAL
- en: '**parameter:** A name used inside a function to refer to the value passed as
    an argument.'
  prefs: []
  type: TYPE_NORMAL
- en: '**loop:** A statement that runs one or more statements, often repeatedly.'
  prefs: []
  type: TYPE_NORMAL
- en: '**local variable:** A variable defined inside a function, and which can only
    be accessed inside the function.'
  prefs: []
  type: TYPE_NORMAL
- en: '**stack diagram:** A graphical representation of a stack of functions, their
    variables, and the values they refer to.'
  prefs: []
  type: TYPE_NORMAL
- en: '**frame:** A box in a stack diagram that represents a function call. It contains
    the local variables and parameters of the function.'
  prefs: []
  type: TYPE_NORMAL
- en: '**traceback:** A list of the functions that are executing, printed when an
    exception occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: 3.11\. Exercises[#](#exercises "Link to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 3.11.1\. Ask a virtual assistant[#](#ask-a-virtual-assistant "Link to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The statements in a function or a `for` loop are indented by four spaces, by
    convention. But not everyone agrees with that convention. If you are curious about
    the history of this great debate, ask a virtual assistant to “tell me about spaces
    and tabs in Python”.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual assistant are pretty good at writing small functions.
  prefs: []
  type: TYPE_NORMAL
- en: Ask your favorite VA to “Write a function called repeat that takes a string
    and an integer and prints the string the given number of times.”
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the result uses a `for` loop, you could ask, “Can you do it without a for
    loop?”
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pick any other function in this chapter and ask a VA to write it. The challenge
    is to describe the function precisely enough to get what you want. Use the vocabulary
    you have learned so far in this book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Virtual assistants are also pretty good at debugging functions.
  prefs: []
  type: TYPE_NORMAL
- en: Ask a VA what’s wrong with this version of `print_twice`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And if you get stuck on any of the exercises below, consider asking a VA for
    help.
  prefs: []
  type: TYPE_NORMAL
- en: 3.11.2\. Exercise[#](#exercise "Link to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Write a function named `print_right` that takes a string named `text` as a parameter
    and prints the string with enough leading spaces that the last letter of the string
    is in the 40th column of the display.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Use the `len` function, the string concatenation operator (`+`) and the
    string repetition operator (`*`).'
  prefs: []
  type: TYPE_NORMAL
- en: Here’s an example that shows how it should work.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 3.11.3\. Exercise[#](#id1 "Link to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Write a function called `triangle` that takes a string and an integer and draws
    a pyramid with the given height, made up using copies of the string. Here’s an
    example of a pyramid with `5` levels, using the string `'L'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 3.11.4\. Exercise[#](#id2 "Link to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Write a function called `rectangle` that takes a string and two integers and
    draws a rectangle with the given width and height, made up using copies of the
    string. Here’s an example of a rectangle with width `5` and height `4`, made up
    of the string `'H'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 3.11.5\. Exercise[#](#id3 "Link to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The song “99 Bottles of Beer” starts with this verse:'
  prefs: []
  type: TYPE_NORMAL
- en: 99 bottles of beer on the wall
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 99 bottles of beer
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Take one down, pass it around
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 98 bottles of beer on the wall
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Then the second verse is the same, except that it starts with 98 bottles and
    ends with 97\. The song continues – for a very long time – until there are 0 bottles
    of beer.
  prefs: []
  type: TYPE_NORMAL
- en: Write a function called `bottle_verse` that takes a number as a parameter and
    displays the verse that starts with the given number of bottles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Consider starting with a function that can print the first, second, or
    last line of the verse, and then use it to write `bottle_verse`.'
  prefs: []
  type: TYPE_NORMAL
- en: Use this function call to display the first verse.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: If you want to print the whole song, you can use this `for` loop, which counts
    down from `99` to `1`. You don’t have to completely understand this example—we’ll
    learn more about `for` loops and the `range` function later.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[Think Python: 3rd Edition](https://allendowney.github.io/ThinkPython/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Copyright 2024 [Allen B. Downey](https://allendowney.com)
  prefs: []
  type: TYPE_NORMAL
- en: 'Code license: [MIT License](https://mit-license.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Text license: [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/)'
  prefs: []
  type: TYPE_NORMAL
