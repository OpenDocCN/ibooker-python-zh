["```py\nminutes = 105\nminutes / 60 \n```", "```py\n1.75 \n```", "```py\nminutes = 105\nhours = minutes // 60\nhours \n```", "```py\n1 \n```", "```py\nremainder = minutes - hours * 60\nremainder \n```", "```py\n45 \n```", "```py\nremainder = minutes % 60\nremainder \n```", "```py\n45 \n```", "```py\nx = 123\nx % 10 \n```", "```py\n3 \n```", "```py\nx % 100 \n```", "```py\n23 \n```", "```py\nstart = 11\nduration = 3\nend = (start + duration) % 12\nend \n```", "```py\n2 \n```", "```py\n5 == 5 \n```", "```py\nTrue \n```", "```py\n5 == 7 \n```", "```py\nFalse \n```", "```py\nx = 5\ny = 7 \n```", "```py\nx == y \n```", "```py\nFalse \n```", "```py\ntype(True) \n```", "```py\nbool \n```", "```py\ntype(False) \n```", "```py\nbool \n```", "```py\nx != y               # x is not equal to y \n```", "```py\nTrue \n```", "```py\nx > y                # x is greater than y \n```", "```py\nFalse \n```", "```py\nx < y               # x is less than to y \n```", "```py\nTrue \n```", "```py\nx >= y               # x is greater than or equal to y \n```", "```py\nFalse \n```", "```py\nx <= y               # x is less than or equal to y \n```", "```py\nTrue \n```", "```py\nx > 0 and x < 10 \n```", "```py\nTrue \n```", "```py\nx % 2 == 0 or x % 3 == 0 \n```", "```py\nFalse \n```", "```py\nnot x > y \n```", "```py\nTrue \n```", "```py\n42 and True \n```", "```py\nTrue \n```", "```py\nif x > 0:\n    print('x is positive') \n```", "```py\nx is positive \n```", "```py\nif x < 0:\n    pass          # TODO: need to handle negative values! \n```", "```py\nif x % 2 == 0:\n    print('x is even')\nelse:\n    print('x is odd') \n```", "```py\nx is odd \n```", "```py\nif x < y:\n    print('x is less than y')\nelif x > y:\n    print('x is greater than y')\nelse:\n    print('x and y are equal') \n```", "```py\nx is less than y \n```", "```py\nif x == y:\n    print('x and y are equal')\nelse:\n    if x < y:\n        print('x is less than y')\n    else:\n        print('x is greater than y') \n```", "```py\nx is less than y \n```", "```py\nif 0 < x:\n    if x < 10:\n        print('x is a positive single-digit number.') \n```", "```py\nx is a positive single-digit number. \n```", "```py\nif 0 < x and x < 10:\n    print('x is a positive single-digit number.') \n```", "```py\nx is a positive single-digit number. \n```", "```py\nif 0 < x < 10:\n    print('x is a positive single-digit number.') \n```", "```py\nx is a positive single-digit number. \n```", "```py\ndef countdown(n):\n    if n <= 0:\n        print('Blastoff!')\n    else:\n        print(n)\n        countdown(n-1) \n```", "```py\ncountdown(3) \n```", "```py\n3\n2\n1\nBlastoff! \n```", "```py\ndef print_n_times(string, n):\n    if n > 0:\n        print(string)\n        print_n_times(string, n-1) \n```", "```py\nprint_n_times('Spam ', 4) \n```", "```py\nSpam \nSpam \nSpam \nSpam \n```", "```py\ndef recurse():\n    recurse() \n```", "```py\nrecurse() \n```", "```py\n---------------------------------------------------------------------------\nRecursionError  Traceback (most recent call last)\nCell In[40], line 1\n----> 1 recurse()\n\nCell In[38], line 2, in recurse()\n  1 def recurse():\n----> 2     recurse()\n\nCell In[38], line 2, in recurse()\n  1 def recurse():\n----> 2     recurse()\n\n    [... skipping similar frames: recurse at line 2 (2957 times)]\n\nCell In[38], line 2, in recurse()\n  1 def recurse():\n----> 2     recurse()\n\nRecursionError: maximum recursion depth exceeded \n```", "```py\ntext = input() \n```", "```py\nname = input('What...is your name?\\n')\nname \n```", "```py\nWhat...is your name?\nIt is Arthur, King of the Britons \n```", "```py\n'It is Arthur, King of the Britons' \n```", "```py\nprompt = 'What...is the airspeed velocity of an unladen swallow?\\n'\nspeed = input(prompt)\nspeed \n```", "```py\nWhat...is the airspeed velocity of an unladen swallow?\nWhat do you mean: an African or European swallow? \n```", "```py\n'What do you mean: an African or European swallow?' \n```", "```py\nint(speed) \n```", "```py\nValueError: invalid literal for int() with base 10: 'What do you mean: an African or European swallow?' \n```", "```py\nx = 5\n y = 6 \n```", "```py\n Cell In[49], line 2\n    y = 6\n    ^\nIndentationError: unexpected indent \n```", "```py\nimport math\nnumerator = 9\ndenominator = 10\nratio = numerator // denominator\ndecibels = 10 * math.log10(ratio) \n```", "```py\n---------------------------------------------------------------------------\nValueError  Traceback (most recent call last)\nCell In[51], line 5\n  3 denominator = 10\n  4 ratio = numerator // denominator\n----> 5 decibels = 10 * math.log10(ratio)\n\nValueError: math domain error \n```", "```py\n# This cell tells Jupyter to provide detailed debugging information\n# when a runtime error occurs. Run it before working on the exercises.\n\n%xmode Verbose \n```", "```py\nException reporting mode: Verbose \n```", "```py\nif x == y:\n    print('x and y are equal')\nelse:\n    if x < y:\n        print('x is less than y')\n    else:\n        print('x is greater than y') \n```", "```py\nx is less than y \n```", "```py\nif 0 < x:\n    if x < 10:\n        print('x is a positive single-digit number.') \n```", "```py\nx is a positive single-digit number. \n```", "```py\nif not x <= 0 and not x >= 10:\n    print('x is a positive single-digit number.') \n```", "```py\nx is a positive single-digit number. \n```", "```py\ndef countdown_by_two(n):\n    if n == 0:\n        print('Blastoff!')\n    else:\n        print(n)\n        countdown_by_two(n-2) \n```", "```py\ncountdown_by_two(6) \n```", "```py\n6\n4\n2\nBlastoff! \n```", "```py\nfrom time import time\n\nnow = time()\nnow \n```", "```py\n1716394001.8466134 \n```", "```py\ndef recurse(n, s):\n    if n == 0:\n        print(s)\n    else:\n        recurse(n-1, n+s)\n\nrecurse(3, 0) \n```", "```py\n6 \n```", "```py\nfrom jupyturtle import forward, left, right, back\n\ndef draw(length):\n    angle = 50\n    factor = 0.6\n\n    if length > 5:\n        forward(length)\n        left(angle)\n        draw(factor * length)\n        right(2 * angle)\n        draw(factor * length)\n        left(angle)\n        back(length) \n```", "```py\nmake_turtle(delay=0)\nkoch(120) \n```", "```py\nmake_turtle(delay=0, height=200)\n\ndraw_sierpinski(100, 3) \n```"]