["```py\n(Row 1): (RS) K18,ssk,k1,turn work.\n(Row 2): (WS) Sl 1 pwise,p5,p2tog,p1,turn.\n```", "```py\n  1/2 c. butter or margarine\n  1/2 c. cream\n  2 1/2 c. flour\n  1 t. salt\n  1 T. sugar\n  4 c. riced potatoes (cold)\n\nBe sure all ingredients are cold before adding flour.\nMix all ingredients.\nKnead thoroughly.\nForm into 20 balls.  Store cold until the next step.\nFor each ball:\n  Spread flour on cloth.\n  Roll ball into a circle with a grooved rolling pin.\n  Fry on griddle until brown spots appear.\n  Turn over and fry other side.\n```", "```py\nfor countdown in 5, 4, 3, 2, 1, \"hey!\":\n    print(countdown)\n```", "```py\n5\n4\n3\n2\n1\nhey!\n```", "```py\nspells = [\n    \"Riddikulus!\",\n    \"Wingardium Leviosa!\",\n    \"Avada Kedavra!\",\n    \"Expecto Patronum!\",\n    \"Nox!\",\n    \"Lumos!\",\n    ]\nprint(spells[3])\n```", "```py\nExpecto Patronum!\n```", "```py\nquotes = {\n    \"Moe\": \"A wise guy, huh?\",\n    \"Larry\": \"Ow!\",\n    \"Curly\": \"Nyuk nyuk!\",\n    }\nstooge = \"Curly\"\nprint(stooge, \"says:\", quotes[stooge])\n```", "```py\nCurly says: Nyuk nyuk!\n```", "```py\n1 import webbrowser\n2 import json\n3 from urllib.request import urlopen\n4 \n5 print(\"Let's find an old website.\")\n6 site = input(\"Type a website URL: \")\n7 era = input(\"Type a year, month, and day, like 20150613: \")\n8 url = \"http://archive.org/wayback/available?url=%s&timestamp=%s\" % (site, era)\n9 response = urlopen(url)\n10 contents = response.read()\n11 text = contents.decode(\"utf-8\")\n12 data = json.loads(text)\n13 try:\n14     old_site = data[\"archived_snapshots\"][\"closest\"][\"url\"]\n15     print(\"Found this copy: \", old_site)\n16     print(\"It should appear in your browser now.\")\n17     webbrowser.open(old_site)\n18 except:\n19     print(\"Sorry, no luck finding\", site)\n```", "```py\n$ python archive.py\nLet's find an old website.\nType a website URL: lolcats.com\nType a year, month, and day, like 20150613: 20151022\nFound this copy: http://web.archive.org/web/20151102055938/http://www.lolcats.com/\nIt should appear in your browser now.\n```", "```py\n1 import webbrowser\n2 import requests\n3 \n4 print(\"Let's find an old website.\")\n5 site = input(\"Type a website URL: \")\n6 era = input(\"Type a year, month, and day, like 20150613: \")\n7 url = \"http://archive.org/wayback/available?url=%s&timestamp=%s\" % (site, era)\n8 response = requests.get(url)\n9 data = response.json()\n10 try:\n11     old_site = data[\"archived_snapshots\"][\"closest\"][\"url\"]\n12     print(\"Found this copy: \", old_site)\n13     print(\"It should appear in your browser now.\")\n14     webbrowser.open(old_site)\n15 except:\n16     print(\"Sorry, no luck finding\", site)\n```", "```py\n#!/bin/sh\nlanguage=0\necho \"Language $language: I am the shell. So there.\"\n```", "```py\nLanguage 0: I am the shell. So there.\n```", "```py\n#include <stdio.h>\nint main(int argc, char *argv[]) {\n    int language = 1;\n    printf(\"Language %d: I am C! See? Si!\\n\", language);\n    return 0;\n}\n```", "```py\n#include <iostream>\nusing namespace std;\nint main() {\n    int language = 2;\n    cout << \"Language \" << language << \\\n       \": I am C++!  Pay no attention to my little brother!\" << \\\n       endl;\n    return(0);\n}\n```", "```py\npublic class Anecdote {\n    public static void main (String[] args) {\n        int language = 3;\n        System.out.format(\"Language %d: I am Java! So there!\\n\", language);\n    }\n}\n```", "```py\nmy $language = 4;\nprint \"Language $language: I am Perl, the camel of languages.\\n\";\n```", "```py\nlanguage = 5\nputs \"Language #{language}: I am Ruby, ready and aglow.\"\n```", "```py\n<?PHP\n$language = 6;\necho \"Language $language: I am PHP, a language and palindrome.\\n\";\n?>\n```", "```py\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  language := 7\n  fmt.Printf(\"Language %d: Hey, ho, let's Go!\\n\", language)\n}\n```", "```py\nfn main() {\n    println!(\"Language {}: Rust here!\", 8)\n```", "```py\nlanguage = 9\nprint(f\"Language {language}: I am Python. What's for supper?\")\n```", "```py\n$ python\nPython 3.7.2 (v3.7.2:9a3ffc0492, Dec 24 2018, 02:44:43)\n[Clang 6.0 (clang-600.0.57)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> 27\n27\n```", "```py\n>>> print(27)\n27\n```", "```py\nprint(27)\n```", "```py\n$ python test.py\n```", "```py\n27\n```", "```py\n>>> import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one--and preferably only one--obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea--let's do more of those!\n```"]