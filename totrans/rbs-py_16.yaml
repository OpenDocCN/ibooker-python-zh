- en: Chapter 14\. Runtime Checking With pydantic
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章：使用pydantic进行运行时检查
- en: The central theme of robust code is making it easier to detect errors. Errors
    are an inevitable part of developing complex systems; you can’t avoid them. By
    writing your own types, you create a vocabulary that makes it harder to introduce
    inconsistencies. Using type annotations provides you a safety net, letting you
    catch mistakes as you are developing. Both of these are examples of *shifting
    errors left*; instead of finding errors during testing (or worse, in production),
    you find them earlier, ideally as you develop code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 健壮代码的核心主题是使错误检测变得更加容易。错误是开发复杂系统不可避免的一部分；你无法避免它们。通过编写自己的类型，您创建了一个词汇表，使引入不一致性变得更加困难。使用类型注解为您提供了一个安全网，让您在开发过程中捕获错误。这两者都是“将错误左移”的示例；而不是在测试期间（或更糟的是，在生产中）找到错误，您可以更早地找到它们，理想情况下是在开发代码时。
- en: However, not every error is easily found through code inspection and static
    analysis. There is a whole class of errors that will only be detectable at runtime.
    Any time you interact with data supplied from outside your program (such as databases,
    config files, network requests), you run the risk of inputting invalid data. Your
    code can be rock-solid in how you retrieve and parse data, but there’s not much
    you can do to prevent users from passing in invalid data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并非每个错误都能通过代码检查和静态分析轻松发现。有一整类错误只能在运行时检测到。每当与程序外部提供的数据交互时（例如数据库、配置文件、网络请求），您都会面临输入无效数据的风险。您的代码在检索和解析数据方面可能非常可靠，但是您无法阻止用户传递无效数据。
- en: 'Your first inclination might be to write a lot of *validation logic*: `if`
    statements and checks to see if all of the data passed in is correct. The problem
    is that validation logic is often complex, sprawling, and tough to understand
    at a glance. The more comprehensive your validation, the worse it gets. If your
    goal is to find errors, reading all the code (and tests) will be your best shot.
    In that case, you need to minimize the amount of code you look at. Herein lies
    the rub: you will understand more of the code the more you read, but the more
    you read, the higher the cognitive burden you will have, decreasing your chances
    of finding an error.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您的第一个倾向可能是编写大量*验证逻辑*：`if`语句和检查以确保所有传入的数据都是正确的。问题在于验证逻辑通常是复杂的、扩展的，一眼看去很难理解。验证越全面，情况越糟。如果您的目标是查找错误，阅读所有代码（和测试）将是您最好的选择。在这种情况下，您需要最小化查看的代码量。这就是难题所在：您阅读的代码越多，您理解的越多，但阅读的越多，认知负担就越大，降低您找到错误的机会。
- en: In this chapter, you’ll learn how using the pydantic library will fix this problem.
    pydantic lets you define modeled classes, reducing the amount of validation logic
    you need to write, without sacrificing readability. pydantic will easily parse
    user-supplied data, providing guarantees about output data structures. I’ll go
    through a few basic examples of what you can do with it, and then end the chapter
    with some advanced pydantic usage.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用pydantic库解决此问题。pydantic允许您定义建模类，减少需要编写的验证逻辑量，而不会牺牲可读性。pydantic可以轻松解析用户提供的数据，并为输出数据结构提供保证。我将介绍一些基本的使用示例，然后以一些高级pydantic用法结束本章。
- en: Dynamic Configuration
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态配置
- en: 'In this chapter, I’m going to build out types describing restaurants. I’ll
    start by providing a way for a user to specify restaurants through configuration
    files. Here is a list of configurable fields (and their constraints) per restaurant:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将构建描述餐馆的类型。我将首先提供一种通过配置文件指定餐馆的方法。以下是每家餐馆可配置字段（及其约束）的列表：
- en: Name of the restaurant
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 餐馆名称
- en: For legacy reasons, the name must be less than 32 characters long, and only
    contain letters, numbers, quotation marks, and spaces (no Unicode, sorry).
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于传统原因，名称必须少于32个字符，并且只能包含字母、数字、引号和空格（抱歉，没有Unicode）。
- en: Owner’s full name
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业主全名
- en: Address
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地址
- en: List of employees
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 员工列表
- en: There must be at least one chef and one server.
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须至少有一位厨师和一位服务员。
- en: Each employee has a name and position (chef, server, host, sous chef, or delivery
    driver).
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每位员工都有姓名和职位（厨师、服务员、主持人、副厨师或送货司机）。
- en: Each employee either has a mailing address for a check or direct deposit details.
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个员工都有邮寄地址用于支票或直接存款详细信息。
- en: List of dishes
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 菜品列表
- en: Each dish has a name, price, and description. The name is limited to 16 characters,
    and the description is limited to 80 characters. Optionally, there is a picture
    (in the form of a filename) with each dish.
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每道菜品都有名称、价格和描述。名称限制在16个字符以内，描述限制在80个字符以内。可选地，每道菜还带有图片（以文件名的形式）。
- en: Each dish must have a unique name.
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每道菜品必须有唯一的名称。
- en: There must be at least three dishes on the menu.
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 菜单上至少要有三道菜。
- en: Number of seats
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 座位数
- en: Offers to-go orders (Boolean)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供外卖订单（布尔值）
- en: Offers delivery (Boolean)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供送货服务（布尔值）
- en: 'This information is stored in a [YAML file](https://yaml.org) that looks like
    this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息存储在一个[YAML文件](https://yaml.org)，看起来像这样：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The pip-installable library `yaml` makes it easy to read this file, providing
    a dictionary:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过可安装的Python库`yaml`轻松读取此文件，返回一个字典：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: I want you to put on your tester hat for a second. The requirements I’ve just
    given are certainly not exhaustive; how would you refine them? I want you to take
    a few minutes and list out all the different constraints you can think of with
    just the dictionary given. Assuming the YAML file parses and returns a dictionary,
    how many invalid test cases can you think of?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望您可以戴上测试帽子。我刚刚给出的要求显然并不详尽；您会如何完善它们？请花几分钟时间列出您认为的所有不同约束条件，只需使用给定的字典假设YAML文件解析并返回一个字典，您能想到多少个无效的测试用例？
- en: Note
  id: totrans-27
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You may notice that the routing number and account numbers are strings in the
    example above. This is intentional. Despite being a string of numerals, I do not
    want this to be a numeric type. Numeric operations (such as addition or multiplication)
    do not make sense, and I do not want an account number of 000000001234 to be truncated
    to 1234.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到上面示例中的路由号和账号都是字符串。这是有意为之。尽管是数字串，我不希望它成为数值类型。数值运算（比如加法或乘法）毫无意义，我也不希望账号000000001234被截断为1234。
- en: 'Here are some ideas to think about when enumerating test cases:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些思考枚举测试用例时的想法：
- en: Python is a dynamic language. Are you sure that everything is the right type?
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python是一种动态语言。您确定每个东西都是正确的类型吗？
- en: Dictionaries don’t require any sort of required fields—are you sure every field
    is present?
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字典不需要任何必填字段——您确定每个字段都存在吗？
- en: Are all the constraints from the problem statement tested for?
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有问题陈述中的约束条件都被测试过了吗？
- en: What about additional constraints (correct routing numbers, account numbers,
    and addresses?)
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 额外的约束条件如何（正确的路由号、账号和地址）？
- en: What about negative numbers where there shouldn’t be?
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不应存在的地方使用负数怎么办？
- en: 'I came up with 67 different test cases with invalid data in about five minutes.
    Some of my test cases included (the full list is included in the [GitHub repo
    for this book](https://github.com/pviafore/RobustPython)):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我花了大约五分钟时间，想出了67种不同的带有无效数据的测试用例。我的一些测试用例包括（完整列表包含在[此书的GitHub存储库](https://github.com/pviafore/RobustPython)中）：
- en: Name is zero characters.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称长度为零字符。
- en: Name is not a string.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称不是字符串。
- en: There are no chefs.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有厨师。
- en: Employee has no bank details or address.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 员工没有银行详细信息或地址。
- en: Employee’s routing number is truncated (0000123 becomes 123).
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 员工的路由号被截断（0000123变成123）。
- en: Number of seats is negative.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 座位数为负数。
- en: This, admittedly, is not a very complex class. Could you imagine the number
    of test cases for a much more involved class? Even with 67 test cases, could you
    imagine opening up a constructor of a type and checking 67 different conditions?
    In most of the codebases I’ve worked on, the validation logic is nowhere near
    as comprehensive. However, this is user-configurable data and I want errors to
    be caught as early as possible in runtime. You should prefer catching the errors
    at data injection over first use. After all, the first use of these values might
    not happen until you are in a separate system, decoupled from your parse logic.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 诚然，这不是一个非常复杂的类。您能想象一个更复杂的类需要多少测试用例吗？即使有67个测试用例，您能想象打开一个类型的构造函数并检查67个不同的条件吗？在我工作过的大多数代码库中，验证逻辑远不如此详尽。然而，这是用户可配置的数据，我希望在运行时尽早捕获错误。您应该优先在数据注入时捕获错误，而不是在首次使用时。毕竟，这些值的首次使用可能发生在您与解析逻辑分离的另一个系统中。
- en: Discussion Topic
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论主题
- en: Think about some user data represented as data types in your system. How complex
    is that data? How many ways can you construct it incorrectly? Discuss the impact
    of creating this data incorrectly and how confident you are that your code will
    catch all the errors.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 思考一下在你的系统中以数据类型表示的某些用户数据。这些数据有多复杂？有多少种方法可以构造出错误的数据？讨论创建这些数据错误的影响以及你对代码能否捕获所有错误的信心。
- en: 'Throughout this chapter, I’ll show you how to create a type that is easy to
    read and models all the constraints listed. Since I’ve focused on type annotations
    so much, it’d be nice if I can catch missing fields or wrong types at typecheck
    time. A first idea is to use a `TypedDict` (see [Chapter 5](part0008_split_000.html#collections)
    for more information on `TypedDict`):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将向你展示如何创建一个易于阅读并模拟所有列出约束条件的类型。由于我非常关注类型注解，如果在类型检查时可以捕获缺少字段或错误类型，那将是很好的。首先的想法是使用
    `TypedDict`（更多关于 `TypedDict` 的信息请参见[第 5 章](part0008_split_000.html#collections)）：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is a huge step in readability; you can tell exactly what types are needed
    to construct your type. You could write the following function:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于提高可读性是一个巨大的进步；你可以准确地知道构建你的类型所需的类型。你可以编写以下函数：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Downstream consumers would automatically benefit from the types I’ve just laid
    out. However, there are a few problems with this approach:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 下游消费者将自动从我刚刚建立的类型中受益。然而，这种方法存在一些问题：
- en: I can’t control construction of a `TypedDict`, so I can’t validate any fields
    as part of type construction. I must force consumers to do the validation.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我无法控制 `TypedDict` 的构建，因此无法在类型构建的过程中验证任何字段。我必须强制消费者进行验证。
- en: '`TypedDict` cannot have additional methods on it.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TypedDict` 不能在其上有额外的方法。'
- en: '`TypedDict` does no validation implicitly. If you create the wrong dictionary
    from YAML, the typechecker will not complain.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TypedDict` 隐式地不进行验证。如果你从 YAML 中创建了错误的字典，类型检查器不会抱怨。'
- en: 'That last point is important. In fact, I could have the following contents
    as the entirety of my YAML file, and the code will still typecheck:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点很重要。事实上，我可以将以下内容作为我的 YAML 文件的全部内容，代码仍将进行类型检查：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Typechecking will not catch errors at runtime. You need something stronger.
    Enter pydantic.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 类型检查不会在运行时捕获错误。你需要更强大的工具。这时候就需要 pydantic 出马了。
- en: pydantic
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pydantic
- en: '[*pydantic*](https://pydantic-docs.helpmanual.io) is a library that provides
    runtime checking of your types without sacrificing readability. You can use pydantic
    to model your classes like so:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[*pydantic*](https://pydantic-docs.helpmanual.io) 是一个提供运行时类型检查且不牺牲可读性的库。你可以像这样使用
    pydantic 来建模你的类：'
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You decorate each class with a `pydantic.dataclasses.dataclass` instead of inheriting
    from `TypedDict`. Once you have this, pydantic does validation upon type construction.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用 `pydantic.dataclasses.dataclass` 装饰每个类，而不是继承自 `TypedDict`。一旦你这样做了，pydantic
    将在类型构建时进行验证。
- en: 'To construct the pydantic type, I’ll change my load function as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建 pydantic 类型，我将按以下方式更改我的加载函数：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If a future developer violates any constraint, pydantic will throw an exception.
    Here are some example exceptions:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将来的开发者违反了任何约束条件，pydantic 将抛出异常。以下是一些示例异常：
- en: 'If a field is missing, such as a missing description:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果缺少字段，比如缺少描述：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When an invalid type is provided, such as putting the number 3 as an employee’s
    position:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当提供无效类型时，例如将数字 3 作为员工职位：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Warning
  id: totrans-67
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: 'Pydantic can work with mypy, but you may need to enable the pydantic plug-in
    for typechecking in your *mypy.ini* to take advantage of all the features. Your
    *mypy.ini* will need the following in it:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Pydantic 可以与 mypy 配合使用，但你可能需要在 *mypy.ini* 中启用 pydantic 插件以利用所有功能。你的 *mypy.ini*
    需要包含以下内容：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For more information, check out the [pydantic documentation](https://oreil.ly/FBQXX).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请查阅 [pydantic 文档](https://oreil.ly/FBQXX)。
- en: By modeling types with pydantic, I can catch entire classes of errors without
    writing my own validation logic. The pydantic data classes above catch 38 of the
    67 test cases that I came up with earlier. But I can do better. This code still
    is missing functionality for those other 29 test cases, but I can use pydantic’s
    built-in validators to catch even more errors on type construction.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 pydantic 建模类型，我可以在不编写自己的验证逻辑的情况下捕获整类错误。上述的 pydantic 数据类能够捕获我之前提出的 67 个测试用例中的
    38 个。但我可以做得更好。这段代码仍然缺少对其他 29 个测试用例的功能，但我可以使用 pydantic 的内置验证器在类型构建时捕获更多错误。
- en: Validators
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证器
- en: 'Pydantic offers a ton of built-in *validators*. Validators are custom types
    that will check for specific constraints upon a field. For instance, if I wanted
    to make sure that strings were a certain size or that all integers were positive,
    I could use pydantic’s constrained types:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Pydantic提供了大量内置的*验证器*。验证器是检查特定约束条件的自定义类型。例如，如果我想确保字符串的大小或所有整数都是正数，我可以使用pydantic的约束类型：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[![1](../images/00002.gif)](part0018_split_004.html#co_runtime_checking_with_pydantic_CO1-1)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](../images/00002.gif)](part0018_split_004.html#co_runtime_checking_with_pydantic_CO1-1)'
- en: I’m constraining a string to be a certain length.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在限制一个字符串的长度。
- en: '[![2](../images/00005.gif)](part0018_split_004.html#co_runtime_checking_with_pydantic_CO1-2)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](../images/00005.gif)](part0018_split_004.html#co_runtime_checking_with_pydantic_CO1-2)'
- en: I’m constraining a string to match a regular expression (in this case, only
    alphanumeric characters and spaces).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在限制一个字符串以匹配一个正则表达式（在本例中，只包括字母数字字符和空格）。
- en: 'If I pass in an invalid type (such as a restaurant name with special characters
    or a negative number of seats), I get the following error:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我传入一个无效类型（例如带有特殊字符的餐馆名称或负座位数），我将收到以下错误：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: I can even constrain lists to enforce further restrictions.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我甚至可以约束列表以强制执行进一步的限制。
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[![1](../images/00002.gif)](part0018_split_004.html#co_runtime_checking_with_pydantic_CO2-1)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](../images/00002.gif)](part0018_split_004.html#co_runtime_checking_with_pydantic_CO2-1)'
- en: This list is constrained to `Employee` types and must have at least two employees.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此列表仅限于`Employee`类型，必须至少有两名员工。
- en: '[![2](../images/00005.gif)](part0018_split_004.html#co_runtime_checking_with_pydantic_CO2-2)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](../images/00005.gif)](part0018_split_004.html#co_runtime_checking_with_pydantic_CO2-2)'
- en: This list is constrained to `Dish` types and must have at least three dishes.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此列表仅限于`Dish`类型，必须至少有三种菜肴。
- en: 'If I pass in something that doesn’t follow these constraints (such as forgetting
    a dish):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我传入不符合这些约束的内容（例如忘记一个菜品）：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: With constrained types, I catch an additional 17 of my previously thought-up
    test cases, bringing my total up to 55 out of 67 test cases covered. Pretty nice,
    isn’t it?
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在受限类型下，我额外捕获了我之前设想的17个测试用例，总数达到了67个测试用例中的55个。相当不错，不是吗？
- en: 'To catch the remaining set of errors, I can use custom validators to embed
    those last pieces of validation logic:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了捕捉剩余的错误集，我可以使用自定义验证器来嵌入那些最后的验证逻辑：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If I then fail to provide at least one chef and server:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果接着没有提供至少一位厨师和服务员：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: I will leave it up to you to write custom validators for other error cases (such
    as valid addresses, valid routing numbers, or a valid image that exists on a filesystem).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我将让你为其他错误情况编写自定义验证器（例如有效地址、有效路由号码或存在于文件系统上的有效图像）。
- en: Validation Versus Parsing
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证与解析的区别
- en: Admittedly, pydantic is not strictly a validation library, but also a *parsing*
    library. The difference is slight, but needs to be called out. In all my examples,
    I have been using pydantic to check arguments and types, but it is not a strict
    validator. Pydantic advertises itself as a *parsing library*, which means it is
    providing a guarantee of what comes *out* of the data model, not what goes in.
    That is, when you are defining pydantic models, pydantic will do whatever it can
    to coerce data into the types you defined.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 诚然，pydantic并非严格的验证库，而是一个*parsing*库。这两者的区别细微，但需要明确。在我所有的示例中，我一直在使用pydantic来检查参数和类型，但它并不是一个严格的验证器。Pydantic宣传自己是一个*parsing*库，这意味着它提供了一个保证，即从数据模型中得到的内容是什么，而不是输入的内容。也就是说，当你定义pydantic模型时，pydantic将尽其所能将数据强制转换为你定义的类型。
- en: 'If you were to have a model:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个模型：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'There is no problem passing in a string or a float into this model; pydantic
    will do its best to coerce the value to an integer (or throw an exception if the
    value is not coercible). This code throws no exceptions:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 将字符串或浮点数传递给此模型没有问题；pydantic将尽最大努力将该值强制转换为整数（或者如果该值不可强制转换，则抛出异常）。此代码不会抛出异常：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Pydantic is parsing these values, not validating them. You are not guaranteed
    to pass an integer into the model, but you are always guaranteed an `int` comes
    out on the other side (or an exception is thrown).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Pydantic正在解析这些值，而不是验证它们。你不能保证将整数传递给模型，但你始终可以保证另一端输出一个`int`（或者抛出异常）。
- en: 'If you’d like to restrict this sort of behavior, you can use pydantic’s strict
    fields:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望限制这种行为，可以使用pydantic的严格字段：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, when constructing from another type,
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当从另一种类型构建时，
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'you will get an error:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你会得到一个错误：
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: So, while pydantic advertises itself as a parsing library, it is possible to
    enforce more strict behavior in your data models.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，虽然 pydantic 自称为一个解析库，但在你的数据模型中可以强制执行更严格的行为。
- en: Closing Thoughts
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结思考
- en: I’ve been harping on the importance of typecheckers throughout this book, but
    that doesn’t mean catching errors at runtime is meaningless. While typecheckers
    catch their fair share of errors and reduce runtime checks, they can’t catch everything.
    You still need validation logic to fill in the gaps.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我一直强调类型检查器的重要性，但这并不意味着在运行时捕获错误毫无意义。虽然类型检查器可以捕获大部分错误并减少运行时检查，但它们无法捕获所有问题。你仍然需要验证逻辑来填补这些空白。
- en: For these sorts of checks, the pydantic library is a great tool in your toolbox.
    By embedding your validation logic directly into your types (without writing tons
    of tedious `if` statements), you improve robustness twofold. First, you dramatically
    increase readability; developers reading your type definition will know exactly
    what constraints are imposed upon it. Second, it gives you that much-needed layer
    of protection with runtime checking.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这类检查，pydantic 库是你工具箱中的一个好工具。通过将验证逻辑直接嵌入到你的类型定义中（而不是编写大量乏味的`if`语句），你提升了健壮性。首先，大大提高了可读性；阅读你的类型定义的开发人员将清楚地知道施加在其上的约束。其次，它为你提供了那个急需的具备运行时检查的保护层。
- en: I find that pydantic also helps fill in the middle ground between a data class
    and a class. Each constraint is technically fulfilling invariants about that class.
    I normally advise not to give your data classes an invariant because you can’t
    protect it; you don’t control construction and property access is public. However,
    pydantic protects the invariant even when you call a constructor or set a field.
    But, if you have fields that are interdependent (such as needing to set both at
    the same time or needing to set only one field based on the value of another),
    stick with a class.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现 pydantic 还有助于填补数据类和类之间的中间地带。每个约束技术上都在维护关于该类的不变量。我通常建议不要为你的数据类设置不变量，因为你无法保护它；你不能控制构造和属性访问是公开的。然而，pydantic
    在你调用构造函数或设置字段时仍然保护不变量。但是，如果你有相互依赖的字段（例如需要同时设置两个字段或根据另一个字段的值设置一个字段），那么就坚持使用类。
- en: That’s it for [Part II](part0011.html#part_2). You’ve learned how to create
    your own types with `Enums`, data classes, and classes. Each of these fits a specific
    use case, so be mindful about your intentions when writing types. You learned
    how types can model *is-a* relationships with subtyping. You also learned why
    your API is so important to each class; it’s the first chance other developers
    get to understand what you’re doing. You finished up with this chapter, learning
    about the need to do runtime validation in addition to static typechecking.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[第二部分](part0011.html#part_2)到此为止。你已经学会了如何使用`Enums`、数据类和类来创建自己的类型。每种类型都适用于特定的用例，因此在编写类型时要注意你的意图。你学会了类型如何通过子类型化来建模*is-a*关系。你还了解了为什么你的API对每个类都如此重要；这是其他开发人员第一次了解你在做什么的机会。在本章结束时，你学到了除了静态类型检查之外，进行运行时验证的必要性。'
- en: In the next part, I’m going to take a step back and look at robustness from
    a much broader viewpoint. Pretty much all of the guidance in the first two parts
    of this book has focused on type annotations and typecheckers. Readability and
    error checking are important benefits of robustness, but they are not all there
    is. Other maintainers need to be able to make big changes to your codebase to
    introduce new functionality, not just small changes interacting with your types.
    They need to extend your codebase. [Part III](part0019.html#part_3) will focus
    on extensibility.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我将退后一步，从一个更广泛的视角来看待健壮性。本书前两部分的几乎所有指导都集中在类型注解和类型检查器上。可读性和错误检查是健壮性的重要好处，但它们并不是全部。其他维护者需要能够对你的代码库进行重大更改，引入新功能，而不仅仅是与你的类型交互进行小的更改。[第三部分](part0019.html#part_3)将专注于可扩展性。
