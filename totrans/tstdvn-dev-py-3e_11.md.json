["```py\n    /lists/<list identifier>/\n```", "```py\n    /lists/new\n```", "```py\n    /lists/<list identifier>/add_item\n```", "```py\ndef test_can_start_a_todo_list(self):\n    # Edith has heard about a cool new online to-do app.\n    [...]\n    # The page updates again, and now shows both items on her list\n    self.wait_for_row_in_list_table(\"1: Buy peacock feathers\")\n    self.wait_for_row_in_list_table(\"2: Use peacock feathers to make a fly\")\n\n    # Satisfied, she goes back to sleep\n\ndef test_multiple_users_can_start_lists_at_different_urls(self):\n    # Edith starts a new to-do list\n    self.browser.get(self.live_server_url)\n    inputbox = self.browser.find_element(By.ID, \"id_new_item\")\n    inputbox.send_keys(\"Buy peacock feathers\")\n    inputbox.send_keys(Keys.ENTER)\n    self.wait_for_row_in_list_table(\"1: Buy peacock feathers\")\n\n    # She notices that her list has a unique URL\n    edith_list_url = self.browser.current_url\n    self.assertRegex(edith_list_url, \"/lists/.+\")  ![1](assets/1.png)\n```", "```py\n    [...]\n    self.assertRegex(edith_list_url, \"/lists/.+\")\n\n    # Now a new user, Francis, comes along to the site.\n\n    ## We delete all the browser's cookies\n    ## as a way of simulating a brand new user session ![1](assets/1.png)\n    self.browser.delete_all_cookies()\n\n    # Francis visits the home page.  There is no sign of Edith's\n    # list\n    self.browser.get(self.live_server_url)\n    page_text = self.browser.find_element(By.TAG_NAME, \"body\").text\n    self.assertNotIn(\"Buy peacock feathers\", page_text)\n    self.assertNotIn(\"make a fly\", page_text)\n\n    # Francis starts a new list by entering a new item. He\n    # is less interesting than Edith...\n    inputbox = self.browser.find_element(By.ID, \"id_new_item\")\n    inputbox.send_keys(\"Buy milk\")\n    inputbox.send_keys(Keys.ENTER)\n    self.wait_for_row_in_list_table(\"1: Buy milk\")\n\n    # Francis gets his own unique URL\n    francis_list_url = self.browser.current_url\n    self.assertRegex(francis_list_url, \"/lists/.+\")\n    self.assertNotEqual(francis_list_url, edith_list_url)\n\n    # Again, there is no trace of Edith's list\n    page_text = self.browser.find_element(By.TAG_NAME, \"body\").text\n    self.assertNotIn(\"Buy peacock feathers\", page_text)\n    self.assertIn(\"Buy milk\", page_text)\n\n    # Satisfied, they both go back to sleep\n```", "```py\n$ python manage.py test functional_tests\n[...]\n.F\n======================================================================\nFAIL: test_multiple_users_can_start_lists_at_different_urls (functional_tests.t\nests.NewVisitorTest.test_multiple_users_can_start_lists_at_different_urls)\n\n ---------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"...goat-book/functional_tests/tests.py\", line 77, in\ntest_multiple_users_can_start_lists_at_different_urls\n    self.assertRegex(edith_list_url, \"/lists/.+\")\nAssertionError: Regex didn't match: '/lists/.+' not found in\n'http://localhost:8081/'\n\n ---------------------------------------------------------------------\nRan 2 tests in 5.786s\n\nFAILED (failures=1)\n```", "```py\n$ git commit -a\n```", "```py\ndef test_redirects_after_POST(self):\n    response = self.client.post(\"/\", data={\"item_text\": \"A new list item\"})\n    self.assertRedirects(response, \"/lists/the-only-list-in-the-world/\")\n```", "```py\n$ python manage.py test lists\n[...]\nAssertionError: '/' != '/lists/the-only-list-in-the-world/'\n[...]\n```", "```py\ndef home_page(request):\n    if request.method == \"POST\":\n        Item.objects.create(text=request.POST[\"item_text\"])\n        return redirect(\"/lists/the-only-list-in-the-world/\")\n\n    items = Item.objects.all()\n    return render(request, \"home.xhtml\", {\"items\": items})\n```", "```py\n$ python3 manage.py test lists\n[...]\nAssertionError: 404 != 200 : Couldn't retrieve redirection page\n'/lists/the-only-list-in-the-world/': response code was 404 (expected 200)\n```", "```py\nfrom django.urls import path\nfrom lists import views\n\nurlpatterns = [\n    path(\"\", views.home_page, name=\"home\"),\n    path(\"lists/the-only-list-in-the-world/\", views.home_page, name=\"view_list\"),  ![1](assets/1.png)\n]\n```", "```py\n$ python3 manage.py test lists\n[...]\nOK\n```", "```py\n$ python3 manage.py test functional_tests\n[...]\nAssertionError: 'Buy peacock feathers' unexpectedly found in 'Your To-Do\nlist\\n1: Buy peacock feathers'\n```", "```py\nclass HomePageTest(TestCase):\n    def test_uses_home_template(self):\n        [...]\n    def test_can_save_a_POST_request(self):\n        [...]\n    def test_redirects_after_POST(self):\n        [...]\n\nclass ListViewTest(TestCase):\n    def test_displays_all_list_items(self):\n        Item.objects.create(text=\"itemey 1\")\n        Item.objects.create(text=\"itemey 2\")\n        response = self.client.get(\"/lists/the-only-list-in-the-world/\")\n        self.assertContains(response, \"itemey 1\")\n        self.assertContains(response, \"itemey 2\")\n```", "```py\n$ python3 manage.py test lists\nOK\n```", "```py\nfrom django.urls import path\nfrom lists import views\n\nurlpatterns = [\n    path(\"\", views.home_page, name=\"home\"),\n    path(\"lists/the-only-list-in-the-world/\", views.view_list, name=\"view_list\"),\n]\n```", "```py\n$ python3 manage.py test lists\n[...]\n    path(\"lists/the-only-list-in-the-world/\", views.view_list,\nname=\"view_list\"),\n                                              ^^^^^^^^^^^^^^^\nAttributeError: module 'lists.views' has no attribute 'view_list'\n```", "```py\ndef view_list(request):\n    pass\n```", "```py\nValueError: The view lists.views.view_list didn't return an HttpResponse\nobject. It returned None instead.\n\n[...]\nFAILED (errors=2)\n```", "```py\ndef view_list(request):\n    return render(request, \"home.xhtml\")\n```", "```py\nAssertionError: False is not true : Couldn't find 'itemey 1' in response\n```", "```py\ndef view_list(request):\n    items = Item.objects.all()\n    return render(request, \"home.xhtml\", {\"items\": items})\n```", "```py\nRan 6 tests in 0.035s\n\nOK\n```", "```py\n$ python manage.py test functional_tests\n[...]\nFF\n======================================================================\nFAIL: test_can_start_a_todo_list\n(functional_tests.tests.NewVisitorTest.test_can_start_a_todo_list)\n ---------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"...goat-book/functional_tests/tests.py\", line 63, in\ntest_can_start_a_todo_list\n[...]\nAssertionError: '2: Use peacock feathers to make a fly' not found in ['1: Buy\npeacock feathers']\n\n======================================================================\nFAIL: test_multiple_users_can_start_lists_at_different_urls (functional_tests.t\nests.NewVisitorTest.test_multiple_users_can_start_lists_at_different_urls)\n ---------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"...goat-book/functional_tests/tests.py\", line 89, in\ntest_multiple_users_can_start_lists_at_different_urls\n    self.assertNotIn(\"Buy peacock feathers\", page_text)\nAssertionError: 'Buy peacock feathers' unexpectedly found in 'Your To-Do\nlist\\n1: Buy peacock feathers'\n```", "```py\n$ grep -E \"class|def\" lists/tests.py\nclass HomePageTest(TestCase):\n    def test_uses_home_template(self):\n    def test_can_save_a_POST_request(self):\n    def test_redirects_after_POST(self):\n    def test_only_saves_items_when_necessary(self):\nclass ListViewTest(TestCase):\n    def test_displays_all_list_items(self):\nclass ItemModelTest(TestCase):\n    def test_saving_and_retrieving_items(self):\n```", "```py\n        <form method=\"POST\">\n```", "```py\n    <form method=\"POST\" action=\"/\">\n```", "```py\nFAIL: test_multiple_users_can_start_lists_at_different_urls (functional_tests.t\nests.NewVisitorTest.test_multiple_users_can_start_lists_at_different_urls)\n[...]\nAssertionError: 'Buy peacock feathers' unexpectedly found in 'Your To-Do\nlist\\n1: Buy peacock feathers'\n\nRan 2 tests in 8.541s\nFAILED (failures=1)\n```", "```py\nclass ListViewTest(TestCase):\n    def test_uses_list_template(self):\n        response = self.client.get(\"/lists/the-only-list-in-the-world/\")\n        self.assertTemplateUsed(response, \"list.xhtml\")\n\n    def test_displays_all_list_items(self):\n        [...]\n```", "```py\nAssertionError: False is not true : Template 'list.xhtml' was not a template\nused to render the response. Actual template(s) used: home.xhtml\n```", "```py\ndef view_list(request):\n    items = Item.objects.all()\n    return render(request, \"list.xhtml\", {\"items\": items})\n```", "```py\ndjango.template.exceptions.TemplateDoesNotExist: list.xhtml\n```", "```py\n$ touch lists/templates/list.xhtml\n```", "```py\nAssertionError: False is not true : Couldn't find 'itemey 1' in response\n```", "```py\n$ cp lists/templates/home.xhtml lists/templates/list.xhtml\n```", "```py\n$ python manage.py test lists\n[...]\nOK\n```", "```py\n   <body>\n-    <h1>Your To-Do list</h1>\n+    <h1>Start a new To-Do list</h1>\n     <form method=\"POST\" action=\"/\">\n       <input name=\"item_text\" id=\"id_new_item\" placeholder=\"Enter a to-do item\" />\n       {% csrf_token %}\n     </form>\n-    <table id=\"id_list_table\">\n-      {% for item in items %}\n-        <tr><td>{{ forloop.counter }}: {{ item.text }}</td></tr>\n-      {% endfor %}\n-    </table>\n   </body>\n```", "```py\nOK\n```", "```py\n     if request.method == \"POST\":\n         Item.objects.create(text=request.POST[\"item_text\"])\n         return redirect(\"/lists/the-only-list-in-the-world/\")\n-\n-    items = Item.objects.all()\n-    return render(request, \"home.xhtml\", {\"items\": items})\n+    return render(request, \"home.xhtml\")\n```", "```py\nOK\n```", "```py\nAssertionError: '1: Buy milk' not found in ['1: Buy peacock feathers', '2: Buy\nmilk']\n```", "```py\n$ git status # should show 4 changed files and 1 new file, list.xhtml\n$ git add lists/templates/list.xhtml\n$ git diff # should show we've simplified home.xhtml,\n           # moved one test to a new class in lists/tests.py added a new view\n           # in views.py, and simplified home_page and added a line to urls.py\n$ git commit -a # add a message summarising the above, maybe something like\n                # \"new URL, view and template to display lists\"\n```", "```py\nclass NewListTest(TestCase):\n    def test_can_save_a_POST_request(self):\n        self.client.post(\"/lists/new\", data={\"item_text\": \"A new list item\"})\n        self.assertEqual(Item.objects.count(), 1)\n        new_item = Item.objects.get()\n        self.assertEqual(new_item.text, \"A new list item\")\n\n    def test_redirects_after_POST(self):\n        response = self.client.post(\"/lists/new\", data={\"item_text\": \"A new list item\"})\n        self.assertRedirects(response, \"/lists/the-only-list-in-the-world/\")\n```", "```py\n    self.assertEqual(Item.objects.count(), 1)\nAssertionError: 0 != 1\n[...]\n    self.assertRedirects(response, \"/lists/the-only-list-in-the-world/\")\n[...]\nAssertionError: 404 != 302 : Response didn't redirect as expected: Response\ncode was 404 (expected 302)\n```", "```py\nurlpatterns = [\n    path(\"\", views.home_page, name=\"home\"),\n    path(\"lists/new\", views.new_list, name=\"new_list\"),\n    path(\"lists/the-only-list-in-the-world/\", views.view_list, name=\"view_list\"),\n]\n```", "```py\ndef new_list(request):\n    pass\n```", "```py\ndef new_list(request):\n    return redirect(\"/lists/the-only-list-in-the-world/\")\n```", "```py\n    self.assertEqual(Item.objects.count(), 1)\nAssertionError: 0 != 1\n```", "```py\ndef new_list(request):\n    Item.objects.create(text=request.POST[\"item_text\"])\n    return redirect(\"/lists/the-only-list-in-the-world/\")\n```", "```py\nRan 7 tests in 0.030s\n\nOK\n```", "```py\n[...]\nAssertionError: '1: Buy milk' not found in ['1: Buy peacock feathers', '2: Buy\nmilk']\nRan 2 tests in 8.972s\nFAILED (failures=1)\n```", "```py\ndef home_page(request):\n    return render(request, \"home.xhtml\")\n```", "```py\nOK\n```", "```py\nRan 6 tests in 0.016s\nOK\n```", "```py\nERROR: test_can_start_a_todo_list\n[...]\n  File \"...goat-book/functional_tests/tests.py\", line 52, in\ntest_can_start_a_todo_list\n[...]\n    self.wait_for_row_in_list_table(\"1: Buy peacock feathers\")\n[...]\n    table = self.browser.find_element(By.ID, \"id_list_table\")\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n[...]\nselenium.common.exceptions.NoSuchElementException: Message: Unable to locate\nelement: [id=\"id_list_table\"]\n\nERROR: test_multiple_users_can_start_lists_at_different_urls (functional_tests.\ntests.NewVisitorTest.test_multiple_users_can_start_lists_at_different_urls)\n[...]\nselenium.common.exceptions.NoSuchElementException: Message: Unable to locate\nelement: [id=\"id_list_table\"]\n[...]\n\nRan 2 tests in 11.592s\nFAILED (errors=2)\n```", "```py\n    <form method=\"POST\" action=\"/lists/new\">\n```", "```py\nAssertionError: '1: Buy milk' not found in ['1: Buy peacock feathers', '2: Buy\nmilk']\n[...]\nFAILED (failures=1)\n```", "```py\n$ git status # 5 changed files\n$ git diff # URLs for forms x2, moved code in views + tests, new URL\n$ git commit -a\n```", "```py\n@@ -1,5 +1,5 @@\n from django.test import TestCase\n-from lists.models import Item\n+from lists.models import Item, List\n\n class HomePageTest(TestCase):\n@@ -35,20 +35,30 @@ class ListViewTest(TestCase):\n         self.assertContains(response, \"itemey 2\")\n\n-class ItemModelTest(TestCase):\n+class ListAndItemModelsTest(TestCase):\n     def test_saving_and_retrieving_items(self):\n+        mylist = List()\n+        mylist.save()\n+\n         first_item = Item()\n         first_item.text = \"The first (ever) list item\"\n+        first_item.list = mylist\n         first_item.save()\n\n         second_item = Item()\n         second_item.text = \"Item the second\"\n+        second_item.list = mylist\n         second_item.save()\n\n+        saved_list = List.objects.get()\n+        self.assertEqual(saved_list, mylist)\n+\n         saved_items = Item.objects.all()\n         self.assertEqual(saved_items.count(), 2)\n\n         first_saved_item = saved_items[0]\n         second_saved_item = saved_items[1]\n         self.assertEqual(first_saved_item.text, \"The first (ever) list item\")\n+        self.assertEqual(first_saved_item.list, mylist)\n         self.assertEqual(second_saved_item.text, \"Item the second\")\n+        self.assertEqual(second_saved_item.list, mylist)\n```", "```py\nImportError: cannot import name 'List' from 'lists.models'\n```", "```py\nAttributeError: 'List' object has no attribute 'save'\n```", "```py\ndjango.db.utils.OperationalError: no such table: lists_list\n```", "```py\n$ python manage.py makemigrations\nMigrations for 'lists':\n  lists/migrations/0003_list.py\n    - Create model List\n```", "```py\n    self.assertEqual(first_saved_item.list, mylist)\nAttributeError: 'Item' object has no attribute 'list'\n```", "```py\nfrom django.db import models\n\nclass List(models.Model):\n    pass\n\nclass Item(models.Model):\n    text = models.TextField(default=\"\")\n    list = models.TextField(default=\"\")\n```", "```py\n$ python manage.py test lists\n[...]\ndjango.db.utils.OperationalError: no such column: lists_item.list\n\n$ python manage.py makemigrations\nMigrations for 'lists':\n  lists/migrations/0004_item_list.py\n    - Add field list to item\n```", "```py\nAssertionError: 'List object (1)' != <List: List object (1)>\n```", "```py\nclass Item(models.Model):\n    text = models.TextField(default=\"\")\n    list = models.ForeignKey(List, default=None, on_delete=models.CASCADE)\n```", "```py\n$ rm lists/migrations/0004_item_list.py\n$ python manage.py makemigrations\nMigrations for 'lists':\n  lists/migrations/0004_item_list.py\n    - Add field list to item\n```", "```py\n$ python manage.py test lists\n[...]\nERROR: test_displays_all_list_items\ndjango.db.utils.IntegrityError: NOT NULL constraint failed: lists_item.list_id\n[...]\nERROR: test_redirects_after_POST\ndjango.db.utils.IntegrityError: NOT NULL constraint failed: lists_item.list_id\n[...]\nERROR: test_can_save_a_POST_request\ndjango.db.utils.IntegrityError: NOT NULL constraint failed: lists_item.list_id\n\nRan 6 tests in 0.021s\n\nFAILED (errors=3)\n```", "```py\nclass ListViewTest(TestCase):\n    [...]\n    def test_displays_all_list_items(self):\n        mylist = List.objects.create()\n        Item.objects.create(text=\"itemey 1\", list=mylist)\n        Item.objects.create(text=\"itemey 2\", list=mylist)\n```", "```py\n  File \"...goat-book/lists/tests.py\", line 19, in test_redirects_after_POST\n    response = self.client.post(\"/lists/new\", data={\"item_text\": \"A new list\nitem\"})\n[...]\n  File \"...goat-book/lists/views.py\", line 10, in new_list\n    Item.objects.create(text=request.POST[\"item_text\"])\n```", "```py\nfrom lists.models import Item, List\n[...]\n\ndef new_list(request):\n    nulist = List.objects.create()\n    Item.objects.create(text=request.POST[\"item_text\"], list=nulist)\n    return redirect(\"/lists/the-only-list-in-the-world/\")\n```", "```py\nRan 6 tests in 0.030s\n\nOK\n```", "```py\nAssertionError: '1: Buy milk' not found in ['1: Buy peacock feathers', '2: Buy\nmilk']\n[...]\n```", "```py\n$ git status # 3 changed files, plus 2 migrations\n$ git add lists\n$ git diff --staged\n$ git commit\n```", "```py\nclass ListViewTest(TestCase):\n    def test_uses_list_template(self):\n        mylist = List.objects.create()\n        response = self.client.get(f\"/lists/{mylist.id}/\")\n        self.assertTemplateUsed(response, \"list.xhtml\")\n\n    def test_displays_only_items_for_that_list(self):\n        correct_list = List.objects.create()\n        Item.objects.create(text=\"itemey 1\", list=correct_list)\n        Item.objects.create(text=\"itemey 2\", list=correct_list)\n        other_list = List.objects.create()\n        Item.objects.create(text=\"other list item\", list=other_list)\n\n        response = self.client.get(f\"/lists/{correct_list.id}/\")\n\n        self.assertContains(response, \"itemey 1\")\n        self.assertContains(response, \"itemey 2\")\n        self.assertNotContains(response, \"other list item\")\n```", "```py\nFAIL: test_displays_only_items_for_that_list\nAssertionError: 404 != 200 : Couldn't retrieve content: Response code was 404\n(expected 200)\n[...]\nFAIL: test_uses_list_template\nAssertionError: No templates used to render the response\n```", "```py\nurlpatterns = [\n    path(\"\", views.home_page, name=\"home\"),\n    path(\"lists/new\", views.new_list, name=\"new_list\"),\n    path(\"lists/<int:list_id>/\", views.view_list, name=\"view_list\"),\n]\n```", "```py\nERROR: test_displays_only_items_for_that_list\n[...]\nTypeError: view_list() got an unexpected keyword argument 'list_id'\n[...]\nERROR: test_uses_list_template\n[...]\nTypeError: view_list() got an unexpected keyword argument 'list_id'\n[...]\nFAIL: test_redirects_after_POST\n[...]\nAssertionError: 404 != 200 : Couldn't retrieve redirection page\n'/lists/the-only-list-in-the-world/': response code was 404 (expected 200)\n[...]\nFAILED (failures=1, errors=2)\n```", "```py\ndef view_list(request, list_id):\n    [...]\n```", "```py\nFAIL: test_displays_only_items_for_that_list\n[...]\nAssertionError: 1 != 0 : Response should not contain 'other list item'\n[...]\nFAIL: test_redirects_after_POST\nAssertionError: 404 != 200 : Couldn't retrieve redirection page\n'/lists/the-only-list-in-the-world/': response code was 404 (expected 200)\n```", "```py\ndef view_list(request, list_id):\n    our_list = List.objects.get(id=list_id)\n    items = Item.objects.filter(list=our_list)\n    return render(request, \"list.xhtml\", {\"items\": items})\n```", "```py\nFAIL: test_redirects_after_POST\n[...]\nAssertionError: 404 != 200 : Couldn't retrieve redirection page\n'/lists/the-only-list-in-the-world/': response code was 404 (expected 200)\n```", "```py\nclass NewListTest(TestCase):\n    [...]\n\n    def test_redirects_after_POST(self):\n        response = self.client.post(\"/lists/new\", data={\"item_text\": \"A new list item\"})\n        self.assertRedirects(response, \"/lists/the-only-list-in-the-world/\")\n```", "```py\n    def test_redirects_after_POST(self):\n        response = self.client.post(\"/lists/new\", data={\"item_text\": \"A new list item\"})\n        new_list = List.objects.get()\n        self.assertRedirects(response, f\"/lists/{new_list.id}/\")\n```", "```py\ndef new_list(request):\n    nulist = List.objects.create()\n    Item.objects.create(text=request.POST[\"item_text\"], list=nulist)\n    return redirect(f\"/lists/{nulist.id}/\")\n```", "```py\n$ python3 manage.py test lists\n[...]\n......\n ---------------------------------------------------------------------\nRan 6 tests in 0.033s\n\nOK\n```", "```py\nF.\n======================================================================\nFAIL: test_can_start_a_todo_list\n(functional_tests.tests.NewVisitorTest.test_can_start_a_todo_list)\n ---------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"...goat-book/functional_tests/tests.py\", line 63, in\ntest_can_start_a_todo_list\n    self.wait_for_row_in_list_table(\"2: Use peacock feathers to make a fly\")\n[...]\nAssertionError: '2: Use peacock feathers to make a fly' not found in ['1: Use\npeacock feathers to make a fly']\n\n ---------------------------------------------------------------------\nRan 2 tests in 8.617s\n\nFAILED (failures=1)\n```", "```py\nclass NewItemTest(TestCase):\n    def test_can_save_a_POST_request_to_an_existing_list(self):\n        other_list = List.objects.create()\n        correct_list = List.objects.create()\n\n        self.client.post(\n            f\"/lists/{correct_list.id}/add_item\",\n            data={\"item_text\": \"A new item for an existing list\"},\n        )\n\n        self.assertEqual(Item.objects.count(), 1)\n        new_item = Item.objects.get()\n        self.assertEqual(new_item.text, \"A new item for an existing list\")\n        self.assertEqual(new_item.list, correct_list)\n\n    def test_redirects_to_list_view(self):\n        other_list = List.objects.create()\n        correct_list = List.objects.create()\n\n        response = self.client.post(\n            f\"/lists/{correct_list.id}/add_item\",\n            data={\"item_text\": \"A new item for an existing list\"},\n        )\n\n        self.assertRedirects(response, f\"/lists/{correct_list.id}/\")\n```", "```py\nAssertionError: 0 != 1\n[...]\nAssertionError: 404 != 302 : Response didn't redirect as expected: Response\ncode was 404 (expected 302)\n```", "```py\nurlpatterns = [\n    path(\"\", views.home_page, name=\"home\"),\n    path(\"lists/new\", views.new_list, name=\"new_list\"),\n    path(\"lists/<int:list_id>/\", views.view_list, name=\"view_list\"),\n    path(\"lists/<int:list_id>/add_item\", views.add_item, name=\"add_item\"),\n]\n```", "```py\nAttributeError: module 'lists.views' has no attribute 'add_item'\n```", "```py\ndef add_item(request):\n    pass\n```", "```py\nTypeError: add_item() got an unexpected keyword argument 'list_id'\n```", "```py\ndef add_item(request, list_id):\n    pass\n```", "```py\nValueError: The view lists.views.add_item didn't return an HttpResponse object.\nIt returned None instead.\n```", "```py\ndef add_item(request, list_id):\n    our_list = List.objects.get(id=list_id)\n    return redirect(f\"/lists/{our_list.id}/\")\n```", "```py\n    self.assertEqual(Item.objects.count(), 1)\nAssertionError: 0 != 1\n```", "```py\ndef add_item(request, list_id):\n    our_list = List.objects.get(id=list_id)\n    Item.objects.create(text=request.POST[\"item_text\"], list=our_list)\n    return redirect(f\"/lists/{our_list.id}/\")\n```", "```py\nRan 8 tests in 0.050s\n\nOK\n```", "```py\n    <form method=\"POST\" action=\"but what should we put here?\">\n```", "```py\n    <form method=\"POST\" action=\"/lists/{{ list.id }}/add_item\">\n```", "```py\n    def test_passes_correct_list_to_template(self):\n        other_list = List.objects.create()\n        correct_list = List.objects.create()\n        response = self.client.get(f\"/lists/{correct_list.id}/\")\n        self.assertEqual(response.context[\"list\"], correct_list)  ![1](assets/1.png)\n```", "```py\n    self.assertEqual(response.context[\"list\"], correct_list)\n                     ~~~~~~~~~~~~~~~~^^^^^^^^\n[...]\nKeyError: 'list'\n```", "```py\ndef view_list(request, list_id):\n    our_list = List.objects.get(id=list_id)\n    return render(request, \"list.xhtml\", {\"list\": our_list})\n```", "```py\nFAIL: test_displays_only_items_for_that_list\n[...]\nAssertionError: False is not true : Couldn't find 'itemey 1' in response\n```", "```py\n    <form method=\"POST\" action=\"/lists/{{ list.id }}/add_item\">  ![1](assets/1.png) [...]\n\n      {% for item in list.item_set.all %} ![2](assets/2.png)\n        <tr><td>{{ forloop.counter }}: {{ item.text }}</td></tr> {% endfor %}\n```", "```py\nRan 9 tests in 0.040s\n\nOK\n```", "```py\n$ python manage.py test functional_tests\n[...]\n..\n ---------------------------------------------------------------------\nRan 2 tests in 9.771s\n\nOK\n```", "```py\n$ git diff\n$ git commit -am \"new URL + view for adding to existing lists. FT passes :-)\"\n```", "```py\n$ cp superlists/urls.py lists/\n```", "```py\nfrom django.urls import include, path\nfrom lists import views as list_views  ![1](assets/1.png)\n\nurlpatterns = [\n    path(\"\", list_views.home_page, name=\"home\"),\n    path(\"lists/\", include(\"lists.urls\")),  ![2](assets/2.png)\n]\n```", "```py\nfrom django.urls import path\nfrom lists import views\n\nurlpatterns = [\n    path(\"new\", views.new_list, name=\"new_list\"),\n    path(\"<int:list_id>/\", views.view_list, name=\"view_list\"),\n    path(\"<int:list_id>/add_item\", views.add_item, name=\"add_item\"),\n]\n```", "```py\nRan 9 tests in 0.040s\n\nOK\n```", "```py\n$ git status\n$ git add lists/urls.py\n$ git add superlists/urls.py\n$ git diff --staged\n$ git commit\n```"]