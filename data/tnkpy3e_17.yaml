- en: 15\. Classes and Methods#
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15\. 类与方法#
- en: 原文：[https://allendowney.github.io/ThinkPython/chap15.html](https://allendowney.github.io/ThinkPython/chap15.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://allendowney.github.io/ThinkPython/chap15.html](https://allendowney.github.io/ThinkPython/chap15.html)
- en: 'Python is an **object-oriented language** – that is, it provides features that
    support object-oriented programming, which has these defining characteristics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种**面向对象的语言**——也就是说，它提供支持面向对象编程的特性，具有以下这些定义性特征：
- en: Most of the computation is expressed in terms of operations on objects.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大部分计算是通过对对象执行操作来表达的。
- en: Objects often represent things in the real world, and methods often correspond
    to the ways things in the real world interact.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象通常代表现实世界中的事物，方法通常对应于现实世界中事物之间的交互方式。
- en: Programs include class and method definitions.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序包括类和方法的定义。
- en: For example, in the previous chapter we defined a `Time` class that corresponds
    to the way people record the time of day, and we defined functions that correspond
    to the kinds of things people do with times. But there was no explicit connection
    between the definition of the `Time` class and the function definitions that follow.
    We can make the connection explicit by rewriting a function as a **method**, which
    is defined inside a class definition.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在上一章中我们定义了一个`Time`类，它对应了人们记录时间的方式，并且我们定义了对应于人们与时间交互的功能。但`Time`类的定义和接下来的函数定义之间没有明确的联系。我们可以通过将函数重写为**方法**来明确这种联系，方法是在类定义内部定义的。
- en: 15.1\. Defining methods[#](#defining-methods "Link to this heading")
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.1\. 定义方法[#](#defining-methods "Link to this heading")
- en: In the previous chapter we defined a class named `Time` and wrote a function
    named `print_time` that displays a time of day.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们定义了一个名为`Time`的类，并编写了一个名为`print_time`的函数，用于显示一天中的时间。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To make `print_time` a method, all we have to do is move the function definition
    inside the class definition. Notice the change in indentation.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将`print_time`变成一个方法，我们所需要做的就是将函数定义移到类定义内部。请注意缩进的变化。
- en: At the same time, we’ll change the name of the parameter from `time` to `self`.
    This change is not necessary, but it is conventional for the first parameter of
    a method to be named `self`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，我们会将参数名称从`time`改为`self`。这个改变不是必须的，但在方法的第一个参数通常命名为`self`。
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To call this method, you have to pass a `Time` object as an argument. Here’s
    the function we’ll use to make a `Time` object.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用这个方法，你必须传递一个`Time`对象作为参数。这里是我们用来创建`Time`对象的函数。
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And here’s a `Time` instance.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个`Time`实例。
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now there are two ways to call `print_time`. The first (and less common) way
    is to use function syntax.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有两种方式调用`print_time`。第一种（不太常见）是使用函数语法。
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this version, `Time` is the name of the class, `print_time` is the name
    of the method, and `start` is passed as a parameter. The second (and more idiomatic)
    way is to use method syntax:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本中，`Time`是类的名称，`print_time`是方法的名称，`start`作为参数传递。第二种（更符合惯例）是使用方法语法：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this version, `start` is the object the method is invoked on, which is called
    the **receiver**, based on the analogy that invoking a method is like sending
    a message to an object.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本中，`start`是调用方法的对象，称为**接收者**，这个术语来源于将方法调用比作向对象发送消息的类比。
- en: Regardless of the syntax, the behavior of the method is the same. The receiver
    is assigned to the first parameter, so inside the method, `self` refers to the
    same object as `start`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不管语法如何，该方法的行为是相同的。接收者被赋值为第一个参数，因此在方法内部，`self`指向与`start`相同的对象。
- en: 15.2\. Another method[#](#another-method "Link to this heading")
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.2\. 另一种方法[#](#another-method "Link to this heading")
- en: Here’s the `time_to_int` function from the previous chapter.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是上一章的`time_to_int`函数。
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: And here’s a version rewritten as a method.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是将其重写为方法的版本。
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The first line uses the special command `add_method_to`, which adds a method
    to a previously-defined class. This command works in a Jupyter notebook, but it
    is not part of Python, so it won’t work in other environments. Normally, all methods
    of a class are inside the class definition, so they get defined at the same time
    as the class. But for this book, it is helpful to define one method at a time.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行使用了特殊命令`add_method_to`，它将方法添加到先前定义的类中。此命令在Jupyter笔记本中有效，但它不是Python的一部分，因此在其他环境中无法使用。通常，类的所有方法都在类定义内部，这样它们与类一起定义。但是为了本书的方便，我们一次定义一个方法。
- en: As in the previous example, the method definition is indented and the name of
    the parameter is `self`. Other than that, the method is identical to the function.
    Here’s how we invoke it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如同前一个示例，方法定义是缩进的，参数名是`self`。除此之外，方法与函数是相同的。下面是我们如何调用它。
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It is common to say that we “call” a function and “invoke” a method, but they
    mean the same thing.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通常我们说“调用”一个函数和“调用”一个方法，但它们的意思是一样的。
- en: 15.3\. Static methods[#](#static-methods "Link to this heading")
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.3\. 静态方法[#](#static-methods "链接到此标题")
- en: As another example, let’s consider the `int_to_time` function. Here’s the version
    from the previous chapter.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 作为另一个示例，假设我们考虑`int_to_time`函数。下面是上一章中的版本。
- en: '[PRE12]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This function takes `seconds` as a parameter and returns a new `Time` object.
    If we transform it into a method of the `Time` class, we have to invoke it on
    a `Time` object. But if we’re trying to create a new `Time` object, what are we
    supposed to invoke it on?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数接受`seconds`作为参数，并返回一个新的`Time`对象。如果我们将它转换为`Time`类的方法，我们必须在`Time`对象上调用它。但如果我们试图创建一个新的`Time`对象，我们应该在什么上调用它呢？
- en: We can solve this chicken-and-egg problem using a **static method**, which is
    a method that does not require an instance of the class to be invoked. Here’s
    how we rewrite this function as a static method.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用**静态方法**来解决这个鸡生蛋问题，静态方法是一种不需要类的实例即可调用的方法。下面是我们如何将这个函数重写为静态方法。
- en: '[PRE13]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Because it is a static method, it does not have `self` as a parameter. To invoke
    it, we use `Time`, which is the class object.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它是一个静态方法，所以它没有`self`作为参数。要调用它，我们使用`Time`，即类对象。
- en: '[PRE14]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The result is a new object that represents 9:40.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个新对象，表示9:40。
- en: '[PRE15]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now that we have `Time.from_seconds`, we can use it to write `add_time` as a
    method. Here’s the function from the previous chapter.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们有了`Time.from_seconds`，我们可以利用它将`add_time`写成一个方法。下面是上一章的函数。
- en: '[PRE17]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: And here’s a version rewritten as a method.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是重写成方法的版本。
- en: '[PRE18]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`add_time` has `self` as a parameter because it is not a static method. It
    is an ordinary method – also called an **instance method**. To invoke it, we need
    a `Time` instance.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`add_time`有`self`作为参数，因为它不是静态方法。它是一个普通方法——也叫做**实例方法**。要调用它，我们需要一个`Time`实例。'
- en: '[PRE19]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 15.4\. Comparing Time objects[#](#comparing-time-objects "Link to this heading")
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.4\. 比较时间对象[#](#comparing-time-objects "链接到此标题")
- en: As one more example, let’s write `is_after` as a method. Here’s the `is_after`
    function, which is a solution to an exercise in the previous chapter.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 作为另一个示例，假设我们将`is_after`写成一个方法。下面是`is_after`函数，这是上一章练习的一个解答。
- en: '[PRE21]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: And here it is as a method.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是作为方法的版本。
- en: '[PRE22]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Because we’re comparing two objects, and the first parameter is `self`, we’ll
    call the second parameter `other`. To use this method, we have to invoke it on
    one object and pass the other as an argument.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们在比较两个对象，而第一个参数是`self`，所以我们将第二个参数命名为`other`。要使用这个方法，我们必须在一个对象上调用它，并将另一个对象作为参数传入。
- en: '[PRE23]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: One nice thing about this syntax is that it almost reads like a question, “`end`
    is after `start`?”
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语法的一个优点是，它几乎像在问一个问题：“`end` 在 `start` 之后吗？”
- en: 15.5\. The `__str__` method[#](#the-str-method "Link to this heading")
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.5\. `__str__`方法[#](#the-str-method "链接到此标题")
- en: When you write a method, you can choose almost any name you want. However, some
    names have special meanings. For example, if an object has a method named `__str__`,
    Python uses that method to convert the object to a string. For example, here is
    a `__str__` method for a time object.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写方法时，你几乎可以选择任何你想要的名字。然而，某些名字有特殊的含义。例如，如果一个对象有一个名为`__str__`的方法，Python会使用这个方法将对象转换为字符串。例如，下面是一个时间对象的`__str__`方法。
- en: '[PRE25]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This method is similar to `print_time`, from the previous chapter, except that
    it returns the string rather than printing it.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法与上一章的`print_time`类似，不同之处在于它返回字符串而不是打印它。
- en: You can invoke this method in the usual way.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用通常的方式调用这个方法。
- en: '[PRE26]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: But Python can also invoke it for you. If you use the built-in function `str`
    to convert a `Time` object to a string, Python uses the `__str__` method in the
    `Time` class.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 但Python也可以为你调用它。如果你使用内置函数`str`将一个`Time`对象转换为字符串，Python会使用`Time`类中的`__str__`方法。
- en: '[PRE28]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: And it does the same if you print a `Time` object.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打印一个`Time`对象，它也会做相同的事情。
- en: '[PRE30]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Methods like `__str__` are called **special methods**. You can identify them
    because their names begin and end with two underscores.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 像`__str__`这样的函数被称为**特殊方法**。你可以通过它们的名字来识别它们，因为它们的名称前后都有两个下划线。
- en: 15.6\. The **init** method[#](#the-init-method "Link to this heading")
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.6\. **init**方法[#](#the-init-method "链接到此标题")
- en: 'The most special of the special methods is `__init__`, so-called because it
    initializes the attributes of a new object. An `__init__` method for the `Time`
    class might look like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最特殊的特殊方法是`__init__`，之所以如此称呼，是因为它初始化了新对象的属性。`Time`类的一个`__init__`方法可能是这样的：
- en: '[PRE32]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Now when we instantiate a `Time` object, Python invokes `__init__`, and passes
    along the arguments. So we can create an object and initialize the attributes
    at the same time.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们实例化一个`Time`对象时，Python会调用`__init__`并传递参数。因此，我们可以在创建对象的同时初始化属性。
- en: '[PRE33]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In this example, the parameters are optional, so if you call `Time` with no
    arguments, you get the default values.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，参数是可选的，因此如果你调用`Time`时不传递任何参数，你将获得默认值。
- en: '[PRE35]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If you provide one argument, it overrides `hour`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你提供一个参数，它将覆盖`hour`：
- en: '[PRE37]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: If you provide two arguments, they override `hour` and `minute`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你提供两个参数，它们将覆盖`hour`和`minute`。
- en: '[PRE39]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: And if you provide three arguments, they override all three default values.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你提供三个参数，它们将覆盖所有三个默认值。
- en: When I write a new class, I almost always start by writing `__init__`, which
    makes it easier to create objects, and `__str__`, which is useful for debugging.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当我编写一个新的类时，我几乎总是从编写`__init__`开始，这使得创建对象变得更容易，以及`__str__`，它对于调试非常有用。
- en: 15.7\. Operator overloading[#](#operator-overloading "Link to this heading")
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.7\. 运算符重载[#](#operator-overloading "Link to this heading")
- en: By defining other special methods, you can specify the behavior of operators
    on programmer-defined types. For example, if you define a method named `__add__`
    for the `Time` class, you can use the `+` operator on Time objects.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 通过定义其他特殊方法，你可以指定运算符在程序员定义类型上的行为。例如，如果你为`Time`类定义一个名为`__add__`的方法，你就可以在`Time`对象上使用`+`运算符。
- en: Here is an `__add__` method.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个`__add__`方法。
- en: '[PRE41]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We can use it like this.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像这样使用它。
- en: '[PRE42]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'There is a lot happening when we run these three lines of code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这三行代码时，发生了很多事情：
- en: When we instantiate a `Time` object, the `__init__` method is invoked.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们实例化一个`Time`对象时，`__init__`方法被调用。
- en: When we use the `+` operator with a `Time` object, its `__add__` method is invoked.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们在`Time`对象上使用`+`运算符时，它的`__add__`方法被调用。
- en: And when we print a `Time` object, its `__str__` method is invoked.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们打印一个`Time`对象时，它的`__str__`方法被调用。
- en: Changing the behavior of an operator so that it works with programmer-defined
    types is called **operator overloading**. For every operator, like `+`, there
    is a corresponding special method, like `__add__`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 改变运算符的行为，使其与程序员定义的类型一起工作，这被称为**运算符重载**。对于每个运算符，比如`+`，都有一个相应的特殊方法，如`__add__`。
- en: 15.8\. Debugging[#](#debugging "Link to this heading")
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.8\. 调试[#](#debugging "Link to this heading")
- en: A `Time` object is valid if the values of `minute` and `second` are between
    `0` and `60` – including `0` but not `60` – and if `hour` is positive. Also, `hour`
    and `minute` should be integer values, but we might allow `second` to have a fraction
    part. Requirements like these are called **invariants** because they should always
    be true. To put it a different way, if they are not true, something has gone wrong.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`minute`和`second`的值在`0`到`60`之间（包括`0`但不包括`60`），并且`hour`是正数，则`Time`对象是有效的。此外，`hour`和`minute`应该是整数，但我们可能允许`second`有小数部分。像这样的要求被称为**不变量**，因为它们应该始终为真。换句话说，如果它们不为真，那就意味着出了问题。
- en: Writing code to check invariants can help detect errors and find their causes.
    For example, you might have a method like `is_valid` that takes a Time object
    and returns `False` if it violates an invariant.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 编写代码来检查不变量可以帮助检测错误并找出其原因。例如，你可能有一个名为`is_valid`的方法，它接受一个`Time`对象，如果它违反了不变量，返回`False`。
- en: '[PRE44]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Then, at the beginning of each method you can check the arguments to make sure
    they are valid.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在每个方法的开始部分，你可以检查参数，以确保它们是有效的。
- en: '[PRE45]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The `assert` statement evaluates the expression that follows. If the result
    is `True`, it does nothing; if the result is `False`, it causes an `AssertionError`.
    Here’s an example.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`assert`语句会计算后面的表达式。如果结果为`True`，它什么都不做；如果结果为`False`，则会引发`AssertionError`。这里是一个例子。'
- en: '[PRE46]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '`assert` statements are useful because they distinguish code that deals with
    normal conditions from code that checks for errors.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`assert`语句很有用，因为它们区分了处理正常情况的代码和检查错误的代码。'
- en: 15.9\. Glossary[#](#glossary "Link to this heading")
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.9\. 词汇表[#](#glossary "Link to this heading")
- en: '**object-oriented language:** A language that provides features to support
    object-oriented programming, notably user-defined types.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**面向对象语言：** 一种提供支持面向对象编程特性的语言，特别是用户定义类型。'
- en: '**method:** A function that is defined inside a class definition and is invoked
    on instances of that class.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**方法（method）：** 定义在类中的函数，并在该类的实例上调用。'
- en: '**receiver:** The object a method is invoked on.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**接收者（receiver）：** 方法所调用的对象。'
- en: '**static method:** A method that can be invoked without an object as receiver.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**静态方法（static method）：** 可以在没有对象作为接收者的情况下调用的方法。'
- en: '**instance method:** A method that must be invoked with an object as receiver.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**实例方法（instance method）：** 必须在一个对象上调用的方法。'
- en: '**special method:** A method that changes the way operators and some functions
    work with an object.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**特殊方法（special method）：** 改变运算符和某些函数与对象交互方式的方法。'
- en: '**operator overloading:** The process of using special methods to change the
    way operators with with user-defined types.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**运算符重载（operator overloading）：** 使用特殊方法改变运算符与用户自定义类型之间的交互方式。'
- en: '**invariant:** A condition that should always be true during the execution
    of a program.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**不变式（invariant）：** 程序执行过程中始终应该为真的条件。'
- en: 15.10\. Exercises[#](#exercises "Link to this heading")
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.10\. 练习[#](#exercises "Link to this heading")
- en: '[PRE50]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 15.10.1\. Ask a virtual assistant[#](#ask-a-virtual-assistant "Link to this
    heading")
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.10.1\. 向虚拟助手提问[#](#ask-a-virtual-assistant "Link to this heading")
- en: 'For more information about static methods, ask a virtual assistant:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多关于静态方法的信息，可以向虚拟助手询问：
- en: “What’s the difference between an instance method and a static method?”
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “实例方法和静态方法有什么区别？”
- en: “Why are static methods called static?”
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “为什么静态方法被称为静态方法？”
- en: If you ask a virtual assistant to generate a static method, the result will
    probably begin with `@staticmethod`, which is a “decorator” that indicates that
    it is a static method. Decorators are not covered in this book, but if you are
    curious, you can ask a VA for more information.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你请求虚拟助手生成一个静态方法，结果可能会以`@staticmethod`开头，这是一种“装饰器”，表示这是一个静态方法。本书没有涉及装饰器的内容，但如果你感兴趣，可以向虚拟助手询问更多信息。
- en: In this chapter we rewrote several functions as methods. Virtual assistants
    are generally good at this kind of code transformation. As an example, paste the
    following function into a VA and ask it, “Rewrite this function as a method of
    the `Time` class.”
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将几个函数重写为方法。虚拟助手通常擅长这种代码转换。举个例子，将以下函数粘贴到虚拟助手中，并询问：“将此函数重写为`Time`类的方法。”
- en: '[PRE51]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 15.10.2\. Exercise[#](#exercise "Link to this heading")
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.10.2\. 练习[#](#exercise "Link to this heading")
- en: In the previous chapter, a series of exercises asked you to write a `Date` class
    and several functions that work with `Date` objects. Now let’s practice rewriting
    those functions as methods.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，一系列练习要求你编写一个`Date`类和一些与`Date`对象一起使用的函数。现在，让我们练习将这些函数重写为方法。
- en: Write a definition for a `Date` class that represents a date – that is, a year,
    month, and day of the month.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个`Date`类的定义，用于表示一个日期——即一个年份、月份和日期。
- en: Write an `__init__` method that takes `year`, `month`, and `day` as parameters
    and assigns the parameters to attributes. Create an object that represents June
    22, 1933.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个`__init__`方法，接受`year`、`month`和`day`作为参数，并将这些参数赋值给属性。创建一个表示1933年6月22日的对象。
- en: Write `__str__` method that uses an f-string to format the attributes and returns
    the result. If you test it with the `Date` you created, the result should be `1933-06-22`.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写`__str__`方法，使用f-string格式化属性并返回结果。如果你用你创建的`Date`对象进行测试，结果应该是`1933-06-22`。
- en: Write a method called `is_after` that takes two `Date` objects and returns `True`
    if the first comes after the second. Create a second object that represents September
    17, 1933, and check whether it comes after the first object.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个名为`is_after`的方法，接受两个`Date`对象，如果第一个对象的日期晚于第二个对象，则返回`True`。创建一个表示1933年9月17日的第二个对象，并检查它是否晚于第一个对象。
- en: 'Hint: You might find it useful write a method called `to_tuple` that returns
    a tuple that contains the attributes of a `Date` object in year-month-day order.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：你可能会发现编写一个名为`to_tuple`的方法很有用，它返回一个包含`Date`对象属性（以年-月-日顺序）的元组。
- en: '[Think Python: 3rd Edition](https://allendowney.github.io/ThinkPython/index.html)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[Think Python: 第3版](https://allendowney.github.io/ThinkPython/index.html)'
- en: Copyright 2024 [Allen B. Downey](https://allendowney.com)
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 版权所有 2024 [Allen B. Downey](https://allendowney.com)
- en: 'Code license: [MIT License](https://mit-license.org/)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 代码许可证：[MIT许可证](https://mit-license.org/)
- en: 'Text license: [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 文字许可证：[创作共用许可证 署名-非商业性使用-相同方式共享 4.0 国际](https://creativecommons.org/licenses/by-nc-sa/4.0/)
