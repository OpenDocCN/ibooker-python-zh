- en: Chapter 24\. Mutation Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第24章 突变测试
- en: 'When weaving your safety net of static analysis and tests, how do you know
    that you are testing as much as you can? Testing absolutely everything is impossible;
    you need to be smart in what tests you write. Envision each test as a separate
    strand in your safety net: the more tests you have, the wider your net. However,
    this doesn’t inherently mean that your net is well-constructed. A safety net with
    fraying, brittle strands is worse than no safety net at all; it gives the illusion
    of safety and provides false confidence.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编织静态分析和测试的安全网时，你如何知道你是否尽可能多地进行了测试？测试绝对所有内容是不可能的；你需要在编写测试时聪明地选择。设想每个测试都是安全网中的一根单独的绳索：你拥有的测试越多，你的网越宽。然而，这并不意味着你的安全网就一定构建得很好。一张由破旧、脆弱绳索编织的安全网比没有安全网更糟糕；它会产生安全的错觉，并提供虚假的信心。
- en: The goal is to strengthen your safety net so that it is not brittle. You need
    a way to make sure your tests will actually fail when there are bugs in your code.
    In this chapter, you will learn how to do just that with mutation testing. You’ll
    learn how to perform mutation testing with a Python tool called `mutmut`. You’ll
    use mutation testing to inspect the relation between your tests and code. Finally,
    you’ll learn about code coverage tools, how best to use those tools, and how to
    integrate `mutmut` with your coverage reports. Learning how to do mutation testing
    will give you a way to measure how effective your tests are.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是加强你的安全网，使其不易破损。你需要一种方式确保当代码中存在 bug 时，你的测试确实能失败。在本章中，你将学习如何通过突变测试来做到这一点。你将学习如何使用一个名为
    `mutmut` 的 Python 工具进行突变测试。你将使用突变测试来检查你的测试与代码之间的关系。最后，你将了解代码覆盖工具，如何最佳地使用这些工具，以及如何将
    `mutmut` 与你的覆盖报告集成。学习如何进行突变测试将为你提供一种衡量你的测试有效性的方法。
- en: What Is Mutation Testing?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是突变测试？
- en: '*Mutation testing* is the act of making changes in your source code with the
    intent of introducing bugs.^([1](part0030_split_007.html#idm45644723126456)) Each
    change you make in this fashion is known as a *mutant*. You then run your test
    suite. If the tests fail, it’s good news; your tests were successful in eliminating
    the mutant. However, if your tests pass, that means your tests are not robust
    enough to catch legitimate failures; the mutant survives. Mutation testing is
    a form of *meta-testing*, in that you are testing how good your tests are. After
    all, your test code should be a first-class citizen in your codebase; it requires
    some level of testing as well.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*突变测试* 是有意在源代码中引入 bug 的操作。^([1](part0030_split_007.html#idm45644723126456))
    你每次以这种方式进行的更改称为 *突变体*。然后你运行你的测试套件。如果测试失败，那是好消息；你的测试成功消除了突变体。但是，如果你的测试通过了，这意味着你的测试不够强大，无法捕获合法的失败；突变体存活了下来。突变测试是一种
    *元测试* 形式，因为你在测试你的测试有多好。毕竟，你的测试代码应该是代码库中的一等公民；它也需要一定程度的测试。'
- en: 'Consider a simple calorie-tracking app. A user can input a set of meals and
    get notified if they exceed their calorie budget for the day. The core functionality
    is implemented in the following function:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个简单的卡路里追踪应用程序。用户可以输入一系列餐食，并在超出他们每日卡路里预算时收到通知。核心功能由以下函数实现：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is a set of tests for this functionality, all of which pass:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一组针对此功能的测试，全部通过了：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As a thought exercise, I’d like you to look over these tests (ignoring the fact
    that this is a chapter about mutation testing) and ask yourself what your opinion
    would be if you found these tests in production. How confident are you that they
    are right? How confident are you that I didn’t miss anything? How confident are
    you that these tests will catch bugs if the code changes?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个思维练习，我希望你能审视这些测试（暂且不论这是关于突变测试的一章），并问问自己如果在生产环境中发现这些测试，你的观点会是什么。你对它们的正确性有多大信心？你确信我没有漏掉任何东西吗？你相信这些测试能在代码变更时捕获错误吗？
- en: The central theme of this book is that software will always change. You need
    to make it easy for your future collaborators to maintain your codebase in spite
    of this change. You need to write tests that catch not only errors in what you
    wrote, but errors other developers make as they change your code.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的核心主题是软件将会不断变化。你需要让你未来的合作者能够轻松地维护你的代码库，尽管这些变化。你需要编写不仅可以捕获你所写内容中的错误，还能捕获其他开发者在修改你的代码时产生的错误的测试。
- en: It doesn’t matter if a future developer is refactoring the method to use a common
    library, changing a single line, or adding more functionality to the code; you
    want your tests to catch any errors that they introduced. To get into the mindset
    of mutation testing, you need to think about all the possible changes that can
    be made to the code and check if your tests would catch any erroneous change.
    [Table 24-1](part0030_split_001.html#manual_mutation) breaks down the above code
    line by line and shows the outcome of the tests if that line is missing.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 无论未来的开发人员是重构方法以使用常用库，更改单个行还是向代码添加更多功能，您希望您的测试都能捕捉到他们引入的任何错误。要进入变异测试的思维方式，您需要考虑可能对代码进行的所有更改，并检查您的测试是否能捕捉到任何错误的变化。[表24-1](part0030_split_001.html#manual_mutation)逐行分解上述代码，并显示如果缺少该行，则测试的结果。
- en: Table 24-1\. Impact of each line removed
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 表24-1。删除每一行的影响
- en: '| Code line | Impact if removed |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 代码行 | 删除后的影响 |'
- en: '| --- | --- |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `for meal in meals:` | Tests fail: Syntax errors and code does no looping
    |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `for meal in meals:` | 测试失败：语法错误，代码不执行循环 |'
- en: '| `target -= meal.calories` | Tests fail: no warnings are ever displayed |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `target -= meal.calories` | 测试失败：从未显示任何警告 |'
- en: '| `if target < 0` | Tests fail: all meals show a warning |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `if target < 0` | 测试失败：所有餐点显示警告 |'
- en: '| `display_warning(meal, WarningType.OVER_CALO⁠RIE_LIMIT)` | Tests fail: no
    warnings are shown |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `display_warning(meal, WarningType.OVER_CALO⁠RIE_LIMIT)` | 测试失败：未显示任何警告 |'
- en: '| `continue` | Tests pass |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `continue` | 测试通过 |'
- en: '| `display_checkmark(meal)` | Tests fail: checkmarks are not displayed on meals
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `display_checkmark(meal)` | 测试失败：餐点上没有显示勾号 |'
- en: 'Look at the row in [Table 24-1](part0030_split_001.html#manual_mutation) for
    the `continue` statement. If I delete that line, all tests pass. This means one
    of three scenarios occurred: the line isn’t needed; the line is needed, but not
    important enough to test; or there is missing coverage in our test suite.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[表24-1](part0030_split_001.html#manual_mutation)中`continue`语句所在的行。如果删除该行，则所有测试都通过。这意味着发生了三种情况之一：该行不需要；该行是需要的，但不重要到需要进行测试；或者我们的测试套件中存在覆盖不足。
- en: The first two scenarios are easy to handle. If the line isn’t needed, delete
    it. If the line isn’t important enough to test (this is common for things such
    as debug logging statements or version strings), you can ignore mutation testing
    on this line. But, if the third scenario is true, you are missing test coverage.
    You have found a hole in your safety net.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 前两种情况很容易处理。如果不需要该行，请删除它。如果该行不重要到需要进行测试（这在诸如调试日志语句或版本字符串等情况下很常见），则可以忽略对此行的变异测试。但是，如果第三种情况属实，则意味着测试覆盖率不足。你发现了安全网中的一个漏洞。
- en: If `continue` is removed from the algorithm, both a checkmark and a warning
    will show up on any meal that is over the calorie limit. This is not ideal behavior;
    this is a signal that I should have a test to cover for this case. If I were to
    just add an assertion that meals with warnings also have no checkmarks, then our
    test suite would have caught this mutant.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从算法中删除`continue`，则在超过卡路里限制的任何餐点上将显示一个勾号和一个警告。这不是理想的行为；这是一个信号，表明我应该有一个测试来覆盖这种情况。如果我只是添加一个断言，即带有警告的餐点也没有勾号，那么我们的测试套件就会捕捉到这个变异。
- en: Deleting lines is just one example of a mutation. There are numerous other mutants
    I could apply to the code above. As a matter of fact, if I change the `continue`
    to a `break`, the tests still pass. Going through every mutation I can think of
    is tedious, so I want an automated tool to do this process for me. Enter `mutmut`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 删除行只是变异的一个示例。我可以对上述代码应用许多其他的变异。事实上，如果我将`continue`改为`break`，测试仍然通过。浏览我可以想到的每个变异是件令人厌烦的事情，所以我希望有一个自动化工具来为我完成这个过程。进入`mutmut`。
- en: Mutation Testing with mutmut
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用mutmut进行变异测试
- en: '[`mutmut`](https://pypi.org/project/mutmut) is a Python tool that does mutation
    testing for you. It comes with a pre-programmed set of mutations to apply to your
    codebase, such as:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[`mutmut`](https://pypi.org/project/mutmut)是一个Python工具，用于为您进行变异测试。它附带了一组预编程的变异，可以应用于您的代码库，例如：'
- en: Finding integer literals and adding 1 to them to catch off-by-one errors
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找整数字面量并将其加1以捕捉偏移一个错误
- en: Changing string literals by inserting text inside them
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在字符串字面量中插入文本来更改字符串字面量
- en: Exchanging `break` and `continue`
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交换`break`和`continue`
- en: Exchanging `True` and `False`
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交换`True`和`False`
- en: Negating expressions, such as converting `x is None` to `x is not None`
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否定表达式，例如将`x is None`转换为`x is not None`
- en: Changing operators (especially changing from `/` to `//`)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改运算符（特别是从`/`到`//`）
- en: This is by no means a comprehensive list; `mutmut` has quite a few clever ways
    of mutating your code. It works by making discrete mutations, running your test
    suite for you, and then displaying which mutants survived the testing process.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝不是一个全面的列表；`mutmut`有很多巧妙的方式来变异你的代码。它通过进行离散变异，运行你的测试套件，然后显示哪些变异在测试过程中存活下来。
- en: 'To get started, you need to install `mutmut`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用，您需要安装`mutmut`：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, you run `mutmut` against all your tests (warning, this can take some
    time). You can run `mutmut` on my code snippet above with the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你运行`mutmut`对所有测试进行测试（警告，这可能需要一些时间）。你可以使用以下命令在我上面的代码片段上运行`mutmut`：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: For long-running tests and large codebases, you may want to break up your `mutmut`
    runs, as they do take some time. However, `mutmut` is intelligent enough to save
    its progress in a folder called *.mutmut-cache*, so if you exit in the middle,
    it will pick up execution at the same point on future runs.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于长时间运行的测试和大型代码库，你可能需要将`mutmut`运行分开，因为它确实需要一些时间。然而，`mutmut`足够智能，可以将其进度保存到名为*.mutmut-cache*的文件夹中，因此如果中途退出，未来的运行将从相同的点继续执行。
- en: '`mutmut` will display some statistics as it runs, including the number of surviving
    mutants, the number of eliminated mutants, and which tests were taking a suspiciously
    long time (such as accidentally introducing an infinite loop).'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`mutmut`在运行时会显示一些统计信息，包括存活的变异数量、被消除的变异数量以及哪些测试耗时过长（例如意外引入无限循环）。'
- en: Once execution completes, you can view the results with `mutmut results`. In
    my code snippet, `mutmut` identifies three surviving mutants. It will list mutants
    as numeric IDs, and you can show the specific mutant with the `mutmut show <id>`
    command.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 执行完成后，你可以使用`mutmut results`查看结果。在我的代码片段中，`mutmut`识别出三个存活的变异。它将变异列为数字ID，你可以使用`mutmut
    show <id>`命令显示具体的变异。
- en: 'Here are the three mutants that survived in my code snippet:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我代码片段中存活的三个变异：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In each example, `mutmut` shows the result in *diff notation*, which is a way
    of representing the changes of a file from one changeset to another. In this case,
    any line prefixed with a minus sign “-” indicates a line that got changed by `mutmut`.
    Lines starting with a plus sign “+” are the change that `mutmut` made; these are
    your mutants.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个示例中，`mutmut`以*差异符号*显示结果，这是一种表示文件从一个变更集到另一个变更集变化的方法。在这种情况下，任何以减号“-”开头的行表示由`mutmut`更改的行；以加号“+”开头的行是`mutmut`进行的更改；这些就是你的变异。
- en: Each of these cases is a potential hole in my testing. By changing `<=` to `<`,
    I find out I don’t have coverage for when the calories of a meal exactly match
    the target. By changing `0` to `1`, I find out that I don’t have coverage at the
    boundaries of my input domain (refer back to [Chapter 23](part0029_split_000.html#property)
    for discussion of boundary value analysis). By changing a `continue` to a `break`,
    I stop the loop early and potentially miss marking later meals as OK.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些情况中的每一个都是我测试中的潜在漏洞。通过将`<=`更改为`<`，我发现我没有覆盖当餐点的卡路里恰好等于目标时的情况。通过将`0`更改为`1`，我发现我在输入域的边界上没有覆盖（参见[第23章](part0029_split_000.html#property)讨论的边界值分析）。通过将`continue`更改为`break`，我提前终止循环，可能会错过标记后续餐点为OK的机会。
- en: Fixing Mutants
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修复变异
- en: 'Once you identify mutants, it’s time to fix them. One of the best ways to do
    so is to apply the mutants to the files you have on disk. In my previous example,
    my mutants had the numbers 32, 33, and 34\. I can apply them to my codebase like
    so:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确定了变异，开始修复它们。最好的方法之一是将变异应用到你磁盘上的文件中。在我之前的示例中，我的变异有32、33和34。我可以这样将它们应用到我的代码库中：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Warning
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Only do this on files that are backed up through version control. This makes
    it easy to revert the mutants when you are done, restoring the original code.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 只对通过版本控制备份的文件执行此操作。这使得完成后还原变异变得容易，恢复原始代码。
- en: 'Once the mutants have been applied to disk, your goal is to write a failing
    test. For instance, I can write the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦   一旦变异已应用到磁盘上，你的目标是编写一个失败的测试。例如，我可以编写以下代码：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You should see this test fail (even if you have only one of the mutations applied).
    Once you are confident you have caught all mutations, revert the mutants and make
    sure the tests now pass. Rerunning `mutmut` should show that you eliminated the
    mutants as well.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你只应用了一个变异，你也应该看到这个测试失败。一旦你确信已经捕获了所有变异，就还原变异，并确保测试现在通过。重新运行`mutmut`，应该显示你已消除变异。
- en: Mutation Testing Reports
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变异测试报告
- en: '`mutmut` also provides a way to export its results to JUnit report format.
    You’ve seen other tools export to JUnit reports already in this book (such as
    in [Chapter 22](part0028_split_000.html#bdd)), and `mutmut` is no different:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`mutmut` 还提供了一种将其结果导出为JUnit报告格式的方法。在本书中已经看到其他工具导出为JUnit报告（例如[第22章](part0028_split_000.html#bdd)），`mutmut`
    也不例外：'
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: And just like in [Chapter 22](part0028_split_000.html#bdd), I can use `junit2html`
    to produce a nice HTML report for the mutation tests, as seen in [Figure 24-1](part0030_split_004.html#mutation_junit).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如[第22章](part0028_split_000.html#bdd)中提到的那样，我可以使用 `junit2html` 为变异测试生成一个漂亮的HTML报告，如[图24-1](part0030_split_004.html#mutation_junit)所示。
- en: '![ropy 2401](../images/00042.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![ropy 2401](../images/00042.jpeg)'
- en: Figure 24-1\. Example `mutmut` report with `junit2html`
  id: totrans-59
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 24-1\. 用 `junit2html` 生成的 `mutmut` 报告示例
- en: Adopting Mutation Testing
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采用突变测试
- en: 'Mutation testing is not widespread in the software development community today.
    I believe this to be for three reasons:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 突变测试在今天的软件开发社区中并不普遍。我认为原因有三：
- en: People are unaware of it and the benefits it provides.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人们对它及其带来的好处并不了解。
- en: A codebase’s tests are not mature enough yet for useful mutation testing.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个代码库的测试还不够成熟，以至于无法进行有用的突变测试。
- en: The cost-to-value ratio is too high.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本与价值比例太高。
- en: This book is actively working to improve the first point, but the second and
    third points certainly have merit.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 本书正在积极努力改进第一个观点，但第二和第三观点确实有其道理。
- en: If your codebase does not have a mature set of tests, you will see little value
    in introducing mutation testing. It will end up providing too high of a noise-to-signal
    ratio. You will see much more value from improving your test suite than trying
    to find all the mutants. Consider running mutation testing on smaller parts of
    your codebase that do have mature test suites.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的代码库没有成熟的测试集，那么引入突变测试将毫无意义。这将导致信号与噪声比过高。与其试图找到所有的突变体，不如通过改进测试套件来获得更多价值。考虑在代码库中那些已经具有成熟测试套件的较小部分上运行突变测试。
- en: Mutation testing does have a high cost; it’s important to maximize the value
    received in order to make mutation testing worth it. Mutation tests are slow,
    by virtue of running test suites multiple times. Introducing mutation testing
    to an existing codebase is painful, as well. It is far easier to start on brand-new
    code from the beginning.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 突变测试确实成本高；为了使突变测试值得进行，必须最大化收益。由于多次运行测试套件，突变测试非常缓慢。将突变测试引入现有代码库也很痛苦。从一开始就在全新代码上进行远比较轻松。
- en: However, since you are reading a book about improving the robustness of potentially
    complex codebases, there’s a good chance you are working in an existing codebase.
    Hope is not lost if you’d like to introduce mutation testing, though. As with
    any method of improving robustness, the trick is to be selective in where you
    run mutation testing.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，由于您正在阅读一本关于提高潜在复杂代码库健壮性的书，很可能您正在处理现有的代码库。如果您想引入突变测试，还是有希望的。与提高健壮性的任何方法一样，关键是选择性地在需要进行突变测试的地方进行。
- en: Look for areas of code that have lots of bugs. Look through bug reports and
    find trends that indicate that a certain area of code is troublesome. Also consider
    finding areas of code with high churn, as these are the areas that are most likely
    to introduce a change that current tests do not fully cover.^([2](part0030_split_007.html#idm45644722709960))
    Find the areas where mutation testing will pay back the cost multifold. You can
    use `mutmut` to run mutation testing selectively on just these areas.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找有大量bug的代码区域。查阅bug报告并找出表明某个代码区域有问题的趋势。还要考虑找出代码变动频繁的区域，因为这些区域最有可能引入当前测试尚未完全覆盖的变更。^([2](part0030_split_007.html#idm45644722709960))
    找到突变测试将多倍回报成本的代码区域。您可以使用 `mutmut` 选择性地在这些区域上运行突变测试。
- en: Also, `mutmut` comes with an option to mutation test only the parts of your
    codebase that have *line coverage*. A line of code has *coverage* by test suite
    if it is executed at least once by any test. Other coverage types exist, such
    as API coverage and branch coverage, but `mutmut` focuses on line coverage. `mutmut`
    will only generate mutants for code that you actually have tests for in the first
    place.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`mutmut` 还提供了一种只对具有*行覆盖率*的代码库进行突变测试的选项。如果一行代码至少被任何测试执行过一次，则该行代码具有测试套件*覆盖率*。还存在其他覆盖类型，如API覆盖率和分支覆盖率，但`mutmut`专注于行覆盖率。`mutmut`只会为您实际上已经有测试的代码生成突变体。
- en: 'To generate coverage, first install `coverage`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成覆盖率，请首先安装 `coverage`：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then run your test suite with the `coverage` command. For the example above,
    I run:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用`coverage`命令运行你的测试套件。例如，我运行：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, all you have to do is pass the `--use-coverage` flag to your `mutmut`
    run:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你只需在你的`mutmut`运行中传递`--use-coverage`标志：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: With this, `mutmut` will ignore any untested code, drastically reducing the
    amount of noise.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，`mutmut`将忽略任何未经测试的代码，大大减少了噪音量。
- en: The Fallacy of Coverage (and Other Metrics)
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖率的谬论（及其他度量标准）
- en: Any time a way of measuring code emerges, there is a rush to use that measurement
    as a *metric*, or a goal that acts as a proxy predictor of business value. However,
    there have been numerous ill-advised metrics through software development history,
    and none more infamous than using lines of code written as an indicator of project
    progress. The thinking went that if you could directly measure how much code any
    one person was writing, you would be able to directly measure that person’s productivity.
    Unfortunately, this led developers to game the system and try to write intentionally
    verbose code. This backfired as a metric, because the systems ended up complex
    and bloated, and development slowed due to poor maintainability.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 每当有一种衡量代码的方法出现时，都会急于将该衡量作为一个*指标*或目标，作为商业价值的代理预测器。然而，在软件开发历史上，出现了许多不明智的度量标准，其中没有比使用编写的代码行数作为项目进展指标更臭名昭著的了。这种想法认为，如果你能直接测量任何一个人编写的代码量，你就能直接衡量该人的生产力。不幸的是，这导致开发人员操纵系统，并试图故意编写冗长的代码。这种指标反而适得其反，因为系统变得复杂且臃肿，开发由于维护性差而放缓。
- en: As an industry, we have moved past measuring lines of code (I hope). However,
    where one metric disappears, two more come to take its place. I’ve seen other
    maligned metrics emerge such as number of bugs fixed or number of tests written.
    At face value, these are good things to be doing, but the problem comes when they
    are scrutinized as a metric tied to business value. There are ways to manipulate
    data in each of these metrics. Are you being judged by the number of bugs fixed?
    Then, just write more bugs in the first place!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个行业，我们已经超越了衡量代码行数（希望如此）。然而，一个指标消失之处，另外两个指标便会顶替其位置。我见过其他受到责难的指标出现，如修复的错误数量或编写的测试数量。表面上，这些都是应该做的好事情，但问题在于，当它们作为与商业价值相关联的指标被审视时。在每个指标中都有操纵数据的方法。你是否因为修复的错误数量而受到评判？那么，首先只需写更多的错误！
- en: Unfortunately, code coverage has fallen into the same trap in recent years.
    You hear goals such as “This code should be 100% line covered” or “We should strive
    for 90% branch coverage.” This is laudable in isolation, but it falls short of
    predicting business value. It misses the point of *why* you want these goals in
    the first place.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，代码覆盖率在近年来也陷入了同样的陷阱。你会听到诸如“这段代码应该100%覆盖每一行”或“我们应该争取90%的分支覆盖率”的目标。这在孤立情况下值得赞扬，但未能预测商业价值。它忽略了首先为什么你要设定这些目标的*原因*。
- en: Code coverage is a predictor of the absence of robustness, not quality as many
    assume. Code with low coverage may or may not do everything you need; you don’t
    know with any reliability. It is a sign that you will have challenges with modifying
    the code, as you do not have any sort of safety net built around that part of
    your system. You should absolutely look for areas with very low coverage and improve
    the testing story around them.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 代码覆盖率预示着健壮性的缺失，而非许多人所认为的质量。覆盖率低的代码可能会或可能不会做你需要的每件事；你无法可靠地知道。这表明你在修改代码时会遇到挑战，因为你的系统中没有任何安全网围绕该部分建立。你绝对应该寻找覆盖率非常低的区域，并改善其周围的测试情况。
- en: Conversely, this causes many people to assume that high coverage is a predictor
    of robustness, when it really isn’t. You can have every line and every branch
    covered by tests, and still have abysmal maintainability. The tests could be brittle
    or even flat-out useless.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，这导致许多人认为高覆盖率预示着健壮性，但实际上并非如此。你可以测试每一行和每一个分支，但仍然可能维护性糟糕。测试可能会变得脆弱甚至彻底无用。
- en: 'I once worked in a codebase that was beginning to adopt unit testing. I came
    across a file with the equivalent of the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾在一个开始采用单元测试的代码库中工作过。我遇到了一个类似以下内容的文件：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'There were about 30 of these tests, all with good names and following the AAA
    pattern (as seen in [Chapter 21](part0027_split_000.html#testing_strategy)). But
    they were all effectively useless: all they did was make sure that no exception
    was thrown. The worst part of all of this was the tests actually had 100% line
    coverage and near >80% branch coverage. It’s not bad that the tests were checking
    that no exception was thrown; it was bad that they didn’t actually test the actual
    functions, despite indicating otherwise.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 大约有30个这样的测试，所有的测试都有良好的名称，并遵循AAA模式（如在[第21章](part0027_split_000.html#testing_strategy)中所见）。但它们实际上是完全无用的：它们只是确保没有抛出异常。最糟糕的是，这些测试实际上具有100%的行覆盖率和接近80%的分支覆盖率。这些测试检查没有抛出异常并不是件坏事；坏的是，它们实际上没有测试实际的函数，尽管表面上看起来不是这样。
- en: Mutation testing is your best defense against poor assumptions about code coverage.
    When you are measuring the efficacy of your tests, it becomes much harder to write
    useless, meaningless tests while still eliminating mutants. Mutation testing elevates
    coverage measurements to become a truer predictor of robustness. Coverage metrics
    still won’t be a perfect proxy for business value, but mutation testing certainly
    makes them more valuable as an indicator of robustness.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 变异测试是防止关于代码覆盖的错误假设的最佳防御。当你衡量你的测试的有效性时，编写无用、无意义的测试变得更加困难，同时还要消除突变体。变异测试将覆盖率测量提升为更真实的健壮性预测器。覆盖率指标仍然不能完美地代表业务价值，但变异测试确实使它们作为健壮性指标更有价值。
- en: Warning
  id: totrans-88
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: As mutation testing becomes more popular, I fully expect “number of mutants
    eliminated” to be the new buzzword metric replacing “100% code coverage.” While
    you definitely want fewer mutants to survive, beware any goal tied to one metric
    out of context; this number can be gamed just like all the others. You still need
    a full testing strategy to ensure robustness in your codebase.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 随着变异测试变得越来越流行，我完全预料到，“消除突变体的数量”将成为取代“100%代码覆盖率”的新流行度量标准。虽然你确实希望更少的突变体存活，但要注意任何脱离上下文的单一指标目标；这个数字可以像其他所有指标一样被操控。你仍然需要一个完整的测试策略来确保代码库的健壮性。
- en: Closing Thoughts
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结思考
- en: Mutation testing will probably not be the first tool you reach for. However,
    it’s a perfect complement for your testing strategy; it finds holes in your safety
    net and brings them to your attention. With automated tools such as `mutmut`,
    you can leverage your existing test suite to perform mutation testing effortlessly.
    Mutation testing helps you improve the robustness of your test suite, which in
    turn will help you write more robust code.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 变异测试可能不会是你首选的工具。然而，它是你测试策略的完美补充；它找出你安全网中的漏洞并引起你的注意。通过像`mutmut`这样的自动化工具，你可以利用现有的测试套件轻松进行变异测试。变异测试帮助你提高测试套件的健壮性，进而帮助你编写更加健壮的代码。
- en: 'This concludes [Part IV](part0025.html#part_4) of this book. You started by
    learning about static analysis, which provides early feedback at a low cost. You
    then learned about testing strategies and how to ask yourself what sorts of questions
    you want your tests to answer. From there, you learned about three specific types
    of testing: acceptance testing, property-based testing, and mutation testing.
    All of these serve as ways of enhancing your existing testing strategy, building
    a denser and stronger safety net around your codebase. With a strong safety net,
    you will give future developers the confidence and flexibility to evolve your
    system as they need.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书的[第四部分](part0025.html#part_4)的结尾。你从学习静态分析开始，它以低成本提供早期反馈。然后你了解了测试策略以及如何问自己你希望你的测试回答什么样的问题。从那里，你学习了三种具体的测试类型：验收测试、基于属性的测试和变异测试。所有这些都是增强你现有测试策略的方式，为你的代码库建立更密集、更强大的安全网。有了强大的安全网，你将为未来的开发人员提供信心和灵活性，让他们按需发展你的系统。
- en: This also concludes the book as a whole. It’s been a long journey, and you’ve
    learned a variety of tips, tools, and methods along the way. You’ve dived deep
    into Python’s type system, learned how writing your own types benefit the codebase,
    and discovered how to write extensible Python. Each part of this book has given
    you building blocks that will help your codebase stand the test of time.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这也标志着整本书的结束。这是一个漫长的旅程，你在这条路上学到了各种技巧、工具和方法。你深入研究了Python的类型系统，学会了如何编写自己的类型以及如何编写可扩展的Python代码。本书的每一部分都为你提供了构建块，将帮助你的代码库经受住时间的考验。
- en: While this is the end of the book, this is not the end of the story of robustness
    in Python. Our relatively young industry continues to evolve and transform, and
    as software continues to eat the world, the health and maintainability of complex
    systems become paramount. I expect continuing changes in how we understand software,
    and new tools and techniques to build better systems.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是书的结尾，但这并非关于 Python 鲁棒性终结的故事。我们这个相对年轻的行业仍在不断演变和转型，随着软件不断“吞噬世界”，复杂系统的健康性和可维护性变得至关重要。我预计我们对软件理解的方式将持续变化，并出现新的工具和技术来构建更好的系统。
- en: Never stop learning. Python will continue to evolve, adding features and providing
    new tools. Each one of these has the potential to transform how you write code.
    I can’t predict the future of Python or its ecosystem. As Python introduces new
    features, ask yourself about the intentions that feature conveys. What do readers
    of code assume if they see this new feature? What do they assume if that feature
    is not used? Understand how developers interact with your codebase, and empathize
    with them to create systems that are pleasant to develop in.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要停止学习。Python 将继续发展，添加功能并提供新工具。每一个功能都有可能改变你编写代码的方式。我无法预测 Python 或其生态系统的未来。随着
    Python 引入新功能，问问自己这个功能表达了什么意图。如果他们看到了这个新功能，代码读者会假设什么？如果没有使用这个功能，他们会假设什么？了解开发者如何与你的代码库交互，并与他们产生共鸣，以创建开发愉悦的系统。
- en: 'Furthermore, take every single thing you’ve read in this book and apply critical
    thought to it. Ask yourself: what value is provided and what does it cost to implement?
    The last thing I want readers to do is take the advice in this book as completely
    prescriptive and use it as a hammer to force codebases to adhere to the standards
    that “the book said to use” (any developer who worked in the ’90s or ’00s probably
    remembers “Design Pattern Fever,” where you couldn’t walk 10 steps without running
    into an `AbstractInterfaceFactorySingleton`). Each of the concepts in this book
    should be seen as a tool in a toolbox; my hope is that you’ve learned enough of
    the background context to make the right decisions about how you use them.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，将本书中的每一个观点都经过批判性思考。问问自己：提供了什么价值，以及实施它需要什么代价？我不希望读者把本书的建议完全当作箴言，并用它作为强迫代码库遵循“书中说要用”的标准的工具（任何在90年代或00年代工作过的开发者可能还记得“设计模式热”，你走10步都会碰到一个`AbstractInterfaceFactorySingleton`）。本书中的每一个概念都应被视为工具箱中的一种工具；我希望你已经学到了足够的背景知识，能够在使用它们时做出正确的决策。
- en: 'Above all, remember that you are a human working on a complex system, and other
    humans will work on these systems with you and after you. Each person has their
    own motivations, their own goals, their own dreams. Everybody will have their
    own challenges and struggles. Mistakes will happen. We will never eliminate them
    all. Instead, I want you to look at these mistakes and push our field forward
    by learning from them. I want you to help the future build off of your work. In
    spite of all the changes, all the ambiguities, all the deadlines and scope creep,
    and all the tribulations of software development, I want you to be able to stand
    behind your work and say: “I’m proud I built this. This was a good system.”'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，记住你是一个在复杂系统上工作的人类，而其他人也将与你一起或在你之后继续工作。每个人都有他们自己的动机、目标和梦想。每个人都会面对自己的挑战和困难。错误会发生。我们永远无法完全消除所有错误。相反，我希望你看待这些错误，并通过从中学习推动我们的领域向前发展。我希望你能帮助未来建立在你工作基础上。尽管软件开发中存在各种变化、歧义、截止日期和范围扩展的困难，以及所有问题，我希望你能站在你的工作背后并说：“我为构建这个系统感到自豪。这是一个好系统。”
- en: Thank you for taking the time to read this book. Now go forth and write awesome
    code that stands the test of time.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢你抽出时间阅读本书。现在，继续前进，编写经得起时间考验的精彩代码吧。
- en: '^([1](part0030_split_001.html#idm45644723126456-marker)) Mutation testing was
    first proposed in 1971 by Richard A. DeMillo, Richard J. Lipton, and Fred G. Sayward
    in “Hints on Test Data Selection: Help for the Practicing Programmer,” *IEEE Computer*,
    11(4): 34–41, April 1978\. The first implementation was developed in 1980 by Tim
    A. Budd, “Mutation Analysis of Program Test Data,” PhD thesis, Yale University,
    1980.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '^([1](part0030_split_001.html#idm45644723126456-marker)) 突变测试最初由理查德·A·德米洛（Richard
    A. DeMillo）、理查德·J·利普顿（Richard J. Lipton）和弗雷德·G·塞沃德（Fred G. Sayward）在“测试数据选择提示：为实践程序员提供帮助”（*IEEE
    Computer*，11(4): 34–41，1978年4月）中于1971年首次提出。首个实现于1980年由蒂姆·A·布德（Tim A. Budd）完成，详见“程序测试数据的突变分析”，耶鲁大学博士论文，1980年。'
- en: '^([2](part0030_split_005.html#idm45644722709960-marker)) You can find code
    with high churn by measuring files with the highest number of commits. I found
    the following Git one-liner after a quick Google search: `git rev-list --objects
    --all | awk ''$2'' | sort -k2 | uniq -cf1 | sort -rn | head`. This was provided
    by `sehe` on [this Stack Overflow question](https://oreil.ly/39UTx).'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](part0030_split_005.html#idm45644722709960-marker)) 通过统计具有最高提交次数的文件，您可以找到代码更新频繁的代码。我在快速谷歌搜索后找到了以下
    Git 一行命令：`git rev-list --objects --all | awk '$2' | sort -k2 | uniq -cf1 | sort
    -rn | head`。这是由 `sehe` 在[这个 Stack Overflow 问题](https://oreil.ly/39UTx)中提供的。
