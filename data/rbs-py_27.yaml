- en: Chapter 23\. Property-Based Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第23章 属性化测试
- en: It is impossible to test absolutely everything in your codebase. The best you
    can do is be smart in how you target specific use cases. You look for boundary
    cases, paths through the code, and any other interesting attributes of the code.
    Your main hope is that you haven’t left any big holes in your safety net. However,
    you can do better than hope. You can fill in those gaps with property-based testing.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的代码库中不可能测试所有东西。您能做的最好的事情就是在如何针对特定用例上变得聪明。您寻找边界情况，代码路径，以及代码的其他有趣属性。您的主要希望是您没有在安全网中留下任何大漏洞。然而，您可以做得比希望更好。您可以使用属性化测试填补这些空白。
- en: In this chapter, you will learn how to do property-based testing with a Python
    library called [`Hypothesis`](https://oreil.ly/OejR4). You’ll use `Hypothesis`
    to generate test cases for you, often in ways you could never expect. You’ll learn
    how to track failing test cases, craft input data in new ways, and even have `Hypothesis`
    create combinations of algorithms to test your software. `Hypothesis` will guard
    your codebase against a whole new combination of errors.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用名为[`Hypothesis`](https://oreil.ly/OejR4)的Python库进行基于属性的测试。您将使用`Hypothesis`来为您生成测试用例，通常是以您意想不到的方式。您将学习如何跟踪失败的测试用例，以新的方式制定输入数据，甚至让`Hypothesis`创建算法的组合来测试您的软件。`Hypothesis`将保护您的代码库免受一系列新错误的影响。
- en: Property-Based Testing with Hypothesis
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Hypothesis进行属性化测试
- en: Property-based testing is a form of *generative testing*, where tools generate
    test cases for you. Instead of writing test cases based on specific input/output
    combinations, you define *properties* for your system. *Properties* in this context
    is another name for the invariants (discussed in [Chapter 10](part0014_split_000.html#classes))
    that hold true for your system.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 属性化测试是一种*生成式测试*形式，工具会为您生成测试用例。与基于特定输入/输出组合编写测试用例不同，您定义系统的*属性*。在这个上下文中，*属性*是指系统中成立的不变量（在[第10章](part0014_split_000.html#classes)中讨论）的另一个名称。
- en: 'Consider a menu recommendation system that selects dishes based on customer-provided
    constraints, such as total calories, price, and cuisine. For this specific example,
    I want customers to be able to order a full meal that falls below a specific calorie
    target. Here are the invariants I define for this function:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个菜单推荐系统，根据顾客提供的约束条件选择菜肴，例如总热量、价格和菜系。对于这个特定示例，我希望顾客能够订购一顿全餐，热量低于特定的热量目标。以下是我为此功能定义的不变量：
- en: 'The customer will receive three dishes: an appetizer, a salad, and a main dish.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户将收到三道菜：前菜、沙拉和主菜。
- en: When all the dishes’ calories are added together, the sum is less than their
    intended target.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当将所有菜肴的热量加在一起时，总和会小于它们的预期目标。
- en: 'If I were to write this as a `pytest` test that focuses on testing these properties,
    it would look like the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我要将此作为`pytest`测试来专注于测试这些属性，它会看起来像以下内容：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Contrast this with testing for a very specific result:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将此与测试特定结果进行对比：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The second method is testing for a very specific set of meals; this test is
    more specific, but also more *fragile*. It is more likely to break when the production
    code changes, such as when introducing new menu items or changing the recommendation
    algorithm. The ideal test is one that only breaks when there is a legitimate bug.
    Remember that tests are not free. You want to reduce maintenance cost, and reducing
    the time it takes to tweak tests is a great way of doing so.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是测试非常具体的一组餐点；这种测试更具体，但也更*脆弱*。当生产代码发生变化时，比如引入新菜单项或更改推荐算法时，它更容易出现问题。理想的测试是只有在出现真正的错误时才会失败。请记住，测试并非免费。您希望减少维护成本，缩短调整测试所需的时间是一个很好的方法。
- en: 'In both cases, I am testing with a specific input: 900 calories. In order to
    build a more comprehensive safety net, it’s a good idea to expand your input domain
    to test for more cases. In traditional test cases, you pick which tests to write
    by performing *boundary value analysis*. Boundary value analysis is when you analyze
    the code under test, looking for how different inputs influence control flow,
    or the different execution paths in your code.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，我正在使用特定输入进行测试：900卡路里。为了建立更全面的安全网，扩展您的输入领域以测试更多案例是一个好主意。在传统的测试案例中，您通过执行*边界值分析*来选择编写哪些测试。边界值分析是指分析待测试的代码，寻找不同输入如何影响控制流程或代码中的不同执行路径。
- en: 'For example, say `get_recommended_meal` raised an error if the calorie limit
    were below 650\. The boundary value in this case is 650; this splits the input
    domain into two *equivalence classes*, or sets of values that have the same property.
    One equivalence class is all the numbers underneath 650, and another equivalence
    class is the values 650 and above. With boundary value analysis, there should
    be three tests: one with calories under 650 calories, one test exactly at the
    boundary of 650 calories, and one test with a value higher than 650 calories.
    In practice, this verifies that no developer has messed up relational operators
    (such as writing `<=` instead of `<`) or has made off-by-one errors.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设 `get_recommended_meal` 在卡路里限制低于 650 时引发错误。在这种情况下的边界值是 650；这将输入域分割成两个*等价类*或具有相同属性的值集。一个等价类是所有低于
    650 卡路里的数字，另一个等价类是 650 及以上的值。通过边界值分析，应该有三个测试：一个测试低于 650 卡路里的卡路里，一个测试刚好在 650 卡路里的边界处，以及一个测试一个高于
    650 卡路里的值。实际上，这验证了开发人员没有搞错关系运算符（例如写成 `<=` 而不是 `<`）或者出现了差一错误。
- en: However, boundary value analysis is only useful if you can easily segment your
    input domain. If it is difficult to ascertain where you should split the domain,
    picking boundary values will not be easy. This is where the generative nature
    of `Hypothesis` comes in; `Hypothesis` generates input for test cases. It will
    find boundary values for you.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，边界值分析仅在你能够轻松分割输入域时才有用。如果确定在哪里应该分割域很困难，那么挑选边界值将不容易。这就是 `Hypothesis` 的生成性质发挥作用的地方；`Hypothesis`
    为测试用例生成输入。它将为你找到边界值。
- en: 'You can install `Hypothesis` through `pip`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过 `pip` 安装 `Hypothesis`：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: I’ll modify my original property test to let `Hypothesis` do the heavy lifting
    of generating input data.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我将修改我的原始属性测试，让 `Hypothesis` 负责生成输入数据。
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With just a simple decorator, I can tell `Hypothesis` to pick the inputs for
    me. In this case, I am asking `Hypothesis` to generate different values of `integers`.
    `Hypothesis` will run this test multiple times, trying to find a value that violates
    the expected properties. If I run this test with `pytest`, I see the following
    output:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 只需一个简单的装饰器，我就可以告诉 `Hypothesis` 为我选择输入。在这种情况下，我要求 `Hypothesis` 生成不同的 `integers`
    值。`Hypothesis` 将运行此测试多次，尝试找到违反预期属性的值。如果我用 `pytest` 运行这个测试，我会看到以下输出：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`Hypothesis` found an error early on with my production code: the code doesn’t
    handle a calorie limit of zero. Now, for this case, I want to specify that I should
    only be testing with a certain number of calories or above:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`Hypothesis` 在我的生产代码中早期发现了一个错误：代码不能处理零卡路里限制。现在，对于这种情况，我想指定我只应该测试某个特定数量的卡路里或以上：'
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, when I run the command with `pytest`, I want to show some more information
    about `Hypothesis`. I will run:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我用 `pytest` 命令运行时，我想展示一些关于 `Hypothesis` 的更多信息。我会运行：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This produces the following output:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`Hypothesis` checked 100 different values for me, without me needing to provide
    any specific input. Even better, `Hypothesis` will check new values every time
    you run this test. Rather than restricting yourself to the same test cases time
    and time again, you get a much broader blast radius in what you test. Consider
    all the different developers and continuous integration pipeline systems performing
    tests, and you’ll realize how quickly you can catch corner cases.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`Hypothesis` 为我检查了 100 个不同的值，而我不需要提供任何具体的输入。更重要的是，每次运行这个测试时，`Hypothesis` 都会检查新值。与一次又一次地限制自己于相同的测试用例不同，你可以在你测试的内容上获得更广泛的覆盖面。考虑到所有不同的开发人员和持续集成管道系统执行测试，你会意识到你可以多快地捕获边缘情况。'
- en: Tip
  id: totrans-29
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: You can also specify constraints on your domain by using `hypothesis.assume`.
    You can write assumptions into your tests, such as `assume(calories > 850)`, to
    tell `Hypothesis` to skip any test cases that violate these assumptions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过使用 `hypothesis.assume` 来在你的领域上指定约束条件。你可以在你的测试中写入假设，比如 `assume(calories
    > 850)`，告诉 `Hypothesis` 跳过违反这些假设的任何测试用例。
- en: 'If I introduce an error (say something goes wrong between 5,000 and 5,200 calories
    for some reason), `Hypothesis` catches the error within four test runs (the number
    of test runs may vary for you):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我引入一个错误（例如因某种原因在 5,000 到 5,200 卡路里之间出错），`Hypothesis` 将在四次测试运行内捕获错误（你的测试运行次数可能会有所不同）：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When you find an error, `Hypothesis` records the failing error so that it can
    specifically check that value in the future. You also can make sure that `Hypothesis`
    always tests specific cases using the `hypothesis.example` decorator:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当您发现错误时，`Hypothesis`会记录失败的错误，以便将来可以专门检查该值。您还可以通过`hypothesis.example`装饰器确保`Hypothesis`始终测试特定情况：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The Magic of Hypothesis
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 魔法假设
- en: '`Hypothesis` is very good at generating test cases that will find errors. It
    seems like magic, but it’s actually quite clever. In the previous example, you
    may have noticed that `Hypothesis` errored out on the value 5001\. If you were
    to run the same code and introduce an error for values greater than 5000, you’ll
    find that the test errors out at 5001 as well. If `Hypothesis` is testing different
    values, shouldn’t we all see slightly different results?'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`Hypothesis`非常擅长生成会发现错误的测试用例。这似乎像是魔法，但实际上相当聪明。在前面的例子中，您可能已经注意到`Hypothesis`在值5001上出现了错误。如果您运行相同的代码并为大于5000的值引入一个错误，您将发现测试仍在5001处出现错误。如果`Hypothesis`正在测试不同的值，我们难道不应该看到稍微不同的结果吗？'
- en: '`Hypothesis` does something really nice for you when it finds a failure: it
    *shrinks* the test case. Shrinking is when `Hypothesis` tries to find the minimal
    input that still fails the test. For `integers()`, `Hypothesis` will try successively
    smaller numbers (or bigger numbers when dealing with negatives) until the input
    value reaches zero. `Hypothesis` tries to zero in (no pun intended) on the smallest
    value that still fails the test.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当`Hypothesis`发现失败时，它会为您做一些非常好的事情：它*缩小*了测试用例。缩小是指`Hypothesis`尝试找到仍然导致测试失败的最小输入。对于`integers()`，`Hypothesis`会尝试依次更小的数字（或处理负数时更大的数字），直到输入值达到零。`Hypothesis`试图聚焦（无意冒犯）于仍然导致测试失败的最小值。
- en: To learn more about how `Hypothesis` generates and shrinks values, it’s worth
    reading the original [QuickCheck paper](https://oreil.ly/htavw). QuickCheck was
    one of the first property-based tools, and even though it deals with the Haskell
    programming language, it is quite informative. Most property-based testing tools
    like `Hypothesis` are descendents from the ideas put forth by QuickCheck.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关`Hypothesis`如何生成和缩小值的更多信息，值得阅读原始[QuickCheck论文](https://oreil.ly/htavw)。QuickCheck是最早的基于属性的工具之一，尽管它涉及Haskell编程语言，但信息量很大。大多数基于属性的测试工具（如`Hypothesis`）都是基于QuickCheck提出的思想的后继者。
- en: Contrast with Traditional Tests
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与传统测试的对比
- en: 'Property-based testing can greatly simplify the test-writing process. There
    are entire classes of problems that you do not need to worry about:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 基于属性的测试可以极大地简化编写测试的过程。有一整类问题是你不需要担心的：
- en: Easier testing of nondeterminism
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 更容易测试非确定性
- en: Nondeterminism is the bane of most traditional tests. Random behavior, creating
    temporary directories, or retrieving different records from a database can make
    it incredibly hard to write tests. You have to create a specific set of output
    values in your test, and to do that, you need to be deterministic; otherwise,
    your test will keep failing. You often try to control the nondeterminism by forcing
    specific behaviors, such as forcing the same folder to always be created or seeding
    a random number generator.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 非确定性是大多数传统测试的祸根。随机行为、创建临时目录或从数据库中检索不同的记录可能会使编写测试变得非常困难。您必须在测试中创建一组特定的输出值，为此，您需要是确定性的；否则，您的测试将一直失败。通常，您会尝试通过强制特定行为来控制非确定性，例如强制创建相同的文件夹或对随机数生成器进行种子化。
- en: With property-based testing, nondeterminism is part of the package. `Hypothesis`
    will give you different inputs for each test run. You don’t have to worry about
    testing for specific values anymore; define properties and embrace the nondeterminism.
    Your codebase will be better because of it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基于属性的测试，非确定性是其中的一部分。`Hypothesis`将为每个测试运行提供不同的输入。您不必再担心测试特定值了；定义属性并接受非确定性。您的代码库会因此变得更好。
- en: Less fragility
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 更少的脆弱性
- en: When testing for specific input/output combinations, you are at the mercy of
    a slew of hard-coded assumptions. You assume that lists will always be in the
    same order, that dictionaries won’t get any key-value pairs added to them, and
    that your dependencies will never change their behavior. Any one of these seemingly
    unrelated changes can break one of your tests.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试特定输入/输出组合时，您受到一大堆硬编码假设的影响。您假设列表始终按照相同的顺序排列，字典不会添加任何键-值对，并且您的依赖项永远不会改变其行为。这些看似不相关的变化中的任何一个都可能破坏您的一个测试。
- en: When tests break for reasons unrelated to the functionality under test, it’s
    frustrating. The tests get a bad reputation for being flaky, and either they get
    ignored (masking true failures), or developers live with the constant nagging
    of needing to fix tests. Use property-based testing to add resilience to your
    testing.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试由于与被测试功能无关的原因而失败时，这是令人沮丧的。测试因易出错而声名狼藉，要么被忽视（掩盖真正的失败），要么开发者不得不面对不断需要修复测试的烦恼。使用基于属性的测试增强您的测试的韧性。
- en: Better chance at finding bugs
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 更好地找到错误的机会
- en: Property-based testing isn’t just about reducing the cost of test creation and
    maintenance. It will increase your chances of finding bugs. Even if you write
    your tests covering every path through your code today, there’s still a chance
    that you haven’t caught everything. If your functions change in a backward-incompatible
    way (say, by now erroring out on a value that you previously thought was fine),
    your luck depends on if you have a test case for that specific value. Property-based
    testing, by the nature of generating new test cases, will have a better chance
    of finding that bug over multiple runs.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 基于属性的测试不仅仅是为了减少测试创建和维护成本。它将增加您发现错误的机会。即使今天您编写的测试覆盖了代码的每条路径，仍然有可能会遗漏某些情况。如果您的函数以不向后兼容的方式更改（例如，现在对您先前认为是正常的值出现错误），那么您的运气取决于是否有一个特定值的测试用例。基于属性的测试，通过生成新的测试用例，将在多次运行中更有可能发现该错误。
- en: Discussion Topic
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论主题
- en: Examine your current test cases and pick tests that are complicated to read.
    Search for tests that require a large amount of inputs and outputs to adequately
    test functionality. Discuss how property-based testing can replace these tests
    and simplify your test suite.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 检查您当前的测试用例，并选择阅读起来复杂的测试。搜索需要大量输入和输出以充分测试功能的测试。讨论基于属性的测试如何取代这些测试并简化您的测试套件。
- en: Getting the Most Out of Hypothesis
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 充分利用`Hypothesis`
- en: I’ve just scratched the surface of `Hypothesis` so far. Once you really dive
    into property-based testing, you start opening up tons of doors for yourself.
    `Hypothesis` ships with some pretty cool features out of the box that can improve
    your testing experience.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我只是初步了解了`Hypothesis`。一旦你真正深入进行基于属性的测试，你会为自己打开大量的机会。`Hypothesis`提供了一些非常酷的功能，可以显著改进您的测试体验。
- en: Hypothesis Strategies
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Hypothesis策略
- en: In the previous section, I introduced you to the `integers()` strategy. A `Hypothesis`
    strategy defines how test cases are generated, as well as how the data gets shrunk
    when a test case fails. `Hypothesis` ships with a ton of strategies right out
    of the box. Similar to passing `integers()` into your test case, you can pass
    things like `floats()`, `text()`, or `times()` to generate values for floating-point
    numbers, strings, or `datetime.time` objects, respectively.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我向您介绍了`integers()`策略。`Hypothesis`策略定义了如何生成测试用例以及在测试用例失败时如何收缩数据。`Hypothesis`内置了大量的策略。类似于将`integers()`传递给您的测试用例，您可以传递`floats()`、`text()`或`times()`来生成浮点数、字符串或`datetime.time`对象的值。
- en: '`Hypothesis` also provides strategies that can compose other strategies together,
    such as building lists, tuples, or dictionaries of strategies (this is a fantastic
    example of composability, as described in [Chapter 17](part0022_split_000.html#composability)).
    For instance, let’s say I want to create a strategy that maps dish names (text)
    to calories (a number between 100 and 2,000):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`Hypothesis`还提供了一些可以组合其他策略的策略，例如构建策略的列表、元组或字典（这是组合性的一个很好的例子，如[第17章](part0022_split_000.html#composability)所述）。例如，假设我想创建一个策略，将菜名（文本）映射到卡路里（在100到2000之间的数字）：'
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: For even more complicated data, you can use `Hypothesis` to define your own
    strategies. You are allowed to `map` and `filter` strategies, which are similar
    in concept to the built-in `map` and `filter` functions.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更复杂的数据，你可以使用`Hypothesis`来定义自己的策略。您可以使用`map`和`filter`策略，这些策略的概念类似于内置的`map`和`filter`函数。
- en: 'You can also use the `hypothesis.composite` strategy decorator to define your
    own strategies. I want to create a strategy that creates three-course meals for
    me, consisting of an appetizer, main dish, and dessert. Each dish contains a name
    and a calorie count:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`hypothesis.composite`策略装饰器来定义自己的策略。我想创建一个策略，为我创建三道菜的套餐，包括前菜、主菜和甜点。每道菜包含名称和卡路里计数：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This example works by defining a new composite strategy called `three_course_meals`.
    I create three integer strategies; each type of dish gets its own strategy with
    its own min/max values. From there, I create a new dish that has a name and a
    *drawn* value from the strategy. `draw` is a function that gets passed into your
    composite strategy and that you use to select values from the strategy.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例通过定义一个名为`three_course_meals`的新复合策略来工作。我创建了三种整数策略；每种类型的菜品都有自己的策略及其自己的最小/最大值。然后，我创建了一个新的菜品，它具有名称和从策略中*绘制*的值。`draw`是一个传递给您的复合策略的函数，您可以使用它来选择策略中的值。
- en: Once you’ve defined your own strategies, you can reuse them across multiple
    tests, making it easy to generate new data for your system. To learn more about
    `Hypothesis` strategies, I encourage you to read the [`Hypothesis` documentation](https://oreil.ly/QhhnM).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您定义了自己的策略，就可以在多个测试中重复使用它们，从而轻松为系统生成新数据。要了解更多关于`Hypothesis`策略的信息，建议您阅读[`Hypothesis`文档](https://oreil.ly/QhhnM)。
- en: Generating Algorithms
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成算法
- en: In previous examples, I focused on generating input data to create your tests.
    However, `Hypothesis` can go a step further and generate combinations of operations
    as well. `Hypothesis` calls this *stateful testing*.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的示例中，我专注于生成输入数据以创建您的测试。然而，`Hypothesis`可以进一步生成操作的组合。`Hypothesis`称之为*有状态测试*。
- en: 'Consider our meal recommendation system. I showed you how to filter by calories,
    but now I also want to filter by price, number of courses, proximity to user,
    and so on. Here are some properties I want to assert about the system:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑我们的餐饮推荐系统。我展示了如何按卡路里进行过滤，但现在我还想按价格、课程数、接近用户等进行过滤。以下是我想要对系统断言的一些属性：
- en: The meal recommendation system always returns three meal options; it may be
    possible that not all recommended options fit all of the user’s criteria.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 餐饮推荐系统始终返回三种餐饮选择；可能不是所有推荐的选项都符合用户的所有标准。
- en: All three meal options are unique.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有三种餐饮选择都是唯一的。
- en: The meal options are ordered based on the most recent filter applied. In the
    case of ties, the next most recent filter is used.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 餐饮选择是基于最近应用的过滤器排序的。在出现平局的情况下，使用次新的过滤器。
- en: New filters replace old filters of the same type. For example, if you set the
    price filter to <$20, and then change it to <$15, only the <$15 filter is applied.
    Setting something like a calorie filter, such as <1800 calories, does not affect
    the price filter.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的过滤器会替换相同类型的旧过滤器。例如，如果您将价格过滤器设置为<$20，然后将其更改为<$15，则只应用<$15过滤器。设置像卡路里过滤器这样的内容，例如<1800卡路里，并不会影响价格过滤器。
- en: Rather than writing a slew of test cases, I will represent my tests using a
    `hypothesis.stateful.RuleBasedStateMachine`. This will let me test entire algorithms
    using `Hypothesis`, while checking for invariants along the way. It’s a bit complicated,
    so I’ll show the entire code first, and then break it down afterward piece by
    piece.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是编写大量的测试用例，我将使用`hypothesis.stateful.RuleBasedStateMachine`来表示我的测试。这将允许我使用`Hypothesis`测试整个算法，同时检查不变量。有点复杂，所以我会先展示整段代码，然后逐部分解释。
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: That’s quite a lot of code, but it’s really cool how it all works. So let’s
    break it down.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是相当多的代码，但它真的很酷，因为它是如何运作的。让我们逐步分解它。
- en: 'First, I will create a subclass of a `hypothesis.stateful.RuleBasedStateMachine`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我将创建一个`hypothesis.stateful.RuleBasedStateMachine`的子类：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This class will be responsible for defining the discrete steps that I want
    to test in combination. In the constructor, I set up `self.recommender` as a `MealRecommendationEngine`,
    which is what I’m testing in this scenario. I also will keep track of a list of
    filters that are applied as part of this class. Next, I will set up `hypothesis.stateful.rule`
    functions:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此类将负责定义我想要以组合形式测试的离散步骤。在构造函数中，我将`self.recommender`设置为`MealRecommendationEngine`，这是我在此场景中正在测试的内容。我还将跟踪作为此类的一部分应用的过滤器列表。接下来，我将设置`hypothesis.stateful.rule`函数：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Each rule acts as a step of the algorithm that you want to test. `Hypothesis`
    will generate tests using these rules as opposed to generating test data. In this
    case, each of these rules applies a filter to the recommendation engine. I also
    save the filters locally so that I can check results later.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 每个规则都充当您想要测试的算法的步骤。`Hypothesis`将使用这些规则生成测试，而不是生成测试数据。在这种情况下，每个规则都将一个过滤器应用于推荐引擎。我还将这些过滤器保存在本地，以便稍后检查结果。
- en: I then use `hypothesis.stateful.invariant` decorators to define assertions that
    should be checked after every rule change.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我使用`hypothesis.stateful.invariant`装饰器来定义应在每次规则更改后检查的断言。
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'I’ve written two invariants: one stating that the recommender always returns
    three unique meals and one that the meals are in the correct order based on the
    filters chosen.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我写了两个不变量：一个声明推荐器始终返回三个唯一的餐点，另一个声明这些餐点根据所选择的过滤器按正确的顺序排列。
- en: Finally, I save off the `TestCase` from the `RecommendationChecker` into a variable
    that is prefixed with `Test`. This is so `pytest` can discover the stateful `Hypothesis`
    test.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我将`RecommendationChecker`中的`TestCase`保存到一个以`Test`为前缀的变量中。这样做是为了让`pytest`能够发现这个有状态的`Hypothesis`测试。
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Once it’s all put together, `Hypothesis` will start generating test cases with
    different combinations of rules. For instance, with one `Hypothesis` test run
    (with an intentionally introduced error), `Hypothesis` generated the following
    test.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有东西都组装好了，`Hypothesis`将开始生成具有不同规则组合的测试用例。例如，通过一个`Hypothesis`测试运行（故意引入错误），`Hypothesis`生成了以下测试。
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When I introduced a different error, `Hypothesis` shows me a different test
    case that catches the fault.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当我引入不同的错误时，`Hypothesis`会展示给我一个不同的测试用例来捕获错误。
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This is handy for testing complex algorithms or objects with very specific invariants.
    `Hypothesis` will mix and match different steps, constantly searching for some
    ordering of steps that will produce an error.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于测试复杂算法或具有非常特定不变量的对象非常方便。`Hypothesis`会混合匹配不同的步骤，不断寻找能产生错误的步骤顺序。
- en: Discussion Topic
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论主题
- en: What areas of your codebase contain hard-to-test, highly interrelated functions?
    Write a few stateful `Hypothesis` tests as a proof of concept and discuss how
    these sorts of tests can build confidence in your testing suite.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码库中的哪些区域包含难以测试、高度相关的函数？写几个有状态的`Hypothesis`测试作为概念验证，并讨论这些测试如何增强你的测试套件的信心。
- en: Closing Thoughts
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结思考
- en: Property-based testing does not exist to replace traditional testing; it exists
    to supplement it. When your code has well-defined inputs and outputs, testing
    with hard-coded preconditions and expected assertions is sufficient. However,
    as your code gets more complex, your tests become more complex, and you find yourself
    spending more time than you want parsing and understanding tests.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 基于属性的测试并不是为了取代传统测试；它是为了补充传统测试。当你的代码具有明确定义的输入和输出时，使用硬编码的前提条件和预期断言进行测试就足够了。然而，随着你的代码变得越来越复杂，你的测试也变得越来越复杂，你会发现自己花费的时间比想象中多，解析和理解测试。
- en: Property-based testing is simple to use with `Hypothesis` in Python. It repairs
    holes in your safety net by generating new tests throughout the lifetime of your
    codebase.You use `hypothesis.strategies` to control exactly how your test data
    gets generated. You can even test algorithms by combining different steps with
    `hypothesis.stateful` testing. `Hypothesis` will let you focus on the properties
    and invariants of your code and express your tests more naturally.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，使用`Hypothesis`很容易实现基于属性的测试。它通过在代码库的整个生命周期内生成新的测试来修补你的安全网。你可以使用`hypothesis.strategies`来精确控制测试数据的生成方式。你甚至可以通过将不同的步骤组合进行`hypothesis.stateful`测试来测试算法。`Hypothesis`将让你专注于代码的属性和不变量，并更自然地表达你的测试。
- en: In the next chapter, I will wrap up the book with mutation testing. Mutation
    testing is another method of filling gaps in your safety net. Instead of finding
    new ways of testing your code, mutation code focuses on measuring the efficacy
    of your tests. It is another tool in your arsenal for more robust testing.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我将用变异测试来结束本书。变异测试是填补安全网漏洞的另一种方法。与找到测试代码的新方法不同，变异代码专注于衡量你的测试的有效性。它是你更强大测试工具中的另一个工具。
