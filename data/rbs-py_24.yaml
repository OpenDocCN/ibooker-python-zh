- en: Chapter 20\. Static Analysis
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第20章 静态分析
- en: 'Before I get to testing, I first want to talk about static analysis. *Static
    analysis* is a set of tools that inspect your codebase, looking for potential
    errors or inconsistencies. It’s a great asset for finding common mistakes. In
    fact, you’ve already been working with a static analysis tool: mypy. Mypy (and
    other typecheckers) inspect your codebase and find typing errors. Other static
    analysis tools check for other types of errors. In this chapter, I’ll walk you
    through common static analyzers for linting, complexity checking, and security
    scanning.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行测试之前，我首先想谈一下静态分析。*静态分析* 是一组工具，检查您的代码库，寻找潜在的错误或不一致之处。它是发现常见错误的重要工具。实际上，您已经在使用一个静态分析工具：mypy。Mypy（和其他类型检查器）检查您的代码库并找到类型错误。其他静态分析工具检查其他类型的错误。在本章中，我将介绍常见的用于代码检查、复杂度检查和安全扫描的静态分析工具。
- en: Linting
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码检查
- en: 'The first class of static analysis tools that I’ll walk you through is called
    a *linter*. Linters search for common programming mistakes and style violations
    within your codebase. They get their name from the original linter: a program
    named *lint* that used to check C programs for common errors. It would search
    for “fuzzy” logic and try to remove that fuzz (hence, linting). In Python, the
    most common linter you will come across is Pylint. Pylint is used to check for
    a myriad of common mistakes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我将首先向您介绍的静态分析工具类别称为 *代码检查器*。代码检查器在您的代码库中搜索常见的编程错误和风格违规。它们的名称源自最初的代码检查器：一个名为
    *lint* 的程序，用于检查 C 语言程序的常见错误。它会搜索“模糊”逻辑并尝试消除这种模糊（因此称为 linting）。在 Python 中，您最常遇到的代码检查器是
    Pylint。Pylint 用于检查大量常见错误：
- en: Certain style violations of the [PEP 8](https://oreil.ly/MnCoY) Python style
    guide
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 某些违反 [PEP 8](https://oreil.ly/MnCoY) Python 风格指南的风格违规
- en: Dead code that is unreachable (such as code after a return statement)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不可达的死代码（例如在返回语句之后的代码）
- en: Violations of access constraints (such as private or protected members of a
    class)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 违反访问限制条件（例如类的私有或受保护成员）
- en: Unused variables and functions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未使用的变量和函数
- en: Lack of cohesion in a class (no use of self in a method, too many public methods)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类内的内聚性不足（在方法中没有使用 self，公共方法过多）
- en: Missing documentation in the form of docstrings
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺少文档，如文档字符串形式
- en: Common programming errors
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见的编程错误
- en: Many of these error classes are things that we’ve discussed previously, such
    as accessing private members or a function needing to be a free function instead
    of a member function (as discussed in [Chapter 10](part0014_split_000.html#classes).)
    A linter like Pylint will complement all of the techniques you’ve learned throughout
    this book; if you violate some of the principles I’ve been espousing, linters
    will catch those violations for you.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些错误类别中的许多是我们先前讨论过的内容，例如访问私有成员或函数需要成为自由函数而不是成员函数（如[第10章](part0014_split_000.html#classes)讨论的）。像
    Pylint 这样的代码检查工具将为您补充本书中学到的所有技术；如果您违反了我一直提倡的一些原则，代码检查工具将为您捕捉这些违规行为。
- en: 'Pylint is also incredibly handy at finding some common errors in your code.
    Consider a developer adding code that adds all of an author’s cookbooks to an
    existing list:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Pylint 在查找代码中一些常见错误方面也非常有用。考虑一个开发者添加将所有作者的食谱书籍添加到现有列表的代码：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This seems innocuous, but there are two issues in this code. Take a few minutes
    and see if you can find them.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来无害，但是这段代码中有两个问题。请花几分钟看看您能否找到它们。
- en: 'Now let’s see what Pylint can do. First, I need to install it:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看 Pylint 能做什么。首先，我需要安装它：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, I’ll run Pylint against the example above:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我将对上述示例运行 Pylint：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Pylint has identified the two issues in my code (it actually found more, such
    as missing documentation strings, but I’ve elided them for the purposes of this
    discussion). First, there is a dangerous mutable default value of an argument
    in the form of `[]`. Much has been written on this behavior [before](https://oreil.ly/sCQQu),
    but it’s a common gotcha for errors, especially for people new to the language.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Pylint 在我的代码中标识出了两个问题（实际上找到了更多，比如缺少文档字符串，但为了本讨论的目的我已经省略了它们）。首先，存在一个危险的可变默认参数形式为`[]`。关于这种行为已经写了很多[文章](https://oreil.ly/sCQQu)，但这对于错误，特别是对于新手来说，是一个常见的陷阱。
- en: 'The other error is a bit more subtle: not all branches return the same type.
    “But wait!” you exclaim. “It’s OK, because I assert, which raises an error instead
    of falling through the `if` statement (which returns `None`).” However, while
    `assert` statements are fantastic, they can be turned off. When you pass the `-O`
    flag to Python, it disables all `assert` statements. So, when the `-O` flag is
    turned on, this function returns `None`. For the record, mypy does not catch this
    error, but Pylint does. Even better, Pylint ran in under a second to find those
    bugs.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个错误更加微妙：不是所有分支都返回相同的类型。“等等！”你会说。“没关系，因为我断言，这会引发一个错误，而不是通过`if`语句（返回`None`）。然而，虽然`assert`语句很棒，但它们可以被关闭。当你给Python传递`-O`标志时，它会禁用所有`assert`语句。因此，当打开`-O`标志时，这个函数返回`None`。值得一提的是，mypy并不会捕获这个错误，但是Pylint可以。更好的是，Pylint在不到一秒钟的时间内找到了这些错误。
- en: It doesn’t matter if you don’t make those errors, or you if always find them
    in code review. There are countless developers working in any codebase, and errors
    can happen anywhere. By enforcing a linter like Pylint, you can eliminate very
    common, detectable errors. For a full list of built-in checkers, see the [Pylint
    documentation](https://oreil.ly/9HRzC).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是否犯下这些错误，或者你是否总是在代码审查中找到它们。在任何代码库中都有无数开发人员在工作，错误可能发生在任何地方。通过强制执行像Pylint这样的代码检查工具，你可以消除非常常见的可检测错误。有关内置检查器的完整列表，请参阅[Pylint文档](https://oreil.ly/9HRzC)。
- en: Writing Your Own Pylint Plug-in
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写你自己的Pylint插件
- en: The real Pylint magic starts to happen when you write your own plug-ins (see
    [Chapter 19](part0024_split_000.html#pluggable) for more information on plug-in
    architectures). A Pylint plug-in lets you write your own custom *checkers*, or
    rules. While built-in checkers look for common Python errors, your custom checkers
    can look for errors in your problem domain.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写自己的插件时，真正的Pylint魔法开始发挥作用（有关插件架构的更多信息，请参阅[第19章](part0024_split_000.html#pluggable)）。Pylint插件允许你编写自己的自定义*检查器*或规则。虽然内置检查器查找常见的Python错误，但你的自定义检查器可以查找你问题领域中的错误。
- en: 'Take a look at a snippet of code way back from [Chapter 4](part0007_split_000.html#constraints):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 看一看远在[第4章](part0007_split_000.html#constraints)的代码片段：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: During [Chapter 4](part0007_split_000.html#constraints), I mentioned that in
    order for `NewType` to be effective, you need to make sure that you are only constructing
    it from *blessed* methods, or methods that enforce the constraints tied to that
    type. At the time, my advice was to use a comment to give hints to readers of
    the code. However, with Pylint, you can write a custom checker to find out when
    you violate this expectation.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](part0007_split_000.html#constraints)中，我提到过，为了使`NewType`生效，你需要确保只能通过*blessed*方法来构造它，或者强制执行与该类型相关的约束。当时，我的建议是使用注释来给代码读者一些提示。然而，使用Pylint，你可以编写一个自定义检查器来查找违反这一期望的情况。
- en: 'Here’s the plug-in in its entirety. I’ll break it down for you afterward:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是插件的完整内容。之后我会为你详细解释：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This linter verifies that when someone creates a `ReadyToServeHotDog`, it is
    only done in a function that is named `prepare_for_serving`, and that function
    must live in a module called `hotdog`. Now let’s say I were to create any other
    function that created a ready-to-serve hot dog, like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码检查器验证了当有人创建一个`ReadyToServeHotDog`时，它只能在一个名为`prepare_for_serving`的函数中完成，并且该函数必须位于名为`hotdog`的模块中。现在假设我创建了任何其他创建准备供应热狗的函数，如下所示：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'I can run my custom Pylint checker:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以运行我的自定义Pylint检查器：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Pylint confirms that serving an “unservable” hot dog is now an error:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Pylint确认现在服务“不可供应”的热狗是一个错误：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is fantastic. Now I can write automated tooling that checks for errors
    that a typechecker like mypy can’t even begin to look for. Don’t let your imagination
    constrain you. Use Pylint to catch anything you can dream of: business logic constraint
    violations, temporal dependencies, or a custom style guide. Now, let’s go see
    how this linter works so that you can build your own.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这太棒了。现在我可以编写自动化工具，用来检查那些像我的mypy类型检查器无法甚至开始查找的错误。不要让你的想象力束缚你。使用Pylint可以捕捉任何你能想到的东西：业务逻辑约束违规、时间依赖性或者自定义样式指南。现在，让我们看看这个代码检查器是如何工作的，这样你就能够构建你自己的。
- en: Breaking Down the Plug-in
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插件分解
- en: 'The first thing I did to write the plug-in was to define a class that inherits
    from a `pylint.checkers.BaseChecker`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 写插件的第一件事是定义一个从`pylint.checkers.BaseChecker`继承的类：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You’ll also notice some references to `astroid`. The `astroid` library is useful
    for parsing Python files into an abstract syntax tree (AST). This provides a conveniently
    structured way of interacting with Python source code. You’ll see how that’s useful
    in a little bit.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到一些对`astroid`的引用。`astroid`库用于将Python文件解析为抽象语法树（AST），这为与Python源代码交互提供了一种便捷的结构化方式。很快您将看到这在哪些方面非常有用。
- en: Next, I define metadata about the plug-in. This provides information such as
    the plug-in name, messages that get displayed to the user, and an identifier (`unverified-ready-to-serve-hotdog`)
    that I can refer to later.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我定义插件的元数据。这提供了插件名称、显示给用户的消息以及一个标识符（`unverified-ready-to-serve-hotdog`），以便稍后引用。
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Next, I want to track what function I’m in, so that I can tell if I’m using
    `prepare_for_serving` or not. This is where the `astroid` library will come to
    play. As mentioned before, the `astroid` library helps the Pylint checker think
    in terms of an AST; you don’t need to worry about string parsing. If you’d like
    to learn more about AST and Python parsing, you can check out [`astroid`’s documentation](https://oreil.ly/JvQgU),
    but for now, all you have to know is that if you define specific functions in
    your checker, they will get called when `astroid` parses the code. Each function
    called gets passed a `node` which represents a specific part of code, such as
    an expression or a class definition.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我想跟踪我所在的函数，以便判断我是否在使用`prepare_for_serving`。这就是`astroid`库发挥作用的地方。如前所述，`astroid`库帮助Pylint检查器以AST的形式思考；您无需担心字符串解析。如果您想了解有关AST和Python解析的更多信息，可以查看[`astroid`文档](https://oreil.ly/JvQgU)，但现在，您只需知道，如果在检查器中定义了特定函数，它们将在`astroid`解析代码时被调用。每个调用的函数都会传递一个`node`，代表代码的特定部分，例如表达式或类定义。
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this case, I’ve defined a constructor to save a member variable to track
    if I’m in the right function. I’ve also defined two functions, `visit_functiondef`
    and `leave_functiondef`. `visit_functiondef` will get called whenever `astroid`
    parses a function definition, and `leave_functiondef` is called whenever the parser
    stops parsing a function definition. So when the parser encounters a function,
    I check to see if that function is named `prepare_for_serving`, which is inside
    a module called `hotdog`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我定义了一个构造函数来保存一个成员变量，以跟踪我是否在正确的函数中。我还定义了两个函数，`visit_functiondef`和`leave_functiondef`。`visit_functiondef`将在`astroid`解析函数定义时调用，而`leave_functiondef`在解析器停止解析函数定义时调用。因此，当解析器遇到函数时，我会检查该函数是否命名为`prepare_for_serving`，它位于名为`hotdog`的模块中。
- en: Now that I have a member variable to track if I’m in the right function or not,
    I can write another `astroid` hook to get called whenever a function is called
    (such as `ReadyToServeHotDog(hot_dog)`).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我有一个成员变量来跟踪我是否在正确的函数中，我可以编写另一个`astroid`钩子，以便在每次调用函数时调用它（比如`ReadyToServeHotDog(hot_dog)`）。
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If the function call is not `ReadyToServeHotDog` or if the execution is in `prepare_serving`,
    this checker sees no issue and returns early. If the function call is `ReadyToServeHotDog`
    and the execution is not in `prepare_serving`, the checker fails and adds a message
    to indicate an `unverified-ready-to-serve-hotdog` check failure. By adding a message,
    Pylint will pass this on to the user and flag it as a failed check.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数调用不是`ReadyToServeHotDog`，或者执行在`prepare_serving`中，这个检查器则不会发现问题并早早返回。如果函数调用是`ReadyToServeHotDog`，而执行不在`prepare_serving`中，检查器将失败并添加一条消息来指示`unverified-ready-to-serve-hotdog`检查失败。通过添加消息，Pylint将把此信息传递给用户并标记为检查失败。
- en: 'Lastly, I need to register the linter:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我需要注册这个linter：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: And that’s it! With about 45 lines of Python, I have defined a Pylint plug-in.
    This was a simple checker, but your imagination is the limit for what you can
    do. Pylint checks, either built-in or user created, are invaluable for finding
    errors.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样了！使用大约45行Python代码，我定义了一个Pylint插件。这是一个简单的检查器，但是您可以无限想象您能做的事情。无论是内置的还是用户创建的Pylint检查器，对于查找错误都是无价的。
- en: Discussion Topic
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论主题
- en: What checkers can you create in your codebase? What error cases can you catch
    with the use of these checkers?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您在代码库中可以创建哪些检查器？您可以使用这些检查器捕捉哪些错误情况？
- en: Other Static Analyzers
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他静态分析工具
- en: Typecheckers and linters are often the first things people think of when they
    hear “static analysis,” but there are so many additional tools that can help you
    write robust code. Each tool acts as a separate line of defense, all stacked together,
    to protect your codebase. Think about each tool as a piece of Swiss cheese.^([1](part0026_split_008.html#idm45644727809592))
    Each individual piece of Swiss cheese has holes of various widths or sizes, but
    when multiple pieces are stacked together, it is unlikely that there is an area
    where all holes align and you can see through the stack.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 类型检查器和代码检查器通常是人们在听到“静态分析”时首先想到的工具，但还有许多其他工具可以帮助你编写健壮的代码。每个工具都像是瑞士奶酪的一块。^([1](part0026_split_008.html#idm45644727809592))
    每块瑞士奶酪都有不同宽度或大小的孔洞，但当多块奶酪堆叠在一起时，几乎不可能有一个区域所有孔洞对齐，从而可以透过这个堆看到。
- en: Likewise, each tool you use to build a safety net will miss certain errors.
    Typecheckers won’t catch common programming mistakes, linters won’t check security
    violations, security checkers won’t catch complex code, and so on. But when these
    tools are stacked together, it’s much less likely for a legitimate error to squeak
    by (and for those that do, that’s why you have tests). As Bruce MacLennan says,
    “Have a series of defenses so that if an error is not caught by one, it will probably
    be caught by another.”^([2](part0026_split_008.html#idm45644727806264))
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你用来构建安全网络的每个工具都会忽略某些错误。类型检查器无法捕捉常见的编程错误，代码检查器无法检查安全违规，安全检查器无法捕捉复杂代码，等等。但是当这些工具堆叠在一起时，合法错误通过的可能性大大降低（对于那些通过的，那就是你需要测试的原因）。正如布鲁斯·麦克莱南所说，“设置一系列防御措施，这样如果一个错误没有被一个工具捕捉到，很可能会被另一个捕捉到。”^([2](part0026_split_008.html#idm45644727806264))
- en: Complexity Checkers
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复杂性检查器
- en: Most of this book has been centered on readable and maintainable code. I’ve
    talked about how complex code impacts the speed of feature development. It’d be
    nice for a tool to indicate which parts of your codebase have high complexity.
    Unfortunately, complexity is subjective and reducing complexity will not always
    reduce errors. I can, however, treat complexity measures as a *heuristic*. A heuristic
    is something that provides an answer, but offers no guarantee that it is an optimal
    answer. In this case, the question is, “Where can I find the most bugs in my code?”
    Most of the time, it will be in code with high complexity, but remember that this
    is not a guarantee.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 本书大部分内容都集中在可读性和可维护性代码上。我谈到了复杂代码如何影响功能开发的速度。一个工具可以指示代码库中哪些部分具有高复杂性将会很好。不幸的是，复杂性是主观的，减少复杂性并不总是会减少错误。但我可以将复杂性度量视为*启发式*。启发式是提供答案但不保证是最优答案的东西。在这种情况下，问题是，“我代码中哪里可能有最多的bug？”大多数情况下，会在复杂性高的代码中发现，但请记住这并非保证。
- en: Cyclomatic complexity with mccabe
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 带麦卡比的圈复杂度
- en: One of the most popular complexity heuristics is known as *cyclomatic complexity*,
    first described by Thomas McCabe.^([3](part0026_split_008.html#idm45644727709720))
    To measure code’s cyclomatic complexity, you must view your code as a *control
    flow graph*, or a graph that maps out the different paths of execution your code
    can take. [Figure 20-1](part0026_split_006.html#cyclomatic) shows you a few different
    examples.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最流行的复杂性启发式之一被称为*圈复杂度*，最早由托马斯·麦卡比描述。^([3](part0026_split_008.html#idm45644727709720))
    要测量代码的圈复杂度，你必须将代码视为*控制流图*，或者一个绘制出代码可以执行的不同路径的图形。[图 20-1](part0026_split_006.html#cyclomatic)
    展示了几个不同的例子。
- en: '![ropy 2001](../images/00038.gif)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![ropy 2001](../images/00038.gif)'
- en: Figure 20-1\. Cyclomatic complexity examples
  id: totrans-61
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图20-1\. 圈复杂度示例
- en: 'Section A of [Figure 20-1](part0026_split_006.html#cyclomatic) demonstrates
    a linear flow of statements, which has a complexity of one. An `if` with no `elif`
    statement, as shown in Section B of [Figure 20-1](part0026_split_006.html#cyclomatic),
    has two paths (`if` or `else`/fall-through), so the complexity is two. Similarly
    a `while` loop, like in Section C of [Figure 20-1](part0026_split_006.html#cyclomatic),
    has two separate paths: either the loop continues or exits. As the code gets more
    complex, the cyclomatic complexity number gets higher.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 20-1](part0026_split_006.html#cyclomatic) 的A部分展示了语句的线性流动，复杂度为一。如同B部分所示，没有elif语句的if语句有两条路径（if或else/跟随），因此复杂度为两。类似地，像C部分中的while循环，有两个不同的路径：循环继续或退出。随着代码变得更复杂，圈复杂度数字会变得更高。'
- en: You can use a static analysis tool in Python to measure cyclomatic complexity,
    aptly named `mccabe`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Python中的静态分析工具来测量圈复杂度，其名为`mccabe`。
- en: 'I’ll install it with `pip`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我将用`pip`安装它：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To test it out, I’ll run it on the `mccabe` codebase itself and flag any function
    that has a cyclomatic complexity greater than or equal to five:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试它，我将在`mccabe`代码库本身上运行它，并标记任何圈复杂度大于或等于五的函数：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let’ take a look at `PathGraphingAstVisitor._subgraph_parse`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`PathGraphingAstVisitor._subgraph_parse`：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'There are a few things going on in this function: various conditional branches,
    loops, and even a loop nested in an `if` statement. Each of these paths is independent
    and needs to be tested for. As cyclomatic complexity grows, code gets harder to
    read and harder to reason about. There is no magic number for cyclomatic complexity;
    you will need to inspect your codebase and look for a suitable limit.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数中发生了几件事情：各种条件分支、循环，甚至在`if`语句中嵌套了一个循环。每条路径都是独立的，需要进行测试。随着圈复杂度的增加，代码变得越来越难阅读和理解。圈复杂度没有一个魔法数字；您需要检查您的代码库并寻找一个合适的限制。
- en: Whitespace heuristic
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 空白启发式
- en: 'There’s another complexity heuristic that I am quite fond of that is a bit
    simpler to reason about than cyclomatic complexity: [whitespace checking](https://oreil.ly/i3Dpd).
    The idea is as follows: count how many levels of indentation there are in a single
    Python file. High levels of indentation indicate nested loops and branches, which
    may signal complex code.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种复杂度启发式方法我非常喜欢，比圈复杂度稍微简单一些来理解：[空白检查](https://oreil.ly/i3Dpd)。其思想如下：计算一个Python文件中有多少级缩进。高水平的缩进表示嵌套循环和分支，这可能表明代码复杂度高。
- en: 'Unfortunately, there are no popular tools at the time of writing that handle
    whitespace heuristics. However, it is easy to write this checker yourself:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在撰写本文时还没有流行的工具来处理空白启发式。然而，编写这个检查器自己是很容易的：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-75
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Another possible measure of whitespace is the “area” of indentation per function,
    where you sum up all the indentation instead of averaging it. I am leaving this
    as an exercise for the reader to implement.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可能的空白度量是每个函数的缩进“面积”，其中您总结所有缩进而不是对其进行平均。我将这留给读者自行实现。
- en: As with cyclomatic complexity, there is no magic number to check for with whitespace
    complexity. I encourage you to play around in your codebase and determine what
    an appropriate amount of indentation is.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 和圈复杂度一样，空白复杂度也没有一个魔法数字可以检查。我鼓励你在你的代码库中试验，并确定适当的缩进量。
- en: Security Analysis
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全分析
- en: Security is difficult to do right, and hardly anyone ever gets lauded for breach
    prevention. Instead, it’s the breaches themselves that seem to dominate the news.
    Every month I hear of another breach or data leak. These breakdowns are incredibly
    costly to a company, be it from regulatory fines or loss of customer base.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性很难做到正确，并且几乎没有人因为防范漏洞而受到赞扬。相反，似乎是漏洞本身主导了新闻。每个月我都会听说另一起泄露或数据泄露。这些故障对公司来说无比昂贵，无论是因为监管罚款还是失去客户基础。
- en: Every developer needs to be hyperaware of the security of their codebase. You
    don’t want to hear about how *your* codebase is the root cause of the latest massive
    data breach in the news. Thankfully, there are static analysis tools that can
    prevent common security flaws.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 每个开发人员都需要高度关注他们代码库的安全性。您不希望听说您的代码库是新闻中最新大规模数据泄露的根本原因。幸运的是，有些静态分析工具可以防止常见的安全漏洞。
- en: Leaking secrets
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 泄露的秘密
- en: If you ever want to be terrified, search for the text `AWS_SECRET_KEY` in your
    favorite code-hosting tool, like [GitHub](https://oreil.ly/FEm7D). You will be
    amazed at how many people commit secret values such as the key that provides access
    to AWS.^([4](part0026_split_008.html#idm45644727499976))
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要被吓到，可以在你喜欢的代码托管工具中搜索文本`AWS_SECRET_KEY`，比如[GitHub](https://oreil.ly/FEm7D)。你会惊讶地发现有多少人提交了像AWS访问密钥这样的秘密值。^([4](part0026_split_008.html#idm45644727499976))
- en: Once a secret is in a version control system, especially a publicly hosted one,
    it is very hard to remove traces of it. The organization is forced to revoke any
    leaked credentials, but they have to do it faster than the troves of hackers trawling
    repositories for keys. To prevent this, use a static analysis tool that specifically
    looks for leaked secrets, such as [dodgy](https://github.com/landscapeio/dodgy).
    If you don’t choose to use a prebuilt tool, at least perform a text search on
    your codebase to make sure that nobody is leaking common credentials.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦秘密信息进入版本控制系统，尤其是公开托管的系统，要消除其痕迹非常困难。组织被迫撤销任何泄露的凭据，但他们必须比搜索密钥的大量黑客更快。为了防止这种情况发生，请使用专门查找泄漏秘密的静态分析工具，例如[dodgy](https://github.com/landscapeio/dodgy)。如果您选择不使用预构建工具，请至少在代码库中执行文本搜索，以确保没有人泄露常见凭据。
- en: Security flaw checking
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全漏洞检查
- en: 'Checking for leaked credentials is one thing, but what about more serious security
    flaws? How do you find things like SQL injection, arbitrary code execution, or
    incorrectly configured network settings? When exploited, these sorts of flaws
    can be detrimental to your security profile. But, just like every other problem
    in this chapter, there is a static analysis tool for handling this: Bandit.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 检查泄露凭据只是一件事，但更严重的安全漏洞怎么办？如何找到像 SQL 注入、任意代码执行或错误配置的网络设置等问题？当这些漏洞被利用时，会对您的安全配置造成重大损害。但就像本章中的其他问题一样，有一个静态分析工具可以处理这些问题：Bandit。
- en: 'Bandit checks for common security problems. You can find a full list in the
    [Bandit documentation](https://bandit.readthedocs.io/en/latest), but here is a
    preview of the sorts of flaws Bandit looks for:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Bandit 检查常见的安全问题。您可以在[Bandit 文档](https://bandit.readthedocs.io/en/latest)中找到完整的列表，但这里是
    Bandit 寻找的缺陷类型的预览：
- en: Flask in debug mode, which can lead to remote code execution
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask 调试模式可能导致远程代码执行
- en: Making an HTTPS request without certificate validation turned on
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发出不进行证书验证的 HTTPS 请求
- en: Raw SQL statements that have the potential for SQL injection
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 潜在存在 SQL 注入风险的原始 SQL 语句
- en: Weak cryptographic key creation
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弱密码密钥生成
- en: Flagging untrusted data influencing code paths, such as unsafe YAML loading
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记不受信任的数据影响代码路径，例如不安全的 YAML 加载
- en: 'Bandit checks for so many different potential security flaws. I highly recommend
    running it against your codebase:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Bandit 检查了许多不同的潜在安全漏洞。我强烈建议对您的代码库运行它：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Bandit also has a robust plug-in system, so that you can augment the flaw detection
    with your own security checks.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Bandit 还具有强大的插件系统，因此您可以使用自己的安全检查来增强缺陷检测。
- en: Warning
  id: totrans-95
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: While security-oriented static analyzers are very useful, do not make them your
    only line of defense. Supplement these tools by continuing additional security
    practices (such as conducting audits, running penetration tests, and securing
    your networks).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然以安全为导向的静态分析工具非常有用，但不要将它们作为唯一的防线。通过继续实施额外的安全实践（如进行审计、运行渗透测试和保护您的网络），来补充这些工具。
- en: Closing Thoughts
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结思考
- en: 'Catching errors early saves you time and money. Your goal is to find errors
    as you develop code. Static analysis tools are your friends in this endeavor.
    They are a cheap, quick way to find any problems in your codebase. There are a
    variety of static analyzers to meet your needs: linters, security checkers, and
    complexity checkers. Each has its own purpose and provides a layer of defense.
    And for the errors that these tools don’t catch, you extend the static analyzers
    through the use of a plug-in system.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 尽早捕获错误可以节省时间和金钱。您的目标是在开发代码时发现错误。静态分析工具在这方面是您的好帮手。它们是在代码库中快速发现问题的廉价方式。有各种静态分析器可供选择：代码检查器、安全检查器和复杂性检查器。每种工具都有其自身的目的，并提供了一层防护。对于这些工具未能捕捉的错误，您可以通过使用插件系统来扩展静态分析工具。
- en: While static analyzers are your first line of defense, they are not your only
    line. For the rest of the book, I will focus on tests. The next chapter will focus
    on your testing strategy. I’ll walk through how you need to organize your tests,
    as well as the best practices surrounding writing tests. You’ll learn how to write
    a testing triangle, how to ask the right questions around testing, and how to
    write effective developer tests.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然静态分析工具是您的第一道防线，但它们不是唯一的防线。本书的其余部分将专注于测试。下一章将专注于您的测试策略。我将详细介绍如何组织您的测试，以及围绕编写测试的最佳实践。您将学习如何编写测试金字塔，如何在测试中提出正确的问题，以及如何编写有效的开发者测试。
- en: '^([1](part0026_split_005.html#idm45644727809592-marker)) J. Reason. “Human
    Error: Models and Management.” *BMJ* 320, no. 7237 (2000): 768–70\. [*https://doi.org/10.1136/bmj.320.7237.768*](https://doi.org/10.1136/bmj.320.7237.768).'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](part0026_split_005.html#idm45644727809592-marker)) J. Reason. “人为错误：模型与管理。”
    *BMJ* 320, 第7237期（2000年）：768–70\. [*https://doi.org/10.1136/bmj.320.7237.768*](https://doi.org/10.1136/bmj.320.7237.768).
- en: ^([2](part0026_split_005.html#idm45644727806264-marker)) Bruce MacLennan. “Principles
    of Programming Language Design.” web.eecs.utk.edu, September 10, 1998\. [*https://oreil.ly/hrjdR*](https://oreil.ly/hrjdR).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](part0026_split_005.html#idm45644727806264-marker)) Bruce MacLennan. “编程语言设计原理。”
    web.eecs.utk.edu，1998年9月10日\. [*https://oreil.ly/hrjdR*](https://oreil.ly/hrjdR).
- en: '^([3](part0026_split_006.html#idm45644727709720-marker)) T.J. McCabe. “A Complexity
    Measure.” *IEEE Transactions on Software Engineering* SE-2, no. 4 (December 1976):
    308–20\. [*https://doi.org/10.1109/tse.1976.233837*](https://doi.org/10.1109/tse.1976.233837).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](part0026_split_006.html#idm45644727709720-marker)) T.J. McCabe. “一个复杂性度量。”
    *IEEE软件工程期刊* SE-2，第4期（1976年12月）：308–20\. [*https://doi.org/10.1109/tse.1976.233837*](https://doi.org/10.1109/tse.1976.233837).
- en: ^([4](part0026_split_007.html#idm45644727499976-marker)) There are real-world
    implications to this. A quick search on the internet turns up tons of articles
    detailing this problem, such as [*https://oreil.ly/gimse*](https://oreil.ly/gimse).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](part0026_split_007.html#idm45644727499976-marker)) 这有现实世界的影响。在互联网上快速搜索会找到大量详细介绍这个问题的文章，比如
    [*https://oreil.ly/gimse*](https://oreil.ly/gimse).
