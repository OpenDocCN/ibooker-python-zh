["```py\n>>> import csv\n>>> villains = [\n...     ['Doctor', 'No'],\n...     ['Rosa', 'Klebb'],\n...     ['Mister', 'Big'],\n...     ['Auric', 'Goldfinger'],\n...     ['Ernst', 'Blofeld'],\n...     ]\n>>> with open('villains', 'wt') as fout:  # a context manager\n...     csvout = csv.writer(fout)\n...     csvout.writerows(villains)\n```", "```py\nDoctor,No\nRosa,Klebb\nMister,Big\nAuric,Goldfinger\nErnst,Blofeld\n```", "```py\n>>> import csv\n>>> with open('villains', 'rt') as fin:  # context manager\n...     cin = csv.reader(fin)\n...     villains = [row for row in cin]  # a list comprehension\n...\n>>> print(villains)\n[['Doctor', 'No'], ['Rosa', 'Klebb'], ['Mister', 'Big'],\n['Auric', 'Goldfinger'], ['Ernst', 'Blofeld']]\n```", "```py\n>>> import csv\n>>> with open('villains', 'rt') as fin:\n...     cin = csv.DictReader(fin, fieldnames=['first', 'last'])\n...     villains = [row for row in cin]\n...\n>>> print(villains)\n[OrderedDict([('first', 'Doctor'), ('last', 'No')]),\nOrderedDict([('first', 'Rosa'), ('last', 'Klebb')]),\nOrderedDict([('first', 'Mister'), ('last', 'Big')]),\nOrderedDict([('first', 'Auric'), ('last', 'Goldfinger')]),\nOrderedDict([('first', 'Ernst'), ('last', 'Blofeld')])]\n```", "```py\nimport csv\nvillains = [\n {'first': 'Doctor', 'last': 'No'},\n {'first': 'Rosa', 'last': 'Klebb'},\n {'first': 'Mister', 'last': 'Big'},\n {'first': 'Auric', 'last': 'Goldfinger'},\n {'first': 'Ernst', 'last': 'Blofeld'},\n ]\nwith open('villains.txt', 'wt') as fout:\n cout = csv.DictWriter(fout, ['first', 'last'])\n cout.writeheader()\n cout.writerows(villains)\n```", "```py\nfirst,last\nDoctor,No\nRosa,Klebb\nMister,Big\nAuric,Goldfinger\nErnst,Blofeld\n```", "```py\n>>> import csv\n>>> with open('villains.csv', 'rt') as fin:\n...     cin = csv.DictReader(fin)\n...     villains = [row for row in cin]\n...\n>>> print(villains)\n[OrderedDict([('first', 'Doctor'), ('last', 'No')]),\nOrderedDict([('first', 'Rosa'), ('last', 'Klebb')]),\nOrderedDict([('first', 'Mister'), ('last', 'Big')]),\nOrderedDict([('first', 'Auric'), ('last', 'Goldfinger')]),\nOrderedDict([('first', 'Ernst'), ('last', 'Blofeld')])]\n```", "```py\n<?xml version=\"1.0\"?>\n<menu>\n  <breakfast hours=\"7-11\">\n    <item price=\"$6.00\">breakfast burritos</item>\n    <item price=\"$4.00\">pancakes</item>\n  </breakfast>\n  <lunch hours=\"11-3\">\n    <item price=\"$5.00\">hamburger</item>\n  </lunch>\n  <dinner hours=\"3-10\">\n    <item price=\"8.00\">spaghetti</item>\n  </dinner>\n</menu>\n```", "```py\n>>> import xml.etree.ElementTree as et\n>>> tree = et.ElementTree(file='menu.xml')\n>>> root = tree.getroot()\n>>> root.tag\n'menu'\n>>> for child in root:\n...     print('tag:', child.tag, 'attributes:', child.attrib)\n...     for grandchild in child:\n...         print('\\ttag:', grandchild.tag, 'attributes:', grandchild.attrib)\n...\ntag: breakfast attributes: {'hours': '7-11'}\n tag: item attributes: {'price': '$6.00'}\n tag: item attributes: {'price': '$4.00'}\ntag: lunch attributes: {'hours': '11-3'}\n tag: item attributes: {'price': '$5.00'}\ntag: dinner attributes: {'hours': '3-10'}\n tag: item attributes: {'price': '8.00'}\n>>> len(root)     # number of menu sections\n3\n>>> len(root[0])  # number of breakfast items\n2\n```", "```py\n<?xml version=\"1.0\"?>\n<!DOCTYPE lolz [\n <!ENTITY lol \"lol\">\n <!ENTITY lol1 \"&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;\">\n <!ENTITY lol2 \"&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;\">\n <!ENTITY lol3 \"&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;\">\n <!ENTITY lol4 \"&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;\">\n <!ENTITY lol5 \"&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;\">\n <!ENTITY lol6 \"&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;\">\n <!ENTITY lol7 \"&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;\">\n <!ENTITY lol8 \"&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;\">\n <!ENTITY lol9 \"&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;\">\n]>\n<lolz>&lol9;</lolz>\n```", "```py\n>>> # insecure:\n>>> from xml.etree.ElementTree import parse\n>>> et = parse(xmlfile)\n>>> # protected:\n>>> from defusedxml.ElementTree import parse\n>>> et = parse(xmlfile)\n```", "```py\n>>> menu = \\\n... {\n... \"breakfast\": {\n...         \"hours\": \"7-11\",\n...         \"items\": {\n...                 \"breakfast burritos\": \"$6.00\",\n...                 \"pancakes\": \"$4.00\"\n...                 }\n...         },\n... \"lunch\" : {\n...         \"hours\": \"11-3\",\n...         \"items\": {\n...                 \"hamburger\": \"$5.00\"\n...                 }\n...         },\n... \"dinner\": {\n...         \"hours\": \"3-10\",\n...         \"items\": {\n...                 \"spaghetti\": \"$8.00\"\n...                 }\n...         }\n... }\n.\n```", "```py\n>>> import json\n>>> menu_json = json.dumps(menu)\n>>> menu_json\n'{\"dinner\": {\"items\": {\"spaghetti\": \"$8.00\"}, \"hours\": \"3-10\"},\n\"lunch\": {\"items\": {\"hamburger\": \"$5.00\"}, \"hours\": \"11-3\"},\n\"breakfast\": {\"items\": {\"breakfast burritos\": \"$6.00\", \"pancakes\":\n\"$4.00\"}, \"hours\": \"7-11\"}}'\n```", "```py\n>>> menu2 = json.loads(menu_json)\n>>> menu2\n{'breakfast': {'items': {'breakfast burritos': '$6.00', 'pancakes':\n'$4.00'}, 'hours': '7-11'}, 'lunch': {'items': {'hamburger': '$5.00'},\n'hours': '11-3'}, 'dinner': {'items': {'spaghetti': '$8.00'}, 'hours': '3-10'}}\n```", "```py\n>>> import datetime\n>>> import json\n>>> now = datetime.datetime.utcnow()\n>>> now\ndatetime.datetime(2013, 2, 22, 3, 49, 27, 483336)\n>>> json.dumps(now)\nTraceback (most recent call last):\n# ... (deleted stack trace to save trees)\nTypeError: datetime.datetime(2013, 2, 22, 3, 49, 27, 483336)\n is not JSON serializable\n>>>\n```", "```py\n>>> now_str = str(now)\n>>> json.dumps(now_str)\n'\"2013-02-22 03:49:27.483336\"'\n>>> from time import mktime\n>>> now_epoch = int(mktime(now.timetuple()))\n>>> json.dumps(now_epoch)\n'1361526567'\n```", "```py\n>>> import datetime\n>>> now = datetime.datetime.utcnow()\n>>> class DTEncoder(json.JSONEncoder):\n...     def default(self, obj):\n...         # isinstance() checks the type of obj\n...         if isinstance(obj, datetime.datetime):\n...             return int(mktime(obj.timetuple()))\n...         # else it's something the normal decoder knows:\n...         return json.JSONEncoder.default(self, obj)\n...\n>>> json.dumps(now, cls=DTEncoder)\n'1361526567'\n```", "```py\n>>> import datetime\n>>> now = datetime.datetime.utcnow()\n>>> type(now)\n<class 'datetime.datetime'>\n>>> isinstance(now, datetime.datetime)\nTrue\n>>> type(234)\n<class 'int'>\n>>> isinstance(234, int)\nTrue\n>>> type('hey')\n<class 'str'>\n>>> isinstance('hey', str)\nTrue\n```", "```py\n>>> import datetime\n>>> import json\n>>> now = datetime.datetime.utcnow()\n>>> json.dumps(now, default=str)\n'\"2019-04-17 21:54:43.617337\"'\n```", "```py\nname:\n  first: James\n  last: McIntyre\ndates:\n  birth: 1828-05-25\n  death: 1906-03-31\ndetails:\n  bearded: true\n  themes: [cheese, Canada]\nbooks:\n  url: http://www.gutenberg.org/files/36068/36068-h/36068-h.htm\npoems:\n  - title: 'Motto'\n    text: |\n      Politeness, perseverance and pluck,\n      To their possessor will bring good luck.\n  - title: 'Canadian Charms'\n    text: |\n      Here industry is not in vain,\n      For we have bounteous crops of grain,\n      And you behold on every field\n      Of grass and roots abundant yield,\n      But after all the greatest charm\n      Is the snug home upon the farm,\n      And stone walls now keep cattle warm.\n```", "```py\n>>> import yaml\n>>> with open('mcintyre.yaml', 'rt') as fin:\n>>>     text = fin.read()\n>>> data = yaml.load(text)\n>>> data['details']\n{'themes': ['cheese', 'Canada'], 'bearded': True}\n>>> len(data['poems'])\n2\n```", "```py\n>>> data['poems'][1]['title']\n'Canadian Charms'\n```", "```py\n>>> import pandas\n>>>\n>>> data = pandas.read_csv('villains.csv')\n>>> print(data)\n    first        last\n0  Doctor          No\n1    Rosa       Klebb\n2  Mister         Big\n3   Auric  Goldfinger\n4   Ernst     Blofeld\n```", "```py\n>>> import pandas\n>>> dates = pandas.date_range('2019-01-01', periods=3, freq='MS')\n>>> dates\nDatetimeIndex(['2019-01-01', '2019-02-01', '2019-03-01'],\n dtype='datetime64[ns]', freq='MS')\n```", "```py\n[english]\ngreeting = Hello\n\n[french]\ngreeting = Bonjour\n\n[files]\nhome = /usr/local\n# simple interpolation:\nbin = %(home)s/bin\n```", "```py\n>>> import configparser\n>>> cfg = configparser.ConfigParser()\n>>> cfg.read('settings.cfg')\n['settings.cfg']\n>>> cfg\n<configparser.ConfigParser object at 0x1006be4d0>\n>>> cfg['french']\n<Section: french>\n>>> cfg['french']['greeting']\n'Bonjour'\n>>> cfg['files']['bin']\n'/usr/local/bin'\n```", "```py\n>>> import sqlite3\n>>> conn = sqlite3.connect('enterprise.db')\n>>> curs = conn.cursor()\n>>> curs.execute('''CREATE TABLE zoo\n (critter VARCHAR(20) PRIMARY KEY,\n count INT,\n damages FLOAT)''')\n<sqlite3.Cursor object at 0x1006a22d0>\n```", "```py\n>>> curs.execute('INSERT INTO zoo VALUES(\"duck\", 5, 0.0)')\n<sqlite3.Cursor object at 0x1006a22d0>\n>>> curs.execute('INSERT INTO zoo VALUES(\"bear\", 2, 1000.0)')\n<sqlite3.Cursor object at 0x1006a22d0>\n```", "```py\n>>> ins = 'INSERT INTO zoo (critter, count, damages) VALUES(?, ?, ?)'\n>>> curs.execute(ins, ('weasel', 1, 2000.0))\n<sqlite3.Cursor object at 0x1006a22d0>\n```", "```py\n>>> curs.execute('SELECT * FROM zoo')\n<sqlite3.Cursor object at 0x1006a22d0>\n>>> rows = curs.fetchall()\n>>> print(rows)\n[('duck', 5, 0.0), ('bear', 2, 1000.0), ('weasel', 1, 2000.0)]\n```", "```py\n>>> curs.execute('SELECT * from zoo ORDER BY count')\n<sqlite3.Cursor object at 0x1006a22d0>\n>>> curs.fetchall()\n[('weasel', 1, 2000.0), ('bear', 2, 1000.0), ('duck', 5, 0.0)]\n```", "```py\n>>> curs.execute('SELECT * from zoo ORDER BY count DESC')\n<sqlite3.Cursor object at 0x1006a22d0>\n>>> curs.fetchall()\n[('duck', 5, 0.0), ('bear', 2, 1000.0), ('weasel', 1, 2000.0)]\n```", "```py\n>>> curs.execute('''SELECT * FROM zoo WHERE\n...     damages = (SELECT MAX(damages) FROM zoo)''')\n<sqlite3.Cursor object at 0x1006a22d0>\n>>> curs.fetchall()\n[('weasel', 1, 2000.0)]\n```", "```py\n>>> curs.close()\n>>> conn.close()\n```", "```py\n$ pip install sqlalchemy\n```", "```py\n*`dialect`* + *`driver`* :// *`user`* : *`password`* @ *`host`* : *`port`* / *`dbname`*\n```", "```py\n>>> import sqlalchemy as sa\n```", "```py\n>>> conn = sa.create_engine('sqlite://')\n```", "```py\n>>> conn.execute('''CREATE TABLE zoo\n...     (critter VARCHAR(20) PRIMARY KEY,\n...      count INT,\n...      damages FLOAT)''')\n<sqlalchemy.engine.result.ResultProxy object at 0x1017efb10>\n```", "```py\n>>> ins = 'INSERT INTO zoo (critter, count, damages) VALUES (?, ?, ?)'\n>>> conn.execute(ins, 'duck', 10, 0.0)\n<sqlalchemy.engine.result.ResultProxy object at 0x1017efb50>\n>>> conn.execute(ins, 'bear', 2, 1000.0)\n<sqlalchemy.engine.result.ResultProxy object at 0x1017ef090>\n>>> conn.execute(ins, 'weasel', 1, 2000.0)\n<sqlalchemy.engine.result.ResultProxy object at 0x1017ef450>\n```", "```py\n>>> rows = conn.execute('SELECT * FROM zoo')\n```", "```py\n>>> print(rows)\n<sqlalchemy.engine.result.ResultProxy object at 0x1017ef9d0>\n```", "```py\n>>> for row in rows:\n...     print(row)\n...\n('duck', 10, 0.0)\n('bear', 2, 1000.0)\n('weasel', 1, 2000.0)\n```", "```py\n>>> import sqlalchemy as sa\n>>> conn = sa.create_engine('sqlite://')\n```", "```py\n>>> meta = sa.MetaData()\n>>> zoo = sa.Table('zoo', meta,\n...     sa.Column('critter', sa.String, primary_key=True),\n...     sa.Column('count', sa.Integer),\n...     sa.Column('damages', sa.Float)\n...    )\n>>> meta.create_all(conn)\n```", "```py\n... conn.execute(zoo.insert(('bear', 2, 1000.0)))\n<sqlalchemy.engine.result.ResultProxy object at 0x1017ea910>\n>>> conn.execute(zoo.insert(('weasel', 1, 2000.0)))\n<sqlalchemy.engine.result.ResultProxy object at 0x1017eab10>\n>>> conn.execute(zoo.insert(('duck', 10, 0)))\n<sqlalchemy.engine.result.ResultProxy object at 0x1017eac50>\n```", "```py\n>>> result = conn.execute(zoo.select())\n```", "```py\n>>> rows = result.fetchall()\n>>> print(rows)\n[('bear', 2, 1000.0), ('weasel', 1, 2000.0), ('duck', 10, 0.0)]\n```", "```py\n>>> import sqlalchemy as sa\n>>> from sqlalchemy.ext.declarative import declarative_base\n```", "```py\n>>> conn = sa.create_engine('sqlite:///zoo.db')\n```", "```py\n>>> Base = declarative_base()\n>>> class Zoo(Base):\n...     __tablename__ = 'zoo'\n...     critter = sa.Column('critter', sa.String, primary_key=True)\n...     count = sa.Column('count', sa.Integer)\n...     damages = sa.Column('damages', sa.Float)\n...     def __init__(self, critter, count, damages):\n...         self.critter = critter\n...         self.count = count\n...         self.damages = damages\n...     def __repr__(self):\n...         return \"<Zoo({}, {}, {})>\".format(self.critter, self.count,\n...           self.damages)\n```", "```py\n>>> Base.metadata.create_all(conn)\n```", "```py\n>>> first = Zoo('duck', 10, 0.0)\n>>> second = Zoo('bear', 2, 1000.0)\n>>> third = Zoo('weasel', 1, 2000.0)\n>>> first\n<Zoo(duck, 10, 0.0)>\n```", "```py\n>>> from sqlalchemy.orm import sessionmaker\n>>> Session = sessionmaker(bind=conn)\n>>> session = Session()\n```", "```py\n>>> session.add(first)\n>>> session.add_all([second, third])\n```", "```py\n>>> session.commit()\n```", "```py\n$ sqlite3 zoo.db\nSQLite version 3.6.12\nEnter \".help\" for instructions\nEnter SQL statements terminated with a \";\"\nsqlite> .tables\nzoo\nsqlite> select * from zoo;\nduck|10|0.0\nbear|2|1000.0\nweasel|1|2000.0\n```", "```py\n>>> import dbm\n>>> db = dbm.open('definitions', 'c')\n```", "```py\n>>> db['mustard'] = 'yellow'\n>>> db['ketchup'] = 'red'\n>>> db['pesto'] = 'green'\n```", "```py\n>>> len(db)\n3\n>>> db['pesto']\nb'green'\n```", "```py\n>>> db.close()\n>>> db = dbm.open('definitions', 'r')\n>>> db['mustard']\nb'yellow'\n```", "```py\n$ pip install python-memcached\n```", "```py\n>>> import memcache\n>>> db = memcache.Client(['127.0.0.1:11211'])\n>>> db.set('marco', 'polo')\nTrue\n>>> db.get('marco')\n'polo'\n>>> db.set('ducks', 0)\nTrue\n>>> db.get('ducks')\n0\n>>> db.incr('ducks', 2)\n2\n>>> db.get('ducks')\n2\n```", "```py\n$ pip install redis\n```", "```py\n>>> import redis\n>>> conn = redis.Redis()\n```", "```py\n>>> conn.keys('*')\n[]\n```", "```py\n>>> conn.set('secret', 'ni!')\nTrue\n>>> conn.set('carats', 24)\nTrue\n>>> conn.set('fever', '101.5')\nTrue\n```", "```py\n>>> conn.get('secret')\nb'ni!'\n>>> conn.get('carats')\nb'24'\n>>> conn.get('fever')\nb'101.5'\n```", "```py\n>>> conn.setnx('secret', 'icky-icky-icky-ptang-zoop-boing!')\nFalse\n```", "```py\n>>> conn.get('secret')\nb'ni!'\n```", "```py\n>>> conn.getset('secret', 'icky-icky-icky-ptang-zoop-boing!')\nb'ni!'\n```", "```py\n>>> conn.get('secret')\nb'icky-icky-icky-ptang-zoop-boing!'\n```", "```py\n>>> conn.getrange('secret', -6, -1)\nb'boing!'\n```", "```py\n>>> conn.setrange('secret', 0, 'ICKY')\n32\n>>> conn.get('secret')\nb'ICKY-icky-icky-ptang-zoop-boing!'\n```", "```py\n>>> conn.mset({'pie': 'cherry', 'cordial': 'sherry'})\nTrue\n```", "```py\n>>> conn.mget(['fever', 'carats'])\n[b'101.5', b'24']\n```", "```py\n>>> conn.delete('fever')\nTrue\n```", "```py\n>>> conn.incr('carats')\n25\n>>> conn.incr('carats', 10)\n35\n>>> conn.decr('carats')\n34\n>>> conn.decr('carats', 15)\n19\n>>> conn.set('fever', '101.5')\nTrue\n>>> conn.incrbyfloat('fever')\n102.5\n>>> conn.incrbyfloat('fever', 0.5)\n103.0\n```", "```py\n>>> conn.incrbyfloat('fever', -2.0)\n101.0\n```", "```py\n>>> conn.lpush('zoo', 'bear')\n1\n```", "```py\n>>> conn.lpush('zoo', 'alligator', 'duck')\n3\n```", "```py\n>>> conn.linsert('zoo', 'before', 'bear', 'beaver')\n4\n>>> conn.linsert('zoo', 'after', 'bear', 'cassowary')\n5\n```", "```py\n>>> conn.lset('zoo', 2, 'marmoset')\nTrue\n```", "```py\n>>> conn.rpush('zoo', 'yak')\n6\n```", "```py\n>>> conn.lindex('zoo', 3)\nb'bear'\n```", "```py\n>>> conn.lrange('zoo', 0, 2)\n[b'duck', b'alligator', b'marmoset']\n```", "```py\n>>> conn.ltrim('zoo', 1, 4)\nTrue\n```", "```py\n>>> conn.lrange('zoo', 0, -1)\n[b'alligator', b'marmoset', b'bear', b'cassowary']\n```", "```py\n>>> conn.hmset('song', {'do': 'a deer', 're': 'about a deer'})\nTrue\n```", "```py\n>>> conn.hset('song', 'mi', 'a note to follow re')\n1\n```", "```py\n>>> conn.hget('song', 'mi')\nb'a note to follow re'\n```", "```py\n>>> conn.hmget('song', 're', 'do')\n[b'about a deer', b'a deer']\n```", "```py\n>>> conn.hkeys('song')\n[b'do', b're', b'mi']\n```", "```py\n>>> conn.hvals('song')\n[b'a deer', b'about a deer', b'a note to follow re']\n```", "```py\n>>> conn.hlen('song')\n3\n```", "```py\n>>> conn.hgetall('song')\n{b'do': b'a deer', b're': b'about a deer', b'mi': b'a note to follow re'}\n```", "```py\n>>> conn.hsetnx('song', 'fa', 'a note that rhymes with la')\n1\n```", "```py\n>>> conn.sadd('zoo', 'duck', 'goat', 'turkey')\n3\n```", "```py\n>>> conn.scard('zoo')\n3\n```", "```py\n>>> conn.smembers('zoo')\n{b'duck', b'goat', b'turkey'}\n```", "```py\n>>> conn.srem('zoo', 'turkey')\nTrue\n```", "```py\n>>> conn.sadd('better_zoo', 'tiger', 'wolf', 'duck')\n0\n```", "```py\n>>> conn.sinter('zoo', 'better_zoo')\n{b'duck'}\n```", "```py\n>>> conn.sinterstore('fowl_zoo', 'zoo', 'better_zoo')\n1\n```", "```py\n>>> conn.smembers('fowl_zoo')\n{b'duck'}\n```", "```py\n>>> conn.sunion('zoo', 'better_zoo')\n{b'duck', b'goat', b'wolf', b'tiger'}\n```", "```py\n>>> conn.sunionstore('fabulous_zoo', 'zoo', 'better_zoo')\n4\n>>> conn.smembers('fabulous_zoo')\n{b'duck', b'goat', b'wolf', b'tiger'}\n```", "```py\n>>> conn.sdiff('zoo', 'better_zoo')\n{b'goat'}\n>>> conn.sdiffstore('zoo_sale', 'zoo', 'better_zoo')\n1\n>>> conn.smembers('zoo_sale')\n{b'goat'}\n```", "```py\n>>> import time\n>>> now = time.time()\n>>> now\n1361857057.576483\n```", "```py\n>>> conn.zadd('logins', 'smeagol', now)\n1\n```", "```py\n>>> conn.zadd('logins', 'sauron', now+(5*60))\n1\n```", "```py\n>>> conn.zadd('logins', 'bilbo', now+(2*60*60))\n1\n```", "```py\n>>> conn.zadd('logins', 'treebeard', now+(24*60*60))\n1\n```", "```py\n>>> conn.zrank('logins', 'bilbo')\n2\n```", "```py\n>>> conn.zscore('logins', 'bilbo')\n1361864257.576483\n```", "```py\n>>> conn.zrange('logins', 0, -1)\n[b'smeagol', b'sauron', b'bilbo', b'treebeard']\n```", "```py\n>>> conn.zrange('logins', 0, -1, withscores=True)\n[(b'smeagol', 1361857057.576483), (b'sauron', 1361857357.576483),\n(b'bilbo', 1361864257.576483), (b'treebeard', 1361943457.576483)]\n```", "```py\n>>> import time\n>>> key = 'now you see it'\n>>> conn.set(key, 'but not for long')\nTrue\n>>> conn.expire(key, 5)\nTrue\n>>> conn.ttl(key)\n5\n>>> conn.get(key)\nb'but not for long'\n>>> time.sleep(6)\n>>> conn.get(key)\n>>>\n```", "```py\nauthor,book\nJ R R Tolkien,The Hobbit\nLynne Truss,\"Eats, Shoots & Leaves\"\n```", "```py\ntitle,author,year\nThe Weirdstone of Brisingamen,Alan Garner,1960\nPerdido Street Station,China Miéville,2000\nThud!,Terry Pratchett,2005\nThe Spellman Files,Lisa Lutz,2007\nSmall Gods,Terry Pratchett,1992\n```"]