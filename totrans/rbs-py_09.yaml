- en: Part II. Defining Your Own Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to [Part II](part0011.html#part_2), where you’ll learn all about *user-defined
    types*. User-defined types are types that you, as a developer, create. In the
    first part of this book, I primarily focused on types that Python provides. However,
    these types are built for general use cases. They don’t tell you anything about
    the specific domain that you are operating in. In contrast, user-defined types
    serve as a conduit in which you express domain concepts in your codebase.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to build types that represent your domain. Python provides a few different
    ways to define your own data types, but you should take care with which one you
    choose. In this part of the book, we’ll go over three different user-defined types:'
  prefs: []
  type: TYPE_NORMAL
- en: Enumerations (`Enums`)
  prefs: []
  type: TYPE_NORMAL
- en: Enumerations provide a developer with a restricted set of values.
  prefs: []
  type: TYPE_NORMAL
- en: Data classes
  prefs: []
  type: TYPE_NORMAL
- en: Data classes represent a relationship between different concepts.
  prefs: []
  type: TYPE_NORMAL
- en: Classes
  prefs: []
  type: TYPE_NORMAL
- en: Classes represent a relationship between different concepts, with an invariant
    that needs to be preserved.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll learn all about using these types in a natural way and how they relate
    to one another. At the end of [Part II](part0011.html#part_2), we’ll walk through
    modeling your domain data in a more natural way. The choices you make when designing
    your types are crucial. By learning the principles behind user-defined types,
    you will more effectively communicate to future developers.
  prefs: []
  type: TYPE_NORMAL
