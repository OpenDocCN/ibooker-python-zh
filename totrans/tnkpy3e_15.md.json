["```py\nimport os\n\nos.getcwd() \n```", "```py\n'/home/dinsdale' \n```", "```py\nos.path.abspath('memo.txt') \n```", "```py\n'/home/dinsdale/memo.txt' \n```", "```py\nos.listdir('photos') \n```", "```py\n['digests.dat',\n 'digests.dir',\n 'notes.txt',\n 'new_notes.txt',\n 'mar-2023',\n 'digests.bak',\n 'jan-2023',\n 'feb-2023'] \n```", "```py\nos.listdir('photos/jan-2023') \n```", "```py\n['photo3.jpg', 'photo2.jpg', 'photo1.jpg'] \n```", "```py\nos.path.exists('photos') \n```", "```py\nTrue \n```", "```py\nos.path.exists('photos/apr-2023') \n```", "```py\nFalse \n```", "```py\nos.path.isdir('photos') \n```", "```py\nTrue \n```", "```py\nos.path.isfile('photos/notes.txt') \n```", "```py\nTrue \n```", "```py\nos.path.join('photos', 'jan-2023', 'photo1.jpg') \n```", "```py\n'photos/jan-2023/photo1.jpg' \n```", "```py\nnum_years = 1.5\nnum_camels = 23 \n```", "```py\nwriter = open('camel-spotting-book.txt', 'w')\nwriter.write(str(num_years))\nwriter.write(str(num_camels))\nwriter.close() \n```", "```py\nopen('camel-spotting-book.txt').read() \n```", "```py\n'1.523' \n```", "```py\nf'I have spotted {num_camels} camels' \n```", "```py\n'I have spotted 23 camels' \n```", "```py\nf'In {num_years} years I have spotted {num_camels} camels' \n```", "```py\n'In 1.5 years I have spotted 23 camels' \n```", "```py\nline = f'In {round(num_years  *  12)} months I have spotted {num_camels} camels'\nline \n```", "```py\n'In 18 months I have spotted 23 camels' \n```", "```py\nwriter = open('camel-spotting-book.txt', 'w')\nwriter.write(f'Years of observation: {num_years}\\n')\nwriter.write(f'Camels spotted: {num_camels}\\n')\nwriter.close() \n```", "```py\ndata = open('camel-spotting-book.txt').read()\nprint(data) \n```", "```py\nYears of observation: 1.5\nCamels spotted: 23 \n```", "```py\nt = [1, 2, 3]\nd = {'one': 1}\nf'Here is a list {t} and a dictionary {d}' \n```", "```py\n\"Here is a list [1, 2, 3] and a dictionary {'one': 1}\" \n```", "```py\nconfig = {\n    'photo_dir': 'photos',\n    'data_dir': 'photo_info',\n    'extensions': ['jpg', 'jpeg'],\n} \n```", "```py\nimport yaml\n\nconfig_filename = 'config.yaml'\nwriter = open(config_filename, 'w')\nyaml.dump(config, writer)\nwriter.close() \n```", "```py\nreadback = open(config_filename).read()\nprint(readback) \n```", "```py\ndata_dir: photo_info\nextensions:\n- jpg\n- jpeg\nphoto_dir: photos \n```", "```py\nreader = open(config_filename)\nconfig_readback = yaml.safe_load(reader)\nconfig_readback \n```", "```py\n{'data_dir': 'photo_info',\n 'extensions': ['jpg', 'jpeg'],\n 'photo_dir': 'photos'} \n```", "```py\nconfig is config_readback \n```", "```py\nFalse \n```", "```py\nconfig['data_dir'] \n```", "```py\n'photo_info' \n```", "```py\nos.makedirs(config['data_dir'], exist_ok=True) \n```", "```py\ndb_file = os.path.join(config['data_dir'], 'captions')\ndb_file \n```", "```py\n'photo_info/captions' \n```", "```py\nimport shelve\n\ndb = shelve.open(db_file, 'c')\ndb \n```", "```py\n<shelve.DbfilenameShelf at 0x7fcc902cc430> \n```", "```py\nkey = 'jan-2023/photo1.jpg' \ndb[key] = 'Cat nose' \n```", "```py\nvalue = db[key]\nvalue \n```", "```py\n'Cat nose' \n```", "```py\ndb[key] = 'Close up view of a cat nose'\ndb[key] \n```", "```py\n'Close up view of a cat nose' \n```", "```py\nlist(db.keys()) \n```", "```py\n['jan-2023/photo1.jpg'] \n```", "```py\nlist(db.values()) \n```", "```py\n['Close up view of a cat nose'] \n```", "```py\nkey in db \n```", "```py\nTrue \n```", "```py\nfor key in db:\n    print(key, ':', db[key]) \n```", "```py\njan-2023/photo1.jpg : Close up view of a cat nose \n```", "```py\ndb.close() \n```", "```py\nos.listdir(config['data_dir']) \n```", "```py\n['captions.dir', 'captions.dat'] \n```", "```py\ndef sort_word(word):\n    return ''.join(sorted(word)) \n```", "```py\nword = 'pots'\nkey = sort_word(word)\nkey \n```", "```py\n'opst' \n```", "```py\ndb = shelve.open('anagram_map', 'n') \n```", "```py\ndb[key] = [word]\ndb[key] \n```", "```py\n['pots'] \n```", "```py\nword = 'tops'\nkey = sort_word(word)\nkey \n```", "```py\n'opst' \n```", "```py\ndb[key].append(word)          # INCORRECT \n```", "```py\ndb[key] \n```", "```py\n['pots'] \n```", "```py\nanagram_list = db[key]\nanagram_list.append(word)\ndb[key] = anagram_list \n```", "```py\ndb[key] \n```", "```py\n['pots', 'tops'] \n```", "```py\npath1 = 'photos/jan-2023/photo1.jpg'\ndata1 = open(path1, 'rb').read()\ntype(data1) \n```", "```py\nbytes \n```", "```py\npath2 = 'photos/jan-2023/photo2.jpg'\ndata2 = open(path2, 'rb').read()\ndata1 == data2 \n```", "```py\nFalse \n```", "```py\ndef same_contents(path1, path2):\n    data1 = open(path1, 'rb').read()\n    data2 = open(path2, 'rb').read()\n    return data1 == data2 \n```", "```py\nimport hashlib\n\nmd5_hash = hashlib.md5()\ntype(md5_hash) \n```", "```py\n_hashlib.HASH \n```", "```py\nmd5_hash.update(data1) \n```", "```py\ndigest = md5_hash.hexdigest()\ndigest \n```", "```py\n'aa1d2fc25b7ae247b2931f5a0882fa37' \n```", "```py\ndef md5_digest(filename):\n    data = open(filename, 'rb').read()\n    md5_hash = hashlib.md5()\n    md5_hash.update(data)\n    digest = md5_hash.hexdigest()\n    return digest \n```", "```py\nfilename2 = 'photos/feb-2023/photo2.jpg'\nmd5_digest(filename2) \n```", "```py\n'6a501b11b01f89af9c3f6591d7f02c49' \n```", "```py\ndef walk(dirname):\n    for name in os.listdir(dirname):\n        path = os.path.join(dirname, name)\n\n        if os.path.isfile(path):\n            print(path)\n        elif os.path.isdir(path):\n            walk(path) \n```", "```py\nwalk('photos') \n```", "```py\nphotos/digests.dat\nphotos/digests.dir\nphotos/notes.txt\nphotos/new_notes.txt\nphotos/mar-2023/photo2.jpg\nphotos/mar-2023/photo1.jpg\nphotos/digests.bak\nphotos/jan-2023/photo3.jpg\nphotos/jan-2023/photo2.jpg\nphotos/jan-2023/photo1.jpg\nphotos/feb-2023/photo2.jpg\nphotos/feb-2023/photo1.jpg \n```", "```py\ns = '1 2\\t 3\\n 4'\nprint(s) \n```", "```py\n1 2\t 3\n 4 \n```", "```py\nprint(repr(s)) \n```", "```py\n'1 2\\t 3\\n 4' \n```", "```py\n# This cell tells Jupyter to provide detailed debugging information\n# when a runtime error occurs. Run it before working on the exercises.\n\n%xmode Verbose \n```", "```py\nException reporting mode: Verbose \n```", "```py\ndef replace_all(old, new, source_path, dest_path):\n    # read the contents of the source file\n    reader = open(source_path)\n\n    # replace the old string with the new\n\n    # write the result into the destination file \n```", "```py\ndb = shelve.open('photos/digests', 'n')\nwalk_images('photos')\n\nfor digest, paths in db.items():\n    if len(paths) > 1:\n        print(paths) \n```"]