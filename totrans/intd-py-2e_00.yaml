- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As the title promises, this book will introduce you to one of the world’s most
    popular programming languages: Python. It’s aimed at beginning programmers as
    well as more experienced programmers who want to add Python to the languages they
    already know.'
  prefs: []
  type: TYPE_NORMAL
- en: In most cases, it’s easier to learn a computer language than a human language.
    There’s less ambiguity and fewer exceptions to keep in your head. Python is one
    of the most consistent and clear computer languages. It balances ease of learning,
    ease of use, and expressive power.
  prefs: []
  type: TYPE_NORMAL
- en: Computer languages are made of *data* (like nouns in spoken languages) and *instructions*
    or *code* (like verbs). You need both. In alternating chapters, you’ll be introduced
    to Python’s basic code and data structures, learn how to combine them, and build
    up to more advanced ones. The programs that you read and write will get longer
    and more complex. Using a woodworking analogy, we’ll start with a hammer, nails,
    and scraps of wood. Over the first half of this book, we’ll introduce more specialized
    components, up to the equivalents of lathes and other power tools.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll not only learn the language, but also what to do with it. We’ll begin
    with the Python language and its “batteries included” standard library, but I’ll
    also show you how to find, download, install, and use some good third-party packages.
    My emphasis is on whatever I’ve actually found useful in more than 10 years of
    production Python development, rather than fringe topics or complex hacks.
  prefs: []
  type: TYPE_NORMAL
- en: Although this is an introduction, some advanced topics are included because
    I want to expose them to you. Areas like databases and the web are still covered,
    but technology changes fast. A Python programmer might now be expected to know
    something about cloud computing, machine learning, or event streaming. You’ll
    find something here on all of these.
  prefs: []
  type: TYPE_NORMAL
- en: Python has some special features that work better than adapting styles from
    other languages that you may know. For example, using `for` and *iterators* is
    a more direct way of making a loop than manually incrementing some counter variable.
  prefs: []
  type: TYPE_NORMAL
- en: When you’re learning something new, it’s hard to tell which terms are specific
    instead of colloquial, and which concepts are actually important. In other words,
    “Is this on the test?” I’ll highlight terms and ideas that have specific meaning
    or importance in Python, but not too many at once. Real Python code is included
    early and often.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: I’ll include a note such as this when something might be confusing, or if there’s
    a more appropriate *Pythonic* way to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Python isn’t perfect. I’ll show you things that seem odd or that should be avoided—and
    offer alternatives you can use, instead.
  prefs: []
  type: TYPE_NORMAL
- en: Now and then, my opinions on some subjects (such as object inheritance, or MVC
    and REST designs for the web) may vary a bit from the common wisdom. See what
    you think.
  prefs: []
  type: TYPE_NORMAL
- en: Audience
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for anybody interested in learning one of the world’s most popular
    computing languages, regardless of whether you have previously learned any programming.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in the Second Edition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What’s changed since the first edition?
  prefs: []
  type: TYPE_NORMAL
- en: About a hundred more pages, including cat pictures.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twice the chapters, each shorter now.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An early chapter devoted to data types, variables, and names.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New standard Python features like *f-strings*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New or improved third-party packages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New code examples throughout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An appendix on basic hardware and software, for new programmers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An appendix on *asyncio*, for not-so-new programmers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“New stack” coverage: containers, clouds, data science, and machine learning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hints on getting a job programming in Python.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What hasn’t changed? Examples using bad poetry and ducks. These are evergreen.
  prefs: []
  type: TYPE_NORMAL
- en: Outline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Part I](part01.html#part_1) (Chapters 1–11) explains Python’s basics. You
    should read these chapters in order. I work up from the simplest data and code
    structures, combining them on the way into more detailed and realistic programs.
    [Part II](part02.html#part_2) (Chapters 12–22) shows how Python is used in specific
    application areas such as the web, databases, networks, and so on; read these
    chapters in any order you like.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a brief preview of the chapters and appendixes, including some of the
    terms that you’ll run into there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 1, *A Taste of Py*](ch01.html#ch_intro)'
  prefs: []
  type: TYPE_NORMAL
- en: Computer programs are not that different from directions that you see every
    day. Some little Python programs give you a glimpse of the language’s looks, capabilities,
    and uses in the real world. You’ll see how to run a Python program within its
    *interactive interpreter* (or *shell*), or from a text *file* saved on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2, *Data: Types, Values, Variables, and Names*](ch02.html#ch_names)'
  prefs: []
  type: TYPE_NORMAL
- en: Computer languages mix data and instructions. Different *types* of data are
    stored and treated differently by the computer. They may allow their values to
    be changed (*mutable*) or not (*immutable*). In a Python program, data can be
    *literal* (numbers like `78`, text *strings* like `"waffle"`) or represented by
    named *variables*. Python treats variables like *names*, which is different from
    many other languages and has some important consequences.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3, *Numbers*](ch03.html#ch_numbers)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter shows Python’s simplest data types: *booleans*, *integers*, and
    *floating-point* numbers. You’ll also learn the basic math operations. The examples
    use Python’s interactive interpreter like a calculator.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4, *Choose with if*](ch04.html#ch_if)'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll bounce between Python’s nouns (data types) and verbs (program structures)
    for a few chapters. Python code normally runs a line at a time, from the start
    to the end of a program. The `if` code structure lets you run different lines
    of code, depending on some data comparison.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5, *Text Strings*](ch05.html#ch_strings)'
  prefs: []
  type: TYPE_NORMAL
- en: Back to nouns, and the world of text *strings*. Learn how to create, combine,
    change, retrieve, and print strings.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6, *Loop with while and for*](ch06.html#ch_for)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verbs again, and two ways to make a *loop*: `for` and `while`. You’ll be introduced
    to a core Python concept: *iterators*.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7, *Tuples and Lists*](ch07.html#ch_lists)'
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s time for the first of Python’s higher-level built-in data structures:
    `lists` and `tuples`. These are sequences of values, like LEGO for building much
    more complex data structures. Step through them with *iterators*, and build lists
    quickly with *comprehensions*.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8, *Dictionaries and Sets*](ch08.html#ch_dicts)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Dictionaries* (aka *dicts*) and *sets* let you save data by their values rather
    than their position. This turns out to be very handy and will be among your favorite
    Python features.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9, *Functions*](ch09.html#ch_functions)'
  prefs: []
  type: TYPE_NORMAL
- en: Weave the data and code structures of the previous chapters to compare, choose,
    or repeat. Package code in *functions* and handle errors with *exceptions*.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10, *Oh Oh: Objects and Classes*](ch10.html#ch_objects)'
  prefs: []
  type: TYPE_NORMAL
- en: The word *object* is a bit fuzzy, but important in many computer languages,
    including Python. If you’ve done *object-oriented programming* in other languages,
    Python is a bit more relaxed. This chapter explains how to use objects and classes,
    and when it’s better to use alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11, *Modules, Packages, and Goodies*](ch11.html#ch_modules)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter demonstrates how to scale out to larger code structures: *modules*,
    *packages*, and *programs*. You’ll see where to put code and data, how to get
    data in and out, handle options, tour the Python Standard Library, and take a
    glance at what lies beyond.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12, *Wrangle and Mangle Data*](ch12.html#ch_munging)'
  prefs: []
  type: TYPE_NORMAL
- en: Learn to manage (or mangle) data like a pro. This chapter is all about text
    and binary data, joy with Unicode characters, and *regex* text searching. It also
    introduces the data types *bytes* and *bytearray*, counterparts of strings that
    contain raw binary values instead of text characters.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13, *Calendars and Clocks*](ch13.html#ch_times)'
  prefs: []
  type: TYPE_NORMAL
- en: Dates and times can be messy to handle. This chapter shows common problems and
    useful solutions.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14, *Files and Directories*](ch14.html#ch_files)'
  prefs: []
  type: TYPE_NORMAL
- en: Basic data storage uses *files* and *directories*. This chapter shows you how
    to create and use them.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 15, *Data in Time: Processes and Concurrency*](ch15.html#ch_systems)'
  prefs: []
  type: TYPE_NORMAL
- en: This is the first hard-core system chapter. Its theme is data in time—how to
    use *programs*, *processes*, and *threads* to do more things at a time (*concurrency*).
    Python’s recent *async* additions are mentioned, with details in [Appendix C](app03.html#app_async).
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 16, *Data in a Box: Persistent Storage*](ch16.html#ch_databases)'
  prefs: []
  type: TYPE_NORMAL
- en: Data can be stored and retrieved with basic flat files and directories within
    filesystems. They gain some structure with common text formats such as CSV, JSON,
    and XML. As data get larger and more complex, they need the services of *databases*—traditional
    *relational* ones, and some newer *NoSQL* data stores.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 17, *Data in Space: Networks*](ch17.html#ch_networks)'
  prefs: []
  type: TYPE_NORMAL
- en: Send your code and data through space in *networks* with *services*, *protocols*,
    and *APIs*. Examples range from low-level TCP *sockets*, to *messaging* libraries
    and queuing systems, to *cloud* deployment.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 18, *The Web, Untangled*](ch18.html#ch_web)'
  prefs: []
  type: TYPE_NORMAL
- en: The *web* gets its own chapter—clients, servers, APIs, and frameworks. You’ll
    *crawl* and *scrape* websites, and then build real websites with *request* parameters
    and *templates*.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 19, *Be a Pythonista*](ch19.html#ch_pythonista)'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter contains tips for Python developers—installation with `pip` and
    `virtualenv`, using IDEs, testing, debugging, logging, source control, and documentation.
    It also helps you to find and install useful third-party packages, package your
    own code for reuse, and learn where to get more information.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 20, *Py Art*](ch20.html#ch_art)'
  prefs: []
  type: TYPE_NORMAL
- en: 'People are doing cool things with Python in the arts: graphics, music, animation,
    and games.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 21, *Py at Work*](ch21.html#ch_business)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Python has specific applications for business: data visualization (plots, graphs,
    and maps), security, and regulation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 22, *Py Sci*](ch22.html#ch_science)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the past few years, Python has emerged as a top language for science: math
    and statistics, physical science, bioscience, and medicine. *Data science* and
    *machine learning* are notable strengths. This chapter touches on NumPy, SciPy,
    and Pandas.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix A, *Hardware and Software for Beginning Programmers*](app01.html#app_computers)'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re fairly new to programming, this describes how hardware and software
    actually work. It introduces some terms that you’ll keep running into.
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix B, *Install Python 3*](app02.html#app_install)'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t already have Python 3 on your computer, this appendix shows you
    how to install it, whether you’re running Windows, macOS, Linux, or some other
    variant of Unix.
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix C, *Something Completely Different: Async*](app03.html#app_async)'
  prefs: []
  type: TYPE_NORMAL
- en: Python has been adding asynchronous features in different releases, and they’re
    not easy to understand. I mention them as they come up in various chapters, but
    save a detailed discussion for this appendix.
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix D, *Answers to Exercises*](app04.html#app_answers)'
  prefs: []
  type: TYPE_NORMAL
- en: This has the answers to the end-of-chapter exercises. Don’t peek here until
    you’ve tried the exercises yourself, or you might be turned into a newt.
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix E, *Cheat Sheets*](app05.html#app_cheatsheets)'
  prefs: []
  type: TYPE_NORMAL
- en: This appendix contains cheat sheets to use as a quick reference.
  prefs: []
  type: TYPE_NORMAL
- en: Python Versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Computer languages change over time as developers add features and fix mistakes.
    The examples in this book were written and tested while running Python version
    3.7. Version 3.7 was the most current as this book was being edited, and I’ll
    talk about its notable additions. Version 3.8 is scheduled for general release
    in late 2019, and I’ll include a few things to expect from it. If you want to
    know what was added to Python and when, try the [What’s New in Python page](https://docs.python.org/3/whatsnew).
    It’s a technical reference; a bit heavy when you’re just starting with Python,
    but may be useful in the future if you ever have to get programs to work on computers
    with different Python versions.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions Used in This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following typographical conventions are used in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Italic*'
  prefs: []
  type: TYPE_NORMAL
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  prefs: []
  type: TYPE_NORMAL
- en: '`Constant width`'
  prefs: []
  type: TYPE_NORMAL
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variables, functions, and data types.
  prefs: []
  type: TYPE_NORMAL
- en: '**`Constant width bold`**'
  prefs: []
  type: TYPE_NORMAL
- en: Shows commands or other text that should be typed literally by the user.
  prefs: []
  type: TYPE_NORMAL
- en: '*`Constant width italic`*'
  prefs: []
  type: TYPE_NORMAL
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This icon signifies a tip, suggestion, or general note.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This icon indicates a warning or caution.
  prefs: []
  type: TYPE_NORMAL
- en: Using Code Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The substantial code examples and exercises in this book are [available online
    for you to download](https://github.com/madscheme/introducing-python). This book
    is here to help you get your job done. In general, you may use the code in this
    book in your programs and documentation. You do not need to contact us for permission
    unless you’re reproducing a significant portion of the code. For example, writing
    a program that uses several chunks of code from this book does not require permission.
    Selling or distributing examples from O’Reilly books does require permission.
    Answering a question by citing this book and quoting example code does not require
    permission. Incorporating a significant amount of example code from this book
    into your product’s documentation does require permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'We appreciate, but do not require, attribution. An attribution usually includes
    the title, author, publisher, and ISBN. For example: “*Introducing Python* by
    Bill Lubanovic (O’Reilly). Copyright 2020 Bill Lubanovic, 978-1-492-05136-7.”'
  prefs: []
  type: TYPE_NORMAL
- en: If you feel your use of code examples falls outside fair use or the permission
    given here, feel free to contact us at [permissions@oreilly.com](mailto:permissions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Online Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For over 40 years, [*O’Reilly Media*](http://oreilly.com) has provided technology
    and business training, knowledge, and insight to help companies succeed.
  prefs: []
  type: TYPE_NORMAL
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, conferences, and our online learning platform. O’Reilly’s
    online learning platform gives you on-demand access to live training courses,
    in-depth learning paths, interactive coding environments, and a vast collection
    of text and video from O’Reilly and 200+ other publishers. For more information,
    please visit [*http://oreilly.com*](http://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: How to Contact Us
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please address comments and questions concerning this book to the publisher:'
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Media, Inc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1005 Gravenstein Highway North
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastopol, CA 95472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 800-998-9938 (in the United States or Canada)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0515 (international or local)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0104 (fax)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://oreil.ly/introducing-python-2e*](https://oreil.ly/introducing-python-2e).
  prefs: []
  type: TYPE_NORMAL
- en: To comment or ask technical questions about this book, send an email to [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: For more information about our books, courses, conferences, and news, see our
    website at [*http://www.oreilly.com*](http://www.oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Find us on Facebook: [*http://facebook.com/oreilly*](http://facebook.com/oreilly)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow us on Twitter: [*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch us on YouTube: [*http://www.youtube.com/oreillymedia*](http://www.youtube.com/oreillymedia)'
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'My sincere thanks to the reviewers and readers who helped make this better:'
  prefs: []
  type: TYPE_NORMAL
- en: Corbin Collins, Charles Givre, Nathan Stocks, Dave George, and Mike James
  prefs: []
  type: TYPE_NORMAL
