["```py\n$ python manage.py startapp lists\n```", "```py\n.\n├── db.sqlite3\n├── functional_tests.py\n├── lists\n│   ├── __init__.py\n│   ├── admin.py\n│   ├── apps.py\n│   ├── migrations\n│   │   └── __init__.py\n│   ├── models.py\n│   ├── tests.py\n│   └── views.py\n├── manage.py\n└── superlists\n    ├── __init__.py\n    ├── asgi.py\n    ├── settings.py\n    ├── urls.py\n    └── wsgi.py\n```", "```py\nfrom django.test import TestCase\n\n# Create your tests here.\n```", "```py\nfrom django.test import TestCase\n\nclass SmokeTest(TestCase):\n    def test_bad_maths(self):\n        self.assertEqual(1 + 1, 3)\n```", "```py\n$ python manage.py test\nCreating test database for alias 'default'...\nFound 1 test(s).\nSystem check identified no issues (0 silenced).\nF\n======================================================================\nFAIL: test_bad_maths (lists.tests.SmokeTest.test_bad_maths)\n ---------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"...goat-book/lists/tests.py\", line 6, in test_bad_maths\n    self.assertEqual(1 + 1, 3)\nAssertionError: 2 != 3\n\n ---------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=1)\nDestroying test database for alias 'default'...\n```", "```py\n$ git status  # should show you lists/ is untracked\n$ git add lists\n$ git diff --staged  # will show you the diff that you're about to commit\n$ git commit -m \"Add app for lists, with deliberately failing unit test\"\n```", "```py\nfrom django.test import TestCase\nfrom django.http import HttpRequest  ![1](assets/1.png)\nfrom lists.views import home_page\n\nclass HomePageTest(TestCase):\n    def test_home_page_returns_correct_html(self):\n        request = HttpRequest()  ![1](assets/1.png)\n        response = home_page(request)  ![2](assets/2.png)\n        html = response.content.decode(\"utf8\")  ![3](assets/3.png)\n        self.assertIn(\"<title>To-Do lists</title>\", html)  ![4](assets/4.png)\n        self.assertTrue(html.startswith(\"<html>\"))  ![5](assets/5.png)\n        self.assertTrue(html.endswith(\"</html>\"))  ![5](assets/5.png)\n```", "```py\n$ python manage.py test\nFound 1 test(s).\nSystem check identified no issues (0 silenced).\nE\n======================================================================\nERROR: lists.tests (unittest.loader._FailedTest.lists.tests)\n ---------------------------------------------------------------------\nImportError: Failed to import test module: lists.tests\nTraceback (most recent call last):\n[...]\n  File \"...goat-book/lists/tests.py\", line 3, in <module>\n    from lists.views import home_page\nImportError: cannot import name 'home_page' from 'lists.views'\n```", "```py\nfrom django.shortcuts import render\n\n# Create your views here.\nhome_page = None\n```", "```py\n[...]\n  File \"...goat-book/lists/tests.py\", line 9, in\ntest_home_page_returns_correct_html\n    response = home_page(request)\n               ^^^^^^^^^^^^^^^^^^\nTypeError: 'NoneType' object is not callable\n```", "```py\nfrom django.shortcuts import render\n\ndef home_page():\n    pass\n```", "```py\n    response = home_page(request)\n               ^^^^^^^^^^^^^^^^^^\nTypeError: home_page() takes 0 positional arguments but 1 was given\n```", "```py\n    def home_page(request):\n        pass\n    ```", "```py\n        html = response.content.decode(\"utf8\")\n               ^^^^^^^^^^^^^^^^\n    AttributeError: 'NoneType' object has no attribute 'content'\n    ```", "```py\n    from django.http import HttpResponse\n\n    def home_page(request):\n        return HttpResponse()\n    ```", "```py\n    AssertionError: '<title>To-Do lists</title>' not found in ''\n    ```", "```py\n    def home_page(request):\n        return HttpResponse(\"<title>To-Do lists</title>\")\n    ```", "```py\n        self.assertTrue(html.startswith(\"<html>\"))\n    AssertionError: False is not true\n    ```", "```py\n    def home_page(request):\n        return HttpResponse(\"<html><title>To-Do lists</title>\")\n    ```", "```py\n        self.assertTrue(html.endswith(\"</html>\"))\n    AssertionError: False is not true\n    ```", "```py\n    def home_page(request):\n        return HttpResponse(\"<html><title>To-Do lists</title></html>\")\n    ```", "```py\n    $ python manage.py test\n    Creating test database for alias 'default'...\n    Found 1 test(s).\n    System check identified no issues (0 silenced).\n    .\n     ---------------------------------------------------------------------\n    Ran 1 test in 0.001s\n\n    OK\n    Destroying test database for alias 'default'...\n    ```", "```py\n$ git diff  # should show changes to tests.py, and views.py\n$ git commit -am \"First unit test and view function\"\n```", "```py\n$ python functional_tests.py\nF\n======================================================================\nFAIL: test_can_start_a_todo_list\n(__main__.NewVisitorTest.test_can_start_a_todo_list)\n ---------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"...goat-book/functional_tests.py\", line 18, in\ntest_can_start_a_todo_list\n    self.assertIn(\"To-Do\", self.browser.title)\nAssertionError: 'To-Do' not found in 'The install worked successfully!\nCongratulations!'\n\n ---------------------------------------------------------------------\nRan 1 test in 1.609s\n\nFAILED (failures=1)\n```", "```py\nclass HomePageTest(TestCase):\n    def test_home_page_returns_correct_html(self):\n        request = HttpRequest()\n        response = home_page(request)\n        html = response.content.decode(\"utf8\")\n        self.assertIn(\"<title>To-Do lists</title>\", html)\n        self.assertTrue(html.startswith(\"<html>\"))\n        self.assertTrue(html.endswith(\"</html>\"))\n\n    def test_home_page_returns_correct_html_2(self):\n        response = self.client.get(\"/\")  ![1](assets/1.png)\n        self.assertContains(response, \"<title>To-Do lists</title>\")  ![2](assets/2.png)\n```", "```py\n$ python manage.py test\nFound 2 test(s).\nCreating test database for alias 'default'...\nSystem check identified no issues (0 silenced).\n.F\n======================================================================\nFAIL: test_home_page_returns_correct_html_2\n(lists.tests.HomePageTest.test_home_page_returns_correct_html_2)\n ---------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"...goat-book/lists/tests.py\", line 17, in\ntest_home_page_returns_correct_html_2\n    self.assertContains(response, \"<title>To-Do lists</title>\")\n[...]\nAssertionError: 404 != 200 : Couldn't retrieve content: Response code was 404\n(expected 200)\n\n ---------------------------------------------------------------------\nRan 2 tests in 0.004s\n\nFAILED (failures=1)\nDestroying test database for alias 'default'...\n```", "```py\n======================================================================\nFAIL: test_home_page_returns_correct_html_2  ![2](assets/2.png)\n(lists.tests.HomePageTest.test_home_page_returns_correct_html_2)\n ---------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"...goat-book/lists/tests.py\", line 17, in\ntest_home_page_returns_correct_html_2\n    self.assertContains(response, \"<title>To-Do lists</title>\")  ![3](assets/3.png)\n  File \".../django/test/testcases.py\", line 647, in assertContains\n    text_repr, real_count, msg_prefix = self._assert_contains(\n                                        ^^^^^^^^^^^^^^^^^^^^^^  ![4](assets/4.png)\n  File \".../django/test/testcases.py\", line 610, in _assert_contains\n    self.assertEqual(\nAssertionError: 404 != 200 : Couldn't retrieve content: Response code was 404  ![1](assets/1.png)\n(expected 200)\n\n ---------------------------------------------------------------------\n[...]\n```", "```py\n\"\"\"\nURL configuration for superlists project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n https://docs.djangoproject.com/en/4.2/topics/http/urls/\nExamples:\nFunction views\n 1\\. Add an import:  from my_app import views\n 2\\. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n 1\\. Add an import:  from other_app.views import Home\n 2\\. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n 1\\. Import the include() function: from django.urls import include, path\n 2\\. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n]\n```", "```py\nfrom django.urls import path  ![1](assets/1.png)\nfrom lists.views import home_page  ![2](assets/2.png)\n\nurlpatterns = [\n    path(\"\", home_page, name=\"home\"),  ![3](assets/3.png)\n]\n```", "```py\n[...]\n..\n ---------------------------------------------------------------------\nRan 2 tests in 0.003s\n\nOK\n```", "```py\nclass HomePageTest(TestCase):\n    def test_home_page_returns_correct_html(self):\n        response = self.client.get(\"/\")\n        self.assertContains(response, \"<title>To-Do lists</title>\")\n        self.assertContains(response, \"<html>\")\n        self.assertContains(response, \"</html>\")\n```", "```py\n$ python functional_tests.py\n[...]\n======================================================================\nFAIL: test_can_start_a_todo_list\n(__main__.NewVisitorTest.test_can_start_a_todo_list)\n ---------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"...goat-book/functional_tests.py\", line 21, in\ntest_can_start_a_todo_list\n    self.fail(\"Finish the test!\")\nAssertionError: Finish the test!\n```", "```py\n$ git diff  # should show our modified test in tests.py, and the new config in urls.py\n$ git commit -am \"url config, map / to home_page view\"\n```", "```py\n$ git log --oneline\na6e6cc9 url config, map / to home_page view\n450c0f3 First unit test and view function\nea2b037 Add app for lists, with deliberately failing unit test\n[...]\n```"]