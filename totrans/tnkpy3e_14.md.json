["```py\nfilename = 'dr_jekyll.txt' \n```", "```py\nunique_words = {}\nfor line in open(filename):\n    seq = line.split()\n    for word in seq:\n        unique_words[word] = 1\n\nlen(unique_words) \n```", "```py\n6040 \n```", "```py\nsorted(unique_words, key=len)[-5:] \n```", "```py\n['chocolate-coloured',\n 'superiors—behold!”',\n 'coolness—frightened',\n 'gentleman—something',\n 'pocket-handkerchief.'] \n```", "```py\ndef split_line(line):\n    return line.replace('—', ' ').split() \n```", "```py\nsplit_line('coolness—frightened') \n```", "```py\n['coolness', 'frightened'] \n```", "```py\nimport unicodedata\n\nunicodedata.category('A') \n```", "```py\n'Lu' \n```", "```py\nunicodedata.category('.') \n```", "```py\n'Po' \n```", "```py\npunc_marks = {}\nfor line in open(filename):\n    for char in line:\n        category = unicodedata.category(char)\n        if category.startswith('P'):\n            punc_marks[char] = 1 \n```", "```py\npunctuation = ''.join(punc_marks)\nprint(punctuation) \n```", "```py\n.’;,-“”:?—‘!()_ \n```", "```py\ndef clean_word(word):\n    return word.strip(punctuation).lower() \n```", "```py\nclean_word('“Behold!”') \n```", "```py\n'behold' \n```", "```py\nclean_word('pocket-handkerchief') \n```", "```py\n'pocket-handkerchief' \n```", "```py\nunique_words2 = {}\nfor line in open(filename):\n    for word in split_line(line):\n        word = clean_word(word)\n        unique_words2[word] = 1\n\nlen(unique_words2) \n```", "```py\n4005 \n```", "```py\nsorted(unique_words2, key=len)[-5:] \n```", "```py\n['circumscription',\n 'unimpressionable',\n 'fellow-creatures',\n 'chocolate-coloured',\n 'pocket-handkerchief'] \n```", "```py\nword_counter = {}\nfor line in open(filename):\n    for word in split_line(line):\n        word = clean_word(word)\n        if word not in word_counter:\n            word_counter[word] = 1\n        else:\n            word_counter[word] += 1 \n```", "```py\ndef second_element(t):\n    return t[1] \n```", "```py\nitems = sorted(word_counter.items(), key=second_element, reverse=True) \n```", "```py\nfor word, freq in items[:5]:\n    print(freq, word, sep='\\t') \n```", "```py\n1614\tthe\n972\tand\n941\tof\n640\tto\n640\ti \n```", "```py\nround(3.141592653589793, ndigits=3) \n```", "```py\n3.142 \n```", "```py\ndef print_most_common(word_counter, num=5):\n    items = sorted(word_counter.items(), key=second_element, reverse=True)\n\n    for word, freq in items[:num]:\n        print(freq, word, sep='\\t') \n```", "```py\nprint_most_common(word_counter) \n```", "```py\n1614\tthe\n972\tand\n941\tof\n640\tto\n640\ti \n```", "```py\nprint_most_common(word_counter, 3) \n```", "```py\n1614\tthe\n972\tand\n941\tof \n```", "```py\nword_list = open('words.txt').read().split() \n```", "```py\nvalid_words = {}\nfor word in word_list:\n    valid_words[word] = 1 \n```", "```py\ndef subtract(d1, d2):\n    res = {}\n    for key in d1:\n        if key not in d2:\n            res[key] = d1[key]\n    return res \n```", "```py\ndiff = subtract(word_counter, valid_words) \n```", "```py\nprint_most_common(diff) \n```", "```py\n640\ti\n628\ta\n128\tutterson\n124\tmr\n98\thyde \n```", "```py\nsingletons = []\nfor word, freq in diff.items():\n    if freq == 1:\n        singletons.append(word) \n```", "```py\nsingletons[-5:] \n```", "```py\n['gesticulated', 'abjection', 'circumscription', 'reindue', 'fearstruck'] \n```", "```py\nimport random \n```", "```py\nt = [1, 2, 3]\nrandom.choice(t) \n```", "```py\n1 \n```", "```py\nrandom.choice(t) \n```", "```py\n2 \n```", "```py\nrandom.choice(word_counter) \n```", "```py\nKeyError: 422 \n```", "```py\nwords = list(word_counter)\nrandom.choice(words) \n```", "```py\n'posture' \n```", "```py\nfor i in range(6):\n    word = random.choice(words)\n    print(word, end=' ') \n```", "```py\nill-contained written apocryphal nor busy spoke \n```", "```py\nweights = word_counter.values() \n```", "```py\nrandom.choices(words, weights=weights) \n```", "```py\n['than'] \n```", "```py\nrandom_words = random.choices(words, weights=weights, k=6)\nrandom_words \n```", "```py\n['reach', 'streets', 'edward', 'a', 'said', 'to'] \n```", "```py\n' '.join(random_words) \n```", "```py\n'reach streets edward a said to' \n```", "```py\nbigram_counter = {} \n```", "```py\ndef count_bigram(bigram):\n    key = tuple(bigram)\n    if key not in bigram_counter:\n        bigram_counter[key] = 1\n    else:\n        bigram_counter[key] += 1 \n```", "```py\nwindow = [] \n```", "```py\ndef process_word(word):\n    window.append(word)\n\n    if len(window) == 2:\n        count_bigram(window)\n        window.pop(0) \n```", "```py\nfor line in open(filename):\n    for word in split_line(line):\n        word = clean_word(word)\n        process_word(word) \n```", "```py\nprint_most_common(bigram_counter) \n```", "```py\n178\t('of', 'the')\n139\t('in', 'the')\n94\t('it', 'was')\n80\t('and', 'the')\n73\t('to', 'the') \n```", "```py\nbigrams = list(bigram_counter)\nweights = bigram_counter.values()\nrandom_bigrams = random.choices(bigrams, weights=weights, k=6) \n```", "```py\nfor pair in random_bigrams:\n    print(' '.join(pair), end=' ') \n```", "```py\nto suggest this preface to detain fact is above all the laboratory \n```", "```py\nsong = \"\"\"\nHalf a bee, philosophically,\nMust, ipso facto, half not be.\nBut half the bee has got to be\nVis a vis, its entity. D'you see?\n\"\"\" \n```", "```py\nsuccessor_map = {} \n```", "```py\nfirst = 'half'\nsecond = 'a' \n```", "```py\nsuccessor_map[first] = [second]\nsuccessor_map \n```", "```py\n{'half': ['a']} \n```", "```py\nfirst = 'half'\nsecond = 'not'\n\nsuccessor_map[first].append(second)\nsuccessor_map \n```", "```py\n{'half': ['a', 'not']} \n```", "```py\ndef add_bigram(bigram):\n    first, second = bigram\n\n    if first not in successor_map:\n        successor_map[first] = [second]\n    else:\n        successor_map[first].append(second) \n```", "```py\ndef process_word_bigram(word):\n    window.append(word)\n\n    if len(window) == 2:\n        add_bigram(window)\n        window.pop(0) \n```", "```py\nsuccessor_map = {}\nwindow = []\n\nfor word in song.split():\n    word = clean_word(word)\n    process_word_bigram(word) \n```", "```py\nsuccessor_map \n```", "```py\n{'half': ['a', 'not', 'the'],\n 'a': ['bee', 'vis'],\n 'bee': ['philosophically', 'has'],\n 'philosophically': ['must'],\n 'must': ['ipso'],\n 'ipso': ['facto'],\n 'facto': ['half'],\n 'not': ['be'],\n 'be': ['but', 'vis'],\n 'but': ['half'],\n 'the': ['bee'],\n 'has': ['got'],\n 'got': ['to'],\n 'to': ['be'],\n 'vis': ['a', 'its'],\n 'its': ['entity'],\n 'entity': [\"d'you\"],\n \"d'you\": ['see']} \n```", "```py\nsuccessor_map = {}\nwindow = []\n\nfor line in open(filename):\n    for word in split_line(line):\n        word = clean_word(word)\n        process_word_bigram(word) \n```", "```py\nsuccessor_map['going'] \n```", "```py\n['east', 'in', 'to', 'to', 'up', 'to', 'of'] \n```", "```py\nword = 'although'\nsuccessors = successor_map[word]\nsuccessors \n```", "```py\n['i', 'a', 'it', 'the', 'we', 'they', 'i'] \n```", "```py\nword = random.choice(successors)\nword \n```", "```py\n'i' \n```", "```py\nfor i in range(10):\n    successors = successor_map[word]\n    word = random.choice(successors)\n    print(word, end=' ') \n```", "```py\ncontinue to hesitate and swallowed the smile withered from that \n```", "```py\n# This cell tells Jupyter to provide detailed debugging information\n# when a runtime error occurs. Run it before working on the exercises.\n\n%xmode Verbose \n```", "```py\ndef add_bigram(bigram):\n    first, second = bigram\n\n    if first not in successor_map:\n        successor_map[first] = [second]\n    else:\n        successor_map[first].append(second) \n```", "```py\ndef process_word_trigram(word):\n    window.append(word)\n\n    if len(window) == 3:\n        add_trigram(window)\n        window.pop(0) \n```", "```py\nsuccessor_map = {}\nwindow = []\n\nfor line in open(filename):\n    for word in split_line(line):\n        word = clean_word(word)\n        process_word_trigram(word) \n```", "```py\nsuccessors = list(successor_map)\nbigram = random.choice(successors)\nbigram \n```", "```py\n('doubted', 'if') \n```"]