- en: Chapter 15\. Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Preview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides fielding API requests and traditional content like HTML, web servers
    are expected to handle file transfers in both directions. Very large files may
    need to be transferred in *chunks* that don’t use too much of the system’s memory.
    You can also provide access to a directory of files (and subdirectories, to any
    depth) with `Stati⁠c​Files`.
  prefs: []
  type: TYPE_NORMAL
- en: Multipart Support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To handle large files, FastAPI’s uploading and downloading features need these
    extra modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Python-Multipart](https://oreil.ly/FUBk7)'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install python-multipart`'
  prefs: []
  type: TYPE_NORMAL
- en: '[aio-files](https://oreil.ly/OZYYR)'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install aiofiles`'
  prefs: []
  type: TYPE_NORMAL
- en: Uploading Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FastAPI targets API development, and most of the examples in this book have
    used JSON requests and responses. But in the next chapter you’ll see forms, which
    are handled differently. This chapter covers files, which are treated like forms
    in some ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'FastAPI offers two techniques for file uploads: `File()` and `UploadFile`.'
  prefs: []
  type: TYPE_NORMAL
- en: File()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`File()` is used as the type for a direct file upload. Your path function may
    be synchronous (`def`) or asynchronous (`async def`), but the asynchronous version
    is better because it won’t tie up your web server while the file is uploading.'
  prefs: []
  type: TYPE_NORMAL
- en: FastAPI will pull up the file in chunks and reassemble it in memory, so `File()`
    should be used for only relatively small files. Instead of assuming that the input
    is JSON, FastAPI encodes a file as a form element.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s write the code to request a file and test it. You can grab any file on
    your machine to test with, or download one from a site like [Fastest Fish](https://oreil.ly/EnlH-).
    I grabbed a 1 KB file from there and saved it locally as *1KB.bin*.
  prefs: []
  type: TYPE_NORMAL
- en: In [Example 15-1](#ex-15-1), add these lines to your top *main.py*.
  prefs: []
  type: TYPE_NORMAL
- en: Example 15-1\. Handle a small file upload with FastAPI
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After Uvicorn restarts, try an HTTPie test in [Example 15-2](#ex-15-2).
  prefs: []
  type: TYPE_NORMAL
- en: Example 15-2\. Upload a small file with HTTPie
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are a few notes on this test:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to include `-f` (or `--form`), because files are uploaded like forms,
    not as JSON text.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`small_file@1KB.bin`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`small_file`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Matches the variable name `small_file` in the FastAPI path function in [Example 15-1](#ex-15-1)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`@`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: HTTPie’s shorthand to make a form
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`1KB.bin`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The file that is being uploaded
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Example 15-3](#ex-15-3) is an equivalent programmatic test.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 15-3\. Upload a small file with Requests
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: UploadFile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For large files, it’s better to use `UploadFile`. This creates a Python `SpooledTemporaryFile`
    object, mostly on the server’s disk instead of in memory. This is a Python *file-like*
    object, which supports the methods `read()`, `write()`, and `seek()`. [Example 15-4](#ex-15-4)
    shows this, and also uses `async def` instead of `def` to avoid blocking the web
    server while file pieces are uploading.
  prefs: []
  type: TYPE_NORMAL
- en: Example 15-4\. Upload a big file with FastAPI (add to main.py)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`File()` created a `bytes` object and needed the parentheses. `UploadFile`
    is a different class of object.'
  prefs: []
  type: TYPE_NORMAL
- en: If Uvicorn’s starter motor isn’t worn out yet, it’s test time. This time, Examples
    [15-5](#ex-15-5) through [15-6](#ex-15-6) use a 1 GB file (*1GB.bin*) that I grabbed
    from Fastest Fish.
  prefs: []
  type: TYPE_NORMAL
- en: Example 15-5\. Test a big file upload with HTTPie
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Example 15-6\. Test a big file upload with Requests
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Downloading Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sadly, gravity doesn’t make files download faster. Instead, we’ll use equivalents
    of the upload methods.
  prefs: []
  type: TYPE_NORMAL
- en: FileResponse
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, in [Example 15-7](#ex-15-7), is the all-at-once version, `FileResponse`.
  prefs: []
  type: TYPE_NORMAL
- en: Example 15-7\. Download a small file with `FileResponse` (add to main.py)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: There’s a test around here somewhere. First, put the file *1KB.bin* in the same
    directory as *main.py*. Now, run [Example 15-8](#ex-15-8).
  prefs: []
  type: TYPE_NORMAL
- en: Example 15-8\. Download a small file with HTTPie
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you don’t trust that suppression message, [Example 15-9](#ex-15-9) pipes
    the output to a utility like `wc` to ensure that you got 1,000 bytes back.
  prefs: []
  type: TYPE_NORMAL
- en: Example 15-9\. Download a small file with HTTPie, with byte count
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: StreamingResponse
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to `FileUpload`, it’s better to download large files with `StreamingResponse`,
    which returns the file in chunks. [Example 15-10](#ex-15-10) shows this, with
    an `async def` path function to avoid blocking when the CPU isn’t being used.
    I’m skipping error checking for now; if the file `path` doesn’t exist, the `open()`
    call will raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Example 15-10\. Return a big file with `StreamingResponse` (add to main.py)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`gen_expr` is the *generator expression* returned by the *generator function*
    `gen_file()`. `StreamingResponse` uses it for its iterable `content` argument,
    so it can download the file in chunks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 15-11](#ex-15-11) is the accompanying test. (This first needs the
    file *1GB.bin* alongside *main.py*, and will take a *little* longer.)'
  prefs: []
  type: TYPE_NORMAL
- en: Example 15-11\. Download a big file with HTTPie
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Serving Static Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Traditional web servers can treat server files as though they were on a normal
    filesystem. FastAPI lets you do this with `StaticFiles`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, let’s make a directory of (boring) free files for users to
    download:'
  prefs: []
  type: TYPE_NORMAL
- en: Make a directory called *static*, at the same level as *main.py*. (This can
    have any name; I’m calling it *static* only to help remember why I made it.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Put a text file called *abc.txt* in it, with the text contents `abc :)`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Example 15-12](#ex-15-12) will serve any URL that starts with */static* (you
    could also have used any text string here) with files from the *static* directory.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 15-12\. Serve everything in a directory with `StaticFiles` (add to main.py)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: That `top` calculation ensures that you put `static` alongside *main.py*. The
    `__file__` variable is the full pathname of this file (*main.py*).
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 15-13](#ex-15-13) is one way to manually test [Example 15-12](#ex-15-12).'
  prefs: []
  type: TYPE_NORMAL
- en: Example 15-13\. Get a static file
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: What about that `html=True` argument that you passed to `StaticFiles()`? That
    makes it work a little more like a traditional server, returning an *index.html*
    file if one exists in that directory, but you didn’t ask for *index.html* explicitly
    in the URL. So, let’s create an *index.html* file in the *static* directory with
    the contents `Oh. Hi!`, and then test with [Example 15-14](#ex-15-14).
  prefs: []
  type: TYPE_NORMAL
- en: Example 15-14\. Get an index.html file from /static
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can have as many files (and subdirectories with files, etc.) as you want.
    Make a subdirectory *xyz* under *static* and put two files there:'
  prefs: []
  type: TYPE_NORMAL
- en: '*xyx.txt*'
  prefs: []
  type: TYPE_NORMAL
- en: Contains the text `xyz :(`.
  prefs: []
  type: TYPE_NORMAL
- en: '*index.html*'
  prefs: []
  type: TYPE_NORMAL
- en: Contains the text `How did you find me?`
  prefs: []
  type: TYPE_NORMAL
- en: I won’t include the examples here. Try them yourself, with I hope more naming
    imagination.
  prefs: []
  type: TYPE_NORMAL
- en: Review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter showed how to upload and download files—small, large, even gigantiferous.
    Plus, you learned how to serve *static files* in nostalgic (non-API) web style
    from a directory.
  prefs: []
  type: TYPE_NORMAL
