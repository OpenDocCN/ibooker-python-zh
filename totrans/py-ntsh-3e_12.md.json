["```py\n`import` csv\n\ncolor_data = '''\\ color,r,g,b\nred,255,0,0\ngreen,0,255,0\nblue,0,0,255\ncyan,0,255,255\nmagenta,255,0,255\nyellow,255,255,0\n'''.splitlines()\n\ncolors = {row['color']: \n          row `for` row `in` csv.DictReader(color_data)}\n\nprint(colors['red']) \n*`# prints: {'color': 'red', 'r': '255', 'g': '0', 'b': '0'}`*\n```", "```py\n`import` collections, fileinput, json, dbm\nword_pos = collections.defaultdict(list)\n`for` line `in` fileinput.input():\n    pos = fileinput.filename(), fileinput.filelineno()\n    `for` word `in` line.split():\n        word_pos[word].append(pos)\n`with` dbm.open('indexfilem', 'n') `as` dbm_out:\n    `for` word, word_positions `in` word_pos.items():\n        dbm_out[word] = json.dumps(word_positions)\n```", "```py\n`import` sys, json, dbm, linecache\n`with` dbm.open('indexfilem') `as` dbm_in:\n `for` word `in` sys.argv[1:]:\n        `if` word `not` `in` dbm_in:\n             print(f'Word {word!r} not found in index file',                                             file=sys.stderr)\n `continue`\n        places = json.loads(dbm_in[word])\n        `for` fname, lineno `in` places:\n            print(f'Word {word!r} occurs in line {lineno}'\n                  f' of file {fname!r}:')\n            print(linecache.getline(fname, lineno), end='')\n```", "```py\n`def` adder(augend):\n    `def` inner(addend, augend=augend):\n        `return` addend+augend\n    `return` inner\nplus5 = adder(5)\n```", "```py\n`import` collections, fileinput, pickle, dbm\nword_pos = collections.defaultdict(list)\n`for` line `in` fileinput.input():\n    pos = fileinput.filename(), fileinput.filelineno()\n    `for` word `in` line.split():\n        word_pos[word].append(pos)\n\n`with` dbm.open('indexfilep', 'n') `as` dbm_out:\n    `for` word, word_positions `in` word_pos.items():\n        dbm_out[word] = pickle.dumps(word_positions, protocol=2)\n```", "```py\n`import` sys, pickle, dbm, linecache\n`with` dbm.open('indexfilep') `as` dbm_in:\n `for` word `in` sys.argv[1:]:\n        `if` word `not` `in` dbm_in:\n            print(f'Word {word!r} not found in index file',\n                  file=sys.stderr)\n `continue`\n        places = pickle.loads(dbm_in[word])\n        `for` fname, lineno `in` places:\n            print(f'Word {word!r} occurs in line {lineno}'\n                  f' of file {fname!r}:')\n            print(linecache.getline(fname, lineno), end='')\n```", "```py\n>>> `import` pickle, copyreg, marshal\n>>> `def` marsh(x):\n...     `return` marshal.loads, (marshal.dumps(x),)\n...\n>>> c=compile('2+2','','eval')\n>>> copyreg.pickle(type(c), marsh)\n>>> s=pickle.dumps(c, 2)\n>>> cc=pickle.loads(s)\n>>> print(eval(cc))\n```", "```py\n4\n```", "```py\n`import` shelve\ns = shelve.open('data')\ns['akey'] = list(range(4))\nprint(s['akey'])           *`# prints: [0, 1, 2, 3]`*\ns['akey'].append(9)        *`# trying direct mutation`*\nprint(s['akey'])           *`# doesn't \"take\"; prints: [0, 1, 2, 3]`*\nx = s['akey']              *`# fetch the object`*\nx.append(9)                *`# perform mutation`*\ns['akey'] = x              *`# key step: store the object back!`*\nprint(s['akey'])           *`# now it \"takes\", prints: [0, 1, 2, 3, 9]`*\n```", "```py\n`import` collections, fileinput, shelve\nword_pos = collections.defaultdict(list)\n`for` line `in` fileinput.input():\n    pos = fileinput.filename(), fileinput.filelineno()\n    `for` word `in` line.split():\n        word_pos[word].append(pos)\n`with` shelve.open('indexfiles','n') `as` sh_out:\n    sh_out.update(word_pos)\n```", "```py\n`import` sys, shelve, linecache\n`with` shelve.open('indexfiles') `as` sh_in:\n `for` word `in` sys.argv[1:]:\n        if word `not` `in` sh_in:\n            print(f'Word {word!r} not found in index file',\n\t\t\t      file=sys.stderr)\n `continue`\n        places = sh_in[word]\n        `for` fname, lineno `in` places:\n            print(f'Word {word!r} occurs in line {lineno}'\n                  f' of file {fname!r}:')\n            print(linecache.getline(fname, lineno), end='')\n```", "```py\n`import` collections, fileinput, os, dbm\nword_pos = collections.defaultdict(list)\n`for` line `in` fileinput.input():\n    pos = f'{fileinput.filename()}{os.pathsep}{fileinput.filelineno()}'\n    `for` word `in` line.split():\n        word_pos[word].append(pos)\nsep2 = os.pathsep * 2\n`with` dbm.open('indexfile','n') `as` dbm_out:\n    `for` word `in` word_pos:\n        dbm_out[word.encode('utf-8')] = sep2.join(\n\t\t\tword_pos[word]\n\t\t).encode('utf-8')\n```", "```py\n`import` sys, os, dbm, linecache\n\nsep = os.pathsep\nsep2 = sep * 2\n`with` dbm.open('indexfile') `as` dbm_in:\n `for` word `in` sys.argv[1:]:\n        e_word = word.encode('utf-8')\n        `if` e_word `not` `in` dbm_in:\n            print(f'Word {word!r} not found in index file',\n                  file=sys.stderr)\n            `continue`\n        places = dbm_in[e_word].decode('utf-8').split(sep2)\n        `for` place `in` places:\n            fname, lineno = place.split(sep)\n            print(f'Word {word!r} occurs in line {lineno}'\n                  f' of file {fname!r}:')\n            print(linecache.getline(fname, int(lineno)), end='')\n```", "```py\n`try`:\n    ...\n`except` module.Error `as` err:\n    ...\n```", "```py\nc.execute(f'SELECT * FROM ATABLE WHERE AFIELD={x!r}')\n```", "```py\nc.execute('SELECT * FROM ATABLE WHERE AFIELD=?', (some_value,))\n```", "```py\nc.execute('SELECT * FROM ATABLE WHERE AFIELD=%s', \n          (some_value,))\n```", "```py\nc.execute('SELECT * FROM ATABLE WHERE AFIELD=:x', \n          {'x':some_value})\n```", "```py\nc.execute('SELECT * FROM ATABLE WHERE AFIELD=:1', \n          (some_value,))\n```", "```py\nc.execute('SELECT * FROM ATABLE WHERE AFIELD=%(x)s',\n          {'x':some_value})\n```", "```py\nc.execute('SELECT * FROM ATABLE WHERE AFIELD=?', (x,))\n```", "```py\nc.executemany('UPDATE atable SET x=? '\n              'WHERE y=?',(12,23),(23,34))\n```", "```py\nc.execute('UPDATE atable SET x=12 WHERE y=23')\nc.execute('UPDATE atable SET x=23 WHERE y=34')\n```", "```py\n`import` fileinput, sqlite3\nconnect = sqlite3.connect('database.db')\ncursor = connect.cursor()\n`with` connect:\n    cursor.execute('CREATE TABLE IF NOT EXISTS Words '\n                   '(Word TEXT, File TEXT, Line INT)')\n `for` line `in` fileinput.input():\n        f, l = fileinput.filename(), fileinput.filelineno()\n        cursor.executemany('INSERT INTO Words VALUES (:w, :f, :l)',\n            [{'w':w, 'f':f, 'l':l} `for` w `in` line.split()])\nconnect.close()\n```", "```py\n`import` sys, sqlite3, linecache\nconnect = sqlite3.connect('database.db')\ncursor = connect.cursor()\n`for` word `in` sys.argv[1:]:\n    cursor.execute('SELECT File, Line FROM Words '\n                   'WHERE Word=?', [word])\n    places = cursor.fetchall()\n    `if` `not` places:\n         print(f'Word {word!r} not found in index file',\n               file=sys.stderr)\n `continue`\n    `for` fname, lineno `in` places:\n        print(f'Word {word!r} occurs in line {lineno}'\n              f' of file {fname!r}:')\n        print(linecache.getline(fname, lineno), end='')\nconnect.close()\n```"]