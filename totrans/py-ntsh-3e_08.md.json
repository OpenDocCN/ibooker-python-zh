["```py\nc = {}\n`for` key, value `in` x:\n    c[key] = value\n```", "```py\nMISSING = object()\n`def` check_for_none(obj=MISSING):\n    `if` obj `is` MISSING:\n        `return` -1\n    `return` 0 `if` obj `is` `None` `else` 1\n```", "```py\n`if` all(x>0 `for` x `in` the_numbers):\n    print('all of the numbers are positive')\n`else`:\n    print('some of the numbers are not positive')\n```", "```py\n`if` any(x<0 `for` x `in` the_numbers):\n    print('some of the numbers are negative')\n`else`:\n    print('none of the numbers are negative')\n```", "```py\n`for` i, num `in` enumerate(L):\n    `if` num % 2 == 0:\n        L[i] = num // 2\n```", "```py\n(*`item`* `for` *`item`* `in` *`seq`* `if` *`func`*(*`item`*)\n```", "```py\n(*`item`* `for` *`item`* `in` *`seq`* `if` *`item`*)\n```", "```py\n`def` iter_sequence(obj):\n    i = 0\n    `while` `True`:\n        `try`:\n `yield` obj[i]\n `except` IndexError:\n `raise` StopIteration\n        i += 1\n```", "```py\n`def` iter_sentinel(func, sentinel):\n    `while` `True`:\n        item = func()\n        `if` item == sentinel:\n            `raise` StopIteration\n        `yield` item\n```", "```py\n(*`func`*(*`item`*) `for` *`item`* `in` *`seq`*).map(*`func`*, *`seq1`*, *`seq2`*)\n```", "```py\n(*`func`*(*`a``,` `b`*) `for` *`a`*, *`b`* `in` zip(*`seq1`*, *`seq2`*))\n```", "```py\nstart, start+step, start+(2*step), ...\n```", "```py\n`def` sorted(*`seq`*, /, *, key=`None`, reverse=`False`):\n    result = list(*`seq`*)\n    result.sort(key, reverse)\n    `return` result\n```", "```py\n`def` _default_sys_displayhook(value, /):\n    `if` value `is` `not` `None`:\n        __builtins__._ = value\n        print(repr(value))\n```", "```py\n>>> `import` `sys`\n>>> `class` Ps1(object):\n...     `def` __init__(self):\n...         self.p = 0\n...     `def` __str__(self):\n...         self.p += 1\n...         `return` f'[{self.p}]>>> '\n...\n>>> `class` Ps2(object):\n...     `def` __str__(self):\n...         `return` f'[{sys.ps1.p}]... '\n...\n>>> sys.ps1, sys.ps2 = Ps1(), Ps2()\n[1]>>> (2 +\n[1]... 2)\n```", "```py\n4\n```", "```py\n[2]>>>\n```", "```py\nsublist = [1,2]\noriginal = [sublist, sublist]\nthecopy = copy.deepcopy(original)\n```", "```py\n`class` ChainMap(collections.abc.MutableMapping):\n    `def` __init__(self, *maps):\n        self.maps = list(maps)\n        self._keys = set()\n        `for` m `in` self.maps:\n            self._keys.update(m)\n    `def` __len__(self): `return` len(self._keys)\n    `def` __iter__(self): `return` iter(self._keys)\n    `def` __getitem__(self, key):\n        `if` key `not` `in` self._keys: `raise` KeyError(key)\n        `for` m `in` self.maps:\n            `try`: `return` m[key]\n            `except` KeyError: `pass`\n    `def` __setitem__(self, key, value):\n        self.maps[0][key] = value\n        self._keys.add(key)\n    `def` __delitem__(self, key):\n        `del` self.maps[0][key]\n        self._keys = set()\n        `for` m `in` self.maps:\n            self._keys.update(m)\n```", "```py\n>>> c = collections.Counter('moo')\n>>> c.update('foo')\n```", "```py\n>>> `del` c['foo']    \n>>> c['o']\n```", "```py\n4\n```", "```py\n>>> c.subtract('foo')\n>>> c['o']\n```", "```py\n2\n```", "```py\n`class` defaultdict(dict):\n    `def` __init__(self, default_factory=`None`, *a, **k):\n        super().__init__(*a, **k)\n        self.default_factory = default_factory\n    `def` __getitem__(self, key):\n        `if` key `not` `in` self `and` self.default_factory `is` `not` `None`:\n            self[key] = self.default_factory()\n        `return` dict.__getitem__(self, key)\n```", "```py\n`def` make_multi_dict(items):\n    d = collections.defaultdict(list)\n    `for` key, value `in` items:\n        d[key].append(value)\n    `return` d\n```", "```py\nL = map(functools.partial(max, 0), L)\n```", "```py\nL = map(`lambda` x: max(0, x), L)\n```", "```py\nL = [max(0, x) `for` x `in` L]\n```", "```py\n`def` reduce_equiv(func, seq, init=`None`):\n    seq = iter(seq)\n    `if` init `is` `None`:\n        init = next(seq)\n    `for` item `in` seq: \n        init = func(init, item)\n    `return` init\n```", "```py\nprod=reduce(operator.mul, seq, 1)\n```", "```py\n`def` heappushpop(alist, item):\n    heappush(alist, item)\n    `return` heappop(alist)\n```", "```py\n`def` heapreplace(alist, item):\n    `try`: `return` heappop(alist)\n    `finally`: heappush(alist, item)\n```", "```py\n`import` `heapq`\n\n`class` KeyHeap(object):\n    `def` __init__(self, alist, /, key):\n        self.heap = [(key(o), i, o) `for` i, o `in` enumerate(alist)]\n        heapq.heapify(self.heap)\n        self.key = key\n        `if` alist:\n            self.nexti = self.heap[-1][1] + 1\n        `else`:\n            self.nexti = 0\n\n    `def` __len__(self):\n        `return` len(self.heap)\n\n    `def` push(self, o, /):\n        heapq.heappush(self.heap, (self.key(o), self.nexti, o))\n        self.nexti += 1\n\n    `def` pop(self):\n        `return` heapq.heappop(self.heap)[-1]\n```", "```py\n`import` argparse\nap = argparse.ArgumentParser(description='Just an example')\nap.add_argument('who', nargs='?', default='World')\nap.add_argument('--formal', action='store_true')\nns = ap.parse_args()\n`if` ns.formal:\n    greet = 'Most felicitous salutations, o {}.'\n`else`:\n    greet = 'Hello, {}!'\nprint(greet.format(ns.who))\n```", "```py\n(*`it`* `for` *`iterable`* `in` *`iterables`* `for` *`it`* `in` *`iterable`*)\n```", "```py\n(*`it`* `for` *`iterable`* `in` *`iterables`* `for` *`it`* `in` *`iterable`*)\n```", "```py\n(*`it`* `for` *`it`*, *`cond`* `in` zip(*`data`*, *`conditions`*) `if` *`cond`*)\n```", "```py\n`def` count(start=0, step=1):\n    `while` `True`:\n        `yield` start\n        start += step\n```", "```py\n`def` cycle(iterable):\n    saved = []\n    `for` item `in` iterable:\n        `yield` item\n        saved.append(item)\n    `while` saved:\n        `for` item `in` saved:\n            `yield` item\n```", "```py\n`def` dropwhile(func, iterable):\n    iterator = iter(iterable)\n    `for` item `in` iterator:\n        `if` `not` func(item):\n            `yield` item\n `break`\n    `for` item `in` iterator:\n        `yield` item\n```", "```py\n(*`it`* `for` *`it`* `in` *`iterable`* `if` `not` *`func`*(*`it`*))\n```", "```py\n(*`it`* `for` *`it`* `in` *`iterable`* `if` `not` *`it`*)\n```", "```py\n`import` itertools `as` it\n`import` operator\n`def` set2dict(aset):\n    first = operator.itemgetter(0)\n    words = sorted(aset, key=first)\n    adict = {}\n    `for` init, group `in` it.groupby(words, key=first):\n        adict[init] = max(group, key=len)\n    `return` adict\n```", "```py\n`def` islice(iterable, start, stop, step=1):\n    en = enumerate(iterable)\n    n = stop\n    `for` n, item `in` en:\n        `if` n>=start:\n            `break`\n    `while` n<stop:\n        `yield` item\n        `for` x `in` range(step):\n            n, item = next(en)\n```", "```py\n(item `for` _ `in` range(times))\n```", "```py\n`def` repeat_unbounded(item):\n    `while` `True`:\n        `yield` item\n```", "```py\n`def` starmap(func, iterable):\n    `for` item `in` iterable:\n        `yield` func(*item)\n```", "```py\n`def` takewhile(func, iterable):\n    `for` item `in` iterable:\n        `if` func(item):\n            `yield` item\n        `else`:\n `break`\n```", "```py\n`for` _ `in` itertools.repeat(None, 10): `pass`\n```", "```py\n`for` _ `in` range(10): `pass`\n```"]