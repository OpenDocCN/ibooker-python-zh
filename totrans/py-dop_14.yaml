- en: Chapter 14\. MLOps and Machine learning Engineering
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章 机器学习运维与机器学习工程
- en: 'One of the hottest job titles in 2020 is machine learning engineer. Other hot
    job titles include data engineer, data scientist, and machine learning scientist.
    While you can be a DevOps specialist, DevOps is a behavior, and the principles
    of DevOps can be applied to any software project, including machine learning.
    Let’s look at the some core DevOps best practices: Continuous Integration, Continuous
    Delivery, Microservices, Infrastructure as Code, Monitoring and Logging, and Communication
    and Collaboration. Which of these doesn’t apply to machine learning?'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 2020年最热门的职位之一是机器学习工程师。其他热门职位包括数据工程师、数据科学家和机器学习科学家。尽管您可以成为DevOps专家，但DevOps是一种行为，DevOps的原则可以应用于任何软件项目，包括机器学习。让我们看看一些核心的DevOps最佳实践：持续集成、持续交付、微服务、基础设施即代码、监控与日志记录、以及沟通与协作。这些中哪个不适用于机器学习？
- en: The more complex a software engineering project is, and machine learning is
    complex, the more you need DevOps principles. Is there a better example of a Microservice
    than an API that does machine learning prediction? In this chapter, let’s dive
    into the nitty-gritty of doing machine learning in a professional and repeatable
    way using a DevOps mindset.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程项目越复杂，而机器学习就更复杂，您就越需要DevOps原则。有比API做机器学习预测更好的微服务示例吗？在本章中，让我们深入探讨如何使用DevOps思维以专业且可重复的方式进行机器学习。
- en: What Is Machine Learning?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是机器学习？
- en: 'Machine learning is a method of using algorithms to automatically learn from
    data. There are four main types: supervised, semi-supervised, unsupervised, and
    reinforcement.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习是一种利用算法自动从数据中学习的方法。主要有四种类型：监督学习、半监督学习、无监督学习和强化学习。
- en: Supervised Machine Learning
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监督学习
- en: In supervised machine learning, the correct answers are already known and labeled.
    For example, if you wanted to predict height from weight, you could collect examples
    of people’s heights and weights. The height would be the target and the weight
    would be the feature.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在监督学习中，已知并标记了正确答案。例如，如果您想要从体重预测身高，可以收集人们身高和体重的示例。身高将是目标，体重将是特征。
- en: 'Let’s walk through what an example of supervised machine learning looks like:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个监督学习的示例：
- en: '[Original dataset](https://oreil.ly/jzWmI)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[原始数据集](https://oreil.ly/jzWmI)'
- en: 25,000 synthetic records of heights and weights of 18-year-old children
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 25,000个18岁儿童身高和体重的合成记录
- en: Ingest
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摄入
- en: '`**In[0]:**`'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`**输入[0]:**`'
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`**In[7]:**`'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`**输入[7]:**`'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`**Out[7]:**`'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`**输出[7]:**`'
- en: '|  | Index | Height-Inches | Weight-Pounds |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '|  | 索引 | 身高-英寸 | 体重-磅 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `0` | `1` | `65.78331` | `112.9925` |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `0` | `1` | `65.78331` | `112.9925` |'
- en: '| `1` | `2` | `71.51521` | `136.4873` |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `1` | `2` | `71.51521` | `136.4873` |'
- en: '| `2` | `3` | `69.39874` | `153.0269` |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `2` | `3` | `69.39874` | `153.0269` |'
- en: '| `3` | `4` | `68.21660` | `142.3354` |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `3` | `4` | `68.21660` | `142.3354` |'
- en: '| `4` | `5` | `67.78781` | `144.2971` |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `4` | `5` | `67.78781` | `144.2971` |'
- en: EDA
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索性数据分析（EDA）
- en: Let’s look at the data and see what can be explored.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看数据，看看可以探索什么。
- en: Scatterplot
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 散点图
- en: In this example, seaborn, a popular plotting library in Python, is used to visualize
    the dataset. If you need to install it, you can always install with `!pip install
    seaborn` in your notebook. You can also install any other library in the section
    with the `!pip install <name of package>`. If you are using a Colab notebook,
    these libraries are installed for you. See the graph for the height/weight lm
    plot ([Figure 14-1](#Figure-14-1)).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，使用了Python中流行的绘图库seaborn来可视化数据集。如果需要安装它，您可以在笔记本中使用`!pip install seaborn`进行安装。您还可以在部分中使用`!pip
    install <包名称>`安装任何其他库。如果您使用的是Colab笔记本，则这些库已经为您安装好。查看身高/体重 lm 图（[图14-1](#图14-1)）。
- en: '`**In[0]:**`'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`**输入[0]:**`'
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`**In[9]:**`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`**输入[9]:**`'
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![pydo 1401](assets/pydo_1401.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![pydo 1401](assets/pydo_1401.png)'
- en: Figure 14-1\. Height/weight lm plot
  id: totrans-32
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图14-1 身高/体重 lm 图
- en: Descriptive Statistics
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述性统计
- en: Next, some descriptive statistics can be generated.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，可以生成一些描述性统计。
- en: '`**In[10]:**`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`**输入[10]:**`'
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`**Out[10]:**`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`**输出[10]:**`'
- en: '|  | Index | Height-Inches | Weight-Pounds |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '|  | 索引 | 身高-英寸 | 体重-磅 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `count` | `25000.000000` | `25000.000000` | `25000.000000` |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `数量` | `25000.000000` | `25000.000000` | `25000.000000` |'
- en: '| `mean` | `12500.500000` | `67.993114` | `127.079421` |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `均值` | `12500.500000` | `67.993114` | `127.079421` |'
- en: '| `std` | `7217.022701` | `1.901679` | `11.660898` |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `标准差` | `7217.022701` | `1.901679` | `11.660898` |'
- en: '| `min` | `1.000000` | `60.278360` | `78.014760` |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `最小值` | `1.000000` | `60.278360` | `78.014760` |'
- en: '| `25%` | `6250.750000` | `66.704397` | `119.308675` |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `25%` | `6250.750000` | `66.704397` | `119.308675` |'
- en: '| `50%` | `12500.500000` | `67.995700` | `127.157750` |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `50%` | `12500.500000` | `67.995700` | `127.157750` |'
- en: '| `75%` | `18750.250000` | `69.272958` | `134.892850` |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `75%` | `18750.250000` | `69.272958` | `134.892850` |'
- en: '| `max` | `25000.000000` | `75.152800` | `170.924000` |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `max` | `25000.000000` | `75.152800` | `170.924000` |'
- en: Kernel Density Distribution
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 核密度分布
- en: A distribution for the density plot ([Figure 14-2](#Figure-14-2)) shows how
    the two variables relate to each other.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 密度图的分布（[图 14-2](#Figure-14-2)）显示了两个变量之间的关系。
- en: '`**In[11]:**`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[11]:**`'
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`**Out[11]:**`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[11]:**`'
- en: '![pydo 1402](assets/pydo_1402.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![pydo 1402](assets/pydo_1402.png)'
- en: Figure 14-2\. Density plot
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-2\. 密度图
- en: Modeling
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 建模
- en: Now let’s review modeling. Machine learning modeling is when an algorithm learns
    from the data. The general idea is to use previous data to predict future data.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来审查建模过程。机器学习建模是指算法从数据中学习的过程。总体思路是利用历史数据来预测未来数据。
- en: Sklearn Regression Model
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sklearn 回归模型
- en: First the data is extracted into features and targets, and then it is split
    into a train and a test set. This allows the test set to be held aside to test
    the accuracy of the trained model.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，数据被提取为特征和目标，然后被分割为训练集和测试集。这允许测试集被保留以测试训练模型的准确性。
- en: '`**In[0]:**`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Extract and inspect feature and target
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 提取并检查特征和目标
- en: It is a good idea to explicitly pull out the target and feature variables and
    reshape them in one cell. Afterwards you will want to check the shape to ensure
    it is the property dimension for doing machine learning with sklearn.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 建议明确提取目标和特征变量，并在一个单元格中重塑它们。然后，您会想要检查形状，以确保它是适合使用 Sklearn 进行机器学习的正确维度。
- en: '`**In[0]:**`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`**In[14]:**`'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[14]:**`'
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`**Out[14]:**`'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[14]:**`'
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Split the data
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 分割数据
- en: The data is split into an 80%/20% split.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 数据被分为 80%/20% 的比例。
- en: '`**In[15]:**`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[15]:**`'
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`**Out[15]:**`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[15]:**`'
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Fit the model
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 拟合模型
- en: Now the model is fit using a LinearRegression algorithm imported via sklearn.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在模型使用从 Sklearn 导入的 LinearRegression 算法进行拟合。
- en: '`**In[0]:**`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Print accuracy of linear regression model
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 打印线性回归模型的准确性
- en: Now the trained model can show what the accuracy is in predicting new data.
    This is performed by asking for the RMSE or root mean squared error of the predicted
    and the test data.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在训练好的模型可以展示在预测新数据时的准确性。这是通过计算预测数据与测试数据的 RMSE 或均方根误差来完成的。
- en: '`**In[18]:**`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[18]:**`'
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`**Out[18]:**`'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[18]:**`'
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Plot predicted height versus actual height
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 绘制预测的身高与实际身高
- en: Now let’s plot the predicted height versus actual height ([Figure 14-3](#Figure-14-3))
    to see how well this model performs at predictions.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们绘制预测的身高与实际身高（[图 14-3](#Figure-14-3)）的图表，以查看该模型在预测中的表现如何。
- en: '`**In[19]:**`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[19]:**`'
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![pydo 1403](assets/pydo_1403.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![pydo 1403](assets/pydo_1403.png)'
- en: Figure 14-3\. Predicted height versus actual height
  id: totrans-90
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-3\. 预测的身高与实际身高
- en: This is a very simple yet powerful example of a realistic workflow for creating
    a machine learning model.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个创建机器学习模型的非常简单但又强大的实际工作流示例。
- en: Python Machine learning Ecosystem
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 机器学习生态系统
- en: Let’s take a quick look at the Python machine learning ecosystem ([Figure 14-4](#Figure-14-4)).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速了解一下 Python 机器学习生态系统（[图 14-4](#Figure-14-4)）。
- en: 'There are really four main areas: deep learning, sklearn, AutoML, and Spark.
    In the area of deep learning, the most popular frameworks in order are: TensorFlow/Keras,
    PyTorch, and MXNet. Google is sponsoring TensorFlow, Facebook is sponsoring PyTorch,
    and MXNet comes from Amazon. You will see MXNet mentioned quite a bit by Amazon
    SageMaker. It is important to note that these deep learning frameworks target
    GPUs, giving them performance boosts over CPU targets of up to 50X.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 主要有四个领域：深度学习、sklearn、AutoML 和 Spark。在深度学习领域，最流行的框架依次是 TensorFlow/Keras、PyTorch
    和 MXNet。Google 赞助 TensorFlow，Facebook 赞助 PyTorch，而 MXNet 来自亚马逊。您将会看到亚马逊 SageMaker
    经常提到 MXNet。需要注意的是，这些深度学习框架针对 GPU 进行优化，使其性能比 CPU 目标提升多达 50 倍。
- en: '![pydo 1404](assets/pydo_1404.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![pydo 1404](assets/pydo_1404.png)'
- en: Figure 14-4\. Python machine learning ecosystem
  id: totrans-96
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-4\. Python 机器学习生态系统
- en: The sklearn ecosystem often has Pandas and Numpy in the same projects. Sklearn
    also intentionally does not target GPUs. However, there is a project called Numba
    that does specifically target the GPU (both NVIDIA and AMD).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Sklearn 生态系统通常在同一个项目中同时使用 Pandas 和 Numpy。Sklearn 故意不针对 GPU，但是有一个名为 Numba 的项目专门针对
    GPU（包括 NVIDIA 和 AMD）。
- en: In AutoML, two of the leaders are Uber with Ludwig and H20, with H20 AutoML.
    Both can save significant time developing machine learning models and can also
    potentially optimize existing machine learning models.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在AutoML中，Uber的Ludwig和H20的H20 AutoML是两个领先的工具。两者都可以节省开发机器学习模型的时间，并且还可以优化现有的机器学习模型。
- en: 'Finally, there is the Spark ecosystem, which builds on the legacy of Hadoop.
    Spark can target GPUs and CPUs and does so via many different platforms: Amazon
    EMR, Databricks, GCP Dataproc, and more.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有Spark生态系统，它建立在Hadoop的基础上。Spark可以针对GPU和CPU进行优化，并通过多个平台实现：Amazon EMR、Databricks、GCP
    Dataproc等。
- en: Deep Learning with PyTorch
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用PyTorch进行深度学习
- en: Now that the ecosystem for machine learning with Python has been defined, let’s
    take a look at porting the simple linear regression example to PyTorch and run
    it on a CUDA GPU. One easy way to get access to an NVIDIA GPU is to use Colab
    notebooks. Colab notebooks are Google-hosted, Jupyter-compatible notebooks that
    give the user free access to both GPUs and tensor processing units (TPUs). You
    can run this code [in a GPU](https://oreil.ly/kQhKO).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在定义了使用Python进行机器学习的生态系统，让我们看看如何将简单线性回归示例移植到PyTorch，并在CUDA GPU上运行它。获取NVIDIA
    GPU的一个简单方法是使用Colab笔记本。Colab笔记本是由Google托管的与Jupyter兼容的笔记本，用户可以免费访问GPU和张量处理单元（TPU）。您可以在[GPU中运行此代码](https://oreil.ly/kQhKO)。
- en: Regression with PyTorch
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用PyTorch进行回归
- en: First, convert data to `float32`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将数据转换为`float32`。
- en: '`**In[0]:**`'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note that if you are not using Colab notebooks, you may have to install PyTorch.
    Also, if you use Colab notebooks, you can have an NVIDIA GPU and run this code.
    If you are not using Colab, you will need to run on a platform that has a GPU.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您不使用Colab笔记本，可能需要安装PyTorch。此外，如果您使用Colab笔记本，您可以拥有NVIDIA GPU并运行此代码。如果您不使用Colab，则需要在具有GPU的平台上运行。
- en: '`**In[0]:**`'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now create a model with CUDA enabled (assuming you are running in Colab or on
    a machine with an NVIDIA GPU).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个启用CUDA的模型（假设您在Colab上或者有NVIDIA GPU的机器上运行）。
- en: '`**In[0]:**`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`**Out[0]:**`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[0]:**`'
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Create the Stochastic Gradient Descent and Loss Function.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 创建随机梯度下降和损失函数。
- en: '`**In[0]:**`'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE20]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now train the model.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在训练模型。
- en: '`**In[0]:**`'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The output over 1,000 runs is supressed to save space.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为了节省空间，输出被抑制了超过1000次运行。
- en: '`**Out[0]:**`'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[0]:**`'
- en: '[PRE22]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Plot predicted height versus actual height
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 绘制预测高度与实际高度
- en: Now let’s plot the predicted height versus actual height ([Figure 14-5](#Figure-14-5))
    as in the simple model.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们绘制预测高度与实际高度的图示（[图 14-5](#Figure-14-5)），就像简单模型一样。
- en: '`**In[0]:**`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE23]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![pydo 1405](assets/pydo_1405.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![pydo 1405](assets/pydo_1405.png)'
- en: Figure 14-5\. Predicted height versus actual height
  id: totrans-128
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-5\. 预测高度与实际高度
- en: Print RMSE
  id: totrans-129
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 打印 RMSE
- en: Finally, let’s print out the RMSE and compare.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们打印出RMSE并进行比较。
- en: '`**In[0]:**`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE24]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`**Out[0]:**`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[0]:**`'
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: It does take a little more code to do deep learning, but the concepts are the
    same from the sklearn model. The big takeaway here is that GPUs are becoming an
    integral part of production pipelines. Even if you aren’t doing deep learning
    yourself, it is helpful to have a basic awareness of the process of building GPU-based
    machine learning models.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习确实需要更多的代码，但其概念与sklearn模型相同。这里的重要一点是GPU正成为生产流水线中不可或缺的一部分。即使您自己不进行深度学习，了解构建基于GPU的机器学习模型的过程也是有帮助的。
- en: Cloud Machine learning Platforms
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云机器学习平台
- en: One aspect of machine learning that is becoming ubiquitious is cloud-based machine
    learning platforms. Google offers the GCP AI Platform ([Figure 14-6](#Figure-14-6)).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习中一个普遍存在的方面是基于云的机器学习平台。Google提供了GCP AI平台（[图 14-6](#Figure-14-6)）。
- en: '![pydo 1406](assets/pydo_1406.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![pydo 1406](assets/pydo_1406.png)'
- en: Figure 14-6\. GCP AI platform
  id: totrans-139
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-6\. GCP AI 平台
- en: The GCP platform has many high-level automation components, from data preparation
    to data labeling. The AWS platform offers Amazon SageMaker ([Figure 14-7](#Figure-14-7)).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: GCP平台具有许多高级自动化组件，从数据准备到数据标记。AWS平台提供Amazon SageMaker（[图 14-7](#Figure-14-7)）。
- en: '![pydo 1407](assets/pydo_1407.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![pydo 1407](assets/pydo_1407.png)'
- en: Figure 14-7\. Amazon SageMaker
  id: totrans-142
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-7\. Amazon SageMaker
- en: SageMaker also has many high-level components, including training on spot instances
    and elastic prediction endpoints.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: SageMaker还具有许多高级组件，包括在spot实例上训练和弹性预测端点。
- en: Machine learning Maturity Model
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习成熟度模型
- en: One of the big challenges right now is a realization that transformational change
    is needed in companies that want to perform machine learning. The machine learning
    maturity model diagram ([Figure 14-8](#Figure-14-8)) represents some challenges
    and opportunities.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在面临的一个重大挑战之一是意识到希望进行机器学习的公司需要进行变革。机器学习成熟度模型图表（[图 14-8](#Figure-14-8)）展示了一些挑战和机会。
- en: '![pydo 1408](assets/pydo_1408.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![pydo 1408](assets/pydo_1408.png)'
- en: Figure 14-8\. Machine learning maturity model
  id: totrans-147
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-8\. 机器学习成熟度模型
- en: Machine Learning Key Terminology
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机器学习关键术语
- en: 'Let’s define some key machine learning terminology that will be helpful througout
    the rest of the chapter:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一些关键的机器学习术语，这将在本章的其余部分中非常有帮助：
- en: Machine learning
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习
- en: A way of building mathmatical models based on sample or training data.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 基于样本或训练数据建立数学模型的一种方法。
- en: Model
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 模型
- en: This is what the product is in a machine learning application. A simple example
    is a linear equation, i.e., a straight line that predicts the relationship between
    an X and a Y.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这是机器学习应用中的产品。一个简单的例子是线性方程，即预测X和Y之间关系的直线。
- en: Feature
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 特征
- en: A feature is a column in a spreadsheet that is used as a signal to create a
    machine learning model. A good example is points scored per game by an NBA team.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 特征是电子表格中用作信号以创建机器学习模型的列。一个很好的例子是NBA球队每场比赛得分。
- en: Target
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 目标
- en: The target is the column in a spreadsheet you are trying to predict. A good
    example is how many games an NBA team wins in a season.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是电子表格中你试图预测的列。一个很好的例子是一支NBA球队赛季获胜场次。
- en: Supersized machine learning
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 超大规模机器学习
- en: This is a type of machine learning that predicts future values based on known
    correct historical values. A good example would be predicting the amount of NBA
    wins in a season by using the feature points per game.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这是根据已知的正确历史值预测未来值的机器学习类型。一个很好的例子是使用每场比赛得分特征来预测NBA赛季中的胜利次数。
- en: Unsupervised machine learning
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 无监督机器学习
- en: This is a type of machine learning that works with unlabeled data. Instead of
    predicting a future value, it finds hidden patterns by using tools such as clustering,
    which in turn could be used as labels. A good example would be to create clusters
    of NBA players that have similar points, rebounds, blocks, and assists. One cluster
    could be called “Tall, Top Players,” and another cluster could be called “Point
    guards who score a lot of points.”
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种处理未标记数据的机器学习类型。它不是预测未来值，而是通过工具如聚类来发现隐藏的模式，进而可以用作标签。一个很好的例子是创建具有类似得分、篮板、盖帽和助攻的NBA球员集群。一个集群可以称为“高个子顶级球员”，另一个集群可以称为“得分后卫”。
- en: Deep learning
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习
- en: This is a type of machine learning that uses artificial neural networks that
    can be used for supervised or unsupervised machine learning. The most popular
    framework for deep learning is TensorFlow from Google.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种使用人工神经网络进行监督或无监督机器学习的方法。深度学习最流行的框架是Google的TensorFlow。
- en: Scikit-learn
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Scikit-learn
- en: This is one of the most popular machine learning frameworks in Python.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Python中最流行的机器学习框架之一。
- en: Pandas
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 熊猫
- en: This is one of the most popular libraries for doing data manipulation and analysis.
    It works well with scikit-learn and Numpy.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于进行数据处理和分析的最流行的库之一。它与scikit-learn和Numpy配合良好。
- en: Numpy
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy
- en: This is the predominant Python library for doing low-level scientific computing.
    It has support for a large, multidimensional array and has a large collection
    of high-level mathmatical functions. It is used extensively with scikit-learn,
    Pandas, and TensorFlow.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是进行低级科学计算的主要Python库。它支持大型多维数组，并拥有大量的高级数学函数。它广泛地与scikit-learn、Pandas和TensorFlow一起使用。
- en: 'Level 1: Framing, Scope Identification, and Problem Definition'
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1级：构架、范围识别和问题定义
- en: Let’s look at the first layer. When implementing machine learning at a company,
    it is important to consider what problems need solving and how they can be framed.
    One of the key reasons for failure of machine learning projects is that organizations
    haven’t first asked questions about what problems they need solved.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先来看看第一层。在公司实施机器学习时，重要的是考虑需要解决的问题以及如何构架这些问题。机器学习项目失败的一个关键原因是组织在开始之前没有先提出问题。
- en: A good analogy to look at is building a mobile application for a restaurant
    chain in San Francisco. One naive approach would be to immediately start building
    a native iOS and a native Android app (using two development teams). A typical
    mobile team could be three full-time developers for each application. So this
    means hiring six developers at around two hundred thousand dollars each. The run
    rate for the project is about $1.2 million a year now. Will the mobile app deliver
    greater than $1.2 million in revenue each year? If not, is there an easier alternative?
    Perhaps a mobile-optimized web app that uses the existing web developers in the
    company is a better choice.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的类比是为旧金山的一家餐馆连锁店建立移动应用程序。一个天真的方法是立即开始构建本地iOS和本地Android应用程序（使用两个开发团队）。一个典型的移动团队可能是每个应用程序三名全职开发人员。所以这意味着每个开发人员大约20万美元，需要聘请六名开发人员。项目的运行成本现在约为每年120万美元。移动应用程序每年能带来超过120万美元的收入吗？如果不能，是否有更简单的替代方案？也许使用现有公司的网络开发人员的移动优化Web应用程序会是一个更好的选择。
- en: What about partnering with a company that specializes in food delivery and outsourcing
    this task completely? What are the pros and cons to this approach? The same type
    of thought process can and should be applied to machine learning and data science
    initiatives. For example, does your company need to hire six PhD-level machine
    learning researchers at, say, five hundred thousand dollars a year? What is the
    alternative? A little bit of scoping and problem definition goes a long way with
    machine learning and can ensure a higher chance of success.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，与一家专门从事食品配送的公司合作并完全外包这项任务呢？这种方法的利弊是什么？同样的思维过程可以和应该应用于机器学习和数据科学倡议。例如，你的公司是否需要雇佣六名年薪50万美元的博士级机器学习研究员？还有什么替代方案？对于机器学习来说，一点点范围界定和问题定义可以大大增加成功的机会。
- en: 'Level 2: Continuous Delivery of Data'
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Level 2：数据的持续交付
- en: One of the fundamentals of civilization is running water. Roman aqueducts carried
    water for miles to provide crowded cities with water as early as 312 B.C. Running
    water enabled the infrastructure necessary for a large city to succeed. It is
    estimated by UNICEF that worldwide in 2018, women and girls spend an estimated
    two hundred million hours daily, collecting water. The opportunity cost is substantial;
    less time to spend learning, taking care of children, working, or relaxing.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 文明的基础之一是运行水。罗马的高架渠道早在公元前312年就为城市提供了数英里的水源。运行水使得城市成功所必需的基础设施得以实现。据联合国儿童基金会估计，全球2018年，妇女和女童每天花费约2亿小时来取水。这是一个巨大的机会成本；时间不足以学习、照顾孩子、工作或放松。
- en: A popular expression is that “software is eating the world.” A corollary to
    that is that all software companies, which is every company in the future, need
    to have a machine learning and AI strategy. Part of that strategy is to think
    more seriously about continuous delivery of data. Just like running water, “running
    data” saves you hours per day. One potential solution is the concept of a *data
    lake*, as shown in [Figure 14-9](#Figure-14-9).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 一个流行的说法是“软件正在吞噬世界”。与此相关的是，未来每家公司都需要有一个机器学习和人工智能战略。其中一部分战略是更加认真地思考数据的持续交付。就像运行水一样，“运行数据”每天为您节省数小时的时间。数据湖的一个潜在解决方案如图14-9所示。
- en: '![pydo 1409](assets/pydo_1409.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![pydo 1409](assets/pydo_1409.png)'
- en: Figure 14-9\. AWS data lake
  id: totrans-178
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图14-9. AWS数据湖
- en: 'At first glance, a data lake might seem like a solution in search of a problem,
    or too simple to do anything useful. Let’s look at some of the problems it solves,
    though:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 乍看之下，数据湖可能看起来像是在寻找问题的解决方案，或者过于简单而无法做任何有用的事情。但是让我们来看看它解决的一些问题：
- en: You can process the data without moving it.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在不移动数据的情况下处理数据。
- en: It is cheap to store data.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储数据是便宜的。
- en: It is straightforward to create life cycle policies to archive the data.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建存档数据的生命周期策略是直接的。
- en: It is straightforward to create life cycle policies that secure and audit the
    data.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建安全并审核数据的生命周期策略是直接的。
- en: The production systems are decoupled from data processing.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产系统与数据处理分离。
- en: It can have almost infinite and elastic storage and disk I/O.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以拥有几乎无限和弹性的存储和磁盘I/O。
- en: 'The alternative to this architecture is often an ad hoc mess equivalent to
    walking four hours to a well and back simply to get some water. Security is also
    a major factor in a data lake architecture, just as security is in the water supply.
    By centralizing the architecture of data storage and delivery, preventing and
    monitoring data breaches becomes more straightforward. Here are a few ideas that
    may be helpful in preventing future data breaches:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构的替代方案通常是一种临时混乱的等同于步行四小时到井边取水然后返回的混乱状态。安全性在数据湖架构中也是一个主要因素，就像在供水中一样。通过集中数据存储和交付的架构，防止和监控数据违规变得更加简单明了。以下是一些可能有助于防止未来数据违规的想法：
- en: Is your data encrypted at rest? If so, who has the keys? Are decryption events
    logged and audited?
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的数据是否处于静态加密状态？如果是，谁拥有解密密钥？解密事件是否被记录和审计？
- en: Is your data moving out of your network logged and audited? For example, when
    is it ever a good idea for your entire customer database to move outside of your
    network? Why isn’t this monitored and audited?
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的数据是否在离开你的网络时被记录和审计？例如，将整个客户数据库移出网络何时是一个好主意？为什么这不受监控和审计？
- en: Do you have periodic data security audits? Why not?
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你进行定期数据安全审计吗？为什么不？
- en: Are you storing personally identifiable information (PII)? Why?
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是否存储个人身份信息（PII）？为什么？
- en: You have monitoring for critical production events. Are you monitoring data
    security events? Why not?
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是否监控关键生产事件的监控？你为什么不监控数据安全事件？
- en: Why would we ever let data flow outside of the internal network? What if we
    designed critical data to be a literal square peg that couldn’t be transmitted
    outside of the host network without something like a nuclear launch code? Making
    it impossible to move data out of the environment does seem like a viable way
    to prevent these breaches. What if the external network itself could only transport
    “round peg” packets? Also, this could be a great “lock-in” feature for clouds
    providing this type of secure data lake.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为什么要让数据在内部网络之外流动？如果我们设计关键数据为字面上无法在主机网络之外传输的方形销钉，例如核发射代码，会怎样？让数据无法移出环境似乎是防止这些违规行为的一种可行方式。如果外部网络本身只能传输“圆销钉”数据包会怎样？此外，这可能是提供此类安全数据湖云的一个很好的“锁定”功能。
- en: 'Level 3: Continuous Delivery of Clean Data'
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 'Level 3: 持续交付干净的数据'
- en: Hopefully you are sold on the idea behind continuous delivery of data and how
    important it is to the success of a company’s plans for doing machine learning.
    One huge improvement to continuous delivery of data is continuous delivery of
    clean data. Why go through all of the trouble of delivering data that is a mess?
    The recent problem of contaminated water in Flint, Michigan, comes to mind. Around
    2014, Flint changed its water source from Lake Huron and the Detroit River to
    the Flint River. Officials failed to apply corrosion inhibitors, which allowed
    lead from aging pipes leak into the water supply. It is also possible that the
    water change caused an outbreak of Legionnaires’ disease that killed 12 people
    and sickened another 87.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你能接受持续交付数据背后的理念，以及对公司的机器学习计划的成功有多么重要。持续交付数据的一个巨大改进是持续交付干净的数据。为什么要费力交付一团糟的数据？弗林特市密歇根州最近出现的污水问题让人联想起。大约在2014年，弗林特将水源从休伦湖和底特律河改为弗林特河。官员未能施用腐蚀抑制剂，导致老化管道中的铅渗漏到饮水供应中。这也可能导致外部水源变更引发的瘟疫，导致12人死亡，另有87人患病。
- en: One of the earliest success stories of data science involves dirty water from
    1849–1854\. John Snow was able to use data visualization to identify clusters
    of cholera cases ([Figure 14-10](#Figure-14-10)). This led to the discovery of
    the root cause of the outbreak. Sewage was being pumped directly into the drinking
    water supply!
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 最早的数据科学成功故事之一涉及1849-1854年的脏水。约翰·斯诺能够使用数据可视化来识别霍乱病例的聚类（[图 14-10](#图-14-10)）。这导致发现了爆发的根本原因。污水直接被泵入饮用水供应中！
- en: '![pydo 1410](assets/pydo_1410.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![pydo 1410](assets/pydo_1410.png)'
- en: Figure 14-10\. Clusters of cholera cases
  id: totrans-197
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-10\. 霍乱病例聚类
- en: 'Consider the following observations:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下观察：
- en: Why isn’t data automatically processed to “clean” it?
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么数据不会自动处理以“清洁”它？
- en: Can you visualize parts of your data pipeline that have “sewage” in them?
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你能够可视化具有“污水”的数据管道的部分吗？
- en: How much time is your company spending on data-cleaning tasks that are 100%
    automatible?
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公司花费了多少时间在可以完全自动化的数据清洗任务上？
- en: 'Level 4: Continuous Delivery of Exploratory Data Analysis'
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 'Level 4: 持续交付探索性数据分析'
- en: 'If your only view of data science is Kaggle projects, it may seem like the
    whole point of data science is to generate the most accurate prediction possible.
    There is more to data science and machine learning than just making predictions.
    Data science is a multidisciplinary field and there are a few ways to look at
    it. e One perspective is to focus on causality. What are the underlying features
    that drive the model? Can you explain how the model is coming to the prediction
    it has generated? Several Python libraries help in this regard: ELI5, SHAP, and
    LIME. They all work to help explain what machine learning models are really doing.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对数据科学的唯一看法是Kaggle项目，可能会觉得数据科学的主要目标是生成尽可能精确的预测。然而，数据科学和机器学习远不止于此。数据科学是一个多学科领域，有几种不同的视角。其中一种视角是关注因果关系。是什么潜在特征推动了模型？你能解释模型如何得出其预测吗？几个Python库在这方面提供了帮助：ELI5、SHAP和LIME。它们都致力于帮助解释机器学习模型的真实运行方式。
- en: A prediction world view cares less about how you got to the answer, and more
    about whether the prediction is accurate. In a cloud-native, Big Data world, this
    approach has merits. Certain machine learning problems do very well with large
    quantities of data, such as image recognition using deep learning. The more data
    and the more computational power you have, the better your prediction accuracy
    will be.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 预测的世界观不太关注如何达到答案，而更关注预测是否准确。在一个云原生、大数据的世界中，这种方法具有优点。某些机器学习问题使用大量数据表现良好，例如使用深度学习进行图像识别。你拥有的数据和计算能力越多，你的预测准确性就会越好。
- en: Is what you created in production? Why not? If you are building machine learning
    models and they don’t get used, then why are you building machine learning models?
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 你的产品已经投入使用了吗？为什么没有？如果你建立机器学习模型，而它们没有被使用，那你建模的目的是什么？
- en: What don’t you know? What can you learn by looking at data? Often data science
    is more interested in the process than the outcome. If you are only looking for
    a prediction, then you may miss out on a completely different angle to the data.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 你不知道什么？通过观察数据，你能学到什么？通常，数据科学更感兴趣的是过程而不是结果。如果你只关注预测，那么你可能会错过数据的完全不同的视角。
- en: 'Level 5: Continuous Delivery of Traditional ML and AutoML'
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Level 5：传统机器学习和AutoML的持续交付
- en: Fighting automation is as old as human history. The Luddite movement was a secret
    organization of English textile workers who destroyed textile machinary as a form
    of protest from 1811 to 1816\. Ultimately, protesters were shot, the rebellion
    was put down with legal and military might, and the path of progress kept going.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 抗拒自动化如同人类历史的常态。卢德运动是英国纺织工人的秘密组织，他们在1811年到1816年间摧毁纺织机器，作为抗议的形式。最终，抗议者被击毙，反叛被法律和军事力量镇压，进步的道路依然前行。
- en: If you look at the history of humanity, tools that automate tasks that humans
    once did are constantly being developed. In technological unemployment, lower-skilled
    workers are displaced and higher-skilled workers get an increased salary. A case
    in point is the systems administrator versus the DevOps professional. Yes, some
    systems administrators lost their jobs, for example, workers focused on tasks
    such as changing hard drives out of data centers, but new, higher-paying jobs
    such as cloud architects appeared.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你审视人类的历史，那些自动化取代曾由人类执行的任务的工具正在不断发展。在技术性失业中，低技能工人被取代，而高技能工人的薪水增加。一个例子是系统管理员与DevOps专业人员之间的对比。是的，一些系统管理员失去了工作，例如那些专注于数据中心更换硬盘等任务的工人，但是新的、薪水更高的工作，比如云架构师，也随之出现。
- en: 'It isn’t unusual to see job postings for machine learning and data science
    that command an annual salary of between three hundred thousand and one million
    dollars. Additionally these jobs often include many components that are essentially
    business rules: tweaking hyperparameters, removing null values, and distributing
    jobs to a cluster. The automator’s law (something I came up with) says, “If you
    talk about something being automated, it will eventually be automated.” There
    is a lot of talk around AutoML, so it is inevitable that large parts of machine
    learning will be automated.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器学习和数据科学的职位招聘中，年薪通常在三十万到一百万美元之间，并不少包含着许多基本的商业规则：调整超参数，删除空值，以及将作业分发至集群。我提出的自动化定律（automator’s
    law）说：“如果你谈论自动化某事，它最终将会被自动化。” 关于自动机器学习（AutoML）有很多讨论，因此机器学习的大部分内容将不可避免地被自动化。
- en: This will mean that, just like other automation examples, the nature of jobs
    will change. Some jobs will become even more skilled (imagine a person who can
    train thousands of machine learning models a day), and some jobs will become automated
    because a machine can do them much better (jobs that involve tweaking values in
    a JSON data structure, i.e., tuning hyperparameters).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，就像其他自动化示例一样，工作的性质将发生变化。一些工作将变得更加熟练（想象一下能够每天训练数千个机器学习模型的人），而一些工作将因为机器能够做得更好而自动化（比如调整
    JSON 数据结构中数值的工作，即调优超参数）。
- en: 'Level 6: ML Operational Feedback Loop'
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第6级别：ML 操作反馈循环
- en: Why develop a mobile application? Presumably to have users on a mobile device
    use your application. What about machine learning? The point of machine learning,
    especially in comparison to data science or statistics, is to create a model and
    predict something. If the model isn’t in production, then what is it doing?
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要开发移动应用？想必是为了让移动设备上的用户使用你的应用。那么机器学习呢？特别是与数据科学或统计学相比，机器学习的目的是创建模型并预测某些事物。如果模型没有投入生产，那它到底在做什么呢？
- en: 'Additionally, pushing the model to production is an opportunity to learn more.
    Does the model predict accurately when put into an environment where it gets new
    data? Does the model have the impact expected on the users: i.e., increasing purchases
    or staying on the site longer? These valuable insights can only be obtained when
    the model is actually deployed into a production environment.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，将模型推送到生产环境是学习更多的机会。当模型真正部署到生产环境时，它是否能够准确预测新数据的情况？模型是否如预期地对用户产生影响，比如增加购买或在网站上停留的时间？只有在模型实际部署到生产环境时，才能获得这些宝贵的见解。
- en: 'Another important concern is scalability and repeatability. A truly technologically
    mature organization can deploy software, including machine learning models, on
    demand. The best practices of DevOps for ML models are required here as well:
    continuous deployment, microservices, monitoring, and instrumentation.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的问题是可伸缩性和可重复性。一个真正技术成熟的组织可以按需部署软件，包括机器学习模型。在这里，机器学习模型的 DevOps 最佳实践同样重要：持续部署、微服务、监控和仪表化。
- en: One easy way to inject more of this technological maturity into your organization
    is to apply the same logic as you do to choosing cloud computing over a physical
    data center. Rent the expertise of others and take advantage of economies of scale.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 将更多这种技术成熟性注入到您的组织中的一个简单方法是，应用与选择云计算而不是物理数据中心相同的逻辑。租用他人的专业知识并利用规模经济。
- en: Sklearn Flask with Kubernetes and Docker
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sklearn Flask 与 Kubernetes 和 Docker
- en: Let’s walk through a real-world deployment of a sklearn-based machine learning
    model using Docker and Kubernetes.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过 Docker 和 Kubernetes 实现基于 sklearn 的机器学习模型的真实部署。
- en: 'Here is a Dockerfile. Note, that this serves out a Flask application. The Flask
    application will host the sklearn application. Note that you might want to install
    Hadolint, which allows you to lint a Dockerfile: [*https://github.com/hadolint/hadolint*](https://github.com/hadolint/hadolint).'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 Dockerfile。注意，它提供了一个 Flask 应用程序。Flask 应用程序将托管 sklearn 应用程序。请注意，您可能希望安装
    Hadolint，这允许您对 Dockerfile 进行代码检查：[*https://github.com/hadolint/hadolint*](https://github.com/hadolint/hadolint)。
- en: '[PRE26]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This is the `Makefile` and it serves as a central point of the application
    runtime:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `Makefile`，它作为应用程序运行时的中心点：
- en: '[PRE27]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This is the *requirements.txt* file:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 *requirements.txt* 文件：
- en: '[PRE28]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This is the *app.py* file:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 *app.py* 文件：
- en: '[PRE29]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This is the *run_docker.sh* file:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 *run_docker.sh* 文件：
- en: '[PRE30]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This is the *run_kubernetes.sh* file:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 *run_kubernetes.sh* 文件：
- en: '[PRE31]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Sklearn Flask with Kubernetes and Docker
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sklearn Flask 与 Kubernetes 和 Docker
- en: You may be asking yourself how the model got created and then “pickled” out.
    You can see the [whole notebook here](https://oreil.ly/_pHz-).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会问自己模型是如何创建然后“泡菜”出来的。您可以在此处查看 [整个笔记本](https://oreil.ly/_pHz-)。
- en: 'First, import some libraries for machine learning:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导入一些机器学习的库：
- en: '[PRE33]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '`**In[0]:**`'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE34]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '`**In[0]:**`'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE35]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '`**Out[0]:**`'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[0]:**`'
- en: '|  | `CRIM` | `ZN` | `INDUS` | `CHAS` | `NOX` | `RM` | `AGE` |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '|  | `CRIM` | `ZN` | `INDUS` | `CHAS` | `NOX` | `RM` | `AGE` |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| `0` | `0.00632` | `18.0` | `2.31` | `0` | `0.538` | `6.575` | `65.2` |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| `0` | `0.00632` | `18.0` | `2.31` | `0` | `0.538` | `6.575` | `65.2` |'
- en: '| `1` | `0.02731` | `0.0` | `7.07` | `0` | `0.469` | `6.421` | `78.9` |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| `1` | `0.02731` | `0.0` | `7.07` | `0` | `0.469` | `6.421` | `78.9` |'
- en: '| `2` | `0.02729` | `0.0` | `7.07` | `0` | `0.469` | `7.185` | `61.1` |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| `2` | `0.02729` | `0.0` | `7.07` | `0` | `0.469` | `7.185` | `61.1` |'
- en: '| `3` | `0.03237` | `0.0` | `2.18` | `0` | `0.458` | `6.998` | `45.8` |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| `3` | `0.03237` | `0.0` | `2.18` | `0` | `0.458` | `6.998` | `45.8` |'
- en: '| `4` | `0.06905` | `0.0` | `2.18` | `0` | `0.458` | `7.147` | `54.2` |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| `4` | `0.06905` | `0.0` | `2.18` | `0` | `0.458` | `7.147` | `54.2` |'
- en: '|  | `DIS` | `RAD` | `TAX` | `PTRATIO` | `B` | `LSTAT` | `MEDV` |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '|  | `DIS` | `RAD` | `TAX` | `PTRATIO` | `B` | `LSTAT` | `MEDV` |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| `0` | `4.0900` | `1` | `296.0` | `15.3` | `396.90` | `4.98` | `24.0` |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| `0` | `4.0900` | `1` | `296.0` | `15.3` | `396.90` | `4.98` | `24.0` |'
- en: '| `1` | `4.9671` | `2` | `242.0` | `17.8` | `396.90` | `9.14` | `21.6` |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| `1` | `4.9671` | `2` | `242.0` | `17.8` | `396.90` | `9.14` | `21.6` |'
- en: '| `2` | `4.9671` | `2` | `242.0` | `17.8` | `392.83` | `4.03` | `34.7` |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| `2` | `4.9671` | `2` | `242.0` | `17.8` | `392.83` | `4.03` | `34.7` |'
- en: '| `3` | `6.0622` | `3` | `222.0` | `18.7` | `394.63` | `2.94` | `33.4` |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| `3` | `6.0622` | `3` | `222.0` | `18.7` | `394.63` | `2.94` | `33.4` |'
- en: '| `4` | `6.0622` | `3` | `222.0` | `18.7` | `396.90` | `5.33` | `36.2` |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| `4` | `6.0622` | `3` | `222.0` | `18.7` | `396.90` | `5.33` | `36.2` |'
- en: EDA
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EDA
- en: 'These are the features of the model:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是模型的特征：
- en: CHAS
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 房价中位数
- en: Charles River dummy variable (1 if tract bounds river; 0 otherwise)
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 查尔斯河虚拟变量（1表示地段与河流接壤；0表示否）
- en: RM
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: RM
- en: Average number of rooms per dwelling
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 每个住宅的平均房间数
- en: TAX
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: TAX
- en: Full-value property tax rate per $10,000
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 完整价值的房产税率每$10,000
- en: PTRATIO
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: PTRATIO
- en: Pupil-teacher ratio by town
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 每个住宅的平均房间数
- en: Bk
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: Bk
- en: The proportion of black people by town
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 镇上的师生比
- en: LSTAT
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: LSTAT
- en: '`%` lower status of the population'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`%` 人口低地位'
- en: MEDV
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: MEDV
- en: Median value of owner-occupied homes in $1000s
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 住户的房屋中位数价格（以千美元为单位）
- en: '`**In[0]:**`'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE36]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '`**Out[0]:**`'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[0]:**`'
- en: '|  | `CHAS` | `RM` | `TAX` | `PTRATIO` | `B` | `LSTAT` | `MEDV` |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '|  | `CHAS` | `RM` | `TAX` | `PTRATIO` | `B` | `LSTAT` | `MEDV` |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| `0` | `0` | `6.575` | `296.0` | `15.3` | `396.90` | `4.98` | `24.0` |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| `0` | `0` | `6.575` | `296.0` | `15.3` | `396.90` | `4.98` | `24.0` |'
- en: '| `1` | `0` | `6.421` | `242.0` | `17.8` | `396.90` | `9.14` | `21.6` |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| `1` | `0` | `6.421` | `242.0` | `17.8` | `396.90` | `9.14` | `21.6` |'
- en: '| `2` | `0` | `7.185` | `242.0` | `17.8` | `392.83` | `4.03` | `34.7` |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| `2` | `0` | `7.185` | `242.0` | `17.8` | `392.83` | `4.03` | `34.7` |'
- en: '| `3` | `0` | `6.998` | `222.0` | `18.7` | `394.63` | `2.94` | `33.4` |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| `3` | `0` | `6.998` | `222.0` | `18.7` | `394.63` | `2.94` | `33.4` |'
- en: '| `4` | `0` | `7.147` | `222.0` | `18.7` | `396.90` | `5.33` | `36.2` |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| `4` | `0` | `7.147` | `222.0` | `18.7` | `396.90` | `5.33` | `36.2` |'
- en: Modeling
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 建模
- en: 'This is where the modeling occurs in the notebook. One useful strategy is to
    always create four main sections of a notebook:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 这是笔记本中建模的地方。一个有用的策略是始终创建四个主要部分的笔记本：
- en: Ingestion
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摄取
- en: EDA
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EDA
- en: Modeling
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建模
- en: Conclusion
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结论
- en: In this modeling section, the data is extracted from the DataFrame and passed
    into the sklearn `train_test_split` module which does the heavy lifting of splitting
    the data into training and validation data.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个建模部分，数据从DataFrame中提取并传递到sklearn的`train_test_split`模块中，该模块用于将数据拆分为训练和验证数据。
- en: Split Data
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 拆分数据
- en: '`**In[0]:**`'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE37]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '`**In[0]:**`'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE38]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '`**Out[0]:**`'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[0]:**`'
- en: '[PRE39]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Tune Scaled GBM
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整缩放的GBM
- en: This model uses several advanced techniques that you can reference in many successful
    Kaggle projects. These techniques include GridSearch which can help find the optimal
    hyperparameters. Note, too, that scaling of the data is peformed. Most machine
    learning algorithms expect some type of scaling to create accurate predictions.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模型使用了几种在许多成功的Kaggle项目中可以参考的高级技术。这些技术包括GridSearch，可以帮助找到最佳的超参数。注意，数据的缩放也是必要的，大多数机器学习算法都期望进行某种类型的缩放以生成准确的预测。
- en: '`**In[0]:**`'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE40]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '`**Out[0]:**`'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[0]:**`'
- en: '[PRE41]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Fit Model
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拟合模型
- en: This model is fit using the GradientBoostingRegressor. The final step after
    training the model is to fit the model and check for error using the data that
    was set aside. This data is scaled and passed into the model, and the accuracy
    is evaluated using the metric “Mean Squared Error.”
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型使用GradientBoostingRegressor进行拟合。培训模型后的最后一步是拟合模型并使用设置的数据检查错误。这些数据被缩放并传递到模型中，使用“均方误差”指标评估准确性。
- en: '`**In[0]:**`'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE42]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '`**Out[0]:**`'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[0]:**`'
- en: '[PRE43]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Evaluate
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估
- en: One of the trickier aspects to machine learning is evaluating the model. This
    example shows how you can add predictions and the original home price to the same
    DataFrame. That DataFrame can be used to substract the differences.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习中较为棘手的一个方面是模型评估。这个示例展示了如何将预测和原始房屋价格添加到同一个DataFrame中。该DataFrame可用于计算差异。
- en: '`**In[0]:**`'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE44]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The differences are shown here.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 差异显示在这里。
- en: '`**Out[0]:**`'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[0]:**`'
- en: '|  | `Org house price` | `Pred house price` | `Difference` |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '|  | `原房价` | `预测房价` | `差异` |'
- en: '| --- | --- | --- | --- |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `0` | `21.7` | `21` | `0.7` |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| `0` | `21.7` | `21` | `0.7` |'
- en: '| `1` | `18.5` | `19` | `-0.5` |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| `1` | `18.5` | `19` | `-0.5` |'
- en: '| `2` | `22.2` | `20` | `2.2` |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| `2` | `22.2` | `20` | `2.2` |'
- en: '| `3` | `20.4` | `19` | `1.4` |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| `3` | `20.4` | `19` | `1.4` |'
- en: '| `4` | `8.8` | `9` | `-0.2` |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| `4` | `8.8` | `9` | `-0.2` |'
- en: Using the describe method on Pandas is a great way to see the distribution of
    the data.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Pandas 的 describe 方法是查看数据分布的好方法。
- en: '`**In[0]:**`'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE45]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '`**Out[0]:**`'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[0]:**`'
- en: '|  | `Org house price` | `Pred house price` | `Difference` |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '|  | `原始房价` | `预测房价` | `差异` |'
- en: '| --- | --- | --- | --- |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `count` | `102.000000` | `102.000000` | `102.000000` |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| `count` | `102.000000` | `102.000000` | `102.000000` |'
- en: '| `mean` | `22.573529` | `22.117647` | `0.455882` |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| `mean` | `22.573529` | `22.117647` | `0.455882` |'
- en: '| `std` | `9.033622` | `8.758921` | `5.154438` |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| `std` | `9.033622` | `8.758921` | `5.154438` |'
- en: '| `min` | `6.300000` | `8.000000` | `-34.100000` |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| `min` | `6.300000` | `8.000000` | `-34.100000` |'
- en: '| `25%` | `17.350000` | `17.000000` | `-0.800000` |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| `25%` | `17.350000` | `17.000000` | `-0.800000` |'
- en: '| `50%` | `21.800000` | `20.500000` | `0.600000` |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| `50%` | `21.800000` | `20.500000` | `0.600000` |'
- en: '| `75%` | `24.800000` | `25.000000` | `2.200000` |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| `75%` | `24.800000` | `25.000000` | `2.200000` |'
- en: '| `max` | `50.000000` | `56.000000` | `22.000000` |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| `max` | `50.000000` | `56.000000` | `22.000000` |'
- en: adhoc_predict
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: adhoc_predict
- en: Let’s test this prediction model to see what the workflow would be after unpickling.
    When developing a web API for a machine learning model, it can be helpful to test
    out the sections of code that the API will perform in the notebook itself. It
    is much easier to debug and create functions inside the actual notebook than struggle
    to create the correct functions inside a web application.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试这个预测模型，看看在反序列化后的工作流程会是什么样子。当为机器学习模型开发 Web API 时，在笔记本中测试 API 将会很有帮助。在实际笔记本中调试和创建函数比在
    Web 应用中努力创建正确的函数要容易得多。
- en: '`**In[0]:**`'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE46]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '`**Out[0]:**`'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[0]:**`'
- en: '|  | `CHAS` | `RM` | `TAX` | `PTRATIO` | `B` | `LSTAT` | `MEDV` |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '|  | `CHAS` | `RM` | `TAX` | `PTRATIO` | `B` | `LSTAT` | `MEDV` |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| `0` | `0` | `6.575` | `296.0` | `15.3` | `396.9` | `4.98` | `24.0` |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: '| `0` | `0` | `6.575` | `296.0` | `15.3` | `396.9` | `4.98` | `24.0` |'
- en: '`**In[0]:**`'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE47]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '`**Out[0]:**`'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[0]:**`'
- en: '|  | `CHAS` | `RM` | `TAX` | `PTRATIO` | `B` | `LSTAT` |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
  zh: '|  | `CHAS` | `RM` | `TAX` | `PTRATIO` | `B` | `LSTAT` |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: '| `0` | `0` | `6.575` | `296.0` | `15.3` | `396.9` | `4.98` |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| `0` | `0` | `6.575` | `296.0` | `15.3` | `396.9` | `4.98` |'
- en: JSON Workflow
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSON 工作流
- en: This is a section of the notebook that is useful for debugging Flask apps. As
    mentioned earlier, it is much more straightforward to develop the API code inside
    the machine learning project, make sure it works, then transport that code to
    a script. The alternative is trying to get the exact code syntax in a software
    project that doesn’t have the same interactive tools that Jupyter provides.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 这是笔记本中对调试 Flask 应用程序有用的一节。正如前面提到的，开发 API 代码在机器学习项目中更加直接，确保其有效，然后将该代码传输到脚本中。另一种方法是尝试在没有
    Jupyter 提供的相同交互式工具的软件项目中获取准确的代码语法。
- en: '`**In[0]:**`'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE48]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '`**Out[0]:**`'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[0]:**`'
- en: '[PRE49]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Scale Input
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尺度输入
- en: The data has to be scaled back to be predicted. This workflow needed to be flushed
    out in the notebook instead of struggling to get it to work in a web application
    that will be much tougher to debug. The section below shows the code that solves
    that portion of the machine learning prediction pipeline. It can then be used
    to create a function in a Flask application.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 需要对数据进行缩放才能进行预测。这个工作流需要在笔记本中详细说明，而不是在网页应用中苦苦挣扎，这样调试将会更加困难。下面的部分展示了解决机器学习预测流程中这一部分的代码。然后可以将其用于在
    Flask 应用程序中创建函数。
- en: '`**In[0]:**`'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE50]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '`**Out[0]:**`'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[0]:**`'
- en: '[PRE51]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '`**In[0]:**`'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE52]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '`**Out[0]:**`'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[0]:**`'
- en: '[PRE53]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Pickling sklearn
  id: totrans-364
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Pickling sklearn
- en: Next, let’s export this model.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来导出这个模型。
- en: '`**In[0]:**`'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE54]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '`**In[0]:**`'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE55]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '`**Out[0]:**`'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[0]:**`'
- en: '[PRE56]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '`**In[0]:**`'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE57]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '`**Out[0]:**`'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[0]:**`'
- en: '[PRE58]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Unpickle and predict
  id: totrans-376
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解析并预测
- en: '`**In[0]:**`'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE59]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: adhoc_predict from Pickle
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 Pickle 中 adhoc_predict
- en: '`**In[0]:**`'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE60]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '`**Out[0]:**`'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[0]:**`'
- en: '|  | `CHAS` | `RM` | `TAX` | `PTRATIO` | `B` | `LSTAT` | `MEDV` |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '|  | `CHAS` | `RM` | `TAX` | `PTRATIO` | `B` | `LSTAT` | `MEDV` |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| `0` | `0` | `6.575` | `296.0` | `15.3` | `396.90` | `4.98` | `24.0` |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| `0` | `0` | `6.575` | `296.0` | `15.3` | `396.90` | `4.98` | `24.0` |'
- en: '| `1` | `0` | `6.421` | `242.0` | `17.8` | `396.90` | `9.14` | `21.6` |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| `1` | `0` | `6.421` | `242.0` | `17.8` | `396.90` | `9.14` | `21.6` |'
- en: '| `2` | `0` | `7.185` | `242.0` | `17.8` | `392.83` | `4.03` | `34.7` |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| `2` | `0` | `7.185` | `242.0` | `17.8` | `392.83` | `4.03` | `34.7` |'
- en: '| `3` | `0` | `6.998` | `222.0` | `18.7` | `394.63` | `2.94` | `33.4` |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: '| `3` | `0` | `6.998` | `222.0` | `18.7` | `394.63` | `2.94` | `33.4` |'
- en: '| `4` | `0` | `7.147` | `222.0` | `18.7` | `396.90` | `5.33` | `36.2` |'
  id: totrans-389
  prefs: []
  type: TYPE_TB
  zh: '| `4` | `0` | `7.147` | `222.0` | `18.7` | `396.90` | `5.33` | `36.2` |'
- en: '`**In[0]:**`'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE61]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '`**Out[0]:**`'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[0]:**`'
- en: '|  | `CHAS` | `RM` | `TAX` | `PTRATIO` | `B` | `LSTAT` |'
  id: totrans-393
  prefs: []
  type: TYPE_TB
  zh: '|  | `CHAS` | `RM` | `TAX` | `PTRATIO` | `B` | `LSTAT` |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-394
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: '| `0` | `0` | `6.575` | `296.0` | `15.3` | `396.9` | `4.98` |'
  id: totrans-395
  prefs: []
  type: TYPE_TB
  zh: '| `0` | `0` | `6.575` | `296.0` | `15.3` | `396.9` | `4.98` |'
- en: Scale Input
  id: totrans-396
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缩放输入
- en: '`**In[0]:**`'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE62]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '`**Out[0]:**`'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[0]:**`'
- en: '[PRE63]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '`**In[0]:**`'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '`**In[0]:**`'
- en: '[PRE64]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '`**Out[0]:**`'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Out[0]:**`'
- en: '[PRE65]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Finally, the pickled model is loaded back in and tested against a real dataset.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将被 Pickle 的模型加载回来，并针对真实数据集进行测试。
- en: Exercises
  id: totrans-406
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: What are some key differences between scikit-learn and PyTorch?
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: scikit-learn 和 PyTorch 之间的一些关键区别是什么？
- en: What is AutoML and why would you use it?
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 AutoML 以及为什么要使用它？
- en: Change the scikit-learn model to use height to predict weight.
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改 scikit-learn 模型以使用身高来预测体重。
- en: Run the PyTorch example in Google Colab notebooks and toggle between CPU and
    GPU runtimes. Explain the performance difference if there is one.
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Google Colab 笔记本中运行 PyTorch 示例，并在 CPU 和 GPU 运行时之间切换。如果有性能差异，请解释其原因。
- en: What is EDA and why is it so important in a data science project?
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 EDA 以及在数据科学项目中为什么如此重要？
- en: Case Study Question
  id: totrans-412
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究问题
- en: Go to the Kaggle website, take a popular notebook in Python, and convert it
    to a containerized Flask application that serves out predictions using the example
    shown in this chapter as a guide. Now deploy this to a cloud environment via a
    hosted Kubernetes service such as Amazon EKS.
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前往 Kaggle 网站，选择一个流行的 Python 笔记本，并将其转换为容器化的 Flask 应用程序，该应用程序使用本章中所示的示例作为指南提供预测。现在通过托管的
    Kubernetes 服务（例如 Amazon EKS）将其部署到云环境中。
- en: Learning Assessments
  id: totrans-414
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习评估
- en: Explain the different types of machine learning frameworks and ecosystems.
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释不同类型的机器学习框架和生态系统。
- en: Run and debug a preexisting machine learning project in scikit-learn and PyTorch.
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行和调试现有的 scikit-learn 和 PyTorch 机器学习项目。
- en: Containerize a Flask scikit-learn model.
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Flask scikit-learn 模型进行容器化。
- en: Understand the production machine learning maturity model.
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解生产机器学习成熟度模型。
