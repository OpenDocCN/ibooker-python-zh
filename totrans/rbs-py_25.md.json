["```py\nDoes my system function as expected?\nTests to write (automated - run daily):\n    Acceptance tests: Adding calories to the daily count\n    Acceptance tests: Resetting calories on daily boundaries\n    Acceptance tests: Aggregating calories over a time period\n    Unit tests: Corner Cases\n    Unit tests: Happy Path\n\nWill this application be usable by a large user base?\nTests to write (automated - run weekly):\n    Interoperability tests: Phones (Apple, Android, etc.)\n    Interoperability tests: Tablets\n    Interoperability tests: Smart Fridge\n\nIs it hard to use maliciously?\nTests to write: (ongoing audit by security engineer)\n    Security tests: Device Interactions\n    Security tests: Network Interactions\n    Security tests: Backend Vulnerability Scanning (automated)\n\n... etc. ...\n```", "```py\ndef test_calorie_calculation():\n\n    # arrange (set up everything the test needs to run)\n    add_ingredient_to_database(\"Ground Beef\", calories_per_pound=1500)\n    add_ingredient_to_database(\"Bacon\", calories_per_pound=2400)\n    add_ingredient_to_database(\"Cheese\", calories_per_pound=1800)\n    # ... snip 13 more ingredients\n\n    set_ingredients(\"Bacon Cheeseburger w/ Fries\",\n                    ingredients=[\"Ground Beef\", \"Bacon\" ... ])\n\n    # act (the thing getting tested)\n    calories = get_calories(\"Bacon Cheeseburger w/ Fries\")\n\n    # assert (verify some property about the program)\n    assert calories == 1200\n\n    #annihilate (cleanup any resources that were allocated)\n    cleanup_database()\n```", "```py\ndef test_calorie_calculation_bacon_cheeseburger():\n    add_base_ingredients_to_database()\n    add_ingredient_to_database(\"Bacon\", calories_per_pound=2400)\n\n    st /etup_bacon_cheeseburger(bacon=\"Bacon\")\n    calories = get_calories(\"Bacon Cheeseburger w/ Fries\")\n\n    assert calories == 1200\n\n    cleanup_database()\n\ndef test_calorie_calculation_bacon_cheeseburger_with_substitution():\n    add_base_ingredients_to_database()\n    add_ingredient_to_database(\"Turkey Bacon\", calories_per_pound=1700)\n\n    setup_bacon_cheeseburger(bacon=\"Turkey Bacon\")\n    calories = get_calories(\"Bacon Cheeseburger w/ Fries\")\n\n    assert calories == 1100\n\n    cleanup_database()\n```", "```py\nimport pytest\n\n@pytest.fixture\ndef db_creation():\n    # ... snip  set up local sqlite database\n    return database\n\n@pytest.fixture\ndef test_database(db_creation):\n    # ... snip adding all ingredients and meals\n    return database\n\ndef test_calorie_calculation_bacon_cheeseburger(test_database):\n    test_database.add_ingredient(\"Bacon\", calories_per_pound=2400)\n    setup_bacon_cheeseburger(bacon=\"Bacon\")\n\n    calories = get_calories(\"Bacon Cheeseburger w/ Fries\")\n\n    assert calories == 1200\n\n    test_database.cleanup()()\n```", "```py\nclass DatabaseHandler:\n\n    def __init__(self):\n        # ... snip complex setup\n\n    def add_ingredient(self, ingredient):\n        # ... snip complex queries\n\n    def get_calories_for_ingredient(self, ingredient):\n        # ... snip complex queries\n```", "```py\nclass MockDatabaseHandler\n    def __init__(self):\n        self.data = {\n            \"Ground Beef\": 1500,\n            \"Bacon\": 2400,\n            # ... snip ...\n        }\n\n    def add_ingredient(self, ingredient):\n        name, calories = ingredient\n        self.data[name] = calories\n\n    def get_calories_for_ingredient(self, ingredient):\n        return self.data[ingredient]\n```", "```py\ndef test_calorie_calculation_bacon_cheeseburger():\n    add_base_ingredients_to_database()\n    add_ingredient_to_database(\"Bacon\", calories_per_pound=2400)\n    setup_bacon_cheeseburger(bacon=\"Bacon\")\n\n    calories = get_calories(\"Bacon Cheeseburger w/ Fries\")\n\n    assert calories == 1200\n\n    cleanup_database()\n```", "```py\ndef test_calorie_calculation_bacon_cheeseburger():\n    with construct_test_database() as db:\n        db.add_ingredient(\"Bacon\", calories_per_pound=2400)\n        setup_bacon_cheeseburger(bacon=\"Bacon\")\n\n        calories = get_calories(\"Bacon Cheeseburger w/ Fries\")\n\n        assert calories == 1200\n```", "```py\nimport pytest\n\n@pytest.fixture\ndef db_creation():\n    # ... snip  set up local sqlite database\n    return database\n\n@pytest.fixture\ndef test_database(db_creation):\n    # ... snip adding all ingredients and meals\n    try:\n        yield database\n    finally:\n        database.cleanup()\n\ndef test_calorie_calculation_bacon_cheeseburger(test_database):\n    test_database.add_ingredient(\"Bacon\", calories_per_pound=2400)\n    setup_bacon_cheeseburger(bacon=\"Bacon\")\n\n    calories = get_calories(\"Bacon Cheeseburger w/ Fries\")\n\n    assert calories == 1200\n```", "```py\n@pytest.mark.parametrize(\n    \"extra_ingredients,dish_name,expected_calories\",\n    [\n        ([\"Bacon\", 2400], \"Bacon Cheeseburger\", 900),\n        ([],  \"Cobb Salad\", 1000),\n        ([],  \"Buffalo Wings\", 800),\n        ([],  \"Garlicky Brussels Sprouts\", 200),\n        ([],  \"Mashed Potatoes\", 400)\n    ]\n)\ndef test_calorie_calculation_bacon_cheeseburger(extra_ingredients,\n                                                dish_name,\n                                                expected_calories,\n                                                test_database):\n    for ingredient in extra_ingredients:\n        test_database.add_ingredient(ingredient)\n\n    # assume this function can set up any dish\n    # alternatively, dish ingredients could be passed in as a test parameter\n    setup_dish_ingredients(dish_name)\n\n    calories = get_calories(dish_name)\n\n    assert calories == expected_calories\n```", "```py\ndef test_calorie_calculation_bacon_cheeseburger(test_database):\n    test_database.add_ingredient(\"Bacon\", calories_per_pound=2400)\n    setup_bacon_cheeseburger(bacon=\"Bacon\")\n\n    calories = get_calories(\"Bacon Cheeseburger w/ Fries\")\n\n    assert calories == 1200, \"Incorrect calories for Bacon Cheeseburger w/ Fries\"\n```", "```py\nE       AssertionError: Incorrect calories for Bacon Cheeseburger w/ Fries\nE       assert 1100 == 1200\n```", "```py\nfrom hamcrest import assert_that, matches_regexp, is_, empty, equal_to\ndef test_all_menu_items_are_alphanumeric():\n    menu = create_menu()\n    for item in menu:\n        assert_that(item, matches_regexp(r'[a-zA-Z0-9 ]'))\n\ndef test_getting_calories():\n    dish = \"Bacon Cheeseburger w/ Fries\"\n    calories = get_calories(dish)\n    assert_that(calories, is_(equal_to(1200)))\n\ndef test_no_restaurant_found_in_non_matching_areas():\n    city = \"Huntsville, AL\"\n    restaurants = find_owned_restaurants_in(city)\n    assert_that(restaurants, is_(empty()))\n```", "```py\nfrom hamcrest.core.base_matcher import BaseMatcher\nfrom hamcrest.core.helpers.hasmethod import hasmethod\n\ndef is_vegan(ingredient: str) -> bool:\n    return ingredient not in [\"Beef Burger\"]\n\nclass IsVegan(BaseMatcher):\n\n    def _matches(self, dish):\n        if not hasmethod(dish, \"ingredients\"):\n            return False\n        return all(is_vegan(ingredient) for ingredient in dish.ingredients())\n\n    def describe_to(self, description):\n        description.append_text(\"Expected dish to be vegan\")\n\n    def describe_mismatch(self, dish, description):\n        message = f\"the following ingredients are not vegan: \"\n        message += \", \".join(ing for ing in dish.ingredients()\n                             if not is_vegan(ing))\n        description.append_text(message)\n\ndef vegan():\n    return IsVegan()\n\nfrom hamcrest import assert_that, is_\ndef test_vegan_substitution():\n    dish = create_dish(\"Hamburger and Fries\")\n    dish.make_vegan()\n    assert_that(dish, is_(vegan()))\n```", "```py\n    def test_vegan_substitution():\n        dish = create_dish(\"Hamburger and Fries\")\n        dish.make_vegan()\n>       assert_that(dish, is_(vegan()))\nE       AssertionError:\nE       Expected: Expected dish to be vegan\nE            but: the following ingredients are not vegan: Beef Burger\n```"]