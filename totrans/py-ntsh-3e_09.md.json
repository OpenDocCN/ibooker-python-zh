["```py\n>>> x = 'a  bB'  *`# two spaces between a and bB`*\n>>> x.split()    *`# or x.split(`**`None`**`)`*\n```", "```py\n['a', 'bB']\n```", "```py\n>>> x.split(' ')\n```", "```py\n['a', '', 'bB']\n```", "```py\ntbl = {ord('a'):`None`, ord('n'):'ze'}\nprint('banana'.translate(tbl))  *`# prints:`* *`'bzeze'`*\n```", "```py\n{*`value``-``part`*[!*`conversion``-``part`*][:*`format``-``specifier`*]}\n```", "```py\n>>> name = 'Dawn'\n>>> print(f'{name!r} is {len(name)} characters long')\n```", "```py\n'Dawn' is 4 characters long\n```", "```py\n>>> `for` width `in` 8, 11:\n...     `for` precision `in` 2, 3, 4, 5:\n...         print(f'{2.7182818284:{width}.{precision}}')\n...\n```", "```py\n 2.7\n 2.72\n 2.718\n 2.7183\n 2.7\n 2.72\n 2.718\n 2.7183\n```", "```py\n>>> a = '*-'\n>>> s = 12\n>>> f'{a*s=}'\n```", "```py\n\"a*s='*-*-*-*-*-*-*-*-*-*-*-*-'\"\n```", "```py\n>>> f'{a*s = :30}'\n```", "```py\n'a*s = *-*-*-*-*-*-*-*-*-*-*-*-      '\n```", "```py\n>>> n = 10\n>>> s = ('zero', 'one', 'two', 'three')\n>>> i = 2\n>>> f'start {\"-\"*n} : {s[i]} end'\n```", "```py\n'start ---------- : two end'\n```", "```py\n>>> name = 'Dawn'\n>>> print('{name} is {n} characters long'\n... .format(name=name, n=len(name)))\n```", "```py\n'Dawn' is 4 characters long\n```", "```py\n>>> \"This is a {1}, {0}, type of {type}\".format(\"green\", \"large\", \n...                                             type=\"vase\")\n```", "```py\n'This is a large, green, type of vase'\n```", "```py\n>>> 'First: {} second: {}'.format(1, 'two')\n```", "```py\n'First: 1 second: two'\n```", "```py\n>>> 'Second: {1}, first: {0}'.format(42, 'two')\n```", "```py\n'Second: two, first: 42'\n```", "```py\n>>> 'a: {a}, 1st: {}, 2nd: {}, a again: {a}'.format(1, 'two', a=3)\n```", "```py\n'a: 3, 1st: 1, 2nd: two, a again: 3'\n```", "```py\n>>> 'a: {a} first:{0} second: {1} first: {0}'.format(1, 'two', a=3)\n```", "```py\n'a: 3 first:1 second: two first: 1'\n```", "```py\n>>> 'p0[1]: {[1]} p1[0]: {[0]}'.format(('zero', 'one'),\n...                                    ('two', 'three'))\n```", "```py\n'p0[1]: one p1[0]: two'\n```", "```py\n>>> 'p1[0]: {1[0]} p0[1]: {0[1]}'.format(('zero', 'one'),\n...                                      ('two', 'three'))\n```", "```py\n'p1[0]: two p0[1]: one'\n```", "```py\n>>> '{} {} {a[2]}'.format(1, 2, a=(5, 4, 3))\n```", "```py\n'1 2 3'\n```", "```py\n>>> 'First r: {.real} Second i: {a.imag}'.format(1+2j, a=3+4j)\n```", "```py\n'First r: 1.0 Second i: 4.0'\n```", "```py\n>>> \"String: {0!s} Repr: {0!r} ASCII: {0!a}\".format(\"banana ðŸ˜€\")\n```", "```py\n\"String: banana ðŸ˜€ Repr: 'banana ðŸ˜€' ASCII: 'banana\\\\U0001f600'\"\n```", "```py\n[[*`fill`*]*`align`*][*`sign`*][z][#][0][*`width`*][*`grouping_option`*][.*`precision`*][*`type`*]\n```", "```py\n>>> s = 'a string'\n>>> f'{s:>12s}'\n```", "```py\n'    a string'\n```", "```py\n>>> f'{s:>>12s}'\n```", "```py\n'>>>>a string'\n```", "```py\n>>> f'{s:><12s}'\n```", "```py\n'a string>>>>'\n```", "```py\n>>> n = -1234\n>>> f'{n:12}'    *`# 12 spaces before the number`*\n```", "```py\n'       -1234'\n```", "```py\n>>> f'{-n:+12}'  *`# - to flip n's sign, + as sign indicator`* \n```", "```py\n'       +1234'\n```", "```py\n>>> f'{n:+=12}'  *`# + as fill character between sign and number`*\n```", "```py\n'-+++++++1234'\n```", "```py\n*`# + as sign indicator, spaces fill between sign and number`*\n>>> f'{n:=+12}'\n```", "```py\n'-       1234'\n```", "```py\n*`# * as fill between sign and number, + as sign indicator`*\n>>> f'{n:*=+12}'\n```", "```py\n'-*******1234'\n```", "```py\n>>> x = -0.001\n>>> f'{x:.1f}'\n```", "```py\n'-0.0'\n```", "```py\n>>> f'{x:z.1f}'\n```", "```py\n'0.0'\n```", "```py\n>>> f'{x:+z.1f}'\n```", "```py\n'+0.0'\n```", "```py\n>>> f\"{-3.1314:12.2f}\"\n```", "```py\n'       -3.13'\n```", "```py\n>>> f\"{-3.1314:012.2f}\"\n```", "```py\n'-00000003.13'\n```", "```py\n>>> s = 'a string'\n>>> f'{s:^12s}'\n```", "```py\n'  a string  '\n```", "```py\n>>> f'{s:.>12s}'\n```", "```py\n'....a string'\n```", "```py\n>>> '{:.>{}s}'.format(s, 20)\n```", "```py\n'............a string'\n```", "```py\n>>> f'{12345678.9:,}'\n```", "```py\n'12,345,678.9'\n```", "```py\n>>> x = 1.12345\n>>> f'as f: {x:.4f}'  *`# rounds to 4 digits after decimal point`*\n```", "```py\n'as f: 1.1235'\n```", "```py\n>>> f'as g: {x:.4g}'  *`# rounds to 4 significant digits`*\n```", "```py\n'as g: 1.123'\n```", "```py\n>>> f'as s: {\"1234567890\":.6s}'  *`# string truncated to 6 characters`*\n```", "```py\n'as s: 123456'\n```", "```py\n>>> `for` num `in` [3.1415, -42, 1024.0]:\n...     f'{num:>+9,.2f}' \n...\n```", "```py\n'    +3.14'\n'   -42.00'\n'+1,024.00'\n```", "```py\n>>> s = 'a string'\n>>> '{0:>{1}s}'.format(s, len(s)+4)\n```", "```py\n'    a string'\n```", "```py\n>>> '{0:_^{1}s}'.format(s, len(s)+4)\n```", "```py\n'__a string__'\n```", "```py\n`def` columnar_strings(str_seq, widths):\n    `for` cols `in` str_seq:\n        row = [f'{c:{w}.{w}s}'\n               `for` c, w `in` zip(cols, widths)]\n        print(' '.join(row))\n```", "```py\nc = [\n        'four score and'.split(),\n        'seven years ago'.split(),\n        'our forefathers brought'.split(),\n        'forth on this'.split(),\n    ]\n\ncolumnar_strings(c, (8, 8, 8))\n```", "```py\nfour     score    and\nseven    years    ago\nour      forefath brought\nforth    on       this\n```", "```py\n>>> object().__format__('')\n```", "```py\n'<object object at 0x110045070>'\n```", "```py\n>>> import math\n>>> math.pi.__format__('18.6')\n```", "```py\n'           3.14159'\n```", "```py\n>>> class S:\n...     def __init__(self, value):\n...         self.value = value\n...     `def` __format__(self, fstr):\n...         `match` fstr:\n...             `case` 'U':\n...                 `return` self.value.upper()\n...             `case` 'L':\n...                 `return` self.value.lower()\n...             `case` 'T':\n...                 `return` self.value.title()\n...             `case` _:\n...                 `return` ValueError(f'Unrecognized format code'\n...                                   f' {fstr!r}')\n>>> my_s = S('random string')\n>>> f'{my_s:L}, {my_s:U}, {my_s:T}'\n```", "```py\n'random string, RANDOM STRING, Random String'\n```", "```py\n>>> `import` datetime\n>>> d = datetime.datetime.now()\n>>> d.__format__('%d/%m/%y')\n```", "```py\n'10/04/22'\n```", "```py\n>>> '{:%d/%m/%y}'.format(d)\n```", "```py\n'10/04/22'\n```", "```py\n>>> f'{d:%d/%m/%y}'\n```", "```py\n'10/04/22'\n```", "```py\n*`format`* % *`values`*\n```", "```py\nlogging.info(*`format`*, **`values`*)\n```", "```py\n`import` logging\nlogging.getLogger().setLevel(logging.INFO)\nx = 42\ny = 3.14\nz = 'george'\nlogging.info('result = %d', x)        *`# logs:`* *`result = 42`*\nlogging.info('answers: %d %f', x, y)  *`# logs:`* *`answers: 42 3.140000`*\nlogging.info('hello %s', z)           *`# logs:`* *`hello george`*\n```", "```py\nprint(pprint.pformat(x))\npprint.pprint(x)\n```", "```py\n>>> `import` unicodedata\n>>> unicodedata.name('âš€')\n```", "```py\n'DIE FACE-1'\n```", "```py\n>>> unicodedata.name('â…¥')\n```", "```py\n'ROMAN NUMERAL SIX'\n```", "```py\n>>> int('â…¥')\n```", "```py\nValueError: invalid literal for int() with base 10: 'â…¥'\n```", "```py\n>>> unicodedata.numeric('â…¥')  *`# use unicodedata to get numeric value`*\n```", "```py\n6.0\n```", "```py\n>>> unicodedata.lookup('RECYCLING SYMBOL FOR TYPE-1 PLASTICS')\n```", "```py\n'â™³'\n```"]