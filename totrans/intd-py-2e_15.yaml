- en: Chapter 13\. Calendars and Clocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: “One!” strikes the clock in the belfry tower,
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Which but sixty minutes ago
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Sounded twelve for the midnight hour.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Frederick B. Needham, The Round of the Clock
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I’ve been on a calendar but I have never been on time.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Marilyn Monroe
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Programmers devote a surprising amount of effort to dates and times. Let’s talk
    about some of the problems they encounter and then get to some best practices
    and tricks to make the situation a little less messy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dates can be represented in many ways—too many ways, actually. Even in English
    with the Roman calendar, you’ll see many variants of a simple date:'
  prefs: []
  type: TYPE_NORMAL
- en: July 21 1987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 21 Jul 1987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 21/7/1987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7/21/1987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Among other problems, date representations can be ambiguous. In the previous
    examples, it’s easy to determine that 7 stands for the month and 21 is the day
    of the month, because months don’t go to 21. But how about `1/6/2012`? Is that
    referring to January 6 or June 1?
  prefs: []
  type: TYPE_NORMAL
- en: The month name varies by language within the Roman calendar. Even the year and
    month can have a different definition in other cultures.
  prefs: []
  type: TYPE_NORMAL
- en: Times have their own sources of grief, especially because of time zones and
    daylight savings time. If you look at a time zone map, the zones follow political
    and historic boundaries rather than crisp lines every 15 degrees (360 degrees
    / 24) of longitude. And countries start and end daylight savings times on different
    days of the year. Southern hemisphere countries advance their clocks as their
    northern friends are winding theirs back, and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python’s standard library has many date and time modules, including: `datetime`,
    `time`, `calendar`, `dateutil`, and others. There’s some overlap, and it’s a bit
    confusing.'
  prefs: []
  type: TYPE_NORMAL
- en: Leap Year
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Leap years are a special wrinkle in time. You probably know that every four
    years is a leap year (and the summer Olympics and the American presidential election).
    Did you also know that every 100 years is not a leap year, but that every 400
    years is? Here’s code to test various years for leapiness:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For the curious:'
  prefs: []
  type: TYPE_NORMAL
- en: A year has 365.242196 days (after one spin around the sun, the earth is about
    a quarter-turn on its axis from where it started).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add one day every four years. Now an average year has 365.242196 – 0.25 = 364.992196
    days
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subtract a day every 100 years. Now an average year has 364.992196 + 0.01 =
    365.002196 days
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a day every 400 years. Now an average year has 365.002196 – 0.0025 = 364.999696
    days
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Close enough for now! We will not speak of [leap seconds](https://oreil.ly/aJ32N).
  prefs: []
  type: TYPE_NORMAL
- en: The datetime Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The standard `datetime` module handles (which should not be a surprise) dates
    and times. It defines four main object classes, each with many methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`date` for years, months, and days'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`time` for hours, minutes, seconds, and fractions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`datetime` for dates and times together'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timedelta` for date and/or time intervals'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can make a `date` object by specifying a year, month, and day. Those values
    are then available as attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can print a `date` with its `isoformat()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `iso` refers to ISO 8601, an international standard for representing dates
    and times. It goes from most general (year) to most specific (day). Because of
    this, it also sorts correctly: by year, then month, then day. I usually choose
    this format for date representation in programs, and for filenames that save data
    by date. The next section describes the more complex `strptime()` and `strftime()`
    methods for parsing and formatting dates.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This example uses the `today()` method to generate today’s date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This one makes use of a `timedelta` object to add some time interval to a `date`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The range of `date` is from `date.min` (year=1, month=1, day=1) to `date.max`
    (year=9999, month=12, day=31). As a result, you can’t use it for historic or astronomical
    calculations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `datetime` module’s `time` object is used to represent a time of day:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The arguments go from the largest time unit (hours) to the smallest (microseconds).
    If you don’t provide all the arguments, `time` assumes all the rest are zero.
    By the way, just because you can store and retrieve microseconds doesn’t mean
    you can retrieve time from your computer to the exact microsecond. The accuracy
    of subsecond measurements depends on many factors in the hardware and operating
    system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `datetime` object includes both the date and time of day. You can create
    one directly, such as the one that follows, which is for January 2, 2019, at 3:04
    A.M., plus 5 seconds and 6 microseconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `datetime` object also has an `isoformat()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: That middle `T` separates the date and time parts.
  prefs: []
  type: TYPE_NORMAL
- en: '`datetime` has a `now()` method to return the current date and time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can `combine()` a `date` object and a `time` object into a `datetime`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can yank the `date` and `time` from a `datetime` by using the `date()`
    and `time()` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Using the time Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is confusing that Python has a `datetime` module with a `time` object, and
    a separate `time` module. Furthermore, the `time` module has a function called—wait
    for it—`time()`.
  prefs: []
  type: TYPE_NORMAL
- en: One way to represent an absolute time is to count the number of seconds since
    some starting point. *Unix time* uses the number of seconds since midnight on
    January 1, 1970.^([1](ch13.html#idm45794986403304)) This value is often called
    the *epoch*, and it is often the simplest way to exchange dates and times among
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `time` module’s `time()` function returns the current time as an epoch
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: More than one billion seconds have ticked by since New Year’s, 1970. Where did
    the time go?
  prefs: []
  type: TYPE_NORMAL
- en: 'You can convert an epoch value to a string by using `ctime()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, you’ll see how to produce more attractive formats for dates
    and times.
  prefs: []
  type: TYPE_NORMAL
- en: 'Epoch values are a useful least-common denominator for date and time exchange
    with different systems, such as JavaScript. Sometimes, though, you need actual
    days, hours, and so forth, which `time` provides as `struct_time` objects. `localtime()`
    provides the time in your system’s time zone, and `gmtime()` provides it in UTC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: My `19:55` (Central time zone, Daylight Savings) was `00:55` in the next day
    in UTC (formerly called *Greenwich time* or *Zulu time*). If you omit the argument
    to `localtime()` or `gmtime()`, they assume the current time.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the `tm_...` values in `struct_time` are a bit ambiguous, so take a
    look at [Table 13-1](#table1301) for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Table 13-1\. `struct_time` values
  prefs: []
  type: TYPE_NORMAL
- en: '| Index | Name | Meaning | Values |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | `tm_year` | Year | `0000` to `9999` |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | `tm_mon` | Month | `1` to `12` |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | `tm_mday` | Day of month | `1` to `31` |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | `tm_hour` | Hour | `0` to `23` |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | `tm_min` | Minute | `0` to `59` |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | `tm_sec` | Second | `0` to `61` |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | `tm_wday` | Day of week | `0` (Monday) to `6` (Sunday) |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | `tm_yday` | Day of year | `1` to `366` |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | `tm_isdst` | Daylight savings? | `0` = no, `1` = yes, `-1` = unknown
    |'
  prefs: []
  type: TYPE_TB
- en: 'If you don’t want to type all those `tm_...` names, `struct_time` also acts
    like a named tuple (see [“Named Tuples”](ch10.html#named_tuples)), so you can
    use the indexes from the previous table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`mktime()` goes in the other direction, converting a `struct_time` object to
    epoch seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This doesn’t exactly match our earlier epoch value of `now()` because the `struct_time`
    object preserves time only to the second.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Some advice: wherever possible, *use UTC* instead of time zones. UTC is an
    absolute time, independent of time zones. If you have a server, *set its time
    to UTC*; do not use local time.'
  prefs: []
  type: TYPE_NORMAL
- en: 'More advice: *never use daylight savings time* if you can avoid it. If you
    use daylight savings time, an hour disappears at one time of year (“spring ahead”)
    and occurs twice at another time (“fall back”). For some reason, many organizations
    use local time with daylight savings in their computer systems, but are mystified
    twice every year by that spooky hour.'
  prefs: []
  type: TYPE_NORMAL
- en: Read and Write Dates and Times
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`isoformat()` is not the only way to write dates and times. You already saw
    the `ctime()` function in the `time` module, which you can use to convert epochs
    to strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You can also convert dates and times to strings by using `strftime()`. This
    is provided as a method in the `datetime`, `date`, and `time` objects, and as
    a function in the `time` module. `strftime()` uses format strings to specify the
    output, which you can see in [Table 13-2](#strftime_table).
  prefs: []
  type: TYPE_NORMAL
- en: Table 13-2\. Output specifiers for `strftime()`
  prefs: []
  type: TYPE_NORMAL
- en: '| Format string | Date/time unit | Range |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `%Y` | year | `1900`-… |'
  prefs: []
  type: TYPE_TB
- en: '| `%m` | month | `01`-`12` |'
  prefs: []
  type: TYPE_TB
- en: '| `%B` | month name | `January`, … |'
  prefs: []
  type: TYPE_TB
- en: '| `%b` | month abbrev | `Jan`, … |'
  prefs: []
  type: TYPE_TB
- en: '| `%d` | day of month | `01`-`31` |'
  prefs: []
  type: TYPE_TB
- en: '| `%A` | weekday name | `Sunday`, … |'
  prefs: []
  type: TYPE_TB
- en: '| `a` | weekday abbrev | `Sun`, … |'
  prefs: []
  type: TYPE_TB
- en: '| `%H` | hour (24 hr) | `00`-`23` |'
  prefs: []
  type: TYPE_TB
- en: '| `%I` | hour (12 hr) | `01`-`12` |'
  prefs: []
  type: TYPE_TB
- en: '| `%p` | AM/PM | `AM`, `PM` |'
  prefs: []
  type: TYPE_TB
- en: '| `%M` | minute | `00`-`59` |'
  prefs: []
  type: TYPE_TB
- en: '| `%S` | second | `00`-`59` |'
  prefs: []
  type: TYPE_TB
- en: Numbers are zero-padded on the left.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the `strftime()` function provided by the `time` module. It converts
    a `struct_time` object to a string. We’ll first define the format string `fmt`
    and use it again later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If we try this with a `date` object, only the date parts will work, and the
    time defaults to midnight:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'For a `time` object, only the time parts are converted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You won’t want to use the day parts from a `time` object, because they’re meaningless.
  prefs: []
  type: TYPE_NORMAL
- en: To go the other way and convert a string to a date or time, use `strptime()`
    with the same format string. There’s no regular expression pattern matching; the
    nonformat parts of the string (without `%`) need to match exactly. Let’s specify
    a format that matches *year*-*month*-*day*, such as `2019-01-29`. What happens
    if the date string you want to parse has spaces instead of dashes?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: If we feed `strptime()` some dashes, is it happy now?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Or fix the `fmt` string to match the date string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Even if the string seems to match its format, an exception is raised if a value
    is out of range (file names truncated for space):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Names are specific to your *locale*—internationalization settings for your
    operating system. If you need to print different month and day names, change your
    locale by using `setlocale()`; its first argument is `locale.LC_TIME` for dates
    and times, and the second is a string combining the language and country abbreviation.
    Let’s invite some international friends to a Halloween party. We’ll print the
    month, day, and day of week in US English, French, German, Spanish, and Icelandic
    (Icelanders have real elves):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Where do you find these magic values for `lang_country`? This is a bit wonky,
    but you can try this to get all of them (there are a few hundred):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'From `names`, let’s get just locale names that seem to work with `setlocale()`,
    such as the ones we used in the preceding example—a two-character [language code](http://bit.ly/iso-639-1)
    followed by an underscore and a two-character [country code](http://bit.ly/iso-3166-1):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: What do the first five look like?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'So, if you wanted all the German language locales, try this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you run `set_locale()` and get the error
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: that locale is not supported by your operating system. You’ll need to figure
    out what your operating system needs to add it. This can happen even if Python
    told you (using `locale.locale_alias.keys()`) that it was a good locale. I had
    this error when testing on macOS with the locale `cy_gb` (Welsh, Great Britain),
    even though it had accepted `is_is` (Icelandic) in the preceding example.
  prefs: []
  type: TYPE_NORMAL
- en: All the Conversions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Figure 13-1](#datetime_fig) (from the Python [wiki](https://oreil.ly/C_39k))
    summarizes all the standard Python time interconversions.'
  prefs: []
  type: TYPE_NORMAL
- en: '![inp2 1301](assets/inp2_1301.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-1\. Date and time conversions
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Alternative Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you find the standard library modules confusing, or lacking a particular
    conversion that you want, there are many third-party alternatives. Here are just
    a few of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`arrow`](https://arrow.readthedocs.io)'
  prefs: []
  type: TYPE_NORMAL
- en: Combines many date and time functions with a simple API
  prefs: []
  type: TYPE_NORMAL
- en: '[`dateutil`](http://labix.org/python-dateutil)'
  prefs: []
  type: TYPE_NORMAL
- en: Parses almost any date format and handles relative dates and times well
  prefs: []
  type: TYPE_NORMAL
- en: '[`iso8601`](https://pypi.python.org/pypi/iso8601)'
  prefs: []
  type: TYPE_NORMAL
- en: Fills in gaps in the standard library for the ISO8601 format
  prefs: []
  type: TYPE_NORMAL
- en: '[`fleming`](https://github.com/ambitioninc/fleming)'
  prefs: []
  type: TYPE_NORMAL
- en: Many time zone functions
  prefs: []
  type: TYPE_NORMAL
- en: '[`maya`](https://github.com/kennethreitz/maya)'
  prefs: []
  type: TYPE_NORMAL
- en: Intuitive interface to dates, times, and intervals
  prefs: []
  type: TYPE_NORMAL
- en: '[`dateinfer`](https://github.com/jeffreystarr/dateinfer)'
  prefs: []
  type: TYPE_NORMAL
- en: Guesses the right format strings from date/time strings
  prefs: []
  type: TYPE_NORMAL
- en: Coming Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Files and directories need love, too.
  prefs: []
  type: TYPE_NORMAL
- en: Things to Do
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 13.1 Write the current date as a string to the text file *today.txt*.
  prefs: []
  type: TYPE_NORMAL
- en: 13.2 Read the text file *today.txt* into the string `today_string`.
  prefs: []
  type: TYPE_NORMAL
- en: 13.3 Parse the date from `today_string`.
  prefs: []
  type: TYPE_NORMAL
- en: 13.4 Create a date object of your day of birth.
  prefs: []
  type: TYPE_NORMAL
- en: 13.5 What day of the week was your day of birth?
  prefs: []
  type: TYPE_NORMAL
- en: 13.6 When will you be (or when were you) 10,000 days old?
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch13.html#idm45794986403304-marker)) This starting point is roughly when
    Unix was born, ignoring those pesky leap seconds.
  prefs: []
  type: TYPE_NORMAL
