- en: Chapter 1\. Installing Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 安装 Python
- en: If you’ve picked up this book, you likely have Python installed on your machine
    already. Most common operating systems ship with a `python3` command. This can
    be the interpreter used by the system itself; on Windows and macOS, it’s a placeholder
    that installs Python for you when you invoke it for the first time.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经拿起这本书，很可能您的机器上已经安装了 Python。大多数常见操作系统都提供`python3`命令。这可能是系统本身使用的解释器；在 Windows
    和 macOS 上，它是一个占位符，当您第一次调用它时为您安装 Python。
- en: 'Why dedicate an entire chapter to the topic if it’s so easy to get Python onto
    a new machine? The answer is that installing Python for long-term development
    can be a complex matter, and there are several reasons for this:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将 Python 安装到新机器上如此简单，为什么要专门开辟一整章来讨论？答案是，长期开发中安装 Python 可能是一个复杂的问题，而且存在多种原因：
- en: You generally need multiple versions of Python installed side-by-side. (If you’re
    wondering why, we’ll get to that shortly.)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常您需要在同一台机器上安装多个版本的 Python。（如果您想知道为什么，我们很快会讨论到。）
- en: There are a few different ways to install Python across the common platforms,
    each with unique advantages, tradeoffs, and sometimes pitfalls.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在常见平台上安装 Python 有几种不同的方法，每种方法都有独特的优势、权衡和有时候的陷阱。
- en: 'Python is a moving target: You need to keep existing installations up-to-date
    with the latest maintenance release, add installations when a new feature version
    is published, and remove versions that are no longer supported. You may even need
    to test a prerelease of the next Python.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 是一个不断发展的目标：您需要保持现有安装与最新的维护版本同步，发布新功能版本时添加安装，移除不再支持的版本。您甚至可能需要测试下一个 Python
    的预发行版本。
- en: You may want your code to run on multiple platforms. While Python makes it easy
    to write portable programs, setting up a developer environment requires some familiarity
    with the idiosyncrasies of each platform.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可能希望您的代码能在多个平台上运行。虽然 Python 可以轻松编写可移植程序，但设置开发环境需要一些对每个平台特殊特性的熟悉。
- en: You may want to run your code with an alternative implementation of Python.^([1](ch01.html#id233))
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可能希望使用 Python 的另一种替代实现来运行您的代码。^([1](ch01.html#id233))
- en: In this first chapter, I’ll show you how to install multiple Python versions
    on some of the major operating systems in a sustainable way, and how to keep your
    little snake farm in good shape.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将向您展示如何在一些主要操作系统上以可持续的方式安装多个 Python 版本，以及如何保持您的小蛇农场状态良好。
- en: Tip
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: Even if you only develop for a single platform, I’d encourage you to learn about
    working with Python on other operating systems. It’s fun—​and familiarity with
    other platforms enables you to provide a better experience to the contributors
    and users of your software.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您只在一个平台上开发，我也建议您了解如何在其他操作系统上使用 Python。这很有趣，而且熟悉其他平台可以让您为软件的贡献者和用户提供更好的体验。
- en: Supporting Multiple Versions of Python
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持多个 Python 版本
- en: Python programs often target several versions of the language and standard library
    at once. This may come as a surprise. Why would you run your code with anything
    but the latest Python? After all, this lets your programs benefit from new language
    features and library improvements immediately.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Python 程序经常同时针对多个语言版本和标准库版本。这可能会让人感到惊讶。为什么不用最新的 Python 运行您的代码？毕竟，这可以让您的程序立即受益于新的语言功能和库改进。
- en: As it turns out, runtime environments often come with a variety of older versions
    of Python.^([2](ch01.html#id234)) Even if you have tight control over your deployment
    environments, you may want to get into the habit of testing against multiple versions.
    The day the trusty Python in your production environment features in a security
    advisory had better not be the day you start porting your code to newer releases.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，运行时环境通常会带有多个旧版本的 Python。^([2](ch01.html#id234)) 即使您对部署环境有严格的控制，您可能也希望养成对多个版本进行测试的习惯。当您的生产环境中信赖的
    Python 出现安全通告时，最好不要从那天开始将代码移植到新版本。
- en: 'For these reasons, it’s common to support both current and past versions of
    Python until their official end-of-life date, and to set up installations for
    them side-by-side on a developer machine. With new feature versions coming out
    every year and support extending over five years, this gives you a testing matrix
    of five actively supported versions (see [Figure 1-1](#figure_python_release_cycle)).
    If that sounds like a lot of work, don’t worry: the Python ecosystem comes with
    tooling that makes this a breeze.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 出于这些原因，通常会支持 Python 的当前版本和过去的版本，直到官方的终止支持日期，并在开发者机器上并排设置这些版本的安装。每年都会推出新的功能版本，并且支持延续五年，这使得您可以测试五个活跃支持的版本（参见
    [图 1-1](#figure_python_release_cycle)）。如果听起来很费力，别担心：Python 生态系统提供了使这一切变得轻松的工具。
- en: Locating Python Interpreters
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定位 Python 解释器
- en: How do you select the correct Python interpreter if you have multiple on your
    system? Let’s look at a concrete example. When you type `python3` at the command
    line, the shell searches the directories in the `PATH` environment variable from
    left to right and invokes the first executable file named `python3`. Python installations
    on macOS and Linux also provide commands named `python3.12`, `python3.11`, and
    so on, to let you disambiguate between the different feature versions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的系统上有多个 Python 解释器，如何选择正确的 Python 解释器？让我们看一个具体的例子。当您在命令行中键入 `python3` 时，Shell
    会从左到右搜索 `PATH` 环境变量中的目录，并调用第一个名为 `python3` 的可执行文件。在 macOS 和 Linux 上，还提供了命名为 `python3.12`、`python3.11`
    等命令，让您可以区分不同的功能版本。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: On Windows, `PATH`-based interpreter discovery is less relevant because Python
    installations can be located via the Windows Registry (see [“The Python Launcher
    for Windows”](#section_python_launcher_windows)). Windows installers only ship
    an unversioned `python.exe` executable.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，基于 `PATH` 的解释器发现不那么重要，因为 Python 的安装可以通过 Windows 注册表找到（参见 [“Python
    Launcher for Windows”](#section_python_launcher_windows)）。Windows 安装程序只提供了一个未版本化的
    `python.exe` 可执行文件。
- en: '[Figure 1-2](#figure_python_commands_on_path) shows a macOS machine with several
    Python installations. Starting from the bottom, the first interpreter is located
    in */usr/bin/python3* and is part of Apple’s Command Line Tools (Python 3.9 at
    time of writing). Next up, in */opt/homebrew/bin*, are several interpreters from
    the Homebrew distribution; the `python3` command here is its main interpreter
    (Python 3.11). The Homebrew interpreters are followed by a prerelease from *python.org*
    (Python 3.13). The top entry contains the current release (Python 3.12 as of this
    writing), also from Homebrew.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-2](#figure_python_commands_on_path) 显示了一台 macOS 机器上安装了多个 Python 版本。从底部开始，第一个解释器位于
    */usr/bin/python3*，是苹果的命令行工具的一部分（Python 3.9）。接下来，在 */opt/homebrew/bin* 目录下，有几个来自
    Homebrew 分发的解释器；这里的 `python3` 是其主要解释器（Python 3.11）。Homebrew 的解释器之后是来自 *python.org*
    的预发布版本（Python 3.13）。最顶部条目包含了当前发布版本（本文写作时为 Python 3.12），同样来自 Homebrew。'
- en: '![An example of a customized PATH on a macOS machine, with Python installations
    from Homebrew, python.org, and Apple''s Command Line Tools.](assets/hmpt_0102.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![macOS 机器上自定义 PATH 的示例，包含来自 Homebrew、python.org 和苹果命令行工具的 Python 安装。](assets/hmpt_0102.png)'
- en: Figure 1-2\. A developer system with multiple Python installations. The search
    path is displayed as a stack of directories; commands at the top shadow those
    further down.
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-2\. 一台安装了多个 Python 的开发系统。搜索路径显示为一堆目录；位于顶部的命令会遮盖掉下面的命令。
- en: The order of directories on the search path matters because earlier entries
    take precedence over, or “shadow”, later ones. In [Figure 1-2](#figure_python_commands_on_path),
    `python3` refers the current stable version (Python 3.12). If you omitted the
    top entry, `python3` would refer to the prerelease (Python 3.13). Without the
    top two entries, it would refer to Homebrew’s default interpreter, which is still
    on the previous stable version (Python 3.11).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索路径中目录的顺序很重要，因为较早的条目优先于或者“遮盖”后面的条目。在 [图 1-2](#figure_python_commands_on_path)
    中，`python3` 指的是当前稳定版本（Python 3.12）。如果省略了顶部条目，`python3` 将指向预发布版本（Python 3.13）。如果省略了前两个条目，它将指向
    Homebrew 的默认解释器，该解释器仍然是之前的稳定版本（Python 3.11）。
- en: Locating Python interpreters on `PATH` is a common source of errors. Some installations
    overwrite the `python3` command in shared directories such as */usr/local/bin*.
    Others place `python3` in a distinct directory and alter the `PATH` to give it
    precedence, shadowing previously installed versions. To address these issues,
    this book uses the Python Launcher for Unix (see [“The Python Launcher for Unix”](#section_python_launcher_unix)).
    Nonetheless, understanding the `PATH` variable’s mechanics will help you avoid
    issues with Python discovery on Windows, macOS, and Linux.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `PATH` 上定位 Python 解释器是常见的错误来源。有些安装会覆盖共享目录中（例如 */usr/local/bin*）的 `python3`
    命令。其他安装则将 `python3` 放置在不同的目录，并修改 `PATH` 以使其优先，覆盖先前安装的版本。为了解决这些问题，本书使用了 Unix 上的
    Python Launcher（参见 [“Python Launcher for Unix”](#section_python_launcher_unix)）。然而，了解
    `PATH` 变量的工作原理将有助于避免在 Windows、macOS 和 Linux 上出现 Python 发现问题。
- en: 'A common default for the `PATH` variable is `/usr/local/bin:/usr/bin:/bin`
    on Unix-like systems, usually combined with some OS-dependent locations. You can
    modify the variable using the `export` built-in of many shells. Here’s how you
    would add a Python installation in */usr/local/opt/python* using the Bash shell:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unix-like 系统上，`PATH` 变量的常见默认值是 `/usr/local/bin:/usr/bin:/bin`，通常与一些依赖于操作系统的位置结合使用。你可以使用许多
    shell 的 `export` 内建来修改这个变量。下面是如何在 Bash shell 中添加 */usr/local/opt/python* 中的 Python
    安装：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You’re adding the *bin* subdirectory instead of the installation root, because
    that’s where the interpreter is normally located on these systems. We’ll take
    a closer look at the layout of Python installations in [Chapter 2](ch02.html#chapter_environments).
    Also, you’re adding the directory to the front of the `PATH` variable. I’ll explain
    shortly why this is usually what you want.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你添加的是 *bin* 子目录而不是安装根目录，因为这些系统上通常是解释器的正常位置。我们将在 [第 2 章](ch02.html#chapter_environments)
    中更详细地看一下 Python 安装的布局。另外，你将目录添加到 `PATH` 变量的前面。我马上会解释为什么这通常是你想要的。
- en: 'The line above also works with Zsh, which is the default shell on macOS. That
    said, there’s a more idiomatic way to manipulate the search path on Zsh:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上述行也适用于 Zsh，在 macOS 上是默认的 shell。尽管如此，Zsh 有一种更符合习惯的方式来操作搜索路径：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](assets/1.png)](#co_installing_python_CO1-1)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_installing_python_CO1-1)'
- en: This instructs the shell to remove duplicate entries from the search path.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这指示 shell 从搜索路径中删除重复的条目。
- en: '[![2](assets/2.png)](#co_installing_python_CO1-2)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_installing_python_CO1-2)'
- en: The shell keeps the `path` array synchronized with the `PATH` variable.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Shell 会保持 `path` 数组与 `PATH` 变量同步。
- en: 'The Fish shell offers a function to uniquely and persistently prepend an entry
    to the search path:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Fish shell 提供了一个函数，用于将条目唯一和持久地添加到搜索路径：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It would be tedious to set up the search path manually at the start of every
    shell session. Instead, you can place the commands above in your *shell profile*—a
    file in your home directory that is read by the shell on startup. [Table 1-1](#table_shell_profiles)
    shows the most common ones.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 每次启动 shell 会话时手动设置搜索路径将会很繁琐。相反，你可以将上述命令放置在你的 *shell profile* 中——这是一个位于你的主目录中，在启动时由
    shell 读取的文件。[Table 1-1](#table_shell_profiles) 展示了一些常见的启动文件。
- en: Table 1-1\. The startup files of some common shells
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Table 1-1\. 一些常见 shell 的启动文件
- en: '| Shell | Startup file |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| Shell | 启动文件 |'
- en: '| --- | --- |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Bash | *.bash_profile* (Debian and Ubuntu: *.profile*) |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| Bash | *.bash_profile*（Debian 和 Ubuntu：*.profile*） |'
- en: '| Zsh | *.zshrc* |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| Zsh | *.zshrc* |'
- en: '| Fish | *.config/fish/fish.config* |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| Fish | *.config/fish/fish.config* |'
- en: Why is it important to add new directories to the front of the `PATH` variable?
    On a pristine macOS or Linux installation, the `python3` command often points
    to an old version of Python. As a Python developer, your default interpreter should
    be the latest stable release of Python. Prepending to `PATH` lets you control
    which Python installation your shell chooses when faced with an ambiguous command
    like `python3`. You can guarantee that `python3` points to the latest stable release
    of Python, and that each `python3.x` points to the latest bugfix or security release
    of the 3.x line.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么将新目录添加到 `PATH` 变量的前面很重要？在干净的 macOS 或 Linux 安装中，`python3` 命令通常指向旧版本的 Python。作为
    Python 开发者，你的默认解释器应该是最新稳定版本的 Python。将条目添加到 `PATH` 可以让你控制当 shell 遇到类似 `python3`
    这样的模糊命令时选择哪个 Python 安装。你可以确保 `python3` 指向最新稳定版本的 Python，而每个 `python3.x` 则指向 3.x
    系列的最新 bugfix 或安全发布版本。
- en: Tip
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Tip
- en: Unless your system already comes with a well-curated and up-to-date selection
    of interpreters, prepend Python installations to the `PATH` environment variable,
    with the latest stable version at the very front.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 除非您的系统已经配备了经过精心筛选和最新的解释器选择，否则应该将 Python 安装添加到`PATH`环境变量中，并确保最新稳定版本位于最前面。
- en: Installing Python on Windows
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 Python
- en: The core Python team provides official binary installers in the [Downloads for
    Windows](https://www.python.org/downloads/windows) section of the Python website.
    Locate the latest release of each Python version you wish to support, and download
    the 64-bit Windows installer for each.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Python 核心团队在 Python 网站的[Windows 下载](https://www.python.org/downloads/windows)部分提供了官方二进制安装程序。找到您希望支持的每个
    Python 版本的最新发布版本，并下载每个版本的 64 位 Windows 安装程序。
- en: Note
  id: totrans-47
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Depending on your domain and target environment, you may prefer to use the Windows
    Subsystem for Linux (WSL) for Python development. In this case, please refer to
    the section [“Installing Python on Linux”](#section_python_linux) instead.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的领域和目标环境，您可能更喜欢使用 Windows 子系统来进行 Python 开发。在这种情况下，请参考[“在 Linux 上安装 Python”](#section_python_linux)部分。
- en: 'In general, there should be little need to customize the installation—​with
    one exception: When installing the latest stable release (and only then), enable
    the option to add Python to your `PATH` environment variable on the first page
    of the installer dialog. This ensures that your default `python` command uses
    a well-known and up-to-date Python version.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，应该很少需要定制安装—除非有一个例外：当安装最新的稳定版本（仅限于这种情况下），请在安装程序对话框的第一页启用将 Python 添加到您的`PATH`环境变量选项。这样可以确保您的默认`python`命令使用一个众所周知且最新的
    Python 版本。
- en: 'The *python.org* installers are an efficient way to set up multi-version Python
    environments on Windows, for several reasons:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*python.org*的安装程序是在 Windows 上设置多版本 Python 环境的高效方式，原因如下：'
- en: They register each Python installation with the Windows Registry, making it
    easy for developer tools to discover interpreters on the system (see [“The Python
    Launcher for Windows”](#section_python_launcher_windows).)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们会在 Windows 注册表中注册每个 Python 安装，使开发工具能够轻松发现系统上的解释器（参见[“Windows 的 Python 启动器”](#section_python_launcher_windows)）。
- en: They don’t have some of the disadvantages of redistributed versions of Python,
    such as lagging behind the official release or being subject to downstream modifications.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们不会像 Python 的重新分发版本那样存在一些缺点，例如落后于官方发布或受到下游修改的影响。
- en: They don’t require you to build the Python interpreter, which—​apart from taking
    precious time—​involves setting up Python’s build dependencies on your system.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们不要求您构建 Python 解释器，这除了需要宝贵时间外，还涉及在系统上设置 Python 的构建依赖关系。
- en: Binary installers are only provided up to the last bugfix release of each Python
    version, which occurs around 18 months after the initial release. Security updates
    for older versions, on the other hand, are provided as source distributions only.
    If you don’t want to build Python from source,^([4](ch01.html#id237)) you can
    use one of the excellent [Python Standalone Builds](https://github.com/indygreg/python-build-standalone),
    a collection of self-contained, highly portable Python distributions.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制安装程序仅提供了每个 Python 版本的最后一个 bugfix 发布版本，这通常在初始发布后大约 18 个月内完成。与此相反，较旧版本的安全更新仅作为源分发提供。如果您不想从源代码构建
    Python，^([4](ch01.html#id237)) 您可以使用出色的[Python 独立构建](https://github.com/indygreg/python-build-standalone)，这是一组自包含、高度可移植的
    Python 发行版。
- en: Keeping Python installations up-to-date falls on your shoulders when you’re
    using the binary installers from *python.org*. New releases are announced in many
    places, including the [Python blog](https://blog.python.org/) and the [Python
    Discourse](https://discuss.python.org/tags/c/committers/5/release). When you install
    a bugfix release for a Python version that is already present on the system, it
    will replace the existing installation. This preserves projects and developer
    tools on the upgraded Python version and should be a seamless experience.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用*python.org*的二进制安装程序时，保持 Python 安装的最新状态取决于您。新版本的发布将在多个位置公告，包括[Python 博客](https://blog.python.org/)和[Python
    论坛](https://discuss.python.org/tags/c/committers/5/release)。如果您安装了已经存在于系统上的 Python
    版本的 bugfix 发布版本，它将替换现有安装。这将保留项目和开发工具，并应该是一个无缝的体验。
- en: 'When you install a new feature release of Python, there are some additional
    steps to be mindful of:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 安装新版本的 Python 功能时，需注意以下额外步骤：
- en: Enable the option to add the new Python to the `PATH` environment variable.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用选项以将新的Python添加到`PATH`环境变量。
- en: Remove the previous Python release from `PATH`. You can edit the environment
    variables for your account using the *System Settings* tool that is part of Windows.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`PATH`中删除先前的Python版本。您可以使用Windows的*系统设置*工具编辑您账户的环境变量。
- en: You may also wish to reinstall some of your developer tooling, to ensure that
    it runs on the latest Python version.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可能还希望重新安装一些开发工具，以确保其在最新的Python版本上运行。
- en: Eventually, a Python version will reach its end of life, and you may wish to
    uninstall it to free up resources. You can remove an existing installation using
    the *Installed Apps* tool. Choose the *Uninstall* action for its entry in the
    list of installed software. Beware that removing a Python version will break projects
    and tools that are still using it, so you should upgrade those to a newer Python
    beforehand.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，某个Python版本将达到其生命周期的终点，您可能希望卸载它以释放资源。您可以使用*已安装应用程序*工具来删除现有安装。在已安装软件列表中，选择其条目的*卸载*操作。请注意，删除Python版本将会破坏仍在使用它的项目和工具，因此您应先将这些项目升级到更新的Python版本。
- en: The Python Launcher for Windows
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows的Python启动器
- en: Python development on Windows is special in that tooling can locate Python installations
    via the Windows Registry. The Python Launcher for Windows leverages this to provide
    a single entry point to interpreters on the system. It is a utility included with
    every *python.org* release and associated with Python file extensions, allowing
    you to launch scripts from the Windows File Explorer.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上进行Python开发是特殊的，因为工具可以通过Windows注册表定位Python安装位置。Windows的Python启动器利用这一点提供系统上解释器的单一入口点。它是每个*python.org*发布版本附带的实用程序，并与Python文件扩展名相关联，允许您从Windows文件资源管理器启动脚本。
- en: 'Running applications with a double-click is handy, but the Python Launcher
    is at its most powerful when you invoke it from a command-line prompt. Open a
    Powershell window and run the `py` command to start an interactive session:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 双击运行应用程序非常方便，但当您从命令行提示符调用Python启动器时，它将发挥其最大的功能。打开Powershell窗口并运行`py`命令以启动交互会话：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By default, the Python Launcher selects the most recent version of Python installed
    on the system. It’s worth noting that this may not be the same as the *most recently
    installed* version on the system. This is good—​you don’t want your default Python
    to change when you install a bugfix release for an older version.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Python启动器选择系统上安装的最新版本。值得注意的是，这可能与系统上*最近安装*的版本不同。这是好事—​您不希望在安装较旧版本的错误修复版本时默认Python发生变化。
- en: 'If you want to launch a specific version of the interpreter, you can pass the
    feature version as a command-line option:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想启动特定版本的解释器，可以将特性版本作为命令行选项传递：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Any remaining arguments to `py` are forwarded to the selected interpreter.
    Let’s see how you would display the versions of two interpreters on the system:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`py`的任何剩余参数都将转发给所选的解释器。让我们看看如何显示系统上两个解释器的版本：'
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Using the same mechanism, you can run a script on a specific interpreter:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用相同的机制，您可以在特定解释器上运行脚本：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-72
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: For historical reasons, `py` also inspects the first line of the script to see
    if a version is specified there. The canonical form is `#!/usr/bin/env python3`,
    which corresponds to `py -3` and works across all major platforms.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 出于历史原因，`py`还检查脚本的第一行，看是否指定了版本。规范形式是`#!/usr/bin/env python3`，对应于`py -3`，适用于所有主要平台。
- en: 'As you have seen, the Python Launcher defaults to the newest version on the
    system. There is an exception to this rule: if a *virtual environment* is active,
    `py` defaults to the interpreter in the virtual environment.^([5](ch01.html#id239))'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，Python启动器默认选择系统上最新的版本。有一个例外：如果处于*虚拟环境*中，`py`将默认使用虚拟环境中的解释器。^([5](ch01.html#id239))
- en: 'When you install a prerelease of Python, the Python Launcher will use it as
    the default interpreter instead of the current release—​after all, it’s the newest
    version on the system. In this case, you should override the default by setting
    the `PY_PYTHON` and `PY_PYTHON3` environment variables to the current release:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当您安装Python的预发布版本时，Python启动器将使用它作为默认解释器，而不是当前发布的版本—​毕竟，这是系统上最新的版本。在这种情况下，您应通过设置`PY_PYTHON`和`PY_PYTHON3`环境变量来覆盖默认设置为当前版本：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Restart the console for the setting to take effect. Don’t forget to remove these
    variables once you upgrade from the prerelease to the final release.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动控制台以使设置生效。不要忘记一旦从预发布版本升级到最终版本后删除这些变量。
- en: 'To conclude our short tour of the Python Launcher, use the command `py --list`
    to enumerate the interpreters on your system:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 结束我们对 Python 启动器的简短介绍，请使用命令`py --list`列举系统上的解释器：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this listing, the asterisk marks the default version of Python.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在此清单中，星号标记了 Python 的默认版本。
- en: Tip
  id: totrans-81
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Even if you always use the Python Launcher yourself, you should still keep your
    `PATH` up-to-date. Some third-party tools run the `python.exe` command directly—​you
    don’t want them to use an outdated Python version or fall back to the Microsoft
    Store shim.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您自己始终使用 Python 启动器，仍应保持您的`PATH`更新。一些第三方工具直接运行`python.exe`命令 — 您不希望它们使用过时的
    Python 版本或回退到 Microsoft Store 的替代品。
- en: Installing Python on macOS
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 Python
- en: You can install Python on macOS in several ways. In this section, I’ll take
    a look at the Homebrew package manager and the official *python.org* installers.
    Both provide multi-version binary distributions of Python. Some installation methods
    that are common on Linux—​such as Pyenv—​also work on macOS. The Conda package
    manager even supports Windows, macOS, and Linux. I’ll talk about them in later
    sections.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过几种方式在 macOS 上安装 Python。在本节中，我将看看 Homebrew 包管理器和官方*python.org*安装程序。两者都提供
    Python 的多版本二进制发行版。一些在 Linux 上常见的安装方法 — 例如 Pyenv — 也适用于 macOS。Conda 包管理器甚至支持 Windows、macOS
    和 Linux。我将在后面的章节中讨论它们。
- en: Homebrew Python
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Homebrew Python
- en: Homebrew is a third-party package manager for macOS and Linux. It provides an
    *overlay distribution*, an open source software collection that you install on
    top of the existing operating system. Installing the package manager is straightforward;
    refer to the [official website](https://brew.sh/) for instructions.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Homebrew 是 macOS 和 Linux 的第三方软件包管理器。它提供一个*覆盖发行*，这是一个安装在现有操作系统之上的开源软件集合。安装包管理器非常简单；请参阅[官方网站](https://brew.sh/)获取说明。
- en: 'Homebrew distributes packages for every maintained feature version of Python.
    Use the `brew` command-line interface to manage them:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Homebrew 为每个维护的特性版本的 Python 发布包。使用`brew`命令行界面来管理它们：
- en: '`brew install python@3.*x*`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`brew install python@3.*x*`'
- en: Install a new Python version.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 安装新的 Python 版本。
- en: '`brew upgrade python@3.*x*`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`brew upgrade python@3.*x*`'
- en: Upgrade a Python version to a maintenance release.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Python 版本升级到维护版本。
- en: '`brew uninstall python@3.*x*`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`brew uninstall python@3.*x*`'
- en: Uninstall a Python version.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 卸载 Python 版本。
- en: Note
  id: totrans-94
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Whenever you see names like `python3.*x*` or `python@3.*x*` in this section,
    replace `3.*x*` with the actual feature version. For example, use `python3.12`
    and `python@3.12` for Python 3.12.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您在本节看到类似`python3.*x*`或`python@3.*x*`的名称时，请用实际特性版本替换`3.*x*`。例如，对于 Python 3.12，请使用`python3.12`和`python@3.12`。
- en: You may find that you already have some Python versions installed for other
    Homebrew packages that depend on them. Nonetheless, it’s important that you install
    every version explicitly. Automatically installed packages may get deleted when
    you run `brew autoremove` to clean up resources.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会发现已安装某些 Python 版本，这是其他依赖它们的 Homebrew 包安装的结果。尽管如此，重要的是您显式安装每个版本。当您运行`brew
    autoremove`清理资源时，自动安装的包可能会被删除。
- en: 'Homebrew places a `python3.*x*` command for each version on your `PATH`, as
    well as a `python3` command for its main Python package—​which may be either the
    current or the previous stable release. You should override this to ensure `python3`
    points to the latest version. First, query the package manager for the installation
    root (which is platform-dependent):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Homebrew 在您的`PATH`上放置了每个版本的`python3.*x*`命令，以及其主要 Python 包的`python3`命令 — 可能是当前或以前的稳定发布版。您应该覆盖此设置以确保`python3`指向最新版本。首先，查询包管理器的安装根目录（这取决于平台）：
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, prepend the *bin* directory from this installation to your `PATH`. Here’s
    an example that works on the Bash shell:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在您的`PATH`中添加此安装的*bin*目录。以下是在 Bash shell 上工作的示例：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Homebrew has some advantages over the official *python.org* installers:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Homebrew 在官方*python.org*安装程序上有一些优势：
- en: You can use the command line to install, upgrade, and uninstall Python versions.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用命令行来安装、升级和卸载 Python 版本。
- en: Homebrew includes security releases for older versions—​by contrast, *python.org*
    installers are provided up to the last bugfix release only.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Homebrew 包含旧版本的安全更新 — 相比之下，*python.org*安装程序仅提供最后的 bugfix 发布版。
- en: Homebrew Python is tightly integrated with the rest of the distribution. In
    particular, the package manager can satisfy Python dependencies like OpenSSL.
    This gives you the option to upgrade them independently when needed.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Homebrew Python 与分发的其余部分紧密集成。特别是，软件包管理器可以满足 Python 的依赖项如 OpenSSL。这使得在需要时可以独立升级它们。
- en: 'On the other hand, Homebrew Python also comes with some limitations:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Homebrew Python 也有一些限制：
- en: Homebrew doesn’t package prereleases of upcoming Python versions.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Homebrew 不提供即将发布的 Python 版本的预发布包。
- en: Packages generally lag a few days or weeks behind official releases. They also
    contain some downstream modifications, although these are quite reasonable. For
    example, Homebrew separates modules related to graphical user interfaces (GUI)
    from the main Python package.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包通常会滞后于官方发布几天或几周。它们也包含一些下游修改，尽管这些修改是相当合理的。例如，Homebrew 将图形用户界面（GUI）相关的模块与主 Python
    包分开。
- en: You can’t install and uninstall Python packages system-wide unless they’re also
    available as Homebrew packages. (See [“Virtual Environments”](ch02.html#section_environments_venv)
    for why you shouldn’t install packages system-wide for development anyway.)
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除非它们也作为 Homebrew 包提供，否则你无法系统范围内安装和卸载 Python 包。 （参见 [“虚拟环境”](ch02.html#section_environments_venv)
    为什么你不应该系统范围内安装开发包。）
- en: By default, Homebrew upgrades Python to maintenance releases automatically.
    This behavior has led to some controversy because it used to break virtual environments
    installed on the previous version.^([6](ch01.html#id241)) This isn’t the case
    anymore as of this writing—​Homebrew Python is perfectly safe to use for Python
    development.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Homebrew 会自动将 Python 升级到维护版本。这种行为曾引发一些争议，因为它会破坏安装在先前版本上的虚拟环境。^([6](ch01.html#id241))
    但截至本文撰写时—​Homebrew Python 完全安全用于 Python 开发。
- en: Tip
  id: totrans-110
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Personally, I recommend Homebrew for managing Python on macOS—​it’s well-integrated
    with the rest of the system and easy to keep up-to-date. Use the *python.org*
    installers to test your code against prereleases, which are not available from
    Homebrew.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 就我个人而言，我推荐在 macOS 上使用 Homebrew 管理 Python—​它与系统的其余部分集成良好，并且易于保持更新。使用 *python.org*
    的安装程序来测试你的代码与预发布版本的兼容性，Homebrew 并不提供这些预发布版本。
- en: The python.org Installers
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[python.org 安装程序](https://www.python.org/downloads/macos/)'
- en: The core Python team provides official binary installers in the [Downloads for
    macOS](https://www.python.org/downloads/macos/) section of the Python website.
    Download the 64-bit *universal2* installer for the release you wish to install.
    The *universal2* binaries of the interpreter run natively on both Apple Silicon
    and Intel chips.^([7](ch01.html#id242))
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 核心 Python 团队在 Python 网站的 [macOS 下载](https://www.python.org/downloads/macos/)
    部分提供官方二进制安装程序。下载你希望安装的版本的 64 位 *universal2* 安装程序。解释器的 *universal2* 二进制版本可以在 Apple
    Silicon 和 Intel 芯片上原生运行。^([7](ch01.html#id242))
- en: For multi-version development, I recommend a custom install—​look for the *Customize*
    button in the installer dialog. In the resulting list of installable components,
    disable the *Unix command-line tools* and the *Shell profile updater*. Both options
    are designed to put the interpreter and some other commands on your `PATH`.^([8](ch01.html#id243))
    Instead, edit your shell profile manually. Prepend the directory */Library/Frameworks/Python.framework/Versions/3.x/bin*
    to `PATH`, replacing `3.*x*` with the actual feature version. Make sure that the
    current stable release stays at the front of `PATH`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多版本开发，我建议使用自定义安装—​在安装程序对话框中找到 *自定义* 按钮。在可安装组件的结果列表中，禁用 *Unix 命令行工具* 和 *Shell
    档案更新程序*。这两个选项旨在将解释器和其他一些命令添加到你的 `PATH` 中。^([8](ch01.html#id243)) 相反，手动编辑你的 shell
    档案。在 `PATH` 前面加上目录 */Library/Frameworks/Python.framework/Versions/3.x/bin*，将 `3.*x*`
    替换为实际的特性版本。确保当前稳定版本位于 `PATH` 的最前面。
- en: Note
  id: totrans-115
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: After installing a Python version, run the *Install Certificates* command located
    in the */Applications/Python 3.x/* folder. This command installs Mozilla’s curated
    collection of root certificates, which are required to establish secure internet
    connections from Python.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Python 版本后，请在 */Applications/Python 3.x/* 文件夹中运行 *Install Certificates* 命令。此命令安装
    Mozilla 的策划根证书集，用于从 Python 建立安全的互联网连接。
- en: 'When you install a bugfix release for a Python version that is already present
    on the system, it will replace the existing installation. You can uninstall a
    Python version by removing these two directories:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当你安装一个已经存在于系统中的 Python 版本的 bug 修复版本时，它将替换现有的安装。你可以通过移除以下两个目录来卸载一个 Python 版本：
- en: '*/Library/Frameworks/Python.framework/Versions/3.x/*'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*/Library/Frameworks/Python.framework/Versions/3.x/*'
- en: '*/Applications/Python 3.x/*'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*/Applications/Python 3.x/*'
- en: Installing Python on Linux
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux上安装Python
- en: 'The core Python team does not provide binary installers for Linux. Generally,
    the preferred way to install software on Linux distributions is using the official
    package manager. However, this isn’t unequivocally true when installing Python
    for development—​here are some important caveats:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Python核心团队不为Linux提供二进制安装程序。通常，在Linux发行版上安装软件的首选方法是使用官方包管理器。然而，在开发Python时，这并不绝对正确——以下是一些重要的注意事项：
- en: The system Python in a Linux distribution may be quite old, and not all distributions
    include alternate Python versions in their main package repositories.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux发行版中的系统Python可能相当旧，而且并非所有发行版的主要包存储库都包含替代Python版本。
- en: Linux distributions have mandatory rules about how applications and libraries
    may be packaged. For example, Debian’s Python Policy mandates that the standard
    `ensurepip` module must be shipped in a separate package; as a result, you can’t
    create virtual environments on a default Debian system (a situation commonly fixed
    by installing the `python3-full` package).
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux发行版对应用程序和库的打包方式有强制性规定。例如，Debian的Python政策要求标准的`ensurepip`模块必须在单独的包中提供；因此，在默认的Debian系统上无法创建虚拟环境（通常通过安装`python3-full`包解决）。
- en: The main Python package in a Linux distribution serves as the foundation for
    other packages that require a Python interpreter. These packages may include critical
    parts of the system, such as Fedora’s package manager DNF. Distributions therefore
    apply safeguards to protect the integrity of the system; for example, most distributions
    prevent you from installing or uninstalling packages system-wide using pip.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux发行版中的主要Python包作为需要Python解释器的其他包的基础。这些包可能包括系统的关键部分，例如Fedora的包管理器DNF。因此，发行版会采取保障措施来保护系统的完整性；例如，大多数发行版阻止使用pip在系统范围内安装或卸载包。
- en: 'In the next sections, I’ll take a look at installing Python on two major Linux
    distributions, Fedora and Ubuntu. Afterwards, I’ll cover some generic installation
    methods that don’t use the official package manager: Homebrew, Nix, Pyenv, and
    Conda. I’ll also introduce you to the Python Launcher for Unix, a third-party
    package that aims to bring the `py` utility to Linux, macOS, and similar systems.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我将讨论在两个主要的Linux发行版Fedora和Ubuntu上安装Python。之后，我将介绍一些不使用官方包管理器的通用安装方法：Homebrew、Nix、Pyenv和Conda。我还会向您介绍Python
    Launcher for Unix，这是一个第三方软件包，旨在将`py`实用程序引入Linux、macOS和类似系统。
- en: Fedora Linux
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Fedora Linux
- en: Fedora is an open source Linux distribution sponsored primarily by Red Hat,
    and is the upstream source for Red Hat Enterprise Linux (RHEL). It aims to stay
    close to upstream projects and uses a rapid release cycle to foster innovation.
    Fedora is renowned for its excellent Python support, with Red Hat employing several
    Python core developers.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Fedora是一个由Red Hat主要赞助的开源Linux发行版，是Red Hat Enterprise Linux (RHEL)的上游来源。它旨在保持与上游项目的紧密联系，并采用快速发布周期以促进创新。Fedora以其出色的Python支持而闻名，Red
    Hat雇用了几位Python核心开发者。
- en: 'Python comes pre-installed on Fedora, and you can install additional Python
    versions using DNF:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Python预装在Fedora上，您可以使用DNF安装额外的Python版本：
- en: '`sudo dnf install python3.*x*`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo dnf install python3.*x*`'
- en: Install a new Python version.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 安装一个新的Python版本。
- en: '`sudo dnf upgrade python3.*x*`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo dnf upgrade python3.*x*`'
- en: Upgrade a Python version to a maintenance release.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 将Python版本升级到一个维护版本。
- en: '`sudo dnf remove python3.*x*`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo dnf remove python3.*x*`'
- en: Uninstall a Python version.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 卸载Python版本。
- en: 'Fedora has packages for all active feature versions and prereleases of CPython,
    the reference implementation of Python, as well as packages with alternative implementations
    like PyPy. A convenient shorthand to install all of these at once is to install
    the `tox` package:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Fedora为CPython（Python的参考实现）的所有活跃特性版本和预发行版提供包，还有像PyPy这样的替代实现的包。一种便捷的方法是一次性安装所有这些包，即安装`tox`包：
- en: '[PRE11]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In case you’re wondering, tox is a test automation tool that makes it easy to
    run a test suite against multiple versions of Python; its Fedora package pulls
    in most available interpreters as recommended dependencies. Tox is also the spiritual
    ancestor of Nox, the subject of [Chapter 8](ch08.html#chapter_nox).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在想，tox是一个测试自动化工具，可以轻松地针对多个Python版本运行测试套件；它的Fedora包会引入大多数可用的解释器作为推荐的依赖项。Tox也是Nox的精神祖先，Nox是[第8章](ch08.html#chapter_nox)的主题。
- en: Ubuntu Linux
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ubuntu Linux
- en: Ubuntu is a popular Linux distribution based on Debian and funded by Canonical
    Ltd. Ubuntu only ships a single version of Python in its main repositories; other
    versions of Python, including prereleases, are provided by a *personal package
    archive* (PPA). A PPA is a community-maintained software repository on Launchpad,
    the software collaboration platform run by Canonical.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 是一个基于 Debian 的流行 Linux 发行版，由 Canonical Ltd. 赞助。Ubuntu 主要仓库中只提供一个 Python
    版本；其他 Python 版本，包括预发布版本，由个人软件包存档（PPA）提供。PPA 是在由 Canonical 运行的软件协作平台 Launchpad
    上维护的社区软件仓库。
- en: 'Your first step on an Ubuntu system should be to add the `deadsnakes` PPA:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 系统上的第一步应该是添加 `deadsnakes` PPA：
- en: '[PRE12]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can now install Python versions using the APT package manager:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以使用 APT 包管理器安装 Python 版本：
- en: '`sudo apt install python3.*x*-full`'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo apt install python3.*x*-full`'
- en: Install a new Python version.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 安装一个新的 Python 版本。
- en: '`sudo apt upgrade python3.*x*-full`'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo apt upgrade python3.*x*-full`'
- en: Upgrade a Python version to a maintenance release.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Python 版本升级到维护版本。
- en: '`sudo apt remove python3.*x*-full`'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo apt remove python3.*x*-full`'
- en: Uninstall a Python version.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 卸载 Python 版本。
- en: Tip
  id: totrans-149
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Always remember to include the `-full` suffix when installing Python on Debian
    and Ubuntu. The `python3.*x*-full` packages pull in the entire standard library
    and up-to-date root certificates. In particular, they ensure that you can create
    virtual environments.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Debian 和 Ubuntu 上安装 Python 时，请记住始终包含 `-full` 后缀。`python3.*x*-full` 包会拉取整个标准库和最新的根证书。特别是，它们确保你可以创建虚拟环境。
- en: Other Linux Distributions
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他 Linux 发行版
- en: What do you do if your Linux distribution doesn’t package multiple versions
    of Python? The traditional answer is “roll your own Python.” This may seem scary,
    but we’ll see how straightforward building Python has become these days in [“Installing
    Python with Pyenv”](#section_pyenv). However, it turns out that building from
    source is not your only option. Several cross-platform package managers provide
    binary packages of Python; in fact, you’ve already seen one of them.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 Linux 发行版没有打包多个 Python 版本，你该怎么办？传统的答案是“自行编译 Python”。这可能看起来吓人，但我们会看到，在当今日子里编译
    Python 已经变得非常简单，详情请见[“使用 Pyenv 安装 Python”](#section_pyenv)。然而，事实证明，从源代码构建并不是你唯一的选择。几个跨平台包管理器提供了
    Python 的二进制包；实际上，你已经看到其中之一了。
- en: 'The Homebrew distribution (see [“Homebrew Python”](#section_homebrew)) is available
    on Linux and macOS, and most of what I said above applies to Linux as well. The
    main difference between both platforms is the installation root: Homebrew on Linux
    installs packages under */home/linuxbrew/.linuxbrew* by default instead of */opt/homebrew*.
    Keep this in mind when adding Homebrew’s Python installations to your `PATH`.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Homebrew 发行版（参见[“Homebrew Python”](#section_homebrew)）也适用于 Linux 和 macOS，并且大部分上述内容同样适用于
    Linux。两个平台之间的主要区别在于安装根目录：Linux 上的 Homebrew 默认安装在 */home/linuxbrew/.linuxbrew*
    而不是 */opt/homebrew*。在将 Homebrew 的 Python 安装添加到你的 `PATH` 时请记住这一点。
- en: A popular cross-platform way to install Python is the Anaconda distribution,
    which is targeted at scientific computing and supports Windows, macOS, and Linux.
    I’ll cover Anaconda in a separate section at the end of this chapter (see [“Installing
    Python from Anaconda”](#section_anaconda)).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Python 的一个流行的跨平台方法是 Anaconda 发行版，专为科学计算而设计，支持 Windows、macOS 和 Linux。本章末尾将专门介绍
    Anaconda（参见[“从 Anaconda 安装 Python”](#section_anaconda)）。
- en: The Python Launcher for Unix
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 的 Unix 版本启动器
- en: 'The [Python Launcher for Unix](https://python-launcher.app/) is a port of the
    official `py` utility to Linux and macOS, as well as any other operating system
    supporting the Rust programming language. Its key benefit is to offer a unified,
    cross-platform way to launch Python, with a well-defined default when no version
    is specified: the newest interpreter on the system.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[Python 的 Unix 版本启动器](https://python-launcher.app/)是官方 `py` 实用程序的 Linux 和 macOS
    版本，以及支持 Rust 编程语言的任何其他操作系统的端口。它的主要优点是提供了一个统一的、跨平台的启动 Python 的方式，在未指定版本时具有明确定义的默认值：系统上的最新解释器。'
- en: The `py` command is a convenient, portable method for launching interpreters
    that avoids some pitfalls of invoking Python directly (see [“Locating Python Interpreters”](#section_path)).
    For this reason, I’ll use it throughout this book. You can install the `python-launcher`
    package with a number of package managers, including Homebrew, DNF, and Cargo.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`py` 命令是一种方便的便携式方法，用于启动解释器，避免了直接调用 Python 的一些问题（参见[“定位 Python 解释器”](#section_path)）。因此，在本书中我将一直使用它。你可以使用多种包管理器安装
    `python-launcher` 包，包括 Homebrew、DNF 和 Cargo。'
- en: The Python Launcher for Unix discovers interpreters by scanning the `PATH` environment
    variable for `python*x*.*y*` commands. Otherwise, it works much like its Windows
    counterpart (see [“The Python Launcher for Windows”](#section_python_launcher_windows)).
    While `py` on its own launches the newest Python, you can also request a specific
    version—​for example, `py -3.12` is equivalent to running `python3.12`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Unix 上的 Python 启动器通过扫描 `PATH` 环境变量来发现解释器，寻找 `python*x*.*y*` 命令。否则，它的工作方式与其 Windows
    对应项类似（见 [“Windows 上的 Python 启动器”](#section_python_launcher_windows)）。如果仅输入 `py`，将启动最新的
    Python 版本，但你也可以请求特定版本——例如，`py -3.12` 等同于运行 `python3.12`。
- en: Below is an example session using the macOS system from [Figure 1-2](#figure_python_commands_on_path).
    (Python 3.13 was a prerelease at the time of writing this, so I’ve changed the
    default interpreter by setting `PY_PYTHON` and `PY_PYTHON3` to `3.12`.)
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用 macOS 系统的示例会话，来自 [图 1-2](#figure_python_commands_on_path)。（编写本文时，Python
    3.13 是预发行版本，所以我通过设置 `PY_PYTHON` 和 `PY_PYTHON3` 为 `3.12` 更改了默认解释器。）
- en: '[PRE13]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If a virtual environment is active, `py` defaults to the interpreter in that
    environment instead of the system-wide interpreter (see [“Virtual Environments”](ch02.html#section_environments_venv)).
    A special rule in the Python Launcher for Unix makes working with virtual environments
    more convenient: If the current directory (or one of its parents) contains a virtual
    environment with the standard name *.venv*, you don’t need to activate it explicitly.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果虚拟环境处于活动状态，`py` 将默认使用该环境中的解释器，而不是系统范围内的解释器（参见 [“虚拟环境”](ch02.html#section_environments_venv)）。在
    Python 启动器的 Unix 版本中，有一条特殊规则使得与虚拟环境的工作更加方便：如果当前目录（或其父目录之一）包含标准名称为 *.venv* 的虚拟环境，则无需显式激活它。
- en: You can run many third-party tools by passing their import name to the `-m`
    interpreter option. Suppose you have installed pytest (a test framework) on multiple
    Python versions. Using `py -m pytest` lets you determine which interpreter should
    run the tool. By contrast, a bare `pytest` uses the command that happens to appear
    first on your `PATH`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将其导入名称传递给 `-m` 解释器选项来运行许多第三方工具。假设您已在多个 Python 版本上安装了 pytest（一个测试框架）。使用
    `py -m pytest` 可以确定应该使用哪个解释器来运行该工具。相比之下，裸露的 `pytest` 使用在您的 `PATH` 中首次出现的命令。
- en: 'If you invoke `py` with a Python script but don’t specify a version, `py` inspects
    the first line of the script for a *shebang*—a line specifying the interpreter
    for the script. Stick with the canonical form here: `#!/usr/bin/env python3`.
    *Entry-point scripts* are a more sustainable way to link a script to a specific
    interpreter, because package installers can generate the correct interpreter path
    during installation (see [“Entry-point scripts”](ch02.html#section_environments_scripts)).'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 `py` 调用 Python 脚本，但未指定版本，则 `py` 将检查脚本的第一行是否有 *shebang*——指定脚本解释器的行。在这里保持规范的形式：`#!/usr/bin/env
    python3`。*入口点脚本* 是将脚本链接到特定解释器的更可持续的方法，因为包安装程序可以在安装期间生成正确的解释器路径（见 [“入口点脚本”](ch02.html#section_environments_scripts)）。
- en: Warning
  id: totrans-164
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: For compatibility with the Windows version, the Python Launcher only uses the
    Python version from shebangs, not the full interpreter path. As a result, you
    can end up with a different interpreter than if you were to invoke the script
    directly without `py`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与 Windows 版本兼容，Python 启动器仅使用 shebang 中的 Python 版本，而不使用完整的解释器路径。因此，你可能得到的解释器与直接调用脚本而不带
    `py` 不同。
- en: Installing Python with Pyenv
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Pyenv 安装 Python
- en: Pyenv is a Python version manager for macOS and Linux. It includes a build tool—also
    available as a stand-alone program named `python-build`—that downloads, builds,
    and installs Python versions in your home directory. Pyenv allows you to activate
    and deactivate these installations globally, per project directory, or per shell
    session.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Pyenv 是 macOS 和 Linux 的 Python 版本管理器。它包括一个构建工具——也可以作为一个独立的程序命名为 `python-build`——它在你的主目录中下载、构建和安装
    Python 版本。Pyenv 允许您在全局、每个项目目录或每个 shell 会话中激活和取消激活这些安装。
- en: Note
  id: totrans-168
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In this section, you’ll use Pyenv as a build tool. If you’re interested in using
    Pyenv as a version manager, please refer to the [official documentation](https://github.com/pyenv/pyenv#readme)
    for additional setup steps. I’ll discuss some of the trade-offs in [“Managing
    Python Versions with Pyenv”](#sidebar_pyenv_versions).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将使用 Pyenv 作为构建工具。如果您有兴趣将 Pyenv 用作版本管理器，请参阅[官方文档](https://github.com/pyenv/pyenv#readme)了解其他设置步骤。我将讨论[“使用
    Pyenv 管理 Python 版本”](#sidebar_pyenv_versions)中的一些权衡考虑。
- en: 'The best way to install Pyenv on macOS and Linux is using Homebrew:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 和 Linux 上安装 Pyenv 的最佳方式是使用 Homebrew：
- en: '[PRE14]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: One great benefit of installing Pyenv from Homebrew is that you’ll also get
    the build dependencies of Python. If you use a different installation method,
    check the [Pyenv wiki](https://github.com/pyenv/pyenv/wiki) for platform-specific
    instructions on how to set up your build environment.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 从Homebrew安装Pyenv的一个巨大好处是您还将获得Python的构建依赖项。如果您使用不同的安装方法，请查看[Pyenv wiki](https://github.com/pyenv/pyenv/wiki)以获取关于如何设置您的构建环境的特定于平台的说明。
- en: 'Display the available Python versions using the following command:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令显示可用的Python版本：
- en: '[PRE15]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The list of interpreters is impressive. Not only does it cover all active feature
    versions of Python, it also includes prereleases, unreleased development versions,
    almost every point release published over the past two decades, and a wealth of
    alternative implementations, such as PyPy, GraalPy, MicroPython, Jython, IronPython,
    and Stackless Python.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器列表令人印象深刻。它不仅涵盖了Python的所有活跃功能版本，还包括预发布版本、未发布的开发版本、过去20年中发布的几乎每个点版本以及丰富的替代实现，如PyPy、GraalPy、MicroPython、Jython、IronPython和Stackless
    Python。
- en: 'You can build and install any of these versions by passing them to `pyenv install`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将它们传递给`pyenv install`来构建和安装任何这些版本：
- en: '[PRE16]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'When using Pyenv as a mere build tool, as we’re doing here, you need to add
    each installation to `PATH` manually. You can find its location using the command
    `pyenv prefix 3.*x*.*y*` and append */bin* to that. Here’s an example for the
    Bash shell:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 当作为纯构建工具使用Pyenv时（就像我们在这里做的那样），您需要手动将每个安装添加到`PATH`中。您可以使用命令`pyenv prefix 3.*x*.*y*`找到其位置，并在其后附加*/bin*。以下是Bash
    shell的示例：
- en: '[PRE17]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Installing a maintenance release with Pyenv does *not* implicitly upgrade existing
    virtual environments and developer tools on the same feature version, so you’ll
    have to recreate these environments using the new release.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Pyenv安装维护版本并不会隐式升级相同功能版本上的现有虚拟环境和开发工具，因此您需要使用新版本重新创建这些环境。
- en: 'When you no longer need an installation, you can remove it like this:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当您不再需要某个安装时，可以像这样删除它：
- en: '[PRE18]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'By default, Pyenv does not enable profile-guided optimization (PGO) or link-time
    optimization (LTO) when building the interpreter. According to the [Python Performance
    Benchmark Suite](https://pyperformance.readthedocs.io/), these optimizations can
    lead to a significant speedup for CPU-bound Python programs—​between 10% and 20%.
    You can enable them using the `PYTHON_CONFIGURE_OPTS` environment variable:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Pyenv在构建解释器时不启用基于配置文件的优化（PGO）或链接时优化（LTO）。根据[Python性能基准套件](https://pyperformance.readthedocs.io/)，这些优化可以显著加快CPU密集型Python程序的速度，速度提升在10%至20%之间。您可以通过设置`PYTHON_CONFIGURE_OPTS`环境变量来启用它们：
- en: '[PRE19]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Unlike most macOS installers, Pyenv defaults to a POSIX installation layout
    instead of the framework builds typical for this platform. If you are on macOS,
    I advise you to enable framework builds for consistency.^([9](ch01.html#id246))
    You can do so by adding the configuration option `--enable-framework` to the list
    above.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数macOS安装程序不同，Pyenv默认使用POSIX安装布局，而不是这个平台上典型的框架构建。如果您在macOS上，建议您为了一致性启用框架构建。您可以通过将配置选项`--enable-framework`添加到上述列表中来执行此操作。
- en: Installing Python from Anaconda
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Anaconda安装Python
- en: '[Anaconda](https://www.anaconda.com/download) is an open source software distribution
    for scientific computing, maintained by Anaconda Inc. Its centerpiece is [Conda](https://conda.io/projects/conda/),
    a cross-platform package manager for Windows, macOS, and Linux. Conda packages
    can contain software written in any language, such as C, C++, Python, R, or Fortran.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[Anaconda](https://www.anaconda.com/download)是由Anaconda Inc.维护的科学计算开源软件发行版。其核心是[Conda](https://conda.io/projects/conda/)，一个适用于Windows、macOS和Linux的跨平台包管理器。Conda包可以包含用任何语言编写的软件，如C、C++、Python、R或Fortran。'
- en: In this section, you’ll use Conda to install Python. Conda does not install
    software packages globally on your system. Each Python installation is contained
    in a Conda environment and isolated from the rest of your system. A typical Conda
    environment is centered around the dependencies of a particular project—​say,
    a set of libraries for machine learning or data science—​of which Python is only
    one among many.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将使用Conda安装Python。Conda不会在系统上全局安装软件包。每个Python安装都包含在一个Conda环境中，并与系统的其余部分隔离开来。典型的Conda环境围绕特定项目的依赖项展开，比如一组用于机器学习或数据科学的库，其中Python仅是其中之一。
- en: 'Before you can create Conda environments, you’ll need to bootstrap a base environment
    containing Conda itself. There are a few ways to go about this: You can install
    the full Anaconda distribution, or you can use the Miniconda installer with just
    Conda and a few core packages. Both Anaconda and Miniconda download packages from
    the *defaults* channel, which may require a commercial license for enterprise
    use.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在您可以创建Conda环境之前，您需要引导一个包含Conda本身的基础环境。有几种方法可以做到这一点：您可以安装完整的Anaconda发行版，或者只使用Miniconda安装程序安装Conda和几个核心包。Anaconda和Miniconda都会从*defaults*通道下载包，这可能需要商业许可证进行企业使用。
- en: 'Miniforge is a third alternative—​it is similar to Miniconda but installs packages
    from the community-maintained *conda-forge* channel. You can get Miniforge using
    its official installers from [GitHub](https://github.com/conda-forge/miniforge),
    or you can install it from Homebrew on macOS and Linux:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Miniforge是第三种选择—​它类似于Miniconda，但从社区维护的*conda-forge*通道安装软件包。您可以从[GitHub](https://github.com/conda-forge/miniforge)获取Miniforge的官方安装程序，或者在macOS和Linux上使用Homebrew安装它：
- en: '[PRE20]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Conda requires shell integration to update the search path and shell prompt
    when you activate or deactivate an environment. If you’ve installed Miniforge
    from Homebrew, update your shell profile using the `conda init` command with the
    name of your shell. For example:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 当您激活或取消激活环境时，Conda需要shell集成来更新搜索路径和shell提示。如果您从Homebrew安装了Miniforge，请使用`conda
    init`命令更新您的shell配置文件，并指定您的shell名称。例如：
- en: '[PRE21]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'By default, the shell initialization code activates the base environment automatically
    in every session. You may want to disable this behavior if you also use Python
    installations that are not managed by Conda:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，shell初始化代码会在每个会话中自动激活基础环境。如果您还使用未由Conda管理的Python安装，可能需要禁用此行为：
- en: '[PRE22]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The Windows installer does not activate the base environment globally. Interact
    with Conda using the Miniforge Prompt from the Windows Start Menu.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Windows安装程序不会全局激活基础环境。您可以通过Windows开始菜单中的Miniforge Prompt与Conda进行交互。
- en: 'Congratulations, you now have a working Conda installation on your system!
    Let’s use Conda to create an environment with a specific version of Python:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您现在在系统上安装了一个可工作的Conda！让我们使用Conda创建一个带有特定Python版本的环境：
- en: '[PRE23]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Before you can use this Python installation, you need to activate the environment:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在您可以使用这个Python安装之前，您需要激活环境：
- en: '[PRE24]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Upgrading Python to a newer release is simple:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 将Python升级到新版本非常简单：
- en: '[PRE25]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This command will run in the active Conda environment. What’s great about Conda
    is that it won’t upgrade Python to a release that’s not yet supported by the Python
    libraries in the environment.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在活动的Conda环境中运行。Conda的优点在于它不会将Python升级到环境中尚不支持的版本。
- en: 'When you’re done working in the environment, deactivate it like this:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在环境中完成工作时，请像这样取消激活它：
- en: '[PRE26]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Conda doesn’t install Python system-wide; rather, every Python installation
    is part of an isolated Conda environment. Conda takes a holistic view of an environment:
    Python is but one dependency of your projects, on par with system libraries, third-party
    Python packages, and even software packages from other language ecosystems.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Conda不会在系统范围内安装Python；相反，每个Python安装都是一个隔离的Conda环境的一部分。Conda对环境有一个全面的视角：Python只是项目的一个依赖项，与系统库、第三方Python包甚至其他语言生态系统的软件包并列。
- en: 'A Brave New World: Installing with Hatch and Rye'
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[一种全新的世界：使用Hatch和Rye安装](https://rye-up.com/) Brave New World: Installing with
    Hatch and Rye'
- en: While I was writing this book, the Python project managers [Rye](https://rye-up.com/)
    and [Hatch](https://hatch.pypa.io/) added support for installing Python interpreters
    on all major platforms. Both use interpreters from the [Python Standalone Builds](https://github.com/indygreg/python-build-standalone)
    collection and the [PyPy](https://www.pypy.org/) project.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在我写这本书的时候，Python项目管理者[Rye](https://rye-up.com/)和[Hatch](https://hatch.pypa.io/)增加了对所有主要平台上Python解释器安装的支持。两者都使用来自[Python
    Standalone Builds](https://github.com/indygreg/python-build-standalone)集合以及[PyPy](https://www.pypy.org/)项目的解释器。
- en: Both Rye and Hatch are distributed as stand-alone executables—​in other words,
    you can easily install them on a system that doesn’t already have Python. Please
    refer to their official documentation for detailed installation instructions.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Rye和Hatch都作为独立的可执行文件分发—​换句话说，您可以轻松地将它们安装到尚未安装Python的系统上。请参考它们的官方文档获取详细的安装说明。
- en: 'Hatch lets you install all CPython and PyPy interpreters compatible with your
    platform with a single command:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Hatch允许您使用单个命令安装与您平台兼容的所有CPython和PyPy解释器：
- en: '[PRE27]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This command also adds the installation directories to your `PATH`.^([10](ch01.html#id247))
    Re-run the command with the `--update` option to upgrade the interpreters to newer
    versions. Hatch organizes interpreters by feature version, so patch releases overwrite
    the existing installation.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这条命令还会将安装目录添加到你的`PATH`。^([10](ch01.html#id247)) 使用`--update`选项重新运行命令以升级解释器到更新版本。Hatch
    根据特性版本组织解释器，因此补丁发布会覆盖现有安装。
- en: 'Rye fetches interpreters into the *~/.rye/py* directory. Normally, this happens
    behind the scenes when you synchronize the dependencies of your project. But it’s
    also available as a dedicated command:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Rye 将解释器获取到*~/.rye/py*目录中。通常情况下，当您同步项目的依赖项时，此过程在幕后进行。但也可以作为专用命令使用：
- en: '[PRE28]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The second example places the interpreter in *~/.rye/py/cpython@3.11.8/bin*
    (Linux and macOS). You can install to another directory using the option `--target-path=*<dir>*`.
    This puts the interpreter in `*<dir>*` on Windows and `*<dir>*/bin` on Linux and
    macOS. Rye doesn’t add the interpreter to your `PATH` when you’re working outside
    of a project.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个示例将解释器放置在*~/.rye/py/cpython@3.11.8/bin*（Linux 和 macOS）。你可以使用选项`--target-path=*<dir>*`将其安装到其他目录。这会将解释器放置在
    Windows 上的`*<dir>*`和 Linux、macOS 上的`*<dir>*/bin`。在项目外工作时，Rye 不会将解释器添加到你的`PATH`中。
- en: An Overview of Installers
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装程序概览
- en: '[Figure 1-3](#figure_installing_python) provides an overview of the main Python
    installation methods for Windows, Linux, and macOS.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '[图示 1-3](#figure_installing_python) 提供了 Windows、Linux 和 macOS 的主要 Python 安装方法概览。'
- en: '![An overview of Python installation methods for Windows, Linux, and macOS](assets/hmpt_0103.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![Windows、Linux 和 macOS 的 Python 安装方法概览](assets/hmpt_0103.png)'
- en: Figure 1-3\. Python installers for Windows, Linux, and macOS
  id: totrans-219
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-3\. Windows、Linux 和 macOS 的 Python 安装程序
- en: 'Here’s some case-by-case guidance on how to choose an installer:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提供了一些具体情况下如何选择安装程序的指导：
- en: As a general rule, install Python stand-alone builds using Hatch.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常情况下，使用 Hatch 安装 Python 独立构建版本。
- en: For scientific computing, I recommend using Conda instead.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于科学计算，我建议使用 Conda 替代。
- en: Get preleases from python.org if you’re on Windows or macOS. If you’re on Linux,
    build them from source with pyenv.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你在 Windows 或 macOS 上，请从 python.org 获取预发行版本。如果你在 Linux 上，则使用 pyenv 从源代码构建它们。
- en: On Fedora Linux, always use DNF.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Fedora Linux 上，始终使用 DNF。
- en: On Ubuntu Linux, always use the deadsnakes PPA with APT.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Ubuntu Linux 上，始终使用 APT 与 deadsnakes PPA。
- en: Choose Nix on macOS and Linux if you need a reproducible build of Python.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要 Python 的可重现构建，请在 macOS 和 Linux 上选择 Nix。
- en: Summary
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you’ve learned how to manage Python installations on Windows,
    macOS, and Linux. Use the Python Launcher to select interpreters installed on
    your system. Additionally, audit your search path to ensure you have well-defined
    `python` and `python3` commands.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何在 Windows、macOS 和 Linux 上管理 Python 安装。使用 Python 启动器选择安装在系统上的解释器。此外，审核您的搜索路径以确保您具有明确定义的`python`和`python3`命令。
- en: 'The next chapter zooms into a Python installation: its contents and structure,
    and how your code interacts with it. You’ll also learn about its lightweight cousins,
    virtual environments, and the tooling that has evolved around those.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章详细介绍了 Python 安装：其内容、结构及您的代码与之交互的方式。您还将了解到它的轻量级兄弟虚拟环境以及围绕其发展的工具。
- en: '^([1](ch01.html#id233-marker)) While CPython is the reference implementation
    of Python, there are quite a few more to choose from: performance-oriented forks
    such as PyPy and Cinder, re-implementations such as RustPython and MicroPython,
    and ports to other platforms like WebAssembly, Java, and .NET.'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.html#id233-marker)) 虽然 CPython 是 Python 的参考实现，但还有许多其他选择：如面向性能的分支，例如
    PyPy 和 Cinder，重新实现如 RustPython 和 MicroPython，以及到其他平台的移植，如 WebAssembly、Java 和 .NET。
- en: ^([2](ch01.html#id234-marker)) At the time of writing in early 2024, the long-term
    support release of Debian Linux ships patched versions of Python 2.7.16 and 3.7.3—​both
    released half a decade ago. (Debian’s “testing” distribution, which is widely
    used for development, comes with a current version of Python.)
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch01.html#id234-marker)) 截至 2024 年初的写作时间，Debian Linux 的长期支持版本提供了 Python
    2.7.16 和 3.7.3 的修订版本，这两个版本发布已有半个世纪之久。（Debian 的“测试”发行版，广泛用于开发，提供了当前版本的 Python。）
- en: ^([3](ch01.html#id235-marker)) Starting with Python 3.13, bugfix releases are
    provided for two years after the initial release.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch01.html#id235-marker)) 从 Python 3.13 开始，将提供两年的 bug 修复版本支持。
- en: ^([4](ch01.html#id237-marker)) [Stack Overflow](https://stackoverflow.com/a/72209207/1355754)
    has a good step-by-step guide to building Windows installers.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch01.html#id237-marker)) [Stack Overflow](https://stackoverflow.com/a/72209207/1355754)
    提供了一个构建 Windows 安装程序的逐步指南。
- en: ^([5](ch01.html#id239-marker)) [“Virtual Environments”](ch02.html#section_environments_venv)
    covers virtual environments in detail. For now, you can think of a virtual environment
    as a shallow copy of a full Python installation that lets you install a separate
    set of third-party packages.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch01.html#id239-marker)) [“虚拟环境”](ch02.html#section_environments_venv)详细介绍了虚拟环境。目前，你可以将虚拟环境视为完整
    Python 安装的浅拷贝，它允许你安装一套独立的第三方包。
- en: '^([6](ch01.html#id241-marker)) Justin Mayer: [“Homebrew Python Is Not For You,”](https://justinmayer.com/posts/homebrew-python-is-not-for-you/)
    February 3rd, 2021.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '^([6](ch01.html#id241-marker)) Justin Mayer: [“Homebrew Python 不适合你”，](https://justinmayer.com/posts/homebrew-python-is-not-for-you/)
    2021年2月3日。'
- en: ^([7](ch01.html#id242-marker)) Do you have a Mac with Apple Silicon, but programs
    that must run on Intel processors? You’ll be pleased to know that the *python.org*
    installers also provide a `python3-intel64` binary using the `x64_64` instruction
    set. You can run it on Apple Silicon thanks to Apple’s Rosetta translation environment.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: ^([7](ch01.html#id242-marker)) 如果你有一台搭载 Apple Silicon 的 Mac，但必须运行基于 Intel 处理器的程序，你会很高兴知道*python.org*的安装程序也提供了一个使用`x86_64`指令集的`python3-intel64`二进制文件。由于苹果的Rosetta翻译环境，你可以在Apple
    Silicon上运行它。
- en: ^([8](ch01.html#id243-marker)) The *Unix command-line tools* option places symbolic
    links in the */usr/local/bin* directory, which can conflict with Homebrew packages
    and other versions from *python.org*. A *symbolic link* is a special kind of file
    that points to another file, much like a shortcut in Windows.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: ^([8](ch01.html#id243-marker)) *Unix命令行工具*选项会在*/usr/local/bin*目录中放置符号链接，这可能会与Homebrew安装的软件包和其他*python.org*版本产生冲突。*符号链接*是一种特殊类型的文件，类似于Windows中的快捷方式，它指向另一个文件。
- en: ^([9](ch01.html#id246-marker)) For historical reasons, framework builds use
    a different path for the *per-user site directory*, the location where packages
    are installed if you invoke pip outside of a virtual environment and without administrative
    privileges. This different installation layout can prevent you from importing
    a previously installed package.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: ^([9](ch01.html#id246-marker)) 基于历史原因，框架构建使用不同的路径来存储*每用户站点目录*，即如果在非虚拟环境中以非管理员权限调用
    pip 安装包时的位置。这种不同的安装布局可能会阻止你导入先前安装的包。
- en: ^([10](ch01.html#id247-marker)) In a future release, Hatch will add interpreters
    to the Windows registry as well, letting you use them with the Python Launcher.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: ^([10](ch01.html#id247-marker)) 在未来的版本中，Hatch还将在Windows注册表中添加解释器，使你可以使用Python启动器使用它们。
