["```py\n>>> import os\n>>> os.getpid()\n76051\n>>> os.getcwd()\n'/Users/williamlubanovic'\n```", "```py\n>>> os.getuid()\n501\n>>> os.getgid()\n20\n```", "```py\n>>> import subprocess\n>>> ret = subprocess.getoutput('date')\n>>> ret\n'Sun Mar 30 22:54:37 CDT 2014'\n```", "```py\n>>> ret = subprocess.getoutput('date -u')\n>>> ret\n'Mon Mar 31 03:55:01 UTC 2014'\n```", "```py\n>>> ret = subprocess.getoutput('date -u | wc')\n>>> ret\n'       1       6      29'\n```", "```py\n>>> ret = subprocess.check_output(['date', '-u'])\n>>> ret\nb'Mon Mar 31 04:01:50 UTC 2014\\n'\n```", "```py\n>>> ret = subprocess.getstatusoutput('date')\n>>> ret\n(0, 'Sat Jan 18 21:36:23 CST 2014')\n```", "```py\n>>> ret = subprocess.call('date')\nSat Jan 18 21:33:11 CST 2014\n>>> ret\n0\n```", "```py\n>>> ret = subprocess.call('date -u', shell=True)\nTue Jan 21 04:40:04 UTC 2014\n```", "```py\n>>> ret = subprocess.call(['date', '-u'])\nTue Jan 21 04:41:59 UTC 2014\n```", "```py\nimport multiprocessing\nimport os\n\ndef whoami(what):\n    print(\"Process %s says: %s\" % (os.getpid(), what))\n\nif __name__ == \"__main__\":\n    whoami(\"I'm the main program\")\n    for n in range(4):\n        p = multiprocessing.Process(target=whoami,\n          args=(\"I'm function %s\" % n,))\n        p.start()\n```", "```py\nProcess 6224 says: I'm the main program\nProcess 6225 says: I'm function 0\nProcess 6226 says: I'm function 1\nProcess 6227 says: I'm function 2\nProcess 6228 says: I'm function 3\n```", "```py\nimport multiprocessing\nimport time\nimport os\n\ndef whoami(name):\n    print(\"I'm %s, in process %s\" % (name, os.getpid()))\n\ndef loopy(name):\n    whoami(name)\n    start = 1\n    stop = 1000000\n    for num in range(start, stop):\n        print(\"\\tNumber %s of %s. Honk!\" % (num, stop))\n        time.sleep(1)\n\nif __name__ == \"__main__\":\n    whoami(\"main\")\n    p = multiprocessing.Process(target=loopy, args=(\"loopy\",))\n    p.start()\n    time.sleep(5)\n    p.terminate()\n```", "```py\nI'm main, in process 97080\nI'm loopy, in process 97081\n    Number 1 of 1000000\\. Honk!\n    Number 2 of 1000000\\. Honk!\n    Number 3 of 1000000\\. Honk!\n    Number 4 of 1000000\\. Honk!\n    Number 5 of 1000000\\. Honk!\n```", "```py\n>>> import os\n>>> os.uname()\nposix.uname_result(sysname='Darwin',\nnodename='iMac.local',\nrelease='18.5.0',\nversion='Darwin Kernel Version 18.5.0: Mon Mar 11 20:40:32 PDT 2019;\n root:xnu-4903.251.3~3/RELEASE_X86_64',\nmachine='x86_64')\n>>> os.getloadavg()\n(1.794921875, 1.93115234375, 2.2587890625)\n>>> os.cpu_count()\n4\n```", "```py\n>>> import os\n>>> os.system('date -u')\nTue Apr 30 13:10:09 UTC 2019\n0\n```", "```py\n$ pip install psutil\n```", "```py\n>>> import psutil\n>>> psutil.cpu_times(True)\n[scputimes(user=62306.49, nice=0.0, system=19872.71, idle=256097.64),\nscputimes(user=19928.3, nice=0.0, system=6934.29, idle=311407.28),\nscputimes(user=57311.41, nice=0.0, system=15472.99, idle=265485.56),\nscputimes(user=14399.49, nice=0.0, system=4848.84, idle=319017.87)]\n```", "```py\n>>> import psutil\n>>> psutil.cpu_percent(True)\n26.1\n>>> psutil.cpu_percent(percpu=True)\n[39.7, 16.2, 50.5, 6.0]\n```", "```py\n$ pip install invoke\n```", "```py\nfrom invoke import task\n\n@task\ndef mytime(ctx):\n    import time\n    now = time.time()\n    time_str = time.asctime(time.localtime(now))\n    print(\"Local time is\", timestr)\n```", "```py\n$ invoke mytime\nLocal time is Thu May  2 13:16:23 2019\n```", "```py\n$ invoke -l\nAvailable tasks:\n\n  mytime\n```", "```py\nimport multiprocessing as mp\n\ndef washer(dishes, output):\n    for dish in dishes:\n        print('Washing', dish, 'dish')\n        output.put(dish)\n\ndef dryer(input):\n    while True:\n        dish = input.get()\n        print('Drying', dish, 'dish')\n        input.task_done()\n\ndish_queue = mp.JoinableQueue()\ndryer_proc = mp.Process(target=dryer, args=(dish_queue,))\ndryer_proc.daemon = True\ndryer_proc.start()\n\ndishes = ['salad', 'bread', 'entree', 'dessert']\nwasher(dishes, dish_queue)\ndish_queue.join()\n```", "```py\n$ python dishes.py\nWashing salad dish\nWashing bread dish\nWashing entree dish\nWashing dessert dish\nDrying salad dish\nDrying bread dish\nDrying entree dish\nDrying dessert dish\n```", "```py\nimport threading\n\ndef do_this(what):\n    whoami(what)\n\ndef whoami(what):\n    print(\"Thread %s says: %s\" % (threading.current_thread(), what))\n\nif __name__ == \"__main__\":\n    whoami(\"I'm the main program\")\n    for n in range(4):\n        p = threading.Thread(target=do_this,\n          args=(\"I'm function %s\" % n,))\n        p.start()\n```", "```py\nThread <_MainThread(MainThread, started 140735207346960)> says: I'm the main\nprogram\nThread <Thread(Thread-1, started 4326629376)> says: I'm function 0\nThread <Thread(Thread-2, started 4342157312)> says: I'm function 1\nThread <Thread(Thread-3, started 4347412480)> says: I'm function 2\nThread <Thread(Thread-4, started 4342157312)> says: I'm function 3\n```", "```py\nimport threading, queue\nimport time\n\ndef washer(dishes, dish_queue):\n    for dish in dishes:\n        print (\"Washing\", dish)\n        time.sleep(5)\n        dish_queue.put(dish)\n\ndef dryer(dish_queue):\n    while True:\n        dish = dish_queue.get()\n        print (\"Drying\", dish)\n        time.sleep(10)\n        dish_queue.task_done()\n\ndish_queue = queue.Queue()\nfor n in range(2):\n    dryer_thread = threading.Thread(target=dryer, args=(dish_queue,))\n    dryer_thread.start()\n\ndishes = ['salad', 'bread', 'entree', 'dessert']\nwasher(dishes, dish_queue)\ndish_queue.join()\n```", "```py\nfrom concurrent import futures\nimport math\nimport time\nimport sys\n\ndef calc(val):\n    time.sleep(1)\n    result = math.sqrt(float(val))\n    return result\n\ndef use_threads(num, values):\n    t1 = time.time()\n    with futures.ThreadPoolExecutor(num) as tex:\n        results = tex.map(calc, values)\n    t2 = time.time()\n    return t2 - t1\n\ndef use_processes(num, values):\n    t1 = time.time()\n    with futures.ProcessPoolExecutor(num) as pex:\n        results = pex.map(calc, values)\n    t2 = time.time()\n    return t2 - t1\n\ndef main(workers, values):\n    print(f\"Using {workers} workers for {len(values)} values\")\n    t_sec = use_threads(workers, values)\n    print(f\"Threads took {t_sec:.4f} seconds\")\n    p_sec = use_processes(workers, values)\n    print(f\"Processes took {p_sec:.4f} seconds\")\n\nif __name__ == '__main__':\n    workers = int(sys.argv[1])\n    values = list(range(1, 6)) # 1 .. 5\n    main(workers, values)\n```", "```py\n$ python cf.py 1\nUsing 1 workers for 5 values\nThreads took 5.0736 seconds\nProcesses took 5.5395 seconds\n$ python cf.py 3\nUsing 3 workers for 5 values\nThreads took 2.0040 seconds\nProcesses took 2.0351 seconds\n$ python cf.py 5\nUsing 5 workers for 5 values\nThreads took 1.0052 seconds\nProcesses took 1.0444 seconds\n```", "```py\nfrom concurrent import futures\nimport math\nimport sys\n\ndef calc(val):\n    result = math.sqrt(float(val))\n    return val, result\n\ndef use_threads(num, values):\n    with futures.ThreadPoolExecutor(num) as tex:\n        tasks = [tex.submit(calc, value) for value in values]\n        for f in futures.as_completed(tasks):\n             yield f.result()\n\ndef use_processes(num, values):\n    with futures.ProcessPoolExecutor(num) as pex:\n        tasks = [pex.submit(calc, value) for value in values]\n        for f in futures.as_completed(tasks):\n             yield f.result()\n\ndef main(workers, values):\n    print(f\"Using {workers} workers for {len(values)} values\")\n    print(\"Using threads:\")\n    for val, result in use_threads(workers, values):\n        print(f'{val} {result:.4f}')\n    print(\"Using processes:\")\n    for val, result in use_processes(workers, values):\n        print(f'{val} {result:.4f}')\n\nif __name__ == '__main__':\n    workers = 3\n    if len(sys.argv) > 1:\n        workers = int(sys.argv[1])\n    values = list(range(1, 6)) # 1 .. 5\n    main(workers, values)\n```", "```py\n$ python cf2.py 5\nUsing 5 workers for 5 values\nUsing threads:\n3 1.7321\n1 1.0000\n2 1.4142\n4 2.0000\n5 2.2361\nUsing processes:\n1 1.0000\n2 1.4142\n3 1.7321\n4 2.0000\n5 2.2361\n```", "```py\n$ pip install gevent\n```", "```py\nimport gevent\nfrom gevent import socket\nhosts = ['www.crappytaxidermy.com', 'www.walterpottertaxidermy.com',\n    'www.antique-taxidermy.com']\njobs = [gevent.spawn(gevent.socket.gethostbyname, host) for host in hosts]\ngevent.joinall(jobs, timeout=5)\nfor job in jobs:\n    print(job.value)\n```", "```py\n$ python gevent_test.py \n66.6.44.4\n74.125.142.121\n78.136.12.50\n```", "```py\nfrom gevent import monkey\nmonkey.patch_socket()\n```", "```py\nfrom gevent import monkey\nmonkey.patch_all()\n```", "```py\nimport gevent\nfrom gevent import monkey; monkey.patch_all()\nimport socket\nhosts = ['www.crappytaxidermy.com', 'www.walterpottertaxidermy.com',\n    'www.antique-taxidermy.com']\njobs = [gevent.spawn(socket.gethostbyname, host) for host in hosts]\ngevent.joinall(jobs, timeout=5)\nfor job in jobs:\n    print(job.value)\n```", "```py\n$ python gevent_monkey.py\n66.6.44.4\n74.125.192.121\n78.136.12.50\n```", "```py\n$ pip install twisted\n```", "```py\nfrom twisted.internet import protocol, reactor\n\nclass Knock(protocol.Protocol):\n    def dataReceived(self, data):\n        print('Client:', data)\n        if data.startswith(\"Knock knock\"):\n            response = \"Who's there?\"\n        else:\n            response = data + \" who?\"\n        print('Server:', response)\n        self.transport.write(response)\n\nclass KnockFactory(protocol.Factory):\n    def buildProtocol(self, addr):\n        return Knock()\n\nreactor.listenTCP(8000, KnockFactory())\nreactor.run()\n```", "```py\nfrom twisted.internet import reactor, protocol\n\nclass KnockClient(protocol.Protocol):\n    def connectionMade(self):\n        self.transport.write(\"Knock knock\")\n\n    def dataReceived(self, data):\n        if data.startswith(\"Who's there?\"):\n            response = \"Disappearing client\"\n            self.transport.write(response)\n        else:\n            self.transport.loseConnection()\n            reactor.stop()\n\nclass KnockFactory(protocol.ClientFactory):\n    protocol = KnockClient\n\ndef main():\n    f = KnockFactory()\n    reactor.connectTCP(\"localhost\", 8000, f)\n    reactor.run()\n\nif __name__ == '__main__':\n    main()\n```", "```py\n$ python knock_server.py\n```", "```py\n$ python knock_client.py\n```", "```py\nClient: Knock knock\nServer: Who's there?\nClient: Disappearing client\nServer: Disappearing client who?\n```", "```py\nimport redis\nconn = redis.Redis()\nprint('Washer is starting')\ndishes = ['salad', 'bread', 'entree', 'dessert']\nfor dish in dishes:\n    msg = dish.encode('utf-8')\n    conn.rpush('dishes', msg)\n    print('Washed', dish)\nconn.rpush('dishes', 'quit')\nprint('Washer is done')\n```", "```py\nimport redis\nconn = redis.Redis()\nprint('Dryer is starting')\nwhile True:\n    msg = conn.blpop('dishes')\n    if not msg:\n        break\n    val = msg[1].decode('utf-8')\n    if val == 'quit':\n        break\n    print('Dried', val)\nprint('Dishes are dried')\n```", "```py\n$ python redis_dryer.py & \n[2] 81691\nDryer is starting\n$ python redis_washer.py\nWasher is starting\nWashed salad\nDried salad\nWashed bread\nDried bread\nWashed entree\nDried entree\nWashed dessert\nWasher is done\nDried dessert\nDishes are dried\n[2]+  Done                    python redis_dryer.py\n```", "```py\ndef dryer():\n    import redis\n    import os\n    import time\n    conn = redis.Redis()\n    pid = os.getpid()\n    timeout = 20\n    print('Dryer process %s is starting' % pid)\n    while True:\n        msg = conn.blpop('dishes', timeout)\n        if not msg:\n            break\n        val = msg[1].decode('utf-8')\n        if val == 'quit':\n            break\n        print('%s: dried %s' % (pid, val))\n        time.sleep(0.1)\n    print('Dryer process %s is done' % pid)\n\nimport multiprocessing\nDRYERS=3\nfor num in range(DRYERS):\n    p = multiprocessing.Process(target=dryer)\n    p.start()\n```", "```py\n$ python redis_dryer2.py &\nDryer process 44447 is starting\nDryer process 44448 is starting\nDryer process 44446 is starting\n$ python redis_washer.py\nWasher is starting\nWashed salad\n44447: dried salad\nWashed bread\n44448: dried bread\nWashed entree\n44446: dried entree\nWashed dessert\nWasher is done\n44447: dried dessert\n\n```", "```py\nDryer process 44448 is done\n```", "```py\nDryer process 44447 is done\nDryer process 44446 is done\n```", "```py\n[1]+  Done                    python redis_dryer2.py\n```"]