- en: Part III. Extensible Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三部分. 可扩展的 Python
- en: Robust code is maintainable code. In order to be maintainable, code must be
    easy to read, easy to check for errors, and easy to change. Parts [I](part0004.html#part_1)
    and [II](part0011.html#part_2) of this book focused on readability and error detection,
    but not necessarily how to extend or modify existing code. Type annotations and
    typecheckers provide confidence to maintainers when interacting with individual
    types, but what about larger changes in a codebase, such as introducing new workflows
    or switching out a key component?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 健壮的代码是可维护的代码。为了可维护性，代码必须易于阅读、易于检查错误，以及易于修改。本书的第[I](part0004.html#part_1)部分和第[II](part0011.html#part_2)部分侧重于可读性和错误检测，但并不一定涉及如何扩展或修改现有代码。类型注解和类型检查器在与个体类型交互时为维护者提供信心，但是对于代码库中的较大变更，比如引入新的工作流程或替换关键组件，又该如何？
- en: '[Part III](part0019.html#part_3) examines larger changes and shows you how
    to enable future developers to make them. You’ll learn about extensibility and
    composability, both core principles that improve robustness. You’ll learn how
    to manage dependencies, to make sure that simple changes don’t create a ripple
    effect of bugs and errors. You’ll then apply these concepts to architectural models,
    such as plug-in-based systems, reactive programming, and task-oriented programs.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 III 部分](part0019.html#part_3) 探讨了更大的变更，并向您展示如何使未来的开发者能够实施这些变更。您将了解到可扩展性和可组合性，这两个核心原则能够提高代码的健壮性。您将学习如何管理依赖关系，以确保简单的变更不会导致错误和
    Bug 的连锁反应。然后，您将应用这些概念到架构模型中，如基于插件的系统、反应式编程和任务导向型程序。'
