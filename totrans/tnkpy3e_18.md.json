["```py\nclass Point:\n  \"\"\"Represents a point in 2-D space.\"\"\"\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f'Point({self.x}, {self.y})' \n```", "```py\nstart = Point(0, 0)\nprint(start) \n```", "```py\nPoint(0, 0) \n```", "```py\n%%add_method_to Point\n\n    def translate(self, dx, dy):\n        self.x += dx\n        self.y += dy \n```", "```py\nfrom copy import copy\n\nend1 = copy(start)\nend1.translate(300, 0)\nprint(end1) \n```", "```py\nPoint(300, 0) \n```", "```py\n%%add_method_to Point\n\n    def translated(self, dx=0, dy=0):\n        point = copy(self)\n        point.translate(dx, dy)\n        return point \n```", "```py\nend2 = start.translated(0, 150)\nprint(end2) \n```", "```py\nPoint(0, 150) \n```", "```py\nclass Line:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\n    def __str__(self):\n        return f'Line({self.p1}, {self.p2})' \n```", "```py\nline1 = Line(start, end1)\nprint(line1) \n```", "```py\nLine(Point(0, 0), Point(300, 0)) \n```", "```py\nfrom jupyturtle import make_turtle, jumpto, moveto \n```", "```py\n%%add_method_to Line\n\n    def draw(self):\n        jumpto(self.p1.x, self.p1.y)\n        moveto(self.p2.x, self.p2.y) \n```", "```py\nline2 = Line(start, end2)\nprint(line2) \n```", "```py\nLine(Point(0, 0), Point(0, 150)) \n```", "```py\nmake_turtle()\nline1.draw()\nline2.draw() \n```", "```py\np1 = Point(200, 100)\np2 = Point(200, 100) \n```", "```py\np1 == p2 \n```", "```py\nFalse \n```", "```py\n%%add_method_to Point\n\ndef __eq__(self, other):\n    return (self.x == other.x) and (self.y == other.y) \n```", "```py\np1 == p2 \n```", "```py\nTrue \n```", "```py\np1 is p2 \n```", "```py\nFalse \n```", "```py\nclass Rectangle:\n  \"\"\"Represents a rectangle. \n\n attributes: width, height, corner.\n \"\"\"\n    def __init__(self, width, height, corner):\n        self.width = width\n        self.height = height\n        self.corner = corner\n\n    def __str__(self):\n        return f'Rectangle({self.width}, {self.height}, {self.corner})' \n```", "```py\ncorner = Point(30, 20)\nbox1 = Rectangle(100, 50, corner)\nprint(box1) \n```", "```py\nRectangle(100, 50, Point(30, 20)) \n```", "```py\n%%add_method_to Rectangle\n\n    def make_points(self):\n        p1 = self.corner\n        p2 = p1.translated(self.width, 0)\n        p3 = p2.translated(0, self.height)\n        p4 = p3.translated(-self.width, 0)\n        return p1, p2, p3, p4 \n```", "```py\n%%add_method_to Rectangle\n\n    def make_lines(self):\n        p1, p2, p3, p4 = self.make_points()\n        return Line(p1, p2), Line(p2, p3), Line(p3, p4), Line(p4, p1) \n```", "```py\n%%add_method_to Rectangle\n\n    def draw(self):\n        lines = self.make_lines()\n        for line in lines:\n            line.draw() \n```", "```py\nmake_turtle()\nline1.draw()\nline2.draw()\nbox1.draw() \n```", "```py\n%%add_method_to Rectangle\n\n    def grow(self, dwidth, dheight):\n        self.width += dwidth\n        self.height += dheight \n```", "```py\nbox2 = copy(box1)\nbox2.grow(60, 40)\nprint(box2) \n```", "```py\nRectangle(160, 90, Point(30, 20)) \n```", "```py\nmake_turtle()\nline1.draw()\nline2.draw()\nbox1.draw()\nbox2.draw() \n```", "```py\n%%add_method_to Rectangle\n\n    def translate(self, dx, dy):\n        self.corner.translate(dx, dy) \n```", "```py\nbox2.translate(30, 20)\nprint(box2) \n```", "```py\nRectangle(160, 90, Point(60, 40)) \n```", "```py\nmake_turtle()\nline1.draw()\nline2.draw()\nbox1.draw()\nbox2.draw() \n```", "```py\nbox1 is box2 \n```", "```py\nFalse \n```", "```py\nbox1.corner is box2.corner \n```", "```py\nTrue \n```", "```py\ncorner = Point(20, 20)\nbox3 = Rectangle(100, 50, corner)\nprint(box3) \n```", "```py\nRectangle(100, 50, Point(20, 20)) \n```", "```py\nfrom copy import deepcopy\n\nbox4 = deepcopy(box3) \n```", "```py\nbox3.corner is box4.corner \n```", "```py\nFalse \n```", "```py\nbox3.translate(50, 30)\nbox4.grow(100, 60) \n```", "```py\nmake_turtle()\nline1.draw()\nline2.draw()\nbox3.draw()\nbox4.draw() \n```", "```py\nshapes = [line1, line2, box3, box4] \n```", "```py\nmake_turtle()\n\nfor shape in shapes:\n    shape.draw() \n```", "```py\n def translated(self, dx=0, dy=0):\n        x = self.x + dx\n        y = self.y + dy\n        return Point(x, y) \n```", "```py\n# This cell tells Jupyter to provide detailed debugging information\n# when a runtime error occurs. Run it before working on the exercises.\n\n%xmode Verbose \n```", "```py\n%%add_method_to Line\n\ndef __eq__(self, other):\n    return None \n```", "```py\nstart1 = Point(0, 0)\nstart2 = Point(0, 0)\nend = Point(200, 100) \n```", "```py\nline_a = Line(start1, end)\nline_b = Line(start2, end)\nline_a == line_b    # should be True \n```", "```py\nTrue \n```", "```py\nline_c = Line(end, start1)\nline_a == line_c     # should be True \n```", "```py\nTrue \n```", "```py\nline_b == line_c     # should be True \n```", "```py\nTrue \n```", "```py\nline_d = Line(start1, start2)\nline_a == line_d    # should be False \n```", "```py\nFalse \n```", "```py\n%%add_method_to Line\n\n    def midpoint(self):\n        return Point(0, 0) \n```", "```py\nstart = Point(0, 0)\nend1 = Point(300, 0)\nend2 = Point(0, 150)\nline1 = Line(start, end1)\nline2 = Line(start, end2) \n```", "```py\nmid1 = line1.midpoint()\nprint(mid1) \n```", "```py\nPoint(150.0, 0.0) \n```", "```py\nmid2 = line2.midpoint()\nprint(mid2) \n```", "```py\nPoint(0.0, 75.0) \n```", "```py\nline3 = Line(mid1, mid2) \n```", "```py\nmake_turtle()\n\nfor shape in [line1, line2, line3]:\n    shape.draw() \n```", "```py\n%%add_method_to Rectangle\n\n    def midpoint(self):\n        return Point(0, 0) \n```", "```py\ncorner = Point(30, 20)\nrectangle = Rectangle(100, 80, corner) \n```", "```py\nmid = rectangle.midpoint()\nprint(mid) \n```", "```py\nPoint(80.0, 60.0) \n```", "```py\ndiagonal = Line(corner, mid) \n```", "```py\nmake_turtle()\n\nfor shape in [line1, line2, rectangle, diagonal]:\n    shape.draw() \n```", "```py\n%%add_method_to Rectangle\n\n    def make_diagonals(self):\n        return [] \n```", "```py\ncorner = Point(30, 20)\nrectangle = Rectangle(100, 80, corner) \n```", "```py\nlines = rectangle.make_cross() \n```", "```py\nmake_turtle()\n\nrectangle.draw()\nfor line in lines:\n    line.draw() \n```", "```py\nfrom jupyturtle import make_turtle, forward, left, right\nimport math\n\ndef draw_circle(radius):\n    circumference = 2 * math.pi * radius\n    n = 30\n    length = circumference / n\n    angle = 360 / n\n    left(angle / 2)\n    for i in range(n):\n        forward(length)\n        left(angle) \n```", "```py\ncorner = Point(20, 20)\nrectangle = Rectangle(100, 100, corner) \n```", "```py\ncenter = rectangle.midpoint()\nradius = rectangle.height / 2\n\ncircle = Circle(center, radius)\nprint(circle) \n```", "```py\nCircle(Point(70.0, 70.0), 50.0) \n```", "```py\nmake_turtle(delay=0.01)\n\nrectangle.draw()\ncircle.draw() \n```"]