["```py\nimport ray\nray.init()\n```", "```py\nimport time\n\ndatabase = [  ![1](assets/1.png)\n    \"Learning\", \"Ray\",\n    \"Flexible\", \"Distributed\", \"Python\", \"for\", \"Data\", \"Science\"\n]\n\ndef retrieve(item):\n    time.sleep(item / 10.)  ![2](assets/2.png)\n    return item, database[item]\n```", "```py\ndef print_runtime(input_data, start_time, decimals=1):\n    print(f'Runtime: {time.time() - start_time:.{decimals}f} seconds, data:')\n    print(*input_data, sep=\"\\n\")\n\nstart = time.time()\ndata = [retrieve(item) for item in range(8)]  ![1](assets/1.png)\nprint_runtime(data, start)  ![2](assets/2.png)\n```", "```py\nRuntime: 2.8 seconds, data:\n(0, 'Learning')\n(1, 'Ray')\n(2, 'Flexible')\n(3, 'Distributed')\n(4, 'Python')\n(5, 'for')\n(6, 'Data')\n(7, 'Science')\n```", "```py\n@ray.remote  ![1](assets/1.png)\ndef retrieve_task(item):\n    return retrieve(item)  ![2](assets/2.png)\n```", "```py\nstart = time.time()\ndata_references = [retrieve_task.remote(item) for item in range(8)]  ![1](assets/1.png)\ndata = ray.get(data_references)  ![2](assets/2.png)\nprint_runtime(data, start, 2)\n```", "```py\ndatabase_object_ref = ray.put(database)  ![1](assets/1.png)\n\n@ray.remote\ndef retrieve_task(item):\n    obj_store_data = ray.get(database_object_ref)  ![2](assets/2.png)\n    time.sleep(item / 10.)\n    return item, obj_store_data[item]\n```", "```py\nstart = time.time()\ndata_references = [retrieve_task.remote(item) for item in range(8)]\nall_data = []\n\nwhile len(data_references) > 0:  ![1](assets/1.png)\n    finished, data_references = ray.wait(data_references, num_returns=2, timeout=7.0)  ![2](assets/2.png)\n    data = ray.get(finished)\n    print_runtime(data, start, 3)  ![3](assets/3.png)\n    all_data.extend(data)  ![4](assets/4.png)\n```", "```py\nRuntime: 0.108 seconds, data:\n(0, 'Learning')\n(1, 'Ray')\nRuntime: 0.308 seconds, data:\n(2, 'Flexible')\n(3, 'Distributed')\nRuntime: 0.508 seconds, data:\n(4, 'Python')\n(5, 'for')\nRuntime: 0.709 seconds, data:\n(6, 'Data')\n(7, 'Science')\n```", "```py\n@ray.remote\ndef follow_up_task(retrieve_result):  ![1](assets/1.png)\n    original_item, _ = retrieve_result\n    follow_up_result = retrieve(original_item + 1)  ![2](assets/2.png)\n    return retrieve_result, follow_up_result  ![3](assets/3.png)\n\nretrieve_refs = [retrieve_task.remote(item) for item in [0, 2, 4, 6]]\nfollow_up_refs = [follow_up_task.remote(ref) for ref in retrieve_refs]  ![4](assets/4.png)\n\nresult = [print(data) for data in ray.get(follow_up_refs)]\n```", "```py\n((0, 'Learning'), (1, 'Ray'))\n((2, 'Flexible'), (3, 'Distributed'))\n((4, 'Python'), (5, 'for'))\n((6, 'Data'), (7, 'Science'))\n```", "```py\n@ray.remote  ![1](assets/1.png)\nclass DataTracker:\n    def __init__(self):\n        self._counts = 0\n\n    def increment(self):\n        self._counts += 1\n\n    def counts(self):\n        return self._counts\n```", "```py\n@ray.remote\ndef retrieve_tracker_task(item, tracker):  ![1](assets/1.png)\n    obj_store_data = ray.get(database_object_ref)\n    time.sleep(item / 10.)\n    tracker.increment.remote()  ![2](assets/2.png)\n    return item, obj_store_data[item]\n\ntracker = DataTracker.remote()  ![3](assets/3.png)\n\ndata_references = [retrieve_tracker_task.remote(item, tracker) for item in range(8)]  ![4](assets/4.png)\ndata = ray.get(data_references)\nprint(ray.get(tracker.counts.remote()))  ![5](assets/5.png)\n```", "```py\n@ray.remote\ndef task_owned():\n    return\n\n@ray.remote\ndef task(dependency):\n    res_owned = task_owned.remote()\n    return\n\nval = ray.put(\"value\")\nres = task.remote(dependency=val)\n```"]