- en: Chapter 22\. Acceptance Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a developer, it is easy to focus on the tests that directly surround your
    codebase: unit tests, integration tests, UI tests, and the like. These tests verify
    that the code is doing what you intend. They are an invaluable tool to keep your
    codebase regression free. They are also completely the *wrong* tool for building
    what a customer expects.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Developers write these tests with full knowledge of the code, which means the
    tests are biased toward that developer’s expectations. There is no guarantee that
    this tested behavior is actually what the *customer* wants, though.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following unit test:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This test might be airtight; it passes and catches any regression made in the
    code. However, when presented to a customer, you might be confronted with: “No,
    I wanted Texas-style chili! You know, no tomatoes or beans?” All the unit tests
    in the world won’t save you from building the wrong thing.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: This is where acceptance testing comes in. *Acceptance tests* check that you
    are building the correct product. While unit tests and integration tests are a
    form of *verification*, acceptance tests are *validation*. They validate that
    you are building what the user expects.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn about acceptance testing in Python. I’ll show
    you the `behave` framework, which uses the Gherkin language to define requirements
    in a whole new fashion.^([1](part0028_split_012.html#idm45644725935272)) You’ll
    walk through behavior-driven development (BDD) as a tool to clarify conversations.
    Acceptance testing is a crucial part of building a safety net; it will protect
    you from building the wrong thing.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Behavior-Driven Development
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The mismatch between customer expectations and software behavior is as old as
    software development. The problem stems from translating natural language to programming
    language. Natural language is rife with ambiguities, inconsistencies, and nuance.
    Programming languages are rigid. The computer does exactly what you tell it to
    do (even if it’s not what you meant). Even worse, it’s like a game of Telephone^([2](part0028_split_012.html#idm45644725926616))
    as the requirements get passed through a few people (customers, sales, managers,
    testers) before the test is ever written.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: As with everything in the software life cycle, this error case only gets more
    costly the longer it takes to fix. Ideally, you want to find out these issues
    as you’re coming up with user requirements. This is where behavior-driven development
    comes into play.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: The Gherkin Language
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Behavior-driven development*, first pioneered by [Daniel Terhorst-North](https://oreil.ly/MnziJ),
    is a practice that focuses on defining the behaviors in your system. BDD focuses
    on clarifying communications; you iterate over the requirements with the end user,
    defining the behaviors they want.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Before you write a single lick of code, you make sure that you have agreement
    on what the right thing to build is. The set of defined behaviors will *drive*
    what code you write. You work with the end user (or their proxy, such as a business
    analyst or product manager) to define your requirements as a specification. These
    specifications follow a formal language, to introduce a bit more rigidity in their
    definition. One of the most common languages for specifying requirements is Gherkin.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在您编写任何代码之前，确保您已就要构建的正确内容达成一致。定义的行为集将*推动*您编写的代码。您与最终用户（或其代理人，如业务分析师或产品经理）合作，将您的需求定义为一种规范。这些规范遵循一种正式的语言，以在其定义中引入更多的严格性。指定需求的最常见语言之一是Gherkin。
- en: 'Gherkin is a specification that follows the *Given-When-Then* (GWT) format.
    Every requirement is organized as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Gherkin是一种遵循*Given-When-Then*（GWT）格式的规范。每个需求都组织如下：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For instance, if I wanted to capture a requirement that checks for vegan substitution
    of a dish, I would write it as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我想捕捉一个检查菜肴素食替代的需求，我会这样写：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Another requirement might be that certain dishes can’t be made vegan:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个要求可能是某些菜品不能做成素食：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If the GWT format feels familiar, that’s because it’s identical to the AAA test
    organization you learned about in [Chapter 21](part0027_split_000.html#testing_strategy).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果GWT格式感觉熟悉，那是因为它与您在[第21章](part0027_split_000.html#testing_strategy)中学到的AAA测试组织完全相同。
- en: 'By working with your end users to write your requirements in this fashion,
    you benefit from a few key principles:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过与最终用户合作，以此方式编写您的需求，您将从以下几个关键原则中获益：
- en: Write using plain language
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用简单的语言编写
- en: There’s no need to delve into any programming languages or formal logic. Everything
    is written in a form that is intelligible to both business people and developers.
    This makes it incredibly easy to home in on what the end user actually wants.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 没有必要深入任何编程语言或正式逻辑。所有内容都以一种对业务人员和开发人员都能理解的形式编写。这使得非常容易抓住最终用户实际想要的东西。
- en: Build a shared vocabulary
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 建立共享词汇
- en: As the number of requirements increases, you find that you start having the
    same clauses in multiple requirements (see above with `When I ask for vegan substitutions`).
    This builds up your domain language and will make it easier for all involved parties
    to understand the requirements.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 随着需求数量的增加，您会发现多个需求中开始有相同的条款（如上所示，使用`When I ask for vegan substitutions`）。这会建立起您的领域语言，并使所有相关方更容易理解需求。
- en: Requirements are testable
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 需求是可测试的
- en: 'This is probably the biggest benefit of this requirement format. Because you
    are writing the requirement as GWT, you are inherently specifying an acceptance
    test to write. With the chili example used in this chapter, imagine if the Gherkin
    test was specified as such:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是这种需求格式的最大好处。因为您正在以GWT方式编写需求，所以您在本章中使用的辣椒示例作为Gherkin测试的指定方式：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It becomes much clearer what tests need to be written to act as acceptance
    tests. If the Gherkin test has any ambiguities, you can work with the end user
    to figure out what a concrete test should be. This can also help with traditionally
    vague requirements such as, “The Chili-Making Machine should be fast.” Instead,
    by focusing on a concrete test, you end up with a test like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 清楚地表明了需要编写哪些测试作为验收测试。如果Gherkin测试存在任何歧义，您可以与最终用户合作，找出一个具体的测试应该是什么样子。这也可以帮助解决传统上模糊的需求，例如，“辣椒制作机应该快速。”相反，通过专注于具体的测试，您最终得到像这样的测试：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Warning
  id: totrans-32
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: These requirements specifications are not a silver bullet to eliminate bugs
    in requirements. They are instead a mitigation strategy. If you have technical
    and business people review them before code is written, you will have a better
    chance of discovering ambiguities or mismatched intentions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这些需求规格并非消除需求中错误的灵丹妙药，而是一种缓解策略。如果在编写代码之前让技术和业务人员审查它们，您将更有可能发现歧义或意图不匹配。
- en: 'Once you start defining your tests in Gherkin, you can do something awesome:
    you can make your specifications *executable*.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您开始用Gherkin定义您的测试，您可以做一些令人惊讶的事情：您可以使您的规格*可执行*。
- en: Executable Specifications
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可执行规格
- en: '*Executable specifications* translate a set of requirements directly to code.
    This means that not only are your requirements *testable*, but they are *tests*
    as well. When the requirements change, your tests will change at the same time.
    This is the ultimate form of *traceability*, or the ability to connect your requirements
    to specific tests or code.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*可执行规范*直接将一组需求转换为代码。这意味着您的需求不仅是可测试的，而且也是*测试*。当需求变化时，您的测试也会同时变化。这是*可追溯性*的最终形式，或者连接您的需求到具体测试或代码的能力。'
- en: Discussion Topic
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论话题
- en: How does your organization track requirements? How do you trace those requirements
    to test cases? How do you handle requirements changing? Discuss how your processes
    would change if your requirements and tests were the same thing.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您的组织如何跟踪需求？如何将这些需求追溯到测试用例？如何处理需求变更？讨论如果您的需求和测试是相同的东西，您的流程会如何变化。
- en: The Python module [`behave`](https://oreil.ly/VywJX) allows you to back your
    Gherkin requirements with concrete tests. It does so by associating functions
    with specific clauses in the requirement.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Python模块[`behave`](https://oreil.ly/VywJX)允许您用具体的测试支持您的Gherkin需求。它通过将函数与需求中的特定条款关联起来来实现这一点。
- en: Tip
  id: totrans-40
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: By default, `behave` expects your Gherkin files to be in a folder called *features*
    and your Python functions (called steps) to be in a folder called *features/steps*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`behave`期望您的Gherkin文件在名为*features*的文件夹中，并且您的Python函数（称为步骤）在名为*features/steps*的文件夹中。
- en: 'Let’s look at the first Gherkin requirement I showed earlier in this chapter:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我在本章前面展示的第一个Gherkin需求：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With `behave`, I can write Python code that maps to each of these GWT statements:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`behave`，我可以编写与每个GWT语句相对应的Python代码：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Each step is represented as a decorator that matches the clause of the Gherkin
    requirement. The decorated function is what gets executed as part of the specification.
    In the above example, the Gherkin requirement would be represented by the following
    code (you do not have to write this; Gherkin does it for you):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 每个步骤表示为与Gherkin需求条款匹配的装饰器。装饰的函数是作为规范的一部分执行的。在上面的示例中，Gherkin需求将由以下代码表示（您无需编写此代码；Gherkin为您完成）：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To run this, first install `behave`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行此操作，请先安装`behave`：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, run `behave` on the folder containing your requirements and steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在包含您的需求和步骤的文件夹上运行`behave`：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You will see the following as output:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When this code is run in a terminal or an IDE, all the steps show up as green.
    If any step fails, the step turns red and you get a stack trace of what went wrong.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当此代码在终端或IDE中运行时，所有步骤显示为绿色。如果任何步骤失败，该步骤将变为红色，并显示失败的详细信息。
- en: Now you can tie your requirements directly to your acceptance tests. If an end
    user changes their mind, they can write a new test. If the GWT clause already
    exists for the new tests, that’s a win; new tests can be written without the help
    of a developer. If the clauses do not already exist, that’s also a win, because
    it kick-starts a conversation when the test immediately fails. Your end users
    and your business people need no Python knowledge to understand what you are testing.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以直接将您的需求与验收测试联系起来。如果最终用户改变主意，他们可以编写新的测试。如果GWT条款已经存在于新测试中，那是一个胜利；新测试可以在没有开发人员帮助的情况下编写。如果条款尚不存在，那也是一个胜利，因为当测试立即失败时，它会引发一场对话。您的最终用户和业务人员不需要Python知识即可理解您正在测试的内容。
- en: 'Use the Gherkin specifications to drive conversations about the software that
    you need to build. `behave` allows you to tie your acceptance tests directly to
    these requirements, and they serve as a way of focusing conversations. Using BDD
    prevents you from jumping right into coding the wrong thing. As the popular saying
    goes: “Weeks of coding will save you hours of planning.”^([3](part0028_split_012.html#idm45644725698696))'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Gherkin规范来推动关于需要构建的软件的对话。`behave`允许您直接将验收测试与这些需求联系起来，它们作为聚焦对话的一种方式。使用BDD防止您直接开始编写错误的内容。正如流行的说法所说：“几周的编码将节省您几小时的计划。”^([3](part0028_split_012.html#idm45644725698696))
- en: Additional behave Features
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外的behave特性
- en: The previous example was a bit bare-bones, but thankfully, `behave` provides
    some extra features to make test writing even easier.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例有些基本，但幸运的是，`behave`提供了一些额外的功能，使测试编写更加简便。
- en: Parameterized Steps
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数化步骤
- en: 'You may have noticed that I have two `Given` steps that are very similar:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，我有两个非常相似的`Given`步骤：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: and
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 和
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'It’d be silly to write two similar functions to link this in Python. `behave`
    lets you parameterize the steps to reduce the need for writing multiple steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Alternatively, you can stack clauses on a function if needed:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Parameterizing and reusing steps will help you build up vocabulary that is intuitive
    to use, which will reduce the cost of writing Gherkin tests.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Table-Driven Requirements
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In [Chapter 21](part0027_split_000.html#testing_strategy), I mentioned how
    you can parameterize tests so that all your pre-conditions and assertions are
    defined in a table. `behave` offers something very similar:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`behave` will automatically run a test for each table entry. This is a great
    way to run the same test on very similar data.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Step Matching
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, the basic decorators don’t have enough flexibility to capture what
    you are trying to express. You can tell `behave` to use regular expression parsing
    in your decorators. This is useful to make the Gherkin specifications feel more
    natural to write (especially getting around complex data formats or wonky grammar
    issues). Here’s an example that allows you to specify dishes with an optional
    “a” or “an” beforehand (so that dish names can be simplified).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Customizing the Test Life Cycle
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes you need to run code before or after your tests run. Say you need
    to set up a database before all the specifications are set, or tell a service
    to clear its cache between test runs. Just like `setUp` and `tearDown` in the
    built-in `unittest` module, `behave` offers functions that let you hook in functions
    before or after steps, features, or the entire test run. Use this to consolidate
    common setup code. To take full advantage of this functionality, you can define
    specifically named functions in a file named *environment.py*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Check out the [`behave` documentation](https://oreil.ly/NjEtf) for more information
    on controlling your environment. If you are more comfortable with `pytest` fixtures,
    check out `behave` [fixtures](https://oreil.ly/6ZZA4) for very similar ideas.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-80
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Functions like `before_feature` and `before_scenario` get the feature or scenario,
    respectively, passed to them. You can key off the names of these features and
    scenarios to do specific actions for specific parts of your tests.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Using Tags to Selectively Run Tests
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`behave` also offers the ability to tag certain tests with arbitrary text.
    These tags can be anything you want: `@wip` for work in progress, `@slow` for
    slow running tests, `@smoke` for a select few tests for running on each check-in,
    and so on.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'To tag a test in `behave`, just decorate your Gherkin scenario:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To run just tests with a specific tag, you can pass a `--tags` flag to your
    `behave` invocation:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Tip
  id: totrans-88
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If you’d like to exclude tests from being run, prefix the tags with a hyphen,
    as seen in this example where I exclude tests tagged with `wip` from being run:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '`behave code_examples/chapter22 --tags=-wip`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Report Generation
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using `behave` and BDD to drive your acceptance testing will not pay off if
    you are not involving your end users or their proxies. Find ways to make it easy
    for them to understand and use the Gherkin requirements.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: You can get a list of all step definitions by invoking `behave --steps-catalog`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you also need a way of showing test results to give your end users
    an idea of what is working and what is not. `behave` lets you format outputs in
    a variety of different ways (and you can define your own). Out of the box, there
    is also the ability to create reports from [JUnit](https://junit.org/junit5),
    a unit-testing framework designed for the Java language. JUnit writes its test
    results as a XML file, and a lot of tools were built to ingest and visualize the
    test results.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'To generate a JUnit test report, you can pass `--junit` to your `behave` invocation.
    Then, you can use a tool [`junit2html`](https://github.com/inorton/junit2html)
    to get a report for all of your test cases:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: An example output is shown in [Figure 22-1](part0028_split_011.html#behave_output).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '![ropy 2201](../images/00041.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
- en: Figure 22-1\. Example `behave` report with `junit2html`
  id: totrans-99
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: There are plenty of JUnit report generators, so look around for one you like
    and use it to produce HTML reports of your test results.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Closing Thoughts
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If all your tests pass but don’t deliver what the end user wants, you have wasted
    time and effort. It is costly to build the right thing; you want to try and get
    it right the first time. Use BDD to drive crucial conversations about the requirements
    for your system. Once you have requirements, use `behave` and the Gherkin language
    to write acceptance tests. These acceptance tests become your safety net for ensuring
    that you deliver what the end user wants.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll continue to learn how to repair holes in your safety
    net. You’ll learn about property-based testing with a Python tool called `Hypothesis`.
    It can generate test cases for you, including tests you might never have thought
    of. You can rest easier knowing that your tests have broader coverage than ever
    before.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](part0028_split_000.html#idm45644725935272-marker)) The Gherkin language
    was created by Aslak Hellesøy. His wife suggested that his BDD testing tool be
    named Cucumber (apparently for no specific reason), and he wanted to distinguish
    the specfication language from the testing tool itself. Since a gherkin is a small,
    pickled cucumber, he continued the theme, and the Gherkin specfication language
    was born.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](part0028_split_001.html#idm45644725926616-marker)) Telephone is a game
    where everyone sits in a circle, and one person whispers a message to another.
    The message continues to get whispered around the circle until it reaches the
    origin. Everyone has a laugh at how the message has gotten distorted.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](part0028_split_004.html#idm45644725698696-marker)) While this quote’s
    author is anonymous, I first came across it on the [Programming Wisdom Twitter
    account](https://oreil.ly/rKsVj).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](part0028_split_004.html#idm45644725698696-marker)) 虽然这句话的作者是匿名的，但我最先看到它是在[Programming
    Wisdom Twitter账号](https://oreil.ly/rKsVj)上。
