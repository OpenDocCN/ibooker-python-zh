["```py\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\n\nurl = 'http://en.wikipedia.org/wiki/Python_(programming_language)'\nhtml = urlopen(url)\nbs = BeautifulSoup(html, 'html.parser')\ncontent = bs.find('div', {'id':'mw-content-text'}).find_all('p')\ncontent = [p.get_text() for p in content]\n\n```", "```py\nPython is a high-level, general-purpose programming language. Its \ndesign philosophy emphasizes code readability with the use of \nsignificant indentation via the off-side rule.[33]\n\n```", "```py\ndef replace_newlines(text):\n    return text.replace('\\n', ' ')\n\ndef make_lowercase(text):\n    return text.lower()\n\n```", "```py\nIt uses dynamic name resolution (late binding), which binds method \nand variable names during program execution.\nIts design offers some support for functional programming \nin the Lisp tradition.\n```", "```py\nIt uses dynamic name resolution (late binding), which binds method\nand variable names during program execution. Its design offers some \nsupport for functional programming in the Lisp tradition.\n```", "```py\ndef split_sentences(text):\n    return [s.strip() for s in text.split('. ')]\n```", "```py\nif (c = 1) { ...}\n```", "```py\ncapable of exception handling and interfacing with the Amoeba \noperating system.[13] Its implementation began in December 1989.[44]\n\n```", "```py\nimport re\n\nCITATION_REGEX = re.compile('\\[[0-9]*\\]')\ndef strip_citations(text):\n    return re.sub(CITATION_REGEX, '', text)\n\n```", "```py\ndef strip_citations(text):\n    return re.sub(r'\\[[0-9]*\\]', '', text)\n```", "```py\nall versions of Python (including 2.7[56]) had security issues\n```", "```py\ndynamic name resolution (late binding), which binds method\n```", "```py\nPARENS_REGEX = re.compile('\\(.*\\)')\ndef remove_parentheses(text):\n    return re.sub(PARENS_REGEX, '', text)\n```", "```py\nThis has the advantage of avoiding a classic C error of mistaking \nan assignment operator = for an equality operator == in conditions:\nif (c = 1) { ...} is syntactically valid\n```", "```py\nPARENS_REGEX = re.compile('\\([a-z A-Z \\+\\.,\\-]{0,100}\\)')\ndef remove_parentheses(text):\n    return re.sub(PARENS_REGEX, '', text)\n```", "```py\nHello world program:\n```", "```py\nDESCRIPTION_REGEX = re.compile('\\n[a-z A-Z]*:')\ndef remove_descriptions(text):\n    return re.sub(DESCRIPTION_REGEX, '', text)\n```", "```py\n>>> import string\n>>> string.punctuation\n'!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n\n```", "```py\npuncts = [re.escape(c) for c in string.punctuation]\nPUNCTUATION_REGEX = re.compile('|'.join(puncts))\n\ndef remove_punctuation(text):\n    return re.sub(PUNCTUATION_REGEX, '', text)\n\n```", "```py\n python\\xa020 was released...\n```", "```py\ndef normalize(text):\n    return unicodedata.normalize('NFKD', text)\n```", "```py\ntext_operations = [\n    strip_citations,\n    remove_parentheses,\n    remove_descriptions,\n    replace_newlines,\n    split_sentences,\n    make_lowercase,\n    remove_punctuation,\n    normalize\n]\n\ncleaned = content\nfor op in text_operations:\n    if type(cleaned) == list:\n        cleaned = [op(c) for c in cleaned]\n    else:\n        cleaned = op(cleaned)\n\nprint(cleaned)\n\n```", "```py\ndef getNgrams(text, n):\n    text = text.split(' ')\n    return [text[i:i+n] for i in range(len(text)-n+1)]\n\ngetNgrams('web scraping with python', 2)\n\n```", "```py\n[['web', 'scraping'], ['scraping', 'with'], ['with', 'python']]\n```", "```py\nfrom collections import Counter\n\ndef getNgrams(text, n):\n    text = text.split(' ')\n    return [' '.join(text[i:i+n]) for i in range(len(text)-n+1)]\n\ndef countNGramsFromSentences(sentences, n):\n    counts = Counter()\n    for sentence in sentences:\n        counts.update(getNgrams(sentence, n))\n    return counts\n\n```", "```py\ncounts = countNGramsFromSentences(cleaned, 2)\nprint(counts.most_common())\n```", "```py\n[('in the', 19), ('of the', 19), ('such as', 18), ('as a', 14),\n('in python', 12), ('python is', 9), ('of python', 9),\n('the python', 9)...\n\n```", "```py\npip install pandas\n```", "```py\nimport pandas as pd\n```", "```py\nfrom pandas import array\nfrom pandas.DataFrame import min\n\n```", "```py\nfrom pandas import DataFrame\n```", "```py\ndf = pd.DataFrame([['a', 1], ['b', 2], ['c', 3]])\ndf.head()\n\n```", "```py\ndf = pd.read_csv('countries.csv')\ndf.head(10)\n```", "```py\ndf.rename(columns={\n    '#': 'Order',\n    'Country/territory': 'Country',\n    'Date of first store': 'Date',\n    'First outlet location': 'Location',\n    'Max. no. ofoperatingoutlets': 'Outlets'    \n}, inplace=True)\n\n```", "```py\ndf = df[['Order', 'Country', 'Date', 'Location', 'Outlets']]\n```", "```py\nimport re\n\ndate_regex = re.compile('[A-Z][a-z]+ [0-9]{1,2}, [0-9]{4}')\ndf['Date'] = df['Date'].apply(lambda d: date_regex.findall(d)[0])\n```", "```py\ndf['Date'] = pd.to_datetime(df['Date'])\n```", "```py\nint_regex = re.compile('[0-9,]+')\n\ndef str_to_int(s):\n    s = int_regex.findall(s)[0]\n    s = s.replace(',','')\n    return int(s)\n\ndf['Outlets'] = df['Outlets'].apply(str_to_int)\n\n```", "```py\ndef str_to_int(s):\n    try:\n        s = int_regex.findall(s)[0]\n        s = s.replace(',','')\n    except:\n        print(f'Whoops: {s}')\n    return int(s)\n```", "```py\ndf.set_index(['Order'], inplace=True)\ndf.head()\n```", "```py\ndf.sort_values(by=['Outlets', 'Date'], ascending=False)\n```", "```py\ndf.query('Outlets < 100')\n```", "```py\ndf.query('Date is not None')\n```", "```py\ndf.query('Date.isnull()')\ndf.query('Date.notnull()')\n\n```", "```py\ndf.query('Outlets < 100 & Date < \"01-06-1990\"')\n\n```", "```py\ndf.query('Outlets < 100 | Date < \"01-06-1990\"')\n```"]