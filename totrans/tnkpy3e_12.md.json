["```py\nlst = ['zero', 'one', 'two'] \n```", "```py\nlst[1] \n```", "```py\n'one' \n```", "```py\nnumbers = {}\nnumbers \n```", "```py\n{} \n```", "```py\nnumbers['zero'] = 0 \n```", "```py\nnumbers \n```", "```py\n{'zero': 0} \n```", "```py\nnumbers['one'] = 1\nnumbers['two'] = 2\nnumbers \n```", "```py\n{'zero': 0, 'one': 1, 'two': 2} \n```", "```py\nnumbers['two'] \n```", "```py\n2 \n```", "```py\nnumbers['three'] \n```", "```py\nKeyError: 'three' \n```", "```py\nlen(numbers) \n```", "```py\n3 \n```", "```py\nnumbers = {'zero': 0, 'one': 1, 'two': 2} \n```", "```py\nempty = dict()\nempty \n```", "```py\n{} \n```", "```py\nnumbers_copy = dict(numbers)\nnumbers_copy \n```", "```py\n{'zero': 0, 'one': 1, 'two': 2} \n```", "```py\n'one' in numbers \n```", "```py\nTrue \n```", "```py\n1 in numbers \n```", "```py\nFalse \n```", "```py\n1 in numbers.values() \n```", "```py\nTrue \n```", "```py\nword_list = open('words.txt').read().split()\nlen(word_list) \n```", "```py\n113783 \n```", "```py\ndef reverse_word(word):\n    return ''.join(reversed(word)) \n```", "```py\ndef too_slow():\n    count = 0\n    for word in word_list:\n        if reverse_word(word) in word_list:\n            count += 1\n    return count \n```", "```py\nlen(word_list)**2 \n```", "```py\n12946571089 \n```", "```py\nword_dict = {}\nfor word in word_list:\n    word_dict[word] = 1 \n```", "```py\ndef much_faster():\n    count = 0\n    for word in word_dict:\n        if reverse_word(word) in word_dict:\n            count += 1\n    return count \n```", "```py\ncounter = {} \n```", "```py\ncounter['a'] = 1 \n```", "```py\ncounter['a'] += 1 \n```", "```py\ncounter \n```", "```py\n{'a': 2} \n```", "```py\ndef value_counts(string):\n    counter = {}\n    for letter in string:\n        if letter not in counter:\n            counter[letter] = 1\n        else:\n            counter[letter] += 1\n    return counter \n```", "```py\ncounter = value_counts('brontosaurus')\ncounter \n```", "```py\n{'b': 1, 'r': 2, 'o': 2, 'n': 1, 't': 1, 's': 2, 'a': 1, 'u': 2} \n```", "```py\ncounter = value_counts('banana')\ncounter \n```", "```py\n{'b': 1, 'a': 3, 'n': 2} \n```", "```py\nfor key in counter:\n    print(key) \n```", "```py\nb\na\nn \n```", "```py\nfor value in counter.values():\n    print(value) \n```", "```py\n1\n3\n2 \n```", "```py\nfor key in counter:\n    value = counter[key]\n    print(key, value) \n```", "```py\nb 1\na 3\nn 2 \n```", "```py\nd = {4: ['r', 'o', 'u', 's']}\nd \n```", "```py\n{4: ['r', 'o', 'u', 's']} \n```", "```py\nletters = list('abcd')\nd[letters] = 4 \n```", "```py\nTypeError: unhashable type: 'list' \n```", "```py\ndef is_palindrome(word):\n  \"\"\"Check if a word is a palindrome.\"\"\"\n    return reverse_word(word) == word \n```", "```py\ncount = 0\n\nfor word in word_dict:\n    if is_palindrome(word):\n        count +=1\n\ncount \n```", "```py\n91 \n```", "```py\npalindromes = []\n\nfor word in word_dict:\n    if is_palindrome(word):\n        palindromes.append(word)\n\npalindromes[:10] \n```", "```py\n['aa', 'aba', 'aga', 'aha', 'ala', 'alula', 'ama', 'ana', 'anna', 'ava'] \n```", "```py\nlong_palindromes = []\n\nfor word in palindromes:\n    if len(word) >= 7:\n        long_palindromes.append(word)\n\nlong_palindromes \n```", "```py\n['deified', 'halalah', 'reifier', 'repaper', 'reviver', 'rotator', 'sememes'] \n```", "```py\ndef fibonacci(n):\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    return fibonacci(n-1) + fibonacci(n-2) \n```", "```py\nknown = {0:0, 1:1}\n\ndef fibonacci_memo(n):\n    if n in known:\n        return known[n]\n\n    res = fibonacci_memo(n-1) + fibonacci_memo(n-2)\n    known[n] = res\n    return res \n```", "```py\n# This cell tells Jupyter to provide detailed debugging information\n# when a runtime error occurs. Run it before working on the exercises.\n\n%xmode Verbose \n```", "```py\ncounter = value_counts('brontosaurus') \n```", "```py\ncounter.get('b', 0) \n```", "```py\n1 \n```", "```py\ncounter.get('c', 0) \n```", "```py\n0 \n```", "```py\ndef find_repeats(counter):\n  \"\"\"Makes a list of keys with values greater than 1.\n\n counter: dictionary that maps from keys to counts\n\n returns: list of keys\n \"\"\"\n    return [] \n```", "```py\ncounter1 = value_counts('brontosaurus')\ncounter2 = value_counts('apatosaurus') \n```", "```py\nword = 'schooled'\nfirst = word[0:None:2]\nfirst \n```", "```py\n'shoe' \n```", "```py\nsecond = word[1::2]\nsecond \n```", "```py\n'cold' \n```", "```py\nfor word in word_list:\n    if len(word) >= 8 and is_interlocking(word):\n        first = word[0::2]\n        second = word[1::2]\n        print(word, first, second) \n```"]