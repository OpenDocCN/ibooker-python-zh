- en: Chapter 5\. Concluding Thoughts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章 总结思考
- en: When substantial new features appear in Python, they’re new for everybody. I
    have nearly two decades’ experience with Python, but I still found Asyncio difficult
    to learn—even taking into account that I had already worked with Twisted and Tornado
    on previous projects, so event-based programming was not new to me. I found the
    `asyncio` API to be much more complex than I had expected. Part of this was due
    to a lack of high-level documentation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当Python中出现重要的新功能时，对所有人来说都是新的。我有近20年的Python经验，但我发现Asyncio仍然很难学习——即使考虑到我之前已经在项目中使用过Twisted和Tornado，因此事件驱动的编程对我来说并不陌生。我发现`asyncio`的API比我预期的复杂得多。部分原因是缺乏高层次的文档。
- en: 'Now, having spent the time to learn how to use Asyncio in Python, I feel a
    lot more comfortable with it, and this progression will likely be similar for
    you too. There is a coherent structure and purpose behind the design of the API,
    and hopefully this book will make it much easier for you to learn than it was
    for me. With a basic understanding in place, I’m now finding it quite easy to
    write new Asyncio-based code without having to constantly refer back to the docs:
    this is a very good sign, and certainly isn’t the case with all the standard library
    modules.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，花时间学习如何在Python中使用Asyncio后，我对它感到更加舒适，你也很可能会有类似的进步。API的设计背后有一种连贯的结构和目的，希望这本书能让你学习起来比我容易得多。有了基本的理解，我现在发现写基于Asyncio的新代码变得相当容易，而不必总是参考文档：这是一个非常好的迹象，并且显然不是所有标准库模块都是这样。
- en: There are still some rough edges, though. The `asyncio` standard library will
    continue to have a large, fine-grained API, since it caters to both framework
    designers and end-user developers. This means that we—as end-user developers—will
    have to learn which parts of the API are applicable to us and which are not. In
    time, as the third-party library ecosystem for `asyncio` grows and matures, we
    will likely find ourselves working with those library APIs rather than the raw
    `asyncio` standard library API. Existing libraries like `aiohttp` and Sanic are
    good examples of this. The `asyncio` API itself will also continue to improve
    as more people gain experience with it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仍然存在一些棘手的地方。`asyncio`标准库将继续拥有大而精细的API，因为它面向框架设计者和最终用户开发者。这意味着作为最终用户开发者的我们需要学习哪些API适用于我们，哪些不适用。随着时间的推移，随着`asyncio`的第三方库生态系统的增长和成熟，我们可能会发现自己更多地使用那些库的API，而不是原始的`asyncio`标准库API。像`aiohttp`和Sanic这样的现有库就是很好的例子。随着更多人积累经验，`asyncio`的API本身也将继续改进。
- en: 'I also made unexpected discoveries along the way: by happy coincidence, it
    turned out that I needed to finally learn ZeroMQ at around the same time this
    book was being written, and I’m finding that `asyncio` in combination with `pyzmq`
    makes network programming a joy. My recommendation for the best way to learn Asyncio
    is to experiment, try things out and have fun.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我也在这一过程中做出了一些意外的发现：令人欣喜的巧合是，在我写这本书的同时，我发现自己需要最终学习ZeroMQ，并且我发现`asyncio`与`pyzmq`结合起来使网络编程变得非常愉快。我建议学习Asyncio的最佳方式是实验，尝试并享受过程。
