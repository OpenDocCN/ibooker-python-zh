["```py\ndef longest_word(words):\n```", "```py\n>>> longest_word(['a', 'bb', 'ccc'])\n'ccc'\n```", "```py\n>>> longest_word(['cat', 'dog', 'bird']) \n'bird'\n```", "```py\n>>> longest_word(['happy', 'birthday', 'my', 'cat']) \n'birthday'\n```", "```py\n>>> longest_word(['happy']) \n'happy'\n```", "```py\n>>> longest_word(['cat', 'dog', 'me']) \n'cat'\n```", "```py\n>>> longest_word(['', ''])\n''\n```", "```py\ndef longest_word(words):\n ''' \n words is a list of words\n\n return the word from the list with the most characters\n if multiple words are the longest, return the first \n such word \n '''\n    longest = \"\"\n    for i in range(0,len(words)):\n        if len(words[i]) >= len(longest):     #1\n            longest = words[i]\n    return longest\n```", "```py\n   if len(words[i]) >= len(longest):\n        longest = words[i]\n```", "```py\n>>> longest_word(['cat', 'dog', 'me']) \n'cat'\n```", "```py\n>>> longest_word(['cat', 'dog', 'me']) \n'cat'\n```", "```py\ndef longest_word(words): \n ''' \n words is a list of words\n\n return the word from the list with the most characters\n if multiple words are the longest, return the first \n such word \n\n >>> longest_word(['cat', 'dog', 'bird']) #1\n **'bird'** #1\n #1\n **>>> longest_word(['happy', 'birthday', 'my', 'cat'])** #1\n **'birthday'** #1\n\n **>>> longest_word(['happy'])** #1\n **'happy'** #1\n #1\n **>>> longest_word(['cat', 'dog', 'me'])** #1\n **'cat'** #1\n #1\n **>>> longest_word(['', ''])** #1\n **''** #1\n **'''** #1\n    longest = ''                             #2\n    for i in range(0,len(words)):            #2\n        if len(words[i]) > len(longest):     #2\n            longest = words[i]               #2\n    return longest                           #2\n**import doctest                  ** #3\n**doctest.testmod(verbose=True)   ** #3\n```", "```py\nTrying:\n    longest_word(['cat', 'dog', 'bird'])  \nExpecting:\n    'bird'\nok              #1\nTrying:\n    longest_word(['happy', 'birthday', 'my', 'cat'])\nExpecting:\n    'birthday'\nok               #2\nTrying:\n    longest_word(['happy'])\nExpecting:\n    'happy'\nok             #3\nTrying:\n    longest_word(['cat', 'dog', 'me'])\nExpecting:\n    'cat'\nok           #4\nTrying:\n    longest_word(['', ''])\nExpecting:\n    ''\nok                   #5\n1 items had no tests:          #6\n    __main__                   #6\n1 items passed all tests:          #7\n   5 tests in __main__.longest_word\n5 tests in 2 items.\n5 passed and 0 failed.     #8\nTest passed.\n```", "```py\nimport doctest\ndoctest.testmod(verbose=True)\n```", "```py\nif len(words[i]) > len(longest):\n```", "```py\nif len(words[i]) >= len(longest):\n```", "```py\ndoctest.testmod()\n```", "```py\n**********************************************************************\nFile \"c:\\Users\\leo\\Copilot_book\\Chapter6\\test_longest_word.py\", \nline 12, in __main__.longest_word\nFailed example:\n    longest_word(['cat', 'dog', 'me'])\nExpected:\n    'cat'\nGot:\n    'dog'\n**********************************************************************        \n1 items had failures:\n   1 of   5 in __main__.longest_word\n***Test Failed*** 1 failures.\n```", "```py\ndef most_students(classroom):\n '''\n classroom is a list of lists\n Each ' ' is an empty seat\n Each 'S' is a student\n How many new students can sit in a row? #1\n **'''**\n    max_students = 0\n    for row in classroom:\n        students = 0\n        for seat in row:\n            if seat == 'S':\n                students += 1\n            else:\n                students = 0\n            if students > max_students:\n                max_students = students\n    return max_students\n```", "```py\ndef most_students(classroom):\n '''\n classroom is a list of lists\n Each ' ' is an empty seat\n Each 'S' is a student\n\n How many new students can sit in a row?\n\n >>> most_students([['S', ' ', 'S', 'S', 'S', 'S'], \\ #1\n **['S', 'S', 'S', 'S', 'S', 'S'], \\** \n **[' ', 'S', ' ', 'S', ' ', ' ']])** \n **4**\n **'''**\n    max_students = 0\n    for row in classroom:\n        students = 0\n        for seat in row:\n            if seat == 'S':\n                students += 1\n            else:\n                students = 0\n            if students > max_students:\n                max_students = students\n    return max_students\n\n**import doctest**\n**doctest.testmod(verbose=False)**\n```", "```py\n**********************************************************************\nFailed example:\n    most_students([['S', ' ', 'S', 'S', 'S', 'S'],\n                   ['S', 'S', 'S', 'S', 'S', 'S'], \n                   [' ', 'S', ' ', 'S', ' ', ' ']])\nExpected:\n    4\nGot:\n    6\n**********************************************************************\n1 items had failures:\n   1 of   1 in __main__.most_students\n***Test Failed*** 1 failures.\n```", "```py\n >>> most_students([['S', ' ', 'S', 'S', 'S', 'S'], \\ \n [' ', 'S', 'S', 'S', 'S', 'S'], \\ #1\n **[' ', 'S', ' ', 'S', ' ', ' ']])** \n **4**\n```", "```py\n max_students = 0    #1\n    for row in classroom:     #2\n        students = 0             #3\n        for seat in row:           #4\n            if seat == 'S':        #5\n                students += 1      #5\n            else:                        #6\n                students = 0             #6\n            if students > max_students:     #7\n                max_students = students    \n    return max_students\n```", "```py\ndef most_students(classroom):\n '''\n classroom is a list of lists #1\n Each ' ' is an empty seat #1\n Each 'S' is a student #1\n #1\n Return the maximum total number of ' ' characters #1\n **In a given row.** \n\n **>>> most_students([['S', ' ', 'S', 'S', 'S', 'S'], \\**\n **[' ', 'S', 'S', 'S', 'S', 'S'], \\**\n **[' ', 'S', ' ', 'S', ' ', ' ']])**\n **4**\n **'''**\n    max_seats = 0\n    for row in classroom:\n        seats = row.count(' ')      #2\n        if seats > max_seats:     #3\n            max_seats = seats              #3\n    return max_seats\n\n**import doctest**\n**doctest.testmod(verbose=False)**\n```", "```py\ndef most_students(classroom):\n '''\n classroom is a list of lists\n Each ' ' is an empty seat\n Each 'S' is a student\n```", "```py\nHow many new students can sit in a row?\n```", "```py\nReturn the maximum total number of ' ' characters in a given row. \n```", "```py\n    >>> most_students([['S', 'S', 'S'], \\\n                       ['S', 'S', 'S'], \\\n                       ['S', 'S', 'S']])\n    0\n```", "```py\n    >>> most_students([['S', 'S', 'S'], \\\n                       [' ', ' ', ' '], \\\n                       ['S', 'S', 'S']])\n    3\n```", "```py\n    >>> most_students([[' ', ' ', 'S'], \\\n                       ['S', ' ', ' '], \\\n                       ['S', 'S', 'S']])\n    2\n```", "```py\ndef most_students(classroom):\n '''\n classroom is a list of lists\n Each ' ' is an empty seat\n Each 'S' is a student\n\n Return the maximum total number of ' ' characters in a \n given row. \n\n >>> most_students([['S', ' ', 'S’, 'S', 'S', 'S'], \\\n [' ', 'S', 'S', 'S', 'S', 'S'], \\\n [' ', 'S', ' ', 'S', ' ', ' ']])\n 4\n >>> most_students([['S', 'S', 'S'], \\\n ['S', 'S', 'S'], \\\n ['S', 'S', 'S']])\n 0\n >>> most_students([['S', 'S', 'S'], \\\n [' ', ' ', ' '], \\\n ['S', 'S', 'S']])\n 3\n >>> most_students([[' ', ' ', 'S'], \\\n ['S', ' ', ' '], \\\n ['S', 'S', 'S']])\n 2\n '''\n    max_seats = 0\n    for row in classroom:\n        seats = row.count(' ')\n        if seats > max_seats:\n            max_seats = seats\n    return max_seats\n\nimport doctest\ndoctest.testmod(verbose=False)\n```", "```py\ndef tot_pass_yds_player(input_file, player):     #1\n **\"\"\"**\n **input_file is a string that is the name of a file**\n **player is the name of a player**\n\n **The file is a csv file with a header row**\n **Column 4 is the player's name and column**\n **8 is the number of passing yards for that player**\n\n **return the total number of passing yards for the player**\n **\"\"\"**\n    import csv\n    with open(input_file, 'r') as csvfile:\n        reader = csv.reader(csvfile)\n        next(reader)\n        total = 0\n        for row in reader:\n            if row[3] == player:\n                total += int(row[7])\n        return total\n```", "```py\ndef tot_pass_yds_player(input_file, player):\n \"\"\"\n input_file is a string that is the name of a file\n player is the name of a player\n\n The file is a csv file with a header row\n Column 4 is the player's name and column\n 8 is the number of passing yards for that player\n\n return the total number of passing yards for the player\n\n >>> tot_pass_yds_player('test_file.csv’, 'Aaron Rodgers')\n 800\n >>> tot_pass_yds_player('test_file.csv', 'Kerryon Johnson')\n 5\n >>> tot_pass_yds_player('test_file.csv', 'Leo Porter')\n 0\n >>> tot_pass_yds_player('test_file.csv', 'Jared Goff')\n 190\n >>> tot_pass_yds_player('test_file.csv', 'Dan Zingaro')\n -10\n >>> tot_pass_yds_player('test_file.csv', 'Tom Brady')\n 0 #1\n    \"\"\"\n    import csv\n    with open(input_file, 'r') as csvfile:\n        reader = csv.reader(csvfile)\n        next(reader)\n        total = 0\n        for row in reader:\n            if row[3] == player:\n                total += int(row[7])\n        return total\n\nimport doctest\ndoctest.testmod(verbose=False)\n```", "```py\ndef tot_pass_yds_player(input_file, player):\n \"\"\"\n input_file is a string that is the name of a file\n player is the name of a player\n The file is a csv file with a header row\n The 4th Column is the player's name and the 8th column\n is the number of passing yards for that player\n\n return the total number of passing yards for the player\n\n >>> tot_pass_yds_player('test_file.csv', 'Aaron Rodgers')\n 800 #1\n **>>> tot_pass_yds_player('test_file.csv', 'Kerryon Johnson')**\n **5**\n **>>> tot_pass_yds_player('test_file.csv', 'Leo Porter')**\n **0**\n **>>> tot_pass_yds_player('test_file.csv', 'Jared Goff')**\n **190**\n **>>> tot_pass_yds_player('test_file.csv', 'Dan Zingaro')**\n **-10**\n **>>> tot_pass_yds_player('test_file.csv', 'Tom Brady')**\n **0** \n    \"\"\"\n    import csv\n    with open(input_file, 'r') as csvfile:\n        reader = csv.reader(csvfile)\n        next(reader)\n        total = 0\n        for row in reader:\n            if row[3] == player:\n                total += int(row[7])\n        return total\n\nimport doctest\ndoctest.testmod(verbose=False)\n```", "```py\nFailed example:\n    tot_pass_yds_player('test_file.csv', 'Aaron Rodgers')\nExpected:\n    800 \nGot:\n    800\n```", "```py\ndef calculate_average(numbers):\n    if not numbers:\n        return 0\n    return sum(numbers) / len(numbers)\n# Test cases:\ncalculate_average([1, 2, 3, 4, 5])\ncalculate_average([10, 20, 30])\ncalculate_average([])\ncalculate_average([-1, -2, -3, -4, -5])\ncalculate_average([1000000, 2000000, 3000000])\ncalculate_average([3.5, 4.5, 5.5])\ncalculate_average([1, 2, \"a\", 4])\ncalculate_average([0])\n```", "```py\ndef busiest_day(traffic_data):\n  most_visitors = 0\n  busiest_day = None\n  for day in traffic_data:\n    if day[\"visitors\"] > most_visitors:\n      most_visitors = day[\"visitors\"]\n      busiest_day = day[\"weekday\"]\n  return busiest_day\n```", "```py\ndef is_palindrome(s):\n    \"\"\"\n    Return True if string s reads the same forward and backward.\n    >>> is_palindrome(\"racecar\")\n    True\n    >>> is_palindrome(\"hello\")\n    False\n    >>> is_palindrome(\"A man, a plan, a canal, Panama\")\n    True\n    >>> is_palindrome(\"\")\n    True\n    >>> is_palindrome(\"a\")\n    True\n    >>> is_palindrome(\"Noon\")\n    True\n    \"\"\"\n    cleaned = ''.join(char.lower() for char in s if char.isalnum())\n    return cleaned == cleaned[::-1]\n```", "```py\ndef find_max(numbers):\n    \"\"\" \n    Returns the maximum number from a list.\n    >>> find_max([1, 2, 3, 4, 5])\n    5\n    >>> find_max([-1, -2, -3, -4, -5])\n    -1 \n    >>> find_max([42])\n    42\n    >>> find_max([])\n    None\n    \"\"\" \n    if not numbers:\n        return None\n    max_number = numbers[0]\n    for num in numbers:\n        if num > max_number:\n            max_number = num\n    return max_number\n```"]