- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python is easy to learn. You’re probably here because now that your code runs
    correctly, you need it to run faster. You like the fact that your code is easy
    to modify and you can iterate with ideas quickly. The trade-off between *easy
    to develop* and *runs as quickly as I need* is a well-understood and often-bemoaned
    phenomenon. There are solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Some people have serial processes that have to run faster. Others have problems
    that could take advantage of multicore architectures, clusters, or graphics processing
    units. Some need scalable systems that can process more or less as expediency
    and funds allow, without losing reliability. Others will realize that their coding
    techniques, often borrowed from other languages, perhaps aren’t as natural as
    examples they see from others.
  prefs: []
  type: TYPE_NORMAL
- en: In this book we will cover all of these topics, giving practical guidance for
    understanding bottlenecks and producing faster and more scalable solutions. We
    also include some war stories from those who went ahead of you, who took the knocks
    so you don’t have to.
  prefs: []
  type: TYPE_NORMAL
- en: Python is well suited for rapid development, production deployments, and scalable
    systems. The ecosystem is full of people who are working to make it scale on your
    behalf, leaving you more time to focus on the more challenging tasks around you.
  prefs: []
  type: TYPE_NORMAL
- en: Who This Book Is For
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You’ve used Python for long enough to have an idea about why certain things
    are slow and to have seen technologies like Cython, `numpy`, and PyPy being discussed
    as possible solutions. You might also have programmed with other languages and
    so know that there’s more than one way to solve a performance problem.
  prefs: []
  type: TYPE_NORMAL
- en: While this book is primarily aimed at people with CPU-bound problems, we also
    look at data transfer and memory-bound solutions. Typically, these problems are
    faced by scientists, engineers, quants, and academics.
  prefs: []
  type: TYPE_NORMAL
- en: We also look at problems that a web developer might face, including the movement
    of data and the use of just-in-time (JIT) compilers like PyPy and asynchronous
    I/O for easy-win performance gains.
  prefs: []
  type: TYPE_NORMAL
- en: It might help if you have a background in C (or C++, or maybe Java), but it
    isn’t a prerequisite. Python’s most common interpreter (CPython—the standard you
    normally get if you type `python` at the command line) is written in C, and so
    the hooks and libraries all expose the gory inner C machinery. There are lots
    of other techniques that we cover that don’t assume any knowledge of C.
  prefs: []
  type: TYPE_NORMAL
- en: You might also have a lower-level knowledge of the CPU, memory architecture,
    and data buses, but again, that’s not strictly necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Who This Book Is Not For
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is meant for intermediate to advanced Python programmers. Motivated
    novice Python programmers may be able to follow along as well, but we recommend
    having a solid Python foundation.
  prefs: []
  type: TYPE_NORMAL
- en: We don’t cover storage-system optimization. If you have a SQL or NoSQL bottleneck,
    then this book probably won’t help you.
  prefs: []
  type: TYPE_NORMAL
- en: What You’ll Learn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your authors have been working with large volumes of data, a requirement for
    *I want the answers faster!* and a need for scalable architectures, for many years
    in both industry and academia. We’ll try to impart our hard-won experience to
    save you from making the mistakes that we’ve made.
  prefs: []
  type: TYPE_NORMAL
- en: At the start of each chapter, we’ll list questions that the following text should
    answer. (If it doesn’t, tell us and we’ll fix it in the next revision!)
  prefs: []
  type: TYPE_NORMAL
- en: 'We cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Background on the machinery of a computer so you know what’s happening behind
    the scenes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lists and tuples—the subtle semantic and speed differences in these fundamental
    data structures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dictionaries and sets—memory allocation strategies and access algorithms in
    these important data structures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iterators—how to write in a more Pythonic way and open the door to infinite
    data streams using iteration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pure Python approaches—how to use Python and its modules effectively
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matrices with `numpy`—how to use the beloved `numpy` library like a beast
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compilation and just-in-time computing—processing faster by compiling down to
    machine code, making sure you’re guided by the results of profiling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concurrency—ways to move data efficiently
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`multiprocessing`—various ways to use the built-in `multiprocessing` library
    for parallel computing and to efficiently share `numpy` matrices, and some costs
    and benefits of interprocess communication (IPC)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cluster computing—convert your `multiprocessing` code to run on a local or remote
    cluster for both research and production systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using less RAM—approaches to solving large problems without buying a humungous
    computer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lessons from the field—lessons encoded in war stories from those who took the
    blows so you don’t have to
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python 3 is the standard version of Python as of 2020, with Python 2.7 deprecated
    after a 10-year migration process. If you’re still on Python 2.7, you’re doing
    it wrong—many libraries are no longer supported for your line of Python, and support
    will become more expensive over time. Please do the community a favor and migrate
    to Python 3, and make sure that all new projects use Python 3.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we use 64-bit Python. Whilst 32-bit Python is supported, it is
    far less common for scientific work. We’d expect all the libraries to work as
    usual, but numeric precision, which depends on the number of bits available for
    counting, is likely to change. 64-bit is dominant in this field, along with *nix
    environments (often Linux or Mac). 64-bit lets you address larger amounts of RAM.
    *nix lets you build applications that can be deployed and configured in well-understood
    ways with well-understood behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re a Windows user, you’ll have to buckle up. Most of what we show will
    work just fine, but some things are OS-specific, and you’ll have to research a
    Windows solution. The biggest difficulty a Windows user might face is the installation
    of modules: research in sites like Stack Overflow should give you the solutions
    you need. If you’re on Windows, having a virtual machine (e.g., using VirtualBox)
    with a running Linux installation might help you to experiment more freely.'
  prefs: []
  type: TYPE_NORMAL
- en: Windows users should definitely look at a packaged solution like those available
    through Anaconda, Canopy, Python(x,y), or Sage. These same distributions will
    make the lives of Linux and Mac users far simpler too.
  prefs: []
  type: TYPE_NORMAL
- en: Changes from Python 2.7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you’ve upgraded from Python 2.7, you might not be aware of a few relevant
    changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/` meant *integer* division in Python 2.7, whereas it performs *float* division
    in Python 3.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`str` and `unicode` were used to represent text data in Python 2.7; in Python
    3, everything is a `str`, and these are always Unicode. For clarity, a `bytes`
    type is used if we’re using unencoded byte sequences.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you’re in the process of upgrading your code, two good guides are [“Porting
    Python 2 Code to Python 3”](http://bit.ly/pyporting) and [“Supporting Python 3:
    An in-depth guide”](http://python3porting.com). With a distribution like Anaconda
    or Canopy, you can run both Python 2 and Python 3 simultaneously—this will simplify
    your porting.'
  prefs: []
  type: TYPE_NORMAL
- en: License
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is licensed under [Creative Commons Attribution-NonCommercial-NoDerivs
    3.0](http://bit.ly/CC_A-NC-ND3).
  prefs: []
  type: TYPE_NORMAL
- en: You’re welcome to use this book for noncommercial purposes, including for noncommercial
    teaching. The license allows only for complete reproductions; for partial reproductions,
    please contact O’Reilly (see [“How to Contact Us”](preface01_split_002.xhtml#how_to_contact_us)).
    Please attribute the book as noted in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: We negotiated that the book should have a Creative Commons license so the contents
    could spread further around the world. We’d be quite happy to receive a beer if
    this decision has helped you. We suspect that the O’Reilly staff would feel similarly
    about the beer.
  prefs: []
  type: TYPE_NORMAL
- en: How to Make an Attribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Creative Commons license requires that you attribute your use of a part
    of this book. Attribution just means that you should write something that someone
    else can follow to find this book. The following would be sensible: “*High Performance
    Python*, 2nd ed., by Micha Gorelick and Ian Ozsvald (O’Reilly). Copyright 2020
    Micha Gorelick and Ian Ozsvald, 978-1-492-05502-0.”'
  prefs: []
  type: TYPE_NORMAL
- en: Errata and Feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We encourage you to review this book on public sites like Amazon—please help
    others understand if they would benefit from this book! You can also email us
    at [feedback@highperformancepython.com](mailto:feedback@highperformancepython.com).
  prefs: []
  type: TYPE_NORMAL
- en: We’re particularly keen to hear about errors in the book, successful use cases
    where the book has helped you, and high performance techniques that we should
    cover in the next edition. You can access the web page for this book at [*https://oreil.ly/high-performance-python-2e*](https://oreil.ly/high-performance-python-2e).
  prefs: []
  type: TYPE_NORMAL
- en: Complaints are welcomed through the instant-complaint-transmission-service `>
    /dev/null`.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions Used in This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following typographical conventions are used in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Italic*'
  prefs: []
  type: TYPE_NORMAL
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  prefs: []
  type: TYPE_NORMAL
- en: '`Constant width`'
  prefs: []
  type: TYPE_NORMAL
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, datatypes, environment
    variables, statements, and keywords.
  prefs: []
  type: TYPE_NORMAL
- en: '**`Constant width bold`**'
  prefs: []
  type: TYPE_NORMAL
- en: Shows commands or other text that should be typed literally by the user.
  prefs: []
  type: TYPE_NORMAL
- en: '*`Constant width italic`*'
  prefs: []
  type: TYPE_NORMAL
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a tip, suggestion, or critical thinking question.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a general note.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element indicates a warning or caution.
  prefs: []
  type: TYPE_NORMAL
- en: Using Code Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Supplemental material (code examples, exercises, etc.) is available for download
    at [*https://github.com/mynameisfiber/high_performance_python_2e*](https://github.com/mynameisfiber/high_performance_python_2e).
  prefs: []
  type: TYPE_NORMAL
- en: If you have a technical question or a problem using the code examples, please
    send email to [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing examples
    from O’Reilly books does require permission. Answering a question by citing this
    book and quoting example code does not require permission. Incorporating a significant
    amount of example code from this book into your product’s documentation does require
    permission.
  prefs: []
  type: TYPE_NORMAL
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*permissions@oreilly.com*](mailto:permissions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Online Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For more than 40 years, [*O’Reilly Media*](http://oreilly.com) has provided
    technology and business training, knowledge, and insight to help companies succeed.
  prefs: []
  type: TYPE_NORMAL
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, and our online learning platform. O’Reilly’s online learning
    platform gives you on-demand access to live training courses, in-depth learning
    paths, interactive coding environments, and a vast collection of text and video
    from O’Reilly and 200+ other publishers. For more information, visit [*http://oreilly.com*](http://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: How to Contact Us
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please address comments and questions concerning this book to the publisher:'
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Media, Inc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1005 Gravenstein Highway North
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastopol, CA 95472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 800-998-9938 (in the United States or Canada)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0515 (international or local)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0104 (fax)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Email [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com) to comment
    or ask technical questions about this book.
  prefs: []
  type: TYPE_NORMAL
- en: For news and more information about our books and courses, see our website at
    [*http://oreilly.com*](http://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Find us on Facebook: [*http://facebook.com/oreilly*](http://facebook.com/oreilly)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow us on Twitter: [*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch us on YouTube: [*http://youtube.com/oreillymedia*](http://youtube.com/oreillymedia)'
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hilary Mason wrote our foreword—thanks for composing such a wonderful opening
    narrative for our book. Giles Weaver and Dimitri Denisjonok provided invaluable
    technical feedback on this edition; great work, chaps.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to Patrick Cooper, Kyran Dale, Dan Foreman-Mackey, Calvin Giles, Brian
    Granger, Jamie Matthews, John Montgomery, Christian Schou Oxvig, Matt “snakes”
    Reiferson, Balthazar Rouberol, Michael Skirpan, Luke Underwood, Jake Vanderplas,
    and William Winter for invaluable feedback and contributions.
  prefs: []
  type: TYPE_NORMAL
- en: Ian thanks his wife, Emily, for letting him disappear for another eight months
    to write this second edition (thankfully, she’s terribly understanding). Ian apologizes
    to his dog for sitting and writing rather than walking in the woods quite as much
    as she’d have liked.
  prefs: []
  type: TYPE_NORMAL
- en: Micha thanks Marion and the rest of his friends and family for being so patient
    while he learned to write.
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly editors are rather lovely to work with; do strongly consider talking
    to them if you want to write your own book.
  prefs: []
  type: TYPE_NORMAL
- en: Our contributors to the “Lessons from the Field” chapter very kindly shared
    their time and hard-won lessons. We give thanks to Soledad Galli, Linda Uruchurtu,
    Vanentin Haenel, and Vincent D. Warmerdam for this edition and to Ben Jackson,
    Radim Řehůřek, Sebastjan Trepca, Alex Kelly, Marko Tasic, and Andrew Godwin for
    their time and effort during the previous edition.
  prefs: []
  type: TYPE_NORMAL
