- en: 'Chapter 2\. Data: Types, Values, Variables, and Names'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章\. 数据：类型、值、变量和名称
- en: A good name is rather to be chosen than great riches.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 选一个好名字胜过大财。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Proverbs 22:1
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 箴言 22:1
- en: Under the hood, everything in your computer is just a sequence of *bits* (see
    [Appendix A](app01.html#app_computers)). One of the insights of computing is that
    we can interpret those bits any way we want—as data of various sizes and types
    (numbers, text characters) or even as computer code itself. We use Python to define
    chunks of these bits for different purposes, and to get them to and from the CPU.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机底层，一切都只是一串*比特*（见[附录 A](app01.html#app_computers)）。计算的一个洞察是，我们可以按任意方式解释这些比特——作为不同大小和类型的数据（数字、文本字符），甚至是计算机代码本身。我们使用
    Python 来定义这些比特的块，以及在 CPU 中的输入输出。
- en: We begin with Python’s data *types* and the *values* that they can contain.
    Then we see how to represent data as *literal* values and *variables*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从 Python 的数据*类型*和它们可以包含的*值*开始。然后我们看如何将数据表示为*字面值*和*变量*。
- en: Python Data Are Objects
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 数据是对象。
- en: You can visualize your computer’s memory as a long series of shelves. Each slot
    on one of those memory shelves is one byte wide (eight bits), and slots are numbered
    from 0 (the first) to the end. Modern computers have billions of bytes of memory
    (gigabytes), so the shelves would fill a huge imaginary warehouse.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将计算机的内存视为一系列长长的货架。每个货架上的插槽宽度为一个字节（八比特），编号从 0（第一个）到末尾。现代计算机具有数十亿字节的内存（吉字节），因此这些货架将填满一个巨大的虚构仓库。
- en: A Python program is given access to some of your computer’s memory by your operating
    system. That memory is used for the code of the program itself, and the data that
    it uses. The operating system ensures that the program cannot read or write other
    memory locations without somehow getting permission.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你的操作系统为 Python 程序提供对计算机内存的一些访问权限。该内存用于程序本身的代码以及它使用的数据。操作系统确保程序无法读取或写入其他内存位置而不通过某种方式获得权限。
- en: Programs keep track of *where* (memory location) their bits are, and *what*
    (data type) they are. To your computer, it’s all just bits. The same bits mean
    different things, depending on what type we say they are. The same bit pattern
    might stand for the integer `65` or the text character `A`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 程序跟踪它们的比特位于何处（内存位置），以及它们是什么类型（数据类型）。对于计算机来说，一切都只是比特。同样的比特模式可能表示整数 `65` 或文本字符
    `A`。
- en: Different types may use different numbers of bits. When you read about a “64-bit
    machine,” this means that an integer uses 64 bits (8 bytes).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 不同类型可能使用不同数量的比特。当你听说“64 位机器”时，这意味着整数使用 64 比特（8 字节）。
- en: Some languages plunk and pluck these raw values in memory, keeping track of
    their sizes and types. Instead of handling such raw data values directly, Python
    wraps each data value—booleans, integers, floats, strings, even large data structures,
    functions, and programs—in memory as an *object*. There’s a whole chapter ([Chapter 10](ch10.html#ch_objects))
    on how to define your own objects in Python. For now, we’re just talking about
    objects that handle the basic built-in data types.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有些语言在内存中直接取出和拨弄这些原始值，并跟踪它们的大小和类型。Python 不直接处理这些原始数据值，而是将每个数据值包装在内存中作为一个*对象*——布尔值、整数、浮点数、字符串，甚至大型数据结构、函数和程序。关于如何在
    Python 中定义自己的对象，有一个完整的章节（[第 10 章](ch10.html#ch_objects)）。但现在，我们只是讨论处理基本内置数据类型的对象。
- en: Using the memory shelves analogy, you can think of objects as variable-sized
    boxes occupying spaces on those shelves, as shown in [Figure 2-1](#fig_box). Python
    makes these object boxes, puts them in empty spaces on the shelves, and removes
    them when they’re no longer used.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用内存货架的类比，你可以把对象想象成变量大小的盒子，占据这些货架上的空间，如[图 2-1](#fig_box)所示。Python 制作这些对象盒子，将它们放在货架上的空位上，并在它们不再使用时移除它们。
- en: '![inp2 0201](assets/inp2_0201.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![inp2 0201](assets/inp2_0201.png)'
- en: Figure 2-1\. An object is like a box; this one is an integer with value `7`
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-1\. 一个对象就像一个盒子；这个是一个值为`7`的整数。
- en: 'In Python, an object is a chunk of data that contains at least the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，对象是一个包含至少以下内容的数据块：
- en: A *type* that defines what it can do (see the next section)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义对象能做什么的*type*（见下一节）。
- en: A unique *id* to distinguish it from other objects
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个独特的*id*，以区别于其他对象。
- en: A *value* consistent with its type
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其类型一致的*value*。
- en: A *reference count* that tracks how often this object is used
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*reference count* 跟踪这个对象被使用的频率。'
- en: Its *id* is like its location on the shelf, a unique identifier. Its *type*
    is like a factory stamp on the box, saying what it can do. If a Python object
    is an integer, it has the type `int`, and could (among other things, which you’ll
    see in [Chapter 3](ch03.html#ch_numbers)) be added to another `int`. If we picture
    the box as being made of clear plastic, we can see the *value* inside. You’ll
    learn the use of the *reference count* a few sections from now, when we talk about
    variables and names.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 它的*标识*就像它在架子上的位置，一个唯一的标识符。它的*类型*就像盒子上的工厂印记，说明它能做什么。如果一个 Python 对象是整数，它的类型是 `int`，并且可以（除了其他事情，你将在[第 3
    章](ch03.html#ch_numbers)中看到）加到另一个 `int` 上。如果我们把盒子想象成由透明塑料制成，我们可以看到里面的*值*。在不久的几节中，当我们谈论变量和名称时，你将学到*引用计数*的用法。
- en: Types
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型
- en: '[Table 2-1](#table0201) shows the basic data types in Python. The second column
    (Type) contains the Python name of that type. The third column (Mutable?) indicates
    whether the value can be changed after creation, which I explain more in the next
    section. Examples shows one or more literal examples of that type. And the final
    column (Chapter) points you to the chapter in this book with the most details
    on this type.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 2-1](#table0201) 展示了 Python 中的基本数据类型。第二列（类型）包含该类型的 Python 名称。第三列（可变？）指示值在创建后是否可以更改，这在下一节中有更详细的解释。示例显示了该类型的一个或多个字面示例。最后一列（章节）指向本书中详细讲述该类型的章节。'
- en: Table 2-1\. Python’s basic data types
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2-1\. Python 的基本数据类型
- en: '| Name | Type | Mutable? | Examples | Chapter |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 可变？ | 示例 | 章节 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Boolean | `bool` | no | `True`, `False` | [Chapter 3](ch03.html#ch_numbers)
    |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 布尔值 | `bool` | 否 | `True`, `False` | [第 3 章](ch03.html#ch_numbers) |'
- en: '| Integer | `int` | no | `47`, `25000`, `25_000` | [Chapter 3](ch03.html#ch_numbers)
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 整数 | `int` | 否 | `47`, `25000`, `25_000` | [第 3 章](ch03.html#ch_numbers)
    |'
- en: '| Floating point | `float` | no | `3.14`, `2.7e5` | [Chapter 3](ch03.html#ch_numbers)
    |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 浮点数 | `float` | 否 | `3.14`, `2.7e5` | [第 3 章](ch03.html#ch_numbers) |'
- en: '| Complex | `complex` | no | `3j`, `5 + 9j` | [Chapter 22](ch22.html#ch_science)
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 复数 | `complex` | 否 | `3j`, `5 + 9j` | [第 22 章](ch22.html#ch_science) |'
- en: '| Text string | `str` | no | `''alas''`, `"alack"`, `''''''a verse attack''''''`
    | [Chapter 5](ch05.html#ch_strings) |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 文本字符串 | `str` | 否 | `''alas''`, `"alack"`, `''''''a verse attack''''''` |
    [第 5 章](ch05.html#ch_strings) |'
- en: '| List | `list` | yes | `[''Winken'', ''Blinken'', ''Nod'']` | [Chapter 7](ch07.html#ch_lists)
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 列表 | `list` | 是 | `[''Winken'', ''Blinken'', ''Nod'']` | [第 7 章](ch07.html#ch_lists)
    |'
- en: '| Tuple | `tuple` | no | `(2, 4, 8)` | [Chapter 7](ch07.html#ch_lists) |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 元组 | `tuple` | 否 | `(2, 4, 8)` | [第 7 章](ch07.html#ch_lists) |'
- en: '| Bytes | `bytes` | no | `b''ab\xff''` | [Chapter 12](ch12.html#ch_munging)
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 字节 | `bytes` | 否 | `b''ab\xff''` | [第 12 章](ch12.html#ch_munging) |'
- en: '| ByteArray | `bytearray` | yes | `bytearray(...)` | [Chapter 12](ch12.html#ch_munging)
    |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 字节数组 | `bytearray` | 是 | `bytearray(...)` | [第 12 章](ch12.html#ch_munging)
    |'
- en: '| Set | `set` | yes | `set([3, 5, 7])` | [Chapter 8](ch08.html#ch_dicts) |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 集合 | `set` | 是 | `set([3, 5, 7])` | [第 8 章](ch08.html#ch_dicts) |'
- en: '| Frozen set | `frozenset` | no | `frozenset([''Elsa'', ''Otto''])` | [Chapter 8](ch08.html#ch_dicts)
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 冻结集合 | `frozenset` | 否 | `frozenset([''Elsa'', ''Otto''])` | [第 8 章](ch08.html#ch_dicts)
    |'
- en: '| Dictionary | `dict` | yes | `{''game'': ''bingo'', ''dog'': ''dingo'', ''drummer'':
    ''Ringo''}` | [Chapter 8](ch08.html#ch_dicts) |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 字典 | `dict` | 是 | `{''game'': ''bingo'', ''dog'': ''dingo'', ''drummer'':
    ''Ringo''}` | [第 8 章](ch08.html#ch_dicts) |'
- en: After the chapters on these basic data types, you’ll see how to make new types
    in [Chapter 10](ch10.html#ch_objects).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些基本数据类型的章节后，您将看到如何在[第 10 章](ch10.html#ch_objects)中创建新类型。
- en: Mutability
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可变性
- en: Nought may endure but Mutability.
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 无物能长存，唯变性永恒。
- en: ''
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Percy Shelley
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Percy Shelley
- en: 'The type also determines whether the data *value* contained by the box can
    be changed (*mutable*) or is constant (*immutable*). Think of an immutable object
    as a sealed box, but with clear sides, like [Figure 2-1](#fig_box); you can see
    the value but you can’t change it. By the same analogy, a mutable object is like
    a box with a lid: not only can you see the value inside, you can also change it;
    however, you can’t change its type.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 类型还决定了盒子中包含的数据*值*是否可以更改（*可变*）或是常量（*不可变*）。把一个不可变对象想象成一个密封的盒子，但有透明的侧面，就像[图 2-1](#fig_box)；你可以看到值，但不能改变它。按同样的类比，可变对象就像有盖子的盒子：不仅可以看到里面的值，还可以改变它；但是，你不能改变它的类型。
- en: Python is *strongly typed*, which means that the type of an object does not
    change, even if its value is mutable ([Figure 2-2](#fig_strong_typing)).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是*强类型*的，这意味着对象的类型即使其值是可变的，也不会改变（[图 2-2](#fig_strong_typing)）。
- en: '![inp2 0202](assets/inp2_0202.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![inp2 0202](assets/inp2_0202.png)'
- en: Figure 2-2\. *Strong typing* does not mean push the keys harder
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-2\. *强类型*并不意味着要更用力按键
- en: Literal Values
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字面值
- en: 'There are two ways of specifying data values in Python:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法在 Python 中指定数据值：
- en: '*Literal*'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*字面*'
- en: '*Variable*'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*变量*'
- en: 'In coming chapters, you’ll see the details on how to specify literal values
    for different data types—integers are a sequence of digits, floats contain a decimal
    point, text strings are surrounded by quotes, and so on. But, for the rest of
    this chapter, to avoid calloused fingertips, our examples will use only short
    decimal integers and a Python list or two. Decimal integers are just like integers
    in math: a sequence of digits from `0` to `9`. There are a few extra integer details
    (like signs and nondecimal bases) that we look at in [Chapter 3](ch03.html#ch_numbers).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，你将看到如何为不同的数据类型指定字面值的详细信息——整数是一串数字，浮点数包含小数点，文本字符串被引号包围，等等。但是，在本章的其余部分，为了避免手指起茧，我们的示例将仅使用短小的十进制整数和一两个
    Python 列表。十进制整数就像数学中的整数一样：从`0`到`9`的一串数字。还有一些额外的整数细节（例如符号和非十进制基数），我们将在[第3章](ch03.html#ch_numbers)中讨论。
- en: Variables
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量
- en: Now, we’ve arrived at a key concept in computing languages.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们来到了计算语言的一个关键概念。
- en: Python, like most computer languages, lets you define *variables*—names for
    values in your computer’s memory that you want to use in a program.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Python，像大多数计算机语言一样，允许您定义*变量*——即计算机内存中值的名称，您希望在程序中使用。
- en: 'Python variable names have some rules:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Python 变量名有一些规则：
- en: 'They can contain only these characters:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们只能包含以下这些字符：
- en: Lowercase letters (`a` through `z`)
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小写字母（`a`到`z`）
- en: Uppercase letters (`A` through `Z`)
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大写字母（`A`到`Z`）
- en: Digits (`0` through `9`)
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字（`0`到`9`）
- en: Underscore (`_`)
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下划线（`_`）
- en: 'They are *case-sensitive*: `thing`, `Thing`, and `THING` are different names.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是*区分大小写的*：`thing`、`Thing` 和 `THING` 是不同的名称。
- en: They must begin with a letter or an underscore, not a digit.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们必须以字母或下划线开头，不能以数字开头。
- en: Names that begin with an underscore are treated specially (which you can read
    about in [Chapter 9](ch09.html#ch_functions)).
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下划线开头的名称被特殊对待（你可以在[第9章](ch09.html#ch_functions)中阅读有关此处的内容）。
- en: They cannot be one of Python’s *reserved words* (also known as *keywords*).
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们不能是 Python 的*保留词*（也称为*关键字*）之一。
- en: 'The reserved words^([1](ch02.html#idm45795033434568)) are:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 保留词^([1](ch02.html#idm45795033434568))有：
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Within a Python program, you can find the reserved words with
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 程序中，您可以找到保留词与
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'or:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 或：
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'These are valid names:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是有效的名称：
- en: '`a`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`'
- en: '`a1`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a1`'
- en: '`a_b_c___95`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a_b_c___95`'
- en: '`_abc`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_abc`'
- en: '`_1a`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_1a`'
- en: 'These names, however, are not valid:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些名称是无效的：
- en: '`1`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1`'
- en: '`1a`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1a`'
- en: '`1_`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1_`'
- en: '`name!`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name!`'
- en: '`another-name`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`another-name`'
- en: Assignment
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分配
- en: In Python, you use `=` to *assign* a value to a variable.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，您使用 `=` 来*分配*一个值给一个变量。
- en: Note
  id: totrans-85
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: We all learned in grade school arithmetic that `=` means *equal to*. So why
    do many computer languages, including Python, use `=` for assignment? One reason
    is that standard keyboards lack logical alternatives such as a left arrow key,
    and `=` didn’t seem too confusing. Also, in computer programs you use assignment
    much more than you test for equality.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都在小学算术中学到了 `=` 的意思是*等于*。那么为什么许多计算机语言，包括 Python，使用 `=` 进行赋值？一个原因是标准键盘缺乏逻辑的替代品，如左箭头键，并且
    `=` 似乎不会太令人困惑。另外，在计算机程序中，您使用分配的频率比测试相等要高得多。
- en: 'Programs are *not* like algebra. When you learned math in school, you saw equations
    like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 程序*不*像代数。当您在学校学习数学时，您看到了这样的方程式：
- en: '[PRE3]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You would solve the equation by “plugging in” a value for `x`. If you gave `x`
    the value `5`, `5 + 12` is `17`, so the value of `y` would be `17`. Plug in `6`
    for `x` to get `18` for `y`, and so on.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过“插入”一个值来解决方程式中的等式。如果您给 `x` 赋值 `5`，`5 + 12` 就是 `17`，所以 `y` 的值将是 `17`。为 `x`
    插入 `6` 以获得 `y` 的 `18`，依此类推。
- en: 'Computer program lines may look like equations, but their meaning is different.
    In Python and other computer languages, `x` and `y` are *variables*. Python knows
    that a bare sequence of digits like `12` or `5` is a literal integer. So here’s
    a tiny Python program that mimics this equation, printing the resulting value
    of `y`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机程序行看起来可能像方程式，但它们的含义是不同的。在 Python 和其他计算机语言中，`x` 和 `y` 是*变量*。Python 知道像 `12`
    或 `5` 这样的裸数字是字面整数。因此，这里有一个小小的 Python 程序模仿这个方程式，打印出 `y` 的结果值：
- en: '[PRE4]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here’s the big difference between math and programs: in math, `=` means *equality*
    of both sides, but in programs it means *assignment*: *assign the value on the
    right side to the variable on the left side*.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这是数学和程序之间的重大区别：在数学中，`=`表示两边的*相等*，但在程序中表示*赋值*：*将右边的值赋给左边的变量*。
- en: 'Also in programs, everything on the right side needs to have a value (this
    is called being *initialized*). The right side can be a literal value, or a variable
    that has already been assigned a value, or a combination. Python knows that `5`
    and `12` are literal integers. The first line assigns the integer value `5` to
    the variable `x`. Now we can use the variable `x` in the next line. When Python
    reads `y = x + 12`, it does the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序中，右侧的每一部分都需要有一个值（这称为*初始化*）。右侧可以是字面值，或者已经被赋值的变量，或者它们的组合。Python知道`5`和`12`是字面整数。第一行将整数值`5`赋给变量`x`。现在我们可以在下一行中使用变量`x`。当Python读取`y
    = x + 12`时，它执行以下操作：
- en: Sees the `=` in the middle
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看到中间的`=`号
- en: Knows that this is an assignment
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 知道这是一个任务。
- en: Calculates the right side (gets the value of the object referred to by `x` and
    adds it to `12`)
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算右侧（获取由`x`引用的对象的值并将其添加到`12`）
- en: Assigns the result to the left-side variable, `y`
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将结果分配给左侧变量`y`
- en: Then typing the name of the variable `y` (in the interactive interpreter) will
    print its new value.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在交互解释器中输入变量`y`的名称将打印其新值。
- en: 'If you started your program with the line `y = x + 12`, Python would generate
    an *exception* (an error), because the variable `x` doesn’t have a value yet:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在程序中以`y = x + 12`开头，Python会生成一个*异常*（一个错误），因为变量`x`还没有值：
- en: '[PRE5]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You’ll get the full rundown on exceptions in [Chapter 9](ch09.html#ch_functions).
    In computerese, we’d say that this `x` was *uninitialized*.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在[第9章](ch09.html#ch_functions)中详细了解异常。在计算机术语中，我们会说这个`x`是*未初始化*的。
- en: 'In algebra, you can work backward, and assign a value to `y` to calculate `x`.
    To do this in Python, you’d need to get the literal values and initialized variables
    on the right side before assigning to `x` on the left:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在代数中，您可以反向工作，并将一个值分配给`y`来计算`x`。要在Python中做到这一点，您需要在赋值给左侧的`x`之前获取右侧的字面值和初始化变量。
- en: '[PRE6]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Variables Are Names, Not Places
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量是名称，不是位置
- en: 'Now it’s time to make a crucial point about variables in Python: *variables
    are just names*. This is different from many other computer languages, and a key
    thing to know about Python, especially when we get to *mutable* objects like lists.
    Assignment *does not copy* a value; it just *attaches a name* to the object that
    contains the data. The name is a *reference* to a thing rather than the thing
    itself. Visualize a name as a tag with a string attached to the object box somewhere
    else in the computer’s memory ([Figure 2-3](#fig_sticky)).'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候提一个关于Python变量的关键点了：*变量只是名称*。这与许多其他计算机语言不同，这是Python特别要知道的一点，特别是当我们涉及到像列表这样的*可变*对象时。赋值*不会复制*一个值；它只是*将一个名称*绑定到包含数据的对象上。名称是对事物的*引用*，而不是事物本身。将名称想象成一个标签，附在计算机内存中的对象框上
    ([图2-3](#fig_sticky))。
- en: '![inp2 0203](assets/inp2_0203.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![inp2 0203](assets/inp2_0203.png)'
- en: Figure 2-3\. Names point to objects (variable `a` points to an integer object
    with value `7`)
  id: totrans-107
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-3. 名称指向对象（变量`a`指向一个值为`7`的整数对象）
- en: 'In other languages, the variable itself has a type, and binds to a memory location.
    You can change the value at that location, but it needs to be of the same type.
    This is why *static* languages make you declare the types of variables. Python
    doesn’t, because a name can refer to anything, and we get the value and type by
    “following the string” to the data object itself. This saves time, but there are
    some downsides:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他语言中，变量本身有一个类型，并绑定到一个内存位置。您可以更改该位置的值，但它必须是相同的类型。这就是*静态*语言要求您声明变量类型的原因。Python不需要，因为一个名称可以引用任何东西，我们通过“跟随字符串”到数据对象本身来获取值和类型。这节省了时间，但也有一些缺点：
- en: You may misspell a variable and get an exception because it doesn’t refer to
    anything, and Python doesn’t automatically check this as static languages do.
    [Chapter 19](ch19.html#ch_pythonista) shows ways of checking your variables ahead
    of time to avoid this.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能会拼错一个变量并且得到一个异常，因为它并不引用任何东西，而且Python并不像静态语言那样自动检查。[第19章](ch19.html#ch_pythonista)展示了提前检查变量以避免这种情况的方法。
- en: Python’s raw speed is slower than a language like C. It makes the computer do
    more work so you don’t have to.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python的原始速度比像C这样的语言慢。它让计算机做更多的工作，这样你就不必亲自去做。
- en: 'Try this with the interactive interpreter (visualized in [Figure 2-4](#fig_sticky_2)):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在交互解释器中尝试这个（在[图2-4](#fig_sticky_2)中可视化）：
- en: As before, assign the value `7` to the name `a`. This creates an object box
    containing the integer value `7`.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，将值`7`分配给名称`a`。这创建了一个包含整数值`7`的对象框。
- en: Print the value of `a`.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印`a`的值。
- en: Assign `a` to `b`, making `b` also point to the object box containing `7`.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`a`分配给`b`，使`b`也指向包含`7`的对象盒子。
- en: 'Print the value of `b`:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印变量`b`的值：
- en: '[PRE7]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![inp2 0204](assets/inp2_0204.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![inp2 0204](assets/inp2_0204.png)'
- en: Figure 2-4\. Copying a name (now variable `b` also points to the same integer
    object)
  id: totrans-118
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-4\. 复制一个名称（现在变量`b`也指向相同的整数对象）
- en: 'In Python, if you want to know the type of anything (a variable or a literal
    value), you can use ``type(*`thing`*)``. `type()` is one of Python’s built-in
    functions. If you want to check whether a variable points to an object of a specific
    type, use ``isinstance(*`type`*)``:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，如果您想知道任何东西的类型（变量或字面值），可以使用``type(*`thing`*)``。 `type()`是Python的内置函数之一。如果要检查变量是否指向特定类型的对象，请使用``isinstance(*`type`*)``：
- en: '[PRE8]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-121
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: When I mention a function, I’ll put parentheses (`()`) after it to emphasize
    that it’s a function rather than a variable name or something else.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当我提到函数时，我会在其后加上括号（`()`），以强调它是一个函数而不是变量名或其他东西。
- en: 'Let’s try it with more literal values (`58`, `99.9`, `''abc''`) and variables
    (`a`, `b`):'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试更多的字面值（`58`，`99.9`，`'abc'`）和变量（`a`，`b`）：
- en: '[PRE9]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: A *class* is the definition of an object; [Chapter 10](ch10.html#ch_objects)
    covers classes in greater detail. In Python, “class” and “type” mean pretty much
    the same thing.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*类*是对象的定义；[第10章](ch10.html#ch_objects)详细介绍了类。在Python中，“类”和“类型”几乎意味着相同的事情。'
- en: As you’ve seen, when you use a variable in Python, it looks up the object that
    it refers to. Behind the scenes, Python is busy, often creating temporary objects
    that will be discarded a line or two later.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，当您在Python中使用变量时，它会查找它所引用的对象。在幕后，Python正在忙碌地创建临时对象，这些对象将在一两行后被丢弃。
- en: 'Let’s repeat an earlier example:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重复一个早期的例子：
- en: '[PRE10]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In this code snippet, Python did the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码片段中，Python执行了以下操作：
- en: Created an integer object with the value `5`
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个值为`5`的整数对象
- en: Made a variable `y` point to that `5` object
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使变量`y`指向该`5`对象
- en: Incremented the reference count of the object with value `5`
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加了值为`5`的对象的引用计数
- en: Created another integer object with the value `12`
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建另一个值为`12`的整数对象
- en: Subtracted the value of the object that `y` points to (`5`) from the value `12`
    in the (anonymous) object with that value
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`y`指向的对象的值（`5`）中减去具有该值的（匿名）对象中的`12`的值
- en: Assigned this value (`7`) to a new (so far, unnamed) integer object
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将此值（`7`）分配给新的（到目前为止未命名的）整数对象
- en: Made the variable `x` point to this new object
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让变量`x`指向这个新对象
- en: Incremented the reference count of this new object that `x` points to
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加了`x`指向的这个新对象的引用计数
- en: Looked up the value of the object that `x` points to (`7`) and printed it
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找`x`指向的对象的值（`7`）并打印它
- en: When an object’s reference count reaches zero, no names are pointing to it,
    so it doesn’t need to stick around. Python has a charmingly named *garbage collector*
    that reuses the memory of things that are no longer needed. Picture someone behind
    those memory shelves, yanking obsolete boxes for recycling.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当对象的引用计数达到零时，没有名称指向它，因此它不需要保留。 Python有一个名为*垃圾收集器*的迷人工具，可以重新使用不再需要的内存。想象有人在那些内存架子后面，拉取过时的盒子进行回收利用。
- en: In this case, we no longer need the objects with the values `5`, `12`, or `7`,
    or the variables `x` and `y`. The Python garbage collector may choose to send
    them to object heaven,^([2](ch02.html#idm45795033021464)) or keep some around
    for performance reasons given that small integers tend to be used a lot.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们不再需要具有值`5`，`12`或`7`的对象，也不需要变量`x`和`y`。 Python垃圾收集器可以选择将它们送往对象天堂^([2](ch02.html#idm45795033021464))，或者出于性能原因保留一些，因为小整数通常被广泛使用。
- en: Assigning to Multiple Names
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分配给多个名称
- en: 'You can assign a value to more than one variable name at the same time:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以同时将值分配给多个变量名：
- en: '[PRE11]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Reassigning a Name
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新分配名称
- en: Because names point to objects, changing the value assigned to a name just makes
    the name point to a new object. The reference count of the old object is decremented,
    and the new one’s is incremented.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 因为名称指向对象，所以更改分配给名称的值只是使名称指向新对象。旧对象的引用计数将减少，新对象的引用计数将增加。
- en: Copying
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复制
- en: As you saw in [Figure 2-4](#fig_sticky_2), assigning an existing variable `a`
    to a new variable named `b` just makes `b` point to the same object that `a` does.
    If you pick up either the `a` or `b` tag and follow their strings, you’ll get
    to the same object.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在[图 2-4](#fig_sticky_2)中看到的，将现有变量`a`赋值给名为`b`的新变量只是使`b`指向与`a`相同的对象。如果您选择任一`a`或`b`标签并跟随它们的字符串，您将到达同一个对象。
- en: 'If the object is immutable (like an integer), its value can’t be changed, so
    both names are essentially read-only. Try this:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象是不可变的（比如整数），其值不能被更改，因此这两个名称本质上是只读的。试试这个：
- en: '[PRE12]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When we assigned `x` to `y`, that made the name `y` point to the integer object
    with value `5` that `x` was also pointing to. Changing `x` made it point to a
    new integer object with value `29`. It did not change the one containing `5`,
    which `y` still points to.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将 `x` 分配给 `y` 时，这使得名称 `y` 指向 `x` 也指向的值为 `5` 的整数对象。更改 `x` 使其指向值为 `29` 的新整数对象。它没有更改
    `y` 所指向的仍然是 `5` 的那个对象。
- en: But if both names point to a *mutable* object, you can change the object’s value
    via either name, and you’ll see the changed value when you use either name. If
    you didn’t know this first, it could surprise you.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果两个名称都指向一个*可变*对象，则可以通过任一名称更改对象的值，并在使用任一名称时看到更改后的值。如果你一开始不知道这一点，可能会感到惊讶。
- en: 'A *list* is a mutable array of values, and [Chapter 7](ch07.html#ch_lists)
    covers them in gruesome detail. For this example, `a` and `b` each point to a
    list with three integer members:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表*是一个可变的值数组，[第7章](ch07.html#ch_lists)详细介绍了它们。在本例中，`a`和`b`分别指向具有三个整数成员的列表：'
- en: '[PRE13]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: These list members (`a[0]`, `a[1]`, and `a[2]`) are themselves like names, pointing
    to integer objects with the values `2`, `4`, and `6`. The list object keeps its
    members in order.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这些列表成员（`a[0]`、`a[1]` 和 `a[2]`）本身就像名称，指向具有值 `2`、`4` 和 `6` 的整数对象。列表对象按顺序保留其成员。
- en: 'Now change the first list element, through the name `a`, and see that `b` also
    changed:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在通过名称 `a` 更改第一个列表元素，并看到 `b` 也已更改：
- en: '[PRE14]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: When the first list element is changed, it no longer points to the object with
    value `2`, but a new object with value `99`. The list is still of type `list`,
    but its value (the list elements and their order) is mutable.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当更改第一个列表元素时，它不再指向值为 `2` 的对象，而是指向值为 `99` 的新对象。列表仍然是 `list` 类型，但其值（列表元素及其顺序）是可变的。
- en: Choose Good Variable Names
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择好的变量名称
- en: He said true things, but called them by wrong names.
  id: totrans-159
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 他说了真实的事情，但用了错误的名字来称呼它们。
- en: ''
  id: totrans-160
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Elizabeth Barrett Browning
  id: totrans-161
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 伊丽莎白·巴雷特·勃朗宁
- en: It’s surprising how important it is to choose good names for your variables.
    In many of the code examples so far, I’ve been using throwaway names like `a`
    and `x`. In real programs, you’ll have many more variables to keep track of at
    once, and you’ll need to balance brevity and clarity. For example, it’s faster
    to type `num_loons` rather than `number``_of_loons` or `gaviidae_inventory`, but
    it’s more explanatory than `n`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 选择好变量名称是多么重要啊。在迄今为止的许多代码示例中，我一直在使用像 `a` 和 `x` 这样的临时名称。在实际程序中，你将同时跟踪更多的变量，并且需要在简洁性和清晰性之间取得平衡。例如，键入
    `num_loons` 要比 `number``_of_loons` 或 `gaviidae_inventory` 快，但比 `n` 更具解释性。
- en: Coming Up
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 即将发生
- en: Numbers! They’re as exciting as you expect. Well, maybe not that bad.^([3](ch02.html#idm45795032772440))
    You’ll see how to use Python as a calculator and how a cat founded a digital system.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 数字！它们像你期望的那样令人兴奋。嗯，也许没有那么糟糕。^([3](ch02.html#idm45795032772440)) 你将看到如何将 Python
    用作计算器，以及一只猫如何创立了数字系统。
- en: Things to Do
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要做的事情
- en: 2.1 Assign the integer value `99` to the variable `prince`, and print it.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 2.1 将整数值 `99` 分配给变量 `prince`，并打印它。
- en: 2.2 What type is the value `5`?
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 2.2 值 `5` 的类型是什么？
- en: 2.3 What type is the value `2.0`?
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 2.3 值 `2.0` 的类型是什么？
- en: 2.4 What type is the expression `5 + 2.0`?
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 2.4 表达式 `5 + 2.0` 的类型是什么？
- en: ^([1](ch02.html#idm45795033434568-marker)) `async` and `await` are new in Python
    3.7.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch02.html#idm45795033434568-marker)) `async` 和 `await` 是 Python 3.7 中的新功能。
- en: ^([2](ch02.html#idm45795033021464-marker)) Or the Island of Misfit Objects.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch02.html#idm45795033021464-marker)) 或者是不合格对象之岛。
- en: ^([3](ch02.html#idm45795032772440-marker)) `8` looks like a snowman!
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch02.html#idm45795032772440-marker)) `8` 看起来像一个雪人！
