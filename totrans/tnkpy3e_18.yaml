- en: 16\. Classes and Objects#
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 16\. 类和对象#
- en: 原文：[https://allendowney.github.io/ThinkPython/chap16.html](https://allendowney.github.io/ThinkPython/chap16.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://allendowney.github.io/ThinkPython/chap16.html](https://allendowney.github.io/ThinkPython/chap16.html)
- en: At this point we have defined classes and created objects that represent the
    time of day and the day of the year. And we’ve defined methods that create, modify,
    and perform computations with these objects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经定义了类，并创建了表示一天中的时间和一年中的某一天的对象。我们还定义了可以创建、修改以及进行计算的这些对象的方法。
- en: In this chapter we’ll continue our tour of object-oriented programming (OOP)
    by defining classes that represent geometric objects, including points, lines,
    rectangles, and circles. We’ll write methods that create and modify these objects,
    and we’ll use the `jupyturtle` module to draw them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续探索面向对象编程（OOP），通过定义表示几何对象的类，包括点、线、矩形和圆形。我们将编写方法来创建和修改这些对象，并使用 `jupyturtle`
    模块来绘制它们。
- en: I’ll use these classes to demonstrate OOP topics including object identity and
    equivalence, shallow and deep copying, and polymorphism.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用这些类来演示面向对象编程（OOP）主题，包括对象身份与等价性、浅拷贝与深拷贝、多态等。
- en: '## 16.1\. Creating a Point[#](#creating-a-point "Link to this heading")'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '## 16.1\. 创建一个点[#](#creating-a-point "Link to this heading")'
- en: In computer graphics a location on the screen is often represented using a pair
    of coordinates in an `x`-`y` plane. By convention, the point `(0, 0)` usually
    represents the upper-left corner of the screen, and `(x, y)` represents the point
    `x` units to the right and `y` units down from the origin. Compared to the Cartesian
    coordinate system you might have seen in a math class, the `y` axis is upside-down.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机图形学中，屏幕上的位置通常通过一对坐标在 `x`-`y` 平面中表示。按照惯例，点 `(0, 0)` 通常表示屏幕的左上角，而 `(x, y)`
    表示从原点出发，向右移动 `x` 单位，向下移动 `y` 单位的点。与数学课上可能见过的笛卡尔坐标系相比，`y` 轴是上下颠倒的。
- en: 'There are several ways we might represent a point in Python:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，我们可以通过几种方式来表示一个点：
- en: We can store the coordinates separately in two variables, `x` and `y`.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以将坐标分别存储在两个变量 `x` 和 `y` 中。
- en: We can store the coordinates as elements in a list or tuple.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以将坐标作为列表或元组中的元素存储。
- en: We can create a new type to represent points as objects.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以创建一个新的类型来表示点作为对象。
- en: In object-oriented programming, it would be most idiomatic to create a new type.
    To do that, we’ll start with a class definition for `Point`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向对象编程中，最符合惯例的做法是创建一个新类型。为此，我们将从 `Point` 的类定义开始。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `__init__` method takes the coordinates as parameters and assigns them to
    attributes `x` and `y`. The `__str__` method returns a string representation of
    the `Point`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`__init__` 方法将坐标作为参数并将其赋值给属性 `x` 和 `y`。`__str__` 方法返回 `Point` 对象的字符串表示。'
- en: Now we can instantiate and display a `Point` object like this.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以像这样实例化并显示一个 `Point` 对象。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The following diagram shows the state of the new object.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了新对象的状态。
- en: '![_images/6e851969c74483fc4efb36d87b6fcdd9ee1479e2274f2efebc840e7f3520ce6f.png](../Images/48dbb9e8e1d723217cd7f02dafdf41bb.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![_images/6e851969c74483fc4efb36d87b6fcdd9ee1479e2274f2efebc840e7f3520ce6f.png](../Images/48dbb9e8e1d723217cd7f02dafdf41bb.png)'
- en: As usual, a programmer-defined type is represented by a box with the name of
    the type outside and the attributes inside.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，程序员定义的类型由一个外部有类型名称、内部有属性的框表示。
- en: In general, programmer-defined types are mutable, so we can write a method like
    `translate` that takes two numbers, `dx` and `dy`, and adds them to the attributes
    `x` and `y`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，程序员定义的类型是可变的，因此我们可以编写一个像 `translate` 这样的函数，它接受两个数字 `dx` 和 `dy`，并将它们加到属性 `x`
    和 `y` 上。
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This function translates the `Point` from one location in the plane to another.
    If we don’t want to modify an existing `Point`, we can use `copy` to copy the
    original object and then modify the copy.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将 `Point` 从平面中的一个位置平移到另一个位置。如果我们不想修改现有的 `Point`，可以使用 `copy` 来复制原始对象，然后修改副本。
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can encapsulate those steps in another method called `translated`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这些步骤封装到另一个名为 `translated` 的方法中。
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the same way that the built in function `sort` modifies a list, and the `sorted`
    function creates a new list, now we have a `translate` method that modifies a
    `Point` and a `translated` method that creates a new one.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 与内置函数 `sort` 修改列表，`sorted` 函数创建一个新列表类似，我们现在有了一个 `translate` 方法来修改 `Point`，还有一个
    `translated` 方法来创建一个新的 `Point`。
- en: 'Here’s an example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the next section, we’ll use these points to define and draw a line.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用这些点来定义并绘制一条线。
- en: 16.2\. Creating a Line[#](#creating-a-line "Link to this heading")
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.2\. 创建一个Line[#](#creating-a-line "Link to this heading")
- en: Now let’s define a class that represents the line segment between two points.
    As usual, we’ll start with an `__init__` method and a `__str__` method.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们定义一个表示两个点之间线段的类。像往常一样，我们将从`__init__`方法和`__str__`方法开始。
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: With those two methods, we can instantiate and display a `Line` object we’ll
    use to represent the `x` axis.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这两个方法，我们可以实例化并显示一个`Line`对象，我们将用它来表示`x`轴。
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When we call `print` and pass `line` as a parameter, `print` invokes `__str__`
    on `line`. The `__str__` method uses an f-string to create a string representation
    of the `line`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用`print`并传入`line`作为参数时，`print`会在`line`上调用`__str__`方法。`__str__`方法使用f-string来创建`line`的字符串表示。
- en: The f-string contains two expressions in curly braces, `self.p1` and `self.p2`.
    When those expressions are evaluated, the results are `Point` objects. Then, when
    they are converted to strings, the `__str__` method from the `Point` class gets
    invoked.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: f-string包含了两个大括号中的表达式`self.p1`和`self.p2`。当这些表达式被求值时，结果是`Point`对象。然后，当它们被转换为字符串时，会调用`Point`类中的`__str__`方法。
- en: That’s why, when we display a `Line`, the result contains the string representations
    of the `Point` objects.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么，当我们显示一个`Line`时，结果包含了`Point`对象的字符串表示。
- en: The following object diagram shows the state of this `Line` object.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下对象图展示了这个`Line`对象的状态。
- en: '![_images/4aaaffd556f4fee05dc8c25d40d9a66f559504d4c1b89fbe148c631e206580b0.png](../Images/0516eb6de9935e024c0b540a33ccc2f5.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![_images/4aaaffd556f4fee05dc8c25d40d9a66f559504d4c1b89fbe148c631e206580b0.png](../Images/0516eb6de9935e024c0b540a33ccc2f5.png)'
- en: String representations and object diagrams are useful for debugging, but the
    point of this example is to generate graphics, not text! So we’ll use the `jupyturtle`
    module to draw lines on the screen.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串表示和对象图对于调试很有用，但这个示例的重点是生成图形，而不是文本！所以我们将使用`jupyturtle`模块在屏幕上绘制线条。
- en: 'As we did in [Chapter 4](chap04.html#section-turtle-module), we’ll use `make_turtle`
    to create a `Turtle` object and a small canvas where it can draw. To draw lines,
    we’ll use two new functions from the `jupyturtle` module:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第4章](chap04.html#section-turtle-module)中所做的那样，我们将使用`make_turtle`来创建一个`Turtle`对象以及一个可以绘制的画布。为了绘制线条，我们将使用`jupyturtle`模块中的两个新函数：
- en: '`jumpto`, which takes two coordinates and moves the `Turtle` to the given location
    without drawing a line, and'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jumpto`，它接受两个坐标并将`Turtle`移动到给定位置，而不绘制线条，和'
- en: '`moveto`, which moves the `Turtle` from its current location to the given location,
    and draws a line segment between them.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`moveto`，它将`Turtle`从当前位置移动到给定位置，并在它们之间绘制一条线段。'
- en: Here’s how we import them.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何导入它们。
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: And here’s a method that draws a `Line`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个方法，它绘制了一个`Line`。
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: To show how it’s used, I’ll create a second line that represents the `y` axis.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示它是如何使用的，我将创建第二条代表`y`轴的线。
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: And then draw the axes.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后绘制坐标轴。
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As we define and draw more objects, we’ll use these lines again. But first let’s
    talk about object equivalence and identity.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们定义并绘制更多对象，我们将再次使用这些线条。但首先，让我们来讨论对象的等价性和标识。
- en: 16.3\. Equivalence and identity[#](#equivalence-and-identity "Link to this heading")
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.3\. 等价性和标识[#](#equivalence-and-identity "Link to this heading")
- en: Suppose we create two points with the same coordinates.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们创建了两个坐标相同的点。
- en: '[PRE17]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If we use the `==` operator to compare them, we get the default behavior for
    programmer-defined types – the result is `True` only if they are the same object,
    which they are not.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用`==`运算符来比较它们，我们会得到程序员定义类型的默认行为——结果只有在它们是同一个对象时才为`True`，而它们并不是。
- en: '[PRE18]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If we want to change that behavior, we can provide a special method called `__eq__`
    that defines what it means for two `Point` objects to be equal.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想改变这种行为，我们可以提供一个特殊的方法`__eq__`，定义两个`Point`对象相等的标准。
- en: '[PRE20]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This definition considers two `Points` to be equal if their attributes are equal.
    Now when we use the `==` operator, it invokes the `__eq__` method, which indicates
    that `p1` and `p2` are considered equal.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个定义认为，当两个`Point`对象的属性相等时，它们被认为是相等的。现在当我们使用`==`运算符时，它会调用`__eq__`方法，这表示`p1`和`p2`被认为是相等的。
- en: '[PRE21]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: But the `is` operator still indicates that they are different objects.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 但是`is`运算符仍然表示它们是不同的对象。
- en: '[PRE23]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: It’s not possible to override the `is` operator – it always checks whether the
    objects are identical. But for programmer-defined types, you can override the
    `==` operator so it checks whether the objects are equivalent. And you can define
    what equivalent means.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 不可能重载 `is` 运算符 —— 它始终检查对象是否相同。但对于程序员定义的类型，你可以重载 `==` 运算符，以便它检查对象是否等价。并且你可以定义什么是“等价”。
- en: 16.4\. Creating a Rectangle[#](#creating-a-rectangle "Link to this heading")
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.4\. 创建一个矩形[#](#creating-a-rectangle "跳转到该标题")
- en: Now let’s define a class that represents and draws rectangles. To keep things
    simple, we’ll assume that the rectangles are either vertical or horizontal, not
    at an angle. What attributes do you think we should use to specify the location
    and size of a rectangle?
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们定义一个类来表示和绘制矩形。为了简化起见，我们假设矩形要么是垂直的，要么是水平的，而不是倾斜的。你认为我们应该使用什么属性来指定矩形的位置和大小？
- en: 'There are at least two possibilities:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 至少有两种可能性：
- en: You could specify the width and height of the rectangle and the location of
    one corner.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以指定矩形的宽度和高度，以及一个角的位置。
- en: You could specify two opposing corners.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以指定两个对角的角。
- en: At this point it’s hard to say whether either is better than the other, so let’s
    implement the first one. Here is the class definition.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，很难说哪种方式比另一种更好，因此让我们先实现第一种。以下是类的定义。
- en: '[PRE25]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As usual, the `__init__` method assigns the parameters to attributes and the
    `__str__` returns a string representation of the object. Now we can instantiate
    a `Rectangle` object, using a `Point` as the location of the upper-left corner.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，`__init__` 方法将参数赋值给属性，而 `__str__` 返回对象的字符串表示。现在我们可以实例化一个 `Rectangle` 对象，使用一个
    `Point` 作为左上角的位置。
- en: '[PRE26]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The following diagram shows the state of this object.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图展示了该对象的状态。
- en: '![_images/93ab30dffba5edf8630e6bc3afd2c786600c5a1461f0695f96fd869a561a08c7.png](../Images/fcebfc419783d3fbf78fbf7d44c4e86e.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![_images/93ab30dffba5edf8630e6bc3afd2c786600c5a1461f0695f96fd869a561a08c7.png](../Images/fcebfc419783d3fbf78fbf7d44c4e86e.png)'
- en: To draw a rectangle, we’ll use the following method to make four `Point` objects
    to represent the corners.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了绘制一个矩形，我们将使用以下方法来创建四个 `Point` 对象，表示矩形的四个角。
- en: '[PRE28]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Then we’ll make four `Line` objects to represent the sides.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将创建四个 `Line` 对象来表示矩形的边。
- en: '[PRE29]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Then we’ll draw the sides.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将绘制矩形的边。
- en: '[PRE30]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Here’s an example.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例。
- en: '[PRE31]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The figure includes two lines to represent the axes.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图中包含两条线来表示坐标轴。
- en: 16.5\. Changing rectangles[#](#changing-rectangles "Link to this heading")
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.5\. 修改矩形[#](#changing-rectangles "跳转到该标题")
- en: Now let’s consider two methods that modify rectangles, `grow` and `translate`.
    We’ll see that `grow` works as expected, but `translate` has a subtle bug. See
    if you can figure it out before I explain.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们考虑两种修改矩形的方法，`grow` 和 `translate`。我们将看到 `grow` 按预期工作，但 `translate` 存在一个细微的
    bug。在我解释之前，看看你能否先找出这个问题。
- en: '`grow` takes two numbers, `dwidth` and `dheight`, and adds them to the `width`
    and `height` attributes of the rectangle.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`grow` 需要两个数字，`dwidth` 和 `dheight`，并将它们加到矩形的 `width` 和 `height` 属性上。'
- en: '[PRE32]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Here’s an example that demonstrates the effect by making a copy of `box1` and
    invoking `grow` on the copy.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例，通过复制 `box1` 并在复制对象上调用 `grow` 来演示效果。
- en: '[PRE33]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: If we draw `box1` and `box2`, we can confirm that `grow` works as expected.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们绘制 `box1` 和 `box2`，可以确认 `grow` 按预期工作。
- en: '[PRE35]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Now let’s see about `translate`. It takes two numbers, `dx` and `dy`, and moves
    the rectangle the given distances in the `x` and `y` directions.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看 `translate`。它需要两个数字，`dx` 和 `dy`，并将矩形在 `x` 和 `y` 方向上移动给定的距离。
- en: '[PRE36]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: To demonstrate the effect, we’ll translate `box2` to the right and down.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示效果，我们将 `box2` 向右和向下移动。
- en: '[PRE37]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Now let’s see what happens if we draw `box1` and `box2` again.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们再看看如果我们重新绘制 `box1` 和 `box2` 会发生什么。
- en: '[PRE39]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: It looks like both rectangles moved, which is not what we intended! The next
    section explains what went wrong.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来两个矩形都移动了，这并不是我们想要的结果！下一节将解释出了什么问题。
- en: 16.6\. Deep copy[#](#deep-copy "Link to this heading")
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.6\. 深拷贝[#](#deep-copy "跳转到该标题")
- en: When we use `copy` to duplicate `box1`, it copies the `Rectangle` object but
    not the `Point` object it contains. So `box1` and `box2` are different objects,
    as intended.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用 `copy` 来复制 `box1` 时，它复制了 `Rectangle` 对象，但没有复制其中包含的 `Point` 对象。所以 `box1`
    和 `box2` 是不同的对象，这正是我们想要的效果。
- en: '[PRE40]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: But their `corner` attributes refer to the same object.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 但是它们的 `corner` 属性指向相同的对象。
- en: '[PRE42]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The following diagram shows the state of these objects.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图展示了这些对象的状态。
- en: '![_images/351c7b94fa9021934acda94ae1dd3d5b3af81e1fc228a8aaee3ea80575486ff0.png](../Images/fa9acdcb0f0d6c848961d6dd6343293a.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![_images/351c7b94fa9021934acda94ae1dd3d5b3af81e1fc228a8aaee3ea80575486ff0.png](../Images/fa9acdcb0f0d6c848961d6dd6343293a.png)'
- en: What `copy` does is called a **shallow copy** because it copies the object but
    not the objects it contains. As a result, changing the `width` or `height` of
    one `Rectangle` does not affect the other, but changing the attributes of the
    shared `Point` affects both! This behavior is confusing and error-prone.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`copy`所做的操作称为**浅拷贝**，因为它复制了对象本身，而不是对象内部包含的其他对象。因此，改变一个`Rectangle`的`width`或`height`不会影响另一个`Rectangle`，但改变共享的`Point`属性会影响两个对象！这种行为容易导致混淆和错误。'
- en: Fortunately, the `copy` module provides another function, called `deepcopy`,
    that copies not only the object but also the objects it refers to, and the objects
    *they* refer to, and so on. This operation is called a **deep copy**.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，`copy`模块提供了另一个函数，叫做`deepcopy`，它不仅复制对象本身，还会复制它所引用的对象，甚至是它们所引用的对象，依此类推。这个操作称为**深拷贝**。
- en: To demonstrate, let’s start with a new `Rectangle` that contains a new `Point`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，我们从一个新的`Rectangle`开始，并包含一个新的`Point`。
- en: '[PRE44]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: And we’ll make a deep copy.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将进行深拷贝。
- en: '[PRE46]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: We can confirm that the two `Rectangle` objects refer to different `Point` objects.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以确认这两个`Rectangle`对象分别引用了不同的`Point`对象。
- en: '[PRE47]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Because `box3` and `box4` are completely separate objects, we can modify one
    without affecting the other. To demonstrate, we’ll move `box3` and grow `box4`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`box3`和`box4`是完全独立的对象，我们可以修改一个而不影响另一个。为了演示，我们将移动`box3`并增大`box4`。
- en: '[PRE49]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: And we can confirm that the effect is as expected.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以确认效果如预期。
- en: '[PRE50]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 16.7\. Polymorphism[#](#polymorphism "Link to this heading")
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.7\. 多态性[#](#polymorphism "链接到这个标题")
- en: In the previous example, we invoked the `draw` method on two `Line` objects
    and two `Rectangle` objects. We can do the same thing more concisely by making
    a list of objects.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们对两个`Line`对象和两个`Rectangle`对象调用了`draw`方法。我们可以通过将对象列表化来更简洁地做同样的事情。
- en: '[PRE51]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The elements of this list are different types, but they all provide a `draw`
    method, so we can loop through the list and invoke `draw` on each one.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表中的元素是不同类型的，但它们都提供了一个`draw`方法，因此我们可以遍历这个列表并对每个元素调用`draw`。
- en: '[PRE52]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The first and second time through the loop, `shape` refers to a `Line` object,
    so when `draw` is invoked, the method that runs is the one defined in the `Line`
    class.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环的第一次和第二次中，`shape`指向一个`Line`对象，因此当调用`draw`时，执行的是`Line`类中定义的方法。
- en: The third and fourth time through the loop, `shape` refers to a `Rectangle`
    object, so when `draw` is invoked, the method that runs is the one defined in
    the `Rectangle` class.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 第三次和第四次循环时，`shape`指向一个`Rectangle`对象，因此当调用`draw`时，执行的是`Rectangle`类中定义的方法。
- en: In a sense, each object knows how to draw itself. This feature is called **polymorphism**.
    The word comes from Greek roots that mean “many shaped”. In object-oriented programming,
    polymorphism is the ability of different types to provide the same methods, which
    makes it possible to perform many computations – like drawing shapes – by invoking
    the same method on different types of objects.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 从某种意义上讲，每个对象都知道如何绘制自己。这个特性被称为**多态性**。这个词来源于希腊语，意思是“多形态”。在面向对象编程中，多态性是指不同类型的对象能够提供相同的方法，这使得我们可以通过在不同类型的对象上调用相同的方法来执行许多计算——比如绘制图形。
- en: As an exercise at the end of this chapter, you’ll define a new class that represents
    a circle and provides a `draw` method. Then you can use polymorphism to draw lines,
    rectangles, and circles.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 作为本章末尾的练习，你将定义一个新的类，表示一个圆形并提供一个`draw`方法。然后，你可以利用多态性来绘制线条、矩形和圆形。
- en: 16.8\. Debugging[#](#debugging "Link to this heading")
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.8\. 调试[#](#debugging "链接到这个标题")
- en: 'In this chapter, we ran into a subtle bug that happened because we created
    a `Point` that was shared by two `Rectangle` objects, and then we modified the
    `Point`. In general, there are two ways to avoid problems like this: you can avoid
    sharing objects or you can avoid modifying them.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们遇到了一个微妙的bug，因为我们创建了一个`Point`对象，它被两个`Rectangle`对象共享，然后我们修改了这个`Point`。通常，有两种方法可以避免此类问题：要么避免共享对象，要么避免修改对象。
- en: To avoid sharing objects, you can use deep copy, as we did in this chapter.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免共享对象，我们可以使用深拷贝，正如我们在本章中所做的那样。
- en: To avoid modifying objects, consider replacing impure functions like `translate`
    with pure functions like `translated`. For example, here’s a version of `translated`
    that creates a new `Point` and never modifies its attributes.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免修改对象，考虑用纯函数如`translated`替换不纯函数如`translate`。例如，这是一个创建新`Point`并且永不修改其属性的`translated`版本。
- en: '[PRE53]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Python provides features that make it easier to avoid modifying objects. They
    are beyond the scope of this book, but if you are curious, ask a virtual assistant,
    “How do I make a Python object immutable?”
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Python提供的功能使得避免修改对象变得更容易。虽然这些功能超出了本书的范围，但如果你感兴趣，可以询问虚拟助手：“如何让一个Python对象变为不可变？”
- en: Creating a new object takes more time than modifying an existing one, but the
    difference seldom matters in practice. Programs that avoid shared objects and
    impure functions are often easier to develop, test, and debug – and the best kind
    of debugging is the kind you don’t have to do.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新对象比修改现有对象花费更多时间，但在实际应用中，这种差异通常并不重要。避免共享对象和不纯函数的程序通常更容易开发、测试和调试——而最好的调试方式是你不需要进行调试。
- en: 16.9\. Glossary[#](#glossary "Link to this heading")
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.9\. 词汇表[#](#glossary "链接到此标题")
- en: '**shallow copy:** A copy operation that does not copy nested objects.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**浅拷贝：** 一种拷贝操作，不会拷贝嵌套对象。'
- en: '**deep copy:** A copy operation that also copies nested objects.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**深拷贝：** 一种拷贝操作，也会拷贝嵌套对象。'
- en: '**polymorphism:** The ability of a method or operator to work with multiple
    types of objects.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**多态：** 方法或运算符能够与多种类型的对象一起工作。'
- en: 16.10\. Exercises[#](#exercises "Link to this heading")
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.10\. 练习[#](#exercises "链接到此标题")
- en: '[PRE54]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 16.10.1\. Ask a virtual assistant[#](#ask-a-virtual-assistant "Link to this
    heading")
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 16.10.1\. 请求虚拟助手[#](#ask-a-virtual-assistant "链接到此标题")
- en: For all of the following exercises, consider asking a virtual assistant for
    help. If you do, you’ll want include as part of the prompt the class definitions
    for `Point`, `Line`, and `Rectangle` – otherwise the VA will make a guess about
    their attributes and functions, and the code it generates won’t work.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 对于以下所有练习，可以考虑请求虚拟助手的帮助。如果这样做，你需要将`Point`、`Line`和`Rectangle`类的定义作为提示的一部分提供——否则虚拟助手会猜测它们的属性和方法，生成的代码将无法正常工作。
- en: 16.10.2\. Exercise[#](#exercise "Link to this heading")
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 16.10.2\. 练习[#](#exercise "链接到此标题")
- en: Write an `__eq__` method for the `Line` class that returns `True` if the `Line`
    objects refer to `Point` objects that are equivalent, in either order.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 为`Line`类编写一个`__eq__`方法，如果`Line`对象引用的`Point`对象是相等的（无论顺序如何），则返回`True`。
- en: You can use the following outline to get started.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下大纲来开始。
- en: '[PRE55]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: You can use these examples to test your code.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这些示例来测试你的代码。
- en: '[PRE56]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: This example should be `True` because the `Line` objects refer to `Point` objects
    that are equivalent, in the same order.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例应该是`True`，因为`Line`对象引用的`Point`对象是相等的，并且顺序相同。
- en: '[PRE57]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Equivalence should always be transitive – that is, if `line_a` and `line_b`
    are equivalent, and `line_a` and `line_c` are equivalent, then `line_b` and `line_c`
    should also be equivalent.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 等价关系应始终具有传递性——也就是说，如果`line_a`和`line_b`是相等的，且`line_a`和`line_c`是相等的，那么`line_b`和`line_c`也应该是相等的。
- en: '[PRE61]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: This example should be `False` because the `Line` objects refer to `Point` objects
    that are not equivalent.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例应该是`False`，因为`Line`对象引用的`Point`对象是不相等的。
- en: '[PRE63]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 16.10.3\. Exercise[#](#id1 "Link to this heading")
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 16.10.3\. 练习[#](#id1 "链接到此标题")
- en: Write a `Line` method called `midpoint` that computes the midpoint of a line
    segment and returns the result as a `Point` object.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`midpoint`的`Line`方法，该方法计算线段的中点并将结果作为`Point`对象返回。
- en: You can use the following outline to get started.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下大纲来开始。
- en: '[PRE65]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: You can use the following examples to test your code and draw the result.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下示例来测试你的代码并绘制结果。
- en: '[PRE66]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 16.10.4\. Exercise[#](#id2 "Link to this heading")
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 16.10.4\. 练习[#](#id2 "链接到此标题")
- en: Write a `Rectangle` method called `midpoint` that find the point in the center
    of a rectangle and returns the result as a `Point` object.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`midpoint`的`Rectangle`方法，该方法找到矩形中心的点并将结果作为`Point`对象返回。
- en: You can use the following outline to get started.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下大纲来开始。
- en: '[PRE73]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: You can use the following example to test your code.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下示例来测试你的代码。
- en: '[PRE74]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 16.10.5\. Exercise[#](#id3 "Link to this heading")
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 16.10.5\. 练习[#](#id3 "链接到此标题")
- en: 'Write a `Rectangle` method called `make_cross` that:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`make_cross`的`Rectangle`方法，该方法：
- en: Uses `make_lines` to get a list of `Line` objects that represent the four sides
    of the rectangle.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`make_lines`来获取表示矩形四个边的`Line`对象列表。
- en: Computes the midpoints of the four lines.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算四条线的中点。
- en: Makes and returns a list of two `Line` objects that represent lines connecting
    opposite midpoints, forming a cross through the middle of the rectangle.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并返回一个包含两个`Line`对象的列表，这些对象代表连接相对中点的线，形成一个穿过矩形中部的十字。
- en: You can use this outline to get started.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下大纲来开始。
- en: '[PRE79]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: You can use the following example to test your code.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下示例来测试你的代码。
- en: '[PRE80]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 16.10.6\. Exercise[#](#id4 "Link to this heading")
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 16.10.6\. 练习[#](#id4 "链接到此标题")
- en: Write a definition for a class named `Circle` with attributes `center` and `radius`,
    where `center` is a Point object and `radius` is a number. Include special methods
    `__init__` and a `__str__`, and a method called `draw` that uses `jupyturtle`
    functions to draw the circle.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`Circle`的类的定义，具有属性`center`和`radius`，其中`center`是一个Point对象，`radius`是一个数字。包括特殊方法`__init__`和`__str__`，以及一个名为`draw`的方法，使用`jupyturtle`函数绘制圆形。
- en: You can use the following function, which is a version of the `circle` function
    we wrote in Chapter 4.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下函数，这是我们在第4章中编写的`circle`函数的版本。
- en: '[PRE83]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: You can use the following example to test your code. We’ll start with a square
    `Rectangle` with width and height `100`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下示例来测试你的代码。我们将从一个宽度和高度为`100`的正方形`Rectangle`开始。
- en: '[PRE84]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: The following code should create a `Circle` that fits inside the square.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码应该创建一个可以适应正方形的`Circle`。
- en: '[PRE85]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: If everything worked correctly, the following code should draw the circle inside
    the square (touching on all four sides).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，以下代码应该会在正方形内部绘制一个圆（触及四个边）。
- en: '[PRE87]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[Think Python: 3rd Edition](https://allendowney.github.io/ThinkPython/index.html)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '[Think Python: 第3版](https://allendowney.github.io/ThinkPython/index.html)'
- en: Copyright 2024 [Allen B. Downey](https://allendowney.com)
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 版权所有 2024 [Allen B. Downey](https://allendowney.com)
- en: 'Code license: [MIT License](https://mit-license.org/)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 代码许可证：[MIT许可证](https://mit-license.org/)
- en: 'Text license: [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/)'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 文本许可证：[知识共享署名-非商业性使用-相同方式共享 4.0 国际版](https://creativecommons.org/licenses/by-nc-sa/4.0/)
