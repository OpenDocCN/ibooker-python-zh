["```py\n*```", "```pypython*```", "```py`*```", "```py`*\n```", "```py\n>>> import random\n>>> random.randint(0, 9)\n5\n>>> random.randint(0, 9)\n1\n>>> random.randint(0, 9)\n9                            #1\n>>> random.randint(0, 9)\n9\n>>> random.randint(0, 9)\n5\n>>> random.randint(0, 9)\n0                           #2\n>>> random.randint(0, 9)\n4\n```", "```py\n>>> random.randint(1, 6)\n2\n>>> random.randint(1, 6)\n2\n>>> random.randint(1, 6)\n4\n>>> random.randint(1, 6)\n1\n>>> random.randint(1, 6)\n5\n```", "```py\n>>> random.random()\n0.03853937835258148\n>>> random.random()\n0.44152027974631813\n>>> random.random()\n0.774000627219771\n>>> random.random()\n0.4388949032154501\n```", "```py\n>>> s = '1862'\n>>> s[0]        #1\n'1'\n>>> s[1]\n'8'\n>>> s[2]\n'6'\n>>> s[3]\n'2'\n>>> s + 1           #2\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: can only concatenate str (not \"int\") to str\n>>> s + '1'              #3\n'18621'\n```", "```py\nimport random           #1\n\n**def random_string(length):**\n **'''**\n **length is an integer.**\n\n **Return a string of the given length, where each character**\n **is a digit from 0 to 9, and with no repeated digits.**\n **'''**\n    s = ''          #2\n    while len(s) < length:             #3\n        r = random.randint(0, 9)     #4\n        if str(r) not in s:        #5\n            s += str(r)          #6\n    return s           #7\n```", "```py\nimport random\ndef random_string(length):\n '''\n length is an integer.\n\n Return a string of the given length, where each character\n is a digit from 0 to 9, and with no repeated digits.\n '''\n    digits = list(range(10))               #1\n    random.shuffle(digits)             #2\n    return ''.join(str(d) for d in digits[:length])    #3\n```", "```py\ndef get_guess(length):\n '''\n length is an integer.\n\n Keep asking the player to enter a string where each character \n is a digit from 0 to 9, until they enter a valid guess.\n A valid guess has the given length and has no repeated digits.\n '''\n    guess = input('Enter a guess: ')                           #1\n    while len(guess) != length or not guess.isdigit()\\    #2\n            or len(set(guess)) != length:                \n        guess = input('Enter a guess: ')                #3\n    return guess       #4\n```", "```py\n>>> guess_result('3821', '1862')\n```", "```py\n>>> guess_result('1234', '4321')\n```", "```py\ndef guess_result(guess, secret_code):\n '''\n guess and secret_code are strings of the same length.\n\n Return a list of two values:\n the first value is the number of indices in guess where\n the character at that index matches the character at the\n same index in secret_code; the second value is the \n number of indices in guess where the character at that \n index exists at a different index in secret_code.\n\n >>> guess_result('3821', '1862')\n [1, 2]\n >>> guess_result('1234', '4321')\n [0, 4]\n '''\n    correct = 0                     #1\n    misplaced = 0          #2\n    for i in range(len(guess)):             #3\n        if guess[i] == secret_code[i]:    #4\n            correct += 1        #5\n        elif guess[i] in secret_code:     #6\n            misplaced += 1             #7\n    return [correct, misplaced]      #8\n```", "```py\ndef play(num_digits, num_guesses):\n '''\n Generate a random string with num_digits digits.\n The player has num_guesses guesses to guess the random \n string. After each guess, the player is told how many \n digits in the guess are in the correct place, and how \n many digits exist but are in the wrong place.\n '''\n    answer = random_string(num_digits)                         #1\n    print('I generated a random {}-digit number.'.format(num_digits))\n    print('You have {} guesses to guess the number.'.format(num_guesses))\n    for i in range(num_guesses):                        #2\n        guess = get_guess(num_digits)            #3\n        result = guess_result(guess, answer)          #4\n        print('Correct: {}, Misplaced: {}'.format( \\   #5\n                            result[0], result[1]))     #5\n        if guess == answer:            #6\n            print('You win!')\n            return             #7\n    print('You lose! The correct answer was \\   #8\n                     {}.'.format(answer))       #8\n```", "```py\nplay(4, 10)\n```", "```py\nI generated a random 4-digit number.\nYou have 10 guesses to guess the number.\nEnter a guess: 0123\nCorrect: 1, Misplaced: 0\nEnter a guess: 4567\nCorrect: 1, Misplaced: 0\nEnter a guess: 8901\nCorrect: 2, Misplaced: 0\nEnter a guess: 8902\nCorrect: 2, Misplaced: 1\n...\nEnter a guess: 2897\nCorrect: 1, Misplaced: 3\nYou lose! The correct answer was 8927.\n```", "```py\ndef game_over(player1, player2, rolls):\n '''\n player1 is the number of chips that player 1 has.\n player2 is the number of chips that player 2 has.\n rolls is the last list of dice rolls.\n\n Return True if the game is over, False otherwise.\n\n The game is over if player1 has at least 30 chips, \n or player 2 has at least 30 chips, \n or there are 5 rolls none of which is a 1.\n '''\n    return player1 >= 30 or player2 >= 30 or \\       #1\n            (len(rolls) == 5 and not 1 in rolls)     #1\n```", "```py\nif player1 >= 30 or player2 >= 30 or (len(rolls) == 5\n        and not 1 in rolls):\n    return True\nelse:\n    return False\n```", "```py\nimport random\ndef roll_dice(n):\n '''\n Create a list of n random integers between 1 and 6.\n Print each of these integers, and return the list.\n '''\n    rolls = []                   #1\n    for i in range(n):          #2\n        roll = random.randint(1, 6)      #3\n        print(roll)                   #4\n        rolls.append(roll)      #5\n    return rolls      #6\n```", "```py\ndef turn_over(rolls):\n '''\n Return True if the turn is over, False otherwise.\n\n The turn is over if any of the rolls is a 1, \n or if there are exactly five rolls.\n '''\n    return 1 in rolls or len(rolls) == 5      #1\n```", "```py\ndef take_full_turn(pot_chips):\n '''\n The pot has pot_chips chips.\n\n Take a full turn for the current player and, once done, \n return a list of two values:\n the number of chips in the pot, and the final list of dice rolls.\n\n Begin by rolling 1 die, and put 1 chip into the pot.\n Then, if the turn isn't over, ask the player whether \n they'd like to continue their turn.\n If they respond 'n', then the turn is over.\n If they respond 'y', then roll one more die than last time, \n and add 1 chip to the pot for each die that is rolled.\n (for example, if 3 dice were rolled last time, then \n roll 4 dice and add 4 chips to the pot.)\n If the turn is not over, repeat by asking the player again \n whether they'd like to continue their turn.\n '''\n    rolls = roll_dice(1)      #1\n    pot_chips += 1                       #2\n    while not turn_over(rolls):                   #3\n        keep_going = input('Continue? (y/n) ')      #4\n        if keep_going == 'y':                       #5\n            rolls = roll_dice(len(rolls) + 1)         #6\n            pot_chips += len(rolls)           #7\n        else:\n            break                  #8\n    return pot_chips, rolls    #9\n```", "```py\ndef wins_chips(rolls):\n '''\n Return True if the player wins chips, False otherwise.\n\n The player wins the chips if none of the rolls is a 1.\n '''\n    return not 1 in rolls      #1\n```", "```py\ndef switch_player(player1, player2, rolls, current_player):\n '''\n player1 is the number of chips that player 1 has.\n player2 is the number of chips that player 2 has.\n rolls is the last list of dice rolls.\n current_player is the current player (1 or 2).\n\n If the game is not over, switch current_player to the other player.\n Return the new current_player.\n '''\n    if not game_over(player1, player2, rolls):     #1\n        if current_player == 1:                #2\n            current_player = 2\n        else:\n            current_player = 1\n    return current_player        #3\n```", "```py\ndef play():\n '''\n Play the game until the game is over.\n\n The pot starts with 0 chips, and each player starts with 0 chips.\n\n Randomly decide whether player 1 or player 2 goes first.\n\n Before each turn, print three lines of information:\n 1\\. The number of chips in the pot\n 2\\. The number of chips that each player has\n 3\\. Whether it is player 1's turn or player 2's turn\n\n Take a full turn for the current player. \n If they won the chips, add the chips in the pot to the \n total for that player and reset the pot to have 0 chips.\n\n Then, switch to the other player's turn.\n\n Once the game is over, print the current player \n (that's the player who won).\n '''\n    pot_chips = 0      #1\n    player1 = 0        #1\n    player2 = 0        #1\n    current_player = random.randint(1, 2)      #2\n    rolls = []\n    while not game_over(player1, player2, rolls):     #3\n        print('Pot chips:', pot_chips)               #4\n        print('Player 1 chips:', player1)              #4\n        print('Player 2 chips:', player2)            #4\n        print('Player', current_player, 'turn')      #4\n        pot_chips, rolls = take_full_turn(pot_chips)     #5\n        if wins_chips(rolls):                           #6\n            if current_player == 1:                   #7\n                player1 += pot_chips                       #8\n            else:\n                player2 += pot_chips          #9\n            pot_chips = 0                              #10\n        current_player = switch_player(player1, player2,  #11\n                                       rolls, current_player)\n    print('Player', current_player, 'wins!')   #12\n```", "```py\nplay()\n```", "```py\ndef play():\n '''\n Play the game until the game is over.\n\n The pot starts with 0 chips, and each player starts with 0 chips.\n\n Randomly decide whether player 1 or player 2 goes first.\n\n Before each turn, print three lines of information:\n 1\\. The number of chips in the pot\n 2\\. The number of chips that each player has\n 3\\. Whether it is player 1's turn or player 2's turn\n\n Take a full turn for the current player. \n If they won the chips, add the chips in the pot to the\n total for that player\n and reset the pot to have 0 chips.\n\n Then, switch to the other player's turn.\n\n Once the game is over, print the current player \n (that's the player who won).\n '''\n    pot_chips = 0\n    player1 = 0\n    player2 = 0\n    current_player = random.randint(1, 2)\n    rolls = []\n\n    print('Welcome to Bogart!')       #1\n    print()                            #2\n\n    while not game_over(player1, player2, rolls):\n        print('Pot chips:', pot_chips)\n        print('Player 1 chips:', player1)\n        print('Player 2 chips:', player2)\n        print('Player', current_player, 'turn')\n        pot_chips, rolls = take_full_turn(pot_chips)\n        if wins_chips(rolls):\n            print('Player', current_player, 'gets',  #3\n                  pot_chips, 'chips!')                 #3\n            if current_player == 1:\n                player1 += pot_chips\n            else:\n                player2 += pot_chips\n            pot_chips = 0\n        current_player = switch_player(player1, player2, \n                                       rolls, current_player)\n\n        print()\n        print()\n        print('-=' * 20)     #4\n        print()\n\n    print('Player', current_player, 'wins!')\n```", "```py\ndef guess_result(guess, secret_code): \n   correct = 0 \n   misplaced = 0 \n   for i in range(len(guess)): \n      if guess[i] == secret_code[i]: \n  correct += 1 \n     if guess[i] in secret_code: \n         misplaced += 1 \nreturn [correct, misplaced]\n```"]