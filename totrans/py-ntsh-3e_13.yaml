- en: Chapter 13\. Time Operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Python program can handle time in several ways. Time *intervals* are floating-point
    numbers in units of seconds (a fraction of a second is the fractional part of
    the interval): all standard library functions accepting an argument that expresses
    a time interval in seconds accept a float as the value of that argument. *Instants*
    in time are expressed in seconds since a reference instant, known as the *epoch*.
    (Although epochs vary per language and per platform, on all platforms, Python’s
    epoch is midnight, UTC, January 1, 1970.) Time instants often also need to be
    expressed as a mixture of units of measurement (e.g., years, months, days, hours,
    minutes, and seconds), particularly for I/O purposes. I/O, of course, also requires
    the ability to format times and dates into human-readable strings, and parse them
    back from string formats.'
  prefs: []
  type: TYPE_NORMAL
- en: The time Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The time module is somewhat dependent on the underlying system’s C library,
    which sets the range of dates that the time module can handle. On older Unix systems,
    the years 1970 and 2038 were typical cutoff points^([1](ch13.xhtml#ch01fn110))
    (a limitation avoided by using datetime, discussed in the following section).
    Time instants are normally specified in UTC (Coordinated Universal Time, once
    known as GMT, or Greenwich Mean Time). The time module also supports local time
    zones and daylight savings time (DST), but only to the extent the underlying C
    system library does.^([2](ch13.xhtml#ch01fn111))
  prefs: []
  type: TYPE_NORMAL
- en: 'As an alternative to seconds since the epoch, a time instant can be represented
    by a tuple of nine integers, called a *timetuple* (covered in [Table 13-1](#tuple_form_of_time_representation).)
    All the items are integers: timetuples don’t keep track of fractions of a second.
    A timetuple is an instance of struct_time. You can use it as a tuple; you can
    also, more usefully, access the items as the read-only attributes *x*.tm_year,
    *x*.tm_mon, and so on, with the attribute names listed in [Table 13-1](#tuple_form_of_time_representation).
    Wherever a function requires a timetuple argument, you can pass an instance of
    struct_time or any other sequence whose items are nine integers in the right ranges
    (all ranges in the table include both lower and upper bounds, both inclusive).'
  prefs: []
  type: TYPE_NORMAL
- en: Table 13-1\. Tuple form of time representation
  prefs: []
  type: TYPE_NORMAL
- en: '| Item | Meaning | Field name | Range | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | Year | tm_year | 1970–2038 | 0001–9999 on some platforms |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Month | tm_mon | 1–12 | 1 is January; 12 is December |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Day | tm_mday | 1–31 |   |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | Hour | tm_hour | 0–23 | 0 is midnight; 12 is noon |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | Minute | tm_min | 0–59 |   |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Second | tm_sec | 0–61 | 60 and 61 for leap seconds |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | Weekday | tm_wday | 0–6 | 0 is Monday; 6 is Sunday |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | Year day | tm_yday | 1–366 | Day number within the year |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | DST flag | tm_isdst | −1–1 | −1 means the library determines DST |'
  prefs: []
  type: TYPE_TB
- en: To translate a time instant from a “seconds since the epoch” floating-point
    value into a timetuple, pass the floating-point value to a function (e.g., localtime)
    that returns a timetuple with all nine items valid. When you convert in the other
    direction, mktime ignores redundant items 6 (tm_wday) and 7 (tm_yday) of the tuple.
    In this case, you normally set item 8 (tm_isdst) to −1 so that mktime itself determines
    whether to apply DST.
  prefs: []
  type: TYPE_NORMAL
- en: time supplies the functions and attributes listed in [Table 13-2](#functions_and_attributes_of_the_time_mo).
  prefs: []
  type: TYPE_NORMAL
- en: Table 13-2\. Functions and attributes of the *time* module
  prefs: []
  type: TYPE_NORMAL
- en: '| asctime | asctime([*tupletime*]) Accepts a timetuple and returns a readable
    24-character string, e.g., ''Sun Jan 8 14:41:06 2017''. Calling asctime() without
    arguments is like calling asctime(time.localtime()) (formats current time in local
    time). |'
  prefs: []
  type: TYPE_TB
- en: '| ctime | ctime([*secs*]) Like asctime(localtime(*secs*)), accepts an instant
    expressed in seconds since the epoch and returns a readable 24-character string
    form of that instant, in local time. Calling ctime() without arguments is like
    calling asctime() (formats current time in local time). |'
  prefs: []
  type: TYPE_TB
- en: '| gmtime | gmtime([*secs*]) Accepts an instant expressed in seconds since the
    epoch and returns a timetuple *t* with the UTC time (*t*.tm_isdst is always 0).
    Calling gmtime() without arguments is like calling gmtime(time()) (returns the
    timetuple for the current time instant). |'
  prefs: []
  type: TYPE_TB
- en: '| localtime | localtime([*secs*]) Accepts an instant expressed in seconds since
    the epoch and returns a timetuple *t* with the local time (*t*.tm_isdst is 0 or
    1, depending on whether DST applies to instant *secs* by local rules). Calling
    localtime() without arguments is like calling localtime(time()) (returns the timetuple
    for the current time instant). |'
  prefs: []
  type: TYPE_TB
- en: '| mktime | mktime(*tupletime*) Accepts an instant expressed as a timetuple
    in local time and returns a floating-point value with the instant expressed in
    seconds since the epoch (only accepts the limited epoch dates between 1970–2038,
    not the extended range, even on 64-bit machines).^([a](ch13.xhtml#ch01fn112))
    The DST flag, the last item in *tupletime*, is meaningful: set it to 0 to get
    standard time, to 1 to get DST, or to −1 to let mktime compute whether DST is
    in effect at the given instant. |'
  prefs: []
  type: TYPE_TB
- en: '| monotonic | monotonic() Like time(), returns the current time instant, a
    float with seconds since the epoch; however, the time value is guaranteed to never
    go backward between calls, even when the system clock is adjusted (e.g., due to
    leap seconds or at the moment of switching to or from DST). |'
  prefs: []
  type: TYPE_TB
- en: '| perf_counter | perf_counter() For determining elapsed time between successive
    calls (like a stopwatch), perf_counter returns a time value in fractional seconds
    using the highest-resolution clock available to get accuracy for short durations.
    It is system-wide and *includes* time elapsed during sleep. Use only the difference
    between successive calls, as there is no defined reference point. |'
  prefs: []
  type: TYPE_TB
- en: '| process_time | process_time() Like perf_counter; however, the returned time
    value is process-wide and *doesn’t* include time elapsed during sleep. Use only
    the difference between successive calls, as there is no defined reference point.
    |'
  prefs: []
  type: TYPE_TB
- en: '| sleep | sleep(*secs*) Suspends the calling thread for *secs* seconds. The
    calling thread may start executing again before *secs* seconds (when it’s the
    main thread and some signal wakes it up) or after a longer suspension (depending
    on system scheduling of processes and threads). You can call sleep with *secs*
    set to 0 to offer other threads a chance to run, incurring no significant delay
    if the current thread is the only one ready to run. |'
  prefs: []
  type: TYPE_TB
- en: '| strftime | strftime(*fmt*[, *tupletime*]) Accepts an instant expressed as
    a timetuple in local time and returns a string representing the instant as specified
    by string *fmt*. If you omit *tupletime*, strftime uses localtime(time()) (formats
    the current time instant). The syntax of *fmt* is similar to that covered in [“Legacy
    String Formatting with %”](ch09.xhtml#legacy_string_formatting_with_percent),
    though the conversion characters are different, as shown in [Table 13-3](#conversion_characters_for_strftime).
    Refer to the time instant specified by *tupletime*; the format can’t specify width
    and precision.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can obtain dates just as formatted by asctime (e.g., 'Tue Dec
    10 18:07:14 2002') with the format string '%a %b %d %H:%M:%S %Y'.
  prefs: []
  type: TYPE_NORMAL
- en: You can obtain dates compliant with RFC 822 (e.g., 'Tue, 10 Dec 2002 18:07:14
    EST') with the format string '%a, %d %b %Y %H:%M:%S %Z'.
  prefs: []
  type: TYPE_NORMAL
- en: These strings can also be used for datetime formatting using the mechanisms
    discussed in [“Formatting of User-Coded Classes”](ch09.xhtml#formatting_of_user_coded_classes),
    allowing you to equivalently write, for a datetime.datetime object d, either f'{d:%Y/%m/%d}'
    or '{:%Y/%m/%d}'.format(d), both of which give a result such as ’2022/04/17’.
    For ISO 8601–format datetimes, see the isoformat() and fromisoformat() methods
    covered in [“The date Class”](#the_date_class). |
  prefs: []
  type: TYPE_NORMAL
- en: '| strptime | strptime(*str*, *fmt*) Parses *str* according to format string
    *fmt* (a string such as ''%a %b %d %H:%M:%S %Y'', as covered in the discussion
    of strftime) and returns the instant as a timetuple. If no time values are provided,
    defaults to midnight. If no date values are provided, defaults to January 1, 1900\.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| time | time() Returns the current time instant, a float with seconds since
    the epoch. On some (mostly older) platforms, the precision of this time is as
    low as one second. May return a lower value in a subsequent call if the system
    clock is adjusted backward between calls (e.g., due to leap seconds). |'
  prefs: []
  type: TYPE_TB
- en: '| timezone | The offset in seconds of the local time zone (without DST) from
    UTC (<0 in the Americas; >=0 in most of Europe, Asia, and Africa). |'
  prefs: []
  type: TYPE_TB
- en: '| tzname | A pair of locale-dependent strings, which are the names of the local
    time zone without and with DST, respectively. |'
  prefs: []
  type: TYPE_TB
- en: '| ^([a](ch13.xhtml#ch01fn112-marker)) mktime’s result’s fractional part is
    always 0, since its timetuple argument does not account for fractions of a second.
    |'
  prefs: []
  type: TYPE_TB
- en: Table 13-3\. Conversion characters for strftime
  prefs: []
  type: TYPE_NORMAL
- en: '| Type char | Meaning | Special notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| a | Weekday name, abbreviated | Depends on locale |'
  prefs: []
  type: TYPE_TB
- en: '| A | Weekday name, full | Depends on locale |'
  prefs: []
  type: TYPE_TB
- en: '| b | Month name, abbreviated | Depends on locale |'
  prefs: []
  type: TYPE_TB
- en: '| B | Month name, full | Depends on locale |'
  prefs: []
  type: TYPE_TB
- en: '| c | Complete date and time representation | Depends on locale |'
  prefs: []
  type: TYPE_TB
- en: '| d | Day of the month | Between 1 and 31 |'
  prefs: []
  type: TYPE_TB
- en: '| f | Microsecond as decimal, zero-padded to six digits | One to six digits
    |'
  prefs: []
  type: TYPE_TB
- en: '| G | ISO 8601:2000 standard week-based year number |   |'
  prefs: []
  type: TYPE_TB
- en: '| H | Hour (24-hour clock) | Between 0 and 23 |'
  prefs: []
  type: TYPE_TB
- en: '| I | Hour (12-hour clock) | Between 1 and 12 |'
  prefs: []
  type: TYPE_TB
- en: '| j | Day of the year | Between 1 and 366 |'
  prefs: []
  type: TYPE_TB
- en: '| m | Month number | Between 1 and 12 |'
  prefs: []
  type: TYPE_TB
- en: '| M | Minute number | Between 0 and 59 |'
  prefs: []
  type: TYPE_TB
- en: '| p | A.M. or P.M. equivalent | Depends on locale |'
  prefs: []
  type: TYPE_TB
- en: '| S | Second number | Between 0 and 61 |'
  prefs: []
  type: TYPE_TB
- en: '| u | Day of week | Monday is 1, up to 7 |'
  prefs: []
  type: TYPE_TB
- en: '| U | Week number (Sunday first weekday) | Between 0 and 53 |'
  prefs: []
  type: TYPE_TB
- en: '| V | ISO 8601:2000 standard week-based week number |   |'
  prefs: []
  type: TYPE_TB
- en: '| w | Weekday number | 0 is Sunday, up to 6 |'
  prefs: []
  type: TYPE_TB
- en: '| W | Week number (Monday first weekday) | Between 0 and 53 |'
  prefs: []
  type: TYPE_TB
- en: '| x | Complete date representation | Depends on locale |'
  prefs: []
  type: TYPE_TB
- en: '| X | Complete time representation | Depends on locale |'
  prefs: []
  type: TYPE_TB
- en: '| y | Year number within century | Between 0 and 99 |'
  prefs: []
  type: TYPE_TB
- en: '| Y | Year number | 1970 to 2038, or wider |'
  prefs: []
  type: TYPE_TB
- en: '| z | UTC offset as a string: ±HHMM[SS[.ffffff]] |   |'
  prefs: []
  type: TYPE_TB
- en: '| Z | Name of time zone | Empty if no time zone exists |'
  prefs: []
  type: TYPE_TB
- en: '| % | A literal % character | Encoded as %% |'
  prefs: []
  type: TYPE_TB
- en: The datetime Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'datetime provides classes for modeling date and time objects, which can be
    either *aware* of time zones or *naive* (the default). The class tzinfo, whose
    instances model a time zone, is abstract: the datetime module supplies only one
    simple implementation, datetime.timezone (for all the gory details, see the [online
    docs](https://oreil.ly/8Bt8N)). The zoneinfo module, covered in the following
    section, offers a richer concrete implementation of tzinfo, which lets you easily
    create time zone-aware datetime objects. All types in datetime have immutable
    instances: attributes are read-only, instances can be keys in a dict or items
    in a set, and all functions and methods return new objects, never altering objects
    passed as arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: The date Class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instances of the date class represent a date (no time of day in particular
    within that date) between date.min <= d <= date.max, are always naive, and assume
    the Gregorian calendar was always in effect. date instances have three read-only
    integer attributes: *year*, *month*, and *day*. The constructor for this class
    has the signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '| date | **class** date(*year, month, day*) Returns a date object for the given
    *year*, *month*, and *day* arguments, in the valid ranges 1 <= *year* <= 9999,
    1 <= *month* <= 12, and 1 <= *day* <= *n*, where *n* is the number of days for
    the given month and year. Raises ValueError if invalid values are given. |'
  prefs: []
  type: TYPE_TB
- en: The date class also supplies three class methods usable as alternative constructors,
    listed in [Table 13-4](#alternative_datetime_constructor).
  prefs: []
  type: TYPE_NORMAL
- en: Table 13-4\. Alternative date constructors
  prefs: []
  type: TYPE_NORMAL
- en: '| fromordinal | date.fromordinal(*ordinal*) Returns a date object corresponding
    to the [proleptic Gregorian ordinal](https://oreil.ly/o_Li9) *ordinal*, where
    a value of 1 corresponds to the first day of year 1 CE. |'
  prefs: []
  type: TYPE_TB
- en: '| fromtimestamp | date.fromtimestamp(*timestamp*) Returns a date object corresponding
    to the instant *timestamp* expressed in seconds since the epoch. |'
  prefs: []
  type: TYPE_TB
- en: '| today | date.today() Returns a date representing today’s date. |'
  prefs: []
  type: TYPE_TB
- en: Instances of the date class support some arithmetic. The difference between
    date instances is a timedelta instance; you can add or subtract a timedelta to
    or from a date instance to make another date instance. You can also compare any
    two instances of the date class (the later one is greater).
  prefs: []
  type: TYPE_NORMAL
- en: An instance *d* of the class date supplies the methods listed in [Table 13-5](#methods_of_an_instance_d_of_class_date).
  prefs: []
  type: TYPE_NORMAL
- en: Table 13-5\. Methods of an instance d of class date
  prefs: []
  type: TYPE_NORMAL
- en: '| ctime | *d*.ctime() Returns a string representing the date *d* in the same
    24-character format as time.ctime (with the time of day set to 00:00:00, midnight).
    |'
  prefs: []
  type: TYPE_TB
- en: '| isocalendar | *d*.isocalendar() Returns a tuple with three integers (ISO
    year, ISO week number, and ISO weekday). See the [ISO 8601 standard](https://oreil.ly/e5yfG)
    for more details about the ISO (International Standards Organization) calendar.
    |'
  prefs: []
  type: TYPE_TB
- en: '| isoformat | *d*.isoformat() Returns a string representing date *d* in the
    format ''YYYY-MM-DD''; same as str(*d*). |'
  prefs: []
  type: TYPE_TB
- en: '| isoweekday | *d*.isoweekday() Returns the day of the week of date *d* as
    an integer, 1 for Monday through 7 for Sunday; like d.weekday() + 1. |'
  prefs: []
  type: TYPE_TB
- en: '| replace | *d*.replace(year=**None**, month=**None**, day=**None**) Returns
    a new date object, like *d* except for those attributes explicitly specified as
    arguments, which get replaced. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| strftime | *d*.strftime(*fmt*) Returns a string representing date *d* as
    specified by string *fmt*, like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| timetuple | *d*.timetuple() Returns a timetuple corresponding to date *d*
    at time 00:00:00 (midnight). |'
  prefs: []
  type: TYPE_TB
- en: '| toordinal | *d*.toordinal() Returns the proleptic Gregorian ordinal for date
    *d*. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| weekday | *d*.weekday() Returns the day of the week of date *d* as an integer,
    0 for Monday through 6 for Sunday; like d.isoweekday() - 1. |'
  prefs: []
  type: TYPE_TB
- en: The time Class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instances of the time class represent a time of day (of no particular date),
    may be naive or aware regarding time zones, and always ignore leap seconds. They
    have five attributes: four read-only integers (hour, minute, second, and microsecond)
    and an optional read-only tzinfo (**None** for naive instances). The constructor
    for the time class has the signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '| time | **class** time(hour=0, minute=0, second=0, microsecond=0, tzinfo=**None**)
    Instances of the class time do not support arithmetic. You can compare two instances
    of time (the one that’s later in the day is greater), but only if they are either
    both aware or both naive. |'
  prefs: []
  type: TYPE_TB
- en: An instance *t* of the class time supplies the methods listed in [Table 13-6](#methods_of_an_instance_t_of_class_time).
  prefs: []
  type: TYPE_NORMAL
- en: Table 13-6\. Methods of an instance t of class time
  prefs: []
  type: TYPE_NORMAL
- en: '| isoformat | *t*.isoformat() Returns a string representing time *t* in the
    format ''HH:MM:SS''; same as str(*t*). If *t*.microsecond != 0, the resulting
    string is longer: ''HH:MM:SS.mmmmmm''. If *t* is aware, six more characters, ''+HH:MM'',
    are added at the end to represent the time zone’s offset from UTC. In other words,
    this formatting operation follows the [ISO 8601 standard](https://oreil.ly/e5yfG).
    |'
  prefs: []
  type: TYPE_TB
- en: '| replace | *t*.replace(hour=**None**, minute=**None**, second=**None**, microsecond=**None**[,
    *tzinfo*]) Returns a new time object, like *t* except for those attributes explicitly
    specified as arguments, which get replaced. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| strftime | *t*.strftime(*fmt*) Returns a string representing time *t* as
    specified by the string *fmt*. |'
  prefs: []
  type: TYPE_TB
- en: An instance *t* of the class time also supplies methods dst, tzname, and utcoffset,
    which accept no arguments and delegate to *t*.tzinfo, returning **None** when
    *t*.tzinfo is **None**.
  prefs: []
  type: TYPE_NORMAL
- en: The datetime Class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instances of the datetime class represent an instant (a date, with a specific
    time of day within that date), may be naive or aware of time zones, and always
    ignore leap seconds. datetime extends date and adds time’s attributes; its instances
    have read-only integer attributes year, month, day, hour, minute, second, and
    microsecond, and an optional tzinfo attribute (**None** for naive instances).
    In addition, datetime instances have a readonly fold attribute to distinguish
    between ambiguous timestamps during a rollback of the clock (such as the “fall
    back” at the end of daylight savings time, which creates duplicate naive times
    between 1 A.M. and 2 A.M.). fold has the value 0 or 1 0 corresponds to the time
    *before* the rollback; 1 to the time *after* the rollback.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instances of datetime support some arithmetic: the difference between datetime
    instances (both aware, or both naive) is a timedelta instance, and you can add
    or subtract a timedelta instance to or from a datetime instance to construct another
    datetime instance. You can compare two instances of the datetime class (the later
    one is greater) as long as they’re both aware or both naive. The constructor for
    this class has the signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '| datetime | **class** datetime(*year*, *month*, *day*, hour=0, minute=0, second=0,
    microsecond=0, tzinfo=**None**, *, fold=0) Returns a datetime object following
    similar constraints as the date class constructor. fold is an int with the value
    0 or 1, as described previously. |'
  prefs: []
  type: TYPE_TB
- en: datetime also supplies some class methods usable as alternative constructors,
    covered in [Table 13-7](#alternative_datetime_constructors).
  prefs: []
  type: TYPE_NORMAL
- en: Table 13-7\. Alternative datetime constructors
  prefs: []
  type: TYPE_NORMAL
- en: '| combine | datetime.combine(*date*, *time*) Returns a datetime object with
    the date attributes taken from *date* and the time attributes (including tzinfo)
    taken from *time*. datetime.combine(*d, t*) is like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| fromordinal | datetime.fromordinal(*ordinal*) Returns a datetime object for
    the date given proleptic Gregorian ordinal *ordinal*, where a value of 1 means
    the first day of year 1 CE, at midnight. |'
  prefs: []
  type: TYPE_TB
- en: '| fromt⁠i⁠m⁠e​s⁠t⁠a⁠mp | datetime.fromtimestamp(*timestamp*, tz=**None**) Returns
    a datetime object corresponding to the instant *timestamp* expressed in seconds
    since the epoch, in local time. When tz is not **None**, returns an aware datetime
    object with the given tzinfo instance tz. |'
  prefs: []
  type: TYPE_TB
- en: '| now | datetime.now(tz=**None**) Returns a naive datetime object for the current
    local date and time. When tz is not **None**, returns an aware datetime object
    with the given tzinfo instance tz. |'
  prefs: []
  type: TYPE_TB
- en: '| strptime | datetime.strptime(*str*, *fmt*) Returns a datetime representing
    *str* as specified by string *fmt*. When %z is present in *fmt*, the resulting
    datetime object is time zone–aware. |'
  prefs: []
  type: TYPE_TB
- en: '| today | datetime.today() Returns a naive datetime object representing the
    current local date and time; same as the now class method but does not accept
    optional argument *tz*. |'
  prefs: []
  type: TYPE_TB
- en: '| utcf⁠r⁠o⁠m​t⁠i⁠m⁠estamp | datetime.utcfromtimestamp(*timestamp*) Returns
    a naive datetime object corresponding to the instant *timestamp* expressed in
    seconds since the epoch, in UTC. |'
  prefs: []
  type: TYPE_TB
- en: '| utcnow | datetime.utcnow() Returns a naive datetime object representing the
    current date and time, in UTC. |'
  prefs: []
  type: TYPE_TB
- en: An instance *d* of datetime also supplies the methods listed in [Table 13-8](#methods_of_an_instance_d_of_datetime).
  prefs: []
  type: TYPE_NORMAL
- en: Table 13-8\. Methods of an instance d of datetime
  prefs: []
  type: TYPE_NORMAL
- en: '| astimezone | *d*.astimezone(*tz*) Returns a new aware datetime object, like
    *d*, except that the date and time are converted along with the time zone to the
    one in tzinfo object *tz*.^([a](ch13.xhtml#ch01fn113)) *d* must be aware, to avoid
    potential bugs. Passing a naive *d* may lead to unexpected results. |'
  prefs: []
  type: TYPE_TB
- en: '| ctime | *d*.ctime() Returns a string representing date and time *d* in the
    same 24-character format as time.ctime. |'
  prefs: []
  type: TYPE_TB
- en: '| date | *d*.date() Returns a date object representing the same date as *d*.
    |'
  prefs: []
  type: TYPE_TB
- en: '| isocalendar | *d*.isocalendar() Returns a tuple with three integers (ISO
    year, ISO week number, and ISO weekday) for *d*’s date. |'
  prefs: []
  type: TYPE_TB
- en: '| isoformat | *d*.isoformat(sep=''T'') Returns a string representing *d* in
    the format ''YYYY-MM-DDxHH:MM:SS'', where *x* is the value of argument sep (must
    be a string of length 1). If *d*.microsecond != 0, seven characters, ''.mmmmmm'',
    are added after the ''SS'' part of the string. If *t* is aware, six more characters,
    ''+HH:MM'', are added at the end to represent the time zone’s offset from UTC.
    In other words, this formatting operation follows the ISO 8601 standard. str(*d*)
    is the same as *d*.isoformat(sep='' ''). |'
  prefs: []
  type: TYPE_TB
- en: '| isoweekday | *d*.isoweekday() Returns the day of the week of *d*’s date as
    an integer, 1 for Monday through 7 for Sunday. |'
  prefs: []
  type: TYPE_TB
- en: '| replace | *d*.replace(year=**None**, month=**None**, day=**None**, hour=**None**,
    minute=**None**, second=**None**, microsecond=**None**, tzinfo=**None**,*, fold=0)
    Returns a new datetime object, like *d* except for those attributes specified
    as arguments, which get replaced (but does *no* time zone conversion—use astimezone
    if you want the time converted). You can also use replace to create an aware datetime
    object from a naive one. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| strftime | *d*.strftime(*fmt*) Returns a string representing *d* as specified
    by the format string *fmt*. |'
  prefs: []
  type: TYPE_TB
- en: '| time | *d*.time() Returns a naive time object representing the same time
    of day as *d*. |'
  prefs: []
  type: TYPE_TB
- en: '| timestamp | *d*.timestamp() Returns a float with the seconds since the epoch.
    Naive instances are assumed to be in the local time zone. |'
  prefs: []
  type: TYPE_TB
- en: '| timetuple | *d*.timetuple() Returns a timetuple corresponding to instant
    *d*. |'
  prefs: []
  type: TYPE_TB
- en: '| timetz | *d*.timetz() Returns a time object representing the same time of
    day as *d*, with the same tzinfo. |'
  prefs: []
  type: TYPE_TB
- en: '| toordinal | *d*.toordinal() Returns the proleptic Gregorian ordinal for *d*’s
    date. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: datetime(1, 1, 1).toordinal() == 1 |
  prefs: []
  type: TYPE_NORMAL
- en: '| utct⁠i⁠m⁠e​t⁠u⁠p⁠le | *d*.utctimetuple() Returns a timetuple corresponding
    to instant *d*, normalized to UTC if *d* is aware. |'
  prefs: []
  type: TYPE_TB
- en: '| weekday | *d*.weekday() Returns the day of the week of *d*’s date as an integer,
    0 for Monday through 6 for Sunday. |'
  prefs: []
  type: TYPE_TB
- en: '| ^([a](ch13.xhtml#ch01fn113-marker)) Note that *d*.astimezone(*tz*) is quite
    different from *d*.replace(tzinfo=*tz*): replace does no time zone conversion,
    but rather just copies all of *d*’s attributes except for *d*.tzinfo. |'
  prefs: []
  type: TYPE_TB
- en: An instance *d* of the class datetime also supplies the methods dst, tzname,
    and utcoffset, which accept no arguments and delegate to *d*.tzinfo, returning
    **None** when *d*.tzinfo is **None** (i.e., when *d* is naive).
  prefs: []
  type: TYPE_NORMAL
- en: The timedelta Class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instances of the timedelta class represent time intervals with three read-only
    integer attributes: days, seconds, and microseconds. The constructor for this
    class has the signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '| timedelta | timedelta(days=0, seconds=0, microseconds=0, milliseconds=0,
    minutes=0, hours=0, weeks=0) Converts all units with the obvious factors (a week
    is 7 days, an hour is 3,600 seconds, and so on) and normalizes everything to the
    three integer attributes, ensuring that 0 <= seconds < 24 * 60 * 60 and 0 <= microseconds
    < 1000000. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Instances of timedelta support arithmetic: + and - between themselves and with
    instances of the classes date and datetime; * with integers; / with integers and
    timedelta instances (floor division, true division, divmod, %). They also support
    comparisons between themselves. |'
  prefs: []
  type: TYPE_NORMAL
- en: While timedelta instances can be created using this constructor, they are more
    often created by subtracting two date, time, or datetime instances, such that
    the resulting timedelta represents an elapsed time period. An instance *td* of
    timedelta supplies a method *td*.total_seconds() that returns a float representing
    the total seconds of a timedelta instance.
  prefs: []
  type: TYPE_NORMAL
- en: The tzinfo Abstract Class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The tzinfo class defines the abstract class methods listed in [Table 13-9](#methods_of_the_tzinfo_class),
    to support creation and usage of aware datetime and time objects.
  prefs: []
  type: TYPE_NORMAL
- en: Table 13-9\. Methods of the tzinfo class
  prefs: []
  type: TYPE_NORMAL
- en: '| dst | dst(*dt*) Returns the daylight savings offset of a given datetime,
    as a timedelta object |'
  prefs: []
  type: TYPE_TB
- en: '| tzname | tzname(*dt*) Returns the abbreviation for the time zone of a given
    datetime |'
  prefs: []
  type: TYPE_TB
- en: '| utcoffset | utcoffset(*dt*) Returns the offset from UTC of a given datetime,
    as a timedelta object |'
  prefs: []
  type: TYPE_TB
- en: tzinfo also defines a fromutc abstract instance method, primarily for internal
    use by the datetime.astimezone method.
  prefs: []
  type: TYPE_NORMAL
- en: The timezone Class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The timezone class is a concrete implementation of the tzinfo class. You construct
    a timezone instance using a timedelta representing the time offset from UTC. timezone
    supplies one class property, utc, a timezone representing the UTC time zone (equivalent
    to timezone(timedelta(0))).
  prefs: []
  type: TYPE_NORMAL
- en: The zoneinfo Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 3.9+ The zoneinfo module is a concrete implementation of timezones for use with
    datetime’s tzinfo.^([3](ch13.xhtml#ch01fn114)) zoneinfo uses the system’s time
    zone data by default, with [tzdata](https://oreil.ly/i1PF6) as a fallback. (On
    Windows, you may need to **pip install tzdata**; once installed, you don’t import
    tzdata in your program—rather, zoneinfo uses it automatically.)
  prefs: []
  type: TYPE_NORMAL
- en: 'zoneinfo provides one class: ZoneInfo, a concrete implementation of the datetime.tzinfo
    abstract class. You can assign it to tzinfo during construction of an aware datetime
    instance, or use it with the datetime.replace or datetime.astimezone methods.
    To construct a ZoneInfo, use one of the defined IANA time zone names, such as
    "America/Los_Angeles" or "Asia/Tokyo". You can get a list of these time zone names
    by calling zoneinfo.available_timezones(). More details on each time zone (such
    as offset from UTC and daylight savings information) can be found [on Wikipedia](https://oreil.ly/0u4KW).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples using ZoneInfo. We’ll start by getting the current local
    date and time in California:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now update the time zone to a different one *without* changing other
    attributes (i.e., without converting the time to the new time zone):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Convert a datetime instance to UTC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Get an *aware* timestamp of the current time in UTC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the datetime instance in a different time zone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the local time zone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Convert the UTC datetime instance back into the local time zone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'And get a sorted list of all available time zones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Always Use the UTC Time Zone Internally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to program around the traps and pitfalls of time zones is to always
    use the UTC time zone internally, converting from other time zones on input, and
    use datetime.astimezone only for display purposes.
  prefs: []
  type: TYPE_NORMAL
- en: This tip applies even if your application runs only in your own location, with
    no intention of ever using time data from other time zones. If your application
    runs continuously for days or weeks at a time, and the time zone configured for
    your system observes daylight savings time, you *will* run into time zone-related
    issues if you don’t work in UTC internally.
  prefs: []
  type: TYPE_NORMAL
- en: The dateutil Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The third-party package [dateutil](https://oreil.ly/KKEf6) (which you can install
    with **pip install python-dateutil**) offers modules to manipulate dates in many
    ways. [Table 13-10](#dateutil_modules) lists the main modules it provides, in
    addition to those for time zone–related operations (now best performed with zoneinfo,
    discussed in the previous section).
  prefs: []
  type: TYPE_NORMAL
- en: Table 13-10\. dateutil modules
  prefs: []
  type: TYPE_NORMAL
- en: '| easter | easter.easter(*year*) Returns the datetime.date object for Easter
    of the given *year*. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| parser | parser.parse(*s*) Returns the datetime.datetime object denoted by
    string *s*, with very permissive (or “fuzzy”) parsing rules. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| relativedelta | relativedelta.relativedelta(...) Provides, among other things,
    an easy way to find “next Monday,” “last year,” etc. dateutil’s [docs](https://oreil.ly/1zJqi)
    offer detailed explanations of the rules defining the inevitably complicated behavior
    of relativedelta instances. |'
  prefs: []
  type: TYPE_TB
- en: '| rrule | rrule.rrule(*freq*, ...) Implements [RFC 2445](https://oreil.ly/Xs_NN)
    (also known as the iCalendar RFC), in all the glory of its 140+ pages. rrule allows
    you to deal with recurring events, providing such methods as after, before, between,
    and count. |'
  prefs: []
  type: TYPE_TB
- en: See the [documentation](https://oreil.ly/dmYej) for complete details on the
    dateutil module’s rich functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The sched Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The sched module implements an event scheduler, letting you easily deal with
    events that may be scheduled in either a “real” or a “simulated” time scale. This
    event scheduler is safe to use in single and multithreaded environments. sched
    supplies a scheduler class that takes two optional arguments, timefunc and delayfunc.
  prefs: []
  type: TYPE_NORMAL
- en: '| scheduler | **class** scheduler(timefunc=time.monotonic, delayfunc=time.sleep)
    The optional argument timefunc must be callable without arguments to get the current
    time instant (in any unit of measure); for example, you can pass time.time. The
    optional delayfunc is callable with one argument (a time duration, in the same
    units as timefunc) to delay the current thread for that time. scheduler calls
    delayfunc(0) after each event to give other threads a chance; this is compatible
    with time.sleep. By taking functions as arguments, scheduler lets you use whatever
    “simulated time” or “pseudotime” fits your application’s needs^([a](ch13.xhtml#ch01fn115)).'
  prefs: []
  type: TYPE_NORMAL
- en: If monotonic time (time that cannot go backward even if the system clock is
    adjusted backward between calls, e.g., due to leap seconds) is critical to your
    application, use the default time.monotonic for your scheduler. |
  prefs: []
  type: TYPE_NORMAL
- en: '| ^([a](ch13.xhtml#ch01fn115-marker)) A great example of the [dependency injection
    design pattern](https://oreil.ly/F8W_Z) for purposes not necessarily related to
    testing. |'
  prefs: []
  type: TYPE_TB
- en: A scheduler instance *s* supplies the methods detailed in [Table 13-11](#methods_of_an_instance_s_of_scheduler).
  prefs: []
  type: TYPE_NORMAL
- en: Table 13-11\. Methods of an instance s of scheduler
  prefs: []
  type: TYPE_NORMAL
- en: '| cancel | *s*.cancel(*event_token*) Removes an event from *s*’s queue. *event_token*
    must be the result of a previous call to *s*.enter or *s*.enterabs, and the event
    must not yet have happened; otherwise, cancel raises RuntimeError. |'
  prefs: []
  type: TYPE_TB
- en: '| empty | *s*.empty() Returns **True** when *s*’s queue is currently empty;
    otherwise, returns **False**. |'
  prefs: []
  type: TYPE_TB
- en: '| enter | *s*.enter(*delay*, *priority*, *func*, argument=(), kwargs={}) Like
    enterabs, except that *delay* is a relative time (a positive difference forward
    from the current instant), while enterabs’s argument *when* is an absolute time
    (a future instant). To schedule an event for *repeated* execution, use a little
    wrapper function; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| enterabs | *s*.enterabs(*when*, *priority*, *func*, argument=(), kwargs={})
    Schedules a future event (a callback to *func*(*args*, *kwargs*)) at time *when*.
    *when* is in the units used by the time functions of *s*. Should several events
    be scheduled for the same time, *s* executes them in increasing order of *priority*.
    enterabs returns an event token *t*, which you may later pass to *s*.cancel to
    cancel this event. |'
  prefs: []
  type: TYPE_TB
- en: '| run | *s*.run(blocking=**True**) Runs scheduled events. If blocking is **True**,
    *s*.run loops until *s*.empty returns **True**, using the delayfunc passed on
    *s*’s initialization to wait for each scheduled event. If blocking is **False**,
    executes any soon-to-expire events, then returns the next event’s deadline (if
    any). When a callback *func* raises an exception, *s* propagates it, but *s* keeps
    its own state, removing the event from the schedule. If a callback *func* runs
    longer than the time available before the next scheduled event, *s* falls behind
    but keeps executing scheduled events in order, never dropping any. Call *s*.cancel
    to drop an event explicitly if that event is no longer of interest. |'
  prefs: []
  type: TYPE_TB
- en: The calendar Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The calendar module supplies calendar-related functions, including functions
    to print a text calendar for a given month or year. By default, calendar takes
    Monday as the first day of the week and Sunday as the last one. To change this,
    call calendar.setfirstweekday. calendar handles years in module time’s range,
    typically (at least) 1970 to 2038.
  prefs: []
  type: TYPE_NORMAL
- en: The calendar module supplies the functions listed in [Table 13-12](#functions_of_the_calendar_module).
  prefs: []
  type: TYPE_NORMAL
- en: Table 13-12\. Functions of the calendar module
  prefs: []
  type: TYPE_NORMAL
- en: '| calendar | calendar(*year,* w=2, li=1, c=6) Returns a multiline string with
    a calendar for year *year* formatted into three columns separated by c spaces.
    w is the width in characters of each date; each line has length 21*w+18+2*c. li
    is the number of lines for each week. |'
  prefs: []
  type: TYPE_TB
- en: '| firstweekday | firstweekday() Returns the current setting for the weekday
    that starts each week. By default, when calendar is first imported, this is 0
    (meaning Monday). |'
  prefs: []
  type: TYPE_TB
- en: '| isleap | isleap(*year*) Returns **True** if *year* is a leap year; otherwise,
    returns **False**. |'
  prefs: []
  type: TYPE_TB
- en: '| leapdays | leapdays(*y1*, *y2*) Returns the total number of leap days in
    the years within range(*y1*, *y2*) (remember, this means that *y2* is excluded).
    |'
  prefs: []
  type: TYPE_TB
- en: '| month | month(*year*, *month*, w=2, li=1) Returns a multiline string with
    a calendar for month *month* of year *year*, one line per week plus two header
    lines. w is the width in characters of each date; each line has length 7*w+6.
    li is the number of lines for each week. |'
  prefs: []
  type: TYPE_TB
- en: '| mo⁠n⁠t⁠h​c⁠a⁠l⁠endar | monthcalendar(*year*, *month*) Returns a list of lists
    of ints. Each sublist denotes a week. Days outside month *month* of year *year*
    are set to 0; days within the month are set to their day of month, 1 and up. |'
  prefs: []
  type: TYPE_TB
- en: '| monthrange | monthrange(*year*, *month*) Returns two integers. The first
    one is the code of the weekday for the first day of the month *month* in year
    *year*; the second one is the number of days in the month. Weekday codes are 0
    (Monday) to 6 (Sunday); month numbers are 1 to 12. |'
  prefs: []
  type: TYPE_TB
- en: '| prcal | prcal(*year*, w=2, li=1, c=6) Like print(calendar.calendar(*year*,
    *w*, *li*, *c*)). |'
  prefs: []
  type: TYPE_TB
- en: '| prmonth | prmonth(*year*, *month*, w=2, li=1) Like print(calendar.month(*year*,
    *month*, *w*, *li*)). |'
  prefs: []
  type: TYPE_TB
- en: '| setfirstweekday | setfirstweekday(*weekday*) Sets the first day of each week
    to weekday code *weekday*. Weekday codes are 0 (Monday) to 6 (Sunday). calendar
    supplies the attributes MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY,
    and SUNDAY, whose values are the integers 0 to 6. Use these attributes when you
    mean weekdays (e.g., calendar.FRIDAY instead of 4) to make your code clearer and
    more readable. |'
  prefs: []
  type: TYPE_TB
- en: '| timegm | timegm(*tupletime*) Just like time.mktime: accepts a time instant
    in timetuple form and returns that instant as a float number of seconds since
    the epoch. |'
  prefs: []
  type: TYPE_TB
- en: '| weekday | weekday(*year*, *month*, *day*) Returns the weekday code for the
    given date. Weekday codes are 0 (Monday) to 6 (Sunday); month numbers are 1 (January)
    to 12 (December). |'
  prefs: []
  type: TYPE_TB
- en: '**python -m calendar** offers a useful command-line interface to the module’s
    functionality: run **python -m calendar -h** to get a brief help message.'
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch13.xhtml#ch01fn110-marker)) On older Unix systems, 1970-01-01 is the
    start of the epoch, and 2038-01-19 is when 32-bit time wraps back to the epoch.
    Most modern systems now use 64-bit time, and many time methods can accept a year
    from 0001 to 9999, but some methods, or old systems (especially embedded ones),
    may still be limited.
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch13.xhtml#ch01fn111-marker)) time and datetime don’t account for leap
    seconds, since their schedule is not known for the future.
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch13.xhtml#ch01fn114-marker)) Pre-3.9, use instead the third-party module
    [pytz](https://oreil.ly/65xFP).
  prefs: []
  type: TYPE_NORMAL
