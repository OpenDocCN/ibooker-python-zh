- en: 'Chapter 8\. Prettification: Layout and Styling, and What to Test About It'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。美化：布局和样式，以及需要测试的内容
- en: We’re starting to think about releasing the first version of our site, but we’re
    a bit embarrassed by how ugly it looks at the moment. In this chapter, we’ll cover
    some of the basics of styling, including integrating an HTML/CSS framework called
    Bootstrap. We’ll learn how static files work in Django, and what we need to do
    about testing them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始考虑发布我们网站的第一个版本，但目前它看起来有点丑。在本章中，我们将涵盖一些基本的样式内容，包括集成一个名为Bootstrap的HTML/CSS框架。我们将学习静态文件在Django中的工作原理，以及我们需要测试的内容。
- en: Testing Layout and Style
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试布局和样式
- en: Our site is undeniably a bit unattractive at the moment ([Figure 8-1](#homepage-looking-ugly)).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们的网站确实有点不太吸引人（[Figure 8-1](#homepage-looking-ugly)）。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you spin up your dev server with `manage.py runserver`, you may run into
    a database error “table lists_item has no column named list_id”. You need to update
    your local database to reflect the changes we made in *models.py*. Use `manage.py
    migrate`. If it gives you any grief about `IntegrityErrors`, just delete the database
    file^([1](ch08.xhtml#id450)) and try again.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 `manage.py runserver` 启动开发服务器，可能会遇到数据库错误“表 lists_item 没有名为 list_id 的列”。您需要更新本地数据库以反映我们在
    *models.py* 中所做的更改。使用 `manage.py migrate`。如果出现 `IntegrityErrors` 的问题，只需删除数据库文件^([1](ch08.xhtml#id450))
    然后重试。
- en: 'We can’t be adding to Python’s reputation for being [ugly](http://grokcode.com/746/dear-python-why-are-you-so-ugly/),
    so let’s do a tiny bit of polishing. Here’s a few things we might want:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能再让Python因为丑陋而声名狼藉了（[ugly](http://grokcode.com/746/dear-python-why-are-you-so-ugly/)），所以让我们稍微进行一些修饰。以下是一些我们可能需要的事项：
- en: A nice large input field for adding new and existing lists
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个漂亮的大输入字段，用于添加新的和现有的列表
- en: A large, attention-grabbing, centered box to put it in
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个大的、引人注目的、居中的框来放置它
- en: How do we apply TDD to these things? Most people will tell you you shouldn’t
    test aesthetics, and they’re right. It’s a bit like testing a constant, in that
    tests usually wouldn’t add any value.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如何将TDD应用于这些内容？大多数人会告诉你不应该测试美学，他们是对的。这有点像测试常量，通常测试不会增加任何价值。
- en: '![Our home page, looking a little ugly.](assets/ugly-homepage.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![我们的主页，看起来有点丑。](assets/ugly-homepage.png)'
- en: Figure 8-1\. Our home page, looking a little ugly…​
  id: totrans-11
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8-1。我们的主页，看起来有点丑…​
- en: But we can test the essential *behaviour* of our aesthetics, ie, that we have
    any at all. All we want to do is reassure ourselves that things are working. For
    example, we’re going to use Cascading Style Sheets (CSS) for our styling, and
    they are loaded as static files. Static files can be a bit tricky to configure
    (especially, as we’ll see later, when you move off your own computer and onto
    a hosting site), so we’ll want some kind of simple “smoke test” that the CSS has
    loaded. We don’t have to test fonts and colours and every single pixel, but we
    can do a quick check that the main input box is aligned the way we want it on
    each page, and that will give us confidence that the rest of the styling for that
    page is probably loaded too.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们可以测试我们美学的基本*行为*，也就是我们是否有任何美学。我们只想要确认事物是否工作。例如，我们将使用层叠样式表（CSS）进行样式设置，它们作为静态文件加载。静态文件配置可能有些棘手（特别是当您从自己的计算机移动到托管网站时，后面我们会看到），因此我们需要一种简单的“烟雾测试”，来确认CSS已加载。我们不必测试字体和颜色以及每一个像素，但我们可以快速检查每个页面上主输入框的对齐方式，这将使我们确信页面的其余样式也已加载。
- en: 'Let’s add a new test method inside our functional test:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的功能测试中添加一个新的测试方法：
- en: functional_tests/tests.py (ch08l001)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: functional_tests/tests.py（ch08l001）
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A few new things here. We start by setting the window size to a fixed size.
    We then find the input element, look at its size and location, and do a little
    maths to check whether it seems to be positioned in the middle of the page. `assertAlmostEqual`
    helps us to deal with rounding errors and the occasional weirdness due to scrollbars
    and the like, by letting us specify that we want our arithmetic to work to within
    plus or minus 10 pixels.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一些新的内容在这里。我们首先将窗口大小设置为固定大小。然后找到输入元素，查看其大小和位置，并进行一些数学计算，检查它是否似乎位于页面的中间。`assertAlmostEqual`
    帮助我们处理由于滚动条等因素导致的四舍五入错误和偶尔的怪异行为，通过让我们指定我们希望我们的算术工作在加减10像素的范围内。
- en: 'If we run the functional tests, we get:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行功能测试，我们会得到：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'That’s the expected failure. Still, this kind of FT is easy to get wrong, so
    let’s use a quick-and-dirty “cheat” solution, to check that the FT definitely
    passes when the input box is centered. We’ll delete this code again almost as
    soon as we’ve used it to check the FT:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是预期的失败。尽管如此，这种FT很容易出错，所以让我们使用一个快速而肮脏的“作弊”解决方案，来检查当输入框居中时FT是否确实通过。我们用它来检查FT后，几乎立刻会删除这段代码：
- en: lists/templates/home.xhtml (ch08l002)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/home.xhtml (ch08l002)
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'That passes, which means the FT works. Let’s extend it to make sure that the
    input box is also center-aligned on the page for a new list:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过了测试，这意味着FT起作用了。让我们扩展一下，确保输入框在页面上也是居中对齐的：
- en: functional_tests/tests.py (ch08l003)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: functional_tests/tests.py (ch08l003)
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'That gives us another test failure:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们带来了另一个测试失败：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let’s commit just the FT:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仅提交FT：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now it feels like we’re justified in finding a “proper” solution to our need
    for some better styling for our site. We can back out our hacky `text-align: center`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '现在感觉我们有理由为网站的一些更好的样式需求找到一个“合适的”解决方案。我们可以撤销我们的hacky `text-align: center`：'
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'WARNING: `git reset --hard` is the “take off and nuke the site from orbit”
    Git command, so be careful with it—​it blows away all your un-committed changes.
    Unlike almost everything else you can do with Git, there’s no way of going back
    after this one.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 警告：`git reset --hard`是“从轨道上射出导弹”Git命令，所以要小心——它会清除掉你所有未提交的更改。与Git的几乎所有其他操作不同，这个操作后没有回头的余地。
- en: 'Prettification: Using a CSS Framework'
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 美化：使用CSS框架
- en: UI design is hard, and doubly so now that we have to deal with mobile, tablets,
    and so forth. That’s why many programmers, particularly lazy ones like me, turn
    to CSS frameworks to solve some of those problems for them. There are lots of
    frameworks out there, but one of the earliest and most popular still, is Twitter’s
    Bootstrap. Let’s use that.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: UI设计很难，特别是现在我们必须处理移动设备、平板等。这就是为什么许多程序员，特别是像我这样的懒人，转向CSS框架来解决其中的一些问题。市面上有很多框架可供选择，但最早也是最流行的之一，是Twitter的Bootstrap。让我们来使用它吧。
- en: You can find bootstrap at [*http://getbootstrap.com/*](http://getbootstrap.com/).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[*http://getbootstrap.com/*](http://getbootstrap.com/)找到Bootstrap。
- en: We’ll download it and put it in a new folder called *static* inside the `lists`
    app:^([2](ch08.xhtml#id457))
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将下载它并放入名为*static*的新文件夹中，放在`lists`应用程序内：^([2](ch08.xhtml#id457))
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Bootstrap comes with a plain, uncustomised installation in the *dist* folder.
    We’re going to use that for now, but you should really never do this for a real
    site—​vanilla Bootstrap is instantly recognisable, and a big signal to anyone
    in the know that you couldn’t be bothered to style your site. Learn how to use
    Sass and change the font, if nothing else! There is info in Bootstrap’s docs,
    or there’s an [*https://www.freecodecamp.org/news/how-to-customize-bootstrap-with-sass/*](https://www.freecodecamp.org/news/how-to-customize-bootstrap-with-sass/)
    [introductory guide here].
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap在*dist*文件夹中提供了一个简单的未自定义安装。暂时我们会使用它，但是在真正的网站上你应该尽量避免这样做——原版的Bootstrap非常容易识别，对任何了解情况的人来说都是一个明显的信号，表明你懒得为你的网站定制样式。学习如何使用Sass并更改字体，这是必须的！Bootstrap的文档中有相关信息，或者在[*https://www.freecodecamp.org/news/how-to-customize-bootstrap-with-sass/*](https://www.freecodecamp.org/news/how-to-customize-bootstrap-with-sass/)
    [介绍指南]中也能找到。
- en: 'Our *lists* folder will end up looking like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的*lists*文件夹最终会变成这个样子：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Look at the “Getting Started” section of the [Bootstrap documentation](https://getbootstrap.com/docs/5.3/getting-started/introduction/);
    you’ll see it wants our HTML template to include something like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[Bootstrap文档](https://getbootstrap.com/docs/5.3/getting-started/introduction/)的“入门”部分；你会看到它希望我们的HTML模板包含类似这样的内容：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We already have two HTML templates. We don’t want to be adding a whole load
    of boilerplate code to each, so now feels like the right time to apply the “Don’t
    repeat yourself” rule, and bring all the common parts together. Thankfully, the
    Django template language makes that easy using something called template inheritance.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了两个HTML模板。我们不想在每个模板中添加大量的样板代码，现在是应用“不要重复自己”规则的合适时机，把所有共同的部分合并起来。幸运的是，Django模板语言通过使用称为模板继承的功能使这一切变得很容易。
- en: Django Template Inheritance
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django模板继承
- en: 'Let’s have a little review of what the differences are between *home.xhtml*
    and *list.xhtml*:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来小结一下*home.xhtml*和*list.xhtml*之间的区别：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: They have different header texts, and their forms use different URLs. On top
    of that, *list.xhtml* has the additional `<table>` element.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 它们有不同的标题文本，它们的表单使用不同的URL。此外，*list.xhtml*还有额外的`<table>`元素。
- en: 'Now that we’re clear on what’s in common and what’s not, we can make the two
    templates inherit from a common “superclass” template. We’ll start by making a
    copy of *list.xhtml*:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们清楚了共同点和不同点，我们可以让这两个模板继承自一个共同的“超类”模板。我们将从制作*list.xhtml*的副本开始：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We make this into a base template which just contains the common boilerplate,
    and mark out the “blocks”, places where child templates can customise it:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将其制作成一个基本模板，仅包含常见的样板内容，并标出“块”，即子模板可以自定义的地方：
- en: lists/templates/base.xhtml (ch08l007)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/base.xhtml (ch08l007)
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The base template defines a series of areas called “blocks”, which will be
    places that other templates can hook in and add their own content. Let’s see how
    that works in practice, by changing *home.xhtml* so that it “inherits from” *base.xhtml*:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 基本模板定义了一系列称为“块”的区域，这些区域将是其他模板可以连接并添加其自己内容的地方。让我们看看在实践中如何工作，通过修改*home.xhtml*，使其“继承自”*base.xhtml*：
- en: lists/templates/home.xhtml (ch08l008)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/home.xhtml (ch08l008)
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can see that lots of the boilerplate HTML disappears, and we just concentrate
    on the bits we want to customise. We do the same for *list.xhtml*:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到大量的样板HTML消失了，我们只专注于想要自定义的部分。我们对*list.xhtml*也采取同样的做法：
- en: lists/templates/list.xhtml (ch08l009)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/list.xhtml (ch08l009)
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: That’s a refactor of the way our templates work. We rerun the FTs to make sure
    we haven’t broken anything…​
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们模板工作方式的重构。我们重新运行FT来确保我们没有破坏任何东西…​
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Sure enough, they’re still getting to exactly where they were before. That’s
    worthy of a commit:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，他们仍然达到了之前的目标。这值得提交：
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Integrating Bootstrap
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成Bootstrap
- en: 'Now it’s much easier to integrate the boilerplate code that Bootstrap wants—​we
    won’t add the JavaScript yet, just the CSS:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在更容易集成Bootstrap想要的样板代码—​我们暂时不加入JavaScript，只加入CSS：
- en: lists/templates/base.xhtml (ch08l010)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/base.xhtml (ch08l010)
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Rows and Columns
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行和列
- en: 'Finally, let’s actually use some of the Bootstrap magic! You’ll have to read
    the documentation yourself, but we should be able to use a combination of the
    grid system and the `justify-content-center` class to get what we want:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们实际使用一些Bootstrap魔法！您将不得不自己阅读文档，但我们应该能够使用网格系统和`justify-content-center`类的组合来实现我们想要的效果：
- en: lists/templates/base.xhtml (ch08l011)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/base.xhtml (ch08l011)
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: (If you’ve never seen an HTML tag broken up over several lines, that `<input>`
    may be a little shocking. It is definitely valid, but you don’t have to use it
    if you find it offensive. ;)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: （如果你从未见过HTML标签跨越多行，那么`<input>`可能有点让人吃惊。它肯定是有效的，但如果你觉得不合适，你可以选择不使用它；）
- en: Tip
  id: totrans-71
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Take the time to browse through the [Bootstrap documentation](http://getbootstrap.com/),
    if you’ve never seen it before. It’s a shopping trolley brimming full of useful
    tools to use in your site.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前从未见过，花些时间浏览一下[Bootstrap文档](http://getbootstrap.com/)。它是一个装满了在你的网站中使用的有用工具的购物车。
- en: Does that work?
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以吗？
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Hmm. No. Why isn’t our CSS loading?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯。不对。为什么我们的CSS没有加载？
- en: Static Files in Django
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django中的静态文件
- en: 'Django, and indeed any web server, needs to know two things to deal with static
    files:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Django，以及任何Web服务器，需要知道处理静态文件的两个内容：
- en: How to tell when a URL request is for a static file, as opposed to for some
    HTML that’s going to be served via a view function
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何区分URL请求是静态文件，还是通过视图函数提供的HTML
- en: Where to find the static file the user wants
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户想要的静态文件在哪里找
- en: In other words, static files are a mapping from URLs to files on disk.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，静态文件是从URL到磁盘文件的映射。
- en: 'For item 1, Django lets us define a URL “prefix” to say that any URLs which
    start with that prefix should be treated as requests for static files. By default,
    the prefix is */static/*. It’s defined in *settings.py*:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 对于项目1，Django允许我们定义一个URL“前缀”，以表示任何以该前缀开头的URL都应被视为静态文件请求。默认情况下，前缀是*/static/*。它在*settings.py*中定义：
- en: superlists/settings.py
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: superlists/settings.py
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The rest of the settings we will add to this section are all to do with item
    2: finding the actual static files on disk.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中添加的其余设置，都是关于项目2：找到实际静态文件在磁盘上的位置。
- en: While we’re using the Django development server (`manage.py runserver`), we
    can rely on Django to magically find static files for us—​it’ll just look in any
    subfolder of one of our apps called *static*.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用Django开发服务器（`manage.py runserver`）时，我们可以依赖Django自动为我们找到静态文件—​它只会查找我们应用程序的任何子文件夹中名为*static*的文件夹。
- en: 'You now see why we put all the Bootstrap static files into *lists/static*.
    So why are they not working at the moment? It’s because we’re not using the `/static/`
    URL prefix. Have another look at the link to the CSS in *base.xhtml*:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你看到为什么我们把所有的Bootstrap静态文件放到*lists/static*中了。那么为什么它们现在不起作用呢？因为我们没有使用`/static/`
    URL前缀。再看一下*base.xhtml*中CSS的链接：
- en: '[PRE21]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'That `href` is just what happened to be in the bootstrap docs. To get it to
    work, we need to change it to:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 那个`href`只是碰巧在bootstrap文档中出现的。为了让它工作，我们需要将其更改为：
- en: lists/templates/base.xhtml (ch08l012)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/base.xhtml（ch08l012）
- en: '[PRE22]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now when `runserver` sees the request, it knows that it’s for a static file
    because it begins with `/static/`. It then tries to find a file called *bootstrap/css/bootstrap.min.css*,
    looking in each of our app folders for subfolders called *static*, and it should
    find it at *lists/static/bootstrap/css/bootstrap.min.css*.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当`runserver`接收到请求时，它知道这是一个静态文件，因为请求以`/static/`开头。然后它尝试在每个应用程序文件夹的名为*static*的子文件夹中查找名为*bootstrap/css/bootstrap.min.css*的文件，它应该能在*lists/static/bootstrap/css/bootstrap.min.css*找到它。
- en: So if you take a look manually, you should see it works, as in [Figure 8-2](#list-page-centered).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您手动查看，您应该能看到它正常工作，如图 8-2所示（#list-page-centered）。
- en: '![The list page with centered header.](assets/prettified-1.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![列表页面，标题居中。](assets/prettified-1.png)'
- en: Figure 8-2\. Our site starts to look a little better…​
  id: totrans-94
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-2\. 我们的网站开始看起来好多了…​
- en: Switching to StaticLiveServerTestCase
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切换到StaticLiveServerTestCase
- en: 'If you run the FT though, annoyingly, it still won’t pass:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行功能测试，令人恼火的是，它仍然无法通过：
- en: '[PRE23]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'That’s because, although `runserver` automagically finds static files, `LiveServerTestCase`
    doesn’t. Never fear, though: the Django developers have made an even more magical
    test class called `StaticLiveServerTestCase` (see [the docs](https://docs.djangoproject.com/en/4.2/topics/testing/tools/#liveservertestcase)).'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为，虽然`runserver`自动找到静态文件，`LiveServerTestCase`却没有。但别担心：Django开发人员已经制作了一个更神奇的测试类叫做`StaticLiveServerTestCase`（参见[文档](https://docs.djangoproject.com/en/4.2/topics/testing/tools/#liveservertestcase)）。
- en: 'Let’s switch to that:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们切换到那个：
- en: functional_tests/tests.py (ch08l013)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: functional_tests/tests.py（ch08l013）
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'And now it will find the new CSS, which will get our test to pass:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在它将找到新的CSS，这将使我们的测试通过：
- en: '[PRE25]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Hooray!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 万岁！
- en: Using Bootstrap Components to Improve the Look of the Site
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Bootstrap组件来改善网站的外观
- en: Let’s see if we can do even better, using some of the other tools in Bootstrap’s
    panoply.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看是否可以更进一步，利用Bootstrap全套工具中的一些其他工具。
- en: Jumbotron!
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jumbotron！
- en: The first version of Bootstrap used to ship with a class called `jumbotron`
    for things that are meant to be particularly prominent on the page. It doesn’t
    exit any more, but old-timers like me still pine for it, so they have a specific
    page in the docs that tells you how to recreate it.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap的第一个版本曾经附带一个名为`jumbotron`的类，用于突出显示页面上特别重要的内容。它已经不存在了，但像我这样的老手仍然对它念念不忘，因此他们在文档中有一个专门的页面告诉你如何重新创建它。
- en: 'Essentially, we massively embiggen the main page header and the input form,
    putting it into a grey box with nice rounded corners:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，我们大幅增大了主页面的页头和输入表单，将其放入一个带有漂亮圆角的灰色框中：
- en: lists/templates/base.xhtml (ch08l014)
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/base.xhtml（ch08l014）
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'That ends up looking something like [Figure 8-3](#jumbotron-header):'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这最终看起来像是[图 8-3](#jumbotron-header)：
- en: '![The homepage with a big grey box surrounding the title and input](assets/prettified-2.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![首页，标题和输入周围有一个大灰色框](assets/prettified-2.png)'
- en: Figure 8-3\. A big grey box at the top of the page
  id: totrans-114
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-3\. 页面顶部的大灰色框
- en: Tip
  id: totrans-115
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: When hacking about with design and layout, it’s best to have a window open that
    we can hit refresh on, frequently. Use `python manage.py runserver` to spin up
    the dev server, and then browse to *[*http://localhost:8000*](http://localhost:8000)*
    to see your work as we go.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当进行设计和布局时，最好有一个可以频繁刷新的窗口。使用`python manage.py runserver`启动开发服务器，然后浏览至[*http://localhost:8000*](http://localhost:8000)来查看您的工作进展。
- en: Large Inputs
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大型输入
- en: 'The jumbotron is a good start, but now the input box has tiny text compared
    to everything else. Thankfully, Bootstrap’s form control classes offer an option
    to set an input to be “large”:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: jumbotron是一个不错的开始，但现在输入框的文本与其他内容相比太小了。幸运的是，Bootstrap的表单控制类提供了将输入框设置为“大号”的选项：
- en: lists/templates/base.xhtml (ch08l015)
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/base.xhtml（ch08l015）
- en: '[PRE27]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Table Styling
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表格样式
- en: 'The table text also looks too small compared to the rest of the page now. Adding
    the Bootstrap `table` class improves things, over in *list.xhtml*:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 相对于页面的其他部分，表格文本看起来也太小了。在*list.xhtml*中添加Bootstrap的`table`类可以改善这一点：
- en: lists/templates/list.xhtml (ch08l016)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/list.xhtml (ch08l016)
- en: '[PRE28]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Dark Modeeeeeee
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 黑暗模式啊啊啊啊啊
- en: In contrast to my greybeard nostalgia for the Jumbotron, here’s something relatively
    new to Bootstrap, Dark Mode!
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 与我对 Jumbotron 的怀旧不同，这里是相对于 Bootstrap 相对较新的东西，即黑暗模式！
- en: lists/templates/base.xhtml (ch08l017)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: lists/templates/base.xhtml (ch08l017)
- en: '[PRE29]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Take a look at [Figure 8-4](#dark-modeee). I think that looks great!
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下[图 8-4](#dark-modeee)。我觉得那看起来很棒！
- en: '![Screenshot of lists page in dark mode. Cool.](assets/prettified-dark.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![黑暗模式中的列表页面截图。酷。](assets/prettified-dark.png)'
- en: Figure 8-4\. The lists page goes dark
  id: totrans-131
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-4\. 列表页面变暗
- en: But it’s very much a matter of personal preference, and my editor will kill
    me if I make all the rest of my screenshots use so much ink, so I’m going to revert
    it for now. You feel free to keep it if you like!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 但这在很大程度上是个人偏好的问题，如果我让我所有的其他截图都用上这么多的墨水，我的编辑器会杀了我，所以我现在要回退它。如果你喜欢，你可以保留它！
- en: A semi-decent page
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个半体面的页面
- en: All that took me a few goes, but I’m reasonably happy with it now ([Figure 8-5](#homepage-looking-better)).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我试了几次，但现在我对它还算满意（参见[图 8-5](#homepage-looking-better)）。
- en: '![Screenshot of lists page in light mode with decent styling.](assets/prettified-final.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![带有体面样式的浅色模式列表页面截图。](assets/prettified-final.png)'
- en: Figure 8-5\. The lists page, looking good enough for now…​
  id: totrans-136
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-5\. 列表页面，现在看起来还不错…​
- en: If you want to go further with customising Bootstrap, you need to get into compiling
    Sass. I’ve said it already, but I *definitely* recommend taking the time to do
    that some day. Sass/SCSS is a great improvement on plain old CSS, and a useful
    tool even if you don’t use Bootstrap.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想进一步定制 Bootstrap，你需要深入了解编译 Sass。我已经说过了，但我 *绝对* 推荐有一天花时间去做这件事。Sass/SCSS 对于普通的
    CSS 是一个很大的改进，即使你不使用 Bootstrap，它也是一个很有用的工具。
- en: 'A last run of the functional tests, to see if everything still works OK:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最后运行一下功能测试，看看是否一切都还正常：
- en: '[PRE30]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'That’s it! Definitely time for a commit:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样了！绝对是提交的时候了：
- en: '[PRE31]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'What We Glossed Over: collectstatic and Other Static Directories'
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们忽略的内容：collectstatic 和其他静态目录
- en: We saw earlier that the Django dev server will magically find all your static
    files inside app folders, and serve them for you. That’s fine during development,
    but when you’re running on a real web server, you don’t want Django serving your
    static content—​using Python to serve raw files is slow and inefficient, and a
    web server like Apache or Nginx can do this all for you. You might even decide
    to upload all your static files to a CDN, instead of hosting them yourself.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前看到 Django 开发服务器会自动找到应用文件夹中的所有静态文件，并为您提供服务。这在开发过程中是可以的，但当你在真实的 Web 服务器上运行时，你不希望
    Django 为您提供静态内容——使用 Python 来提供原始文件是慢而低效的，像 Apache 或 Nginx 这样的 Web 服务器可以为您完成这一切。您甚至可以决定将所有的静态文件上传到
    CDN，而不是自己托管它们。
- en: For these reasons, you want to be able to gather up all your static files from
    inside their various app folders, and copy them into a single location, ready
    for deployment. This is what the `collectstatic` command is for.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 出于这些原因，你希望能够从各个应用文件夹中收集起所有的静态文件，并将它们复制到一个单一的位置，以备部署使用。这就是 `collectstatic` 命令的作用。
- en: 'The destination, the place where the collected static files go, is defined
    in *settings.py* as `STATIC_ROOT`. In the next chapter we’ll be doing some deployment,
    so let’s actually experiment with that now. A common and straightforward place
    to put it is in a folder called “static” in the root of our repo:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 目的地，即收集到的静态文件所在的位置，是在 *settings.py* 中定义的 `STATIC_ROOT`。在下一章中，我们将进行一些部署工作，所以现在让我们实验一下。一个常见且简单的放置位置是在我们的
    repo 根目录中的一个名为“static”的文件夹中：
- en: '[PRE32]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Here’s a neat way of specifying that folder, making it relative to the location
    of the project base directory:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这是指定该文件夹的一个简洁的方法，使其相对于项目基本目录的位置：
- en: superlists/settings.py (ch08l019)
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: superlists/settings.py (ch08l019)
- en: '[PRE33]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Take a look at the top of the settings file, and you’ll see how that `BASE_DIR`
    variable is helpfully defined for us, using `pathlib.Path` and `__file__` (both
    really nice Python builtins)^([3](ch08.xhtml#id476)).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 查看设置文件的顶部，你会看到 `BASE_DIR` 变量是如何用 `pathlib.Path` 和 `__file__`（都是 Python 的很好的内置函数）来定义的（参见[3](ch08.xhtml#id476)）。
- en: 'Anyway, let’s try running `collectstatic`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，让我们试着运行 `collectstatic`：
- en: '[PRE34]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'And if we look in *./static*, we’ll find all our CSS files:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看 *./static*，我们会发现所有的 CSS 文件：
- en: '[PRE35]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '`collectstatic` has also picked up all the CSS for the admin site. The admin
    site is one of Django’s powerful features, but we don’t need it for our simple
    site, so let’s disable it for now:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`collectstatic` 还找到了所有用于管理站点的 CSS。管理站点是 Django 的一个强大功能，但是对于我们简单的站点来说，我们不需要它，所以现在让我们将其禁用：'
- en: superlists/settings.py
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: superlists/settings.py
- en: '[PRE36]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'And we try again:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再试一次：
- en: '[PRE37]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Much better.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。
- en: Now we know how to collect all the static files into a single folder, where
    it’s easy for a web server to find them. We’ll find out all about that, including
    how to test it, in the next chapter!
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何将所有静态文件收集到一个文件夹中，这样 Web 服务器就可以轻松找到它们。我们将在下一章中详细了解所有这些，包括如何测试它！
- en: For now let’s save our changes to *settings.py*. We’ll also add the top-level
    static folder to our gitignore, since it will only contain copies of files we
    actually keep in individual apps’ static folders.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们保存对 *settings.py* 的更改。我们还将顶级 static 文件夹添加到 gitignore 中，因为它只包含我们实际保留在各个应用程序的
    static 文件夹中的文件的副本。
- en: '[PRE38]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: A Few Things That Didn’t Make It
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未被采纳的一些事情
- en: 'Inevitably this was only a whirlwind tour of styling and CSS, and there were
    several topics that I’d considered covering that didn’t make it. Here are a few
    candidates for further study:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 不可避免地，这只是对样式和 CSS 的一个快速浏览，有几个我考虑过要涵盖但最终没有涵盖的主题。以下是一些进一步研究的候选课题：
- en: The `{% static %}` template tag, for more DRY and fewer hardcoded URLs
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{% static %}` 模板标签，实现更干净的代码和少量硬编码的 URL'
- en: Client-side packaging tools, like `npm` and `bower`
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端打包工具，如 `npm` 和 `bower`
- en: And again, customising bootstrap with SASS
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 再次，使用 SASS 自定义 bootstrap
- en: ^([1](ch08.xhtml#id450-marker)) What? Delete the database? Are you crazy? Not
    completely. The local dev database often gets out of sync with its migrations
    as we go back and forth in our development, and it doesn’t have any important
    data in it, so it’s OK to blow it away now and again. We’ll be much more careful
    once we have a “production” database on the server. More on this in [Link to Come].
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch08.xhtml#id450-marker)) 什么？删除数据库？你疯了吗？并非完全如此。本地开发数据库经常与其迁移不同步，因为我们在开发过程中来来回回，而且里面没有任何重要数据，所以偶尔清理一下是可以的。一旦我们在服务器上有了“生产”数据库，我们会更加小心谨慎。更多信息请参见[待添加链接]。
- en: ^([2](ch08.xhtml#id457-marker)) On Windows, you may not have `wget` and `unzip`,
    but I’m sure you can figure out how to download Bootstrap, unzip it, and put the
    contents of the *dist* folder into the *lists/static/bootstrap* folder.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch08.xhtml#id457-marker)) 在 Windows 上，你可能没有 `wget` 和 `unzip`，但我相信你可以想办法下载
    Bootstrap，解压缩并将 *dist* 文件夹的内容放入 *lists/static/bootstrap* 文件夹中。
- en: ^([3](ch08.xhtml#id476-marker)) Notice in the `Pathlib` wrangling of `__file__`
    that the `.resolve()` happens before anything else. Always follow this pattern
    when working with `__file__`, otherwise you can see unpredictable behaviours depending
    on how the file is imported. Thanks to [Green Nathan](https://github.com/CleanCut/green)
    for that tip!
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch08.xhtml#id476-marker)) 注意在 `Pathlib` 处理 `__file__` 时，`.resolve()` 是发生在任何其他操作之前的。在处理
    `__file__` 时，始终遵循这种模式，否则可能会看到依赖于文件被如何导入的不可预测行为。感谢 [Green Nathan](https://github.com/CleanCut/green)
    提供的建议！
- en: About the Author
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作者简介
- en: After an idyllic childhood spent playing with BASIC on French 8-bit computers
    like the Thomson T-07 whose keys go “boop” when you press them, Harry spent a
    few years being deeply unhappy with economics and management consultancy. Soon
    he rediscovered his true geek nature, and was lucky enough to fall in with a bunch
    of XP fanatics, working on the pioneering but sadly defunct Resolver One spreadsheet.
    He now works at PythonAnywhere LLP, and spreads the gospel of TDD worldwide at
    talks, workshops, and conferences, with all the passion and enthusiasm of a recent
    convert.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在度过了与 BASIC 玩耍的宁静童年后，使用过像 Thomson T-07 这样的法国 8 位计算机，按下键盘按键时会发出“boop”声音，Harry
    在经历了对经济学和管理咨询深感不满的几年后，重新发现了自己真正的极客本性，并有幸加入了一群 XP 狂热者，共同开发了开创性但遗憾关闭的 Resolver One
    电子表格软件。他现在在 PythonAnywhere LLP 工作，并在全球的演讲、研讨会和会议上传播 TDD 的福音，怀着一颗新近皈依者的激情和热情。
