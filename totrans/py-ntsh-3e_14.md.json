["```py\nexec(*`code`*, *`globals`*=`None`, *`locals`*=`None`, /)\n```", "```py\nexec(*`varname`* + ' = 23')\n```", "```py\nexec(*`varname`*+'=23', *`mydict`*) *`# Still a bad idea`*\n```", "```py\nmydict[varname] = 23\n```", "```py\n`def` safer_eval(s):\n    code = compile(s, '<user-entered string>', 'eval')\n    `if` code.co_names:\n        `raise` ValueError(\n            f'Names {code.co_names!r} not allowed in expression {s!r}')\n    `return` eval(code)\n```", "```py\n`def` exec_with_data(user_code_string):\n    user_code = compile(user_code_string, '<user code>', 'exec')\n    datadict = {}\n    `for` name `in` user_code.co_names:\n        `if` name.startswith('data_'):\n            `with` open(f'data/{name[5:]}', 'rb') `as` datafile:\n                datadict[name] = datafile.read()\n        `elif` name.startswith('result_'):\n            `pass`  *`` # user code assigns to variables named `result_...` ``*\n        `else`:\n            `raise` ValueError(f'invalid variable name {name!r}')\n    exec(user_code, datadict)\n    `for` name `in` datadict:\n        `if` name.startswith('result_'):\n            `with` open(f'data/{name[7:]}', 'wb') `as` datafile:\n                datafile.write(datadict[name])\n```", "```py\n`def` g(x): \n    print('g', x)\ncode_object = g.__code__\n`def` f(x): \n `pass`\nf.__code__ = code_object\nf(23)     *`# prints: g 23`*\n```", "```py\n`import` gc\ngc_was_enabled = gc.isenabled()\n`if` gc_was_enabled:\n    gc.collect()\n    gc.disable()\n*`# insert some time-critical code here`*\n`if` gc_was_enabled:\n    gc.enable()\n```", "```py\n`import` gc\n`import` contextlib\n\n@contextlib.contextmanager\n`def` gc_disabled():\n    gc_was_enabled = gc.isenabled()\n    `if` gc_was_enabled:\n        gc.collect()\n        gc.disable()\n    `try`:\n        `yield`\n    `finally`:\n        `if` gc_was_enabled:\n            gc.enable()\n\n`with` gc_disabled():\n *`# ...insert some time-critical code here...`*\n```", "```py\n`import` weakref\n`class` Tracking:\n    _instances_dict = weakref.WeakValueDictionary()\n\n    def __init__(self):\n        Tracking._instances_dict[id(self)] = self\n\n    @classmethod\n    def instances(cls):\n        `return` cls._instances_dict.values()\n```"]