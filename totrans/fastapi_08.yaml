- en: Chapter 6\. Dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Preview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the very nice design features of FastAPI is a technique called *dependency
    injection*. This term sounds technical and esoteric, but it’s a key aspect of
    FastAPI and is surprisingly useful at many levels. This chapter looks at FastAPI’s
    built-in capabilities as well as how to write your own.
  prefs: []
  type: TYPE_NORMAL
- en: What’s a Dependency?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A *dependency* is specific information that you need at some point. The usual
    way to get this information is to write code that gets it, right when you need
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you’re writing a web service, at some time you may need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Gather input parameters from the HTTP request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validate inputs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check user authentication and authorization for some endpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Look up data from a data source, often a database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emit metrics, logs, or tracking information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web frameworks convert the HTTP request bytes to data structures, and you pluck
    what you need from them inside your Web layer functions as you go.
  prefs: []
  type: TYPE_NORMAL
- en: Problems with Dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Getting what you want, right when you need it, and without external code needing
    to know how you got it, seems pretty reasonable. But it turns out that consequences
    exist:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  prefs: []
  type: TYPE_NORMAL
- en: You can’t test variations of your function that could look up the dependency
    differently.
  prefs: []
  type: TYPE_NORMAL
- en: Hidden dependencies
  prefs: []
  type: TYPE_NORMAL
- en: Hiding the details means that code your function needs could break when external
    code changes.
  prefs: []
  type: TYPE_NORMAL
- en: Code duplication
  prefs: []
  type: TYPE_NORMAL
- en: If your dependency is a common one (like looking up a user in a database or
    combining values from an HTTP request), you might duplicate the lookup code in
    multiple functions.
  prefs: []
  type: TYPE_NORMAL
- en: OpenAPI visibility
  prefs: []
  type: TYPE_NORMAL
- en: The automatic test page that FastAPI makes for you needs information from the
    dependency injection mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency Injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The term *dependency injection* is simpler than it sounds: pass any *specific*
    information that a function needs *into* the function. A traditional way to do
    this is to pass in a helper function, which you then call to get the specific
    data.'
  prefs: []
  type: TYPE_NORMAL
- en: FastAPI Dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'FastAPI goes one step more: you can define dependencies as arguments to your
    function, and they are *automatically* called by FastAPI and pass in the *values*
    that they return. For example, a `user_dep` dependency could get the user’s name
    and password from HTTP arguments, look them up in a database, and return a token
    that you use to track that user afterward. Your web-handling function doesn’t
    ever call this directly; it’s handled at function call time.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ve already seen some dependencies but didn’t see them referred to as such:
    HTTP data sources like `Path`, `Query`, `Body`, and `Header`. These are functions
    or Python classes that dig the requested data from various areas in the HTTP request.
    They hide the details, like validity checks and data formats.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Why not write your own functions to do this? You could, but you would not have
    these:'
  prefs: []
  type: TYPE_NORMAL
- en: Data validity checks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Format conversions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In many other web frameworks, you would do these checks inside your own functions.
    You’ll see examples of this in [Chapter 7](ch07.html#ch07), which compares FastAPI
    with Python web frameworks like Flask and Django. But in FastAPI, you can handle
    your own dependencies, much as the built-in ones do.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a Dependency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In FastAPI, a dependency is something that’s executed, so a dependency object
    needs to be of the type `Callable`, which includes functions and classes—things
    that you *call*, with parentheses and optional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 6-1](#ex-6-1) shows a `user_dep()` dependency function that takes
    name and password string arguments, and just returns `True` if the user is valid.
    For this first version, let’s have the function return `True` for anything.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-1\. A dependency function
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, `user_dep()` is a dependency function. It acts like a FastAPI path function
    (it knows about things like `Params`, etc.), but doesn’t have a path decorator
    above it. It’s a helper, not a web endpoint itself.
  prefs: []
  type: TYPE_NORMAL
- en: The path function `get_user()` says that it expects an argument variable called
    `user`, and that variable will get its value from the dependency function `user_dep()`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the arguments to `get_user()`, we could not have said `user = user_dep`,
    because `user_dep` is a Python function object. And we could not say `user = user_dep()`,
    because that would have called the `user_dep()` function when `get_user()` was
    *defined*, not when it’s used. So we need that extra helper FastAPI `Depends()`
    function to call `user_dep()` just when it’s wanted.
  prefs: []
  type: TYPE_NORMAL
- en: You can have multiple dependencies in your path function argument list.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency Scope
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can define dependencies to cover a single path function, a group of them,
    or the whole web application.
  prefs: []
  type: TYPE_NORMAL
- en: Single Path
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your *path function*, include an argument like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'or just this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*`name`* is whatever you want to call the value(s) returned by *`depfunc`*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the earlier example:'
  prefs: []
  type: TYPE_NORMAL
- en: '*`pathfunc`* is `get_user()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*`depfunc`* is `user_dep()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*`name`* is `user`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Example 6-2](#ex-6-2) uses this path and dependency to return a fixed user
    `name` and a `valid` Boolean.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-2\. Return a user dependency
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If your dependency function just checks something and doesn’t return any values,
    you can also define the dependency in your path *decorator* (the preceding line,
    starting with a `@`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Let’s try that in [Example 6-3](#ex-6-3).
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-3\. Define a user check dependency
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Multiple Paths
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html#ch09) gives more details on how to structure a larger
    FastAPI application, including defining more than one *router* object under a
    top-level application, instead of attaching every endpoint to the top-level application.
    [Example 6-4](#ex-6-4) sketches the idea.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-4\. Define a subrouter dependency
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This will cause *`depfunc()`* to be called for all path functions under `router`.
  prefs: []
  type: TYPE_NORMAL
- en: Global
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you define your top-level FastAPI application object, you can add dependencies
    to it that will apply to all its path functions, as shown in [Example 6-5](#ex-6-5).
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-5\. Define app-level dependencies
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this case, you’re using `pass` to ignore the other details to show how to
    attach the dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter discussed dependencies and dependency injection—ways of getting
    the data you need when you need it, in a straightforward way. Coming up in the
    next chapter: Flask, Django, and FastAPI walk into a bar…​'
  prefs: []
  type: TYPE_NORMAL
