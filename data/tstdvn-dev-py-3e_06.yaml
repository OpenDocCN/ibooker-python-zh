- en: Chapter 2\. Extending Our Functional Test Using the unittest Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章。使用 unittest 模块扩展我们的功能测试
- en: Let’s adapt our test, which currently checks for the default Django “it worked”
    page, and check instead for some of the things we want to see on the real front
    page of our site.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们调整我们的测试，目前它检查的是默认的 Django “it worked” 页面，而不是我们想在站点的真实首页上看到的一些内容。
- en: 'Time to reveal what kind of web app we’re building: a to-do lists site! I know,
    I know, every other web dev tutorial online is also a to-do lists app, or maybe
    a blog or a polls app. I’m very much following fashion.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候揭示我们正在构建的 Web 应用程序的类型了：一个待办事项列表网站！我知道，我知道，线上每个其他 Web 开发教程也是一个待办事项列表应用，或者可能是博客或投票应用。我非常跟风。
- en: The reason is that a to-do list is a really nice example. At its most basic
    it is very simple indeed—​just a list of text strings—​so it’s easy to get a “minimum
    viable” list app up and running. But it can be extended in all sorts of ways—​different
    persistence models, adding deadlines, reminders, sharing with other users, and
    improving the client-side UI. There’s no reason to be limited to just “to-do”
    lists either; they could be any kind of lists. But the point is that it should
    allow me to demonstrate all of the main aspects of web programming, and how you
    apply TDD to them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 原因是待办事项列表是一个非常好的例子。在其最基本的形式中，它非常简单—​只是一列文本字符串—​因此很容易启动和运行一个“最小可行”列表应用程序。但是它可以通过各种方式扩展—​不同的持久化模型，添加截止日期、提醒、与其他用户共享，以及改进客户端
    UI。并不一定局限于“待办事项”列表；它们可以是任何类型的列表。但关键是它应该允许我展示 Web 编程的所有主要方面以及如何应用 TDD。
- en: Using a Functional Test to Scope Out a Minimum Viable App
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用功能测试来确定一个最小可行应用程序
- en: Tests that use Selenium let us drive a real web browser, so they really let
    us see how the application *functions* from the user’s point of view. That’s why
    they’re called *functional tests*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Selenium 进行的测试可以让我们操作真实的网络浏览器，因此真正让我们从用户的角度看到应用程序*的功能*。这就是为什么它们被称为*功能测试*。
- en: This means that an FT can be a sort of specification for your application. It
    tends to track what you might call a *User Story*, and follows how the user might
    work with a particular feature and how the app should respond to them.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着 FT 可以成为您的应用程序的一种规范。它倾向于跟踪您可能称之为*用户故事*的内容，并且遵循用户如何使用特定功能以及应用程序应如何响应他们的方式。
- en: FTs should have a human-readable story that we can follow. We make it explicit
    using comments that accompany the test code. When creating a new FT, we can write
    the comments first, to capture the key points of the User Story. Being human-readable,
    you could even share them with nonprogrammers, as a way of discussing the requirements
    and features of your app.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: FT 应具有我们可以遵循的人类可读的故事。我们使用随测试代码附带的注释来明确它。创建新的 FT 时，我们可以首先编写注释，以捕捉用户故事的关键点。由于它们是人类可读的，甚至可以与非程序员分享，作为讨论应用程序要求和功能的一种方式。
- en: TDD and agile or lean software development methodologies often go together,
    and one of the things we often talk about is the minimum viable app; what is the
    simplest thing we can build that is still useful? Let’s start by building that,
    so that we can test the water as quickly as possible.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: TDD 和敏捷或精益软件开发方法经常结合在一起，我们经常谈论的一件事就是最小可行应用程序；我们可以构建的最简单有用的东西是什么？让我们从构建它开始，以便我们可以尽快测试一下。
- en: A minimum viable to-do list really only needs to let the user enter some to-do
    items, and remember them for their next visit.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一个最小可行的待办事项列表只需让用户输入一些待办事项，并在下次访问时记住它们即可。
- en: 'Open up *functional_tests.py* and write a story a bit like this one:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 打开*functional_tests.py*并写一个类似于这样的故事：
- en: functional_tests.py (ch02l001)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: functional_tests.py（ch02l001）
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You’ll notice that, apart from writing the test out as comments, I’ve updated
    the `assert` to look for the word “To-Do” instead of Django’s “Congratulations”.
    That means we expect the test to fail now. Let’s try running it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 除了将测试写成注释外，你会注意到我已经更新了`assert`来查找“To-Do”这个词，而不是 Django 的“Congratulations”。这意味着我们现在期望测试失败。让我们试着运行它。
- en: 'First, start up the server:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，启动服务器：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And then, in another terminal, run the tests:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在另一个终端中运行测试：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: That’s what we call an *expected fail*, which is actually good news—​not quite
    as good as a test that passes, but at least it’s failing for the right reason;
    we can have some confidence we’ve written the test correctly.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们所谓的*预期失败*，这实际上是个好消息—​虽然不如测试通过那么好，但至少它因正确的原因而失败；我们可以相当有信心我们已正确编写了测试。
- en: The Python Standard Library’s unittest Module
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 标准库的 unittest 模块
- en: There are a couple of little annoyances we should probably deal with. Firstly,
    the message “AssertionError” isn’t very helpful—​it would be nice if the test
    told us what it actually found as the browser title. Also, it’s left a Firefox
    window hanging around the desktop, so it would be nice if that got cleared up
    for us automatically.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个小烦恼我们可能需要处理。首先，“AssertionError”这个消息并不是很有帮助——如果测试能告诉我们实际找到的浏览器标题会更好。另外，桌面上留下了一个Firefox窗口，所以最好能自动清理掉它。
- en: 'One option would be to use the second parameter of the `assert` keyword, something
    like:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一个选项是使用 `assert` 关键字的第二个参数，类似于：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: And we could also use a `try/finally` to clean up the old Firefox window.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 `try/finally` 来清理旧的Firefox窗口。
- en: 'But these sorts of problems are quite common in testing, and there are some
    ready-made solutions for us in the standard library’s `unittest` module. Let’s
    use that! In *functional_tests.py*:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但这些问题在测试中相当常见，在标准库的`unittest`模块中已经有一些现成的解决方案可以使用。让我们来使用它！在 *functional_tests.py*
    中：
- en: functional_tests.py (ch02l003)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: functional_tests.py (ch02l003)
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You’ll probably notice a few things here:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到这里有几点：
- en: '[![1](assets/1.png)](#co_extending_our_functional_test_using___span_class__keep_together__the_unittest_module__span__CO1-1)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_extending_our_functional_test_using___span_class__keep_together__the_unittest_module__span__CO1-1)'
- en: Tests are organised into classes, which inherit from `unittest.TestCase`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 测试被组织成类，这些类继承自 `unittest.TestCase`。
- en: '[![2](assets/2.png)](#co_extending_our_functional_test_using___span_class__keep_together__the_unittest_module__span__CO1-5)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_extending_our_functional_test_using___span_class__keep_together__the_unittest_module__span__CO1-5)'
- en: The main body of the test is in a method called `test_can_start_a_todo_list`.
    Any method whose name starts with `test_` is a test method, and will be run by
    the test runner. You can have more than one `test_` method per class. Nice descriptive
    names for our test methods are a good idea too.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 测试的主体在一个名为 `test_can_start_a_todo_list` 的方法中。任何以 `test_` 开头的方法都是测试方法，并且将由测试运行器运行。你可以在同一个类中拥有多个
    `test_` 方法。为我们的测试方法取一个好的描述性名称也是个好主意。
- en: '[![3](assets/3.png)](#co_extending_our_functional_test_using___span_class__keep_together__the_unittest_module__span__CO1-2)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_extending_our_functional_test_using___span_class__keep_together__the_unittest_module__span__CO1-2)'
- en: '`setUp` and `tearDown` are special methods which get run before and after each
    test. I’m using them to start and stop our browser. They’re a bit like a `try/finally`,
    in that `tearDown` will run even if there’s an error during the test itself.^([1](ch02.xhtml#id222))
    No more Firefox windows left lying around!'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`setUp` 和 `tearDown` 是特殊方法，它们在每个测试之前和之后运行。我在这里用它们来启动和停止我们的浏览器。它们有点像 `try/finally`，因为即使在测试过程中出现错误，`tearDown`
    也会运行。^([1](ch02.xhtml#id222)) 不会再有未关闭的Firefox窗口了！'
- en: '[![4](assets/4.png)](#co_extending_our_functional_test_using___span_class__keep_together__the_unittest_module__span__CO1-3)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_extending_our_functional_test_using___span_class__keep_together__the_unittest_module__span__CO1-3)'
- en: '`browser`, which was previously a global variable, becomes `self.browser`,
    an attribute of the test class. This lets us pass it between `setUp`, `tearDown`,
    and the test method itself.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`browser`，之前是一个全局变量，现在成为了测试类的属性 `self.browser`。这样我们可以在 `setUp`、`tearDown` 和测试方法之间传递它。'
- en: '[![5](assets/5.png)](#co_extending_our_functional_test_using___span_class__keep_together__the_unittest_module__span__CO1-7)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_extending_our_functional_test_using___span_class__keep_together__the_unittest_module__span__CO1-7)'
- en: We use `self.assertIn` instead of just `assert` to make our test assertions.
    `unittest` provides lots of helper functions like this to make test assertions,
    like `assertEqual`, `assertTrue`, `assertFalse`, and so on. You can find more
    in the [`unittest` documentation](http://docs.python.org/3/library/unittest.xhtml).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `self.assertIn` 而不是简单的 `assert` 来进行测试断言。`unittest` 提供了许多像这样的辅助函数，如 `assertEqual`、`assertTrue`、`assertFalse`
    等等。你可以在 [`unittest` 文档](http://docs.python.org/3/library/unittest.xhtml) 中找到更多信息。
- en: '[![6](assets/6.png)](#co_extending_our_functional_test_using___span_class__keep_together__the_unittest_module__span__CO1-8)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_extending_our_functional_test_using___span_class__keep_together__the_unittest_module__span__CO1-8)'
- en: '`self.fail` just fails no matter what, producing the error message given. I’m
    using it as a reminder to finish the test.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`self.fail` 无论如何都会失败，并输出给定的错误消息。我将其用作完成测试的提醒。'
- en: '[![7](assets/7.png)](#co_extending_our_functional_test_using___span_class__keep_together__the_unittest_module__span__CO1-9)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_extending_our_functional_test_using___span_class__keep_together__the_unittest_module__span__CO1-9)'
- en: Finally, we have the `if __name__ == '__main__'` clause (if you’ve not seen
    it before, that’s how a Python script checks if it’s been executed from the command
    line, rather than just imported by another script). We call `unittest.main()`,
    which launches the `unittest` test runner, which will automatically find test
    classes and methods in the file and run them.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有了`if __name__ == '__main__'`子句（如果你之前没见过，这是Python脚本检查是否从命令行执行，而不仅仅是被另一个脚本导入的方式）。我们调用`unittest.main()`，它启动`unittest`测试运行器，它将自动查找文件中的测试类和方法并运行它们。
- en: Note
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注
- en: If you’ve read the Django testing documentation, you might have seen something
    called `LiveServerTestCase`, and are wondering whether we should use it now. Full
    points to you for reading the friendly manual! `LiveServerTestCase` is a bit too
    complicated for now, but I promise I’ll use it in a later chapter.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你读过Django的测试文档，你可能看到过叫做`LiveServerTestCase`的东西，并想知道我们现在是否应该使用它。恭喜你阅读了友好的手册！现在`LiveServerTestCase`对现在来说有点复杂，但我保证我会在后面的章节中使用它。
- en: Let’s try out our new and improved FT!^([2](ch02.xhtml#id223))
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试我们新改进的FT！^([2](ch02.xhtml#id223))
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That’s a bit nicer, isn’t it? It tidied up our Firefox window, it gives us a
    nicely formatted report of how many tests were run and how many failed, and the
    `assertIn` has given us a helpful error message with useful debugging info. Bonzer!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这好看多了，不是吗？它整理了我们的Firefox窗口，给了我们一个格式漂亮的报告，显示运行了多少测试和多少失败了，`assertIn`还给了我们一个有用的带有调试信息的错误消息。棒极了！
- en: Commit
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提交
- en: This is a good point to do a commit; it’s a nicely self-contained change. We’ve
    expanded our functional test to include comments that describe the task we’re
    setting ourselves, our minimum viable to-do list. We’ve also rewritten it to use
    the Python `unittest` module and its various testing helper functions.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是进行提交的好时机；这是一个很好的自包含变更。我们扩展了我们的功能测试，包括描述我们设定的任务的注释，我们还重写了它以使用Python的`unittest`模块及其各种测试辅助函数。
- en: Do a **`git status`**—that should assure you that the only file that has changed
    is *functional_tests.py*. Then do a **`git diff -w`**, which shows you the difference
    between the last commit and what’s currently on disk, with the `-w` saying “ignore
    whitespace changes”.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 执行**`git status`**—这应该会告诉你只有*functional_tests.py*这个文件发生了变化。然后执行**`git diff -w`**，它将显示最后一次提交与当前磁盘上的文件之间的差异，使用`-w`表示“忽略空白变化”。
- en: 'That should tell you that *functional_tests.py* has changed quite substantially:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该告诉你，*functional_tests.py*发生了相当大的变化：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now let’s do a:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们执行：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `-a` means “automatically add any changes to tracked files” (i.e., any files
    that we’ve committed before). It won’t add any brand new files (you have to explicitly
    `git add` them yourself), but often, as in this case, there aren’t any new files,
    so it’s a useful shortcut.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`-a`表示“自动将任何更改添加到已跟踪的文件”（即，任何我们之前提交过的文件）。它不会添加任何全新的文件（你必须明确使用`git add`添加它们），但通常，就像这种情况一样，没有新文件，所以这是一个有用的快捷方式。'
- en: When the editor pops up, add a descriptive commit message, like “First FT specced
    out in comments, and now uses unittest.”
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当编辑器弹出时，请添加一个描述性的提交消息，比如“首次在注释中规定了FT，并且现在使用单元测试。”
- en: Now that our FT uses a real test framework, and that we’ve got placeholder comments
    for what we want it to do, we’re in an excellent position to start writing some
    real code for our lists app. Read on!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的FT使用了一个真正的测试框架，并且我们已经用占位符注释了我们希望它做什么，我们现在可以非常出色地开始为我们的列表应用编写一些真正的代码了。继续阅读！
- en: ^([1](ch02.xhtml#id222-marker)) The only exception is if you have an exception
    inside `setUp`, then `tearDown` doesn’t run.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch02.xhtml#id222-marker)) 唯一的例外是如果`setUp`中有一个异常，那么`tearDown`就不会运行。
- en: ^([2](ch02.xhtml#id223-marker)) Are you unable to move on because you’re wondering
    what those *ch02l00x* things are, next to some of the code listings? They refer
    to specific [commits](https://github.com/hjwp/book-example/commits/chapter_02_unittest)
    in the book’s example repo. It’s all to do with my book’s own [tests](https://github.com/hjwp/Book-TDD-Web-Dev-Python/tree/master/tests).
    You know, the tests for the tests in the book about testing. They have tests of
    their own, naturally.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch02.xhtml#id223-marker)) 你是否无法继续前进，因为你想知道那些*ch02l00x*是什么，就在某些代码清单旁边？它们指的是书本示例库中特定的[提交](https://github.com/hjwp/book-example/commits/chapter_02_unittest)。这都与我书中自己的[测试](https://github.com/hjwp/Book-TDD-Web-Dev-Python/tree/master/tests)有关。你知道的，关于测试的书中的测试。它们当然也有自己的测试。
