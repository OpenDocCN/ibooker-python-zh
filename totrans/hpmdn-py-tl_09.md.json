["```py\ndef main():\n    with urllib.request.urlopen(API_URL) as response:\n        data = json.load(response)\n\n    print(data[\"title\"], end=\"\\n\\n\")\n    print(textwrap.fill(data[\"extract\"]))\n```", "```py\nimport subprocess\nimport sys\n\ndef test_output():\n    args = [sys.executable, \"-m\", \"random_wikipedia_article\"]\n    process = subprocess.run(args, capture_output=True, check=True)\n    assert process.stdout\n```", "```py\nrandom-wikipedia-article\n├── pyproject.toml\n├── src\n│   └── random_wikipedia_article\n│       ├── __init__.py\n│       └── __main__.py\n└── tests\n    ├── __init__.py\n    └── test_main.py\n```", "```py\n[project.optional-dependencies]\ntests = [\"pytest>=8.1.1\"]\n```", "```py\n$ uv pip install -e \".[tests]\"\n```", "```py\n$ uv pip compile --extra=tests pyproject.toml -o dev-requirements.txt\n$ uv pip sync dev-requirements.txt\n$ uv pip install -e . --no-deps\n\n```", "```py\n$ poetry add --group=tests \"pytest>=8.1.1\"\n```", "```py\n$ py -m pytest\n========================= test session starts ==========================\nplatform darwin -- Python 3.12.2, pytest-8.1.1, pluggy-1.4.0\nrootdir: ...\ncollected 1 item\n\ntests/test_main.py .                                              [100%]\n========================== 1 passed in 0.01s ===========================\n\n```", "```py\nimport sys ![1](assets/1.png)\nfrom dataclasses import dataclass\n\n@dataclass\nclass Article:\n    title: str = \"\"\n    summary: str = \"\"\n\ndef fetch(url):\n    with urllib.request.urlopen(url) as response:\n        data = json.load(response)\n    return Article(data[\"title\"], data[\"extract\"])\n\ndef show(article, file):\n    summary = textwrap.fill(article.summary)\n    file.write(f\"{article.title}\\n\\n{summary}\\n\")\n\ndef main():\n    article = fetch(API_URL)\n    show(article, sys.stdout)\n```", "```py\nimport io\nfrom random_wikipedia_article import Article, show\n\ndef test_final_newline():\n    article = Article(\"Lorem Ipsum\", \"Lorem ipsum dolor sit amet.\")\n    file = io.StringIO()\n    show(article, file)\n    assert file.getvalue().endswith(\"\\n\")\n```", "```py\nfrom rich.console import Console\n\ndef show(article, file):\n    console = Console(file=file, width=72, highlight=False)\n    console.print(article.title, style=\"bold\", end=\"\\n\\n\")\n    console.print(article.summary)\n```", "```py\n@pytest.fixture\ndef file():\n    return io.StringIO()\n```", "```py\ndef test_final_newline(file):\n    article = Article(\"Lorem Ipsum\", \"Lorem ipsum dolor sit amet.\")\n    show(article, file)\n    assert file.getvalue().endswith(\"\\n\")\n```", "```py\narticles = [\n    Article(),\n    Article(\"test\"),\n    Article(\"Lorem Ipsum\", \"Lorem ipsum dolor sit amet.\"),\n    Article(\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit\",\n        \"Nulla mattis volutpat sapien, at dapibus ipsum accumsan eu.\"\n    ),\n]\n\n@pytest.mark.parametrize(\"article\", articles)\ndef test_final_newline(article, file):\n    show(article, file)\n    assert file.getvalue().endswith(\"\\n\")\n```", "```py\n@pytest.fixture(params=articles)\ndef article(request):\n    return request.param\n\ndef test_final_newline(article, file):\n    show(article, file)\n    assert file.getvalue().endswith(\"\\n\")\n```", "```py\ndef parametrized_fixture(*params):\n    return pytest.fixture(params=params)(lambda request: request.param)\n```", "```py\narticle = parametrized_fixture(Article(), Article(\"test\"), ...)\n```", "```py\ndef test_fetch(article):\n    with serve(article) as url:\n        assert article == fetch(url)\n```", "```py\nfrom contextlib import contextmanager\n\n@contextmanager\ndef serve(article):\n    ... # start the server\n    yield f\"http://localhost:{server.server_port}\"\n    ... # shut down the server\n```", "```py\nimport http.server\nimport json\nimport threading\n\n@contextmanager\ndef serve(article):\n    data = {\"title\": article.title, \"extract\": article.summary}\n    body = json.dumps(data).encode()\n\n    class Handler(http.server.BaseHTTPRequestHandler): ![1](assets/1.png)\n        def do_GET(self):\n            self.send_response(200)\n            self.send_header(\"Content-Type\", \"application/json\")\n            self.send_header(\"Content-Length\", str(len(body)))\n            self.end_headers()\n            self.wfile.write(body)\n\n    with http.server.HTTPServer((\"localhost\", 0), Handler) as server: ![2](assets/2.png)\n        thread = threading.Thread(target=server.serve_forever, daemon=True) ![3](assets/3.png)\n        thread.start()\n        yield f\"http://localhost:{server.server_port}\"\n        server.shutdown()\n        thread.join()\n```", "```py\n@pytest.fixture(scope=\"session\")\ndef httpserver():\n    ...\n```", "```py\n@pytest.fixture(scope=\"session\")\ndef httpserver():\n    class Handler(http.server.BaseHTTPRequestHandler):\n        def do_GET(self):\n            article = self.server.article ![1](assets/1.png)\n            data = {\"title\": article.title, \"extract\": article.summary}\n            body = json.dumps(data).encode()\n            ... # as before\n\n    with http.server.HTTPServer((\"localhost\", 0), Handler) as server:\n        thread = threading.Thread(target=server.serve_forever, daemon=True)\n        thread.start()\n        yield server\n        server.shutdown()\n        thread.join()\n```", "```py\ndef test_fetch(article, httpserver):\n    def serve(article):\n        httpserver.article = article ![1](assets/1.png)\n        return f\"http://localhost:{httpserver.server_port}\"\n\n    assert article == fetch(serve(article))\n```", "```py\n@pytest.fixture\ndef serve(httpserver): ![1](assets/1.png)\n    def f(article): ![2](assets/2.png)\n        httpserver.article = article\n        return f\"http://localhost:{httpserver.server_port}\"\n    return f\n```", "```py\ndef test_fetch(article, serve):\n    assert article == fetch(serve(article))\n```", "```py\nimport httpx\n\nfrom importlib.metadata import metadata\n\nUSER_AGENT = \"{Name}/{Version} (Contact: {Author-email})\"\n\ndef fetch(url):\n    fields = metadata(\"random-wikipedia-article\")\n    headers = {\"User-Agent\": USER_AGENT.format_map(fields)}\n\n    with httpx.Client(headers=headers, http2=True) as client:\n        response = client.get(url, follow_redirects=True)\n        response.raise_for_status()\n        data = response.json()\n\n    return Article(data[\"title\"], data[\"extract\"])\n```", "```py\n@pytest.fixture\ndef serve(httpserver):\n    def f(article):\n        json = {\"title\": article.title, \"extract\": article.summary}\n        httpserver.expect_request(\"/\").respond_with_json(json)\n        return httpserver.url_for(\"/\")\n    return f\n```", "```py\n$ py -m pytest -n auto\n\n```", "```py\nfrom factory import Factory, Faker\n\nclass ArticleFactory(Factory):\n    class Meta:\n        model = Article ![1](assets/1.png)\n\n    title = Faker(\"sentence\") ![2](assets/2.png)\n    summary = Faker(\"paragraph\")\n\narticle = parametrized_fixture(*ArticleFactory.build_batch(10)) ![3](assets/3.png)\n```"]