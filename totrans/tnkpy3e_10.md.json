["```py\nfruit = 'banana'\nletter = fruit[1] \n```", "```py\nletter \n```", "```py\n'a' \n```", "```py\nfruit[0] \n```", "```py\n'b' \n```", "```py\ni = 1\nfruit[i] \n```", "```py\n'a' \n```", "```py\nfruit[i+1] \n```", "```py\n'n' \n```", "```py\nfruit[1.5] \n```", "```py\nTypeError: string indices must be integers \n```", "```py\nn = len(fruit)\nn \n```", "```py\n6 \n```", "```py\nfruit[n] \n```", "```py\nIndexError: string index out of range \n```", "```py\nfruit[n-1] \n```", "```py\n'a' \n```", "```py\nfruit[-1] \n```", "```py\n'a' \n```", "```py\nfruit = 'banana'\nfruit[0:3] \n```", "```py\n'ban' \n```", "```py\nfruit[:3] \n```", "```py\n'ban' \n```", "```py\nfruit[3:] \n```", "```py\n'ana' \n```", "```py\nfruit[3:3] \n```", "```py\n'' \n```", "```py\ngreeting = 'Hello, world!'\ngreeting[0] = 'J' \n```", "```py\nTypeError: 'str' object does not support item assignment \n```", "```py\nnew_greeting = 'J' + greeting[1:]\nnew_greeting \n```", "```py\n'Jello, world!' \n```", "```py\ngreeting \n```", "```py\n'Hello, world!' \n```", "```py\nword = 'banana'\n\nif word == 'banana':\n    print('All right, banana.') \n```", "```py\nAll right, banana. \n```", "```py\ndef compare_word(word):\n    if word < 'banana':\n        print(word, 'comes before banana.')\n    elif word > 'banana':\n        print(word, 'comes after banana.')\n    else:\n        print('All right, banana.') \n```", "```py\ncompare_word('apple') \n```", "```py\napple comes before banana. \n```", "```py\ncompare_word('Pineapple') \n```", "```py\nPineapple comes before banana. \n```", "```py\nword = 'banana'\nnew_word = word.upper()\nnew_word \n```", "```py\n'BANANA' \n```", "```py\nreader = open('pg345.txt') \n```", "```py\ndef is_special_line(line):\n    return line.startswith('*** ') \n```", "```py\nfor line in reader:\n    if is_special_line(line):\n        print(line.strip()) \n```", "```py\n*** START OF THE PROJECT GUTENBERG EBOOK DRACULA ***\n*** END OF THE PROJECT GUTENBERG EBOOK DRACULA *** \n```", "```py\nreader = open('pg345.txt')\nwriter = open('pg345_cleaned.txt', 'w') \n```", "```py\nfor line in reader:\n    if is_special_line(line):\n        break \n```", "```py\nline \n```", "```py\n'*** START OF THE PROJECT GUTENBERG EBOOK DRACULA ***\\n' \n```", "```py\nfor line in reader:\n    if is_special_line(line):\n        break\n    writer.write(line) \n```", "```py\nline \n```", "```py\n'*** END OF THE PROJECT GUTENBERG EBOOK DRACULA ***\\n' \n```", "```py\nreader.close()\nwriter.close() \n```", "```py\nfor line in open('pg345_cleaned.txt'):\n    line = line.strip()\n    if len(line) > 0:\n        print(line)\n    if line.endswith('Stoker'):\n        break \n```", "```py\nDRACULA\n_by_\nBram Stoker \n```", "```py\ntotal = 0\nfor line in open('pg345_cleaned.txt'):\n    total += 1\n\ntotal \n```", "```py\n15499 \n```", "```py\ntotal = 0\nfor line in open('pg345_cleaned.txt'):\n    if 'Jonathan' in line:\n        total += 1\n\ntotal \n```", "```py\n199 \n```", "```py\ntotal = 0\nfor line in open('pg345_cleaned.txt'):\n    total += line.count('Jonathan')\n\ntotal \n```", "```py\n200 \n```", "```py\nwriter = open('pg345_replaced.txt', 'w')\n\nfor line in open('pg345_cleaned.txt'):\n    line = line.replace('Jonathan', 'Thomas')\n    writer.write(line) \n```", "```py\ntext = \"I am Dracula; and I bid you welcome, Mr. Harker, to my house.\" \n```", "```py\npattern = 'Dracula' \n```", "```py\nimport re\n\nresult = re.search(pattern, text)\nresult \n```", "```py\n<re.Match object; span=(5, 12), match='Dracula'> \n```", "```py\nresult.string \n```", "```py\n'I am Dracula; and I bid you welcome, Mr. Harker, to my house.' \n```", "```py\nresult.group() \n```", "```py\n'Dracula' \n```", "```py\nresult.span() \n```", "```py\n(5, 12) \n```", "```py\nresult = re.search('Count', text)\nprint(result) \n```", "```py\nNone \n```", "```py\nresult == None \n```", "```py\nTrue \n```", "```py\ndef find_first(pattern):\n    for line in open('pg345_cleaned.txt'):\n        result = re.search(pattern, line)\n        if result != None:\n            return result \n```", "```py\nresult = find_first('Harker')\nresult.string \n```", "```py\n'CHAPTER I. Jonathan Harker’s Journal\\n' \n```", "```py\npattern = 'Mina|Murray'\nresult = find_first(pattern)\nresult.string \n```", "```py\n'CHAPTER V. Letters—Lucy and Mina\\n' \n```", "```py\ndef count_matches(pattern):\n    count = 0\n    for line in open('pg345_cleaned.txt'):\n        result = re.search(pattern, line)\n        if result != None:\n            count += 1\n    return count \n```", "```py\ncount_matches('Mina|Murray') \n```", "```py\n229 \n```", "```py\nresult = find_first('^Dracula')\nresult.string \n```", "```py\n'Dracula, jumping to his feet, said:--\\n' \n```", "```py\nresult = find_first('Harker$')\nresult.string \n```", "```py\n\"by five o'clock, we must start off; for it won't do to leave Mrs. Harker\\n\" \n```", "```py\npattern = 'cent(er|re)' \n```", "```py\nresult = find_first(pattern)\nresult.string \n```", "```py\n'horseshoe of the Carpathians, as if it were the centre of some sort of\\n' \n```", "```py\npattern = 'colou?r' \n```", "```py\nresult = find_first(pattern)\nline = result.string\nline \n```", "```py\n'undergarment with long double apron, front, and back, of coloured stuff\\n' \n```", "```py\nre.sub(pattern, 'color', line) \n```", "```py\n'undergarment with long double apron, front, and back, of colored stuff\\n' \n```", "```py\n!head  pg345_cleaned.txt \n```", "```py\n!tail  pg345_cleaned.txt \n```", "```py\n!head  pg345_cleaned.txt  >  pg345_cleaned_10_lines.txt \n```", "```py\n!head  -100  pg345_cleaned.txt  >  pg345_cleaned_100_lines.txt \n```", "```py\n# This cell tells Jupyter to provide detailed debugging information\n# when a runtime error occurs. Run it before working on the exercises.\n\n%xmode Verbose \n```", "```py\nException reporting mode: Verbose \n```"]