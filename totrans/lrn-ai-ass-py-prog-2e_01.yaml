- en: 2 Getting started with Copilot
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2 开始使用 Copilot
- en: This chapter covers
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本章内容包括
- en: Setting up Python, Visual Studio Code, and Copilot on your system
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的系统上设置 Python、Visual Studio Code 和 Copilot
- en: Introducing the Copilot design process
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 Copilot 设计过程
- en: Understanding Copilot’s value for a data processing task
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Copilot 在数据处理任务中的价值
- en: We want you to be able to create software yourself right from the start. To
    do this, we’ll guide you through setting up Visual Studio Code (VS Code), Python,
    and Copilot on your machine and familiarize you with how to interact with these
    tools. After you’ve set up the tools, you’ll be able to follow along with our
    examples and start creating software yourself. There’s no substitute for practice,
    and we believe you can learn right alongside us for the remainder of the book.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望你能够从一开始就自己创建软件。为此，我们将引导你在你的计算机上设置 Visual Studio Code (VS Code)、Python 和
    Copilot，并让你熟悉如何与这些工具进行互动。设置好这些工具后，你将能够跟随我们的示例并开始自己创建软件。没有什么比实践更重要，我们相信你可以和我们一起学习，直到本书的最后。
- en: Once you’ve set up Copilot, we’ll walk through a fun example that showcases
    the power of Copilot in solving standard tasks. You’ll see how to interact with
    Copilot, and you’ll learn how you can write software without writing any actual
    code. Keep in mind that Copilot isn’t perfect, and you need to be able to read
    and understand a little Python to get what you want, but it gives you a big head
    start. Let’s get started creating your first computer program.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你设置好 Copilot，我们将通过一个有趣的示例来展示 Copilot 在解决标准任务中的强大功能。你将看到如何与 Copilot 互动，并且你将学会如何在不写任何实际代码的情况下编写软件。请记住，Copilot
    并不完美，你需要能够阅读和理解一些 Python 代码才能获得你想要的结果，但它为你提供了一个巨大的起点。让我们开始创建你的第一个计算机程序吧。
- en: 2.1 Setting up your computer to start learning
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.1 设置你的计算机以开始学习
- en: Learning how to write software requires that you go beyond just reading about
    it and actually perform the task of writing software. If this were a book on how
    to play guitar, would you keep reading it without ever trying to play the guitar?
    We thought not. Reading this book without following along and trying it out yourself
    would be like watching a marathon runner finish the race and thinking you’re ready
    to go run one yourself. We’ll stop with the analogies, but seriously, you need
    to get your software installed and running before we go farther.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何编写软件需要你不仅仅是阅读它，还要实际进行编写软件的任务。如果这本书是关于如何弹吉他，你会在不尝试弹吉他的情况下继续读下去吗？我们猜不会。阅读这本书而不跟着一起尝试，就像是看着马拉松选手完成比赛，然后想着自己也准备好去跑马拉松了。我们不再使用类比，但说真的，你需要先安装好软件并让它运行，然后我们才能继续。
- en: What scares us the most right now is that we just hit the most common point
    where novices, even those eager to learn programming, tend to fail, and we *really*
    want to see you succeed. Now, you might be thinking, “Wait, really? We’re just
    getting started.” Yes, that’s exactly the point. In Leo’s popular Coursera course
    about learning Java programming [1], can you guess the point when most new learners
    leave? Is it the challenging assignment at the end of the course that involves
    plotting earthquake markers on the globe in real time? No. It’s actually the warmup
    assignment where learners must set up their programming environment. As such,
    we understand this could be a hurdle for you. We hope that with this not-so-subtle
    nudge, we can help you achieve all the goals you had in mind when you bought this
    book. It all starts with installing the software.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们最担心的是，我们刚刚触及到最常见的新手难点，甚至是那些渴望学习编程的人，往往都会在这一点上失败，而我们*真的*希望你能够成功。现在，你可能在想，“等一下，真的吗？我们才刚开始。”
    是的，这正是关键所在。在 Leo 的热门 Coursera 课程中关于学习 Java 编程的部分，你能猜到大多数新学员什么时候退出吗？是课程末尾那个挑战性的作业，需要在全球实时绘制地震标记吗？不。实际上是那道热身作业，要求学员们设置他们的编程环境。因此，我们理解这可能是你面临的一个障碍。希望通过这次不那么微妙的提示，我们能帮助你实现购买本书时所设定的所有目标。所有的开始都从安装软件开始。
- en: 2.2 The software we’ll be using
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.2 我们将使用的软件
- en: To set up and use Copilot easily, we’ll install the software editing tools used
    by novices and software engineers alike. The tools you’ll use are Python, VS Code,
    GitHub, and Copilot. Of course, if you already have all of these tools installed,
    jump to section 2.6.1.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了轻松设置和使用 Copilot，我们将安装初学者和软件工程师都在使用的软件编辑工具。你将使用的工具有 Python、VS Code、GitHub 和
    Copilot。当然，如果你已经安装了所有这些工具，可以跳到第 2.6.1 节。
- en: 2.2.1 Python
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.2.1 Python
- en: Any programming language would have worked for this book, but we picked Python
    because it’s one of the most popular programming languages in the world and is
    the language we teach in our introductory courses at our universities. As we said
    in chapter 1, compared to other languages, Python is easier to read, easier to
    understand, and easier to write. For this book, Copilot will primarily generate
    the code, not you. However, you’ll want to read and understand the code generated
    by Copilot, and Python is great for that.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 任何编程语言都可以用于本书的内容，但我们选择了Python，因为它是世界上最流行的编程语言之一，也是我们大学入门课程中教授的语言。正如我们在第1章所说，与其他语言相比，Python更易于阅读、更易于理解、也更易于编写。在本书中，Copilot将主要生成代码，而不是你。但是，你需要阅读并理解Copilot生成的代码，Python在这方面非常适合。
- en: 2.2.2 Visual Studio Code
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.2.2 Visual Studio Code
- en: You can use any text editor to program. However, if you want a nice programming
    environment where you can write code, easily get suggestions from Copilot, and
    run your code, VS Code is our preferred tool. VS Code is used by novices learning
    software and is well liked by students [2]. It’s also used globally by professional
    software engineers, which means you can work and learn while using this environment
    after finishing the book. For VS Code to work for this book, you’ll need to install
    a few extensions that enable working with Python and using Copilot, but one of
    the great things about VS Code is that it’s easy to install those extensions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用任何文本编辑器进行编程。然而，如果你想要一个良好的编程环境，可以在其中编写代码，轻松从Copilot获取建议并运行代码，那么VS Code是我们推荐的工具。VS
    Code被初学者用来学习软件开发，并深受学生们的喜爱[2]。它在全球范围内也被专业软件工程师使用，这意味着你可以在完成本书后，继续使用这个环境进行工作和学习。为了让VS
    Code能够在本书中使用，你需要安装一些扩展，以便进行Python编程并使用Copilot，但VS Code的一大优点是安装这些扩展非常简单。
- en: 2.2.3 GitHub account
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.2.3 GitHub账户
- en: GitHub is an industry-standard tool for developing, maintaining, and storing
    software. We won’t use GitHub in this book, however. We’re signing up for GitHub
    simply because you’ll need an account to access Copilot. Signing up for a GitHub
    account is free, but, at the time of writing, they charge for Copilot. If you’re
    a student, they will waive that fee. If you aren’t a student, as of writing, you
    can get a 30-day free trial.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub是一个业界标准工具，用于开发、维护和存储软件。然而，在本书中我们不会使用GitHub。我们注册GitHub只是因为你需要一个账户来访问Copilot。注册GitHub账户是免费的，但截至写作时，他们会对Copilot收费。如果你是学生，他们将免除这笔费用。如果你不是学生，截至写作时，你可以获得30天的免费试用。
- en: You might ask why they charge for the service, and there’s a good answer. It’s
    expensive to build the GPT models (imagine thousands of computers running for
    a year to build the model), and GitHub incurs costs by providing predictions from
    the model (many machines are receiving your input, running it through the model,
    and generating your output). If you’re not ready to commit to using Copilot, you
    could make a calendar note for roughly 25 days from the day you sign up, and if
    you aren’t using Copilot at that time, just cancel. If, on the other hand, you’ve
    succeeded in learning how to write software with Copilot and are using it to improve
    your productivity at work or as a hobby, it may make sense to keep it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问，为什么他们要收费提供这个服务，答案是有原因的。构建GPT模型的成本非常高（想象一下成千上万台计算机运行一年来构建模型），而GitHub通过提供来自模型的预测而产生费用（许多机器接收你的输入，将其通过模型处理，然后生成你的输出）。如果你还没有准备好长期使用Copilot，你可以在注册后大约25天左右在日历上记下一个提醒，如果到时你没有使用Copilot，就可以取消。如果你已经成功学会了如何使用Copilot编写软件，并且在工作或作为爱好时用它提高生产力，那么继续使用它是有意义的。
- en: Over the course of this chapter, we’ll install all of these tools, but we’re
    going to do this in two parts. The first part, coming up next, will get you set
    up to write and run code on your own so you become familiar with that process.
    The second part will set you up to use Copilot to assist you in the process of
    writing code.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将安装所有这些工具，但我们会分两部分进行。接下来的第一部分将帮助你设置好写代码和运行代码的环境，使你熟悉这个过程。第二部分将帮助你设置Copilot，以便在编写代码的过程中为你提供帮助。
- en: '2.3 Getting your system set up: Part 1'
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.3 设置你的系统：第一部分
- en: 'In this first part of our installation guide, we’ll install Python and VS Code.
    To streamline this section, we’re just outlining the main steps that you should
    follow. However, there are more detailed instructions available in the following
    locations:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本安装指南的第一部分，我们将安装Python和VS Code。为了简化本节内容，我们仅列出你应该遵循的主要步骤。然而，在以下位置提供了更详细的说明：
- en: VS Code maintains a tutorial for getting started writing code in Python at [https://mng.bz/znjQ](https://mng.bz/znjQ).
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VS Code提供了一个关于如何开始编写Python代码的教程，网址是 [https://mng.bz/znjQ](https://mng.bz/znjQ)。
- en: The website for this book ([https://mng.bz/0M46](https://mng.bz/0M46)) provides
    detailed instructions for setting up both PC and macOS systems. Because the websites
    for these tools might change after we write this book, we encourage you to use
    a combination of the GitHub link and the book website together.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书的网站 ([https://mng.bz/0M46](https://mng.bz/0M46)) 提供了详细的PC和macOS系统设置说明。由于这些工具的网址可能会在我们编写本书后发生变化，我们建议你将GitHub链接和本书网站结合使用。
- en: In the online book forum ([https://mng.bz/NBK1](https://mng.bz/NBK1)), you can
    ask for help and see the answers to a list of frequently asked questions.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在在线书籍论坛 ([https://mng.bz/NBK1](https://mng.bz/NBK1)) 中，你可以寻求帮助并查看常见问题的答案。
- en: 'The primary steps you’ll need to accomplish are as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要完成的主要步骤如下：
- en: 'Install Python:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Python：
- en: Go to [www.python.org/downloads/](http://www.python.org/downloads/).
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 [www.python.org/downloads/](http://www.python.org/downloads/)。
- en: Download and install the latest version of Python (3.12.3 at the time of writing).
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载并安装最新版本的Python（截至写作时为3.12.3）。
- en: 'Install VS Code:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装VS Code：
- en: Go to [https://code.visualstudio.com/download](https://code.visualstudio.com/download),
    and select the main download for your operating system (e.g., Windows or Mac).
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 [https://code.visualstudio.com/download](https://code.visualstudio.com/download)，并选择适合你操作系统（如Windows或Mac）的主下载版本。
- en: Download and install the latest version of VS Code.
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载并安装最新版本的VS Code。
- en: 'Install a VS Code Extension: (for details, see [https://mng.bz/9o01](https://mng.bz/9o01)).'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装VS Code扩展：有关详细信息，请参见 [https://mng.bz/9o01](https://mng.bz/9o01)。
- en: '*Python (by Microsoft)*—Follow the instructions at [https://mng.bz/j0gP](https://mng.bz/j0gP)
    to set up the Python extension correctly (specifically, selecting the correct
    interpreter).'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Python（由Microsoft提供）*—请按照 [https://mng.bz/j0gP](https://mng.bz/j0gP) 上的说明正确设置Python扩展（特别是选择正确的解释器）。'
- en: Although the instructions here are brief, we know in reality they can take some
    time. If you encounter any problems, consult the resources mentioned earlier for
    more detailed setup instructions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这里的说明很简洁，但我们知道实际操作可能需要一些时间。如果你遇到任何问题，请参考之前提到的资源，获取更详细的设置说明。
- en: 2.4 Working with Python in Visual Studio Code
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.4 在Visual Studio Code中使用Python
- en: 'Now that your system is set up, let’s get acquainted with the VS Code interface
    shown in figure 2.1\. (You may need to click the Explorer icon in the middle/top
    left to get this same view.) The following regions are identified in figure 2.1:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的系统已设置好，让我们熟悉一下图2.1中显示的VS Code界面（你可能需要点击左上方的资源管理器图标，才能看到相同的视图）。以下是图2.1中标识的区域：
- en: '*Activity Bar —*On the far left is the Activity Bar where we can open file
    folders (also known as directories) or install extensions (as you did to install
    the Python extension in the previous section).'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*活动栏—*在最左侧是活动栏，我们可以在其中打开文件夹（也称为目录）或安装扩展（如前一节中安装Python扩展时所做的）。'
- en: '*Side Bar —*The Side Bar shows what is presently open in the Activity Bar.
    In figure 2.1, the Activity Bar shows the Explorer selected, so the Side Bar is
    showing the files in the current folder.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*侧边栏—*侧边栏显示的是当前活动栏中打开的内容。在图2.1中，活动栏显示选择了资源管理器，因此侧边栏显示的是当前文件夹中的文件。'
- en: '*Editor Pane(s) —*These are the primary areas we’ll use to create our software.
    The editor in the Editor Pane is similar to any other text editor in that you
    can write, edit, copy, and paste text using the clipboard. The editor is special,
    however, because it’s designed to work well with code. At this point, we’ll be
    writing code in this window, but later in this chapter, you’ll primarily work
    in this window by asking Copilot to generate code, and then you’ll test that code.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编辑窗格—*这些是我们创建软件的主要区域。编辑窗格中的编辑器类似于任何其他文本编辑器，你可以使用剪贴板来写作、编辑、复制和粘贴文本。这个编辑器不同之处在于它专门为代码编写设计，因此在这窗口中编写的代码会特别合适。此时，我们将在该窗口中编写代码，但在本章后面，你主要将在此窗口中通过请求Copilot生成代码，然后测试这些代码。'
- en: '![figure](../Images/2-1.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![figure](../Images/2-1.png)'
- en: Figure 2.1 The VS Code interface [3]
  id: totrans-41
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 图2.1 VS Code界面 [3]
- en: '*Output and Terminal Panel —*In this area of the interface, you’ll see the
    output of your code or any errors that have occurred in the following tabs: Problems,
    Output, Debug Console, and Terminal. We’ll primarily use the Problems tab, where
    we can see potential errors in our code, and the Terminal tab, which allows us
    to interact with Python and see the output of our code.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*输出和终端面板*——在这个界面区域，你将看到代码的输出或任何发生的错误，具体在以下标签页中：问题、输出、调试控制台和终端。我们主要使用问题标签页，在这里可以看到代码中的潜在错误，和终端标签页，在这里可以与
    Python 互动并看到代码的输出。'
- en: VS Code has many different color schemes, so you can use any color scheme you
    like as the functionality is the same.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 有多种不同的配色方案，你可以选择任何你喜欢的配色方案，因为功能是一样的。
- en: 2.4.1 Set up your working folder
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.4.1 设置你的工作文件夹
- en: In the top of the Activity Bar on the left in VS Code, you’ll find Explorer
    as the top icon. After you click Explorer, you should see a No Folder Open message.
    Click the button to open a folder, and select a folder on your computer (or make
    a new one—we like the folder name fun_with_Copilot). Once you’ve opened this folder,
    your workspace will be the folder you opened, which means you should have your
    code and any data files, like the one we’ll use later in this chapter, in that
    folder.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 VS Code 左侧活动栏的顶部，你会找到资源管理器作为第一个图标。点击资源管理器后，你会看到一个“未打开文件夹”的消息。点击按钮打开一个文件夹，并选择你计算机上的一个文件夹（或者新建一个文件夹——我们喜欢将文件夹命名为
    fun_with_Copilot）。打开这个文件夹后，你的工作空间将是你打开的文件夹，这意味着你应该将代码和任何数据文件（比如本章稍后会用到的文件）保存在这个文件夹中。
- en: File not found or file missing errors
  id: totrans-46
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 文件未找到或文件缺失错误
- en: 'If you ever receive an error that says you’re missing a file, take heart: these
    are the kinds of errors that everyone makes. They can be really annoying when
    writing software. Perhaps you just didn’t put the file in your working folder—this
    happens—but it’s an easy fix by copying or moving the file into the correct folder.
    However, sometimes, you’ll see the file in the folder, but when you run your code
    in VS Code, Python can’t seem to find it. If this happens to you (it happened
    to us when writing the book!), be sure to have the folder with the code and the
    desired file open using Explorer in VS Code (as shown in the Side Bar in figure
    2.1).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你收到一个错误提示，说缺少某个文件，请不要灰心：这些错误是每个人都会犯的。当编写软件时，这种错误特别烦人。也许你只是没有把文件放到工作文件夹里——这种情况很常见——但你可以通过将文件复制或移动到正确的文件夹来轻松修复它。然而，有时你会看到文件确实在文件夹里，但当你在
    VS Code 中运行代码时，Python 似乎找不到它。如果你遇到这种情况（我们在写书时也遇到过！），请确保在 VS Code 中使用资源管理器打开包含代码和所需文件的文件夹（如图
    2.1 中侧边栏所示）。
- en: 2.4.2 Check to see if your setup is working properly
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.4.2 检查你的设置是否正常工作
- en: Let’s check to see if we’ve set up everything properly. To do this, we start
    by creating a new file to hold our program. You do this by going to File > New
    File (figure 2.2), and then selecting Python File (figure 2.3).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下是否已正确设置一切。为此，我们首先创建一个新文件来保存我们的程序。你可以通过点击文件 > 新建文件（图 2.2）来实现，然后选择 Python
    文件（图 2.3）。
- en: '![figure](../Images/2-2.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![figure](../Images/2-2.png)'
- en: Figure 2.2 How to create a new file in VS Code
  id: totrans-51
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 图 2.2 如何在 VS Code 中创建新文件
- en: 'After creating the file, we like to make sure we’ve saved the file. Go to File
    > Save As, and name this file first_program.py. Next, in the text editor, type
    the following exactly as it appears here:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 创建文件后，我们会确保保存文件。点击文件 > 另存为，然后将文件命名为 first_program.py。接下来，在文本编辑器中，按下面的内容准确输入：
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You might already be guessing what will happen when we run this program. It
    should print “Hello World” to the screen. Let’s run it and see! First, you’ll
    want to save your file by going to File > Save.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经猜到，当我们运行这个程序时会发生什么。它应该会在屏幕上打印“Hello World”。让我们试试看！首先，你需要通过点击文件 > 保存来保存你的文件。
- en: '![figure](../Images/2-3.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![figure](../Images/2-3.png)'
- en: Figure 2.3 Select Python File to create the new file as a Python file.
  id: totrans-56
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 图 2.3 选择 Python 文件，将新文件创建为 Python 文件。
- en: WaRNING  Be sure to save your file before you run it! We’re embarrassed to admit
    the amount of time we’ve spent trying to fix code that was correct but hadn’t
    been saved.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 警告  在运行代码之前，请确保保存你的文件！我们很不好意思地承认，我们曾花了很多时间修复那些正确但没有保存的代码。
- en: 'To run your program, go to the top-right corner of the text editor, and click
    the Run Code icon, as shown earlier in figure 2.1\. After clicking the icon, in
    the Terminal section at the bottom, you should see something like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行你的程序，请点击文本编辑器右上角的运行代码图标，如图 2.1 中所示。点击图标后，在底部的终端部分，你应该会看到如下内容：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The top line starting with > is the command for the computer to run your code,
    and all it says is to run your first_program.py using Python. The second line
    is the output from running the command, and it says, “Hello World,” which is what
    we’d hoped to see.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从 > 开始的第一行是计算机运行你代码的命令，它的意思是用 Python 运行你的 first_program.py。第二行是运行命令后的输出，显示“Hello
    World”，这是我们希望看到的结果。
- en: Congratulations! You’ve written your first program! We now know that your programming
    environment is set up correctly. Let’s get started with writing just a couple
    more small pieces of code to get familiar with this workflow, and then we’ll move
    on to the workflow with Copilot.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经写出了你的第一个程序！现在我们知道你的编程环境已经设置正确了。接下来，让我们再写几个小程序，熟悉这个工作流程，然后再转到使用 Copilot
    的工作流程。
- en: 2.5 Writing and running some small programs
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.5 编写并运行一些小程序
- en: You’ve just finished the major step of installing Python and VS Code and getting
    it working. Before we start working with our AI assistant, Copilot, let’s write
    a few more small programs so you get a feel for typing and running code.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚完成了安装 Python 和 VS Code 并使其正常工作的主要步骤。在开始使用我们的 AI 助手 Copilot 之前，让我们再写几个小程序，让你熟悉如何输入和运行代码。
- en: 'Let’s start with writing a small program that involves adding numbers. Go ahead
    and delete the line you wrote that prints Hello World, and replace it with the
    following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从写一个简单的加法程序开始。先删除你写的打印 Hello World 的那行代码，然后用下面的代码替换它：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What do you think that code will print? Will it print “a + b”, or will it print
    30? Go ahead and run it and see.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为那段代码会打印什么？它会打印 “a + b”，还是打印 30？运行一下看看吧。
- en: The computer calculated the sum of 10 and 20 and printed 30\. This is pretty
    neat, right? We’ve used the computer to do some small calculations. If you change
    the value for `a` or `b`, what do you think will happen? Feel free to play with
    this on your own.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机计算了 10 和 20 的和并打印出 30。是不是很棒？我们用计算机做了一些小计算。如果你改变了 `a` 或 `b` 的值，你认为会发生什么？可以自己尝试一下。
- en: 'We’ll spend a lot more time later in this book talking about the details of
    how to read code, but if you’re curious, here’s how to read that code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 本书稍后会花更多时间讲解如何阅读代码的细节，但如果你感兴趣，下面是如何阅读那段代码：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '#1 Creates a variable named “a” and gives it the value 10'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '#1 创建一个名为 “a” 的变量，并赋值为 10'
- en: '#2 Creates a variable named “b” and gives it the value 20'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '#2 创建一个名为 “b” 的变量，并赋值为 20'
- en: '#3 Adds “a” and “b” and then prints the result to the screen'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '#3 将 “a” 和 “b” 相加，然后将结果打印到屏幕上'
- en: The key piece right now is that you become comfortable with the idea of typing
    code in the Editor Pane and running it using the Run button.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在关键的一点是，你要习惯在编辑器面板中输入代码，并通过点击运行按钮来执行代码。
- en: 'Let’s do just one more small example. Suppose you want to calculate the area
    of a square. Recalling our formulas for shapes, the area of a square whose sides
    are length *s* is as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 再做一个简单的示例。假设你想计算一个正方形的面积。回想一下我们的几何公式，边长为 *s* 的正方形的面积公式如下：
- en: Area = *s *²
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Area = *s *²
- en: 'Let’s start with defining a side to be a certain length and then printing the
    area:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从定义一个边长并打印面积开始：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We encourage you to type and run that code. When you run it, you should get
    the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们鼓励你输入并运行这段代码。运行时，你应该看到以下结果：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Did you run into any problems typing in that code? We suspect many of you did.
    If you missed a quotation mark, a comma, or a parenthesis, you probably got some
    kind of unpleasant error like this (here, if you forgot a comma) when you ran
    the code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 输入那段代码时遇到问题了吗？我们猜很多人都会遇到。如果你漏掉了一个引号、逗号或括号，运行代码时可能会出现类似这种不愉快的错误（这里，如果你漏掉了一个逗号）：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the old way of learning programming, you’d spend a lot of time making sure
    you understood the exact characters to write to make the programming language,
    Python, happy. We’ll reiterate the good news: with an AI assistant like Copilot,
    syntax becomes much, much less important. Let’s get Copilot installed so you can
    learn how to work with that tool.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的编程学习方式中，你会花很多时间确保自己理解每个字符的写法，以使编程语言 Python 能够正确运行。我们再次强调好消息：有了像 Copilot
    这样的 AI 助手，语法变得不再那么重要。让我们安装 Copilot，这样你就可以学习如何使用这个工具。
- en: '2.6 Getting your system set up: Part 2'
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.6 设置你的系统：第二部分
- en: 'Now we’re ready for the second part of our installation guide. There are some
    new steps here beyond what you did earlier. Again, feel free to refer to the following
    resources for more details on the installation process:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备进入安装指南的第二部分。这里有一些新的步骤，超出了之前的内容。再次提醒，您可以参考以下资源以获取更多关于安装过程的详细信息：
- en: Visit GitHub’s documentation at [https://mng.bz/WVP1](https://mng.bz/WVP1).
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请访问GitHub的文档：[https://mng.bz/WVP1](https://mng.bz/WVP1)。
- en: The website for this book ([https://mng.bz/0M46](https://mng.bz/0M46)) provides
    detailed instructions for setting up both PC and macOS systems. Because the websites
    for these tools might change after we write this book, we encourage you to use
    a combination of the GitHub link and the book website together.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书的网站([https://mng.bz/0M46](https://mng.bz/0M46))提供了详细的PC和macOS系统设置说明。由于这些工具的网址可能在本书编写后发生变化，我们建议您结合使用GitHub链接和本书网站。
- en: In the online book forum ([https://mng.bz/NBK1](https://mng.bz/NBK1)), you can
    ask for help and see the answers to a list of frequently asked questions.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在在线书籍论坛([https://mng.bz/NBK1](https://mng.bz/NBK1))，您可以寻求帮助，并查看常见问题的答案。
- en: 'The primary steps you’ll need to accomplish this time are as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 本次安装的主要步骤如下：
- en: 'Set up your GitHub account, and sign up for Copilot:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置您的GitHub账户，并注册Copilot：
- en: Go to [https://github.com/signup](https://github.com/signup), and sign up for
    a GitHub account.
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问[https://github.com/signup](https://github.com/signup)，并注册一个GitHub账户。
- en: Go into your settings in GitHub and enable Copilot. This is the point where
    you’ll either need to verify that you’re a student or sign up for the 30-day free
    trial (available at the time of this writing).
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入GitHub的设置，启用Copilot。这时，您需要验证自己是学生，或者注册30天的免费试用（在编写本书时提供）。
- en: 'Install the following VS Code extension(s) (for details, see [https://mng.bz/9o01](https://mng.bz/9o01)):'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装以下VS Code扩展（详情请见[https://mng.bz/9o01](https://mng.bz/9o01)）：
- en: '*GitHub Copilot (by GitHub)*—At the time of writing, installing GitHub Copilot
    automatically installs the GitHub Copilot Chat. Please check that GitHub Copilot
    Chat (by GitHub) has also been installed by checking your installed extensions.
    If it hasn’t, you’ll need to add this extension as well.'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*GitHub Copilot（由GitHub提供）*——在编写本书时，安装GitHub Copilot会自动安装GitHub Copilot Chat。请检查GitHub
    Copilot Chat（由GitHub提供）是否已安装，方法是查看已安装的扩展。如果没有安装，您需要安装该扩展。'
- en: We know that the steps here are brief. If you encounter any problems, we encourage
    you to consult the resources mentioned earlier for more detailed setup instructions.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道这里的步骤较为简洁。如果您遇到任何问题，我们建议您参考前面提到的资源，获取更详细的安装说明。
- en: 2.6.1 Check to see if Copilot is working properly
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.6.1 检查Copilot是否正常工作
- en: If your installation worked properly, you should see the Copilot icon (highlighted
    in figure 2.4) in the bottom-right corner of the VS Code interface.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的安装正确，您应该会在VS Code界面的右下角看到Copilot图标（如图2.4所示）。
- en: '![figure](../Images/2-4.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![figure](../Images/2-4.png)'
- en: Figure 2.4 VS Code interface with Copilot running
  id: totrans-98
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 图2.4 VS Code界面与Copilot运行中的状态
- en: 'Let’s check to see that Copilot is working correctly by editing the first_program.py
    file. Feel free to delete whatever code you have in there now and start fresh
    or create a new .py file—it’s up to you. In the text editor, type the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过编辑first_program.py文件来检查Copilot是否正常工作。您可以删除当前的代码并重新开始，或者创建一个新的.py文件，随您便。在文本编辑器中，输入以下内容：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The prompts and code we write will be in bold font to help distinguish between
    what we write, and the code and comments Copilot may give us. The # sign at the
    start is important (and you should include it in what you typed). It means that
    what you wrote is a comment (depending on your VS Code color palette, it may be
    a different color than the code we’re about to produce). Comments are *not* code:
    the computer executes code and doesn’t execute comments. Comments are used by
    programmers to provide a human-readable summary of what the code did to help other
    software engineers read the code. Today, its purpose has expanded to also prompt
    Copilot. After writing a comment (and sometimes even while writing comments),
    Copilot will attempt to give us suggestions. You can think of this as a much more
    sophisticated autocomplete, like when you type “New York T” in your search engine,
    and it autocompletes with “New York Times.”'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '我们写的提示和代码将以**粗体**显示，以帮助区分我们写的内容与 Copilot 可能给出的代码和注释。行首的 # 符号很重要（你应该在输入的内容中包含它）。它表示你写的是注释（根据你在
    VS Code 中使用的配色方案，可能与我们即将生成的代码颜色不同）。注释*不是*代码：计算机执行代码，而不执行注释。程序员使用注释来提供代码执行的人工可读摘要，以帮助其他软件工程师阅读代码。今天，注释的作用已扩展到提示
    Copilot。在写完注释后（有时甚至在写注释时），Copilot 会尝试给我们提供建议。你可以把它看作是一个更复杂的自动完成，就像你在搜索引擎中输入“New
    York T”时，它会自动完成为“New York Times”。'
- en: 'To trigger Copilot to start giving us code (or more comments), press Enter
    at the end of the line, and you’ll be at the start of a new line. Pause for a
    moment, and you should see something appear. Until accepted, Copilot’s suggestions
    are in light gray italics. If you don’t get a suggestion yet, you may need to
    press Enter a second time to trigger Copilot to suggest the code. Here’s what
    happened for us:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要触发 Copilot 开始给我们提供代码（或更多注释），请按下行尾的 Enter 键，你将进入新的一行。稍等片刻，你应该会看到一些内容出现。在被接受之前，Copilot
    的建议是浅灰色斜体。如果你还没有得到建议，可能需要按第二次 Enter 键来触发 Copilot 提供代码。以下是我们看到的情况：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you still don’t see a suggestion from Copilot, try pressing Ctrl-Enter (hold
    Ctrl while pressing Enter). When you press Ctrl-Enter, a new window will appear
    to the right of your editor window with the program called GitHub Copilot Suggestions.
    If that window doesn’t appear, there may be something wrong with your setup, and
    we encourage you to go to the book website to double-check that you followed all
    the steps correctly or to find (or ask for) help.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然没有看到 Copilot 的建议，试着按 Ctrl-Enter（按住 Ctrl 然后按 Enter）。按下 Ctrl-Enter 后，编辑器窗口右侧会出现一个新窗口，里面有名为
    GitHub Copilot Suggestions 的程序。如果这个窗口没有出现，可能是你的设置出了问题，我们建议你访问书籍网站，仔细检查是否按照所有步骤正确操作，或者寻求帮助（或者请教他人）。
- en: 'If you saw the suggestion from Copilot, press Tab to accept Copilot’s suggestion.
    Once you do this, the suggestion that was previously in light gray italics should
    now be in a standard font:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到了 Copilot 的建议，按 Tab 键接受 Copilot 的建议。这样做后，之前浅灰色斜体的建议应该变成标准字体：
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '#1 The prompt we wrote'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '#1 我们写的提示'
- en: '#2 The code produced by Copilot'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '#2 Copilot 生成的代码'
- en: 'If you’re seeing different code than this, it’s because of something we mentioned
    earlier: Copilot is nondeterministic so you may see different code than we do.
    We mention this because sometimes Copilot makes a minor mistake with the code
    here and may give you code similar to this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到的代码与我们不同，那是因为我们之前提到过的原因：Copilot 是非确定性的，因此你看到的代码可能与我们不同。我们提到这一点是因为有时 Copilot
    会在代码上犯一些小错误，并可能给出类似于这样的代码：
- en: '[PRE10]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You might think this slight difference (no parentheses around `"Hello` `Copilot"`)
    wouldn’t matter, but it does. Before Python 3, this was the correct syntax for
    a print statement, and when Python 3 was introduced, it switched to the code with
    parentheses. Because we’re running Python 3, you need to have the parentheses
    for the code to work. You might ask why Copilot gets this wrong. The problem is
    Copilot was trained on some old Python code as part of its training. If this seems
    annoying, we agree. But it’s another hint of the frustration novice programmers
    went through before Copilot. Most of what Copilot suggests is syntactically correct.
    But if you’re a novice writing the code from scratch, missing parentheses or a
    missing colon somewhere might cost you a lot of time. Now we have the correct
    code as
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能认为这个细微的差别（`"Hello` `Copilot"` 周围没有圆括号）不重要，但其实它是有区别的。在 Python 3 之前，这是打印语句的正确语法，而
    Python 3 引入后，语法变成了带圆括号的代码。因为我们正在运行 Python 3，代码必须有圆括号才能正常工作。你可能会问为什么 Copilot 会出错。问题在于
    Copilot 在训练过程中使用了一些旧版本的 Python 代码。如果这让你感到恼火，我们表示理解。但这也是初学者在 Copilot 之前遇到的挫折之一。Copilot
    提供的大部分建议在语法上是正确的。但如果你是一个初学者，从零开始编写代码，遗漏圆括号或某个地方漏掉冒号，可能会让你浪费大量时间。现在我们有了正确的代码，如下所示：
- en: '[PRE11]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: which is similar to the “Hello World” code we produced manually earlier. We
    hope you’re encouraged to see that Copilot can generate code like this!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们之前手动编写的“Hello World”代码类似。我们希望看到 Copilot 能生成这样的代码能让你感到鼓舞！
- en: 'Now, let’s see how it does in the example of determining the area of a square
    from the previous section. Go ahead and enter the following code with the prompt
    (again, shown in bold):'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看 Copilot 在上一节中计算正方形面积的示例中表现如何。继续输入以下代码和提示（再次以粗体显示）：
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We received the following response from Copilot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们收到了 Copilot 的以下回应：
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Notice how Copilot handled that piece of code well. For humans, especially learners
    new to programming, it’s easy to make a mistake, but Copilot rarely does. We hope
    Copilot gave you a similar response. Feel free to play around with Copilot for
    a bit if you’d like to become more comfortable with the interface.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 Copilot 如何良好地处理那段代码。对于人类，特别是初学编程的学习者，犯错很容易，但 Copilot 很少出错。我们希望 Copilot 给出了类似的回应。如果你想更熟悉界面，随时可以试着操作
    Copilot 一段时间。
- en: We now know that your programming environment and Copilot are set up correctly,
    so we can move into a larger programming task. But before we do, we’d like to
    go over tips for how to deal with some common problems we’ve encountered when
    working with Copilot, so you have these tips available to you when working through
    the next example.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道你的编程环境和 Copilot 已正确设置，因此可以开始更大的编程任务。但在开始之前，我们想先介绍一些与 Copilot 一起工作时常遇到的问题，并提供解决方案，以便你在处理下一个示例时能够使用这些提示。
- en: 2.7 Addressing common Copilot challenges
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.7 解决常见的 Copilot 挑战
- en: It may seem early to start talking about common challenges with Copilot, but
    you may have already run into challenges when writing your first program. You’ll
    certainly encounter some of these when working through our next example and in
    the next chapters, so we wanted to give these to you now.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在谈论 Copilot 的常见挑战可能显得有些早，但你在编写第一个程序时可能已经遇到了一些挑战。在接下来的示例和章节中，你肯定会遇到这些挑战，所以我们想提前给你提供这些信息。
- en: In our time working with Copilot, we’ve run into a few common challenges. These
    challenges will likely decrease with time as Copilot improves, but they were still
    problems at the time of this writing. Although the challenges in table 2.1 aren’t
    the only ones you might encounter, we hope our tips on how to address these common
    challenges will help you get up and running quickly. We’ll keep a running list
    at our book’s website, so feel free to reach out to us on the forums if you feel
    we’ve missed something.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在与 Copilot 合作的过程中，我们遇到了一些常见的挑战。随着 Copilot 的不断改进，这些挑战可能会减少，但在写作时它们仍然存在。尽管表 2.1
    中列出的挑战不是你可能遇到的唯一问题，但我们希望通过我们的建议来解决这些常见挑战，帮助你快速上手。如果我们遗漏了什么，可以随时通过论坛联系我们，我们会在书籍网站上持续更新挑战清单。
- en: Table 2.1 Common challenges working with Copilot
  id: totrans-123
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 表 2.1 常见的 Copilot 使用挑战
- en: '| Challenge | Description | Remedies |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 挑战 | 描述 | 解决方法 |'
- en: '| --- | --- | --- |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Comments only  | If you give Copilot a prompt using the comment symbol (#),
    when you start a new line, it wants to just give you more comments rather than
    code. For example: **`# output "Hello Copilot" to the screen`**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '| 仅限注释  | 如果你使用注释符号（#）给Copilot一个提示，当你开始新的一行时，它会更倾向于给你更多的注释，而不是代码。例如：**`# 输出"Hello
    Copilot"到屏幕`**'
- en: '`# print "Hello world" to the screen`'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 打印 "Hello world" 到屏幕`'
- en: We’ve seen Copilot generate line after line of comments, sometimes repeating
    itself! When this happens, remedy 3 in the column to the right (use docstrings)
    is sometimes the most effective.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们曾看到Copilot生成一行又一行的注释，有时还会重复自己！当这种情况发生时，右侧栏中的补救措施3（使用文档字符串）通常是最有效的。
- en: '| 1\. Add a newline (press Enter) between your comment and Copilot’s suggestion
    to help it switch from comments to code. 2\. If a newline doesn’t work, you can
    type a letter or two of code (no comment symbol). A couple letters from a keyword
    in your prompt usually works. For example:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '| 1\. 在你的注释和Copilot的建议之间添加一个换行符（按Enter键），以帮助它从注释切换到代码。2\. 如果换行符不起作用，你可以输入一些代码字母（没有注释符号）。通常，提示中的关键字的几个字母就能起作用。例如：'
- en: '`# output "Hello Copilot" to the screen`'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 输出"Hello Copilot"到屏幕`'
- en: '`pr`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`pr`'
- en: A couple letters from a keyword typically causes Copilot to give a code suggestion.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 几个关键字的字母通常会让Copilot给出代码建议。
- en: '3\. Switch from using # comments to docstring comments like this:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 切换使用#注释到像这样的文档字符串注释：
- en: '`"""`'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`"""`'
- en: '`output "Hello Copilot" to the screen`'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`输出 "Hello Copilot" 到屏幕`'
- en: '`"""`'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`"""`'
- en: 4\. Use Ctrl-Enter to see if Copilot will give you suggestions that are code
    rather than comments.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 使用Ctrl-Enter看看Copilot是否会给你提供代码而不是注释的建议。
- en: '|'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Wrong code  | Sometimes Copilot just gives you obviously wrong code from
    the start. (You’ll learn throughout this book how to identify incorrect code!)
    In addition, sometimes Copilot seems to get stuck down wrong paths. For example,
    it might seem to be trying to solve a different problem than what you’ve asked
    it to solve. (Remedy 3, in particular, can help with getting Copilot to go down
    a new path.)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '| 错误代码  | 有时Copilot一开始就给出明显错误的代码。（在本书中你会学到如何识别错误的代码！）此外，有时Copilot似乎会陷入错误的路径。例如，它可能会尝试解决一个与你要求它解决的问题不同的问题。（特别是补救措施3，可以帮助Copilot走上新的路径。）'
- en: '| Much of this book is about how to address this problem, but here are some
    quick tips to get Copilot to help: 1\. Change your prompt to see if you can better
    describe what you need.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '| 本书的很多内容都在讲如何解决这个问题，但这里有一些快速的技巧来让Copilot帮助你：1\. 更改你的提示，看看能否更好地描述你需要的内容。'
- en: 2\. Try using Ctrl-Enter to find a suggestion from Copilot that is the correct
    code.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 尝试使用Ctrl-Enter来查找Copilot给出的正确代码建议。
- en: 3\. Close the VS Code program, wait a little bit, and restart it. This can help
    clear the Copilot cache to get new suggestions.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 关闭VS Code程序，等待片刻后重新启动。这有助于清除Copilot缓存并获取新的建议。
- en: 4\. Try breaking down the problem into smaller steps (see chapter 7 for more
    details).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 尝试将问题分解成更小的步骤（详情见第7章）。
- en: 5\. Debug the code (see chapter 8).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 调试代码（见第8章）。
- en: 6\. Try asking ChatGPT for the code, and paste its suggestions into VS Code.
    A different large language model (LLM) can sometimes give suggestions that help
    the other LLM to get unstuck.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 尝试向ChatGPT请求代码，并将其建议粘贴到VS Code中。另一个大型语言模型（LLM）有时能给出帮助另一个LLM走出困境的建议。
- en: '|'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Copilot gives you `# YOUR CODE HERE`  | We’ve had Copilot seem to tell us
    to write our own code by generating this (or similar text) after a prompt: `#
    YOUR CODE HERE`'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '| Copilot 给出 `# YOUR CODE HERE`  | 我们曾经看到Copilot在提示后生成了这样的内容（或类似文本），它好像在告诉我们自己编写代码：`#
    YOUR CODE HERE`'
- en: '| We believe this is happening when we ask Copilot to solve a problem that
    has been given by an instructor to students to solve in the past. Why? Well, when
    we write our assignments for our students, we (as instructors) often write some
    code and then tell our students to write the rest by writing `# YOUR CODE HERE`'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '| 我们认为这是因为我们要求Copilot解决一个过去曾经由教师给学生布置的任务。为什么？嗯，当我们编写作业时，作为教师的我们通常会先写一些代码，然后告诉学生编写其余的代码，方法是写
    `# YOUR CODE HERE`'
- en: where we want students to write their code. Students tend to leave that comment
    in their solution code, which means Copilot was trained to think this comment
    is an important part of the solution (it’s not). Often, we’re able to solve this
    problem by finding reasonable solutions in the Copilot suggestions with Ctrl-Enter,
    but please see the remedies for Wrong Code if that doesn’t work.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望学生在这里编写代码。学生们往往会把这条注释留在他们的解决代码中，这意味着 Copilot 被训练认为这个注释是解决方案的重要部分（但其实不是）。通常，我们能够通过在
    Copilot 提供的建议中找到合理的解决方案并按 Ctrl-Enter 解决，但如果不行，请查看“错误代码”的解决办法。
- en: '|'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Missing modules  | Copilot gives you code, but it won’t work because there
    are modules missing. ( *Modules* are additional libraries that can be added to
    Python to provide prebuilt functionality.)  | In section 2.8.2, see the “Python
    Modules” sidebar for a description of modules, and see chapter 5 for instructions
    on how to use modules.  |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| 缺少模块  | Copilot 会给你代码，但它无法运行，因为缺少模块。 (*模块* 是可以添加到 Python 中以提供预构建功能的额外库。)  |
    在 2.8.2 节中，查看“Python 模块”侧边栏以了解模块的描述，并参阅第 5 章了解如何使用模块。 |'
- en: 2.8 Our path forward
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.8 我们前进的道路
- en: You’ve already seen that Copilot can generate code for you. So, can we just
    ask Copilot to solve our tasks for us? We’re afraid not. We still need to learn
    some essential skills to be able to work effectively with Copilot and to design
    software that’s meaningful to us.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到 Copilot 可以为你生成代码。那么，我们可以直接让 Copilot 为我们解决任务吗？恐怕不行。我们仍然需要学习一些基本技能，才能有效地与
    Copilot 合作，并设计对我们有意义的软件。
- en: To help you appreciate the skills you’ll need to learn and to get you excited
    about where you’re headed, we’ll give you a larger example that represents what
    we hope you’ll be able to do on your own about halfway through reading and working
    through this book.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助你理解你需要学习的技能，并激发你对未来的期待，我们将提供一个更大的例子，代表你大约在本书阅读和实践的中途，能够独立完成的任务。
- en: 2.8.1 How we’ll be working with Copilot throughout the book
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.8.1 本书中我们如何与 Copilot 合作
- en: 'We’ll expand on this workflow in later chapters, but the core elements will
    be the same:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后续章节中扩展这个工作流程，但核心要素将保持不变：
- en: Write a prompt to Copilot using comments (`#`) or docstrings (`"""`).
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用注释（`#`）或文档字符串（`"""`）向 Copilot 写提示。
- en: Let Copilot generate code for you.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让 Copilot 为你生成代码。
- en: 'Check to see whether the code is correct by reading through it and by testing:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过阅读代码并进行测试，检查代码是否正确：
- en: If it works, move to step 1 for the next thing you’d like it to do.
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有效，进入第 1 步，继续下一个你希望它完成的任务。
- en: If it doesn’t work, delete the code from Copilot, go back to step 1, and modify
    the prompt (and see the remedies shown previously in table 2.1).
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果它不起作用，删除 Copilot 中的代码，回到第 1 步，并修改提示（同时查看表 2.1 中提供的解决办法）。
- en: 2.8.2 Showcasing Copilot’s value in a data processing task
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.8.2 展示 Copilot 在数据处理任务中的价值
- en: For this bigger example, we want you to focus on how we’re interacting with
    the tools and the skills we need. We don’t expect you to understand the code until
    much later in the book. We provide the code solely so you can see what Copilot
    gave us, but you don’t need to try to understand the code in this chapter.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个更大的例子，我们希望你关注我们如何与工具互动以及我们需要的技能。我们不指望你在本书早期就理解代码。我们提供代码仅仅是为了让你看到 Copilot
    给我们生成了什么，但你不需要在本章试图理解代码。
- en: You’re welcome to follow through this example with us or just read through it.
    We haven’t given you the skills yet to progress if you get stuck, so feel free
    to wait to work through an example like this until a later chapter. We’ll assume
    for the rest of this section that you’ll just be reading along.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎你和我们一起跟进这个例子，或仅仅阅读它。如果你卡住了，我们还没有给你足够的技能来继续，所以可以等到后面的章节再进行类似的练习。在本节其余部分，我们假设你只是在阅读。
- en: 'We want to start with some data processing as this is something that many of
    you have likely done in your personal or professional lives. To find a dataset,
    we went to a great website called Kaggle [4], which has tons of datasets freely
    available for use. Many of them include important data such as health statistics
    for different countries, information to help track the spread of disease, and
    so on. We’re not going to use those because we’d like to have something lighter
    for our first program. Because both of us are American football fans, we’ll play
    with the National Football League (NFL) offensive stats database. Here’s the link
    to the dataset we found if you want to look into it yourself: [https://mng.bz/86pw](https://mng.bz/86pw).
    The dataset has NFL information from 2019 to 2022 (figure 2.5).'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望从数据处理开始，因为这是你们中许多人可能在个人或职业生活中做过的事情。为了找到一个数据集，我们访问了一个很棒的网站——Kaggle [4]，这个网站提供了大量免费的数据集供使用。许多数据集包括一些重要数据，例如不同国家的健康统计信息、帮助追踪疾病传播的数据等。我们不会使用这些数据集，因为我们希望为我们的第一个程序选择一些更轻量的内容。因为我们俩都是美式足球迷，所以我们将使用国家橄榄球联盟（NFL）进攻统计数据库。这里是我们找到的数据集链接，如果你想自己查看，可以点击：[https://mng.bz/86pw](https://mng.bz/86pw)。该数据集包含了2019到2022年的NFL信息（见图2.5）。
- en: '![figure](../Images/2-5.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![figure](../Images/2-5.png)'
- en: Figure 2.5 The first few columns and rows of the nfl_offensive_stats.csv dataset
  id: totrans-167
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 图2.5 nfl_offensive_stats.csv数据集的前几列和行
- en: 'Step 1: Understanding our dataset'
  id: totrans-168
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 步骤 1：理解我们的数据集
- en: 'The nfl_offensive_stats.csv file is a comma-separated values (CSV) text file
    (refer to figure 2.5 for a portion of the file). This is a standard format for
    storing data. It has a header row at the top that explains what’s in every column.
    The way that we (or a computer) know the boundaries between columns is to use
    commas between cells. Also notice that each row is placed on its own line. Good
    news: Python has a bunch of tools for reading in CSV files.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: nfl_offensive_stats.csv文件是一个逗号分隔值（CSV）文本文件（参见图2.5中的文件部分）。这是存储数据的标准格式。它有一行头部，用来解释每一列的内容。我们（或计算机）知道列之间的边界是通过在单元格之间使用逗号。此外，请注意，每一行都位于自己的单独一行上。好消息是：Python有许多工具可以读取CSV文件。
- en: 'Let’s start by exploring what is stored in this file. To preview the file’s
    contents, you can look at it on the Kaggle webpage under Detail or download and
    open it in either VS Code or in spreadsheet software such as Microsoft Excel.
    Don’t worry about downloading and using this file just yet, that’s for later in
    the book. However, if you were to download and open it, here’s the start of the
    header (top) row (also shown earlier in figure 2.5):'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从探索文件中存储了什么开始。要预览文件的内容，你可以在Kaggle网页的“详细信息”部分查看它，或者下载并在VS Code或类似Microsoft
    Excel的电子表格软件中打开它。现在不需要担心下载和使用这个文件，这是本书后续部分的内容。然而，如果你下载并打开它，下面是头行（顶部）的开始部分（如图2.5中所示）：
- en: '[PRE14]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: There are more columns, but these are enough for our first task. We’d like to
    know which quarterback has done the best over this time period.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有更多列，但这些已经足够完成我们的第一个任务了。我们想知道在这段时间内，哪位四分卫的表现最好。
- en: 'Step 2: How well did all the quarterbacks do over that time period?'
  id: totrans-173
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 步骤 2：在这段时间内所有四分卫的表现如何？
- en: If you don’t follow American football, that’s okay. You don’t need to know the
    game to follow along. Quarterbacks are responsible for throwing the football.
    We’ll start then with looking at how many yards they passed for in that time period.
    We only want to compare against other quarterbacks because they are the players
    whose job is to throw the ball. Sure, a running back might throw the ball once
    a season, and it’s often fun when they do, but it’s not really their job. To include
    only the quarterbacks, we’ll need to tell Copilot to limit our results to just
    players whose *Position* (the third column) is *QB* (stands for Quarterback).
    To solve this task, we created a new Python file called nfl_stats.py and had a
    conversation with Copilot that you can see in listing 2.1.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不关注美式足球，也没关系。你不需要了解这项运动就能跟得上。四分卫负责传球。我们首先看一下他们在这段时间内传了多少码数。我们只想和其他四分卫进行比较，因为他们是负责传球的球员。当然，跑卫每个赛季可能会传一次球，当他们这样做时通常会很有趣，但这不是他们的工作。为了只包括四分卫，我们需要告诉Copilot将结果限制为位置（第三列）为*QB*（四分卫的缩写）的球员。为了解决这个任务，我们创建了一个新的Python文件，名为nfl_stats.py，并与Copilot进行了对话，代码可以在清单2.1中看到。
- en: Listing 2.1 Copilot’s code to analyze the top quarterbacks
  id: totrans-175
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 清单2.1 Copilot分析顶级四分卫的代码
- en: '[PRE15]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '#1 Our first prompt to read in the data'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '#1 我们的第一个读取数据的提示'
- en: '#2 Copilot’s responses sometimes include comments. Comments that we get from
    Copilot won’t be in bold, unlike our prompts, which are in bold.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '#2 Copilot的响应有时包括注释。从Copilot得到的注释不会是粗体的，而我们的提示是粗体的。'
- en: '#3 Our second prompt to analyze the data'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '#3 我们的第二个提示用于分析数据'
- en: '#4 Our third prompt to print the results'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '#4 我们的第三个提示用于打印结果'
- en: Notice that we gave Copilot three prompts. The first was to handle the input
    data, the second was to process the data, and the third was to output the response.
    This cycle of input data, process data, and output data is exceptionally common
    in programming tasks.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们给了Copilot三个提示。第一个是处理输入数据，第二个是处理数据，第三个是输出响应。数据输入、数据处理和数据输出的循环在编程任务中非常常见。
- en: If you chose to follow along with us and gave these prompts to Copilot, you
    might have gotten back different code. That’s okay because Copilot is nondeterministic,
    so it won’t always give the same result. However, if it gave you different code,
    we haven’t equipped you with the tools to know if it’s correct yet. As such, feel
    free to just use our code if you’d like to follow along.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择跟随我们并将这些提示提供给Copilot，你可能会得到不同的代码。没关系，因为Copilot是非确定性的，它不会总是给出相同的结果。然而，如果它给出了不同的代码，我们还没有为你提供判断其是否正确的工具。因此，如果你想跟随我们的步骤，尽管使用我们的代码。
- en: 'Reminder: Copilot is nondeterministic'
  id: totrans-183
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 提醒：Copilot是非确定性的
- en: 'As mentioned in both chapter 1 and this chapter, Copilot is nondeterministic,
    so what Copilot gives you may not match what it gives us. This is going to be
    a challenge for the rest of the book: What do you do if you get a wrong result
    when we get a right result? We’re fairly confident that Copilot will give you
    a correct answer here, but if you get a *wrong answer* from Copilot, go ahead
    and read the remainder of this section rather than working along with Copilot
    in VS Code. We’ll absolutely give you all the tools you need to fix the code when
    Copilot gives you a wrong answer, but that skill will be taught over the remainder
    of the book, so we don’t want you to get stuck on this now.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如第一章和本章所述，Copilot是非确定性的，所以Copilot给出的结果可能与你得到的不同。这将是本书接下来的挑战：如果你得到一个错误的结果，而我们得到了正确的结果，该怎么办？我们非常有信心Copilot会给你一个正确的答案，但如果你从Copilot那里得到一个*错误的答案*，请继续阅读本节内容，而不是在VS
    Code中与Copilot一起操作。我们一定会为你提供所有必要的工具来修复Copilot给出的错误代码，但这项技能将在本书的后续章节中教授，所以我们不希望你现在就卡住了。
- en: Looking at the results from Copilot, we have to say this is quite impressive.
    You don’t need to worry about the code yet, but note that writing this code from
    scratch would be difficult for many new learners. The good news is that anyone
    can use this powerful tool to do so much more than is possible to do without it.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 看着Copilot的结果，我们不得不说这非常令人印象深刻。你现在不需要担心代码，但请注意，从头编写这段代码对于许多新手学习者来说会很困难。好消息是，任何人都可以使用这个强大的工具做比没有它时更多的事情。
- en: 'Step 3: Using Copilot to modify the code to exclude one player'
  id: totrans-186
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第3步：使用Copilot修改代码以排除一个球员
- en: 'We can use Copilot not just to generate new code but to modify it as well.
    If we run that code from listing 2.1 on the dataset, here are the first five lines
    from the output:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Copilot不仅生成新代码，还可以修改它。如果我们在数据集上运行列表2.1中的代码，以下是输出的前五行：
- en: '[PRE16]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If you follow football, these results shouldn’t be a surprise to you. Just to
    see how well Copilot can adapt to our wishes, let’s try to make a minor change.
    Suppose that because Tom Brady is already recognized as one of the best QBs of
    all time, you would rather omit him from this comparison.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你跟随足球，这些结果应该不会让你感到惊讶。为了看看Copilot如何适应我们的需求，让我们尝试做一个小改动。假设由于Tom Brady已经被公认为历史上最好的四分卫之一，你宁愿从这次比较中省略他。
- en: 'To make this change, we’re just going to modify the prompt at the bottom. We
    went to the point in the code where it says the following:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 要做这个改动，我们只需修改底部的提示。我们来到代码中如下所示的位置：
- en: '[PRE17]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We deleted the code, leaving just the comment, and added another line to the
    docstring:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们删除了代码，只留下了注释，并在文档字符串中添加了另一行：
- en: '[PRE18]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Copilot then suggested the following to us:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，Copilot向我们建议了以下内容：
- en: '[PRE19]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '#1 Code that excludes Tom Brady from the data'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '#1 排除Tom Brady的数据代码'
- en: 'That’s exactly what we’d like to see changed in the code. (Thanks, Tom Brady,
    for being a good sport in this example.) The code excluded all data for Tom Brady
    at the point of printing the results. When we save the file and run it again,
    the first five lines now appear like this:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 那正是我们希望在代码中看到改变的地方。（谢谢你，汤姆·布雷迪，在这个例子中表现得很好。）在打印结果的时候，代码排除了汤姆·布雷迪的所有数据。当我们保存文件并再次运行时，前五行现在看起来是这样的：
- en: '[PRE20]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Reflecting on the example and the skills we need to write code with copilot
  id: totrans-199
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 反思例子和我们需要使用Copilot编写代码的技能
- en: 'Without writing any code ourselves, we were able to solve a large real-world
    task. However, you still need to learn some essential programming skills. We’ll
    teach you those skills in the upcoming chapters by solving a variety of tasks.
    By the end of chapter 7, you’ll be able to solve large tasks like these. We want
    you to take away the following from this example:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们自己没有编写任何代码，但我们能够解决一个大型的实际任务。然而，你仍然需要学习一些基本的编程技能。在接下来的章节中，我们将通过解决各种任务来教给你这些技能。到第七章结束时，你将能够解决这类大型任务。我们希望你从这个例子中得到以下收获：
- en: '*Copilot is a powerful tool.* We didn’t write any code ourselves, but we were
    able to get Copilot to generate the code needed to perform some initial analysis
    of the data. If you’ve used spreadsheets, you can probably think of a way to do
    this using spreadsheet applications such as Microsoft Excel, but it likely wouldn’t
    be as easy as writing code like this. Even if you haven’t used spreadsheets before,
    you’ve got to admit that it’s amazing that writing basic, human-readable prompts
    can produce correct code and output like this.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Copilot 是一个强大的工具。* 我们自己没有编写任何代码，但我们能让 Copilot 生成需要执行一些初始数据分析所需的代码。如果你使用过电子表格，你可能会想到使用诸如
    Microsoft Excel 等电子表格应用程序来做这件事，但很可能不会像编写这样的代码那样简单。即使你以前没有使用过电子表格，你也必须承认，通过编写基本的、人类可读的提示就能产生正确的代码和输出，这真是令人惊讶。'
- en: '*Breaking problems into small tasks is important.* For this example, we tried
    writing this code with just a single large prompt (not shown) or by breaking it
    into smaller tasks. We found that Copilot was more apt to make mistakes when given
    one large task rather than multiple smaller tasks. In general, breaking the problem
    into smaller tasks significantly increases the likelihood of Copilot generating
    the right code. You’ll see how to break down larger problems into smaller tasks
    throughout the remainder of this book because this is one of the most important
    skills you’ll need. In fact, the upcoming chapter 3 will help you start understanding
    what are considered reasonable tasks to give to Copilot, and chapter 7 will be
    dedicated entirely to learning how to break down larger programs into smaller
    pieces.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将问题分解成小任务是很重要的。* 例如，我们尝试使用单个大提示（未显示）编写此代码，或者将其分解为较小的任务。我们发现，当给出一个大任务时，Copilot
    更容易出错，而不是给出多个较小的任务。通常情况下，将问题分解为较小的任务显著增加了Copilot生成正确代码的可能性。你将看到在本书的其余部分如何将较大的问题分解为较小的任务，因为这是你需要的最重要的技能之一。事实上，即将到来的第三章将帮助你开始理解，什么样的任务被认为是适合交给Copilot的，第七章将完全专注于学习如何将较大的程序分解为较小的部分。'
- en: '*We still need to understand code to some degree.* This is true for several
    reasons. One is that writing good prompts requires a basic understanding of what
    computers know and what they don’t. We can’t just give a prompt to Copilot that
    says, “Give me the number of passing yards for Tom Brady.” Copilot likely wouldn’t
    be able to figure out where the data is stored, the format of the data, which
    columns correspond to players and passing yards, or that Tom Brady is a player.
    We had to spell details like that out to Copilot for it to be successful. Another
    reason has to do with determining whether code from Copilot is reasonable. When
    the two of us read the response from Copilot, we could determine what the code
    is doing because we know how to read code. You’ll need to be able to do this to
    some degree, which is why chapters 4 and 5 are dedicated to reading code.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*我们仍然需要在某种程度上理解代码。* 几个原因证明了这一点。其中一个原因是，编写良好的提示需要基本的理解计算机知道什么，以及不知道什么。我们不能只是给Copilot一个提示：“告诉我汤姆·布雷迪的传球码数。”
    Copilot可能无法确定数据存储在哪里，数据的格式，哪些列对应于球员和传球码数，或者汤姆·布雷迪是一名球员。我们不得不向Copilot详细解释这些细节才能成功。另一个原因与确定Copilot生成的代码是否合理有关。当我们两个人阅读Copilot的响应时，我们可以确定代码正在做什么，因为我们知道如何阅读代码。你需要在某种程度上能够做到这一点，这就是为什么第四章和第五章专门讲解阅读代码的原因。'
- en: '*Testing is important.* We need to know if the code Copilot gave us is correct
    or not! When programmers talk about testing, they’re referring to the practice
    of making sure that their code works correctly, even in possibly unexpected circumstances.
    We didn’t spend much time on this piece, other than checking whether Copilot’s
    answer is plausible using estimates on just one dataset, but, in general, we’ll
    need to spend more time on testing because this is a critical part of the code-writing
    process. It likely goes without saying, but errors in code range from embarrassing
    (if you tell your hard-core NFL fan friend the wrong number of passing yards for
    a player) to dangerous (if software in a car behaves incorrectly) to costly (if
    businesses make decisions on wrong analyses). After you’ve learned how to read
    code, we have first-hand experience that even if the code looks correct, it might
    not be! To address this, we must test every piece of code created by Copilot to
    ensure it does what it should. You’ll learn how to rigorously test Copilot’s code
    in later chapters, especially chapter 6, which is dedicated to the skill.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试很重要。* 我们需要知道Copilot给我们的代码是否正确！当程序员谈论测试时，他们指的是确保代码在可能的意外情况下也能正常工作的实践。我们在这一部分没有花太多时间，除了使用一个数据集估算Copilot的答案是否合理，但一般来说，我们需要花更多时间进行测试，因为这是写代码过程中的关键部分。显然，代码中的错误可能会从令人尴尬（如果你告诉一个狂热的NFL球迷某个球员的传球码数错了）到危险（如果汽车中的软件表现不正确）再到代价高昂（如果企业根据错误的分析做决策）。当你学会如何阅读代码后，我们有亲身经验，即使代码看起来正确，也不一定是真的！为了解决这个问题，我们必须测试Copilot生成的每一段代码，确保它能完成应该做的事。你将在后续章节中，特别是第6章，学习如何严格测试Copilot的代码，该章专门讲解这一技能。'
- en: '*Python is powerful.* It’s okay if you missed this, but in listing 2.1, the
    code imported a module from Python’s libraries (`import` `csv`). Python has many
    built-in tools (called libraries) to help people accomplish their tasks. In this
    case, it was importing a library to make it easier to read and modify CSV files.
    We’ll harness more of these libraries in later chapters.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Python很强大。* 如果你没有注意到也没关系，但在清单2.1中，代码从Python的库中导入了一个模块（`import` `csv`）。Python有许多内置工具（称为库），帮助人们完成任务。在这个例子中，它导入了一个库，使得读取和修改CSV文件变得更容易。我们将在后续章节中利用更多这些库。'
- en: Python modules
  id: totrans-206
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Python模块
- en: Python modules expand the capability of the programming language. There are
    many modules in Python, and they can help you do anything from data analysis to
    creating websites to writing video games. You can recognize when code wants to
    use a Python module by the `import` statement in the code. Some modules are built-in
    to Python, but there are thousands more that aren’t and that you need to manually
    install if you want to use them. Chapter 5 will show you how to use modules.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Python模块扩展了编程语言的功能。Python中有许多模块，它们可以帮助你完成从数据分析到创建网站，再到编写视频游戏的各种任务。你可以通过代码中的`import`语句来识别何时使用Python模块。一些模块是Python内置的，但还有成千上万的模块不是内置的，如果你想使用它们，需要手动安装。第5章将向你展示如何使用模块。
- en: In this chapter, we’ve accomplished a great deal! If you’ve finished setting
    up your programming environment and gotten started writing code with Copilot,
    you should be proud. You’ve taken a huge step toward writing software! Beyond
    the details of setting up your environment, you’ve seen where we’re headed by
    working through an example together.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经取得了很大进展！如果你已经完成了编程环境的设置，并开始使用Copilot写代码，你应该感到骄傲。你已经迈出了写软件的巨大一步！除了设置环境的细节之外，通过一起完成一个示例，你已经看到了我们前进的方向。
- en: In the examples in this chapter, Copilot gave us the code we wanted without
    us needing to change the prompt or debug the code to figure out why it’s not working
    properly. That was a nice way to showcase the power of using an AI assistant to
    program, but you’ll often find yourself having to test the code, change the prompts,
    and sometimes try to understand why the code is wrong. This is the AI assistant
    programming process that you’ll learn more about in upcoming chapters.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的示例中，Copilot给了我们想要的代码，而我们不需要更改提示词或调试代码来找出为什么它没有正常工作。这是展示使用AI助手编程的强大功能的一种好方式，但你会发现自己经常需要测试代码、修改提示词，有时还需要理解代码为什么错了。这就是AI助手编程的过程，你将在接下来的章节中学到更多。
- en: Summary
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: You installed Python and VS Code and set up Copilot so you can work along with
    the book and start writing code yourself.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你安装了Python和VS Code，并设置了Copilot，这样你就可以跟着书一起工作，开始自己写代码了。
- en: The VS Code interface has areas for file management, code editing, and running
    code that will be used throughout the book.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VS Code 界面包含了文件管理、代码编辑和运行代码的区域，这些区域将在整本书中使用。
- en: Prompts are how we tell Copilot to generate code, which, when written carefully,
    can be a highly effective way of creating software.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提示是我们告诉 Copilot 生成代码的方式，当提示编写得当时，它可以成为一种高效的软件开发方式。
- en: Data analysis is a common programming task, and using CSV files is a common
    way to store data to be processed by computers.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据分析是一个常见的编程任务，使用 CSV 文件是存储供计算机处理的数据的常见方式。
- en: Copilot is a powerful tool that can produce sophisticated code under the proper
    human supervision.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Copilot 是一款强大的工具，在适当的人工监督下，能够生成复杂的代码。
