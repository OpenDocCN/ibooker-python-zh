["```py\n$ brew install terraform\n```", "```py\n$ cat modules/s3/main.tf\nresource \"aws_s3_bucket\" \"www\" {\n  bucket = \"www.${var.domain_name}\"\n  acl = \"public-read\"\n  policy = <<POLICY\n{\n  \"Version\":\"2012-10-17\",\n  \"Statement\":[\n    {\n      \"Sid\":\"AddPerm\",\n      \"Effect\":\"Allow\",\n      \"Principal\": \"*\",\n      \"Action\":[\"s3:GetObject\"],\n      \"Resource\":[\"arn:aws:s3:::www.${var.domain_name}/*\"]\n    }\n  ]\n}\nPOLICY\n\n  website {\n    index_document = \"index.html\"\n  }\n}\n\n$ cat modules/s3/variables.tf\nvariable \"domain_name\" {}\n\n$ cat modules/s3/outputs.tf\noutput \"s3_www_website_endpoint\" {\n  value = \"${aws_s3_bucket.www.website_endpoint}\"\n}\n```", "```py\n$ cat main.tf\nprovider \"aws\" {\n  region = \"${var.aws_region}\"\n}\n\nmodule \"s3\" {\n  source = \"./modules/s3\"\n  domain_name = \"${var.domain_name}\"\n}\n```", "```py\n$ cat variables.tf\nvariable \"aws_region\" {\n  default = \"us-east-1\"\n}\n\nvariable \"domain_name\" {\n  default = \"devops4all.dev\"\n}\n```", "```py\n|____main.tf\n|____variables.tf\n|____modules\n| |____s3\n| | |____outputs.tf\n| | |____main.tf\n| | |____variables.tf\n```", "```py\n$ terraform apply\n\nAn execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  # module.s3.aws_s3_bucket.www will be created\n  + resource \"aws_s3_bucket\" \"www\" {\n      + acceleration_status = (known after apply)\n      + acl  = \"public-read\"\n      + arn  = (known after apply)\n      + bucket  = \"www.devops4all.dev\"\n      + bucket_domain_name  = (known after apply)\n      + bucket_regional_domain_name = (known after apply)\n      + force_destroy = false\n      + hosted_zone_id= (known after apply)\n      + id= (known after apply)\n      + policy  = jsonencode(\n            {\n              + Statement = [\n                  + {\n                      + Action = [\n                          + \"s3:GetObject\",\n                        ]\n                      + Effect = \"Allow\"\n                      + Principal = \"*\"\n                      + Resource  = [\n                          + \"arn:aws:s3:::www.devops4all.dev/*\",\n                        ]\n                      + Sid = \"AddPerm\"\n                    },\n                ]\n              + Version= \"2012-10-17\"\n            }\n        )\n      + region  = (known after apply)\n      + request_payer = (known after apply)\n      + website_domain= (known after apply)\n      + website_endpoint = (known after apply)\n\n      + versioning {\n          + enabled = (known after apply)\n          + mfa_delete = (known after apply)\n        }\n\n      + website {\n          + index_document = \"index.html\"\n        }\n    }\n\nPlan: 1 to add, 0 to change, 0 to destroy.\n\nDo you want to perform these actions?\n  Terraform will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n\n  Enter a value: yes\n\nmodule.s3.aws_s3_bucket.www: Creating...\nmodule.s3.aws_s3_bucket.www: Creation complete after 7s [www.devops4all.dev]\n\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\n```", "```py\n$ cat modules/acm/main.tf\nresource \"aws_acm_certificate\" \"certificate\" {\n  domain_name = \"*.${var.domain_name}\"\n  validation_method = \"DNS\"\n  subject_alternative_names = [\"*.${var.domain_name}\"]\n}\n\n$ cat modules/acm/variables.tf\nvariable \"domain_name\" {\n}\n\n$ cat modules/acm/outputs.tf\noutput \"certificate_arn\" {\n  value = \"${aws_acm_certificate.certificate.arn}\"\n}\n```", "```py\n$ cat main.tf\nprovider \"aws\" {\n  region = \"${var.aws_region}\"\n}\n\nmodule \"s3\" {\n  source = \"./modules/s3\"\n  domain_name = \"${var.domain_name}\"\n}\n\nmodule \"acm\" {\n  source = \"./modules/acm\"\n  domain_name = \"${var.domain_name}\"\n}\n```", "```py\n$ cat modules/cloudfront/main.tf\nresource \"aws_cloudfront_distribution\" \"www_distribution\" {\n  origin {\n    custom_origin_config {\n      // These are all the defaults.\n      http_port= \"80\"\n      https_port  = \"443\"\n      origin_protocol_policy = \"http-only\"\n      origin_ssl_protocols= [\"TLSv1\", \"TLSv1.1\", \"TLSv1.2\"]\n    }\n\n    domain_name = \"${var.s3_www_website_endpoint}\"\n    origin_id= \"www.${var.domain_name}\"\n  }\n\n  enabled  = true\n  default_root_object = \"index.html\"\n\n  default_cache_behavior {\n    viewer_protocol_policy = \"redirect-to-https\"\n    compress = true\n    allowed_methods= [\"GET\", \"HEAD\"]\n    cached_methods = [\"GET\", \"HEAD\"]\n    target_origin_id = \"www.${var.domain_name}\"\n    min_ttl  = 0\n    default_ttl = 86400\n    max_ttl  = 31536000\n\n    forwarded_values {\n      query_string = false\n      cookies {\n        forward = \"none\"\n      }\n    }\n  }\n\n  aliases = [\"www.${var.domain_name}\"]\n\n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn = \"${var.acm_certificate_arn}\"\n    ssl_support_method  = \"sni-only\"\n  }\n}\n\n$ cat modules/cloudfront/variables.tf\nvariable \"domain_name\" {}\nvariable \"acm_certificate_arn\" {}\nvariable \"s3_www_website_endpoint\" {}\n\n$ cat modules/cloudfront/outputs.tf\noutput \"domain_name\" {\n  value = \"${aws_cloudfront_distribution.www_distribution.domain_name}\"\n}\n\noutput \"hosted_zone_id\" {\n  value = \"${aws_cloudfront_distribution.www_distribution.hosted_zone_id}\"\n}\n```", "```py\n$ cat main.tf\nprovider \"aws\" {\n  region = \"${var.aws_region}\"\n}\n\nmodule \"s3\" {\n  source = \"./modules/s3\"\n  domain_name = \"${var.domain_name}\"\n}\n\nmodule \"acm\" {\n  source = \"./modules/acm\"\n  domain_name = \"${var.domain_name}\"\n}\n\nmodule \"cloudfront\" {\n  source = \"./modules/cloudfront\"\n  domain_name = \"${var.domain_name}\"\n  s3_www_website_endpoint = \"${module.s3.s3_www_website_endpoint}\"\n  acm_certificate_arn = \"${module.acm.certificate_arn}\"\n}\n```", "```py\n$ cat modules/route53/main.tf\nresource \"aws_route53_record\" \"www\" {\n  zone_id = \"${var.zone_id}\"\n  name = \"www.${var.domain_name}\"\n  type = \"A\"\n\n  alias {\n    name  = \"${var.cloudfront_domain_name}\"\n    zone_id  = \"${var.cloudfront_zone_id}\"\n    evaluate_target_health = false\n  }\n}\n\n$ cat modules/route53/variables.tf\nvariable \"domain_name\" {}\nvariable \"zone_id\" {}\nvariable \"cloudfront_domain_name\" {}\nvariable \"cloudfront_zone_id\" {}\n```", "```py\n$ cat main.tf\nprovider \"aws\" {\n  region = \"${var.aws_region}\"\n}\n\nmodule \"s3\" {\n  source = \"./modules/s3\"\n  domain_name = \"${var.domain_name}\"\n}\n\nmodule \"acm\" {\n  source = \"./modules/acm\"\n  domain_name = \"${var.domain_name}\"\n}\n\nmodule \"cloudfront\" {\n  source = \"./modules/cloudfront\"\n  domain_name = \"${var.domain_name}\"\n  s3_www_website_endpoint = \"${module.s3.s3_www_website_endpoint}\"\n  acm_certificate_arn = \"${module.acm.certificate_arn}\"\n}\n\nmodule \"route53\" {\n  source = \"./modules/route53\"\n  domain_name = \"${var.domain_name}\"\n  zone_id = \"${var.zone_id}\"\n  cloudfront_domain_name = \"${module.cloudfront.domain_name}\"\n  cloudfront_zone_id = \"${module.cloudfront.hosted_zone_id}\"\n}\n\n$ cat variables.tf\nvariable \"aws_region\" {\n  default = \"us-east-1\"\n}\n\nvariable \"domain_name\" {\n  default = \"devops4all.dev\"\n}\n\nvariable \"zone_id\" {\n  default = \"ZWX18ZIVHAA5O\"\n}\n```", "```py\n$ echo $AWS_PROFILE\ngheorghiu-net\n$ aws s3 cp static_files/index.html s3://www.devops4all.dev/index.html\nupload: static_files/index.html to s3://www.devops4all.dev/index.html\n$ aws s3 cp static_files/devops4all.jpg s3://www.devops4all.dev/devops4all.jpg\nupload: static_files/devops4all.jpg to s3://www.devops4all.dev/devops4all.jpg\n```", "```py\n$ pulumi login\nLogged into pulumi.com as griggheo (https://app.pulumi.com/griggheo)\n```", "```py\n$ mkdir proj1\n$ cd proj1\n$ pulumi new\nPlease choose a template: aws-python        A minimal AWS Python Pulumi program\nThis command will walk you through creating a new Pulumi project.\n\nEnter a value or leave blank to accept the (default), and press <ENTER>.\nPress ^C at any time to quit.\n\nproject name: (proj1)\nproject description: (A minimal AWS Python Pulumi program)\nCreated project 'proj1'\n\nstack name: (dev) staging\nCreated stack 'staging'\n\naws:region: The AWS region to deploy into: (us-east-1)\nSaved config\n\nYour new project is ready to go!\nTo perform an initial deployment, run the following commands:\n\n   1\\. virtualenv -p python3 venv\n   2\\. source venv/bin/activate\n   3\\. pip3 install -r requirements.txt\n\nThen, run 'pulumi up'\n```", "```py\n$ ls -la\ntotal 40\ndrwxr-xr-x   7 ggheo  staff  224 Jun 13 21:43 .\ndrwxr-xr-x  11 ggheo  staff  352 Jun 13 21:42 ..\n-rw-------   1 ggheo  staff   12 Jun 13 21:43 .gitignore\n-rw-r--r--   1 ggheo  staff   32 Jun 13 21:43 Pulumi.staging.yaml\n-rw-------   1 ggheo  staff   77 Jun 13 21:43 Pulumi.yaml\n-rw-------   1 ggheo  staff  184 Jun 13 21:43 __main__.py\n-rw-------   1 ggheo  staff   34 Jun 13 21:43 requirements.txt\n```", "```py\n$ pip3 install virtualenv\n$ virtualenv -p python3 venv\n$ source venv/bin/activate\n(venv) pip3 install -r requirements.txt\n```", "```py\n(venv) export AWS_PROFILE=gheorghiu-net\n```", "```py\n$ cat __main__.py\nimport pulumi\nfrom pulumi_aws import s3\n\n# Create an AWS resource (S3 Bucket)\nbucket = s3.Bucket('my-bucket')\n\n# Export the name of the bucket\npulumi.export('bucket_name',  bucket.id)\n```", "```py\n$ cat __main__.py\nimport json\nimport mimetypes\nimport os\n\nfrom pulumi import export, FileAsset\nfrom pulumi_aws import s3\n\nweb_bucket = s3.Bucket('s3-website-bucket', website={\n    \"index_document\": \"index.html\"\n})\n\ncontent_dir = \"www\"\nfor file in os.listdir(content_dir):\n    filepath = os.path.join(content_dir, file)\n    mime_type, _ = mimetypes.guess_type(filepath)\n    obj = s3.BucketObject(file,\n        bucket=web_bucket.id,\n        source=FileAsset(filepath),\n        content_type=mime_type)\n\ndef public_read_policy_for_bucket(bucket_name):\n    return json.dumps({\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [{\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": [\n                \"s3:GetObject\"\n            ],\n            \"Resource\": [\n                f\"arn:aws:s3:::{bucket_name}/*\",\n            ]\n        }]\n    })\n\nbucket_name = web_bucket.id\nbucket_policy = s3.BucketPolicy(\"bucket-policy\",\n    bucket=bucket_name,\n    policy=bucket_name.apply(public_read_policy_for_bucket))\n\n# Export the name of the bucket\nexport('bucket_name',  web_bucket.id)\nexport('website_url', web_bucket.website_endpoint)\n```", "```py\n(venv) pulumi up\nPreviewing update (staging):\n\n     Type                    Name               Plan\n +   pulumi:pulumi:Stack     proj1-staging      create\n +   ├─ aws:s3:Bucket        s3-website-bucket  create\n +   ├─ aws:s3:BucketObject  favicon.png        create\n +   ├─ aws:s3:BucketPolicy  bucket-policy      create\n +   ├─ aws:s3:BucketObject  python.png         create\n +   └─ aws:s3:BucketObject  index.html         create\n\nResources:\n    + 6 to create\n\nDo you want to perform this update? yes\nUpdating (staging):\n\n     Type                    Name               Status\n +   pulumi:pulumi:Stack     proj1-staging      created\n +   ├─ aws:s3:Bucket        s3-website-bucket  created\n +   ├─ aws:s3:BucketObject  index.html         created\n +   ├─ aws:s3:BucketObject  python.png         created\n +   ├─ aws:s3:BucketObject  favicon.png        created\n +   └─ aws:s3:BucketPolicy  bucket-policy      created\n\nOutputs:\n    bucket_name: \"s3-website-bucket-8e08f8f\"\n    website_url: \"s3-website-bucket-8e08f8f.s3-website-us-east-1.amazonaws.com\"\n\nResources:\n    + 6 created\n\nDuration: 14s\n```", "```py\n(venv) pulumi stack ls\nNAME      LAST UPDATE    RESOURCE COUNT  URL\nstaging*  2 minutes ago  7        https://app.pulumi.com/griggheo/proj1/staging\n\n(venv) pulumi stack\nCurrent stack is staging:\n    Owner: griggheo\n    Last updated: 3 minutes ago (2019-06-13 22:05:38.088773 -0700 PDT)\n    Pulumi version: v0.17.16\nCurrent stack resources (7):\n    TYPE                              NAME\n    pulumi:pulumi:Stack               proj1-staging\n    pulumi:providers:aws              default\n    aws:s3/bucket:Bucket              s3-website-bucket\n    aws:s3/bucketPolicy:BucketPolicy  bucket-policy\n    aws:s3/bucketObject:BucketObject  index.html\n    aws:s3/bucketObject:BucketObject  favicon.png\n    aws:s3/bucketObject:BucketObject  python.png\n```", "```py\n(venv) pulumi stack output\nCurrent stack outputs (2):\n    OUTPUT       VALUE\n    bucket_name  s3-website-bucket-8e08f8f\n    website_url  s3-website-bucket-8e08f8f.s3-website-us-east-1.amazonaws.com\n```", "```py\n(venv) mv www www-staging\n(venv) pulumi config set local_webdir www-staging\n(venv) pulumi config set domain_name staging.devops4all.dev\n```", "```py\n(venv) pulumi config\nKEY           VALUE\naws:region    us-east-1\ndomain_name   staging.devops4all.dev\nlocal_webdir  www-staging\n```", "```py\nimport pulumi\n\nconfig = pulumi.Config('proj1')  # proj1 is project name defined in Pulumi.yaml\n\ncontent_dir = config.require('local_webdir')\ndomain_name = config.require('domain_name')\n```", "```py\nconst certificate = new aws.acm.Certificate(\"certificate\", {\n    domainName: config.targetDomain,\n    validationMethod: \"DNS\",\n}, { provider: eastRegion });\n```", "```py\nfrom pulumi_aws import acm\n\ncert = acm.Certificate('certificate', domain_name=domain_name,\n    validation_method='DNS')\n```", "```py\nfrom pulumi_aws import route53\n\ndomain_name = config.require('domain_name')\n\n# Split a domain name into its subdomain and parent domain names.\n# e.g. \"www.example.com\" => \"www\", \"example.com\".\ndef get_domain_and_subdomain(domain):\n  names = domain.split(\".\")\n  if len(names) < 3:\n    return('', domain)\n  subdomain = names[0]\n  parent_domain = \".\".join(names[1:])\n  return (subdomain, parent_domain)\n\n(subdomain, parent_domain) = get_domain_and_subdomain(domain_name)\nzone = route53.Zone(\"route53_zone\", name=parent_domain)\n```", "```py\n    const certificateValidationDomain = new aws.route53.Record(\n        `${config.targetDomain}-validation`, {\n        name: certificate.domainValidationOptions[0].resourceRecordName,\n        zoneId: hostedZoneId,\n        type: certificate.domainValidationOptions[0].resourceRecordType,\n        records: [certificate.domainValidationOptions[0].resourceRecordValue],\n        ttl: tenMinutes,\n    });\n```", "```py\ncert = acm.Certificate('certificate',\n    domain_name=domain_name, validation_method='DNS')\n\ndomain_validation_options = cert.domain_validation_options[0]\n\ncert_validation_record = route53.Record(\n  'cert-validation-record',\n  name=domain_validation_options.resource_record_name,\n  zone_id=zone.id,\n  type=domain_validation_options.resource_record_type,\n  records=[domain_validation_options.resource_record_value],\n  ttl=600)\n```", "```py\nAttributeError: 'dict' object has no attribute 'resource_record_name'\n```", "```py\nexport('domain_validation_options', domain_validation_options)\n```", "```py\n+ domain_validation_options: {\n  + domain_name        : \"staging.devops4all.dev\"\n  + resourceRecordName : \"_c5f82e0f032d0f4f6c7de17fc2c.staging.devops4all.dev.\"\n  + resourceRecordType : \"CNAME\"\n  + resourceRecordValue: \"_08e3d475bf3aeda0c98.ltfvzjuylp.acm-validations.aws.\"\n    }\n```", "```py\ncert_validation_record = route53.Record(\n  'cert-validation-record',\n  name=domain_validation_options['resourceRecordName'],\n  zone_id=zone.id,\n  type=domain_validation_options['resourceRecordType'],\n  records=[domain_validation_options['resourceRecordValue']],\n  ttl=600)\n```", "```py\ncert_validation_completion = acm.CertificateValidation(\n        'cert-validation-completion',\n        certificate_arn=cert.arn,\n        validation_record_fqdns=[cert_validation_dns_record.fqdn])\n\ncert_arn = cert_validation_completion.certificate_arn\n```", "```py\nlog_bucket = s3.Bucket('cdn-log-bucket', acl='private')\n\ncloudfront_distro = cloudfront.Distribution ( 'cloudfront-distro',\n    enabled=True,\n    aliases=[ domain_name ],\n    origins=[\n        {\n          'originId': web_bucket.arn,\n          'domainName': web_bucket.website_endpoint,\n          'customOriginConfig': {\n              'originProtocolPolicy': \"http-only\",\n              'httpPort': 80,\n              'httpsPort': 443,\n              'originSslProtocols': [\"TLSv1.2\"],\n            },\n        },\n    ],\n\n    default_root_object=\"index.html\",\n    default_cache_behavior={\n        'targetOriginId': web_bucket.arn,\n\n        'viewerProtocolPolicy': \"redirect-to-https\",\n        'allowedMethods': [\"GET\", \"HEAD\", \"OPTIONS\"],\n        'cachedMethods': [\"GET\", \"HEAD\", \"OPTIONS\"],\n\n        'forwardedValues': {\n            'cookies': { 'forward': \"none\" },\n            'queryString': False,\n        },\n\n        'minTtl': 0,\n        'defaultTtl': 600,\n        'maxTtl': 600,\n    },\n    price_class=\"PriceClass_100\",\n    custom_error_responses=[\n        { 'errorCode': 404, 'responseCode': 404,\n          'responsePagePath': \"/404.html\" },\n    ],\n\n    restrictions={\n        'geoRestriction': {\n            'restrictionType': \"none\",\n        },\n    },\n    viewer_certificate={\n        'acmCertificateArn': cert_arn,\n        'sslSupportMethod': \"sni-only\",\n    },\n    logging_config={\n        'bucket': log_bucket.bucket_domain_name,\n        'includeCookies': False,\n        'prefix': domain_name,\n    })\n```", "```py\nsite_dns_record = route53.Record(\n        'site-dns-record',\n        name=subdomain,\n        zone_id=zone.id,\n        type=\"A\",\n        aliases=[\n        {\n            'name': cloudfront_distro.domain_name,\n            'zoneId': cloudfront_distro.hosted_zone_id,\n            'evaluateTargetHealth': True\n        }\n    ])\n```", "```py\n(venv) pulumi stack init\nPlease enter your desired stack name: prod\nCreated stack 'prod'\n```", "```py\n(venv) pulumi stack ls\nNAME     LAST UPDATE     RESOURCE COUNT  URL\nprod*    n/a             n/a      https://app.pulumi.com/griggheo/proj1/prod\nstaging  14 minutes ago  14       https://app.pulumi.com/griggheo/proj1/staging\n```", "```py\n(venv) pulumi config set aws:region us-east-1\n(venv) pulumi config set local_webdir www-prod\n(venv) pulumi config set domain_name www.devops4all.dev\n(venv) pulumi config set dns_zone_id Z2FTL2X8M0EBTW\n```", "```py\n(venv) pulumi up\nPreviewing update (prod):\n\n     Type                            Name               Plan\n     pulumi:pulumi:Stack             proj1-prod\n +   ├─ aws:cloudfront:Distribution  cloudfront-distro  create\n +   └─ aws:route53:Record           site-dns-record    create\n\nResources:\n    + 2 to create\n    10 unchanged\n\nDo you want to perform this update? yes\nUpdating (prod):\n\n     Type                            Name               Status\n     pulumi:pulumi:Stack             proj1-prod\n +   ├─ aws:cloudfront:Distribution  cloudfront-distro  created\n +   └─ aws:route53:Record           site-dns-record    created\n\nOutputs:\n+ cloudfront_domain: \"d3uhgbdw67nmlc.cloudfront.net\"\n+ log_bucket_id    : \"cdn-log-bucket-53d8ea3\"\n+ web_bucket_id    : \"s3-website-bucket-cde\"\n+ website_url      : \"s3-website-bucket-cde.s3-website-us-east-1.amazonaws.com\"\n\nResources:\n    + 2 created\n    10 unchanged\n\nDuration: 18m54s\n```", "```py\n(venv) pulumi up\nPreviewing update (prod):\n\n     Type                    Name        Plan       Info\n     pulumi:pulumi:Stack     proj1-prod\n ~   └─ aws:s3:BucketObject  index.html  update     [diff: ~source]\n\nResources:\n    ~ 1 to update\n    11 unchanged\n\nDo you want to perform this update? yes\nUpdating (prod):\n\n     Type                    Name        Status      Info\n     pulumi:pulumi:Stack     proj1-prod\n ~   └─ aws:s3:BucketObject  index.html  updated     [diff: ~source]\n\nOutputs:\ncloudfront_domain: \"d3uhgbdw67nmlc.cloudfront.net\"\nlog_bucket_id    : \"cdn-log-bucket-53d8ea3\"\nweb_bucket_id    : \"s3-website-bucket-cde\"\nwebsite_url      : \"s3-website-bucket-cde.s3-website-us-east-1.amazonaws.com\"\n\nResources:\n    ~ 1 updated\n    11 unchanged\n\nDuration: 4s\n```"]