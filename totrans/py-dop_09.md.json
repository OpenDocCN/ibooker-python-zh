["```py\nfrom  random import choices\n\nhours = list(range(1,25))\nstatus = [\"Alert\", \"No Alert\"]\nfor hour in hours:\n    print(f\"Hour: {hour} -- {choices(status)}\"\n```", "```py\n✗ python random_alert.py\nHour: 1 -- ['No Alert']\nHour: 2 -- ['No Alert']\nHour: 3 -- ['Alert']\nHour: 4 -- ['No Alert']\nHour: 5 -- ['Alert']\nHour: 6 -- ['Alert']\nHour: 7 -- ['Alert']\nHour: 8 -- ['No Alert']\nHour: 9 -- ['Alert']\nHour: 10 -- ['Alert']\nHour: 11 -- ['No Alert']\nHour: 12 -- ['Alert']\nHour: 13 -- ['No Alert']\nHour: 14 -- ['No Alert']\nHour: 15 -- ['No Alert']\nHour: 16 -- ['Alert']\nHour: 17 -- ['Alert']\nHour: 18 -- ['Alert']\nHour: 19 -- ['Alert']\nHour: 20 -- ['No Alert']\nHour: 21 -- ['Alert']\nHour: 22 -- ['Alert']\nHour: 23 -- ['No Alert']\nHour: 24 -- ['Alert']\n```", "```py\nimport json\nimport wikipedia\n\nprint('Loading function')\n\ndef lambda_handler(event, context):\n    \"\"\"Wikipedia Summarizer\"\"\"\n\n    entity = event[\"entity\"]\n    res = wikipedia.summary(entity, sentences=1)\n    print(f\"Response from wikipedia API: {res}\")\n    response = {\n    \"statusCode\": \"200\",\n    \"headers\": { \"Content-type\": \"application/json\" },\n    \"body\": json.dumps({\"message\": res})\n    }\n    return response\n```", "```py\n{\"entity\":\"google\"}\n```", "```py\nResponse\n{\n    \"statusCode\": \"200\",\n    \"headers\": {\n        \"Content-type\": \"application/json\"\n    },\n    \"body\": \"{\\\"message\\\": \\\"Google LLC is an American multinational technology\"}\n}\n```", "```py\nout = subprocess.run([\"ls\", \"-l\"], capture_output=True)\n```", "```py\nsubprocess.run[\"ls\", \"-la\"]\n```", "```py\n#AVOID THIS\nsubprocess.run(\"ls -la\", shell=True)\n```", "```py\n#This is input by a malicious user and causes permanent data loss\nuser_input = 'some_dir && rm -rf /some/important/directory'\nmy_command = \"ls -l \" + user_input\nsubprocess.run(my_command, shell=True)\n```", "```py\n#This is input by a malicious user and does nothing\nuser_input = 'some_dir && rm -rf /some/important/directory'\nsubprocess.run([\"ls\", \"-l\", user_input])\n```", "```py\nIn [1]: subprocess.run([\"sleep\", \"3\"], timeout=4)\nOut[1]: CompletedProcess(args=['sleep', '3'], returncode=0)\n```", "```py\n----> 1 subprocess.run([\"sleep\", \"3\"], timeout=1)\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py\n in run(input, capture_output, timeout, check, *popenargs, **kwargs)\n    477             stdout, stderr = process.communicate()\n    478             raise TimeoutExpired(process.args, timeout, output=stdout,\n--> 479                                  stderr=stderr)\n    480       except:  # Including KeyboardInterrupt, communicate handled that.\n    481             process.kill()\n\nTimeoutExpired: Command '['sleep', '3']' timed out after 1 seconds\n```", "```py\nimport logging\nimport subprocess\n\ntry:\n    subprocess.run([\"sleep\", \"3\"], timeout=4)\nexcept subprocess.TimeoutExpired:\n    logging.exception(\"Sleep command timed out\")\n```", "```py\nfrom sklearn.datasets.samples_generator import make_blobs\nfrom sklearn.cluster import KMeans\nimport time\n\ndef do_kmeans():\n    \"\"\"KMeans clustering on generated data\"\"\"\n\n    X,_ = make_blobs(n_samples=100000, centers=3, n_features=10,\n                random_state=0)\n    kmeans = KMeans(n_clusters=3)\n    t0 = time.time()\n    kmeans.fit(X)\n    print(f\"KMeans cluster fit in {time.time()-t0}\")\n\ndef main():\n    \"\"\"Run Everything\"\"\"\n\n    count = 10\n    t0 = time.time()\n    for _ in range(count):\n        do_kmeans()\n    print(f\"Performed {count} KMeans in total time: {time.time()-t0}\")\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\n(.python-devops) ➜  python kmeans_sequential.py\nKMeans cluster fit in 0.29854321479797363\nKMeans cluster fit in 0.2869119644165039\nKMeans cluster fit in 0.2811620235443115\nKMeans cluster fit in 0.28687286376953125\nKMeans cluster fit in 0.2845759391784668\nKMeans cluster fit in 0.2866239547729492\nKMeans cluster fit in 0.2843656539916992\nKMeans cluster fit in 0.2885470390319824\nKMeans cluster fit in 0.2878849506378174\nKMeans cluster fit in 0.28443288803100586\nPerformed 10 KMeans in total time: 3.510640859603882\n```", "```py\nfrom multiprocessing import Pool\nfrom sklearn.datasets.samples_generator import make_blobs\nfrom sklearn.cluster import KMeans\nimport time\n\ndef do_kmeans(n_samples):\n    \"\"\"KMeans clustering on generated data\"\"\"\n\n    X,_ = make_blobs(n_samples, centers=3, n_features=10,\n                random_state=0)\n    kmeans = KMeans(n_clusters=3)\n    t0 = time.time()\n    kmeans.fit(X)\n    print(f\"KMeans cluster fit in {time.time()-t0}\")\n\ndef main():\n    \"\"\"Run Everything\"\"\"\n\n    count = 10\n    t0 = time.time()\n    with Pool(count) as p:\n        p.map(do_kmeans, [100000,100000,100000,100000,100000,\n                    100000,100000,100000,100000,100000])\n\n    print(f\"Performed {count} KMeans in total time: {time.time()-t0}\")\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\n(.python-devops) ➜ python kmeans_multiprocessing.py\nKMeans cluster fit in 1.3836050033569336\nKMeans cluster fit in 1.3868029117584229\nKMeans cluster fit in 1.3955950736999512\nKMeans cluster fit in 1.3925609588623047\nKMeans cluster fit in 1.3877739906311035\nKMeans cluster fit in 1.4068050384521484\nKMeans cluster fit in 1.41087007522583\nKMeans cluster fit in 1.3935530185699463\nKMeans cluster fit in 1.4161033630371094\nKMeans cluster fit in 1.4132652282714844\nPerformed 10 KMeans in total time: 1.6691410541534424\n```", "```py\nimport numpy as np\nfrom numba import jit\n\n@jit(nopython=True)\ndef go_fast(a):\n    \"\"\"Expects Numpy Array\"\"\"\n\n    count = 0\n    for i in range(a.shape[0]):\n        count += np.tanh(a[i, i])\n    return count + trace\n```", "```py\nx = np.arange(100).reshape(10, 10)\n%timeit go_fast(x)\n```", "```py\nThe slowest run took 33.43 times longer than the fastest. This example could mean\nthat an intermediate result is cached. 1000000 loops, best of 3: 855 ns per loop\n```", "```py\n%timeit go_fast.py_func(x)\n```", "```py\nThe slowest run took 4.15 times longer than the fastest. This result could mean\nthat an intermediate run is cached. 10000 loops, best of 3: 20.5 µs per loop\n```"]