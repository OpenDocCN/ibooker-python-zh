["```py\ndef create_hot_dog():\n    bun = dispense_bun()\n    frank = dispense_frank()\n    hot_dog = bun.add_frank(frank)\n    ketchup = dispense_ketchup()\n    mustard = dispense_mustard()\n    hot_dog.add_condiments(ketchup, mustard)\n    dispense_hot_dog_to_customer(hot_dog)\n```", "```py\nTraceback (most recent call last):\n File \"<stdin>\", line 4, in <module>\nAttributeError: 'NoneType' object has no attribute 'add_frank'\n\nTraceback (most recent call last):\n File \"<stdin>\", line 7, in <module>\nAttributeError: 'NoneType' object has no attribute 'add_condiments'\n```", "```py\ndef create_hot_dog():\n    bun = dispense_bun()\n    if bun is None:\n        print_error_code(\"Bun unavailable. Check for bun\")\n        return\n\n    frank = dispense_frank()\n    if frank is None:\n        print_error_code(\"Frank was not properly dispensed\")\n        return\n\n    hot_dog = bun.add_frank(frank)\n    if hot_dog is None:\n        print_error_code(\"Hot Dog unavailable. Check for Hot Dog\")\n        return\n\n    ketchup = dispense_ketchup()\n    mustard = dispense_mustard()\n    if ketchup is None or mustard is None:\n        print_error_code(\"Check for invalid catsup\")\n        return\n\n    hot_dog.add_condiments(ketchup, mustard)\n    dispense_hot_dog_to_customer(hot_dog)\n```", "```py\nfrom typing import Optional\nmaybe_a_string: Optional[str] = \"abcdef\" # This has a value\nmaybe_a_string: Optional[str] = None     # This is the absence of a value\n```", "```py\ndef dispense_bun() -> Optional[Bun]:\n# ...\n```", "```py\ndef dispense_bun() -> Bun:\n    return Bun('Wheat')\n```", "```py\ndef dispense_bun() -> Bun:\n    if not are_buns_available():\n        return None\n    return Bun('Wheat')\n```", "```py\ncode_examples/chapter4/invalid/dispense_bun.py:12:\n    error: Incompatible return value type (got \"None\", expected \"Bun\")\n```", "```py\ndef create_hot_dog():\n    bun = dispense_bun()\n    frank = dispense_frank()\n    hot_dog = bun.add_frank(frank)\n    ketchup = dispense_ketchup()\n    mustard = dispense_mustard()\n    hot_dog.add_condiments(ketchup, mustard)\n    dispense_hot_dog_to_customer(hot_dog)\n```", "```py\ncode_examples/chapter4/invalid/hotdog_invalid.py:27:\n    error: Item \"None\" of \"Optional[Bun]\" has no attribute \"add_frank\"\n```", "```py\ndef create_hot_dog():\n    bun = dispense_bun()\n    if bun is None:\n        print_error_code(\"Bun could not be dispensed\")\n        return\n\n    frank = dispense_frank()\n    hot_dog = bun.add_frank(frank)\n    ketchup = dispense_ketchup()\n    mustard = dispense_mustard()\n    hot_dog.add_condiments(ketchup, mustard)\n    dispense_hot_dog_to_customer(hot_dog)\n```", "```py\ndef dispense_snack() -> HotDog:\n    if not are_ingredients_available():\n        raise RuntimeError(\"Not all ingredients available\")\n    if order_interrupted():\n        raise RuntimeError(\"Order interrupted\")\n    return create_hot_dog()\n```", "```py\nfrom typing import Union\ndef dispense_snack(user_input: str) -> Union[HotDog, Pretzel]:\n    if user_input == \"Hot Dog\":\n        return dispense_hot_dog()\n    elif user_input == \"Pretzel\":\n        return dispense_pretzel()\n    raise RuntimeError(\"Should never reach this code,\"\n                       \"as an invalid input has been entered\")\n```", "```py\nfrom typing import Union\ndef place_order() -> Optional[HotDog]:\n    order = get_order()\n    result = dispense_snack(order.name)\n    if result is None\n        print_error_code(\"An error occurred\" + result)\n        return None\n    # Return our HotDog\n    return result\n```", "```py\ncode_examples/chapter4/invalid/union_hotdog.py:22:\n    error: Incompatible return value type (got \"Union[HotDog, Pretzel]\",\n                                           expected \"Optional[HotDog]\")\n```", "```py\nfrom dataclasses import dataclass\n# If you aren't familiar with data classes, you'll learn more in chapter 10\n# but for now, treat this as four fields grouped together and what types they are\n@dataclass\nclass Snack:\n    name: str\n    condiments: set[str]\n    error_code: int\n    disposed_of: bool\n\nSnack(\"Hotdog\", {\"Mustard\", \"Ketchup\"}, 5, False)\n```", "```py\ndef serve(snack):\n    # if something went wrong, return early\n    if snack.disposed_of:\n        return\n    # ...\n```", "```py\nfrom dataclasses import dataclass\nfrom typing import Union\n@dataclass\nclass Error:\n    error_code: int\n    disposed_of: bool\n\n@dataclass\nclass Snack:\n    name: str\n    condiments: set[str]\n\nsnack: Union[Snack, Error] = Snack(\"Hotdog\", {\"Mustard\", \"Ketchup\"})\n\nsnack = Error(5, True)\n```", "```py\nfrom typing import Literal\n@dataclass\nclass Error:\n    error_code: Literal[1,2,3,4,5]\n    disposed_of: bool\n\n@dataclass\nclass Snack:\n    name: Literal[\"Pretzel\", \"Hot Dog\", \"Veggie Burger\"]\n    condiments: set[Literal[\"Mustard\", \"Ketchup\"]]\n```", "```py\nError(0, False)\nSnack(\"Invalid\", set())\nSnack(\"Pretzel\", {\"Mustard\", \"Relish\"})\n```", "```py\ncode_examples/chapter4/invalid/literals.py:14: error: Argument 1 to \"Error\" has\n    incompatible type \"Literal[0]\";\n                      expected \"Union[Literal[1], Literal[2], Literal[3],\n                                      Literal[4], Literal[5]]\"\n\ncode_examples/chapter4/invalid/literals.py:15: error: Argument 1 to \"Snack\" has\n    incompatible type \"Literal['Invalid']\";\n                       expected \"Union[Literal['Pretzel'], Literal['Hotdog'],\n                                       Literal['Veggie Burger']]\"\n\ncode_examples/chapter4/invalid/literals.py:16: error: Argument 2 to <set> has\n    incompatible type \"Literal['Relish']\";\n                       expected \"Union[Literal['Mustard'], Literal['Ketchup']]\"\n```", "```py\nx: Annotated[int, ValueRange(3,5)]\ny: Annotated[str, MatchesRegex('[0-9]{4}')]\n```", "```py\nclass HotDog:\n    # ... snip hot dog class implementation ...\n\ndef dispense_to_customer(hot_dog: HotDog):\n    # note, this should only accept ready-to-serve hot dogs.\n    # ...\n```", "```py\nfrom typing import NewType\n\nclass HotDog:\n    ''' Used to represent an unservable hot dog'''\n    # ... snip hot dog class implementation ...\n\nReadyToServeHotDog = NewType(\"ReadyToServeHotDog\", HotDog)\n\ndef dispense_to_customer(hot_dog: ReadyToServeHotDog):\n    # ...\n```", "```py\ncode_examples/chapter4/invalid/newtype.py:10: error:\n\tArgument 1 to \"dispense_to_customer\"\n\thas incompatible type \"HotDog\";\n\texpected \"ReadyToServeHotDog\"\n```", "```py\ndef prepare_for_serving(hot_dog: HotDog) -> ReadyToServeHotDog:\n    assert not hot_dog.is_plated(), \"Hot dog should not already be plated\"\n    hot_dog.put_on_plate()\n    hot_dog.add_napkins()\n    return ReadyToServeHotDog(hot_dog)\n```", "```py\ndef make_snack():\n    serve_to_customer(ReadyToServeHotDog(HotDog()))\n```", "```py\nfrom typing import NewType\n# NOTE: Only create ReadyToServeHotDog using prepare_for_serving method.\nReadyToServeHotDog = NewType(\"ReadyToServeHotDog\", HotDog)\n```", "```py\nVENDOR_NAME: Final = \"Viafore's Auto-Dog\"\n```", "```py\ndef display_vendor_information():\n    vendor_info = \"Auto-Dog v1.0\"\n    # whoops, copy-paste error, this code should be vendor_info += VENDOR_NAME\n    VENDOR_NAME += VENDOR_NAME\n    print(vendor_info)\n```", "```py\ncode_examples/chapter4/invalid/final.py:3: error:\n\tCannot assign to final name \"VENDOR_NAME\"\nFound 1 error in 1 file (checked 1 source file)\n```"]