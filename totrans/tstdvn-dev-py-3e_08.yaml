- en: Chapter 4\. What Are We Doing with All These Tests? (And, Refactoring)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve seen the basics of TDD in action, it’s time to pause and talk
    about why we’re doing it.
  prefs: []
  type: TYPE_NORMAL
- en: 'I’m imagining several of you, dear readers, have been holding back some seething
    frustration—​perhaps some of you have done a bit of unit testing before, and perhaps
    some of you are just in a hurry. You’ve been biting back questions like:'
  prefs: []
  type: TYPE_NORMAL
- en: Aren’t all these tests a bit excessive?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Surely some of them are redundant? There’s duplication between the functional
    tests and the unit tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Those unit tests seemed way too trivial—​testing a one-line function that returns
    a constant! Isn’t that just a waste of time? Shouldn’t we save our tests for more
    complex things?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What about all those tiny changes during the unit-test/code cycle? Couldn’t
    we just skip to the end? I mean, `home_page = None`!? Really?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You’re not telling me you *actually* code like this in real life?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ah, young grasshopper. I too was once full of questions like these. But only
    because they’re perfectly good questions. In fact, I still ask myself questions
    like these, all the time. Does all this stuff really have value? Is this a bit
    of a cargo cult?
  prefs: []
  type: TYPE_NORMAL
- en: Programming Is Like Pulling a Bucket of Water Up from a Well
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ultimately, programming is hard. Often, we are smart, so we succeed. TDD is
    there to help us out when we’re not so smart. Kent Beck (who basically invented
    TDD) uses the metaphor of lifting a bucket of water out of a well with a rope:
    when the well isn’t too deep, and the bucket isn’t very full, it’s easy. And even
    lifting a full bucket is pretty easy at first. But after a while, you’re going
    to get tired. TDD is like having a ratchet that lets you save your progress, so
    you can take a break, and make sure you never slip backwards.'
  prefs: []
  type: TYPE_NORMAL
- en: That way you don’t have to be smart *all* the time.
  prefs: []
  type: TYPE_NORMAL
- en: '![Test ALL the things](assets/twp2_0401.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-1\. Test ALL the things (original illustration source: [Allie Brosh,
    Hyperbole and a Half](http://bit.ly/1iXxdYp))'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: OK, perhaps *in general*, you’re prepared to concede that TDD is a good idea,
    but maybe you still think I’m overdoing it? Testing the tiniest thing, and taking
    ridiculously many small steps?
  prefs: []
  type: TYPE_NORMAL
- en: TDD is a *discipline*, and that means it’s not something that comes naturally;
    because many of the payoffs aren’t immediate but only come in the longer term,
    you have to force yourself to do it in the moment. That’s what the image of the
    Testing Goat is supposed to represent—​you need to be a bit bloody-minded about
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let us return to our muttons.
  prefs: []
  type: TYPE_NORMAL
- en: Using Selenium to Test User Interactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Where were we at the end of the last chapter? Let’s rerun the test and find
    out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Did you try it, and get an error saying *Problem loading page* or *Unable to
    connect*? So did I. It’s because we forgot to spin up the dev server first using
    `manage.py runserver`. Do that, and you’ll get the failure message we’re after.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: One of the great things about TDD is that you never have to worry about forgetting
    what to do next—​just rerun your tests and they will tell you what you need to
    work on.
  prefs: []
  type: TYPE_NORMAL
- en: '“Finish the test”, it says, so let’s do just that! Open up *functional_tests.py*
    and we’ll extend our FT:'
  prefs: []
  type: TYPE_NORMAL
- en: functional_tests.py (ch04l001)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_what_are_we_doing_with_all_these_tests___and__refactoring__CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re using the two methods that Selenium provides to examine web pages: `find_element`
    and `find_elements` (notice the extra `s`, which means it will return several
    elements rather than just one). Each one is parameterized with a `By.SOMETHING`
    which lets us search using different HTML properties and attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_what_are_we_doing_with_all_these_tests___and__refactoring__CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We also use `send_keys`, which is Selenium’s way of typing into input elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_what_are_we_doing_with_all_these_tests___and__refactoring__CO1-4)'
  prefs: []
  type: TYPE_NORMAL
- en: The `Keys` class (don’t forget to import it) lets us send special keys like
    Enter.^([1](ch04.xhtml#id262))
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_what_are_we_doing_with_all_these_tests___and__refactoring__CO1-5)'
  prefs: []
  type: TYPE_NORMAL
- en: When we hit Enter, the page will refresh. The `time.sleep` is there to make
    sure the browser has finished loading before we make any assertions about the
    new page. This is called an “explicit wait” (a very simple one; we’ll improve
    it in [Chapter 6](ch06.xhtml#chapter_explicit_waits_1)).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Watch out for the difference between the Selenium `find_element()` and `find_elements()`
    functions. One returns an element and raises an exception if it can’t find it,
    whereas the other returns a list, which may be empty.
  prefs: []
  type: TYPE_NORMAL
- en: Also, just look at that `any()` function. It’s a little-known Python built-in.
    I don’t even need to explain it, do I? Python is such a joy.^([2](ch04.xhtml#id263))
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you’re one of my readers who doesn’t know Python, what’s happening *inside*
    the `any()` may need some explaining. The basic syntax is that of a *list comprehension*,
    and if you haven’t learned about them, you should do so immediately! [Trey Hunner’s
    explanation is excellent.](https://www.pythonmorsels.com/what-are-list-comprehensions/)
    In point of fact, because we’re omitting the square brackets, we’re actually using
    a *generator expression* rather than a list comprehension. It’s probably less
    important to understand the difference between those two, but if you’re curious,
    check out this [blog post by Guido himself](http://python-history.blogspot.com/2010/06/from-list-comprehensions-to-generator.xhtml)
    explaining the difference.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how it gets on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Decoding that, the test is saying it can’t find an `<h1>` element on the page.
    Let’s see what we can do to add that to the HTML of our home page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Big changes to a functional test are usually a good thing to commit on their
    own. I failed to do so when I was first working out the code for this chapter,
    and I regretted it later when I changed my mind and had the change mixed up with
    a bunch of others. The more atomic your commits, the better:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The “Don’t Test Constants” Rule, and Templates to the Rescue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s take a look at our unit tests, *lists/tests.py*. Currently we’re looking
    for specific HTML strings, but that’s not a particularly efficient way of testing
    HTML. In general, one of the rules of unit testing is *Don’t test constants*,
    and testing HTML as text is a lot like testing a constant.
  prefs: []
  type: TYPE_NORMAL
- en: 'In other words, if you have some code that says:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'There’s not much point in a test that says:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Unit tests are really about testing logic, flow control, and configuration.
    Making assertions about exactly what sequence of characters we have in our HTML
    strings isn’t doing that.
  prefs: []
  type: TYPE_NORMAL
- en: It’s not *quite* that simple, since HTML is code after all, and we do want something
    to check that we’ve written code that works, but that’s our FT’s job, not the
    unit tests’.
  prefs: []
  type: TYPE_NORMAL
- en: In any case, mangling raw strings in Python really isn’t a great way of dealing
    with HTML. There’s a much better solution, which is to use templates. Quite apart
    from anything else, if we can keep HTML to one side in a file whose name ends
    in *.xhtml*, we’ll get better syntax highlighting! There are lots of Python templating
    frameworks out there, and Django has its own which works very well. Let’s use
    that.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring to Use a Template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What we want to do now is make our view function return exactly the same HTML,
    but just using a different process. That’s a refactor—​when we try to improve
    the code *without changing its functionality*.
  prefs: []
  type: TYPE_NORMAL
- en: 'That last bit is really important. If you try to add new functionality at the
    same time as refactoring, you’re much more likely to run into trouble. Refactoring
    is actually a whole discipline in itself, and it even has a reference book: Martin
    Fowler’s [*Refactoring*](http://refactoring.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first rule is that you can’t refactor without tests. Thankfully, we’re
    doing TDD, so we’re way ahead of the game. Let’s check that our tests pass; they
    will be what makes sure that our refactoring is behaviour-preserving:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Great! We’ll start by taking our HTML string and putting it into its own file.
    Create a directory called *lists/templates* to keep templates in, and then open
    a file at *lists/templates/home.xhtml*, to which we’ll transfer our HTML:^([3](ch04.xhtml#id270))
  prefs: []
  type: TYPE_NORMAL
- en: lists/templates/home.xhtml (ch04l002)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Mmmh, syntax-highlighted…​much nicer! Now to change our view function:'
  prefs: []
  type: TYPE_NORMAL
- en: lists/views.py (ch04l003)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Instead of building our own `HttpResponse`, we now use the Django `render()`
    function. It takes the request as its first parameter (for reasons we’ll go into
    later) and the name of the template to render. Django will automatically search
    folders called *templates* inside any of your apps’ directories. Then it builds
    an `HttpResponse` for you, based on the content of the template.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Templates are a very powerful feature of Django’s, and their main strength consists
    of substituting Python variables into HTML text. We’re not using this feature
    yet, but we will in future chapters. That’s why we use `render()` rather than,
    say, manually reading the file from disk with the built-in `open()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see if it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Another chance to analyse a traceback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![1](assets/1.png)](#co_what_are_we_doing_with_all_these_tests___and__refactoring__CO2-4)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start with the error: it can’t find the template.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_what_are_we_doing_with_all_these_tests___and__refactoring__CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we double-check what test is failing: sure enough, it’s our test of the
    view HTML.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_what_are_we_doing_with_all_these_tests___and__refactoring__CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we find the line in our tests that caused the failure: it’s when we request
    the root URL (“/”).'
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_what_are_we_doing_with_all_these_tests___and__refactoring__CO2-3)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we look for the part of our own application code that caused the failure:
    it’s when we try to call `render`.'
  prefs: []
  type: TYPE_NORMAL
- en: So why can’t Django find the template? It’s right where it’s supposed to be,
    in the *lists/templates* folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'The thing is that we haven’t yet *officially* registered our lists app with
    Django. Unfortunately, just running the `startapp` command and having what is
    obviously an app in your project folder isn’t quite enough. You have to tell Django
    that you *really* mean it, and add it to *settings.py* as well. Belt and braces.
    Open it up and look for a variable called `INSTALLED_APPS`, to which we’ll add
    `lists`:'
  prefs: []
  type: TYPE_NORMAL
- en: superlists/settings.py (ch04l004)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You can see there’s lots of apps already in there by default. We just need to
    add ours to the bottom of the list. Don’t forget the trailing comma—​it may not
    be required, but one day you’ll be really annoyed when you forget it and Python
    concatenates two strings on different lines…​
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can try running the tests again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Our refactor of the code is now complete, and the tests mean we’re happy that
    behaviour is preserved. Now we can change the tests so that they’re no longer
    testing constants; instead, they should just check that we’re rendering the right
    template.
  prefs: []
  type: TYPE_NORMAL
- en: Checking template rendering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Django test client has a method, `assertTemplateUsed`, which can do just
    what we want:'
  prefs: []
  type: TYPE_NORMAL
- en: lists/tests.py (ch04l005)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_what_are_we_doing_with_all_these_tests___and__refactoring__CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll leave the old tests there for now, just to make sure everything is working
    the way we think it is.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_what_are_we_doing_with_all_these_tests___and__refactoring__CO3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: '`.assertTemplateUsed` lets us check what template was used to render a response
    (NB: it will only work for responses that were retrieved by the test client).'
  prefs: []
  type: TYPE_NORMAL
- en: 'And that test will still pass:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Just because I’m always suspicious of a test I haven’t seen fail, let’s deliberately
    break it:'
  prefs: []
  type: TYPE_NORMAL
- en: lists/tests.py (ch04l006)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'That way we’ll also learn what its error messages look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'That’s very helpful! Let’s change the assert back to the right thing. While
    we’re at it, we can delete our old assertions, and give the test method a more
    specific name:'
  prefs: []
  type: TYPE_NORMAL
- en: lists/tests.py (ch04l007)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The main point, though, is that instead of testing constants we’re testing our
    implementation. Great!
  prefs: []
  type: TYPE_NORMAL
- en: On Refactoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'That was an absolutely trivial example of refactoring. But, as Kent Beck puts
    it in *Test-Driven Development: By Example*, “Am I recommending that you actually
    work this way? No. I’m recommending that you be *able* to work this way”.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, as I was writing this my first instinct was to dive in and change
    the test first—​make it use the `assertTemplateUsed` function straight away; delete
    the three superfluous assertions, leaving just a check of the contents against
    the expected render; and then go ahead and make the code change. But notice how
    that actually would have left space for me to break things: I could have defined
    the template as containing *any* arbitrary string, instead of the string with
    the right `<html>` and `<title>` tags.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When refactoring, work on either the code or the tests, but not both at once.
  prefs: []
  type: TYPE_NORMAL
- en: There’s always a tendency to skip ahead a couple of steps, to make a couple
    of tweaks to the behaviour while you’re refactoring, but pretty soon you’ve got
    changes to half a dozen different files, you’ve totally lost track of where you
    are, and nothing works any more. If you don’t want to end up like [Refactoring
    Cat](http://bit.ly/1iXyRt4) ([Figure 4-2](#RefactoringCat)), stick to small steps;
    keep refactoring and functionality changes entirely separate.
  prefs: []
  type: TYPE_NORMAL
- en: '![An adventurous cat, trying to refactor its way out of a slippery bathtub](assets/twp2_0402.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-2\. Refactoring Cat—​be sure to look up the full animated GIF (source:
    4GIFs.com)'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We’ll come across “Refactoring Cat” again during this book, as an example of
    what happens when we get carried away and want to change too many things at once.
    Think of it as the little cartoon demon counterpart to the Testing Goat, popping
    up over your other shoulder and giving you bad advice.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s a good idea to do a commit after any refactoring:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: A Little More of Our Front Page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the meantime, our functional test is still failing. Let’s now make an actual
    code change to get it passing. Because our HTML is now in a template, we can feel
    free to make changes to it, without needing to write any extra unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This is another distinction between FTs and unit tests; Because the FTs use
    a real web browser, we use them as the primary tool for testing our UI, and the
    HTML that implements it.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, wanted an `<h1>`:'
  prefs: []
  type: TYPE_NORMAL
- en: lists/templates/home.xhtml (ch04l008)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s see if our functional test likes it a little better:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'OK, let’s add an input with that ID:'
  prefs: []
  type: TYPE_NORMAL
- en: lists/templates/home.xhtml (ch04l009)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: And now what does the FT say?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We add our placeholder text…​
  prefs: []
  type: TYPE_NORMAL
- en: lists/templates/home.xhtml (ch04l010)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Which gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'So we can go ahead and put the table onto the page. At this stage it’ll just
    be empty:'
  prefs: []
  type: TYPE_NORMAL
- en: lists/templates/home.xhtml (ch04l011)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: What does the FT think?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Slightly cryptic! We can use the line number to track it down, and it turns
    out it’s that `any()` function I was so smug about earlier—​or, more precisely,
    the `assertTrue`, which doesn’t have a very explicit failure message. We can pass
    a custom error message as an argument to most `assertX` methods in `unittest`:'
  prefs: []
  type: TYPE_NORMAL
- en: functional_tests.py (ch04l012)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run the FT again, you should see our helpful message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: But now, to get this to pass, we will need to actually process the user’s form
    submission. And that’s a topic for the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now let’s do a commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Thanks to a bit of refactoring, we’ve got our view set up to render a template,
    we’ve stopped testing constants, and we’re now well placed to start processing
    user input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recap: The TDD Process'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ve now seen all the main aspects of the TDD process, in practice:'
  prefs: []
  type: TYPE_NORMAL
- en: Functional tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The unit-test/code cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s time for a little recap, and perhaps even some flowcharts (forgive me,
    my years misspent as a management consultant have ruined me. On the plus side,
    said flowcharts will feature recursion!)
  prefs: []
  type: TYPE_NORMAL
- en: What does the overall TDD process look like?
  prefs: []
  type: TYPE_NORMAL
- en: We write a test.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We run the test and see it fail.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We write some minimal code to get it a little further.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We rerun the test and repeat until it passes (the unit test / code cycle)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we look for opportunities to refactor our code, using our tests to make
    sure we don’t break anything.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And start again from the top!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See [Figure 4-3](#simple-tdd-diagram).
  prefs: []
  type: TYPE_NORMAL
- en: '![A flowchart with boxes for tests, coding and refactoring, with yes/no labels
    showing when we move forwards or backwards](assets/tdd-process-unit-tests-only-excalidraw.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-3\. TDD process as a flowchart, including the unit test / code cycle
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: It’s very common to talk about this process using the three words *Red, Green,
    Refactor*. See [Figure 4-4](#red-green-refactor).
  prefs: []
  type: TYPE_NORMAL
- en: '![Red, Green and Refactor as three nodes in a circle, with arrows flowing around.](assets/red-green-refactor-excalidraw.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-4\. Red, Green, Refactor
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We write a test, and see it fail (“Red”).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We cycle between code and tests until the test passes: “Green”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we look for opportunities to refactor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repeat as required!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Double-loop TDD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: But how does this apply when we have functional tests *and* unit tests? Well,
    you can think of the functional test as driving a higher-level version of the
    same cycle, with an inner red/green/refactor loop being required to get an FT
    from Red to Green; see ee [Figure 4-5](#double-loop-tdd-diagram).
  prefs: []
  type: TYPE_NORMAL
- en: '![An inner red/green/refactor loop surrounded by an outer red/green of FTs](assets/double-loop-tdd-simpler.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-5\. Double-Loop TDD: Inner and Outer Loops'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When a new feature or business requirement comes along, we write a new (failing)
    FT to capture a high level view of the requirement. It may not cover every last
    edge case, but it should be enough to reassure ourselves that things are working.
  prefs: []
  type: TYPE_NORMAL
- en: To get that functional test to green, we then enter into the lower-level unit
    tests cycle, where we put together all the moving parts required, add tests for
    all the edge cases. Any time we get to green & refactored at the unit tests level,
    we can pop back up to the FT level to guide us towards the next thing we need
    to work. Once both levels are green, we can do any extra refactoring or work on
    edge cases.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll explore all of the different parts of this workflow in more detail over
    the coming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch04.xhtml#id262-marker)) You could also just use the string `"\n"`, but
    `Keys` also lets you send special keys like Ctrl so I thought I’d show it.
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch04.xhtml#id263-marker)) Python *is* most definitely a joy, but if you
    think I’m being a bit smug here, I don’t blame you! Actually I wish I’d picked
    up on this feeling of self-satisfaction and seen it as a warning sign that I was
    being a little *too* clever. In the next chapter, you’ll see I get my comeuppance.
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch04.xhtml#id270-marker)) Some people like to use another subfolder named
    after the app (i.e., *lists/templates/lists*) and then refer to the template as
    *lists/home.xhtml*. This is called “template namespacing”. I figured it was overcomplicated
    for this small project, but it may be worth it on larger projects. There’s more
    in the [Django tutorial](https://docs.djangoproject.com/en/4.2/intro/tutorial03/#write-views-that-actually-do-something).
  prefs: []
  type: TYPE_NORMAL
