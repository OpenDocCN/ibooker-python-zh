["```py\n$ pipx install --python=3.12 nox\n\n```", "```py\nimport nox\n\n@nox.session\ndef tests(session):\n    session.install(\".\", \"pytest\")\n    session.run(\"pytest\")\n```", "```py\nsession.install(\".\", \"pytest\", \"pytest-httpserver\", \"factory-boy\")\n```", "```py\n$ nox\nnox > Running session tests\nnox > Creating virtual environment (virtualenv) using python in .nox/tests\nnox > python -m pip install . pytest\nnox > pytest\n========================= tests session starts =========================\n...\n========================== 21 passed in 0.94s ==========================\nnox > Session tests was successful.\n\n```", "```py\nsession.install(\"-r\", \"dev-requirements.txt\")\nsession.install(\".\", \"--no-deps\")\n```", "```py\nsession.install(\".[tests]\")\n```", "```py\n$ export NOX_DEFAULT_VENV_BACKEND=uv\n```", "```py\nimport shutil\nfrom pathlib import Path\n\n@nox.session\ndef build(session):\n    session.install(\"build\", \"twine\")\n\n    distdir = Path(\"dist\")\n    if distdir.exists():\n        shutil.rmtree(distdir)\n\n    session.run(\"python\", \"-m\", \"build\")\n    session.run(\"twine\", \"check\", *distdir.glob(\"*\"))\n```", "```py\nnox.options.error_on_external_run = True ![1](assets/1.png)\n```", "```py\n@nox.session\ndef build(session):\n    session.install(\"twine\")\n    session.run(\"poetry\", \"build\", external=True)\n    session.run(\"twine\", \"check\", *Path().glob(\"dist/*\"))\n```", "```py\n$ nox --list\nRun the checks and tasks for this project.\n\nSessions defined in /path/to/noxfile.py:\n\n* tests -> Run the test suite.\n* build -> Build the package.\n\nsessions marked with * are selected, sessions marked with - are skipped.\n\n```", "```py\n$ nox --session tests\n\n```", "```py\nnox.options.sessions = [\"tests\"]\n```", "```py\n$ nox -R\nnox > Running session tests\nnox > Re-using existing virtual environment at .nox/tests.\nnox > pytest\n...\nnox > Session tests was successful.\n\n```", "```py\n@nox.session(python=[\"3.12\", \"3.11\", \"3.10\"])\ndef tests(session):\n    session.install(\".[tests]\")\n    session.run(\"pytest\")\n```", "```py\n$ nox\nnox > Running session tests-3.12\nnox > Creating virtual environment (virtualenv) using python3.12 in .nox/tests-3-12\nnox > python -m pip install . pytest\nnox > pytest\n...\nnox > Session tests-3.12 was successful.\nnox > Running session tests-3.11\n...\nnox > Running session tests-3.10\n...\nnox > Ran multiple sessions:\nnox > * tests-3.12: success\nnox > * tests-3.11: success\nnox > * tests-3.10: success\n\n```", "```py\n$ nox --python 3.12\nnox > Running session tests-3.12\n...\n\n```", "```py\n$ nox --session tests --force-python 3.13\n\n```", "```py\nsession.run(\"pytest\")\n```", "```py\nsession.run(\"pytest\", \"--verbose\")\n```", "```py\n@nox.session(python=[\"3.12\", \"3.11\", \"3.10\"])\ndef tests(session):\n    session.install(\".[tests]\")\n    session.run(\"pytest\", *session.posargs)\n```", "```py\n$ nox --session tests -- --verbose\n\n```", "```py\n@nox.session(python=[\"3.12\", \"3.11\", \"3.10\"])\ndef tests(session):\n    session.install(\".[tests]\")\n    session.run(\"coverage\", \"run\", \"-m\", \"pytest\", *session.posargs)\n```", "```py\n[tool.coverage.run]\nparallel = true\n```", "```py\n[tool.coverage.paths]\nsource = [\"src\", \"*/site-packages\"] ![1](assets/1.png)\n```", "```py\n@nox.session\ndef coverage(session):\n    session.install(\"coverage[toml]\")\n    if any(Path().glob(\".coverage.*\")):\n        session.run(\"coverage\", \"combine\")\n    session.run(\"coverage\", \"report\")\n```", "```py\n$ nox --session coverage\nnox > Running session coverage\nnox > Creating virtual environment (uv) using python in .nox/coverage\nnox > uv pip install 'coverage[toml]'\nnox > coverage combine\nnox > coverage report\nName                  Stmts   Miss Branch BrPart  Cover   Missing\n-----------------------------------------------------------------\nsrc/.../__init__.py      29      2      8      0    95%   42-43\nsrc/.../__main__.py       2      2      0      0     0%   1-3\ntests/__init__.py         0      0      0      0   100%\ntests/test_main.py       36      0      6      0   100%\n-----------------------------------------------------------------\nTOTAL                    67      4     14      0    95%\nCoverage failure: total of 95 is less than fail-under=100\nnox > Command coverage report failed with exit code 2\nnox > Session coverage failed.\n\n```", "```py\n@nox.session(python=[\"3.12\", \"3.11\", \"3.10\"])\ndef tests(session):\n    session.install(\".[tests]\")\n    try:\n        session.run(\"coverage\", \"run\", \"-m\", \"pytest\", *session.posargs)\n    finally:\n        session.notify(\"coverage\")\n```", "```py\nsysconfig.get_path(\"purelib\")\n```", "```py\noutput = session.run(\n    \"python\",\n    \"-c\",\n    \"import sysconfig; print(sysconfig.get_path('purelib'))\",\n    silent=True,\n)\n```", "```py\npurelib = Path(output.strip())\n(purelib / \"_coverage.pth\").write_text(\n    \"import coverage; coverage.process_startup()\"\n)\n```", "```py\ndef install_coverage_pth(session):\n    output = session.run(...)  # see above\n    purelib = Path(output.strip())\n    (purelib / \"_coverage.pth\").write_text(...)  # see above\n```", "```py\n@nox.session(python=[\"3.12\", \"3.11\", \"3.10\"])\ndef tests(session):\n    session.install(\".[tests]\") ![1](assets/1.png)\n    install_coverage_pth(session)\n\n    try:\n        args = [\"coverage\", \"run\", \"-m\", \"pytest\", *session.posargs]\n        session.run(*args, env={\"COVERAGE_PROCESS_START\": \"pyproject.toml\"})\n    finally:\n        session.notify(\"coverage\")\n```", "```py\n$ nox --session coverage\nnox > coverage report\nName                  Stmts   Miss Branch BrPart  Cover   Missing\n-----------------------------------------------------------------\nsrc/.../__init__.py      29      0      8      0   100%\nsrc/.../__main__.py       2      0      0      0   100%\ntests/__init__.py         0      0      0      0   100%\ntests/test_main.py       36      0      6      0   100%\n-----------------------------------------------------------------\nTOTAL                    67      0     14      0   100%\nnox > Session coverage was successful.\n\n```", "```py\n@nox.session\n@nox.parametrize(\"django\", [\"5.*\", \"4.*\", \"3.*\"])\ndef tests(session, django):\n    session.install(\".\", \"pytest-django\", f\"django=={django}\")\n    session.run(\"pytest\")\n```", "```py\n@nox.session\n@nox.parametrize(\"a\", [\"1.0\", \"0.9\"])\n@nox.parametrize(\"b\", [\"2.2\", \"2.1\"])\ndef tests(session, a, b):\n    print(a, b)  # all combinations of a and b\n```", "```py\n@nox.session\n@nox.parametrize([\"a\", \"b\"], [(\"1.0\", \"2.2\"), (\"0.9\", \"2.1\")])\ndef tests(session, a, b):\n    print(a, b)  # only the combinations listed above\n```", "```py\n@nox.session\n@nox.parametrize(\"python\", [\"3.12\", \"3.11\", \"3.10\"])\ndef tests(session):\n    ...\n```", "```py\n@nox.session\n@nox.parametrize(\n    [\"python\", \"django\"],\n    [\n        (python, django)\n        for python in [\"3.12\", \"3.11\", \"3.10\"]\n        for django in [\"3.2.*\", \"4.2.*\"]\n        if (python, django) not in [(\"3.12\", \"3.2\"), (\"3.11\", \"3.2\")]\n    ]\n)\ndef tests(session, django):\n    ...\n```", "```py\n@nox.session\ndef tests(session):\n    session.install(\".[tests]\")\n    ...\n\n@nox.session\ndef coverage(session):\n    session.install(\"coverage[toml]\")\n    ...\n```", "```py\n@nox.session(venv_backend=\"uv\") ![1](assets/1.png)\ndef lock(session):\n    session.run(\n        \"uv\",\n        \"pip\",\n        \"compile\",\n        \"pyproject.toml\",\n        \"--upgrade\",\n        \"--quiet\",\n        \"--all-extras\",\n        \"--output-file=constraints.txt\",\n    )\n```", "```py\n@nox.session(python=[\"3.12\", \"3.11\", \"3.10\"])\ndef tests(session):\n    session.install(\"-c\", \"constraints.txt\", \".[tests]\")\n    ...\n\n@nox.session\ndef coverage(session):\n    session.install(\"-c\", \"constraints.txt\", \"coverage[toml]\")\n    ...\n```", "```py\nimport platform, sys\nfrom pathlib import Path\n\ndef constraints(session):\n    filename = f\"python{session.python}-{sys.platform}-{platform.machine()}.txt\"\n    return Path(\"constraints\") / filename\n```", "```py\n@nox.session(python=[\"3.12\", \"3.11\", \"3.10\"], venv_backend=\"uv\")\ndef lock(session):\n    filename = constraints(session)\n    filename.parent.mkdir(exist_ok=True)\n    session.run(\"uv\", \"pip\", \"compile\", ..., f\"--output-file={filename}\")\n```", "```py\n@nox.session(python=[\"3.12\", \"3.11\", \"3.10\"])\ndef tests(session):\n    session.install(\"-c\", constraints(session), \".\", \"pytest\", \"coverage[toml]\")\n    ...\n\n@nox.session(python=\"3.12\")\ndef coverage(session):\n    session.install(\"-c\", constraints(session), \"coverage[toml]\")\n    ...\n```", "```py\ndef install(session, groups, root=True):\n    if root:\n        groups = [\"main\", *groups]\n\n    session.run_install(\n        \"poetry\",\n        \"install\",\n        \"--no-root\",\n        \"--sync\",\n        f\"--only={','.join(groups)}\",\n        external=True,\n    )\n    if root:\n        session.install(\".\")\n```", "```py\n[tool.poetry.group.coverage.dependencies]\ncoverage = {extras = [\"toml\"], version = \">=7.4.4\"}\n\n[tool.poetry.group.tests.dependencies]\npytest = \">=8.1.1\"\n```", "```py\n@nox.session(python=[\"3.12\", \"3.11\", \"3.10\"])\ndef tests(session):\n    install(session, groups=[\"coverage\", \"tests\"])\n    ...\n```", "```py\n@nox.session\ndef coverage(session):\n    install(session, groups=[\"coverage\"], root=False)\n    ...\n```", "```py\n$ pipx inject nox nox-poetry\n\n```", "```py\nfrom nox_poetry import session\n\n@session\ndef tests(session):\n    session.install(\".\", \"coverage[toml]\", \"pytest\")\n    ...\n```"]