["```py\n$ python3 -m venv testing\n$ source testing/bin/activate\n```", "```py\ndef test_simple():\n    assert True\n\ndef test_fails():\n    assert False\n```", "```py\n$ (testing) pytest\n============================= test session starts =============================\nplatform linux -- Python 3.6.8, pytest-4.4.1, py-1.8.0, pluggy-0.9.0\nrootdir: /home/alfredo/python/testing\ncollected 2 items\n\ntest_basic.py .F                                                        [100%]\n\n================================== FAILURES ===================================\n_________________________________ test_fails __________________________________\n\n    def test_fails():\n>       assert False\nE       assert False\n\ntest_basic.py:6: AssertionError\n===================== 1 failed, 1 passed in 0.02 seconds ======================\n```", "```py\n$ (testing) pytest -q\n\nno tests ran in 0.00 seconds\n```", "```py\n>>> assert \"using assert for errors\" == \"using asert for errors\"\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAssertionError\n```", "```py\n$ (testing) pytest test_long_lines.py\n============================= test session starts =============================\nplatform linux -- Python 3.6.8, pytest-4.4.1, py-1.8.0, pluggy-0.9.0\ncollected 1 item\n\ntest_long_lines.py F                                                    [100%]\n\n================================== FAILURES ===================================\n_______________________________ test_long_lines _______________________________\n\n    def test_long_lines():\n>      assert \"using assert for errors\" == \"using asert for errors\"\nE      AssertionError: assert '...rt for errors' == '...rt for errors'\nE        - using assert for errors\nE        ?        -\nE        + using asert for errors\n\ntest_long_lines.py:2: AssertionError\n========================== 1 failed in 0.04 seconds ===========================\n```", "```py\n    assert ['a', 'very', 'long', 'list', 'of', 'items'] == [\n            'a', 'very', 'long', 'list', 'items']\nE   AssertionError: assert [...'of', 'items'] == [...ist', 'items']\nE     At index 4 diff: 'of' != 'items'\nE     Left contains more items, first extra item: 'items'\nE     Use -v to get the full diff\n```", "```py\nfrom my_module import string_to_bool\n\nclass TestStringToBool(object):\n\n    def test_it_detects_lowercase_yes(self):\n        assert string_to_bool('yes')\n\n    def test_it_detects_odd_case_yes(self):\n        assert string_to_bool('YeS')\n\n    def test_it_detects_uppercase_yes(self):\n        assert string_to_bool('YES')\n\n    def test_it_detects_positive_str_integers(self):\n        assert string_to_bool('1')\n\n    def test_it_detects_true(self):\n        assert string_to_bool('true')\n\n    def test_it_detects_true_with_trailing_spaces(self):\n        assert string_to_bool('true ')\n\n    def test_it_detects_true_with_leading_spaces(self):\n        assert string_to_bool(' true')\n```", "```py\nimport pytest\nfrom my_module import string_to_bool\n\ntrue_values = ['yes', '1', 'Yes', 'TRUE', 'TruE', 'True', 'true']\n\nclass TestStrToBool(object):\n\n    @pytest.mark.parametrize('value', true_values)\n    def test_it_detects_truish_strings(self, value)\n        assert string_to_bool(value)\n```", "```py\ntest_long_lines.py::TestLongLines::test_detects_truish_strings[yes] PASSED\ntest_long_lines.py::TestLongLines::test_detects_truish_strings[1] PASSED\ntest_long_lines.py::TestLongLines::test_detects_truish_strings[Yes] PASSED\ntest_long_lines.py::TestLongLines::test_detects_truish_strings[TRUE] PASSED\ntest_long_lines.py::TestLongLines::test_detects_truish_strings[TruE] PASSED\ntest_long_lines.py::TestLongLines::test_detects_truish_strings[True] PASSED\ntest_long_lines.py::TestLongLines::test_detects_truish_strings[true] PASSED\n```", "```py\n[mon.]\n    key = AQBvaBFZAAAAABAA9VHgwCg3rWn8fMaX8KL01A==\n    caps mon = \"allow *\"\n```", "```py\nimport pytest\nimport random\n\n@pytest.fixture\ndef mon_keyring():\n    def make_keyring(default=False):\n        if default:\n            key = \"AQBvaBFZAAAAABAA9VHgwCg3rWn8fMaX8KL01A==\"\n        else:\n            key = \"%032x==\" % random.getrandbits(128)\n\n        return \"\"\"\n [mon.]\n key = %s\n caps mon = \"allow *\"\n \"\"\" % key\n    return make_keyring\n\ndef test_default_key(mon_keyring):\n    contents = mon_keyring(default=True)\n    assert \"AQBvaBFZAAAAABAA9VHgwCg3rWn8fMaX8KL01A==\" in contents\n```", "```py\n@pytest.fixture\ndef keyring_file(mon_keyring, tmpdir):\n    def generate_file(default=False):\n        keyring = tmpdir.join('keyring')\n        keyring.write_text(mon_keyring(default=default))\n        return keyring.strpath\n    return generate_file\n```", "```py\ndef test_keyring_file_contents(keyring_file):\n    keyring_path = keyring_file(default=True)\n    with open(keyring_path) as fp:\n        contents = fp.read()\n    assert \"AQBvaBFZAAAAABAA9VHgwCg3rWn8fMaX8KL01A==\" in contents\n```", "```py\n$ (testing) pytest  -q --fixtures\n```", "```py\ncapsys\n    enables capturing of writes to sys.stdout/sys.stderr and makes\n    captured output available via ``capsys.readouterr()`` method calls\n    which return a ``(out, err)`` tuple.\nmonkeypatch\n    The returned ``monkeypatch`` funcarg provides these\n    helper methods to modify objects, dictionaries or os.environ::\n\n    monkeypatch.setattr(obj, name, value, raising=True)\n    monkeypatch.delattr(obj, name, raising=True)\n    monkeypatch.setitem(mapping, name, value)\n    monkeypatch.delitem(obj, name, raising=True)\n    monkeypatch.setenv(name, value, prepend=False)\n    monkeypatch.delenv(name, value, raising=True)\n    monkeypatch.syspath_prepend(path)\n    monkeypatch.chdir(path)\n\n    All modifications will be undone after the requesting\n    test function has finished. The ``raising``\n    parameter determines if a KeyError or AttributeError\n    will be raised if the set/deletion operation has no target.\n```", "```py\nimport sys\n\ndef stderr_logging():\n    sys.stderr.write('stderr output being produced')\n\ndef stdout_logging():\n    sys.stdout.write('stdout output being produced')\n\ndef test_verify_stderr(capsys):\n    stderr_logging()\n    out, err = capsys.readouterr()\n    assert out == ''\n    assert err == 'stderr output being produced'\n\ndef test_verify_stdout(capsys):\n    stdout_logging()\n    out, err = capsys.readouterr()\n    assert out == 'stdout output being produced'\n    assert err == ''\n```", "```py\nimport subprocess\n\ndef get_part_entry_type(device):\n    \"\"\"\n Parses the ``ID_PART_ENTRY_TYPE`` from the \"low level\" (bypasses the cache)\n output that uses the ``udev`` type of output.\n \"\"\"\n    stdout = subprocess.check_output(['blkid', '-p', '-o', 'udev', device])\n    for line in stdout.split('\\n'):\n        if 'ID_PART_ENTRY_TYPE=' in line:\n            return line.split('=')[-1].strip()\n    return ''\n```", "```py\ndef test_parses_id_entry_type(monkeypatch):\n    monkeypatch.setattr(\n        'subprocess.check_output',\n        lambda cmd: '\\nID_PART_ENTRY_TYPE=aaaaa')\n    assert get_part_entry_type('/dev/sda') == 'aaaa'\n```", "```py\n$ python3 -m venv validation\n$ source testing/bin/activate\n(validation) $ pip install pytest\n```", "```py\n(validation) $ pip install \"testinfra==2.1.0\"\n```", "```py\n(validation) $ pytest --help\n...\n\ntestinfra:\n  --connection=CONNECTION\n                        Remote connection backend (paramiko, ssh, safe-ssh,\n                        salt, docker, ansible)\n  --hosts=HOSTS         Hosts list (comma separated)\n  --ssh-config=SSH_CONFIG\n                        SSH config file\n  --ssh-identity-file=SSH_IDENTITY_FILE\n                        SSH identify file\n  --sudo                Use sudo\n  --sudo-user=SUDO_USER\n                        sudo user\n  --ansible-inventory=ANSIBLE_INVENTORY\n                        Ansible inventory file\n  --nagios              Nagios plugin\n```", "```py\ndef test_release_file(host):\n    release_file = host.file(\"/etc/os-release\")\n    assert release_file.contains('CentOS')\n    assert release_file.contains('VERSION=\"7 (Core)\"')\n```", "```py\n(validation) $ pytest -v --hosts='ssh://node1,ssh://node2' test_remote.py\n============================= test session starts =============================\nplatform linux -- Python 3.6.8, pytest-4.4.1, py-1.8.0, pluggy-0.9.0\ncachedir: .pytest_cache\nrootdir: /home/alfredo/python/python-devops/samples/chapter16\nplugins: testinfra-3.0.0, xdist-1.28.0, forked-1.0.2\ncollected 2 items\n\ntest_remote.py::test_release_file[ssh://node1] PASSED                   [ 50%]\ntest_remote.py::test_release_file[ssh://node2] PASSED                   [100%]\n\n========================== 2 passed in 3.82 seconds ===========================\n```", "```py\n(validation) $ vagrant ssh-config\n\nHost node1\n  HostName 127.0.0.1\n  User vagrant\n  Port 2200\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /home/alfredo/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n\nHost node2\n  HostName 127.0.0.1\n  User vagrant\n  Port 2222\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /home/alfredo/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n```", "```py\n(validation) $ vagrant ssh-config > ssh-config\n(validation) $ pytest --hosts=default --ssh-config=ssh-config test_remote.py\n```", "```py\n[all]\nnode1\nnode2\n```", "```py\n$ pytest --connection=ansible --ansible-inventory=hosts test_remote.py\n```", "```py\n$ pytest --hosts='ansible://nginx' --connection=ansible \\\n  --ansible-inventory=hosts test_remote.py\n```", "```py\nIn [1]: import testinfra\n\nIn [2]: host = testinfra.get_host('local://')\n\nIn [3]: node_file = host.file('/tmp')\n\nIn [4]: node_file.is_directory\nOut[4]: True\n\nIn [5]: node_file.user\nOut[5]: 'root'\n```", "```py\n$ apt install nginx\n```", "```py\ndef test_nginx_is_installed(host):\n    assert host.package('nginx').is_installed\n```", "```py\n(validate) $ pytest -q --hosts='ssh://node4' test_webserver.py\n.\n1 passed in 1.44 seconds\n```", "```py\ndef test_nginx_is_running(host):\n    assert host.service('nginx').is_running\n```", "```py\n(validate) $ pytest -q --hosts='ssh://node4' test_webserver.py\n.F\n================================== FAILURES ===================================\n_____________________ test_nginx_is_running[ssh://node4] ______________________\n\nhost = <testinfra.host.Host object at 0x7f629bf1d668>\n\n    def test_nginx_is_running(host):\n>       assert host.service('nginx').is_running\nE       AssertionError: assert False\nE        +  where False = <service nginx>.is_running\nE        +    where <service nginx> = <class 'SystemdService'>('nginx')\n\ntest_webserver.py:7: AssertionError\n1 failed, 1 passed in 2.45 seconds\n```", "```py\n(validate) $ systemctl start nginx\n(validate) $ pytest -q --hosts='ssh://node4' test_webserver.py\n..\n2 passed in 2.38 seconds\n```", "```py\ndef test_nginx_listens_on_port_80(host):\n    assert host.socket(\"tcp://0.0.0.0:80\").is_listening\n```", "```py\n(validate) $ pytest -q --hosts='ssh://node4' test_webserver.py\n..F\n================================== FAILURES ===================================\n_________________ test_nginx_listens_on_port_80[ssh://node4] __________________\n\nhost = <testinfra.host.Host object at 0x7fbaa64f26a0>\n\n    def test_nginx_listens_on_port_80(host):\n>       assert host.socket(\"tcp://0.0.0.0:80\").is_listening\nE       AssertionError: assert False\nE        +  where False = <socket tcp://0.0.0.0:80>.is_listening\nE        +    where <socket tcp://0.0.0.0:80> = <class 'LinuxSocketSS'>\n\ntest_webserver.py:11: AssertionError\n1 failed, 2 passed in 2.98 seconds\n```", "```py\n(validate) $ grep \"listen 8080\" /etc/nginx/sites-available/default\n    listen 8080 default_server;\n```", "```py\n(validate) $ grep \"listen 80\" /etc/nginx/sites-available/default\n    listen 80 default_server;\n(validate) $ systemctl restart nginx\n(validate) $ pytest -q --hosts='ssh://node4' test_webserver.py\n...\n3 passed in 2.92 seconds\n```", "```py\ndef test_get_content_from_site(host):\n    output = host.check_output('wget -qO- 0.0.0.0:80')\n    assert 'Welcome to nginx' in output\n```", "```py\n(validate) $ pytest -q --hosts='ssh://node4' test_webserver.py\n....\n4 passed in 3.29 seconds\n```", "```py\nsetup:\n    python3 -m venv ~/.myrepo\n\ninstall:\n    pip install -r requirements.txt\n\ntest:\n    python -m pytest -vv --cov=myrepolib tests/*.py\n    python -m pytest --nbval notebook.ipynb\n\nlint:\n    pylint --disable=R,C myrepolib cli web\n\nall: install lint test\n```"]